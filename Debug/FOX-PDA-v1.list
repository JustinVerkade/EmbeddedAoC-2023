
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024aac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a0  08024c80  08024c80  00034c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026120  08026120  00040af0  2**0
                  CONTENTS
  4 .ARM          00000008  08026120  08026120  00036120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026128  08026128  00040af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08026128  08026128  00036128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026130  08026130  00036130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000af0  20000000  08026134  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002db8  20000af0  08026c24  00040af0  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  200038a8  08026c24  000438a8  2**0
                  ALLOC
 11 .ext_sram     00000000  60000000  60000000  00040af0  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  00040af0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b1c5  00000000  00000000  00040b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008ed0  00000000  00000000  0007bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002900  00000000  00000000  00084bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024f8  00000000  00000000  000874b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038e10  00000000  00000000  000899b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045dff  00000000  00000000  000c27c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108197  00000000  00000000  001085bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00210756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bde4  00000000  00000000  002107a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000af0 	.word	0x20000af0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024c64 	.word	0x08024c64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000af4 	.word	0x20000af4
 800020c:	08024c64 	.word	0x08024c64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_frsub>:
 8000c28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	e002      	b.n	8000c34 <__addsf3>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fsub>:
 8000c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c34 <__addsf3>:
 8000c34:	0042      	lsls	r2, r0, #1
 8000c36:	bf1f      	itttt	ne
 8000c38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c3c:	ea92 0f03 	teqne	r2, r3
 8000c40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c48:	d06a      	beq.n	8000d20 <__addsf3+0xec>
 8000c4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c52:	bfc1      	itttt	gt
 8000c54:	18d2      	addgt	r2, r2, r3
 8000c56:	4041      	eorgt	r1, r0
 8000c58:	4048      	eorgt	r0, r1
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	bfb8      	it	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	2b19      	cmp	r3, #25
 8000c62:	bf88      	it	hi
 8000c64:	4770      	bxhi	lr
 8000c66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4249      	negne	r1, r1
 8000c86:	ea92 0f03 	teq	r2, r3
 8000c8a:	d03f      	beq.n	8000d0c <__addsf3+0xd8>
 8000c8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c90:	fa41 fc03 	asr.w	ip, r1, r3
 8000c94:	eb10 000c 	adds.w	r0, r0, ip
 8000c98:	f1c3 0320 	rsb	r3, r3, #32
 8000c9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__addsf3+0x78>
 8000ca6:	4249      	negs	r1, r1
 8000ca8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb0:	d313      	bcc.n	8000cda <__addsf3+0xa6>
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d306      	bcc.n	8000cc6 <__addsf3+0x92>
 8000cb8:	0840      	lsrs	r0, r0, #1
 8000cba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cbe:	f102 0201 	add.w	r2, r2, #1
 8000cc2:	2afe      	cmp	r2, #254	; 0xfe
 8000cc4:	d251      	bcs.n	8000d6a <__addsf3+0x136>
 8000cc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	ea40 0003 	orr.w	r0, r0, r3
 8000cd8:	4770      	bx	lr
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	eb40 0000 	adc.w	r0, r0, r0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ce8:	d2ed      	bcs.n	8000cc6 <__addsf3+0x92>
 8000cea:	fab0 fc80 	clz	ip, r0
 8000cee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfa:	bfaa      	itet	ge
 8000cfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d00:	4252      	neglt	r2, r2
 8000d02:	4318      	orrge	r0, r3
 8000d04:	bfbc      	itt	lt
 8000d06:	40d0      	lsrlt	r0, r2
 8000d08:	4318      	orrlt	r0, r3
 8000d0a:	4770      	bx	lr
 8000d0c:	f092 0f00 	teq	r2, #0
 8000d10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d14:	bf06      	itte	eq
 8000d16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1a:	3201      	addeq	r2, #1
 8000d1c:	3b01      	subne	r3, #1
 8000d1e:	e7b5      	b.n	8000c8c <__addsf3+0x58>
 8000d20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d28:	bf18      	it	ne
 8000d2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d2e:	d021      	beq.n	8000d74 <__addsf3+0x140>
 8000d30:	ea92 0f03 	teq	r2, r3
 8000d34:	d004      	beq.n	8000d40 <__addsf3+0x10c>
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	4770      	bx	lr
 8000d40:	ea90 0f01 	teq	r0, r1
 8000d44:	bf1c      	itt	ne
 8000d46:	2000      	movne	r0, #0
 8000d48:	4770      	bxne	lr
 8000d4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d4e:	d104      	bne.n	8000d5a <__addsf3+0x126>
 8000d50:	0040      	lsls	r0, r0, #1
 8000d52:	bf28      	it	cs
 8000d54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d5e:	bf3c      	itt	cc
 8000d60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bxcc	lr
 8000d66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	4770      	bx	lr
 8000d74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d78:	bf16      	itet	ne
 8000d7a:	4608      	movne	r0, r1
 8000d7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d80:	4601      	movne	r1, r0
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	bf06      	itte	eq
 8000d86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8a:	ea90 0f01 	teqeq	r0, r1
 8000d8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_ui2f>:
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e004      	b.n	8000da4 <__aeabi_i2f+0x8>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_i2f>:
 8000d9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da0:	bf48      	it	mi
 8000da2:	4240      	negmi	r0, r0
 8000da4:	ea5f 0c00 	movs.w	ip, r0
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db0:	4601      	mov	r1, r0
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	e01c      	b.n	8000df2 <__aeabi_l2f+0x2a>

08000db8 <__aeabi_ul2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e00a      	b.n	8000ddc <__aeabi_l2f+0x14>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_l2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd4:	d502      	bpl.n	8000ddc <__aeabi_l2f+0x14>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	ea5f 0c01 	movs.w	ip, r1
 8000de0:	bf02      	ittt	eq
 8000de2:	4684      	moveq	ip, r0
 8000de4:	4601      	moveq	r1, r0
 8000de6:	2000      	moveq	r0, #0
 8000de8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dec:	bf08      	it	eq
 8000dee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000df6:	fabc f28c 	clz	r2, ip
 8000dfa:	3a08      	subs	r2, #8
 8000dfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e00:	db10      	blt.n	8000e24 <__aeabi_l2f+0x5c>
 8000e02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e06:	4463      	add	r3, ip
 8000e08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e14:	fa20 f202 	lsr.w	r2, r0, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	f020 0001 	biceq.w	r0, r0, #1
 8000e22:	4770      	bx	lr
 8000e24:	f102 0220 	add.w	r2, r2, #32
 8000e28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e34:	fa21 f202 	lsr.w	r2, r1, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_uldivmod>:
 8000e44:	b953      	cbnz	r3, 8000e5c <__aeabi_uldivmod+0x18>
 8000e46:	b94a      	cbnz	r2, 8000e5c <__aeabi_uldivmod+0x18>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	bf08      	it	eq
 8000e4c:	2800      	cmpeq	r0, #0
 8000e4e:	bf1c      	itt	ne
 8000e50:	f04f 31ff 	movne.w	r1, #4294967295
 8000e54:	f04f 30ff 	movne.w	r0, #4294967295
 8000e58:	f000 b992 	b.w	8001180 <__aeabi_idiv0>
 8000e5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e64:	f000 f824 	bl	8000eb0 <__udivmoddi4>
 8000e68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e70:	b004      	add	sp, #16
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_d2ulz>:
 8000e74:	b5d0      	push	{r4, r6, r7, lr}
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__aeabi_d2ulz+0x34>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4606      	mov	r6, r0
 8000e7c:	460f      	mov	r7, r1
 8000e7e:	f7ff fbdb 	bl	8000638 <__aeabi_dmul>
 8000e82:	f7ff feb1 	bl	8000be8 <__aeabi_d2uiz>
 8000e86:	4604      	mov	r4, r0
 8000e88:	f7ff fb5c 	bl	8000544 <__aeabi_ui2d>
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <__aeabi_d2ulz+0x38>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f7ff fbd2 	bl	8000638 <__aeabi_dmul>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4630      	mov	r0, r6
 8000e9a:	4639      	mov	r1, r7
 8000e9c:	f7ff fa14 	bl	80002c8 <__aeabi_dsub>
 8000ea0:	f7ff fea2 	bl	8000be8 <__aeabi_d2uiz>
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ea8:	3df00000 	.word	0x3df00000
 8000eac:	41f00000 	.word	0x41f00000

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <AdventOfCode_init>:
		AdventOfCode_return_t(*aoc_day_21)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_22)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_23)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_24)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_25)(AdventOfCode_config_t))
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
	aoc->aoc_func_list[0] = aoc_day_01;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	601a      	str	r2, [r3, #0]
	aoc->aoc_func_list[1] = aoc_day_02;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
	aoc->aoc_func_list[2] = aoc_day_03;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	609a      	str	r2, [r3, #8]
	aoc->aoc_func_list[3] = aoc_day_04;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	60da      	str	r2, [r3, #12]
	aoc->aoc_func_list[4] = aoc_day_05;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	611a      	str	r2, [r3, #16]
	aoc->aoc_func_list[5] = aoc_day_06;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a3a      	ldr	r2, [r7, #32]
 80011b4:	615a      	str	r2, [r3, #20]
	aoc->aoc_func_list[6] = aoc_day_07;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ba:	619a      	str	r2, [r3, #24]
	aoc->aoc_func_list[7] = aoc_day_08;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c0:	61da      	str	r2, [r3, #28]
	aoc->aoc_func_list[8] = aoc_day_09;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c6:	621a      	str	r2, [r3, #32]
	aoc->aoc_func_list[9] = aoc_day_10;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
	aoc->aoc_func_list[10] = aoc_day_11;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
	aoc->aoc_func_list[11] = aoc_day_12;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
	aoc->aoc_func_list[12] = aoc_day_13;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
	aoc->aoc_func_list[13] = aoc_day_14;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
	aoc->aoc_func_list[14] = aoc_day_15;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
	aoc->aoc_func_list[15] = aoc_day_16;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c
	aoc->aoc_func_list[16] = aoc_day_17;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
	aoc->aoc_func_list[17] = aoc_day_18;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
	aoc->aoc_func_list[18] = aoc_day_19;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001202:	649a      	str	r2, [r3, #72]	; 0x48
	aoc->aoc_func_list[19] = aoc_day_20;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001208:	64da      	str	r2, [r3, #76]	; 0x4c
	aoc->aoc_func_list[20] = aoc_day_21;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800120e:	651a      	str	r2, [r3, #80]	; 0x50
	aoc->aoc_func_list[21] = aoc_day_22;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
	aoc->aoc_func_list[22] = aoc_day_23;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800121a:	659a      	str	r2, [r3, #88]	; 0x58
	aoc->aoc_func_list[23] = aoc_day_24;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001220:	65da      	str	r2, [r3, #92]	; 0x5c
	aoc->aoc_func_list[24] = aoc_day_25;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001226:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <AdventOfCode_print>:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, line, strlen(line));
	}
}

void AdventOfCode_print(AdventOfCode_config_t config, char *text, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	73fb      	strb	r3, [r7, #15]
	if(config == AOC_CONFIG_TEST || config == AOC_CONFIG_DEBUG || config == AOC_CONFIG_RELEASE)
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d014      	beq.n	8001272 <AdventOfCode_print+0x3e>
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d011      	beq.n	8001272 <AdventOfCode_print+0x3e>
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d00e      	beq.n	8001272 <AdventOfCode_print+0x3e>
		return;
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001254:	bf00      	nop
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <AdventOfCode_print+0x48>)
 8001258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800125c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f8      	bne.n	8001256 <AdventOfCode_print+0x22>
	CDC_Transmit_HS((uint8_t*)text, len);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f01c fdcc 	bl	801de08 <CDC_Transmit_HS>
 8001270:	e000      	b.n	8001274 <AdventOfCode_print+0x40>
		return;
 8001272:	bf00      	nop
}
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200017a8 	.word	0x200017a8

08001280 <AoC_Day_01>:
 */

#include "AoC/Days/Day01.h"

AdventOfCode_return_t AoC_Day_01(AdventOfCode_config_t config)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8001286:	af00      	add	r7, sp, #0
 8001288:	4602      	mov	r2, r0
 800128a:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800128e:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001292:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001294:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001298:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <AoC_Day_01+0x26>
		return AOC_RETURN_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e20c      	b.n	80016c0 <AoC_Day_01+0x440>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80012a6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80012aa:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d10a      	bne.n	80012ca <AoC_Day_01+0x4a>
			ret = f_open(&file, "day1t.txt", FA_READ);
 80012b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012b8:	2201      	movs	r2, #1
 80012ba:	49ba      	ldr	r1, [pc, #744]	; (80015a4 <AoC_Day_01+0x324>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f01b fd4b 	bl	801cd58 <f_open>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
 80012c8:	e009      	b.n	80012de <AoC_Day_01+0x5e>
		else ret = f_open(&file, "day1.txt", FA_READ);
 80012ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012ce:	2201      	movs	r2, #1
 80012d0:	49b5      	ldr	r1, [pc, #724]	; (80015a8 <AoC_Day_01+0x328>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f01b fd40 	bl	801cd58 <f_open>
 80012d8:	4603      	mov	r3, r0
 80012da:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
		if(ret != FR_OK)
 80012de:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <AoC_Day_01+0x7e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80012e6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80012ea:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2213      	movs	r2, #19
 80012f2:	49ae      	ldr	r1, [pc, #696]	; (80015ac <AoC_Day_01+0x32c>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff9d 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1e0      	b.n	80016c0 <AoC_Day_01+0x440>
		}

		// process data
		char buffer[128];
		int32_t sum_of_values = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(f_gets(buffer, 64, &file))
 8001304:	e053      	b.n	80013ae <AoC_Day_01+0x12e>
		{
			char *buffer_ptr = buffer;
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
			uint8_t concat_ptr = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
			char concat_buffer[128];
			memset(concat_buffer, 0x00, 128);
 8001314:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f01d ffef 	bl	801f300 <memset>
			char c = *buffer_ptr++;
 8001322:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
			while(c != 0x00)
 8001332:	e029      	b.n	8001388 <AoC_Day_01+0x108>
			{
				if(c >= '0' && c <= '9')
 8001334:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 8001338:	2b2f      	cmp	r3, #47	; 0x2f
 800133a:	d91d      	bls.n	8001378 <AoC_Day_01+0xf8>
 800133c:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 8001340:	2b39      	cmp	r3, #57	; 0x39
 8001342:	d819      	bhi.n	8001378 <AoC_Day_01+0xf8>
				{
					concat_buffer[concat_ptr] = c;
 8001344:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 8001348:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800134c:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8001350:	f897 1352 	ldrb.w	r1, [r7, #850]	; 0x352
 8001354:	54d1      	strb	r1, [r2, r3]
					if(concat_ptr == 0)
 8001356:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <AoC_Day_01+0xf2>
						concat_buffer[concat_ptr + 1] = c;
 800135e:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 8001362:	3301      	adds	r3, #1
 8001364:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001368:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800136c:	f897 1352 	ldrb.w	r1, [r7, #850]	; 0x352
 8001370:	54d1      	strb	r1, [r2, r3]
					concat_ptr = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
				}
				c = *buffer_ptr++;
 8001378:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
			while(c != 0x00)
 8001388:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1d1      	bne.n	8001334 <AoC_Day_01+0xb4>
			}
			uint32_t value = atol(concat_buffer);
 8001390:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001394:	4618      	mov	r0, r3
 8001396:	f01d fd17 	bl	801edc8 <atol>
 800139a:	4603      	mov	r3, r0
 800139c:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
			sum_of_values += value;
 80013a0:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80013a4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80013a8:	4413      	add	r3, r2
 80013aa:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(f_gets(buffer, 64, &file))
 80013ae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4618      	mov	r0, r3
 80013ba:	f01c fba1 	bl	801db00 <f_gets>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1a0      	bne.n	8001306 <AoC_Day_01+0x86>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 80013c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013c8:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80013cc:	4978      	ldr	r1, [pc, #480]	; (80015b0 <AoC_Day_01+0x330>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f01d ffba 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80013d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff19 	bl	8000210 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80013e6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80013ea:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff1f 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80013f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013fa:	4618      	mov	r0, r3
 80013fc:	f01c f99c 	bl	801d738 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001400:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001404:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d10a      	bne.n	8001424 <AoC_Day_01+0x1a4>
			ret = f_open(&file, "day1t2.txt", FA_READ);
 800140e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001412:	2201      	movs	r2, #1
 8001414:	4967      	ldr	r1, [pc, #412]	; (80015b4 <AoC_Day_01+0x334>)
 8001416:	4618      	mov	r0, r3
 8001418:	f01b fc9e 	bl	801cd58 <f_open>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
 8001422:	e009      	b.n	8001438 <AoC_Day_01+0x1b8>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001428:	2201      	movs	r2, #1
 800142a:	495f      	ldr	r1, [pc, #380]	; (80015a8 <AoC_Day_01+0x328>)
 800142c:	4618      	mov	r0, r3
 800142e:	f01b fc93 	bl	801cd58 <f_open>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
		if(ret != FR_OK)
 8001438:	f897 3351 	ldrb.w	r3, [r7, #849]	; 0x351
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <AoC_Day_01+0x1d8>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8001440:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001444:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2213      	movs	r2, #19
 800144c:	4957      	ldr	r1, [pc, #348]	; (80015ac <AoC_Day_01+0x32c>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fef0 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001454:	2301      	movs	r3, #1
 8001456:	e133      	b.n	80016c0 <AoC_Day_01+0x440>
		}

		// process data
		char buffer[128];
		int32_t sum_of_values = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		while(f_gets(buffer, 64, &file))
 800145e:	e104      	b.n	800166a <AoC_Day_01+0x3ea>
		{
			char *buffer_ptr = buffer;
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
			uint8_t concat_ptr = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
			char concat_buffer[128];
			memset(concat_buffer, 0x00, 128);
 800146e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f01d ff42 	bl	801f300 <memset>
			while(*buffer_ptr != 0x00)
 800147c:	e0e0      	b.n	8001640 <AoC_Day_01+0x3c0>
			{
				char c = *buffer_ptr;
 800147e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f

				// check if value
				if(c >= '0' && c <= '9')
 8001488:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 800148c:	2b2f      	cmp	r3, #47	; 0x2f
 800148e:	d91d      	bls.n	80014cc <AoC_Day_01+0x24c>
 8001490:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8001494:	2b39      	cmp	r3, #57	; 0x39
 8001496:	d819      	bhi.n	80014cc <AoC_Day_01+0x24c>
				{
					concat_buffer[concat_ptr] = c;
 8001498:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800149c:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80014a0:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 80014a4:	f897 133f 	ldrb.w	r1, [r7, #831]	; 0x33f
 80014a8:	54d1      	strb	r1, [r2, r3]
					if(concat_ptr == 0)
 80014aa:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <AoC_Day_01+0x246>
						concat_buffer[concat_ptr + 1] = c;
 80014b2:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80014b6:	3301      	adds	r3, #1
 80014b8:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80014bc:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 80014c0:	f897 133f 	ldrb.w	r1, [r7, #831]	; 0x33f
 80014c4:	54d1      	strb	r1, [r2, r3]
					concat_ptr = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
				}
				// check if text
				char txt = 0x00;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
				if(!memcmp("one", buffer_ptr, 3))
 80014d2:	2203      	movs	r2, #3
 80014d4:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <AoC_Day_01+0x338>)
 80014da:	f01d fef3 	bl	801f2c4 <memcmp>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <AoC_Day_01+0x26c>
					txt = '1';
 80014e4:	2331      	movs	r3, #49	; 0x31
 80014e6:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 80014ea:	e081      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("two", buffer_ptr, 3))
 80014ec:	2203      	movs	r2, #3
 80014ee:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80014f2:	4832      	ldr	r0, [pc, #200]	; (80015bc <AoC_Day_01+0x33c>)
 80014f4:	f01d fee6 	bl	801f2c4 <memcmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <AoC_Day_01+0x286>
					txt = '2';
 80014fe:	2332      	movs	r3, #50	; 0x32
 8001500:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001504:	e074      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("three", buffer_ptr, 5))
 8001506:	2205      	movs	r2, #5
 8001508:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 800150c:	482c      	ldr	r0, [pc, #176]	; (80015c0 <AoC_Day_01+0x340>)
 800150e:	f01d fed9 	bl	801f2c4 <memcmp>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <AoC_Day_01+0x2a0>
					txt = '3';
 8001518:	2333      	movs	r3, #51	; 0x33
 800151a:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 800151e:	e067      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("four", buffer_ptr, 4))
 8001520:	2204      	movs	r2, #4
 8001522:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001526:	4827      	ldr	r0, [pc, #156]	; (80015c4 <AoC_Day_01+0x344>)
 8001528:	f01d fecc 	bl	801f2c4 <memcmp>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <AoC_Day_01+0x2ba>
					txt = '4';
 8001532:	2334      	movs	r3, #52	; 0x34
 8001534:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001538:	e05a      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("five", buffer_ptr, 4))
 800153a:	2204      	movs	r2, #4
 800153c:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <AoC_Day_01+0x348>)
 8001542:	f01d febf 	bl	801f2c4 <memcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <AoC_Day_01+0x2d4>
					txt = '5';
 800154c:	2335      	movs	r3, #53	; 0x35
 800154e:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001552:	e04d      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("six", buffer_ptr, 3))
 8001554:	2203      	movs	r2, #3
 8001556:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 800155a:	481c      	ldr	r0, [pc, #112]	; (80015cc <AoC_Day_01+0x34c>)
 800155c:	f01d feb2 	bl	801f2c4 <memcmp>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <AoC_Day_01+0x2ee>
					txt = '6';
 8001566:	2336      	movs	r3, #54	; 0x36
 8001568:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 800156c:	e040      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("seven", buffer_ptr, 5))
 800156e:	2205      	movs	r2, #5
 8001570:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 8001574:	4816      	ldr	r0, [pc, #88]	; (80015d0 <AoC_Day_01+0x350>)
 8001576:	f01d fea5 	bl	801f2c4 <memcmp>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <AoC_Day_01+0x308>
					txt = '7';
 8001580:	2337      	movs	r3, #55	; 0x37
 8001582:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 8001586:	e033      	b.n	80015f0 <AoC_Day_01+0x370>
				else if(!memcmp("eight", buffer_ptr, 5))
 8001588:	2205      	movs	r2, #5
 800158a:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <AoC_Day_01+0x354>)
 8001590:	f01d fe98 	bl	801f2c4 <memcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11e      	bne.n	80015d8 <AoC_Day_01+0x358>
					txt = '8';
 800159a:	2338      	movs	r3, #56	; 0x38
 800159c:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
 80015a0:	e026      	b.n	80015f0 <AoC_Day_01+0x370>
 80015a2:	bf00      	nop
 80015a4:	08024c80 	.word	0x08024c80
 80015a8:	08024c8c 	.word	0x08024c8c
 80015ac:	08024c98 	.word	0x08024c98
 80015b0:	08024cb0 	.word	0x08024cb0
 80015b4:	08024cc8 	.word	0x08024cc8
 80015b8:	08024cd4 	.word	0x08024cd4
 80015bc:	08024cd8 	.word	0x08024cd8
 80015c0:	08024cdc 	.word	0x08024cdc
 80015c4:	08024ce4 	.word	0x08024ce4
 80015c8:	08024cec 	.word	0x08024cec
 80015cc:	08024cf4 	.word	0x08024cf4
 80015d0:	08024cf8 	.word	0x08024cf8
 80015d4:	08024d00 	.word	0x08024d00
				else if(!memcmp("nine", buffer_ptr, 4))
 80015d8:	2204      	movs	r2, #4
 80015da:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80015de:	483b      	ldr	r0, [pc, #236]	; (80016cc <AoC_Day_01+0x44c>)
 80015e0:	f01d fe70 	bl	801f2c4 <memcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <AoC_Day_01+0x370>
					txt = '9';
 80015ea:	2339      	movs	r3, #57	; 0x39
 80015ec:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346

				if(txt != 0x00)
 80015f0:	f897 3346 	ldrb.w	r3, [r7, #838]	; 0x346
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d019      	beq.n	800162c <AoC_Day_01+0x3ac>
				{
					concat_buffer[concat_ptr] = txt;
 80015f8:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80015fc:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001600:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8001604:	f897 1346 	ldrb.w	r1, [r7, #838]	; 0x346
 8001608:	54d1      	strb	r1, [r2, r3]
					if(concat_ptr == 0)
 800160a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <AoC_Day_01+0x3a6>
						concat_buffer[concat_ptr + 1] = txt;
 8001612:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8001616:	3301      	adds	r3, #1
 8001618:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800161c:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8001620:	f897 1346 	ldrb.w	r1, [r7, #838]	; 0x346
 8001624:	54d1      	strb	r1, [r2, r3]
					concat_ptr = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
				}

				c = *++buffer_ptr;
 800162c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8001630:	3301      	adds	r3, #1
 8001632:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8001636:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
			while(*buffer_ptr != 0x00)
 8001640:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f af19 	bne.w	800147e <AoC_Day_01+0x1fe>
			}
			uint32_t value = atol(concat_buffer);
 800164c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001650:	4618      	mov	r0, r3
 8001652:	f01d fbb9 	bl	801edc8 <atol>
 8001656:	4603      	mov	r3, r0
 8001658:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
			sum_of_values += value;
 800165c:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8001660:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8001664:	4413      	add	r3, r2
 8001666:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		while(f_gets(buffer, 64, &file))
 800166a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	4618      	mov	r0, r3
 8001676:	f01c fa43 	bl	801db00 <f_gets>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f aeef 	bne.w	8001460 <AoC_Day_01+0x1e0>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 8001682:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001686:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 800168a:	4911      	ldr	r1, [pc, #68]	; (80016d0 <AoC_Day_01+0x450>)
 800168c:	4618      	mov	r0, r3
 800168e:	f01d fe5b 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8001692:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fdba 	bl	8000210 <strlen>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80016a4:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016a8:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fdc0 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80016b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016b8:	4618      	mov	r0, r3
 80016ba:	f01c f83d 	bl	801d738 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	f507 7758 	add.w	r7, r7, #864	; 0x360
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	08024d08 	.word	0x08024d08
 80016d0:	08024d10 	.word	0x08024d10

080016d4 <AoC_Day_02>:
 */

#include "AoC/Days/Day02.h"

AdventOfCode_return_t AoC_Day_02(AdventOfCode_config_t config)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	f2ad 7dac 	subw	sp, sp, #1964	; 0x7ac
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4602      	mov	r2, r0
 80016de:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80016e2:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 80016e6:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80016e8:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80016ec:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <AoC_Day_02+0x26>
		return AOC_RETURN_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e2d6      	b.n	8001ca8 <AoC_Day_02+0x5d4>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80016fa:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80016fe:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d10a      	bne.n	800171e <AoC_Day_02+0x4a>
			ret = f_open(&file, "day2t.txt", FA_READ);
 8001708:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800170c:	2201      	movs	r2, #1
 800170e:	49cd      	ldr	r1, [pc, #820]	; (8001a44 <AoC_Day_02+0x370>)
 8001710:	4618      	mov	r0, r3
 8001712:	f01b fb21 	bl	801cd58 <f_open>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 37a7 	strb.w	r3, [r7, #1959]	; 0x7a7
 800171c:	e009      	b.n	8001732 <AoC_Day_02+0x5e>
		else ret = f_open(&file, "day2.txt", FA_READ);
 800171e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001722:	2201      	movs	r2, #1
 8001724:	49c8      	ldr	r1, [pc, #800]	; (8001a48 <AoC_Day_02+0x374>)
 8001726:	4618      	mov	r0, r3
 8001728:	f01b fb16 	bl	801cd58 <f_open>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 37a7 	strb.w	r3, [r7, #1959]	; 0x7a7
		if(ret != FR_OK)
 8001732:	f897 37a7 	ldrb.w	r3, [r7, #1959]	; 0x7a7
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <AoC_Day_02+0x7e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800173a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800173e:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2213      	movs	r2, #19
 8001746:	49c1      	ldr	r1, [pc, #772]	; (8001a4c <AoC_Day_02+0x378>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fd73 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 800174e:	2301      	movs	r3, #1
 8001750:	e2aa      	b.n	8001ca8 <AoC_Day_02+0x5d4>
		}

		// init counter variables
		const uint32_t red_cubes_limit = 12;
 8001752:	230c      	movs	r3, #12
 8001754:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
		const uint32_t blue_cubes_limit = 14;
 8001758:	230e      	movs	r3, #14
 800175a:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
		const uint32_t green_cubes_limit = 13;
 800175e:	230d      	movs	r3, #13
 8001760:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754

		// process data
		char buffer[256];
		int32_t sum_of_values = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
		while(f_gets(buffer, 256, &file))
 800176a:	e0fc      	b.n	8001966 <AoC_Day_02+0x292>
		{
			// tokenize data
			char token_buffer[64][16];
			memset(token_buffer, 0x00, 64 * 16);
 800176c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f01d fdc2 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	49b3      	ldr	r1, [pc, #716]	; (8001a50 <AoC_Day_02+0x37c>)
 8001782:	4618      	mov	r0, r3
 8001784:	f01d fe10 	bl	801f3a8 <strtok>
 8001788:	f8c7 079c 	str.w	r0, [r7, #1948]	; 0x79c
			uint8_t token_counter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
			while(token != NULL && token_counter < 64)
 8001792:	e01b      	b.n	80017cc <AoC_Day_02+0xf8>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8001794:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8001798:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	18d4      	adds	r4, r2, r3
 80017a0:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 80017a4:	f7fe fd34 	bl	8000210 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 80017b0:	4620      	mov	r0, r4
 80017b2:	f01d fd97 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 80017b6:	49a6      	ldr	r1, [pc, #664]	; (8001a50 <AoC_Day_02+0x37c>)
 80017b8:	2000      	movs	r0, #0
 80017ba:	f01d fdf5 	bl	801f3a8 <strtok>
 80017be:	f8c7 079c 	str.w	r0, [r7, #1948]	; 0x79c
				token_counter++;
 80017c2:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 80017c6:	3301      	adds	r3, #1
 80017c8:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
			while(token != NULL && token_counter < 64)
 80017cc:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <AoC_Day_02+0x108>
 80017d4:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 80017d8:	2b3f      	cmp	r3, #63	; 0x3f
 80017da:	d9db      	bls.n	8001794 <AoC_Day_02+0xc0>
			}

			if(token_counter == 0)
 80017dc:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <AoC_Day_02+0x112>
 80017e4:	e0bf      	b.n	8001966 <AoC_Day_02+0x292>
				continue;

			// counter cubes
			uint32_t red_cubes = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
			uint32_t blue_cubes = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
			uint32_t green_cubes = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c

			// process tokens
			uint8_t valid_flag = 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 378b 	strb.w	r3, [r7, #1931]	; 0x78b
			uint8_t token_ptr = 2;
 80017fe:	2302      	movs	r3, #2
 8001800:	f887 378a 	strb.w	r3, [r7, #1930]	; 0x78a
			while(token_ptr <= token_counter)
 8001804:	e094      	b.n	8001930 <AoC_Day_02+0x25c>
			{
				// get value
				uint32_t cubes = atoi(token_buffer[token_ptr]);
 8001806:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 800180a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f01d fad4 	bl	801edc0 <atoi>
 8001818:	4603      	mov	r3, r0
 800181a:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744

				// add to specific color
				if(!memcmp("green", token_buffer[token_ptr+1], 5))
 800181e:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 8001822:	3301      	adds	r3, #1
 8001824:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	2205      	movs	r2, #5
 800182e:	4619      	mov	r1, r3
 8001830:	4888      	ldr	r0, [pc, #544]	; (8001a54 <AoC_Day_02+0x380>)
 8001832:	f01d fd47 	bl	801f2c4 <memcmp>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <AoC_Day_02+0x178>
					green_cubes += cubes;
 800183c:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 8001840:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001844:	4413      	add	r3, r2
 8001846:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 800184a:	e02c      	b.n	80018a6 <AoC_Day_02+0x1d2>
				else if(!memcmp("blue", token_buffer[token_ptr+1], 4))
 800184c:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 8001850:	3301      	adds	r3, #1
 8001852:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	2204      	movs	r2, #4
 800185c:	4619      	mov	r1, r3
 800185e:	487e      	ldr	r0, [pc, #504]	; (8001a58 <AoC_Day_02+0x384>)
 8001860:	f01d fd30 	bl	801f2c4 <memcmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d107      	bne.n	800187a <AoC_Day_02+0x1a6>
					blue_cubes += cubes;
 800186a:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800186e:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001872:	4413      	add	r3, r2
 8001874:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
 8001878:	e015      	b.n	80018a6 <AoC_Day_02+0x1d2>
				else if(!memcmp("red", token_buffer[token_ptr+1], 3))
 800187a:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 800187e:	3301      	adds	r3, #1
 8001880:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	2203      	movs	r2, #3
 800188a:	4619      	mov	r1, r3
 800188c:	4873      	ldr	r0, [pc, #460]	; (8001a5c <AoC_Day_02+0x388>)
 800188e:	f01d fd19 	bl	801f2c4 <memcmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d106      	bne.n	80018a6 <AoC_Day_02+0x1d2>
					red_cubes += cubes;
 8001898:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800189c:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80018a0:	4413      	add	r3, r2
 80018a2:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794

				// check if end of game
				char end_token = token_buffer[token_ptr+1][strlen(token_buffer[token_ptr+1])-1];
 80018a6:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 80018aa:	1c5c      	adds	r4, r3, #1
 80018ac:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 80018b0:	3301      	adds	r3, #1
 80018b2:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fca8 	bl	8000210 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 80018c8:	f2a2 416c 	subw	r1, r2, #1132	; 0x46c
 80018cc:	0122      	lsls	r2, r4, #4
 80018ce:	440a      	add	r2, r1
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f887 3743 	strb.w	r3, [r7, #1859]	; 0x743
				if(end_token == ';' || end_token == '\0')
 80018d8:	f897 3743 	ldrb.w	r3, [r7, #1859]	; 0x743
 80018dc:	2b3b      	cmp	r3, #59	; 0x3b
 80018de:	d003      	beq.n	80018e8 <AoC_Day_02+0x214>
 80018e0:	f897 3743 	ldrb.w	r3, [r7, #1859]	; 0x743
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11e      	bne.n	8001926 <AoC_Day_02+0x252>
				{
					if(red_cubes > red_cubes_limit || blue_cubes > blue_cubes_limit || green_cubes > green_cubes_limit)
 80018e8:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 80018ec:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d80b      	bhi.n	800190c <AoC_Day_02+0x238>
 80018f4:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 80018f8:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d805      	bhi.n	800190c <AoC_Day_02+0x238>
 8001900:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 8001904:	f8d7 3754 	ldr.w	r3, [r7, #1876]	; 0x754
 8001908:	429a      	cmp	r2, r3
 800190a:	d903      	bls.n	8001914 <AoC_Day_02+0x240>
					{
						valid_flag = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 378b 	strb.w	r3, [r7, #1931]	; 0x78b
						break;
 8001912:	e014      	b.n	800193e <AoC_Day_02+0x26a>
					}

					// reset cubes
					red_cubes = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
					blue_cubes = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
					green_cubes = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
				}
				token_ptr += 2;
 8001926:	f897 378a 	ldrb.w	r3, [r7, #1930]	; 0x78a
 800192a:	3302      	adds	r3, #2
 800192c:	f887 378a 	strb.w	r3, [r7, #1930]	; 0x78a
			while(token_ptr <= token_counter)
 8001930:	f897 278a 	ldrb.w	r2, [r7, #1930]	; 0x78a
 8001934:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8001938:	429a      	cmp	r2, r3
 800193a:	f67f af64 	bls.w	8001806 <AoC_Day_02+0x132>
			}

			// check if valid game
			if(valid_flag)
 800193e:	f897 378b 	ldrb.w	r3, [r7, #1931]	; 0x78b
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00f      	beq.n	8001966 <AoC_Day_02+0x292>
			{
				uint32_t id = atoi(token_buffer[1]);
 8001946:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800194a:	3310      	adds	r3, #16
 800194c:	4618      	mov	r0, r3
 800194e:	f01d fa37 	bl	801edc0 <atoi>
 8001952:	4603      	mov	r3, r0
 8001954:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
				sum_of_values += id;
 8001958:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800195c:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
		while(f_gets(buffer, 256, &file))
 8001966:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001972:	4618      	mov	r0, r3
 8001974:	f01c f8c4 	bl	801db00 <f_gets>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	f47f aef6 	bne.w	800176c <AoC_Day_02+0x98>
			}
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 8001980:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001984:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <AoC_Day_02+0x38c>)
 800198a:	4618      	mov	r0, r3
 800198c:	f01d fcdc 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8001990:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fc3b 	bl	8000210 <strlen>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	f507 714f 	add.w	r1, r7, #828	; 0x33c
 80019a2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80019a6:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fc41 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80019b2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019b6:	4618      	mov	r0, r3
 80019b8:	f01b febe 	bl	801d738 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80019bc:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80019c0:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d10a      	bne.n	80019e0 <AoC_Day_02+0x30c>
			ret = f_open(&file, "day2t.txt", FA_READ);
 80019ca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019ce:	2201      	movs	r2, #1
 80019d0:	491c      	ldr	r1, [pc, #112]	; (8001a44 <AoC_Day_02+0x370>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f01b f9c0 	bl	801cd58 <f_open>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 3789 	strb.w	r3, [r7, #1929]	; 0x789
 80019de:	e009      	b.n	80019f4 <AoC_Day_02+0x320>
		else ret = f_open(&file, "day2.txt", FA_READ);
 80019e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019e4:	2201      	movs	r2, #1
 80019e6:	4918      	ldr	r1, [pc, #96]	; (8001a48 <AoC_Day_02+0x374>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f01b f9b5 	bl	801cd58 <f_open>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f887 3789 	strb.w	r3, [r7, #1929]	; 0x789
		if(ret != FR_OK)
 80019f4:	f897 3789 	ldrb.w	r3, [r7, #1929]	; 0x789
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <AoC_Day_02+0x340>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80019fc:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8001a00:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2213      	movs	r2, #19
 8001a08:	4910      	ldr	r1, [pc, #64]	; (8001a4c <AoC_Day_02+0x378>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc12 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e149      	b.n	8001ca8 <AoC_Day_02+0x5d4>
		}

		// process data
		char buffer[256];
		int32_t sum_of_values = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
		while(f_gets(buffer, 256, &file))
 8001a1a:	e119      	b.n	8001c50 <AoC_Day_02+0x57c>
		{
			// tokenize data
			char token_buffer[64][16];
			memset(token_buffer, 0x00, 64 * 16);
 8001a1c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f01d fc6a 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <AoC_Day_02+0x37c>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f01d fcb8 	bl	801f3a8 <strtok>
 8001a38:	f8c7 0780 	str.w	r0, [r7, #1920]	; 0x780
			uint8_t token_counter = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 377f 	strb.w	r3, [r7, #1919]	; 0x77f
			while(token != NULL && token_counter < 64)
 8001a42:	e02b      	b.n	8001a9c <AoC_Day_02+0x3c8>
 8001a44:	08024d28 	.word	0x08024d28
 8001a48:	08024d34 	.word	0x08024d34
 8001a4c:	08024d40 	.word	0x08024d40
 8001a50:	08024d58 	.word	0x08024d58
 8001a54:	08024d5c 	.word	0x08024d5c
 8001a58:	08024d64 	.word	0x08024d64
 8001a5c:	08024d6c 	.word	0x08024d6c
 8001a60:	08024d70 	.word	0x08024d70
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8001a64:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001a68:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	18d4      	adds	r4, r2, r3
 8001a70:	f8d7 0780 	ldr.w	r0, [r7, #1920]	; 0x780
 8001a74:	f7fe fbcc 	bl	8000210 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8001a80:	4620      	mov	r0, r4
 8001a82:	f01d fc2f 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 8001a86:	498b      	ldr	r1, [pc, #556]	; (8001cb4 <AoC_Day_02+0x5e0>)
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f01d fc8d 	bl	801f3a8 <strtok>
 8001a8e:	f8c7 0780 	str.w	r0, [r7, #1920]	; 0x780
				token_counter++;
 8001a92:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001a96:	3301      	adds	r3, #1
 8001a98:	f887 377f 	strb.w	r3, [r7, #1919]	; 0x77f
			while(token != NULL && token_counter < 64)
 8001a9c:	f8d7 3780 	ldr.w	r3, [r7, #1920]	; 0x780
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <AoC_Day_02+0x3d8>
 8001aa4:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001aa8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aaa:	d9db      	bls.n	8001a64 <AoC_Day_02+0x390>
			}

			if(token_counter == 0)
 8001aac:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <AoC_Day_02+0x3e2>
 8001ab4:	e0cc      	b.n	8001c50 <AoC_Day_02+0x57c>
				continue;

			// minimum cubes
			uint32_t red_cubes_minimum = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
			uint32_t blue_cubes_minimum = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
			uint32_t green_cubes_minimum = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 3770 	str.w	r3, [r7, #1904]	; 0x770

			// counter cubes
			uint32_t red_cubes = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
			uint32_t blue_cubes = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
			uint32_t green_cubes = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764

			// process tokens
			uint8_t token_ptr = 2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f887 3763 	strb.w	r3, [r7, #1891]	; 0x763
			while(token_ptr <= token_counter)
 8001ae0:	e09c      	b.n	8001c1c <AoC_Day_02+0x548>
			{
				// get value
				uint32_t cubes = atoi(token_buffer[token_ptr]);
 8001ae2:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001ae6:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f01d f966 	bl	801edc0 <atoi>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c

				// add to specific color
				if(!memcmp("green", token_buffer[token_ptr+1], 5))
 8001afa:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001afe:	3301      	adds	r3, #1
 8001b00:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	2205      	movs	r2, #5
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	486a      	ldr	r0, [pc, #424]	; (8001cb8 <AoC_Day_02+0x5e4>)
 8001b0e:	f01d fbd9 	bl	801f2c4 <memcmp>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <AoC_Day_02+0x454>
					green_cubes += cubes;
 8001b18:	f8d7 2764 	ldr.w	r2, [r7, #1892]	; 0x764
 8001b1c:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001b20:	4413      	add	r3, r2
 8001b22:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8001b26:	e02c      	b.n	8001b82 <AoC_Day_02+0x4ae>
				else if(!memcmp("blue", token_buffer[token_ptr+1], 4))
 8001b28:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	2204      	movs	r2, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4860      	ldr	r0, [pc, #384]	; (8001cbc <AoC_Day_02+0x5e8>)
 8001b3c:	f01d fbc2 	bl	801f2c4 <memcmp>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <AoC_Day_02+0x482>
					blue_cubes += cubes;
 8001b46:	f8d7 2768 	ldr.w	r2, [r7, #1896]	; 0x768
 8001b4a:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001b4e:	4413      	add	r3, r2
 8001b50:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
 8001b54:	e015      	b.n	8001b82 <AoC_Day_02+0x4ae>
				else if(!memcmp("red", token_buffer[token_ptr+1], 3))
 8001b56:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	2203      	movs	r2, #3
 8001b66:	4619      	mov	r1, r3
 8001b68:	4855      	ldr	r0, [pc, #340]	; (8001cc0 <AoC_Day_02+0x5ec>)
 8001b6a:	f01d fbab 	bl	801f2c4 <memcmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <AoC_Day_02+0x4ae>
					red_cubes += cubes;
 8001b74:	f8d7 276c 	ldr.w	r2, [r7, #1900]	; 0x76c
 8001b78:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c

				// check if end of game
				char end_token = token_buffer[token_ptr+1][strlen(token_buffer[token_ptr+1])-1];
 8001b82:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001b86:	1c5c      	adds	r4, r3, #1
 8001b88:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb3a 	bl	8000210 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 8001ba4:	f2a2 416c 	subw	r1, r2, #1132	; 0x46c
 8001ba8:	0122      	lsls	r2, r4, #4
 8001baa:	440a      	add	r2, r1
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f887 374b 	strb.w	r3, [r7, #1867]	; 0x74b
				if(end_token == ';' || end_token == '\0')
 8001bb4:	f897 374b 	ldrb.w	r3, [r7, #1867]	; 0x74b
 8001bb8:	2b3b      	cmp	r3, #59	; 0x3b
 8001bba:	d003      	beq.n	8001bc4 <AoC_Day_02+0x4f0>
 8001bbc:	f897 374b 	ldrb.w	r3, [r7, #1867]	; 0x74b
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d126      	bne.n	8001c12 <AoC_Day_02+0x53e>
				{
					// set minimum cubes needed
					if(red_cubes > red_cubes_minimum)
 8001bc4:	f8d7 276c 	ldr.w	r2, [r7, #1900]	; 0x76c
 8001bc8:	f8d7 3778 	ldr.w	r3, [r7, #1912]	; 0x778
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d903      	bls.n	8001bd8 <AoC_Day_02+0x504>
						red_cubes_minimum = red_cubes;
 8001bd0:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 8001bd4:	f8c7 3778 	str.w	r3, [r7, #1912]	; 0x778
					if(blue_cubes > blue_cubes_minimum)
 8001bd8:	f8d7 2768 	ldr.w	r2, [r7, #1896]	; 0x768
 8001bdc:	f8d7 3774 	ldr.w	r3, [r7, #1908]	; 0x774
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d903      	bls.n	8001bec <AoC_Day_02+0x518>
						blue_cubes_minimum = blue_cubes;
 8001be4:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 8001be8:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
					if(green_cubes > green_cubes_minimum)
 8001bec:	f8d7 2764 	ldr.w	r2, [r7, #1892]	; 0x764
 8001bf0:	f8d7 3770 	ldr.w	r3, [r7, #1904]	; 0x770
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d903      	bls.n	8001c00 <AoC_Day_02+0x52c>
						green_cubes_minimum = green_cubes;
 8001bf8:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8001bfc:	f8c7 3770 	str.w	r3, [r7, #1904]	; 0x770

					// reset cubes
					red_cubes = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
					blue_cubes = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
					green_cubes = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
				}
				token_ptr += 2;
 8001c12:	f897 3763 	ldrb.w	r3, [r7, #1891]	; 0x763
 8001c16:	3302      	adds	r3, #2
 8001c18:	f887 3763 	strb.w	r3, [r7, #1891]	; 0x763
			while(token_ptr <= token_counter)
 8001c1c:	f897 2763 	ldrb.w	r2, [r7, #1891]	; 0x763
 8001c20:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f67f af5c 	bls.w	8001ae2 <AoC_Day_02+0x40e>
			}

			// sum of game power
			uint32_t game_power = red_cubes_minimum * blue_cubes_minimum * green_cubes_minimum;
 8001c2a:	f8d7 3778 	ldr.w	r3, [r7, #1912]	; 0x778
 8001c2e:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 8001c32:	fb03 f202 	mul.w	r2, r3, r2
 8001c36:	f8d7 3770 	ldr.w	r3, [r7, #1904]	; 0x770
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
			sum_of_values += game_power;
 8001c42:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 8001c46:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
		while(f_gets(buffer, 256, &file))
 8001c50:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f01b ff4f 	bl	801db00 <f_gets>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f47f aed9 	bne.w	8001a1c <AoC_Day_02+0x348>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 8001c6a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001c6e:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 8001c72:	4914      	ldr	r1, [pc, #80]	; (8001cc4 <AoC_Day_02+0x5f0>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f01d fb67 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8001c7a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fac6 	bl	8000210 <strlen>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	f507 714f 	add.w	r1, r7, #828	; 0x33c
 8001c8c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8001c90:	f2a3 73a1 	subw	r3, r3, #1953	; 0x7a1
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff facc 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8001c9c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f01b fd49 	bl	801d738 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f207 77ac 	addw	r7, r7, #1964	; 0x7ac
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08024d58 	.word	0x08024d58
 8001cb8:	08024d5c 	.word	0x08024d5c
 8001cbc:	08024d64 	.word	0x08024d64
 8001cc0:	08024d6c 	.word	0x08024d6c
 8001cc4:	08024d88 	.word	0x08024d88

08001cc8 <getIndex>:
 */

#include "AoC/Days/Day03.h"

int32_t getIndex(int32_t maze_width, int32_t column, int32_t row)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	return row * (maze_width + 1) + column;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	fb03 f202 	mul.w	r2, r3, r2
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4413      	add	r3, r2
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <AoC_Day_03>:

AdventOfCode_return_t AoC_Day_03(AdventOfCode_config_t config)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cfe:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001d02:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001d04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d08:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <AoC_Day_03+0x28>
		return AOC_RETURN_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f001 b889 	b.w	8002e2a <AoC_Day_03+0x113a>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001d18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d1c:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d10a      	bne.n	8001d3c <AoC_Day_03+0x4c>
			ret = f_open(&file, "day3t.txt", FA_READ);
 8001d26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	49be      	ldr	r1, [pc, #760]	; (8002028 <AoC_Day_03+0x338>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f01b f812 	bl	801cd58 <f_open>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
 8001d3a:	e009      	b.n	8001d50 <AoC_Day_03+0x60>
		else ret = f_open(&file, "day3.txt", FA_READ);
 8001d3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d40:	2201      	movs	r2, #1
 8001d42:	49ba      	ldr	r1, [pc, #744]	; (800202c <AoC_Day_03+0x33c>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f01b f807 	bl	801cd58 <f_open>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
		if(ret != FR_OK)
 8001d50:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <AoC_Day_03+0x82>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8001d58:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d5c:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2213      	movs	r2, #19
 8001d64:	49b2      	ldr	r1, [pc, #712]	; (8002030 <AoC_Day_03+0x340>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fa64 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f001 b85c 	b.w	8002e2a <AoC_Day_03+0x113a>
		}

		// get file length
		int32_t file_size = f_size(&file);
 8001d72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d76:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304

		// extract data
		char *maze = (char*)sram_malloc(file_size + 1);
 8001d80:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001d84:	3301      	adds	r3, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f008 f9d8 	bl	800a13c <sram_malloc>
 8001d8c:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300

		// insert data
		f_read(&file, maze, file_size + 1, NULL);
 8001d90:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001d94:	3301      	adds	r3, #1
 8001d96:	461a      	mov	r2, r3
 8001d98:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8d7 1300 	ldr.w	r1, [r7, #768]	; 0x300
 8001da2:	f01b f997 	bl	801d0d4 <f_read>

		// close file
		f_close(&file);
 8001da6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001daa:	4618      	mov	r0, r3
 8001dac:	f01b fcc4 	bl	801d738 <f_close>

		// tokenize data
		strtok(maze, "\n");
 8001db0:	49a0      	ldr	r1, [pc, #640]	; (8002034 <AoC_Day_03+0x344>)
 8001db2:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 8001db6:	f01d faf7 	bl	801f3a8 <strtok>
		int32_t maze_dept = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
		while(strtok(NULL, "\n"))
 8001dc0:	e004      	b.n	8001dcc <AoC_Day_03+0xdc>
			maze_dept++;
 8001dc2:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
		while(strtok(NULL, "\n"))
 8001dcc:	4999      	ldr	r1, [pc, #612]	; (8002034 <AoC_Day_03+0x344>)
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f01d faea 	bl	801f3a8 <strtok>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f3      	bne.n	8001dc2 <AoC_Day_03+0xd2>
		int32_t maze_width = file_size / maze_dept - 1;
 8001dda:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8001dde:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001de2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

		// process data
		int32_t sum_of_values = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		int32_t maze_ptr = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		while(maze_ptr < file_size)
 8001df8:	e23c      	b.n	8002274 <AoC_Day_03+0x584>
		{
			// find next character
			for(; (maze[maze_ptr] < '0' || maze[maze_ptr] > '9') && maze_ptr < file_size; maze_ptr++);
 8001dfa:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8001e04:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001e08:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b2f      	cmp	r3, #47	; 0x2f
 8001e12:	d907      	bls.n	8001e24 <AoC_Day_03+0x134>
 8001e14:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001e18:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b39      	cmp	r3, #57	; 0x39
 8001e22:	d905      	bls.n	8001e30 <AoC_Day_03+0x140>
 8001e24:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001e28:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbe4      	blt.n	8001dfa <AoC_Day_03+0x10a>

			// check alignement with symbol
			int32_t start_ptr = maze_ptr;
 8001e30:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001e34:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
			uint8_t is_aligned_flag = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
			while(maze[maze_ptr] >= '0' && maze[maze_ptr] <= '9' && maze_ptr < file_size)
 8001e3e:	e1c0      	b.n	80021c2 <AoC_Day_03+0x4d2>
			{
				// get row and column
				int32_t current_column = maze_ptr % (maze_width + 1);
 8001e40:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001e4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e4e:	fb01 f202 	mul.w	r2, r1, r2
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
				int32_t current_row = maze_ptr / (maze_width + 1);
 8001e58:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8001e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e66:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

				// check up
				if(current_row > 0)
 8001e6a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dd27      	ble.n	8001ec2 <AoC_Day_03+0x1d2>
				{
					int32_t index = getIndex(maze_width, current_column, current_row - 1);
 8001e72:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e76:	3b01      	subs	r3, #1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8001e7e:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001e82:	f7ff ff21 	bl	8001cc8 <getIndex>
 8001e86:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8001e8a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e8e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b2e      	cmp	r3, #46	; 0x2e
 8001e98:	d013      	beq.n	8001ec2 <AoC_Day_03+0x1d2>
 8001e9a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001e9e:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b2f      	cmp	r3, #47	; 0x2f
 8001ea8:	d907      	bls.n	8001eba <AoC_Day_03+0x1ca>
 8001eaa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001eae:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b39      	cmp	r3, #57	; 0x39
 8001eb8:	d903      	bls.n	8001ec2 <AoC_Day_03+0x1d2>
					{
						is_aligned_flag = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001ec0:	e196      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}

				// right up
				if(current_row > 0 && current_column < maze_width-1)
 8001ec2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dd37      	ble.n	8001f3a <AoC_Day_03+0x24a>
 8001eca:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	da30      	bge.n	8001f3a <AoC_Day_03+0x24a>
				{
					int32_t index = getIndex(maze_width, current_column + 1, current_row - 1);
 8001ed8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001eea:	f7ff feed 	bl	8001cc8 <getIndex>
 8001eee:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
					if(maze[index] != '.' && maze[index] != '\n' && (maze[index] < '0' || maze[index] > '9'))
 8001ef2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001ef6:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b2e      	cmp	r3, #46	; 0x2e
 8001f00:	d01b      	beq.n	8001f3a <AoC_Day_03+0x24a>
 8001f02:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001f06:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b0a      	cmp	r3, #10
 8001f10:	d013      	beq.n	8001f3a <AoC_Day_03+0x24a>
 8001f12:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001f16:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b2f      	cmp	r3, #47	; 0x2f
 8001f20:	d907      	bls.n	8001f32 <AoC_Day_03+0x242>
 8001f22:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001f26:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b39      	cmp	r3, #57	; 0x39
 8001f30:	d903      	bls.n	8001f3a <AoC_Day_03+0x24a>
					{
						is_aligned_flag = 2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001f38:	e15a      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}

				// right
				if(current_column < maze_width-1)
 8001f3a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001f44:	429a      	cmp	r2, r3
 8001f46:	da2f      	bge.n	8001fa8 <AoC_Day_03+0x2b8>
				{
					int32_t index = getIndex(maze_width, current_column + 1, current_row);
 8001f48:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001f52:	4619      	mov	r1, r3
 8001f54:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001f58:	f7ff feb6 	bl	8001cc8 <getIndex>
 8001f5c:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
					if(maze[index] != '.' && maze[index] != '\n' && (maze[index] < '0' || maze[index] > '9'))
 8001f60:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001f64:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8001f6e:	d01b      	beq.n	8001fa8 <AoC_Day_03+0x2b8>
 8001f70:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001f74:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b0a      	cmp	r3, #10
 8001f7e:	d013      	beq.n	8001fa8 <AoC_Day_03+0x2b8>
 8001f80:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001f84:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f88:	4413      	add	r3, r2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8001f8e:	d907      	bls.n	8001fa0 <AoC_Day_03+0x2b0>
 8001f90:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001f94:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b39      	cmp	r3, #57	; 0x39
 8001f9e:	d903      	bls.n	8001fa8 <AoC_Day_03+0x2b8>
					{
						is_aligned_flag = 3;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8001fa6:	e123      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}

				// right down
				if(current_row < maze_dept-1 && current_column < maze_width-1)
 8001fa8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001fac:	3b01      	subs	r3, #1
 8001fae:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	da40      	bge.n	8002038 <AoC_Day_03+0x348>
 8001fb6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	da39      	bge.n	8002038 <AoC_Day_03+0x348>
				{
					int32_t index = getIndex(maze_width, current_column + 1, current_row + 1);
 8001fc4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001fce:	3301      	adds	r3, #1
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8001fd6:	f7ff fe77 	bl	8001cc8 <getIndex>
 8001fda:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
					if(maze[index] != '.' && maze[index] != '\n' && (maze[index] < '0' || maze[index] > '9'))
 8001fde:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001fe2:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2e      	cmp	r3, #46	; 0x2e
 8001fec:	d024      	beq.n	8002038 <AoC_Day_03+0x348>
 8001fee:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001ff2:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b0a      	cmp	r3, #10
 8001ffc:	d01c      	beq.n	8002038 <AoC_Day_03+0x348>
 8001ffe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002002:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b2f      	cmp	r3, #47	; 0x2f
 800200c:	d907      	bls.n	800201e <AoC_Day_03+0x32e>
 800200e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002012:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b39      	cmp	r3, #57	; 0x39
 800201c:	d90c      	bls.n	8002038 <AoC_Day_03+0x348>
					{
						is_aligned_flag = 4;
 800201e:	2304      	movs	r3, #4
 8002020:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8002024:	e0e4      	b.n	80021f0 <AoC_Day_03+0x500>
 8002026:	bf00      	nop
 8002028:	08024da0 	.word	0x08024da0
 800202c:	08024dac 	.word	0x08024dac
 8002030:	08024db8 	.word	0x08024db8
 8002034:	08024dd0 	.word	0x08024dd0
					}
				}

				// down
				if(current_row < maze_dept-1)
 8002038:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800203c:	3b01      	subs	r3, #1
 800203e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002042:	429a      	cmp	r2, r3
 8002044:	da27      	bge.n	8002096 <AoC_Day_03+0x3a6>
				{
					int32_t index = getIndex(maze_width, current_column, current_row + 1);
 8002046:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800204a:	3301      	adds	r3, #1
 800204c:	461a      	mov	r2, r3
 800204e:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8002052:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8002056:	f7ff fe37 	bl	8001cc8 <getIndex>
 800205a:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 800205e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002062:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b2e      	cmp	r3, #46	; 0x2e
 800206c:	d013      	beq.n	8002096 <AoC_Day_03+0x3a6>
 800206e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002072:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b2f      	cmp	r3, #47	; 0x2f
 800207c:	d907      	bls.n	800208e <AoC_Day_03+0x39e>
 800207e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002082:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b39      	cmp	r3, #57	; 0x39
 800208c:	d903      	bls.n	8002096 <AoC_Day_03+0x3a6>
					{
						is_aligned_flag = 5;
 800208e:	2305      	movs	r3, #5
 8002090:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8002094:	e0ac      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}

				// down left
				if(current_row < maze_dept-1 && current_column > 0)
 8002096:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800209a:	3b01      	subs	r3, #1
 800209c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80020a0:	429a      	cmp	r2, r3
 80020a2:	da2c      	bge.n	80020fe <AoC_Day_03+0x40e>
 80020a4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dd28      	ble.n	80020fe <AoC_Day_03+0x40e>
				{
					int32_t index = getIndex(maze_width, current_column - 1, current_row + 1);
 80020ac:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80020b6:	3301      	adds	r3, #1
 80020b8:	461a      	mov	r2, r3
 80020ba:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80020be:	f7ff fe03 	bl	8001cc8 <getIndex>
 80020c2:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 80020c6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80020ca:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b2e      	cmp	r3, #46	; 0x2e
 80020d4:	d013      	beq.n	80020fe <AoC_Day_03+0x40e>
 80020d6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80020da:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b2f      	cmp	r3, #47	; 0x2f
 80020e4:	d907      	bls.n	80020f6 <AoC_Day_03+0x406>
 80020e6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80020ea:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b39      	cmp	r3, #57	; 0x39
 80020f4:	d903      	bls.n	80020fe <AoC_Day_03+0x40e>
					{
						is_aligned_flag = 6;
 80020f6:	2306      	movs	r3, #6
 80020f8:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 80020fc:	e078      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}

				// left
				if(current_column > 0)
 80020fe:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002102:	2b00      	cmp	r3, #0
 8002104:	dd27      	ble.n	8002156 <AoC_Day_03+0x466>
				{
					int32_t index = getIndex(maze_width, current_column - 1, current_row);
 8002106:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800210a:	3b01      	subs	r3, #1
 800210c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002110:	4619      	mov	r1, r3
 8002112:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8002116:	f7ff fdd7 	bl	8001cc8 <getIndex>
 800211a:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 800211e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002122:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b2e      	cmp	r3, #46	; 0x2e
 800212c:	d013      	beq.n	8002156 <AoC_Day_03+0x466>
 800212e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002132:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b2f      	cmp	r3, #47	; 0x2f
 800213c:	d907      	bls.n	800214e <AoC_Day_03+0x45e>
 800213e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002142:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b39      	cmp	r3, #57	; 0x39
 800214c:	d903      	bls.n	8002156 <AoC_Day_03+0x466>
					{
						is_aligned_flag = 7;
 800214e:	2307      	movs	r3, #7
 8002150:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 8002154:	e04c      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}

				// left up
				if(current_row > 0 && current_column > 0)
 8002156:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800215a:	2b00      	cmp	r3, #0
 800215c:	dd2c      	ble.n	80021b8 <AoC_Day_03+0x4c8>
 800215e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002162:	2b00      	cmp	r3, #0
 8002164:	dd28      	ble.n	80021b8 <AoC_Day_03+0x4c8>
				{
					int32_t index = getIndex(maze_width, current_column - 1, current_row - 1);
 8002166:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800216a:	1e59      	subs	r1, r3, #1
 800216c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002170:	3b01      	subs	r3, #1
 8002172:	461a      	mov	r2, r3
 8002174:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 8002178:	f7ff fda6 	bl	8001cc8 <getIndex>
 800217c:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
					if(maze[index] != '.' && (maze[index] < '0' || maze[index] > '9'))
 8002180:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002184:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b2e      	cmp	r3, #46	; 0x2e
 800218e:	d013      	beq.n	80021b8 <AoC_Day_03+0x4c8>
 8002190:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002194:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002198:	4413      	add	r3, r2
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b2f      	cmp	r3, #47	; 0x2f
 800219e:	d907      	bls.n	80021b0 <AoC_Day_03+0x4c0>
 80021a0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80021a4:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b39      	cmp	r3, #57	; 0x39
 80021ae:	d903      	bls.n	80021b8 <AoC_Day_03+0x4c8>
					{
						is_aligned_flag = 8;
 80021b0:	2308      	movs	r3, #8
 80021b2:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
						break;
 80021b6:	e01b      	b.n	80021f0 <AoC_Day_03+0x500>
					}
				}
				maze_ptr++;
 80021b8:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80021bc:	3301      	adds	r3, #1
 80021be:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
			while(maze[maze_ptr] >= '0' && maze[maze_ptr] <= '9' && maze_ptr < file_size)
 80021c2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80021c6:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b2f      	cmp	r3, #47	; 0x2f
 80021d0:	d914      	bls.n	80021fc <AoC_Day_03+0x50c>
 80021d2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80021d6:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 80021da:	4413      	add	r3, r2
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b39      	cmp	r3, #57	; 0x39
 80021e0:	d80c      	bhi.n	80021fc <AoC_Day_03+0x50c>
 80021e2:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 80021e6:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80021ea:	429a      	cmp	r2, r3
 80021ec:	f6ff ae28 	blt.w	8001e40 <AoC_Day_03+0x150>
			}

			// move to end of character
			for(; maze[maze_ptr] >= '0' && maze[maze_ptr] <= '9' && maze_ptr < file_size; maze_ptr++);
 80021f0:	e004      	b.n	80021fc <AoC_Day_03+0x50c>
 80021f2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80021f6:	3301      	adds	r3, #1
 80021f8:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80021fc:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8002200:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b2f      	cmp	r3, #47	; 0x2f
 800220a:	d90d      	bls.n	8002228 <AoC_Day_03+0x538>
 800220c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8002210:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b39      	cmp	r3, #57	; 0x39
 800221a:	d805      	bhi.n	8002228 <AoC_Day_03+0x538>
 800221c:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8002220:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8002224:	429a      	cmp	r2, r3
 8002226:	dbe4      	blt.n	80021f2 <AoC_Day_03+0x502>

			// if not aligned get numeric value
			if(is_aligned_flag)
 8002228:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 800222c:	2b00      	cmp	r3, #0
 800222e:	d021      	beq.n	8002274 <AoC_Day_03+0x584>
			{
				char value[64];
				memset(value, 0x00, 64);
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f01d f861 	bl	801f300 <memset>
				memcpy(value, &maze[start_ptr], maze_ptr - start_ptr);
 800223e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002242:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002246:	18d1      	adds	r1, r2, r3
 8002248:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 800224c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	461a      	mov	r2, r3
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4618      	mov	r0, r3
 800225a:	f01d f843 	bl	801f2e4 <memcpy>
				sum_of_values += atol(value);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4618      	mov	r0, r3
 8002264:	f01c fdb0 	bl	801edc8 <atol>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800226e:	4413      	add	r3, r2
 8002270:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		while(maze_ptr < file_size)
 8002274:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8002278:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 800227c:	429a      	cmp	r2, r3
 800227e:	f6ff adc1 	blt.w	8001e04 <AoC_Day_03+0x114>
			}
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800228a:	49d0      	ldr	r1, [pc, #832]	; (80025cc <AoC_Day_03+0x8dc>)
 800228c:	4618      	mov	r0, r3
 800228e:	f01d f85b 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ffba 	bl	8000210 <strlen>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	f107 010c 	add.w	r1, r7, #12
 80022a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022a8:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe ffc0 	bl	8001234 <AdventOfCode_print>

		// clean up
		sram_clrmem();
 80022b4:	f007 ff86 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80022b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022bc:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d10a      	bne.n	80022dc <AoC_Day_03+0x5ec>
			ret = f_open(&file, "day3t.txt", FA_READ);
 80022c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ca:	2201      	movs	r2, #1
 80022cc:	49c0      	ldr	r1, [pc, #768]	; (80025d0 <AoC_Day_03+0x8e0>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f01a fd42 	bl	801cd58 <f_open>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
 80022da:	e009      	b.n	80022f0 <AoC_Day_03+0x600>
		else ret = f_open(&file, "day3.txt", FA_READ);
 80022dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022e0:	2201      	movs	r2, #1
 80022e2:	49bc      	ldr	r1, [pc, #752]	; (80025d4 <AoC_Day_03+0x8e4>)
 80022e4:	4618      	mov	r0, r3
 80022e6:	f01a fd37 	bl	801cd58 <f_open>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
		if(ret != FR_OK)
 80022f0:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <AoC_Day_03+0x622>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80022f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022fc:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2213      	movs	r2, #19
 8002304:	49b4      	ldr	r1, [pc, #720]	; (80025d8 <AoC_Day_03+0x8e8>)
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe ff94 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 800230c:	2301      	movs	r3, #1
 800230e:	f000 bd8c 	b.w	8002e2a <AoC_Day_03+0x113a>
		}

		// get file length
		int32_t file_size = f_size(&file);
 8002312:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002316:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

		// extract data
		char *maze = (char*)sram_malloc(file_size + 1);
 8002320:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002324:	3301      	adds	r3, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f007 ff08 	bl	800a13c <sram_malloc>
 800232c:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4

		// insert data
		f_read(&file, maze, file_size + 1, NULL);
 8002330:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002334:	3301      	adds	r3, #1
 8002336:	461a      	mov	r2, r3
 8002338:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800233c:	2300      	movs	r3, #0
 800233e:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 8002342:	f01a fec7 	bl	801d0d4 <f_read>

		// close file
		f_close(&file);
 8002346:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800234a:	4618      	mov	r0, r3
 800234c:	f01b f9f4 	bl	801d738 <f_close>

		// tokenize data
		strtok(maze, "\n");
 8002350:	49a2      	ldr	r1, [pc, #648]	; (80025dc <AoC_Day_03+0x8ec>)
 8002352:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 8002356:	f01d f827 	bl	801f3a8 <strtok>
		int32_t maze_dept = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(strtok(NULL, "\n"))
 8002360:	e004      	b.n	800236c <AoC_Day_03+0x67c>
			maze_dept++;
 8002362:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8002366:	3301      	adds	r3, #1
 8002368:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		while(strtok(NULL, "\n"))
 800236c:	499b      	ldr	r1, [pc, #620]	; (80025dc <AoC_Day_03+0x8ec>)
 800236e:	2000      	movs	r0, #0
 8002370:	f01d f81a 	bl	801f3a8 <strtok>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f3      	bne.n	8002362 <AoC_Day_03+0x672>
		int32_t maze_width = file_size / maze_dept - 1;
 800237a:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 800237e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8002382:	fb92 f3f3 	sdiv	r3, r2, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

		// process data
		int32_t sum_of_values = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
		int32_t maze_ptr = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
		while(maze_ptr < file_size)
 8002398:	f000 bd24 	b.w	8002de4 <AoC_Day_03+0x10f4>
		{
			// find next gear
			for(; maze[maze_ptr] != '*' && maze_ptr < file_size; maze_ptr++);
 800239c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80023a0:	3301      	adds	r3, #1
 80023a2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80023a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80023aa:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b2a      	cmp	r3, #42	; 0x2a
 80023b4:	d005      	beq.n	80023c2 <AoC_Day_03+0x6d2>
 80023b6:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80023ba:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbec      	blt.n	800239c <AoC_Day_03+0x6ac>

			// check alignement with symbol
			uint8_t is_aligned_counter = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f
			int32_t gear_ratio = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

			// get row and column
			int32_t current_column = maze_ptr % (maze_width + 1);
 80023ce:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80023d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80023dc:	fb01 f202 	mul.w	r2, r1, r2
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			int32_t current_row = maze_ptr / (maze_width + 1);
 80023e6:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80023ea:	3301      	adds	r3, #1
 80023ec:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80023f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80023f4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8

			// check up
			if(current_row > 0)
 80023f8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f340 8091 	ble.w	8002524 <AoC_Day_03+0x834>
			{
				int32_t index = getIndex(maze_width, current_column, current_row - 1);
 8002402:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002406:	3b01      	subs	r3, #1
 8002408:	461a      	mov	r2, r3
 800240a:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 800240e:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002412:	f7ff fc59 	bl	8001cc8 <getIndex>
 8002416:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
				if(maze[index] >= '0' && maze[index] <= '9')
 800241a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800241e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b2f      	cmp	r3, #47	; 0x2f
 8002428:	d97c      	bls.n	8002524 <AoC_Day_03+0x834>
 800242a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800242e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b39      	cmp	r3, #57	; 0x39
 8002438:	d874      	bhi.n	8002524 <AoC_Day_03+0x834>
				{
					is_aligned_counter++;
 800243a:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 800243e:	3301      	adds	r3, #1
 8002440:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002444:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002448:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 800244c:	e004      	b.n	8002458 <AoC_Day_03+0x768>
 800244e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002452:	3b01      	subs	r3, #1
 8002454:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8002458:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0f      	blt.n	8002480 <AoC_Day_03+0x790>
 8002460:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002464:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b2f      	cmp	r3, #47	; 0x2f
 800246e:	d907      	bls.n	8002480 <AoC_Day_03+0x790>
 8002470:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002474:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b39      	cmp	r3, #57	; 0x39
 800247e:	d9e6      	bls.n	800244e <AoC_Day_03+0x75e>
					int32_t end_ptr = index;
 8002480:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8002484:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002488:	e004      	b.n	8002494 <AoC_Day_03+0x7a4>
 800248a:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8002494:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002498:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b2f      	cmp	r3, #47	; 0x2f
 80024a2:	d907      	bls.n	80024b4 <AoC_Day_03+0x7c4>
 80024a4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80024a8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b39      	cmp	r3, #57	; 0x39
 80024b2:	d9ea      	bls.n	800248a <AoC_Day_03+0x79a>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	2220      	movs	r2, #32
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f01c ff1f 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 80024c2:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80024cc:	18d1      	adds	r1, r2, r3
 80024ce:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 80024d2:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	461a      	mov	r2, r3
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	4618      	mov	r0, r3
 80024e2:	f01c feff 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4618      	mov	r0, r3
 80024ec:	f01c fc68 	bl	801edc0 <atoi>
 80024f0:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
					gear_ratio *= value;
 80024f4:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80024f8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002504:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002508:	3301      	adds	r3, #1
 800250a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800250e:	18d0      	adds	r0, r2, r3
 8002510:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8002514:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	461a      	mov	r2, r3
 800251e:	212e      	movs	r1, #46	; 0x2e
 8002520:	f01c feee 	bl	801f300 <memset>
				}
			}

			// right up
			if(current_row > 0 && current_column < maze_width-1)
 8002524:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002528:	2b00      	cmp	r3, #0
 800252a:	f340 80a6 	ble.w	800267a <AoC_Day_03+0x98a>
 800252e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8002532:	3b01      	subs	r3, #1
 8002534:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002538:	429a      	cmp	r2, r3
 800253a:	f280 809e 	bge.w	800267a <AoC_Day_03+0x98a>
			{
				int32_t index = getIndex(maze_width, current_column + 1, current_row - 1);
 800253e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002548:	3b01      	subs	r3, #1
 800254a:	461a      	mov	r2, r3
 800254c:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002550:	f7ff fbba 	bl	8001cc8 <getIndex>
 8002554:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
				if(maze[index] >= '0' && maze[index] <= '9')
 8002558:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800255c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b2f      	cmp	r3, #47	; 0x2f
 8002566:	f240 8088 	bls.w	800267a <AoC_Day_03+0x98a>
 800256a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800256e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b39      	cmp	r3, #57	; 0x39
 8002578:	d87f      	bhi.n	800267a <AoC_Day_03+0x98a>
				{
					is_aligned_counter++;
 800257a:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 800257e:	3301      	adds	r3, #1
 8002580:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002584:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002588:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 800258c:	e004      	b.n	8002598 <AoC_Day_03+0x8a8>
 800258e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002592:	3b01      	subs	r3, #1
 8002594:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8002598:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0f      	blt.n	80025c0 <AoC_Day_03+0x8d0>
 80025a0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80025a4:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b2f      	cmp	r3, #47	; 0x2f
 80025ae:	d907      	bls.n	80025c0 <AoC_Day_03+0x8d0>
 80025b0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80025b4:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b39      	cmp	r3, #57	; 0x39
 80025be:	d9e6      	bls.n	800258e <AoC_Day_03+0x89e>
					int32_t end_ptr = index;
 80025c0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80025c4:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 80025c8:	e00f      	b.n	80025ea <AoC_Day_03+0x8fa>
 80025ca:	bf00      	nop
 80025cc:	08024dd4 	.word	0x08024dd4
 80025d0:	08024da0 	.word	0x08024da0
 80025d4:	08024dac 	.word	0x08024dac
 80025d8:	08024db8 	.word	0x08024db8
 80025dc:	08024dd0 	.word	0x08024dd0
 80025e0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80025ea:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80025ee:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b2f      	cmp	r3, #47	; 0x2f
 80025f8:	d907      	bls.n	800260a <AoC_Day_03+0x91a>
 80025fa:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80025fe:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b39      	cmp	r3, #57	; 0x39
 8002608:	d9ea      	bls.n	80025e0 <AoC_Day_03+0x8f0>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	2220      	movs	r2, #32
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f01c fe74 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002618:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800261c:	3301      	adds	r3, #1
 800261e:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002622:	18d1      	adds	r1, r2, r3
 8002624:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8002628:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	461a      	mov	r2, r3
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4618      	mov	r0, r3
 8002638:	f01c fe54 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	4618      	mov	r0, r3
 8002642:	f01c fbbd 	bl	801edc0 <atoi>
 8002646:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8
					gear_ratio *= value;
 800264a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800264e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 800265a:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800265e:	3301      	adds	r3, #1
 8002660:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002664:	18d0      	adds	r0, r2, r3
 8002666:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800266a:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	212e      	movs	r1, #46	; 0x2e
 8002676:	f01c fe43 	bl	801f300 <memset>
				}
			}

			// right
			if(current_column < maze_width-1)
 800267a:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800267e:	3b01      	subs	r3, #1
 8002680:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8002684:	429a      	cmp	r2, r3
 8002686:	f280 8091 	bge.w	80027ac <AoC_Day_03+0xabc>
			{
				int32_t index = getIndex(maze_width, current_column + 1, current_row);
 800268a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800268e:	3301      	adds	r3, #1
 8002690:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002694:	4619      	mov	r1, r3
 8002696:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 800269a:	f7ff fb15 	bl	8001cc8 <getIndex>
 800269e:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
				if(maze[index] >= '0' && maze[index] <= '9')
 80026a2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80026a6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b2f      	cmp	r3, #47	; 0x2f
 80026b0:	d97c      	bls.n	80027ac <AoC_Day_03+0xabc>
 80026b2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80026b6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b39      	cmp	r3, #57	; 0x39
 80026c0:	d874      	bhi.n	80027ac <AoC_Day_03+0xabc>
				{
					is_aligned_counter++;
 80026c2:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 80026c6:	3301      	adds	r3, #1
 80026c8:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 80026cc:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80026d0:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 80026d4:	e004      	b.n	80026e0 <AoC_Day_03+0x9f0>
 80026d6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80026da:	3b01      	subs	r3, #1
 80026dc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80026e0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0f      	blt.n	8002708 <AoC_Day_03+0xa18>
 80026e8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80026ec:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b2f      	cmp	r3, #47	; 0x2f
 80026f6:	d907      	bls.n	8002708 <AoC_Day_03+0xa18>
 80026f8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80026fc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b39      	cmp	r3, #57	; 0x39
 8002706:	d9e6      	bls.n	80026d6 <AoC_Day_03+0x9e6>
					int32_t end_ptr = index;
 8002708:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800270c:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002710:	e004      	b.n	800271c <AoC_Day_03+0xa2c>
 8002712:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8002716:	3301      	adds	r3, #1
 8002718:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 800271c:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8002720:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b2f      	cmp	r3, #47	; 0x2f
 800272a:	d907      	bls.n	800273c <AoC_Day_03+0xa4c>
 800272c:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8002730:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b39      	cmp	r3, #57	; 0x39
 800273a:	d9ea      	bls.n	8002712 <AoC_Day_03+0xa22>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	2220      	movs	r2, #32
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f01c fddb 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 800274a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800274e:	3301      	adds	r3, #1
 8002750:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002754:	18d1      	adds	r1, r2, r3
 8002756:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800275a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	461a      	mov	r2, r3
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4618      	mov	r0, r3
 800276a:	f01c fdbb 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	4618      	mov	r0, r3
 8002774:	f01c fb24 	bl	801edc0 <atoi>
 8002778:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					gear_ratio *= value;
 800277c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002780:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 800278c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002790:	3301      	adds	r3, #1
 8002792:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002796:	18d0      	adds	r0, r2, r3
 8002798:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800279c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	461a      	mov	r2, r3
 80027a6:	212e      	movs	r1, #46	; 0x2e
 80027a8:	f01c fdaa 	bl	801f300 <memset>
				}
			}

			// right down
			if(current_row < maze_dept-1 && current_column < maze_width-1)
 80027ac:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80027b0:	3b01      	subs	r3, #1
 80027b2:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80027b6:	429a      	cmp	r2, r3
 80027b8:	f280 809a 	bge.w	80028f0 <AoC_Day_03+0xc00>
 80027bc:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80027c0:	3b01      	subs	r3, #1
 80027c2:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 80027c6:	429a      	cmp	r2, r3
 80027c8:	f280 8092 	bge.w	80028f0 <AoC_Day_03+0xc00>
			{
				int32_t index = getIndex(maze_width, current_column + 1, current_row + 1);
 80027cc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80027d0:	1c59      	adds	r1, r3, #1
 80027d2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80027d6:	3301      	adds	r3, #1
 80027d8:	461a      	mov	r2, r3
 80027da:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 80027de:	f7ff fa73 	bl	8001cc8 <getIndex>
 80027e2:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
				if(maze[index] >= '0' && maze[index] <= '9')
 80027e6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027ea:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b2f      	cmp	r3, #47	; 0x2f
 80027f4:	d97c      	bls.n	80028f0 <AoC_Day_03+0xc00>
 80027f6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027fa:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b39      	cmp	r3, #57	; 0x39
 8002804:	d874      	bhi.n	80028f0 <AoC_Day_03+0xc00>
				{
					is_aligned_counter++;
 8002806:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 800280a:	3301      	adds	r3, #1
 800280c:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002810:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002814:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 8002818:	e004      	b.n	8002824 <AoC_Day_03+0xb34>
 800281a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800281e:	3b01      	subs	r3, #1
 8002820:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8002824:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0f      	blt.n	800284c <AoC_Day_03+0xb5c>
 800282c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002830:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b2f      	cmp	r3, #47	; 0x2f
 800283a:	d907      	bls.n	800284c <AoC_Day_03+0xb5c>
 800283c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002840:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b39      	cmp	r3, #57	; 0x39
 800284a:	d9e6      	bls.n	800281a <AoC_Day_03+0xb2a>
					int32_t end_ptr = index;
 800284c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002850:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002854:	e004      	b.n	8002860 <AoC_Day_03+0xb70>
 8002856:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800285a:	3301      	adds	r3, #1
 800285c:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8002860:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8002864:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b2f      	cmp	r3, #47	; 0x2f
 800286e:	d907      	bls.n	8002880 <AoC_Day_03+0xb90>
 8002870:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8002874:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b39      	cmp	r3, #57	; 0x39
 800287e:	d9ea      	bls.n	8002856 <AoC_Day_03+0xb66>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	2220      	movs	r2, #32
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f01c fd39 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 800288e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002892:	3301      	adds	r3, #1
 8002894:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002898:	18d1      	adds	r1, r2, r3
 800289a:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 800289e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	461a      	mov	r2, r3
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4618      	mov	r0, r3
 80028ae:	f01c fd19 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4618      	mov	r0, r3
 80028b8:	f01c fa82 	bl	801edc0 <atoi>
 80028bc:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
					gear_ratio *= value;
 80028c0:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80028c4:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 80028d0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80028d4:	3301      	adds	r3, #1
 80028d6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80028da:	18d0      	adds	r0, r2, r3
 80028dc:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80028e0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	461a      	mov	r2, r3
 80028ea:	212e      	movs	r1, #46	; 0x2e
 80028ec:	f01c fd08 	bl	801f300 <memset>
				}
			}

			// down
			if(current_row < maze_dept-1)
 80028f0:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80028f4:	3b01      	subs	r3, #1
 80028f6:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80028fa:	429a      	cmp	r2, r3
 80028fc:	f280 8091 	bge.w	8002a22 <AoC_Day_03+0xd32>
			{
				int32_t index = getIndex(maze_width, current_column, current_row + 1);
 8002900:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002904:	3301      	adds	r3, #1
 8002906:	461a      	mov	r2, r3
 8002908:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 800290c:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002910:	f7ff f9da 	bl	8001cc8 <getIndex>
 8002914:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
				if(maze[index] >= '0' && maze[index] <= '9')
 8002918:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800291c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002920:	4413      	add	r3, r2
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b2f      	cmp	r3, #47	; 0x2f
 8002926:	d97c      	bls.n	8002a22 <AoC_Day_03+0xd32>
 8002928:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800292c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b39      	cmp	r3, #57	; 0x39
 8002936:	d874      	bhi.n	8002a22 <AoC_Day_03+0xd32>
				{
					is_aligned_counter++;
 8002938:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 800293c:	3301      	adds	r3, #1
 800293e:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002942:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002946:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 800294a:	e004      	b.n	8002956 <AoC_Day_03+0xc66>
 800294c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8002950:	3b01      	subs	r3, #1
 8002952:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8002956:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800295a:	2b00      	cmp	r3, #0
 800295c:	db0f      	blt.n	800297e <AoC_Day_03+0xc8e>
 800295e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8002962:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b2f      	cmp	r3, #47	; 0x2f
 800296c:	d907      	bls.n	800297e <AoC_Day_03+0xc8e>
 800296e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8002972:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002976:	4413      	add	r3, r2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b39      	cmp	r3, #57	; 0x39
 800297c:	d9e6      	bls.n	800294c <AoC_Day_03+0xc5c>
					int32_t end_ptr = index;
 800297e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002982:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002986:	e004      	b.n	8002992 <AoC_Day_03+0xca2>
 8002988:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800298c:	3301      	adds	r3, #1
 800298e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8002992:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8002996:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b2f      	cmp	r3, #47	; 0x2f
 80029a0:	d907      	bls.n	80029b2 <AoC_Day_03+0xcc2>
 80029a2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80029a6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b39      	cmp	r3, #57	; 0x39
 80029b0:	d9ea      	bls.n	8002988 <AoC_Day_03+0xc98>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	2220      	movs	r2, #32
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f01c fca0 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 80029c0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80029c4:	3301      	adds	r3, #1
 80029c6:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80029ca:	18d1      	adds	r1, r2, r3
 80029cc:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80029d0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	461a      	mov	r2, r3
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4618      	mov	r0, r3
 80029e0:	f01c fc80 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	4618      	mov	r0, r3
 80029ea:	f01c f9e9 	bl	801edc0 <atoi>
 80029ee:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
					gear_ratio *= value;
 80029f2:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80029f6:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002a02:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8002a06:	3301      	adds	r3, #1
 8002a08:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a0c:	18d0      	adds	r0, r2, r3
 8002a0e:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8002a12:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	212e      	movs	r1, #46	; 0x2e
 8002a1e:	f01c fc6f 	bl	801f300 <memset>
				}
			}

			// down left
			if(current_row < maze_dept-1 && current_column > 0)
 8002a22:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f280 8097 	bge.w	8002b60 <AoC_Day_03+0xe70>
 8002a32:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f340 8092 	ble.w	8002b60 <AoC_Day_03+0xe70>
			{
				int32_t index = getIndex(maze_width, current_column - 1, current_row + 1);
 8002a3c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002a40:	1e59      	subs	r1, r3, #1
 8002a42:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002a46:	3301      	adds	r3, #1
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002a4e:	f7ff f93b 	bl	8001cc8 <getIndex>
 8002a52:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
				if(maze[index] >= '0' && maze[index] <= '9')
 8002a56:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002a5a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b2f      	cmp	r3, #47	; 0x2f
 8002a64:	d97c      	bls.n	8002b60 <AoC_Day_03+0xe70>
 8002a66:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002a6a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002a6e:	4413      	add	r3, r2
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b39      	cmp	r3, #57	; 0x39
 8002a74:	d874      	bhi.n	8002b60 <AoC_Day_03+0xe70>
				{
					is_aligned_counter++;
 8002a76:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002a80:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002a84:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 8002a88:	e004      	b.n	8002a94 <AoC_Day_03+0xda4>
 8002a8a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002a94:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0f      	blt.n	8002abc <AoC_Day_03+0xdcc>
 8002a9c:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002aa0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8002aaa:	d907      	bls.n	8002abc <AoC_Day_03+0xdcc>
 8002aac:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002ab0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b39      	cmp	r3, #57	; 0x39
 8002aba:	d9e6      	bls.n	8002a8a <AoC_Day_03+0xd9a>
					int32_t end_ptr = index;
 8002abc:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002ac0:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002ac4:	e004      	b.n	8002ad0 <AoC_Day_03+0xde0>
 8002ac6:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8002aca:	3301      	adds	r3, #1
 8002acc:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8002ad0:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8002ad4:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b2f      	cmp	r3, #47	; 0x2f
 8002ade:	d907      	bls.n	8002af0 <AoC_Day_03+0xe00>
 8002ae0:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8002ae4:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b39      	cmp	r3, #57	; 0x39
 8002aee:	d9ea      	bls.n	8002ac6 <AoC_Day_03+0xdd6>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	2220      	movs	r2, #32
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f01c fc01 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002afe:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002b02:	3301      	adds	r3, #1
 8002b04:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002b08:	18d1      	adds	r1, r2, r3
 8002b0a:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8002b0e:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	461a      	mov	r2, r3
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f01c fbe1 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	4618      	mov	r0, r3
 8002b28:	f01c f94a 	bl	801edc0 <atoi>
 8002b2c:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
					gear_ratio *= value;
 8002b30:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002b34:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002b40:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002b44:	3301      	adds	r3, #1
 8002b46:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002b4a:	18d0      	adds	r0, r2, r3
 8002b4c:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8002b50:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	461a      	mov	r2, r3
 8002b5a:	212e      	movs	r1, #46	; 0x2e
 8002b5c:	f01c fbd0 	bl	801f300 <memset>
				}
			}

			// left
			if(current_column > 0)
 8002b60:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f340 8091 	ble.w	8002c8c <AoC_Day_03+0xf9c>
			{
				int32_t index = getIndex(maze_width, current_column - 1, current_row);
 8002b6a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8002b74:	4619      	mov	r1, r3
 8002b76:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002b7a:	f7ff f8a5 	bl	8001cc8 <getIndex>
 8002b7e:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
				if(maze[index] >= '0' && maze[index] <= '9')
 8002b82:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002b86:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b2f      	cmp	r3, #47	; 0x2f
 8002b90:	d97c      	bls.n	8002c8c <AoC_Day_03+0xf9c>
 8002b92:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002b96:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b39      	cmp	r3, #57	; 0x39
 8002ba0:	d874      	bhi.n	8002c8c <AoC_Day_03+0xf9c>
				{
					is_aligned_counter++;
 8002ba2:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002bac:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002bb0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 8002bb4:	e004      	b.n	8002bc0 <AoC_Day_03+0xed0>
 8002bb6:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002bc0:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db0f      	blt.n	8002be8 <AoC_Day_03+0xef8>
 8002bc8:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002bcc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b2f      	cmp	r3, #47	; 0x2f
 8002bd6:	d907      	bls.n	8002be8 <AoC_Day_03+0xef8>
 8002bd8:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002bdc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b39      	cmp	r3, #57	; 0x39
 8002be6:	d9e6      	bls.n	8002bb6 <AoC_Day_03+0xec6>
					int32_t end_ptr = index;
 8002be8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002bec:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002bf0:	e004      	b.n	8002bfc <AoC_Day_03+0xf0c>
 8002bf2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002bfc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c00:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b2f      	cmp	r3, #47	; 0x2f
 8002c0a:	d907      	bls.n	8002c1c <AoC_Day_03+0xf2c>
 8002c0c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8002c10:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002c14:	4413      	add	r3, r2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b39      	cmp	r3, #57	; 0x39
 8002c1a:	d9ea      	bls.n	8002bf2 <AoC_Day_03+0xf02>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	2220      	movs	r2, #32
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f01c fb6b 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002c2a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002c34:	18d1      	adds	r1, r2, r3
 8002c36:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002c3a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	461a      	mov	r2, r3
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f01c fb4b 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4618      	mov	r0, r3
 8002c54:	f01c f8b4 	bl	801edc0 <atoi>
 8002c58:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
					gear_ratio *= value;
 8002c5c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002c60:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002c6c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002c70:	3301      	adds	r3, #1
 8002c72:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002c76:	18d0      	adds	r0, r2, r3
 8002c78:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8002c7c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	461a      	mov	r2, r3
 8002c86:	212e      	movs	r1, #46	; 0x2e
 8002c88:	f01c fb3a 	bl	801f300 <memset>
				}
			}

			// left up
			if(current_row > 0 && current_column > 0)
 8002c8c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f340 8097 	ble.w	8002dc4 <AoC_Day_03+0x10d4>
 8002c96:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f340 8092 	ble.w	8002dc4 <AoC_Day_03+0x10d4>
			{
				int32_t index = getIndex(maze_width, current_column - 1, current_row - 1);
 8002ca0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8002ca4:	1e59      	subs	r1, r3, #1
 8002ca6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002caa:	3b01      	subs	r3, #1
 8002cac:	461a      	mov	r2, r3
 8002cae:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 8002cb2:	f7ff f809 	bl	8001cc8 <getIndex>
 8002cb6:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
				if(maze[index] >= '0' && maze[index] <= '9')
 8002cba:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002cbe:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b2f      	cmp	r3, #47	; 0x2f
 8002cc8:	d97c      	bls.n	8002dc4 <AoC_Day_03+0x10d4>
 8002cca:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002cce:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b39      	cmp	r3, #57	; 0x39
 8002cd8:	d874      	bhi.n	8002dc4 <AoC_Day_03+0x10d4>
				{
					is_aligned_counter++;
 8002cda:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f887 334f 	strb.w	r3, [r7, #847]	; 0x34f

					// get beginning and end of value
					int32_t start_ptr = index;
 8002ce4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002ce8:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
					for(; start_ptr >= 0 && maze[start_ptr] >= '0' && maze[start_ptr] <= '9'; start_ptr--);
 8002cec:	e004      	b.n	8002cf8 <AoC_Day_03+0x1008>
 8002cee:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8002cf8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0f      	blt.n	8002d20 <AoC_Day_03+0x1030>
 8002d00:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002d04:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002d0e:	d907      	bls.n	8002d20 <AoC_Day_03+0x1030>
 8002d10:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002d14:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b39      	cmp	r3, #57	; 0x39
 8002d1e:	d9e6      	bls.n	8002cee <AoC_Day_03+0xffe>
					int32_t end_ptr = index;
 8002d20:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002d24:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
					for(; maze[end_ptr] >= '0' && maze[end_ptr] <= '9'; end_ptr++);
 8002d28:	e004      	b.n	8002d34 <AoC_Day_03+0x1044>
 8002d2a:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002d34:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8002d38:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b2f      	cmp	r3, #47	; 0x2f
 8002d42:	d907      	bls.n	8002d54 <AoC_Day_03+0x1064>
 8002d44:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8002d48:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b39      	cmp	r3, #57	; 0x39
 8002d52:	d9ea      	bls.n	8002d2a <AoC_Day_03+0x103a>

					// get value
					char value_str[32];
					memset(value_str, 0x00, 32);
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	2220      	movs	r2, #32
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f01c facf 	bl	801f300 <memset>
					memcpy(value_str, &maze[start_ptr + 1], end_ptr - start_ptr - 1);
 8002d62:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002d66:	3301      	adds	r3, #1
 8002d68:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002d6c:	18d1      	adds	r1, r2, r3
 8002d6e:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002d72:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	4618      	mov	r0, r3
 8002d82:	f01c faaf 	bl	801f2e4 <memcpy>
					int32_t value = atoi(value_str);
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01c f818 	bl	801edc0 <atoi>
 8002d90:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
					gear_ratio *= value;
 8002d94:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002d98:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

					// clear value
					memset(&maze[start_ptr + 1], '.', end_ptr - start_ptr - 1);
 8002da4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002da8:	3301      	adds	r3, #1
 8002daa:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8002dae:	18d0      	adds	r0, r2, r3
 8002db0:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002db4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	212e      	movs	r1, #46	; 0x2e
 8002dc0:	f01c fa9e 	bl	801f300 <memset>
				}
			}

			// move to end of character
			maze_ptr++;
 8002dc4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350

			// if alignment count is 2
			if(is_aligned_counter == 2)
 8002dce:	f897 334f 	ldrb.w	r3, [r7, #847]	; 0x34f
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d106      	bne.n	8002de4 <AoC_Day_03+0x10f4>
				sum_of_values += gear_ratio;
 8002dd6:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002dda:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002dde:	4413      	add	r3, r2
 8002de0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
		while(maze_ptr < file_size)
 8002de4:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8002de8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f6ff aada 	blt.w	80023a6 <AoC_Day_03+0x6b6>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002dfa:	490e      	ldr	r1, [pc, #56]	; (8002e34 <AoC_Day_03+0x1144>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f01c faa3 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fa02 	bl	8000210 <strlen>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f107 010c 	add.w	r1, r7, #12
 8002e14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e18:	f2a3 3369 	subw	r3, r3, #873	; 0x369
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fa08 	bl	8001234 <AdventOfCode_print>

		// clean up
		sram_clrmem();
 8002e24:	f007 f9ce 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	08024dec 	.word	0x08024dec

08002e38 <AoC_Day_04>:
	uint8_t numbers_ptr;
	uint32_t instances;
};

AdventOfCode_return_t AoC_Day_04(AdventOfCode_config_t config)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4602      	mov	r2, r0
 8002e42:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002e46:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002e4a:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8002e4c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002e50:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <AoC_Day_04+0x28>
		return AOC_RETURN_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f000 bc32 	b.w	80036c4 <AoC_Day_04+0x88c>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8002e60:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002e64:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d10a      	bne.n	8002e84 <AoC_Day_04+0x4c>
			ret = f_open(&file, "day4t.txt", FA_READ);
 8002e6e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002e72:	2201      	movs	r2, #1
 8002e74:	49bd      	ldr	r1, [pc, #756]	; (800316c <AoC_Day_04+0x334>)
 8002e76:	4618      	mov	r0, r3
 8002e78:	f019 ff6e 	bl	801cd58 <f_open>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 8002e82:	e009      	b.n	8002e98 <AoC_Day_04+0x60>
		else ret = f_open(&file, "day4.txt", FA_READ);
 8002e84:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	49b9      	ldr	r1, [pc, #740]	; (8003170 <AoC_Day_04+0x338>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f019 ff63 	bl	801cd58 <f_open>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
		if(ret != FR_OK)
 8002e98:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <AoC_Day_04+0x82>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8002ea0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002ea4:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2213      	movs	r2, #19
 8002eac:	49b1      	ldr	r1, [pc, #708]	; (8003174 <AoC_Day_04+0x33c>)
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f9c0 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f000 bc05 	b.w	80036c4 <AoC_Day_04+0x88c>
		}

		// list of cards
		Card_t *cards = (Card_t*)sram_malloc(sizeof(Card_t) * 210);
 8002eba:	f642 50f0 	movw	r0, #11760	; 0x2df0
 8002ebe:	f007 f93d 	bl	800a13c <sram_malloc>
 8002ec2:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
		uint8_t card_index = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
		memset(cards, 0x00, sizeof(Card_t) * 210);
 8002ecc:	f642 52f0 	movw	r2, #11760	; 0x2df0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8002ed6:	f01c fa13 	bl	801f300 <memset>

		// iterate lines
		char buffer[128];
		while(f_gets(buffer, 128, &file))
 8002eda:	e102      	b.n	80030e2 <AoC_Day_04+0x2aa>
		{
			// tokenize data
			char token_buffer[48][8];
			memset(token_buffer, 0x00, 48 * 8);
 8002edc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ee0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f01c fa0a 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	49a1      	ldr	r1, [pc, #644]	; (8003178 <AoC_Day_04+0x340>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f01c fa58 	bl	801f3a8 <strtok>
 8002ef8:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
			uint8_t token_counter = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			while(token != NULL && token_counter < 48)
 8002f02:	e01b      	b.n	8002f3c <AoC_Day_04+0x104>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8002f04:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8002f08:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	18d4      	adds	r4, r2, r3
 8002f10:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002f14:	f7fd f97c 	bl	8000210 <strlen>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8002f20:	4620      	mov	r0, r4
 8002f22:	f01c f9df 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 8002f26:	4994      	ldr	r1, [pc, #592]	; (8003178 <AoC_Day_04+0x340>)
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f01c fa3d 	bl	801f3a8 <strtok>
 8002f2e:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
				token_counter++;
 8002f32:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8002f36:	3301      	adds	r3, #1
 8002f38:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			while(token != NULL && token_counter < 48)
 8002f3c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <AoC_Day_04+0x114>
 8002f44:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8002f48:	2b2f      	cmp	r3, #47	; 0x2f
 8002f4a:	d9db      	bls.n	8002f04 <AoC_Day_04+0xcc>
			}

			// insert card id
			cards[card_index].id = atoi(token_buffer[1]);
 8002f4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f50:	3308      	adds	r3, #8
 8002f52:	4618      	mov	r0, r3
 8002f54:	f01b ff34 	bl	801edc0 <atoi>
 8002f58:	4601      	mov	r1, r0
 8002f5a:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	461a      	mov	r2, r3
 8002f68:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b2ca      	uxtb	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]

			// process winning numbers
			uint8_t winning_number_index;
			memset(cards[card_index].winning, 0x00, 16);
 8002f72:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002f84:	4413      	add	r3, r2
 8002f86:	3301      	adds	r3, #1
 8002f88:	2210      	movs	r2, #16
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f01c f9b7 	bl	801f300 <memset>
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 8002f92:	2302      	movs	r3, #2
 8002f94:	f887 346e 	strb.w	r3, [r7, #1134]	; 0x46e
 8002f98:	e021      	b.n	8002fde <AoC_Day_04+0x1a6>
			{
				uint8_t value = atoi(token_buffer[winning_number_index]);
 8002f9a:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002f9e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f01b ff0a 	bl	801edc0 <atoi>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
				cards[card_index].winning[winning_number_index - 2] = value;
 8002fb2:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002fc4:	441a      	add	r2, r3
 8002fc6:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002fca:	3b02      	subs	r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	f897 243d 	ldrb.w	r2, [r7, #1085]	; 0x43d
 8002fd2:	705a      	strb	r2, [r3, #1]
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 8002fd4:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f887 346e 	strb.w	r3, [r7, #1134]	; 0x46e
 8002fde:	f897 246e 	ldrb.w	r2, [r7, #1134]	; 0x46e
 8002fe2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002fe6:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8002fea:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002fee:	2b7c      	cmp	r3, #124	; 0x7c
 8002ff0:	d003      	beq.n	8002ffa <AoC_Day_04+0x1c2>
 8002ff2:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	d9cf      	bls.n	8002f9a <AoC_Day_04+0x162>
			}
			cards[card_index].winning_ptr = winning_number_index - 2;
 8002ffa:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	461a      	mov	r2, r3
 8003008:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800300c:	4413      	add	r3, r2
 800300e:	f897 246e 	ldrb.w	r2, [r7, #1134]	; 0x46e
 8003012:	3a02      	subs	r2, #2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	745a      	strb	r2, [r3, #17]

			// process card numbers
			uint8_t card_number_index = winning_number_index + 1;
 8003018:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 800301c:	3301      	adds	r3, #1
 800301e:	f887 346d 	strb.w	r3, [r7, #1133]	; 0x46d
			memset(cards[card_index].numbers, 0x00, 32);
 8003022:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	461a      	mov	r2, r3
 8003030:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8003034:	4413      	add	r3, r2
 8003036:	3312      	adds	r3, #18
 8003038:	2220      	movs	r2, #32
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f01c f95f 	bl	801f300 <memset>
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 8003042:	e024      	b.n	800308e <AoC_Day_04+0x256>
			{
				uint8_t value = atoi(token_buffer[card_number_index]);
 8003044:	f897 346d 	ldrb.w	r3, [r7, #1133]	; 0x46d
 8003048:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f01b feb5 	bl	801edc0 <atoi>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 343c 	strb.w	r3, [r7, #1084]	; 0x43c
				cards[card_index].numbers[card_number_index - winning_number_index - 1] = value;
 800305c:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	461a      	mov	r2, r3
 800306a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800306e:	441a      	add	r2, r3
 8003070:	f897 146d 	ldrb.w	r1, [r7, #1133]	; 0x46d
 8003074:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 8003078:	1acb      	subs	r3, r1, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	f897 243c 	ldrb.w	r2, [r7, #1084]	; 0x43c
 8003082:	749a      	strb	r2, [r3, #18]
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 8003084:	f897 346d 	ldrb.w	r3, [r7, #1133]	; 0x46d
 8003088:	3301      	adds	r3, #1
 800308a:	f887 346d 	strb.w	r3, [r7, #1133]	; 0x46d
 800308e:	f897 246d 	ldrb.w	r2, [r7, #1133]	; 0x46d
 8003092:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003096:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800309a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <AoC_Day_04+0x278>
 80030a2:	f897 246d 	ldrb.w	r2, [r7, #1133]	; 0x46d
 80030a6:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	ddc9      	ble.n	8003044 <AoC_Day_04+0x20c>
			}
			cards[card_index].numbers_ptr = card_number_index - winning_number_index - 1;
 80030b0:	f897 246d 	ldrb.w	r2, [r7, #1133]	; 0x46d
 80030b4:	f897 346e 	ldrb.w	r3, [r7, #1134]	; 0x46e
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	b2d9      	uxtb	r1, r3
 80030bc:	f897 2476 	ldrb.w	r2, [r7, #1142]	; 0x476
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	461a      	mov	r2, r3
 80030ca:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80030ce:	4413      	add	r3, r2
 80030d0:	1e4a      	subs	r2, r1, #1
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			card_index++;
 80030d8:	f897 3476 	ldrb.w	r3, [r7, #1142]	; 0x476
 80030dc:	3301      	adds	r3, #1
 80030de:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
		while(f_gets(buffer, 128, &file))
 80030e2:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	4618      	mov	r0, r3
 80030ee:	f01a fd07 	bl	801db00 <f_gets>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f aef1 	bne.w	8002edc <AoC_Day_04+0xa4>
		}

		// process cards
		uint32_t sum_of_values = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
		for(uint8_t index=0; index<card_index; index++)
 8003100:	2300      	movs	r3, #0
 8003102:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8003106:	e073      	b.n	80031f0 <AoC_Day_04+0x3b8>
		{
			// for each number card
			uint32_t card_worth = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
			for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 800310e:	2300      	movs	r3, #0
 8003110:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8003114:	e050      	b.n	80031b8 <AoC_Day_04+0x380>
			{
				// check if in list
				for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 8003116:	2300      	movs	r3, #0
 8003118:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 800311c:	e038      	b.n	8003190 <AoC_Day_04+0x358>
				{
					if(cards[index].numbers[numbers_index] == cards[index].winning[winning_index])
 800311e:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	461a      	mov	r2, r3
 800312c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8003130:	441a      	add	r2, r3
 8003132:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8003136:	4413      	add	r3, r2
 8003138:	7c99      	ldrb	r1, [r3, #18]
 800313a:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	461a      	mov	r2, r3
 8003148:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800314c:	441a      	add	r2, r3
 800314e:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 8003152:	4413      	add	r3, r2
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	4299      	cmp	r1, r3
 8003158:	d115      	bne.n	8003186 <AoC_Day_04+0x34e>
					{
						if(!card_worth)
 800315a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <AoC_Day_04+0x344>
							card_worth = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003168:	e00d      	b.n	8003186 <AoC_Day_04+0x34e>
 800316a:	bf00      	nop
 800316c:	08024e04 	.word	0x08024e04
 8003170:	08024e10 	.word	0x08024e10
 8003174:	08024e1c 	.word	0x08024e1c
 8003178:	08024e34 	.word	0x08024e34
						else card_worth *= 2;
 800317c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
				for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 8003186:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 800318a:	3301      	adds	r3, #1
 800318c:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8003190:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	461a      	mov	r2, r3
 800319e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80031a2:	4413      	add	r3, r2
 80031a4:	7c5b      	ldrb	r3, [r3, #17]
 80031a6:	f897 245e 	ldrb.w	r2, [r7, #1118]	; 0x45e
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3b7      	bcc.n	800311e <AoC_Day_04+0x2e6>
			for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 80031ae:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80031b2:	3301      	adds	r3, #1
 80031b4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80031b8:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	461a      	mov	r2, r3
 80031c6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80031ca:	4413      	add	r3, r2
 80031cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031d0:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d39e      	bcc.n	8003116 <AoC_Day_04+0x2de>
					}
				}
			}
			sum_of_values += card_worth;
 80031d8:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80031dc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80031e0:	4413      	add	r3, r2
 80031e2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
		for(uint8_t index=0; index<card_index; index++)
 80031e6:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80031ea:	3301      	adds	r3, #1
 80031ec:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 80031f0:	f897 2467 	ldrb.w	r2, [r7, #1127]	; 0x467
 80031f4:	f897 3476 	ldrb.w	r3, [r7, #1142]	; 0x476
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d385      	bcc.n	8003108 <AoC_Day_04+0x2d0>
		}

		// output answer
		char answer[32];
		sprintf(answer, "    Part 1 answer: %ld\n", sum_of_values);
 80031fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003200:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003204:	49cb      	ldr	r1, [pc, #812]	; (8003534 <AoC_Day_04+0x6fc>)
 8003206:	4618      	mov	r0, r3
 8003208:	f01c f89e 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800320c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003210:	4618      	mov	r0, r3
 8003212:	f7fc fffd 	bl	8000210 <strlen>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800321e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003222:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f803 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 800322e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003232:	4618      	mov	r0, r3
 8003234:	f01a fa80 	bl	801d738 <f_close>
		sram_clrmem();
 8003238:	f006 ffc4 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 800323c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003240:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d10a      	bne.n	8003260 <AoC_Day_04+0x428>
			ret = f_open(&file, "day4t.txt", FA_READ);
 800324a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800324e:	2201      	movs	r2, #1
 8003250:	49b9      	ldr	r1, [pc, #740]	; (8003538 <AoC_Day_04+0x700>)
 8003252:	4618      	mov	r0, r3
 8003254:	f019 fd80 	bl	801cd58 <f_open>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
 800325e:	e009      	b.n	8003274 <AoC_Day_04+0x43c>
		else ret = f_open(&file, "day4.txt", FA_READ);
 8003260:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003264:	2201      	movs	r2, #1
 8003266:	49b5      	ldr	r1, [pc, #724]	; (800353c <AoC_Day_04+0x704>)
 8003268:	4618      	mov	r0, r3
 800326a:	f019 fd75 	bl	801cd58 <f_open>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
		if(ret != FR_OK)
 8003274:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <AoC_Day_04+0x45c>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("    Cannot find file!\n"));
 800327c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003280:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2216      	movs	r2, #22
 8003288:	49ad      	ldr	r1, [pc, #692]	; (8003540 <AoC_Day_04+0x708>)
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd ffd2 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8003290:	2301      	movs	r3, #1
 8003292:	e217      	b.n	80036c4 <AoC_Day_04+0x88c>
		}

		// list of cards
		Card_t *cards = (Card_t*)sram_malloc(sizeof(Card_t) * 210);
 8003294:	f642 50f0 	movw	r0, #11760	; 0x2df0
 8003298:	f006 ff50 	bl	800a13c <sram_malloc>
 800329c:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
		uint8_t card_index = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
		memset(cards, 0x00, sizeof(Card_t) * 210);
 80032a6:	f642 52f0 	movw	r2, #11760	; 0x2df0
 80032aa:	2100      	movs	r1, #0
 80032ac:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 80032b0:	f01c f826 	bl	801f300 <memset>

		// iterate lines
		char buffer[128];
		while(f_gets(buffer, 128, &file))
 80032b4:	e102      	b.n	80034bc <AoC_Day_04+0x684>
		{
			// tokenize data
			char token_buffer[48][8];
			memset(token_buffer, 0x00, 48 * 8);
 80032b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032ba:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f01c f81d 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	499e      	ldr	r1, [pc, #632]	; (8003544 <AoC_Day_04+0x70c>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f01c f86b 	bl	801f3a8 <strtok>
 80032d2:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
			uint8_t token_counter = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			while(token != NULL && token_counter < 48)
 80032dc:	e01b      	b.n	8003316 <AoC_Day_04+0x4de>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 80032de:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80032e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	18d4      	adds	r4, r2, r3
 80032ea:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 80032ee:	f7fc ff8f 	bl	8000210 <strlen>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80032fa:	4620      	mov	r0, r4
 80032fc:	f01b fff2 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 8003300:	4990      	ldr	r1, [pc, #576]	; (8003544 <AoC_Day_04+0x70c>)
 8003302:	2000      	movs	r0, #0
 8003304:	f01c f850 	bl	801f3a8 <strtok>
 8003308:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				token_counter++;
 800330c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003310:	3301      	adds	r3, #1
 8003312:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			while(token != NULL && token_counter < 48)
 8003316:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <AoC_Day_04+0x4ee>
 800331e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8003322:	2b2f      	cmp	r3, #47	; 0x2f
 8003324:	d9db      	bls.n	80032de <AoC_Day_04+0x4a6>
			}

			// insert card id
			cards[card_index].id = atoi(token_buffer[1]);
 8003326:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800332a:	3308      	adds	r3, #8
 800332c:	4618      	mov	r0, r3
 800332e:	f01b fd47 	bl	801edc0 <atoi>
 8003332:	4601      	mov	r1, r0
 8003334:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	461a      	mov	r2, r3
 8003342:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003346:	4413      	add	r3, r2
 8003348:	b2ca      	uxtb	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]

			// process winning numbers
			uint8_t winning_number_index;
			memset(cards[card_index].winning, 0x00, 16);
 800334c:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	461a      	mov	r2, r3
 800335a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800335e:	4413      	add	r3, r2
 8003360:	3301      	adds	r3, #1
 8003362:	2210      	movs	r2, #16
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f01b ffca 	bl	801f300 <memset>
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 800336c:	2302      	movs	r3, #2
 800336e:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 8003372:	e021      	b.n	80033b8 <AoC_Day_04+0x580>
			{
				uint8_t value = atoi(token_buffer[winning_number_index]);
 8003374:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 8003378:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f01b fd1d 	bl	801edc0 <atoi>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
				cards[card_index].winning[winning_number_index - 2] = value;
 800338c:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	461a      	mov	r2, r3
 800339a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800339e:	441a      	add	r2, r3
 80033a0:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80033a4:	3b02      	subs	r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	f897 243f 	ldrb.w	r2, [r7, #1087]	; 0x43f
 80033ac:	705a      	strb	r2, [r3, #1]
			for(winning_number_index=2; token_buffer[winning_number_index][0]!='|' && winning_number_index < 16; winning_number_index++)
 80033ae:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80033b2:	3301      	adds	r3, #1
 80033b4:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 80033b8:	f897 2456 	ldrb.w	r2, [r7, #1110]	; 0x456
 80033bc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80033c0:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80033c4:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80033c8:	2b7c      	cmp	r3, #124	; 0x7c
 80033ca:	d003      	beq.n	80033d4 <AoC_Day_04+0x59c>
 80033cc:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d9cf      	bls.n	8003374 <AoC_Day_04+0x53c>
			}
			cards[card_index].winning_ptr = winning_number_index - 2;
 80033d4:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	461a      	mov	r2, r3
 80033e2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80033e6:	4413      	add	r3, r2
 80033e8:	f897 2456 	ldrb.w	r2, [r7, #1110]	; 0x456
 80033ec:	3a02      	subs	r2, #2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	745a      	strb	r2, [r3, #17]

			// process card numbers
			uint8_t card_number_index = winning_number_index + 1;
 80033f2:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 80033f6:	3301      	adds	r3, #1
 80033f8:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
			memset(cards[card_index].numbers, 0x00, 32);
 80033fc:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	461a      	mov	r2, r3
 800340a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800340e:	4413      	add	r3, r2
 8003410:	3312      	adds	r3, #18
 8003412:	2220      	movs	r2, #32
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f01b ff72 	bl	801f300 <memset>
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 800341c:	e024      	b.n	8003468 <AoC_Day_04+0x630>
			{
				uint8_t value = atoi(token_buffer[card_number_index]);
 800341e:	f897 3455 	ldrb.w	r3, [r7, #1109]	; 0x455
 8003422:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f01b fcc8 	bl	801edc0 <atoi>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e
				cards[card_index].numbers[card_number_index - winning_number_index - 1] = value;
 8003436:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	461a      	mov	r2, r3
 8003444:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003448:	441a      	add	r2, r3
 800344a:	f897 1455 	ldrb.w	r1, [r7, #1109]	; 0x455
 800344e:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 8003452:	1acb      	subs	r3, r1, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	f897 243e 	ldrb.w	r2, [r7, #1086]	; 0x43e
 800345c:	749a      	strb	r2, [r3, #18]
			for(; token_buffer[card_number_index][0]!=0x00 && (card_number_index - winning_number_index - 1) < 32; card_number_index++)
 800345e:	f897 3455 	ldrb.w	r3, [r7, #1109]	; 0x455
 8003462:	3301      	adds	r3, #1
 8003464:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
 8003468:	f897 2455 	ldrb.w	r2, [r7, #1109]	; 0x455
 800346c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8003470:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8003474:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <AoC_Day_04+0x652>
 800347c:	f897 2455 	ldrb.w	r2, [r7, #1109]	; 0x455
 8003480:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	ddc9      	ble.n	800341e <AoC_Day_04+0x5e6>
			}
			cards[card_index].numbers_ptr = card_number_index - winning_number_index - 1;
 800348a:	f897 2455 	ldrb.w	r2, [r7, #1109]	; 0x455
 800348e:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	b2d9      	uxtb	r1, r3
 8003496:	f897 245c 	ldrb.w	r2, [r7, #1116]	; 0x45c
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	461a      	mov	r2, r3
 80034a4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80034a8:	4413      	add	r3, r2
 80034aa:	1e4a      	subs	r2, r1, #1
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			card_index++;
 80034b2:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 80034b6:	3301      	adds	r3, #1
 80034b8:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
		while(f_gets(buffer, 128, &file))
 80034bc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	4618      	mov	r0, r3
 80034c8:	f01a fb1a 	bl	801db00 <f_gets>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f47f aef1 	bne.w	80032b6 <AoC_Day_04+0x47e>
		}

		// set instances to 1
		for(uint8_t index=0; index<210; index++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 3454 	strb.w	r3, [r7, #1108]	; 0x454
 80034da:	e010      	b.n	80034fe <AoC_Day_04+0x6c6>
			cards[index].instances = 1;
 80034dc:	f897 2454 	ldrb.w	r2, [r7, #1108]	; 0x454
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	461a      	mov	r2, r3
 80034ea:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80034ee:	4413      	add	r3, r2
 80034f0:	2201      	movs	r2, #1
 80034f2:	635a      	str	r2, [r3, #52]	; 0x34
		for(uint8_t index=0; index<210; index++)
 80034f4:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 80034f8:	3301      	adds	r3, #1
 80034fa:	f887 3454 	strb.w	r3, [r7, #1108]	; 0x454
 80034fe:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 8003502:	2bd1      	cmp	r3, #209	; 0xd1
 8003504:	d9ea      	bls.n	80034dc <AoC_Day_04+0x6a4>

		// calculate answer
		uint32_t sum_of_values = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
		for(int16_t index=card_index-1; index>=0; index--)
 800350c:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	f8a7 344e 	strh.w	r3, [r7, #1102]	; 0x44e
 800351a:	e0ad      	b.n	8003678 <AoC_Day_04+0x840>
		{
			// calculate matching cards
			uint8_t matches = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
			for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 8003522:	2300      	movs	r3, #0
 8003524:	f887 344c 	strb.w	r3, [r7, #1100]	; 0x44c
 8003528:	e04b      	b.n	80035c2 <AoC_Day_04+0x78a>
				for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 800352a:	2300      	movs	r3, #0
 800352c:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 8003530:	e032      	b.n	8003598 <AoC_Day_04+0x760>
 8003532:	bf00      	nop
 8003534:	08024e38 	.word	0x08024e38
 8003538:	08024e04 	.word	0x08024e04
 800353c:	08024e10 	.word	0x08024e10
 8003540:	08024e1c 	.word	0x08024e1c
 8003544:	08024e34 	.word	0x08024e34
					if(cards[index].numbers[numbers_index] == cards[index].winning[winning_index])
 8003548:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	461a      	mov	r2, r3
 8003556:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800355a:	441a      	add	r2, r3
 800355c:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003560:	4413      	add	r3, r2
 8003562:	7c99      	ldrb	r1, [r3, #18]
 8003564:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	461a      	mov	r2, r3
 8003572:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003576:	441a      	add	r2, r3
 8003578:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 800357c:	4413      	add	r3, r2
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	4299      	cmp	r1, r3
 8003582:	d104      	bne.n	800358e <AoC_Day_04+0x756>
						matches++;
 8003584:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003588:	3301      	adds	r3, #1
 800358a:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
				for(uint8_t numbers_index=0; numbers_index<cards[index].numbers_ptr; numbers_index++)
 800358e:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003592:	3301      	adds	r3, #1
 8003594:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 8003598:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	461a      	mov	r2, r3
 80035a6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80035aa:	4413      	add	r3, r2
 80035ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80035b0:	f897 244b 	ldrb.w	r2, [r7, #1099]	; 0x44b
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3c7      	bcc.n	8003548 <AoC_Day_04+0x710>
			for(uint8_t winning_index=0; winning_index<cards[index].winning_ptr; winning_index++)
 80035b8:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 80035bc:	3301      	adds	r3, #1
 80035be:	f887 344c 	strb.w	r3, [r7, #1100]	; 0x44c
 80035c2:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	461a      	mov	r2, r3
 80035d0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80035d4:	4413      	add	r3, r2
 80035d6:	7c5b      	ldrb	r3, [r3, #17]
 80035d8:	f897 244c 	ldrb.w	r2, [r7, #1100]	; 0x44c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3a4      	bcc.n	800352a <AoC_Day_04+0x6f2>

			// for the matches below the current match save instances
			for(uint8_t next_index=0; next_index<matches; next_index++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 80035e6:	e02a      	b.n	800363e <AoC_Day_04+0x806>
				cards[index].instances += cards[next_index + index + 1].instances;
 80035e8:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	461a      	mov	r2, r3
 80035f6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80035fa:	4413      	add	r3, r2
 80035fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80035fe:	f897 244a 	ldrb.w	r2, [r7, #1098]	; 0x44a
 8003602:	f9b7 344e 	ldrsh.w	r3, [r7, #1102]	; 0x44e
 8003606:	4413      	add	r3, r2
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	461a      	mov	r2, r3
 8003614:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8003618:	4413      	add	r3, r2
 800361a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800361c:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	461a      	mov	r2, r3
 800362a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800362e:	4413      	add	r3, r2
 8003630:	1842      	adds	r2, r0, r1
 8003632:	635a      	str	r2, [r3, #52]	; 0x34
			for(uint8_t next_index=0; next_index<matches; next_index++)
 8003634:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003638:	3301      	adds	r3, #1
 800363a:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 800363e:	f897 244a 	ldrb.w	r2, [r7, #1098]	; 0x44a
 8003642:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003646:	429a      	cmp	r2, r3
 8003648:	d3ce      	bcc.n	80035e8 <AoC_Day_04+0x7b0>

			// increment total
			sum_of_values += cards[index].instances;
 800364a:	f9b7 244e 	ldrsh.w	r2, [r7, #1102]	; 0x44e
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	461a      	mov	r2, r3
 8003658:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800365c:	4413      	add	r3, r2
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003664:	4413      	add	r3, r2
 8003666:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
		for(int16_t index=card_index-1; index>=0; index--)
 800366a:	f9b7 344e 	ldrsh.w	r3, [r7, #1102]	; 0x44e
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	f8a7 344e 	strh.w	r3, [r7, #1102]	; 0x44e
 8003678:	f9b7 344e 	ldrsh.w	r3, [r7, #1102]	; 0x44e
 800367c:	2b00      	cmp	r3, #0
 800367e:	f6bf af4d 	bge.w	800351c <AoC_Day_04+0x6e4>
		}


		// output answer
		char answer[32];
		sprintf(answer, "    Part 2 answer: %ld\n", sum_of_values);
 8003682:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003686:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800368a:	4911      	ldr	r1, [pc, #68]	; (80036d0 <AoC_Day_04+0x898>)
 800368c:	4618      	mov	r0, r3
 800368e:	f01b fe5b 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8003692:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fdba 	bl	8000210 <strlen>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80036a4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80036a8:	f2a3 4371 	subw	r3, r3, #1137	; 0x471
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fdc0 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80036b4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80036b8:	4618      	mov	r0, r3
 80036ba:	f01a f83d 	bl	801d738 <f_close>
		sram_clrmem();
 80036be:	f006 fd81 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	bf00      	nop
 80036d0:	08024e50 	.word	0x08024e50

080036d4 <AoC_Day_05>:
	uint64_t start;
	uint64_t length;
};

AdventOfCode_return_t AoC_Day_05(AdventOfCode_config_t config)
{
 80036d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d8:	f5ad 5db5 	sub.w	sp, sp, #5792	; 0x16a0
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4601      	mov	r1, r0
 80036e2:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80036e6:	f2a3 52c9 	subw	r2, r3, #1481	; 0x5c9
 80036ea:	460b      	mov	r3, r1
 80036ec:	7013      	strb	r3, [r2, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80036ee:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80036f2:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <AoC_Day_05+0x2e>
		return AOC_RETURN_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f001 bb71 	b.w	8004de4 <AoC_Day_05+0x1710>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8003702:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003706:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d112      	bne.n	8003736 <AoC_Day_05+0x62>
			ret = f_open(&file, "day5t.txt", FA_READ);
 8003710:	4bab      	ldr	r3, [pc, #684]	; (80039c0 <AoC_Day_05+0x2ec>)
 8003712:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003716:	f103 0310 	add.w	r3, r3, #16
 800371a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800371e:	4413      	add	r3, r2
 8003720:	2201      	movs	r2, #1
 8003722:	49a8      	ldr	r1, [pc, #672]	; (80039c4 <AoC_Day_05+0x2f0>)
 8003724:	4618      	mov	r0, r3
 8003726:	f019 fb17 	bl	801cd58 <f_open>
 800372a:	4603      	mov	r3, r0
 800372c:	f241 62a7 	movw	r2, #5799	; 0x16a7
 8003730:	443a      	add	r2, r7
 8003732:	7013      	strb	r3, [r2, #0]
 8003734:	e011      	b.n	800375a <AoC_Day_05+0x86>
		else ret = f_open(&file, "day5.txt", FA_READ);
 8003736:	4ba2      	ldr	r3, [pc, #648]	; (80039c0 <AoC_Day_05+0x2ec>)
 8003738:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800373c:	f103 0310 	add.w	r3, r3, #16
 8003740:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003744:	4413      	add	r3, r2
 8003746:	2201      	movs	r2, #1
 8003748:	499f      	ldr	r1, [pc, #636]	; (80039c8 <AoC_Day_05+0x2f4>)
 800374a:	4618      	mov	r0, r3
 800374c:	f019 fb04 	bl	801cd58 <f_open>
 8003750:	4603      	mov	r3, r0
 8003752:	f241 62a7 	movw	r2, #5799	; 0x16a7
 8003756:	443a      	add	r2, r7
 8003758:	7013      	strb	r3, [r2, #0]
		if(ret != FR_OK)
 800375a:	f241 63a7 	movw	r3, #5799	; 0x16a7
 800375e:	443b      	add	r3, r7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <AoC_Day_05+0xac>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8003766:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800376a:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2213      	movs	r2, #19
 8003772:	4996      	ldr	r1, [pc, #600]	; (80039cc <AoC_Day_05+0x2f8>)
 8003774:	4618      	mov	r0, r3
 8003776:	f7fd fd5d 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 800377a:	2301      	movs	r3, #1
 800377c:	f001 bb32 	b.w	8004de4 <AoC_Day_05+0x1710>
		}

		// list of cards
		Conversion_t *conversions = (Conversion_t*)sram_malloc(sizeof(Conversion_t) * 8);
 8003780:	f246 0040 	movw	r0, #24640	; 0x6040
 8003784:	f006 fcda 	bl	800a13c <sram_malloc>
 8003788:	f241 6308 	movw	r3, #5640	; 0x1608
 800378c:	443b      	add	r3, r7
 800378e:	6018      	str	r0, [r3, #0]
		memset(conversions, 0x00, sizeof(Conversion_t) * 8);
 8003790:	f246 0240 	movw	r2, #24640	; 0x6040
 8003794:	2100      	movs	r1, #0
 8003796:	f241 6308 	movw	r3, #5640	; 0x1608
 800379a:	443b      	add	r3, r7
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	f01b fdaf 	bl	801f300 <memset>

		// process initial seeds
		uint64_t initial_seed_count = 0;
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	f507 51b0 	add.w	r1, r7, #5632	; 0x1600
 80037ae:	e9c1 2300 	strd	r2, r3, [r1]
		uint64_t initial_seeds[32];
		memset(initial_seeds, 0x00, sizeof(uint64_t) * 32);
 80037b2:	4b87      	ldr	r3, [pc, #540]	; (80039d0 <AoC_Day_05+0x2fc>)
 80037b4:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80037b8:	f103 0310 	add.w	r3, r3, #16
 80037bc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80037c0:	4413      	add	r3, r2
 80037c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f01b fd99 	bl	801f300 <memset>

		// get first line
		char buffer[256];
		f_gets(buffer, 256, &file);
 80037ce:	4a7c      	ldr	r2, [pc, #496]	; (80039c0 <AoC_Day_05+0x2ec>)
 80037d0:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80037d4:	4413      	add	r3, r2
 80037d6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80037da:	189a      	adds	r2, r3, r2
 80037dc:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <AoC_Day_05+0x300>)
 80037de:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80037e2:	f103 0310 	add.w	r3, r3, #16
 80037e6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80037ea:	440b      	add	r3, r1
 80037ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037f0:	4618      	mov	r0, r3
 80037f2:	f01a f985 	bl	801db00 <f_gets>

		// tokenize data
		char token_buffer[32][32];
		memset(token_buffer, 0x00, 32 * 32);
 80037f6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80037fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f01b fd7d 	bl	801f300 <memset>
		char *token = strtok(buffer, " ");
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <AoC_Day_05+0x300>)
 8003808:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800380c:	f103 0310 	add.w	r3, r3, #16
 8003810:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003814:	4413      	add	r3, r2
 8003816:	4970      	ldr	r1, [pc, #448]	; (80039d8 <AoC_Day_05+0x304>)
 8003818:	4618      	mov	r0, r3
 800381a:	f01b fdc5 	bl	801f3a8 <strtok>
 800381e:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8003822:	6018      	str	r0, [r3, #0]
		uint8_t token_counter = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	f241 629f 	movw	r2, #5791	; 0x169f
 800382a:	443a      	add	r2, r7
 800382c:	7013      	strb	r3, [r2, #0]
		while(token != NULL && token_counter < 32)
 800382e:	e024      	b.n	800387a <AoC_Day_05+0x1a6>
		{
			memcpy(token_buffer[token_counter], token, strlen(token));
 8003830:	f241 639f 	movw	r3, #5791	; 0x169f
 8003834:	443b      	add	r3, r7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800383c:	015b      	lsls	r3, r3, #5
 800383e:	18d4      	adds	r4, r2, r3
 8003840:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f7fc fce3 	bl	8000210 <strlen>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	4620      	mov	r0, r4
 8003856:	f01b fd45 	bl	801f2e4 <memcpy>
			token = strtok(NULL, " ");
 800385a:	495f      	ldr	r1, [pc, #380]	; (80039d8 <AoC_Day_05+0x304>)
 800385c:	2000      	movs	r0, #0
 800385e:	f01b fda3 	bl	801f3a8 <strtok>
 8003862:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 8003866:	6018      	str	r0, [r3, #0]
			token_counter++;
 8003868:	f241 639f 	movw	r3, #5791	; 0x169f
 800386c:	443b      	add	r3, r7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	f241 629f 	movw	r2, #5791	; 0x169f
 8003876:	443a      	add	r2, r7
 8003878:	7013      	strb	r3, [r2, #0]
		while(token != NULL && token_counter < 32)
 800387a:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <AoC_Day_05+0x1bc>
 8003884:	f241 639f 	movw	r3, #5791	; 0x169f
 8003888:	443b      	add	r3, r7
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b1f      	cmp	r3, #31
 800388e:	d9cf      	bls.n	8003830 <AoC_Day_05+0x15c>
		}

		// fill data in buffer
		initial_seed_count = token_counter - 1;
 8003890:	f241 639f 	movw	r3, #5791	; 0x169f
 8003894:	443b      	add	r3, r7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	17da      	asrs	r2, r3, #31
 800389c:	469a      	mov	sl, r3
 800389e:	4693      	mov	fp, r2
 80038a0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80038a4:	e9c3 ab00 	strd	sl, fp, [r3]
		for(uint8_t index=1; index<token_counter; index++)
 80038a8:	2301      	movs	r3, #1
 80038aa:	f241 629e 	movw	r2, #5790	; 0x169e
 80038ae:	443a      	add	r2, r7
 80038b0:	7013      	strb	r3, [r2, #0]
 80038b2:	e024      	b.n	80038fe <AoC_Day_05+0x22a>
			initial_seeds[index - 1] = atol(token_buffer[index]);
 80038b4:	f241 639e 	movw	r3, #5790	; 0x169e
 80038b8:	443b      	add	r3, r7
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80038c0:	015b      	lsls	r3, r3, #5
 80038c2:	4413      	add	r3, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f01b fa7f 	bl	801edc8 <atol>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f241 639e 	movw	r3, #5790	; 0x169e
 80038d0:	443b      	add	r3, r7
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	17d3      	asrs	r3, r2, #31
 80038d8:	4615      	mov	r5, r2
 80038da:	461e      	mov	r6, r3
 80038dc:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80038e0:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 80038e4:	00cb      	lsls	r3, r1, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	e9c3 5600 	strd	r5, r6, [r3]
		for(uint8_t index=1; index<token_counter; index++)
 80038ec:	f241 639e 	movw	r3, #5790	; 0x169e
 80038f0:	443b      	add	r3, r7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	f241 629e 	movw	r2, #5790	; 0x169e
 80038fa:	443a      	add	r2, r7
 80038fc:	7013      	strb	r3, [r2, #0]
 80038fe:	f241 639e 	movw	r3, #5790	; 0x169e
 8003902:	443b      	add	r3, r7
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	f241 639f 	movw	r3, #5791	; 0x169f
 800390a:	443b      	add	r3, r7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d3d0      	bcc.n	80038b4 <AoC_Day_05+0x1e0>

		// process rest of the data
		int64_t conversion_ptr = -1;
 8003912:	f04f 32ff 	mov.w	r2, #4294967295
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	f241 6190 	movw	r1, #5776	; 0x1690
 800391e:	4439      	add	r1, r7
 8003920:	e9c1 2300 	strd	r2, r3, [r1]
		while(f_gets(buffer, 256, &file))
 8003924:	e18a      	b.n	8003c3c <AoC_Day_05+0x568>
		{
			// reset if newline
			if(buffer[0] == '\n')
 8003926:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800392a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b0a      	cmp	r3, #10
 8003932:	d111      	bne.n	8003958 <AoC_Day_05+0x284>
			{
				conversion_ptr++;
 8003934:	f241 6390 	movw	r3, #5776	; 0x1690
 8003938:	443b      	add	r3, r7
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	1c51      	adds	r1, r2, #1
 8003940:	6639      	str	r1, [r7, #96]	; 0x60
 8003942:	f143 0300 	adc.w	r3, r3, #0
 8003946:	667b      	str	r3, [r7, #100]	; 0x64
 8003948:	f241 6290 	movw	r2, #5776	; 0x1690
 800394c:	443a      	add	r2, r7
 800394e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003952:	e9c2 3400 	strd	r3, r4, [r2]
				continue;
 8003956:	e171      	b.n	8003c3c <AoC_Day_05+0x568>
			}

			// if text
			if(buffer[0] < '0' || buffer[0] > '9')
 8003958:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800395c:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b2f      	cmp	r3, #47	; 0x2f
 8003964:	f240 816a 	bls.w	8003c3c <AoC_Day_05+0x568>
 8003968:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800396c:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b39      	cmp	r3, #57	; 0x39
 8003974:	f200 8162 	bhi.w	8003c3c <AoC_Day_05+0x568>
			// is number
			else
			{
				// tokenize data
				char token_buffer[3][32];
				memset(token_buffer, 0x00, 3 * 32);
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <AoC_Day_05+0x308>)
 800397a:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800397e:	f103 0310 	add.w	r3, r3, #16
 8003982:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003986:	4413      	add	r3, r2
 8003988:	2260      	movs	r2, #96	; 0x60
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f01b fcb7 	bl	801f300 <memset>
				char *token = strtok(buffer, " ");
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <AoC_Day_05+0x300>)
 8003994:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003998:	f103 0310 	add.w	r3, r3, #16
 800399c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80039a0:	4413      	add	r3, r2
 80039a2:	490d      	ldr	r1, [pc, #52]	; (80039d8 <AoC_Day_05+0x304>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f01b fcff 	bl	801f3a8 <strtok>
 80039aa:	f241 638c 	movw	r3, #5772	; 0x168c
 80039ae:	443b      	add	r3, r7
 80039b0:	6018      	str	r0, [r3, #0]
				uint8_t token_counter = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f241 628b 	movw	r2, #5771	; 0x168b
 80039b8:	443a      	add	r2, r7
 80039ba:	7013      	strb	r3, [r2, #0]
				while(token != NULL && token_counter < 3)
 80039bc:	e03e      	b.n	8003a3c <AoC_Day_05+0x368>
 80039be:	bf00      	nop
 80039c0:	ffffee98 	.word	0xffffee98
 80039c4:	08024e68 	.word	0x08024e68
 80039c8:	08024e74 	.word	0x08024e74
 80039cc:	08024e80 	.word	0x08024e80
 80039d0:	ffffeb68 	.word	0xffffeb68
 80039d4:	ffffec68 	.word	0xffffec68
 80039d8:	08024e98 	.word	0x08024e98
 80039dc:	ffffea68 	.word	0xffffea68
				{
					memcpy(token_buffer[token_counter], token, strlen(token));
 80039e0:	f241 638b 	movw	r3, #5771	; 0x168b
 80039e4:	443b      	add	r3, r7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4ab2      	ldr	r2, [pc, #712]	; (8003cb4 <AoC_Day_05+0x5e0>)
 80039ea:	f502 52ae 	add.w	r2, r2, #5568	; 0x15c0
 80039ee:	f102 0210 	add.w	r2, r2, #16
 80039f2:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80039f6:	440a      	add	r2, r1
 80039f8:	015b      	lsls	r3, r3, #5
 80039fa:	18d4      	adds	r4, r2, r3
 80039fc:	f241 638c 	movw	r3, #5772	; 0x168c
 8003a00:	443b      	add	r3, r7
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	f7fc fc04 	bl	8000210 <strlen>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f241 638c 	movw	r3, #5772	; 0x168c
 8003a10:	443b      	add	r3, r7
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	4620      	mov	r0, r4
 8003a16:	f01b fc65 	bl	801f2e4 <memcpy>
					token = strtok(NULL, " ");
 8003a1a:	49a7      	ldr	r1, [pc, #668]	; (8003cb8 <AoC_Day_05+0x5e4>)
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f01b fcc3 	bl	801f3a8 <strtok>
 8003a22:	f241 638c 	movw	r3, #5772	; 0x168c
 8003a26:	443b      	add	r3, r7
 8003a28:	6018      	str	r0, [r3, #0]
					token_counter++;
 8003a2a:	f241 638b 	movw	r3, #5771	; 0x168b
 8003a2e:	443b      	add	r3, r7
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	f241 628b 	movw	r2, #5771	; 0x168b
 8003a38:	443a      	add	r2, r7
 8003a3a:	7013      	strb	r3, [r2, #0]
				while(token != NULL && token_counter < 3)
 8003a3c:	f241 638c 	movw	r3, #5772	; 0x168c
 8003a40:	443b      	add	r3, r7
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <AoC_Day_05+0x380>
 8003a48:	f241 638b 	movw	r3, #5771	; 0x168b
 8003a4c:	443b      	add	r3, r7
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d9c5      	bls.n	80039e0 <AoC_Day_05+0x30c>
				}

				// fetch numbers
				uint64_t value_1 = atoll(token_buffer[0]);
 8003a54:	4b97      	ldr	r3, [pc, #604]	; (8003cb4 <AoC_Day_05+0x5e0>)
 8003a56:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003a5a:	f103 0310 	add.w	r3, r3, #16
 8003a5e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003a62:	4413      	add	r3, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f01b f9b3 	bl	801edd0 <atoll>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	f241 5168 	movw	r1, #5480	; 0x1568
 8003a72:	4439      	add	r1, r7
 8003a74:	e9c1 2300 	strd	r2, r3, [r1]
				uint64_t value_2 = atoll(token_buffer[1]);
 8003a78:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <AoC_Day_05+0x5e0>)
 8003a7a:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003a7e:	f103 0310 	add.w	r3, r3, #16
 8003a82:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003a86:	4413      	add	r3, r2
 8003a88:	3320      	adds	r3, #32
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f01b f9a0 	bl	801edd0 <atoll>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	f507 51ab 	add.w	r1, r7, #5472	; 0x1560
 8003a98:	e9c1 2300 	strd	r2, r3, [r1]
				uint64_t value_3 = atoll(token_buffer[2]);
 8003a9c:	4b85      	ldr	r3, [pc, #532]	; (8003cb4 <AoC_Day_05+0x5e0>)
 8003a9e:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003aa2:	f103 0310 	add.w	r3, r3, #16
 8003aa6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003aaa:	4413      	add	r3, r2
 8003aac:	3340      	adds	r3, #64	; 0x40
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f01b f98e 	bl	801edd0 <atoll>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	f241 5158 	movw	r1, #5464	; 0x1558
 8003abc:	4439      	add	r1, r7
 8003abe:	e9c1 2300 	strd	r2, r3, [r1]

				// insert numbers
				conversions[conversion_ptr].ranges[conversions[conversion_ptr].range_count].input_from = value_2;
 8003ac2:	f241 6390 	movw	r3, #5776	; 0x1690
 8003ac6:	443b      	add	r3, r7
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f640 4308 	movw	r3, #3080	; 0xc08
 8003ace:	fb03 f202 	mul.w	r2, r3, r2
 8003ad2:	f241 6308 	movw	r3, #5640	; 0x1608
 8003ad6:	443b      	add	r3, r7
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1899      	adds	r1, r3, r2
 8003adc:	f241 6390 	movw	r3, #5776	; 0x1690
 8003ae0:	443b      	add	r3, r7
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	f640 4308 	movw	r3, #3080	; 0xc08
 8003ae8:	fb03 f202 	mul.w	r2, r3, r2
 8003aec:	f241 6308 	movw	r3, #5640	; 0x1608
 8003af0:	443b      	add	r3, r7
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4419      	add	r1, r3
 8003b08:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	e9c1 2300 	strd	r2, r3, [r1]
				conversions[conversion_ptr].ranges[conversions[conversion_ptr].range_count].input_to = value_2 + value_3 - 1;
 8003b14:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8003b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1c:	f241 5358 	movw	r3, #5464	; 0x1558
 8003b20:	443b      	add	r3, r7
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	eb10 0802 	adds.w	r8, r0, r2
 8003b2a:	eb41 0903 	adc.w	r9, r1, r3
 8003b2e:	f241 6390 	movw	r3, #5776	; 0x1690
 8003b32:	443b      	add	r3, r7
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f640 4308 	movw	r3, #3080	; 0xc08
 8003b3a:	fb03 f202 	mul.w	r2, r3, r2
 8003b3e:	f241 6308 	movw	r3, #5640	; 0x1608
 8003b42:	443b      	add	r3, r7
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1899      	adds	r1, r3, r2
 8003b48:	f241 6390 	movw	r3, #5776	; 0x1690
 8003b4c:	443b      	add	r3, r7
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f640 4308 	movw	r3, #3080	; 0xc08
 8003b54:	fb03 f202 	mul.w	r2, r3, r2
 8003b58:	f241 6308 	movw	r3, #5640	; 0x1608
 8003b5c:	443b      	add	r3, r7
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f118 30ff 	adds.w	r0, r8, #4294967295
 8003b6e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8003b72:	f149 30ff 	adc.w	r0, r9, #4294967295
 8003b76:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	440b      	add	r3, r1
 8003b84:	3308      	adds	r3, #8
 8003b86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b8a:	e9c3 1200 	strd	r1, r2, [r3]
				conversions[conversion_ptr].ranges[conversions[conversion_ptr].range_count].difference = (int64_t)value_1 - (int64_t)value_2;
 8003b8e:	f241 5368 	movw	r3, #5480	; 0x1568
 8003b92:	443b      	add	r3, r7
 8003b94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b98:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8003b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ba0:	f241 6390 	movw	r3, #5776	; 0x1690
 8003ba4:	443b      	add	r3, r7
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	f640 4308 	movw	r3, #3080	; 0xc08
 8003bac:	fb03 f202 	mul.w	r2, r3, r2
 8003bb0:	f241 6308 	movw	r3, #5640	; 0x1608
 8003bb4:	443b      	add	r3, r7
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	189e      	adds	r6, r3, r2
 8003bba:	f241 6390 	movw	r3, #5776	; 0x1690
 8003bbe:	443b      	add	r3, r7
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	f640 4308 	movw	r3, #3080	; 0xc08
 8003bc6:	fb03 f202 	mul.w	r2, r3, r2
 8003bca:	f241 6308 	movw	r3, #5640	; 0x1608
 8003bce:	443b      	add	r3, r7
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003bd8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8003bdc:	1a23      	subs	r3, r4, r0
 8003bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003be2:	eb65 0301 	sbc.w	r3, r5, r1
 8003be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bea:	4652      	mov	r2, sl
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	4433      	add	r3, r6
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003bfc:	e9c3 1200 	strd	r1, r2, [r3]

				// increment range count
				conversions[conversion_ptr].range_count++;
 8003c00:	f241 6390 	movw	r3, #5776	; 0x1690
 8003c04:	443b      	add	r3, r7
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	f640 4308 	movw	r3, #3080	; 0xc08
 8003c0c:	fb03 f202 	mul.w	r2, r3, r2
 8003c10:	f241 6308 	movw	r3, #5640	; 0x1608
 8003c14:	443b      	add	r3, r7
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	1899      	adds	r1, r3, r2
 8003c1a:	f501 6340 	add.w	r3, r1, #3072	; 0xc00
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	1c50      	adds	r0, r2, #1
 8003c24:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8003c28:	f143 0300 	adc.w	r3, r3, #0
 8003c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c30:	f501 6340 	add.w	r3, r1, #3072	; 0xc00
 8003c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c38:	e9c3 1200 	strd	r1, r2, [r3]
		while(f_gets(buffer, 256, &file))
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <AoC_Day_05+0x5e8>)
 8003c3e:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8003c42:	4413      	add	r3, r2
 8003c44:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003c48:	189a      	adds	r2, r3, r2
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <AoC_Day_05+0x5ec>)
 8003c4c:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003c50:	f103 0310 	add.w	r3, r3, #16
 8003c54:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8003c58:	440b      	add	r3, r1
 8003c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f019 ff4e 	bl	801db00 <f_gets>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f47f ae5d 	bne.w	8003926 <AoC_Day_05+0x252>
			}
		}
		conversion_ptr++;
 8003c6c:	f241 6390 	movw	r3, #5776	; 0x1690
 8003c70:	443b      	add	r3, r7
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	1c51      	adds	r1, r2, #1
 8003c78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c7a:	f143 0300 	adc.w	r3, r3, #0
 8003c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c80:	f241 6290 	movw	r2, #5776	; 0x1690
 8003c84:	443a      	add	r2, r7
 8003c86:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003c8a:	e9c2 3400 	strd	r3, r4, [r2]

		// process seeds
		for(uint8_t conversion_index=0; conversion_index<conversion_ptr; conversion_index++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f241 628a 	movw	r2, #5770	; 0x168a
 8003c94:	443a      	add	r2, r7
 8003c96:	7013      	strb	r3, [r2, #0]
 8003c98:	e107      	b.n	8003eaa <AoC_Day_05+0x7d6>
		{
			// convert values
			for(uint8_t value_index=0; value_index<initial_seed_count; value_index++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f241 6289 	movw	r2, #5769	; 0x1689
 8003ca0:	443a      	add	r2, r7
 8003ca2:	7013      	strb	r3, [r2, #0]
 8003ca4:	e0e2      	b.n	8003e6c <AoC_Day_05+0x798>
			{
				// search if there is a range in which the seed exists
				for(uint8_t range_index=0; range_index<conversions[conversion_index].range_count; range_index++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f241 6288 	movw	r2, #5768	; 0x1688
 8003cac:	443a      	add	r2, r7
 8003cae:	7013      	strb	r3, [r2, #0]
 8003cb0:	e0b0      	b.n	8003e14 <AoC_Day_05+0x740>
 8003cb2:	bf00      	nop
 8003cb4:	ffffea68 	.word	0xffffea68
 8003cb8:	08024e98 	.word	0x08024e98
 8003cbc:	ffffee98 	.word	0xffffee98
 8003cc0:	ffffec68 	.word	0xffffec68
				{
					uint64_t input_from = conversions[conversion_index].ranges[range_index].input_from;
 8003cc4:	f241 638a 	movw	r3, #5770	; 0x168a
 8003cc8:	443b      	add	r3, r7
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	f640 4308 	movw	r3, #3080	; 0xc08
 8003cd0:	fb03 f202 	mul.w	r2, r3, r2
 8003cd4:	f241 6308 	movw	r3, #5640	; 0x1608
 8003cd8:	443b      	add	r3, r7
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1899      	adds	r1, r3, r2
 8003cde:	f241 6388 	movw	r3, #5768	; 0x1688
 8003ce2:	443b      	add	r3, r7
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	440b      	add	r3, r1
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f241 5178 	movw	r1, #5496	; 0x1578
 8003cf8:	4439      	add	r1, r7
 8003cfa:	e9c1 2300 	strd	r2, r3, [r1]
					uint64_t input_to = conversions[conversion_index].ranges[range_index].input_to;
 8003cfe:	f241 638a 	movw	r3, #5770	; 0x168a
 8003d02:	443b      	add	r3, r7
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	f640 4308 	movw	r3, #3080	; 0xc08
 8003d0a:	fb03 f202 	mul.w	r2, r3, r2
 8003d0e:	f241 6308 	movw	r3, #5640	; 0x1608
 8003d12:	443b      	add	r3, r7
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1899      	adds	r1, r3, r2
 8003d18:	f241 6388 	movw	r3, #5768	; 0x1688
 8003d1c:	443b      	add	r3, r7
 8003d1e:	781a      	ldrb	r2, [r3, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	440b      	add	r3, r1
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f241 5170 	movw	r1, #5488	; 0x1570
 8003d34:	4439      	add	r1, r7
 8003d36:	e9c1 2300 	strd	r2, r3, [r1]
					if(initial_seeds[value_index] >= input_from && initial_seeds[value_index] <= input_to)
 8003d3a:	f241 6389 	movw	r3, #5769	; 0x1689
 8003d3e:	443b      	add	r3, r7
 8003d40:	7819      	ldrb	r1, [r3, #0]
 8003d42:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003d46:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d52:	f241 5378 	movw	r3, #5496	; 0x1578
 8003d56:	443b      	add	r3, r7
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	4290      	cmp	r0, r2
 8003d5e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d62:	d34e      	bcc.n	8003e02 <AoC_Day_05+0x72e>
 8003d64:	f241 6389 	movw	r3, #5769	; 0x1689
 8003d68:	443b      	add	r3, r7
 8003d6a:	7819      	ldrb	r1, [r3, #0]
 8003d6c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003d70:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 8003d74:	00cb      	lsls	r3, r1, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d7c:	f241 5370 	movw	r3, #5488	; 0x1570
 8003d80:	443b      	add	r3, r7
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	4282      	cmp	r2, r0
 8003d88:	418b      	sbcs	r3, r1
 8003d8a:	d33a      	bcc.n	8003e02 <AoC_Day_05+0x72e>
					{
						initial_seeds[value_index] += conversions[conversion_index].ranges[range_index].difference;
 8003d8c:	f241 6389 	movw	r3, #5769	; 0x1689
 8003d90:	443b      	add	r3, r7
 8003d92:	7819      	ldrb	r1, [r3, #0]
 8003d94:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003d98:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 8003d9c:	00cb      	lsls	r3, r1, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003da4:	f241 638a 	movw	r3, #5770	; 0x168a
 8003da8:	443b      	add	r3, r7
 8003daa:	781a      	ldrb	r2, [r3, #0]
 8003dac:	f640 4308 	movw	r3, #3080	; 0xc08
 8003db0:	fb03 f202 	mul.w	r2, r3, r2
 8003db4:	f241 6308 	movw	r3, #5640	; 0x1608
 8003db8:	443b      	add	r3, r7
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	189c      	adds	r4, r3, r2
 8003dbe:	f241 6388 	movw	r3, #5768	; 0x1688
 8003dc2:	443b      	add	r3, r7
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4423      	add	r3, r4
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f241 6489 	movw	r4, #5769	; 0x1689
 8003dda:	443c      	add	r4, r7
 8003ddc:	7824      	ldrb	r4, [r4, #0]
 8003dde:	1885      	adds	r5, r0, r2
 8003de0:	f8c7 50b8 	str.w	r5, [r7, #184]	; 0xb8
 8003de4:	eb41 0303 	adc.w	r3, r1, r3
 8003de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dec:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003df0:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 8003df4:	00e3      	lsls	r3, r4, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003dfc:	e9c3 1200 	strd	r1, r2, [r3]
						break;
 8003e00:	e02b      	b.n	8003e5a <AoC_Day_05+0x786>
				for(uint8_t range_index=0; range_index<conversions[conversion_index].range_count; range_index++)
 8003e02:	f241 6388 	movw	r3, #5768	; 0x1688
 8003e06:	443b      	add	r3, r7
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f241 6288 	movw	r2, #5768	; 0x1688
 8003e10:	443a      	add	r2, r7
 8003e12:	7013      	strb	r3, [r2, #0]
 8003e14:	f241 6388 	movw	r3, #5768	; 0x1688
 8003e18:	443b      	add	r3, r7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e22:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003e26:	f241 638a 	movw	r3, #5770	; 0x168a
 8003e2a:	443b      	add	r3, r7
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	f640 4308 	movw	r3, #3080	; 0xc08
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	f241 6308 	movw	r3, #5640	; 0x1608
 8003e3a:	443b      	add	r3, r7
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4291      	cmp	r1, r2
 8003e50:	4629      	mov	r1, r5
 8003e52:	eb71 0303 	sbcs.w	r3, r1, r3
 8003e56:	f4ff af35 	bcc.w	8003cc4 <AoC_Day_05+0x5f0>
			for(uint8_t value_index=0; value_index<initial_seed_count; value_index++)
 8003e5a:	f241 6389 	movw	r3, #5769	; 0x1689
 8003e5e:	443b      	add	r3, r7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	f241 6289 	movw	r2, #5769	; 0x1689
 8003e68:	443a      	add	r2, r7
 8003e6a:	7013      	strb	r3, [r2, #0]
 8003e6c:	f241 6389 	movw	r3, #5769	; 0x1689
 8003e70:	443b      	add	r3, r7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e7a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e7e:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	4291      	cmp	r1, r2
 8003e8e:	4629      	mov	r1, r5
 8003e90:	eb71 0303 	sbcs.w	r3, r1, r3
 8003e94:	f4ff af07 	bcc.w	8003ca6 <AoC_Day_05+0x5d2>
		for(uint8_t conversion_index=0; conversion_index<conversion_ptr; conversion_index++)
 8003e98:	f241 638a 	movw	r3, #5770	; 0x168a
 8003e9c:	443b      	add	r3, r7
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f241 628a 	movw	r2, #5770	; 0x168a
 8003ea6:	443a      	add	r2, r7
 8003ea8:	7013      	strb	r3, [r2, #0]
 8003eaa:	f241 638a 	movw	r3, #5770	; 0x168a
 8003eae:	443b      	add	r3, r7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eb8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ebc:	f241 6390 	movw	r3, #5776	; 0x1690
 8003ec0:	443b      	add	r3, r7
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4291      	cmp	r1, r2
 8003ece:	4629      	mov	r1, r5
 8003ed0:	eb71 0303 	sbcs.w	r3, r1, r3
 8003ed4:	f6ff aee1 	blt.w	8003c9a <AoC_Day_05+0x5c6>
				}
			}
		}

		// find lowest value
		uint64_t lowest = 0x0FFFFFFFFFFFFFFF;
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003ee0:	f507 51b4 	add.w	r1, r7, #5760	; 0x1680
 8003ee4:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint8_t value_index=0; value_index<initial_seed_count; value_index++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f241 627f 	movw	r2, #5759	; 0x167f
 8003eee:	443a      	add	r2, r7
 8003ef0:	7013      	strb	r3, [r2, #0]
 8003ef2:	e02c      	b.n	8003f4e <AoC_Day_05+0x87a>
			if(initial_seeds[value_index] < lowest)
 8003ef4:	f241 637f 	movw	r3, #5759	; 0x167f
 8003ef8:	443b      	add	r3, r7
 8003efa:	7819      	ldrb	r1, [r3, #0]
 8003efc:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003f00:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 8003f04:	00cb      	lsls	r3, r1, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0c:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	4290      	cmp	r0, r2
 8003f16:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f1a:	d20f      	bcs.n	8003f3c <AoC_Day_05+0x868>
				lowest = initial_seeds[value_index];
 8003f1c:	f241 637f 	movw	r3, #5759	; 0x167f
 8003f20:	443b      	add	r3, r7
 8003f22:	7819      	ldrb	r1, [r3, #0]
 8003f24:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003f28:	f5a3 6293 	sub.w	r2, r3, #1176	; 0x498
 8003f2c:	00cb      	lsls	r3, r1, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f507 51b4 	add.w	r1, r7, #5760	; 0x1680
 8003f38:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint8_t value_index=0; value_index<initial_seed_count; value_index++)
 8003f3c:	f241 637f 	movw	r3, #5759	; 0x167f
 8003f40:	443b      	add	r3, r7
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	f241 627f 	movw	r2, #5759	; 0x167f
 8003f4a:	443a      	add	r2, r7
 8003f4c:	7013      	strb	r3, [r2, #0]
 8003f4e:	f241 637f 	movw	r3, #5759	; 0x167f
 8003f52:	443b      	add	r3, r7
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f60:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4291      	cmp	r1, r2
 8003f70:	4629      	mov	r1, r5
 8003f72:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f76:	d3bd      	bcc.n	8003ef4 <AoC_Day_05+0x820>

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %lld\n", lowest);
 8003f78:	48bc      	ldr	r0, [pc, #752]	; (800426c <AoC_Day_05+0xb98>)
 8003f7a:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8003f7e:	4403      	add	r3, r0
 8003f80:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003f84:	1898      	adds	r0, r3, r2
 8003f86:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	49b8      	ldr	r1, [pc, #736]	; (8004270 <AoC_Day_05+0xb9c>)
 8003f90:	f01b f9da 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8003f94:	4bb5      	ldr	r3, [pc, #724]	; (800426c <AoC_Day_05+0xb98>)
 8003f96:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003f9a:	f103 0310 	add.w	r3, r3, #16
 8003f9e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc f933 	bl	8000210 <strlen>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	49af      	ldr	r1, [pc, #700]	; (800426c <AoC_Day_05+0xb98>)
 8003fb0:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8003fba:	1859      	adds	r1, r3, r1
 8003fbc:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003fc0:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd f934 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8003fcc:	4ba9      	ldr	r3, [pc, #676]	; (8004274 <AoC_Day_05+0xba0>)
 8003fce:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003fd2:	f103 0310 	add.w	r3, r3, #16
 8003fd6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8003fda:	4413      	add	r3, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f019 fbab 	bl	801d738 <f_close>
		sram_clrmem();
 8003fe2:	f006 f8ef 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8003fe6:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8003fea:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d112      	bne.n	800401a <AoC_Day_05+0x946>
			ret = f_open(&file, "day5t.txt", FA_READ);
 8003ff4:	4ba0      	ldr	r3, [pc, #640]	; (8004278 <AoC_Day_05+0xba4>)
 8003ff6:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8003ffa:	f103 0310 	add.w	r3, r3, #16
 8003ffe:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8004002:	4413      	add	r3, r2
 8004004:	2201      	movs	r2, #1
 8004006:	499d      	ldr	r1, [pc, #628]	; (800427c <AoC_Day_05+0xba8>)
 8004008:	4618      	mov	r0, r3
 800400a:	f018 fea5 	bl	801cd58 <f_open>
 800400e:	4603      	mov	r3, r0
 8004010:	f241 627e 	movw	r2, #5758	; 0x167e
 8004014:	443a      	add	r2, r7
 8004016:	7013      	strb	r3, [r2, #0]
 8004018:	e011      	b.n	800403e <AoC_Day_05+0x96a>
		else ret = f_open(&file, "day5.txt", FA_READ);
 800401a:	4b97      	ldr	r3, [pc, #604]	; (8004278 <AoC_Day_05+0xba4>)
 800401c:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8004020:	f103 0310 	add.w	r3, r3, #16
 8004024:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8004028:	4413      	add	r3, r2
 800402a:	2201      	movs	r2, #1
 800402c:	4994      	ldr	r1, [pc, #592]	; (8004280 <AoC_Day_05+0xbac>)
 800402e:	4618      	mov	r0, r3
 8004030:	f018 fe92 	bl	801cd58 <f_open>
 8004034:	4603      	mov	r3, r0
 8004036:	f241 627e 	movw	r2, #5758	; 0x167e
 800403a:	443a      	add	r2, r7
 800403c:	7013      	strb	r3, [r2, #0]
		if(ret != FR_OK)
 800403e:	f241 637e 	movw	r3, #5758	; 0x167e
 8004042:	443b      	add	r3, r7
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <AoC_Day_05+0x990>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800404a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800404e:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2213      	movs	r2, #19
 8004056:	498b      	ldr	r1, [pc, #556]	; (8004284 <AoC_Day_05+0xbb0>)
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd f8eb 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 800405e:	2301      	movs	r3, #1
 8004060:	f000 bec0 	b.w	8004de4 <AoC_Day_05+0x1710>
		}

		// list of cards
		Conversion_t *conversions = (Conversion_t*)sram_malloc(sizeof(Conversion_t) * 8);
 8004064:	f246 0040 	movw	r0, #24640	; 0x6040
 8004068:	f006 f868 	bl	800a13c <sram_malloc>
 800406c:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8004070:	443b      	add	r3, r7
 8004072:	6018      	str	r0, [r3, #0]
		memset(conversions, 0x00, sizeof(Conversion_t) * 8);
 8004074:	f246 0240 	movw	r2, #24640	; 0x6040
 8004078:	2100      	movs	r1, #0
 800407a:	f241 53fc 	movw	r3, #5628	; 0x15fc
 800407e:	443b      	add	r3, r7
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	f01b f93d 	bl	801f300 <memset>

		// process initial seeds
		uint64_t initial_seed_count = 0;
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f241 51f0 	movw	r1, #5616	; 0x15f0
 8004092:	4439      	add	r1, r7
 8004094:	e9c1 2300 	strd	r2, r3, [r1]
		uint64_t initial_seeds[32];
		memset(initial_seeds, 0x00, sizeof(uint64_t) * 32);
 8004098:	4b74      	ldr	r3, [pc, #464]	; (800426c <AoC_Day_05+0xb98>)
 800409a:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800409e:	f103 0310 	add.w	r3, r3, #16
 80040a2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80040a6:	4413      	add	r3, r2
 80040a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f01b f926 	bl	801f300 <memset>

		// get first line
		char buffer[256];
		f_gets(buffer, 256, &file);
 80040b4:	4a70      	ldr	r2, [pc, #448]	; (8004278 <AoC_Day_05+0xba4>)
 80040b6:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80040ba:	4413      	add	r3, r2
 80040bc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80040c0:	189a      	adds	r2, r3, r2
 80040c2:	4b71      	ldr	r3, [pc, #452]	; (8004288 <AoC_Day_05+0xbb4>)
 80040c4:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80040c8:	f103 0310 	add.w	r3, r3, #16
 80040cc:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80040d0:	440b      	add	r3, r1
 80040d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040d6:	4618      	mov	r0, r3
 80040d8:	f019 fd12 	bl	801db00 <f_gets>

		// tokenize data
		char token_buffer[32][32];
		memset(token_buffer, 0x00, 32 * 32);
 80040dc:	4b65      	ldr	r3, [pc, #404]	; (8004274 <AoC_Day_05+0xba0>)
 80040de:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80040e2:	f103 0310 	add.w	r3, r3, #16
 80040e6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80040ea:	4413      	add	r3, r2
 80040ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f01b f904 	bl	801f300 <memset>
		char *token = strtok(buffer, " ");
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <AoC_Day_05+0xbb4>)
 80040fa:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80040fe:	f103 0310 	add.w	r3, r3, #16
 8004102:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8004106:	4413      	add	r3, r2
 8004108:	4960      	ldr	r1, [pc, #384]	; (800428c <AoC_Day_05+0xbb8>)
 800410a:	4618      	mov	r0, r3
 800410c:	f01b f94c 	bl	801f3a8 <strtok>
 8004110:	f241 6378 	movw	r3, #5752	; 0x1678
 8004114:	443b      	add	r3, r7
 8004116:	6018      	str	r0, [r3, #0]
		uint8_t token_counter = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	f241 6277 	movw	r2, #5751	; 0x1677
 800411e:	443a      	add	r2, r7
 8004120:	7013      	strb	r3, [r2, #0]
		while(token != NULL && token_counter < 32)
 8004122:	e02d      	b.n	8004180 <AoC_Day_05+0xaac>
		{
			memcpy(token_buffer[token_counter], token, strlen(token));
 8004124:	f241 6377 	movw	r3, #5751	; 0x1677
 8004128:	443b      	add	r3, r7
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	4a51      	ldr	r2, [pc, #324]	; (8004274 <AoC_Day_05+0xba0>)
 800412e:	f502 52ae 	add.w	r2, r2, #5568	; 0x15c0
 8004132:	f102 0210 	add.w	r2, r2, #16
 8004136:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800413a:	440a      	add	r2, r1
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	18d4      	adds	r4, r2, r3
 8004140:	f241 6378 	movw	r3, #5752	; 0x1678
 8004144:	443b      	add	r3, r7
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	f7fc f862 	bl	8000210 <strlen>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	f241 6378 	movw	r3, #5752	; 0x1678
 8004154:	443b      	add	r3, r7
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	4620      	mov	r0, r4
 800415a:	f01b f8c3 	bl	801f2e4 <memcpy>
			token = strtok(NULL, " ");
 800415e:	494b      	ldr	r1, [pc, #300]	; (800428c <AoC_Day_05+0xbb8>)
 8004160:	2000      	movs	r0, #0
 8004162:	f01b f921 	bl	801f3a8 <strtok>
 8004166:	f241 6378 	movw	r3, #5752	; 0x1678
 800416a:	443b      	add	r3, r7
 800416c:	6018      	str	r0, [r3, #0]
			token_counter++;
 800416e:	f241 6377 	movw	r3, #5751	; 0x1677
 8004172:	443b      	add	r3, r7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	f241 6277 	movw	r2, #5751	; 0x1677
 800417c:	443a      	add	r2, r7
 800417e:	7013      	strb	r3, [r2, #0]
		while(token != NULL && token_counter < 32)
 8004180:	f241 6378 	movw	r3, #5752	; 0x1678
 8004184:	443b      	add	r3, r7
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <AoC_Day_05+0xac4>
 800418c:	f241 6377 	movw	r3, #5751	; 0x1677
 8004190:	443b      	add	r3, r7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b1f      	cmp	r3, #31
 8004196:	d9c5      	bls.n	8004124 <AoC_Day_05+0xa50>
		}

		// fill data in buffer
		initial_seed_count = token_counter - 1;
 8004198:	f241 6377 	movw	r3, #5751	; 0x1677
 800419c:	443b      	add	r3, r7
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	17da      	asrs	r2, r3, #31
 80041a4:	653b      	str	r3, [r7, #80]	; 0x50
 80041a6:	657a      	str	r2, [r7, #84]	; 0x54
 80041a8:	f241 52f0 	movw	r2, #5616	; 0x15f0
 80041ac:	443a      	add	r2, r7
 80041ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80041b2:	e9c2 3400 	strd	r3, r4, [r2]
		for(uint8_t index=1; index<token_counter; index++)
 80041b6:	2301      	movs	r3, #1
 80041b8:	f241 6276 	movw	r2, #5750	; 0x1676
 80041bc:	443a      	add	r2, r7
 80041be:	7013      	strb	r3, [r2, #0]
 80041c0:	e026      	b.n	8004210 <AoC_Day_05+0xb3c>
			initial_seeds[index - 1] = atoll(token_buffer[index]);
 80041c2:	f241 6376 	movw	r3, #5750	; 0x1676
 80041c6:	443b      	add	r3, r7
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <AoC_Day_05+0xba0>)
 80041cc:	f502 52ae 	add.w	r2, r2, #5568	; 0x15c0
 80041d0:	f102 0210 	add.w	r2, r2, #16
 80041d4:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80041d8:	440a      	add	r2, r1
 80041da:	015b      	lsls	r3, r3, #5
 80041dc:	4413      	add	r3, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f01a fdf6 	bl	801edd0 <atoll>
 80041e4:	f241 6376 	movw	r3, #5750	; 0x1676
 80041e8:	443b      	add	r3, r7
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	1e5c      	subs	r4, r3, #1
 80041ee:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80041f2:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 80041f6:	00e3      	lsls	r3, r4, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	e9c3 0100 	strd	r0, r1, [r3]
		for(uint8_t index=1; index<token_counter; index++)
 80041fe:	f241 6376 	movw	r3, #5750	; 0x1676
 8004202:	443b      	add	r3, r7
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	f241 6276 	movw	r2, #5750	; 0x1676
 800420c:	443a      	add	r2, r7
 800420e:	7013      	strb	r3, [r2, #0]
 8004210:	f241 6376 	movw	r3, #5750	; 0x1676
 8004214:	443b      	add	r3, r7
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	f241 6377 	movw	r3, #5751	; 0x1677
 800421c:	443b      	add	r3, r7
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d3ce      	bcc.n	80041c2 <AoC_Day_05+0xaee>

		// process rest of the data
		int64_t conversion_ptr = -1;
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	f241 6168 	movw	r1, #5736	; 0x1668
 8004230:	4439      	add	r1, r7
 8004232:	e9c1 2300 	strd	r2, r3, [r1]
		while(f_gets(buffer, 256, &file))
 8004236:	e152      	b.n	80044de <AoC_Day_05+0xe0a>
		{
			// reset if newline
			if(buffer[0] == '\n')
 8004238:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800423c:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b0a      	cmp	r3, #10
 8004244:	d124      	bne.n	8004290 <AoC_Day_05+0xbbc>
			{
				conversion_ptr++;
 8004246:	f241 6368 	movw	r3, #5736	; 0x1668
 800424a:	443b      	add	r3, r7
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	1c51      	adds	r1, r2, #1
 8004252:	64b9      	str	r1, [r7, #72]	; 0x48
 8004254:	f143 0300 	adc.w	r3, r3, #0
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425a:	f241 6268 	movw	r2, #5736	; 0x1668
 800425e:	443a      	add	r2, r7
 8004260:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004264:	e9c2 3400 	strd	r3, r4, [r2]
				continue;
 8004268:	e139      	b.n	80044de <AoC_Day_05+0xe0a>
 800426a:	bf00      	nop
 800426c:	ffffea68 	.word	0xffffea68
 8004270:	08024e9c 	.word	0x08024e9c
 8004274:	ffffee98 	.word	0xffffee98
 8004278:	ffffec68 	.word	0xffffec68
 800427c:	08024e68 	.word	0x08024e68
 8004280:	08024e74 	.word	0x08024e74
 8004284:	08024e80 	.word	0x08024e80
 8004288:	ffffeb68 	.word	0xffffeb68
 800428c:	08024e98 	.word	0x08024e98
			}

			// if text
			if(buffer[0] < '0' || buffer[0] > '9')
 8004290:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004294:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b2f      	cmp	r3, #47	; 0x2f
 800429c:	f240 811f 	bls.w	80044de <AoC_Day_05+0xe0a>
 80042a0:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80042a4:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b39      	cmp	r3, #57	; 0x39
 80042ac:	f200 8117 	bhi.w	80044de <AoC_Day_05+0xe0a>
			// is number
			else
			{
				// tokenize data
				char token_buffer[3][32];
				memset(token_buffer, 0x00, 3 * 32);
 80042b0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80042b4:	2260      	movs	r2, #96	; 0x60
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f01b f821 	bl	801f300 <memset>
				char *token = strtok(buffer, " ");
 80042be:	4bbc      	ldr	r3, [pc, #752]	; (80045b0 <AoC_Day_05+0xedc>)
 80042c0:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80042c4:	f103 0310 	add.w	r3, r3, #16
 80042c8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80042cc:	4413      	add	r3, r2
 80042ce:	49b9      	ldr	r1, [pc, #740]	; (80045b4 <AoC_Day_05+0xee0>)
 80042d0:	4618      	mov	r0, r3
 80042d2:	f01b f869 	bl	801f3a8 <strtok>
 80042d6:	f241 6364 	movw	r3, #5732	; 0x1664
 80042da:	443b      	add	r3, r7
 80042dc:	6018      	str	r0, [r3, #0]
				uint8_t token_counter = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	f241 6263 	movw	r2, #5731	; 0x1663
 80042e4:	443a      	add	r2, r7
 80042e6:	7013      	strb	r3, [r2, #0]
				while(token != NULL && token_counter < 3)
 80042e8:	e027      	b.n	800433a <AoC_Day_05+0xc66>
				{
					memcpy(token_buffer[token_counter], token, strlen(token));
 80042ea:	f241 6363 	movw	r3, #5731	; 0x1663
 80042ee:	443b      	add	r3, r7
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80042f6:	015b      	lsls	r3, r3, #5
 80042f8:	18d4      	adds	r4, r2, r3
 80042fa:	f241 6364 	movw	r3, #5732	; 0x1664
 80042fe:	443b      	add	r3, r7
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	f7fb ff85 	bl	8000210 <strlen>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	f241 6364 	movw	r3, #5732	; 0x1664
 800430e:	443b      	add	r3, r7
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	4620      	mov	r0, r4
 8004314:	f01a ffe6 	bl	801f2e4 <memcpy>
					token = strtok(NULL, " ");
 8004318:	49a6      	ldr	r1, [pc, #664]	; (80045b4 <AoC_Day_05+0xee0>)
 800431a:	2000      	movs	r0, #0
 800431c:	f01b f844 	bl	801f3a8 <strtok>
 8004320:	f241 6364 	movw	r3, #5732	; 0x1664
 8004324:	443b      	add	r3, r7
 8004326:	6018      	str	r0, [r3, #0]
					token_counter++;
 8004328:	f241 6363 	movw	r3, #5731	; 0x1663
 800432c:	443b      	add	r3, r7
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	f241 6263 	movw	r2, #5731	; 0x1663
 8004336:	443a      	add	r2, r7
 8004338:	7013      	strb	r3, [r2, #0]
				while(token != NULL && token_counter < 3)
 800433a:	f241 6364 	movw	r3, #5732	; 0x1664
 800433e:	443b      	add	r3, r7
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <AoC_Day_05+0xc7e>
 8004346:	f241 6363 	movw	r3, #5731	; 0x1663
 800434a:	443b      	add	r3, r7
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d9cb      	bls.n	80042ea <AoC_Day_05+0xc16>
				}

				// fetch numbers
				uint64_t value_1 = atoll(token_buffer[0]);
 8004352:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004356:	4618      	mov	r0, r3
 8004358:	f01a fd3a 	bl	801edd0 <atoll>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	f241 5190 	movw	r1, #5520	; 0x1590
 8004364:	4439      	add	r1, r7
 8004366:	e9c1 2300 	strd	r2, r3, [r1]
				uint64_t value_2 = atoll(token_buffer[1]);
 800436a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800436e:	3320      	adds	r3, #32
 8004370:	4618      	mov	r0, r3
 8004372:	f01a fd2d 	bl	801edd0 <atoll>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	f241 5188 	movw	r1, #5512	; 0x1588
 800437e:	4439      	add	r1, r7
 8004380:	e9c1 2300 	strd	r2, r3, [r1]
				uint64_t value_3 = atoll(token_buffer[2]);
 8004384:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004388:	3340      	adds	r3, #64	; 0x40
 800438a:	4618      	mov	r0, r3
 800438c:	f01a fd20 	bl	801edd0 <atoll>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 8004398:	e9c1 2300 	strd	r2, r3, [r1]

				// insert numbers
				conversions[conversion_ptr].ranges[conversions[conversion_ptr].range_count].target = value_1;
 800439c:	f241 6368 	movw	r3, #5736	; 0x1668
 80043a0:	443b      	add	r3, r7
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	f640 4308 	movw	r3, #3080	; 0xc08
 80043a8:	fb03 f202 	mul.w	r2, r3, r2
 80043ac:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80043b0:	443b      	add	r3, r7
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1899      	adds	r1, r3, r2
 80043b6:	f241 6368 	movw	r3, #5736	; 0x1668
 80043ba:	443b      	add	r3, r7
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	f640 4308 	movw	r3, #3080	; 0xc08
 80043c2:	fb03 f202 	mul.w	r2, r3, r2
 80043c6:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80043ca:	443b      	add	r3, r7
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	440b      	add	r3, r1
 80043e2:	f103 0118 	add.w	r1, r3, #24
 80043e6:	f241 5390 	movw	r3, #5520	; 0x1590
 80043ea:	443b      	add	r3, r7
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	e9c1 2300 	strd	r2, r3, [r1]
				conversions[conversion_ptr].ranges[conversions[conversion_ptr].range_count].from = value_2;
 80043f4:	f241 6368 	movw	r3, #5736	; 0x1668
 80043f8:	443b      	add	r3, r7
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f640 4308 	movw	r3, #3080	; 0xc08
 8004400:	fb03 f202 	mul.w	r2, r3, r2
 8004404:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8004408:	443b      	add	r3, r7
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	1899      	adds	r1, r3, r2
 800440e:	f241 6368 	movw	r3, #5736	; 0x1668
 8004412:	443b      	add	r3, r7
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f640 4308 	movw	r3, #3080	; 0xc08
 800441a:	fb03 f202 	mul.w	r2, r3, r2
 800441e:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8004422:	443b      	add	r3, r7
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	440b      	add	r3, r1
 800443a:	f103 0120 	add.w	r1, r3, #32
 800443e:	f241 5388 	movw	r3, #5512	; 0x1588
 8004442:	443b      	add	r3, r7
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	e9c1 2300 	strd	r2, r3, [r1]
				conversions[conversion_ptr].ranges[conversions[conversion_ptr].range_count].length = value_3;
 800444c:	f241 6368 	movw	r3, #5736	; 0x1668
 8004450:	443b      	add	r3, r7
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	f640 4308 	movw	r3, #3080	; 0xc08
 8004458:	fb03 f202 	mul.w	r2, r3, r2
 800445c:	f241 53fc 	movw	r3, #5628	; 0x15fc
 8004460:	443b      	add	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1899      	adds	r1, r3, r2
 8004466:	f241 6368 	movw	r3, #5736	; 0x1668
 800446a:	443b      	add	r3, r7
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f640 4308 	movw	r3, #3080	; 0xc08
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	f241 53fc 	movw	r3, #5628	; 0x15fc
 800447a:	443b      	add	r3, r7
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	440b      	add	r3, r1
 8004492:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004496:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	e9c1 2300 	strd	r2, r3, [r1]

				// increment range count
				conversions[conversion_ptr].range_count++;
 80044a2:	f241 6368 	movw	r3, #5736	; 0x1668
 80044a6:	443b      	add	r3, r7
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f640 4308 	movw	r3, #3080	; 0xc08
 80044ae:	fb03 f202 	mul.w	r2, r3, r2
 80044b2:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80044b6:	443b      	add	r3, r7
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1899      	adds	r1, r3, r2
 80044bc:	f501 6340 	add.w	r3, r1, #3072	; 0xc00
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	1c50      	adds	r0, r2, #1
 80044c6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 80044ca:	f143 0300 	adc.w	r3, r3, #0
 80044ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044d2:	f501 6340 	add.w	r3, r1, #3072	; 0xc00
 80044d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044da:	e9c3 1200 	strd	r1, r2, [r3]
		while(f_gets(buffer, 256, &file))
 80044de:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <AoC_Day_05+0xee4>)
 80044e0:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80044e4:	4413      	add	r3, r2
 80044e6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80044ea:	189a      	adds	r2, r3, r2
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <AoC_Day_05+0xedc>)
 80044ee:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 80044f2:	f103 0310 	add.w	r3, r3, #16
 80044f6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80044fa:	440b      	add	r3, r1
 80044fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004500:	4618      	mov	r0, r3
 8004502:	f019 fafd 	bl	801db00 <f_gets>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f ae95 	bne.w	8004238 <AoC_Day_05+0xb64>
			}
		}
		conversion_ptr++;
 800450e:	f241 6368 	movw	r3, #5736	; 0x1668
 8004512:	443b      	add	r3, r7
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	1c51      	adds	r1, r2, #1
 800451a:	6439      	str	r1, [r7, #64]	; 0x40
 800451c:	f143 0300 	adc.w	r3, r3, #0
 8004520:	647b      	str	r3, [r7, #68]	; 0x44
 8004522:	f241 6268 	movw	r2, #5736	; 0x1668
 8004526:	443a      	add	r2, r7
 8004528:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800452c:	e9c2 3400 	strd	r3, r4, [r2]

		// create partial buffer
		uint32_t buffer_size = 1000; // this should not work but it does
 8004530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004534:	f241 52ec 	movw	r2, #5612	; 0x15ec
 8004538:	443a      	add	r2, r7
 800453a:	6013      	str	r3, [r2, #0]
		Range_t *ranges = (Range_t*)sram_malloc(sizeof(Range_t) * buffer_size);
 800453c:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004540:	443b      	add	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f005 fdf8 	bl	800a13c <sram_malloc>
 800454c:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004550:	443b      	add	r3, r7
 8004552:	6018      	str	r0, [r3, #0]
		Range_t *next_ranges = (Range_t*)sram_malloc(sizeof(Range_t) * buffer_size);
 8004554:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004558:	443b      	add	r3, r7
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f005 fdec 	bl	800a13c <sram_malloc>
 8004564:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004568:	443b      	add	r3, r7
 800456a:	6018      	str	r0, [r3, #0]
		uint32_t range_write_ptr = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	f241 625c 	movw	r2, #5724	; 0x165c
 8004572:	443a      	add	r2, r7
 8004574:	6013      	str	r3, [r2, #0]
		memset(ranges, 0x00, sizeof(Range_t) * buffer_size);
 8004576:	f241 53ec 	movw	r3, #5612	; 0x15ec
 800457a:	443b      	add	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	461a      	mov	r2, r3
 8004582:	2100      	movs	r1, #0
 8004584:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004588:	443b      	add	r3, r7
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	f01a feb8 	bl	801f300 <memset>

		// fil range with current values
		uint64_t sum_of_lengths = 0;
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	f241 6150 	movw	r1, #5712	; 0x1650
 800459c:	4439      	add	r1, r7
 800459e:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint16_t seed_index=0; seed_index<initial_seed_count; seed_index+=2)
 80045a2:	2300      	movs	r3, #0
 80045a4:	f241 624e 	movw	r2, #5710	; 0x164e
 80045a8:	443a      	add	r2, r7
 80045aa:	8013      	strh	r3, [r2, #0]
 80045ac:	e066      	b.n	800467c <AoC_Day_05+0xfa8>
 80045ae:	bf00      	nop
 80045b0:	ffffeb68 	.word	0xffffeb68
 80045b4:	08024e98 	.word	0x08024e98
 80045b8:	ffffec68 	.word	0xffffec68
		{
			ranges[range_write_ptr].start = initial_seeds[seed_index];
 80045bc:	f241 634e 	movw	r3, #5710	; 0x164e
 80045c0:	443b      	add	r3, r7
 80045c2:	8818      	ldrh	r0, [r3, #0]
 80045c4:	f241 635c 	movw	r3, #5724	; 0x165c
 80045c8:	443b      	add	r3, r7
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	011a      	lsls	r2, r3, #4
 80045ce:	f241 53e8 	movw	r3, #5608	; 0x15e8
 80045d2:	443b      	add	r3, r7
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	1899      	adds	r1, r3, r2
 80045d8:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80045dc:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 80045e0:	00c3      	lsls	r3, r0, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	e9c1 2300 	strd	r2, r3, [r1]
			ranges[range_write_ptr].length = initial_seeds[seed_index+1];
 80045ec:	f241 634e 	movw	r3, #5710	; 0x164e
 80045f0:	443b      	add	r3, r7
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	1c58      	adds	r0, r3, #1
 80045f6:	f241 635c 	movw	r3, #5724	; 0x165c
 80045fa:	443b      	add	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	011a      	lsls	r2, r3, #4
 8004600:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004604:	443b      	add	r3, r7
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	1899      	adds	r1, r3, r2
 800460a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800460e:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 8004612:	00c3      	lsls	r3, r0, #3
 8004614:	4413      	add	r3, r2
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			sum_of_lengths += initial_seeds[seed_index+1];
 800461e:	f241 634e 	movw	r3, #5710	; 0x164e
 8004622:	443b      	add	r3, r7
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800462c:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 8004630:	00cb      	lsls	r3, r1, #3
 8004632:	4413      	add	r3, r2
 8004634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004638:	f241 6350 	movw	r3, #5712	; 0x1650
 800463c:	443b      	add	r3, r7
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	1814      	adds	r4, r2, r0
 8004644:	63bc      	str	r4, [r7, #56]	; 0x38
 8004646:	414b      	adcs	r3, r1
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800464a:	f241 6250 	movw	r2, #5712	; 0x1650
 800464e:	443a      	add	r2, r7
 8004650:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004654:	e9c2 3400 	strd	r3, r4, [r2]
			range_write_ptr++;
 8004658:	f241 635c 	movw	r3, #5724	; 0x165c
 800465c:	443b      	add	r3, r7
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3301      	adds	r3, #1
 8004662:	f241 625c 	movw	r2, #5724	; 0x165c
 8004666:	443a      	add	r2, r7
 8004668:	6013      	str	r3, [r2, #0]
		for(uint16_t seed_index=0; seed_index<initial_seed_count; seed_index+=2)
 800466a:	f241 634e 	movw	r3, #5710	; 0x164e
 800466e:	443b      	add	r3, r7
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	3302      	adds	r3, #2
 8004674:	f241 624e 	movw	r2, #5710	; 0x164e
 8004678:	443a      	add	r2, r7
 800467a:	8013      	strh	r3, [r2, #0]
 800467c:	f241 634e 	movw	r3, #5710	; 0x164e
 8004680:	443b      	add	r3, r7
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800468a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800468e:	f241 53f0 	movw	r3, #5616	; 0x15f0
 8004692:	443b      	add	r3, r7
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800469c:	4621      	mov	r1, r4
 800469e:	4291      	cmp	r1, r2
 80046a0:	4629      	mov	r1, r5
 80046a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80046a6:	d389      	bcc.n	80045bc <AoC_Day_05+0xee8>
		}

		// for each
		for(uint8_t conversion_index=0; conversion_index<conversion_ptr; conversion_index++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	f241 624d 	movw	r2, #5709	; 0x164d
 80046ae:	443a      	add	r2, r7
 80046b0:	7013      	strb	r3, [r2, #0]
 80046b2:	e2dd      	b.n	8004c70 <AoC_Day_05+0x159c>
		{
			// current layer conversion
			Conversion_t conversion = conversions[conversion_index];
 80046b4:	f241 634d 	movw	r3, #5709	; 0x164d
 80046b8:	443b      	add	r3, r7
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	f640 4308 	movw	r3, #3080	; 0xc08
 80046c0:	fb03 f202 	mul.w	r2, r3, r2
 80046c4:	f241 53fc 	movw	r3, #5628	; 0x15fc
 80046c8:	443b      	add	r3, r7
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	441a      	add	r2, r3
 80046ce:	f241 63a8 	movw	r3, #5800	; 0x16a8
 80046d2:	443b      	add	r3, r7
 80046d4:	f6a3 5368 	subw	r3, r3, #3432	; 0xd68
 80046d8:	4618      	mov	r0, r3
 80046da:	4611      	mov	r1, r2
 80046dc:	f640 4308 	movw	r3, #3080	; 0xc08
 80046e0:	461a      	mov	r2, r3
 80046e2:	f01a fdff 	bl	801f2e4 <memcpy>

			// create temporary next ranges
			uint32_t next_range_write_ptr = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f241 6248 	movw	r2, #5704	; 0x1648
 80046ec:	443a      	add	r2, r7
 80046ee:	6013      	str	r3, [r2, #0]
			memset(next_ranges, 0x00, sizeof(Range_t) * buffer_size);
 80046f0:	f241 53ec 	movw	r3, #5612	; 0x15ec
 80046f4:	443b      	add	r3, r7
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	461a      	mov	r2, r3
 80046fc:	2100      	movs	r1, #0
 80046fe:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004702:	443b      	add	r3, r7
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f01a fdfb 	bl	801f300 <memset>

			// for each range in current range
			for(uint32_t seed_index=0; seed_index<range_write_ptr; seed_index++)
 800470a:	2300      	movs	r3, #0
 800470c:	f241 6244 	movw	r2, #5700	; 0x1644
 8004710:	443a      	add	r2, r7
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e280      	b.n	8004c18 <AoC_Day_05+0x1544>
			{
				// get current range
				Range_t current_range = ranges[seed_index];
 8004716:	f241 6344 	movw	r3, #5700	; 0x1644
 800471a:	443b      	add	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	011a      	lsls	r2, r3, #4
 8004720:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004724:	443b      	add	r3, r7
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	441a      	add	r2, r3
 800472a:	f241 63a8 	movw	r3, #5800	; 0x16a8
 800472e:	443b      	add	r3, r7
 8004730:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004734:	461c      	mov	r4, r3
 8004736:	4613      	mov	r3, r2
 8004738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800473a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				uint64_t start = current_range.start;
 800473e:	f241 63a8 	movw	r3, #5800	; 0x16a8
 8004742:	443b      	add	r3, r7
 8004744:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f241 6138 	movw	r1, #5688	; 0x1638
 8004750:	4439      	add	r1, r7
 8004752:	e9c1 2300 	strd	r2, r3, [r1]
				uint64_t length = current_range.length;
 8004756:	f241 63a8 	movw	r3, #5800	; 0x16a8
 800475a:	443b      	add	r3, r7
 800475c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004760:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004764:	f241 6130 	movw	r1, #5680	; 0x1630
 8004768:	4439      	add	r1, r7
 800476a:	e9c1 2300 	strd	r2, r3, [r1]
				uint64_t end = start + length;
 800476e:	f241 6338 	movw	r3, #5688	; 0x1638
 8004772:	443b      	add	r3, r7
 8004774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004778:	f241 6330 	movw	r3, #5680	; 0x1630
 800477c:	443b      	add	r3, r7
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	1884      	adds	r4, r0, r2
 8004784:	633c      	str	r4, [r7, #48]	; 0x30
 8004786:	eb41 0303 	adc.w	r3, r1, r3
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
 800478c:	f241 52d8 	movw	r2, #5592	; 0x15d8
 8004790:	443a      	add	r2, r7
 8004792:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004796:	e9c2 3400 	strd	r3, r4, [r2]
				uint8_t transformed = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	f241 622f 	movw	r2, #5679	; 0x162f
 80047a0:	443a      	add	r2, r7
 80047a2:	7013      	strb	r3, [r2, #0]

				// for each range
				uint64_t range_count = conversion.range_count;
 80047a4:	f241 63a8 	movw	r3, #5800	; 0x16a8
 80047a8:	443b      	add	r3, r7
 80047aa:	f6a3 5368 	subw	r3, r3, #3432	; 0xd68
 80047ae:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f241 51d0 	movw	r1, #5584	; 0x15d0
 80047ba:	4439      	add	r1, r7
 80047bc:	e9c1 2300 	strd	r2, r3, [r1]
				for(uint64_t range_index=0; range_index<range_count; range_index++)
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f507 51b1 	add.w	r1, r7, #5664	; 0x1620
 80047cc:	e9c1 2300 	strd	r2, r3, [r1]
 80047d0:	e1c6      	b.n	8004b60 <AoC_Day_05+0x148c>
				{
					// get curent conversion range
					ConversionRange_t conversion_range = conversion.ranges[range_index];
 80047d2:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80047d6:	f5a3 60b9 	sub.w	r0, r3, #1480	; 0x5c8
 80047da:	f241 63a8 	movw	r3, #5800	; 0x16a8
 80047de:	443b      	add	r3, r7
 80047e0:	f6a3 5168 	subw	r1, r3, #3432	; 0xd68
 80047e4:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	440b      	add	r3, r1
 80047f4:	4605      	mov	r5, r0
 80047f6:	461c      	mov	r4, r3
 80047f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004800:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004804:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					uint64_t conversion_start = conversion_range.from;
 8004808:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800480c:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8004810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004814:	f241 51c8 	movw	r1, #5576	; 0x15c8
 8004818:	4439      	add	r1, r7
 800481a:	e9c1 2300 	strd	r2, r3, [r1]
					uint64_t conversion_end = conversion_start + conversion_range.length;
 800481e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004822:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8004826:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800482a:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800482e:	443b      	add	r3, r7
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	1814      	adds	r4, r2, r0
 8004836:	62bc      	str	r4, [r7, #40]	; 0x28
 8004838:	414b      	adcs	r3, r1
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483c:	f507 52ae 	add.w	r2, r7, #5568	; 0x15c0
 8004840:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004844:	e9c2 3400 	strd	r3, r4, [r2]
					uint64_t conversion_target = conversion_range.target;
 8004848:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800484c:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8004850:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004854:	f241 51b8 	movw	r1, #5560	; 0x15b8
 8004858:	4439      	add	r1, r7
 800485a:	e9c1 2300 	strd	r2, r3, [r1]

					// discard if no overlap is occuring
					if(start >= conversion_end || end <= conversion_start)
 800485e:	f241 6338 	movw	r3, #5688	; 0x1638
 8004862:	443b      	add	r3, r7
 8004864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004868:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	4290      	cmp	r0, r2
 8004872:	eb71 0303 	sbcs.w	r3, r1, r3
 8004876:	d20c      	bcs.n	8004892 <AoC_Day_05+0x11be>
 8004878:	f241 53d8 	movw	r3, #5592	; 0x15d8
 800487c:	443b      	add	r3, r7
 800487e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004882:	f241 53c8 	movw	r3, #5576	; 0x15c8
 8004886:	443b      	add	r3, r7
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	4282      	cmp	r2, r0
 800488e:	418b      	sbcs	r3, r1
 8004890:	d32c      	bcc.n	80048ec <AoC_Day_05+0x1218>
					{
						if(range_index == range_count - 1 && end >= conversion_end)
 8004892:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8004896:	443b      	add	r3, r7
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	1e51      	subs	r1, r2, #1
 800489e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80048a2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80048a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048aa:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80048b6:	4621      	mov	r1, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	4283      	cmp	r3, r0
 80048bc:	bf08      	it	eq
 80048be:	428a      	cmpeq	r2, r1
 80048c0:	f040 813e 	bne.w	8004b40 <AoC_Day_05+0x146c>
 80048c4:	f241 53d8 	movw	r3, #5592	; 0x15d8
 80048c8:	443b      	add	r3, r7
 80048ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ce:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	4290      	cmp	r0, r2
 80048d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80048dc:	f0c0 8130 	bcc.w	8004b40 <AoC_Day_05+0x146c>
							transformed = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f241 622f 	movw	r2, #5679	; 0x162f
 80048e6:	443a      	add	r2, r7
 80048e8:	7013      	strb	r3, [r2, #0]
 80048ea:	e12a      	b.n	8004b42 <AoC_Day_05+0x146e>
						continue;
					}

					// confirm transformation
					transformed = 1;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f241 622f 	movw	r2, #5679	; 0x162f
 80048f2:	443a      	add	r2, r7
 80048f4:	7013      	strb	r3, [r2, #0]

					// add input range if start starts before conversion range
					if(start < conversion_start)
 80048f6:	f241 6338 	movw	r3, #5688	; 0x1638
 80048fa:	443b      	add	r3, r7
 80048fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004900:	f241 53c8 	movw	r3, #5576	; 0x15c8
 8004904:	443b      	add	r3, r7
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	4290      	cmp	r0, r2
 800490c:	eb71 0303 	sbcs.w	r3, r1, r3
 8004910:	d24a      	bcs.n	80049a8 <AoC_Day_05+0x12d4>
					{
						next_ranges[next_range_write_ptr].start = start;
 8004912:	f241 6348 	movw	r3, #5704	; 0x1648
 8004916:	443b      	add	r3, r7
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	011a      	lsls	r2, r3, #4
 800491c:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004920:	443b      	add	r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1899      	adds	r1, r3, r2
 8004926:	f241 6338 	movw	r3, #5688	; 0x1638
 800492a:	443b      	add	r3, r7
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	e9c1 2300 	strd	r2, r3, [r1]
						next_ranges[next_range_write_ptr].length = conversion_start - start;
 8004934:	f241 6348 	movw	r3, #5704	; 0x1648
 8004938:	443b      	add	r3, r7
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	011a      	lsls	r2, r3, #4
 800493e:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004942:	443b      	add	r3, r7
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	189c      	adds	r4, r3, r2
 8004948:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800494c:	443b      	add	r3, r7
 800494e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004952:	f241 6338 	movw	r3, #5688	; 0x1638
 8004956:	443b      	add	r3, r7
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	1a85      	subs	r5, r0, r2
 800495e:	67bd      	str	r5, [r7, #120]	; 0x78
 8004960:	eb61 0303 	sbc.w	r3, r1, r3
 8004964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004966:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800496a:	e9c4 2302 	strd	r2, r3, [r4, #8]
						next_range_write_ptr++;
 800496e:	f241 6348 	movw	r3, #5704	; 0x1648
 8004972:	443b      	add	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	f241 6248 	movw	r2, #5704	; 0x1648
 800497c:	443a      	add	r2, r7
 800497e:	6013      	str	r3, [r2, #0]

						if(next_range_write_ptr == buffer_size)
 8004980:	f241 6348 	movw	r3, #5704	; 0x1648
 8004984:	443b      	add	r3, r7
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	f241 53ec 	movw	r3, #5612	; 0x15ec
 800498c:	443b      	add	r3, r7
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d109      	bne.n	80049a8 <AoC_Day_05+0x12d4>
							AdventOfCode_print(config, "Overflow!\n", strlen("Overflow!\n"));
 8004994:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004998:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	220a      	movs	r2, #10
 80049a0:	4966      	ldr	r1, [pc, #408]	; (8004b3c <AoC_Day_05+0x1468>)
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc fc46 	bl	8001234 <AdventOfCode_print>
					}

					// calculate overlapping part
					uint64_t overlap_start = (start > conversion_start) ? start : conversion_start;
 80049a8:	f241 6338 	movw	r3, #5688	; 0x1638
 80049ac:	443b      	add	r3, r7
 80049ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049b2:	f241 53c8 	movw	r3, #5576	; 0x15c8
 80049b6:	443b      	add	r3, r7
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	4282      	cmp	r2, r0
 80049be:	eb73 0401 	sbcs.w	r4, r3, r1
 80049c2:	d201      	bcs.n	80049c8 <AoC_Day_05+0x12f4>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	f241 51b0 	movw	r1, #5552	; 0x15b0
 80049cc:	4439      	add	r1, r7
 80049ce:	e9c1 2300 	strd	r2, r3, [r1]
					uint64_t overlap_end = (end < conversion_end) ? end : conversion_end;
 80049d2:	f241 53d8 	movw	r3, #5592	; 0x15d8
 80049d6:	443b      	add	r3, r7
 80049d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049dc:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	4290      	cmp	r0, r2
 80049e6:	eb71 0403 	sbcs.w	r4, r1, r3
 80049ea:	d201      	bcs.n	80049f0 <AoC_Day_05+0x131c>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	f241 51a8 	movw	r1, #5544	; 0x15a8
 80049f4:	4439      	add	r1, r7
 80049f6:	e9c1 2300 	strd	r2, r3, [r1]
					uint64_t overlap_length = overlap_end - overlap_start;
 80049fa:	f241 53a8 	movw	r3, #5544	; 0x15a8
 80049fe:	443b      	add	r3, r7
 8004a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a04:	f241 53b0 	movw	r3, #5552	; 0x15b0
 8004a08:	443b      	add	r3, r7
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	1a84      	subs	r4, r0, r2
 8004a10:	623c      	str	r4, [r7, #32]
 8004a12:	eb61 0303 	sbc.w	r3, r1, r3
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 8004a1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004a20:	e9c2 3400 	strd	r3, r4, [r2]
					uint64_t target_start = conversion_target + (overlap_start - conversion_start);
 8004a24:	f241 53b0 	movw	r3, #5552	; 0x15b0
 8004a28:	443b      	add	r3, r7
 8004a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2e:	f241 53c8 	movw	r3, #5576	; 0x15c8
 8004a32:	443b      	add	r3, r7
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	1a84      	subs	r4, r0, r2
 8004a3a:	673c      	str	r4, [r7, #112]	; 0x70
 8004a3c:	eb61 0303 	sbc.w	r3, r1, r3
 8004a40:	677b      	str	r3, [r7, #116]	; 0x74
 8004a42:	f241 53b8 	movw	r3, #5560	; 0x15b8
 8004a46:	443b      	add	r3, r7
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004a50:	4621      	mov	r1, r4
 8004a52:	1851      	adds	r1, r2, r1
 8004a54:	61b9      	str	r1, [r7, #24]
 8004a56:	4629      	mov	r1, r5
 8004a58:	414b      	adcs	r3, r1
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	f241 5298 	movw	r2, #5528	; 0x1598
 8004a60:	443a      	add	r2, r7
 8004a62:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004a66:	e9c2 3400 	strd	r3, r4, [r2]

					// add overlap range
					next_ranges[next_range_write_ptr].start = target_start;
 8004a6a:	f241 6348 	movw	r3, #5704	; 0x1648
 8004a6e:	443b      	add	r3, r7
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	011a      	lsls	r2, r3, #4
 8004a74:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004a78:	443b      	add	r3, r7
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1899      	adds	r1, r3, r2
 8004a7e:	f241 5398 	movw	r3, #5528	; 0x1598
 8004a82:	443b      	add	r3, r7
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	e9c1 2300 	strd	r2, r3, [r1]
					next_ranges[next_range_write_ptr].length = overlap_length;
 8004a8c:	f241 6348 	movw	r3, #5704	; 0x1648
 8004a90:	443b      	add	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	011a      	lsls	r2, r3, #4
 8004a96:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004a9a:	443b      	add	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1899      	adds	r1, r3, r2
 8004aa0:	f507 53ad 	add.w	r3, r7, #5536	; 0x15a0
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	e9c1 2302 	strd	r2, r3, [r1, #8]
					next_range_write_ptr++;
 8004aac:	f241 6348 	movw	r3, #5704	; 0x1648
 8004ab0:	443b      	add	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f241 6248 	movw	r2, #5704	; 0x1648
 8004aba:	443a      	add	r2, r7
 8004abc:	6013      	str	r3, [r2, #0]

					if(next_range_write_ptr == buffer_size)
 8004abe:	f241 6348 	movw	r3, #5704	; 0x1648
 8004ac2:	443b      	add	r3, r7
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004aca:	443b      	add	r3, r7
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d109      	bne.n	8004ae6 <AoC_Day_05+0x1412>
						AdventOfCode_print(config, "Overflow!\n", strlen("Overflow!\n"));
 8004ad2:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004ad6:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	220a      	movs	r2, #10
 8004ade:	4917      	ldr	r1, [pc, #92]	; (8004b3c <AoC_Day_05+0x1468>)
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fc fba7 	bl	8001234 <AdventOfCode_print>

					// add overlap exit if present
					if(end > conversion_end)
 8004ae6:	f241 53d8 	movw	r3, #5592	; 0x15d8
 8004aea:	443b      	add	r3, r7
 8004aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004af0:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	4282      	cmp	r2, r0
 8004afa:	418b      	sbcs	r3, r1
 8004afc:	d221      	bcs.n	8004b42 <AoC_Day_05+0x146e>
					{
						start = conversion_end;
 8004afe:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f241 6138 	movw	r1, #5688	; 0x1638
 8004b0a:	4439      	add	r1, r7
 8004b0c:	e9c1 2300 	strd	r2, r3, [r1]
						length = end - conversion_end;
 8004b10:	f241 53d8 	movw	r3, #5592	; 0x15d8
 8004b14:	443b      	add	r3, r7
 8004b16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b1a:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	1a84      	subs	r4, r0, r2
 8004b24:	613c      	str	r4, [r7, #16]
 8004b26:	eb61 0303 	sbc.w	r3, r1, r3
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	f241 6230 	movw	r2, #5680	; 0x1630
 8004b30:	443a      	add	r2, r7
 8004b32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004b36:	e9c2 3400 	strd	r3, r4, [r2]
 8004b3a:	e002      	b.n	8004b42 <AoC_Day_05+0x146e>
 8004b3c:	08024eb8 	.word	0x08024eb8
						continue;
 8004b40:	bf00      	nop
				for(uint64_t range_index=0; range_index<range_count; range_index++)
 8004b42:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	1c51      	adds	r1, r2, #1
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	f143 0300 	adc.w	r3, r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8004b58:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b5c:	e9c2 3400 	strd	r3, r4, [r2]
 8004b60:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8004b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b68:	f241 53d0 	movw	r3, #5584	; 0x15d0
 8004b6c:	443b      	add	r3, r7
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	4290      	cmp	r0, r2
 8004b74:	eb71 0303 	sbcs.w	r3, r1, r3
 8004b78:	f4ff ae2b 	bcc.w	80047d2 <AoC_Day_05+0x10fe>
					}
				}

				// if not transformed add it back into queue
				if(!transformed)
 8004b7c:	f241 632f 	movw	r3, #5679	; 0x162f
 8004b80:	443b      	add	r3, r7
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d13e      	bne.n	8004c06 <AoC_Day_05+0x1532>
				{
					next_ranges[next_range_write_ptr].start = start;
 8004b88:	f241 6348 	movw	r3, #5704	; 0x1648
 8004b8c:	443b      	add	r3, r7
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	011a      	lsls	r2, r3, #4
 8004b92:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004b96:	443b      	add	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1899      	adds	r1, r3, r2
 8004b9c:	f241 6338 	movw	r3, #5688	; 0x1638
 8004ba0:	443b      	add	r3, r7
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	e9c1 2300 	strd	r2, r3, [r1]
					next_ranges[next_range_write_ptr].length = length;
 8004baa:	f241 6348 	movw	r3, #5704	; 0x1648
 8004bae:	443b      	add	r3, r7
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	011a      	lsls	r2, r3, #4
 8004bb4:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004bb8:	443b      	add	r3, r7
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	1899      	adds	r1, r3, r2
 8004bbe:	f241 6330 	movw	r3, #5680	; 0x1630
 8004bc2:	443b      	add	r3, r7
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
					next_range_write_ptr++;
 8004bcc:	f241 6348 	movw	r3, #5704	; 0x1648
 8004bd0:	443b      	add	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f241 6248 	movw	r2, #5704	; 0x1648
 8004bda:	443a      	add	r2, r7
 8004bdc:	6013      	str	r3, [r2, #0]

					if(next_range_write_ptr == buffer_size)
 8004bde:	f241 6348 	movw	r3, #5704	; 0x1648
 8004be2:	443b      	add	r3, r7
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004bea:	443b      	add	r3, r7
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d109      	bne.n	8004c06 <AoC_Day_05+0x1532>
						AdventOfCode_print(config, "Overflow!\n", strlen("Overflow!\n"));
 8004bf2:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004bf6:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	497d      	ldr	r1, [pc, #500]	; (8004df4 <AoC_Day_05+0x1720>)
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc fb17 	bl	8001234 <AdventOfCode_print>
			for(uint32_t seed_index=0; seed_index<range_write_ptr; seed_index++)
 8004c06:	f241 6344 	movw	r3, #5700	; 0x1644
 8004c0a:	443b      	add	r3, r7
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f241 6244 	movw	r2, #5700	; 0x1644
 8004c14:	443a      	add	r2, r7
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	f241 6344 	movw	r3, #5700	; 0x1644
 8004c1c:	443b      	add	r3, r7
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	f241 635c 	movw	r3, #5724	; 0x165c
 8004c24:	443b      	add	r3, r7
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	f4ff ad74 	bcc.w	8004716 <AoC_Day_05+0x1042>
				}
			}

			// copy ranges into next
			memcpy(ranges, next_ranges, sizeof(Range_t) * buffer_size);
 8004c2e:	f241 53ec 	movw	r3, #5612	; 0x15ec
 8004c32:	443b      	add	r3, r7
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004c3e:	443b      	add	r3, r7
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004c46:	443b      	add	r3, r7
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f01a fb4b 	bl	801f2e4 <memcpy>
			range_write_ptr = next_range_write_ptr;
 8004c4e:	f241 6348 	movw	r3, #5704	; 0x1648
 8004c52:	443b      	add	r3, r7
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f241 625c 	movw	r2, #5724	; 0x165c
 8004c5a:	443a      	add	r2, r7
 8004c5c:	6013      	str	r3, [r2, #0]
		for(uint8_t conversion_index=0; conversion_index<conversion_ptr; conversion_index++)
 8004c5e:	f241 634d 	movw	r3, #5709	; 0x164d
 8004c62:	443b      	add	r3, r7
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	f241 624d 	movw	r2, #5709	; 0x164d
 8004c6c:	443a      	add	r2, r7
 8004c6e:	7013      	strb	r3, [r2, #0]
 8004c70:	f241 634d 	movw	r3, #5709	; 0x164d
 8004c74:	443b      	add	r3, r7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c7e:	f241 6368 	movw	r3, #5736	; 0x1668
 8004c82:	443b      	add	r3, r7
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4291      	cmp	r1, r2
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb71 0303 	sbcs.w	r3, r1, r3
 8004c96:	f6ff ad0d 	blt.w	80046b4 <AoC_Day_05+0xfe0>
		}

		// get lowest range
		uint64_t end_total_size = 0;
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	f241 6118 	movw	r1, #5656	; 0x1618
 8004ca6:	4439      	add	r1, r7
 8004ca8:	e9c1 2300 	strd	r2, r3, [r1]
		uint64_t lowest = 0x7FFFFFFFFFFFFFFF;
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004cb4:	f241 6110 	movw	r1, #5648	; 0x1610
 8004cb8:	4439      	add	r1, r7
 8004cba:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint32_t range=0; range<range_write_ptr; range++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f241 620c 	movw	r2, #5644	; 0x160c
 8004cc4:	443a      	add	r2, r7
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e059      	b.n	8004d7e <AoC_Day_05+0x16aa>
		{
			if(ranges[range].start < lowest && ranges[range].start)
 8004cca:	f241 630c 	movw	r3, #5644	; 0x160c
 8004cce:	443b      	add	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	f241 52e8 	movw	r2, #5608	; 0x15e8
 8004cd8:	443a      	add	r2, r7
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	4413      	add	r3, r2
 8004cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ce2:	f241 6310 	movw	r3, #5648	; 0x1610
 8004ce6:	443b      	add	r3, r7
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	4290      	cmp	r0, r2
 8004cee:	eb71 0303 	sbcs.w	r3, r1, r3
 8004cf2:	d21e      	bcs.n	8004d32 <AoC_Day_05+0x165e>
 8004cf4:	f241 630c 	movw	r3, #5644	; 0x160c
 8004cf8:	443b      	add	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	f241 52e8 	movw	r2, #5608	; 0x15e8
 8004d02:	443a      	add	r2, r7
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	4413      	add	r3, r2
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	d010      	beq.n	8004d32 <AoC_Day_05+0x165e>
			{
				lowest = ranges[range].start;
 8004d10:	f241 630c 	movw	r3, #5644	; 0x160c
 8004d14:	443b      	add	r3, r7
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	f241 52e8 	movw	r2, #5608	; 0x15e8
 8004d1e:	443a      	add	r2, r7
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f241 6110 	movw	r1, #5648	; 0x1610
 8004d2c:	4439      	add	r1, r7
 8004d2e:	e9c1 2300 	strd	r2, r3, [r1]
			}
			end_total_size += ranges[range].length;
 8004d32:	f241 630c 	movw	r3, #5644	; 0x160c
 8004d36:	443b      	add	r3, r7
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	f241 52e8 	movw	r2, #5608	; 0x15e8
 8004d40:	443a      	add	r2, r7
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d4a:	f241 6118 	movw	r1, #5656	; 0x1618
 8004d4e:	4439      	add	r1, r7
 8004d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d54:	1884      	adds	r4, r0, r2
 8004d56:	603c      	str	r4, [r7, #0]
 8004d58:	eb41 0303 	adc.w	r3, r1, r3
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	f241 6218 	movw	r2, #5656	; 0x1618
 8004d62:	443a      	add	r2, r7
 8004d64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d68:	e9c2 3400 	strd	r3, r4, [r2]
		for(uint32_t range=0; range<range_write_ptr; range++)
 8004d6c:	f241 630c 	movw	r3, #5644	; 0x160c
 8004d70:	443b      	add	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	f241 620c 	movw	r2, #5644	; 0x160c
 8004d7a:	443a      	add	r2, r7
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	f241 630c 	movw	r3, #5644	; 0x160c
 8004d82:	443b      	add	r3, r7
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f241 635c 	movw	r3, #5724	; 0x165c
 8004d8a:	443b      	add	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d39b      	bcc.n	8004cca <AoC_Day_05+0x15f6>
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 2 answer: %lld\n", lowest);
 8004d92:	f507 6014 	add.w	r0, r7, #2368	; 0x940
 8004d96:	f241 6310 	movw	r3, #5648	; 0x1610
 8004d9a:	443b      	add	r3, r7
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	4915      	ldr	r1, [pc, #84]	; (8004df8 <AoC_Day_05+0x1724>)
 8004da2:	f01a fad1 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8004da6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb fa30 	bl	8000210 <strlen>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8004db8:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004dbc:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fc fa36 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <AoC_Day_05+0x1728>)
 8004dca:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8004dce:	f103 0310 	add.w	r3, r3, #16
 8004dd2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8004dd6:	4413      	add	r3, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f018 fcad 	bl	801d738 <f_close>
		sram_clrmem();
 8004dde:	f005 f9f1 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	f507 57b5 	add.w	r7, r7, #5792	; 0x16a0
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	08024eb8 	.word	0x08024eb8
 8004df8:	08024ec4 	.word	0x08024ec4
 8004dfc:	ffffec68 	.word	0xffffec68

08004e00 <AoC_Day_06>:
	uint64_t duration;
	uint64_t distance;
};

AdventOfCode_return_t AoC_Day_06(AdventOfCode_config_t config)
{
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	ed2d 8b02 	vpush	{d8}
 8004e08:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	4601      	mov	r1, r0
 8004e10:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004e14:	f2a3 5261 	subw	r2, r3, #1377	; 0x561
 8004e18:	460b      	mov	r3, r1
 8004e1a:	7013      	strb	r3, [r2, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8004e1c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004e20:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <AoC_Day_06+0x30>
		return AOC_RETURN_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f000 bce5 	b.w	80057fa <AoC_Day_06+0x9fa>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8004e30:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004e34:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d10a      	bne.n	8004e54 <AoC_Day_06+0x54>
			ret = f_open(&file, "day6t.txt", FA_READ);
 8004e3e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004e42:	2201      	movs	r2, #1
 8004e44:	4987      	ldr	r1, [pc, #540]	; (8005064 <AoC_Day_06+0x264>)
 8004e46:	4618      	mov	r0, r3
 8004e48:	f017 ff86 	bl	801cd58 <f_open>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 35b7 	strb.w	r3, [r7, #1463]	; 0x5b7
 8004e52:	e009      	b.n	8004e68 <AoC_Day_06+0x68>
		else ret = f_open(&file, "day6.txt", FA_READ);
 8004e54:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4983      	ldr	r1, [pc, #524]	; (8005068 <AoC_Day_06+0x268>)
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f017 ff7b 	bl	801cd58 <f_open>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 35b7 	strb.w	r3, [r7, #1463]	; 0x5b7
		if(ret != FR_OK)
 8004e68:	f897 35b7 	ldrb.w	r3, [r7, #1463]	; 0x5b7
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00c      	beq.n	8004e8a <AoC_Day_06+0x8a>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8004e70:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004e74:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2213      	movs	r2, #19
 8004e7c:	497b      	ldr	r1, [pc, #492]	; (800506c <AoC_Day_06+0x26c>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fc f9d8 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f000 bcb8 	b.w	80057fa <AoC_Day_06+0x9fa>
		}

		// create games
		uint64_t total_games = 0;
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8004e96:	e9c1 2300 	strd	r2, r3, [r1]
		Game_t games[20];
		memset(games, 0x00, sizeof(Game_t) * 20);
 8004e9a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004e9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f01a fa2b 	bl	801f300 <memset>

		{
			// process duration
			char buffer[256];
			f_gets(buffer, 256, &file);
 8004eaa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004eae:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eb8:	f018 fe22 	bl	801db00 <f_gets>

			// tokenize data
			char token_buffer[8][16];
			memset(token_buffer, 0x00, 8 * 16);
 8004ebc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f01a fa1b 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 8004eca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004ece:	4968      	ldr	r1, [pc, #416]	; (8005070 <AoC_Day_06+0x270>)
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f01a fa69 	bl	801f3a8 <strtok>
 8004ed6:	f8c7 05b0 	str.w	r0, [r7, #1456]	; 0x5b0
			uint8_t token_counter = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 35af 	strb.w	r3, [r7, #1455]	; 0x5af
			while(token != NULL && token_counter < 8)
 8004ee0:	e01b      	b.n	8004f1a <AoC_Day_06+0x11a>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8004ee2:	f897 35af 	ldrb.w	r3, [r7, #1455]	; 0x5af
 8004ee6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	18d4      	adds	r4, r2, r3
 8004eee:	f8d7 05b0 	ldr.w	r0, [r7, #1456]	; 0x5b0
 8004ef2:	f7fb f98d 	bl	8000210 <strlen>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8004efe:	4620      	mov	r0, r4
 8004f00:	f01a f9f0 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 8004f04:	495a      	ldr	r1, [pc, #360]	; (8005070 <AoC_Day_06+0x270>)
 8004f06:	2000      	movs	r0, #0
 8004f08:	f01a fa4e 	bl	801f3a8 <strtok>
 8004f0c:	f8c7 05b0 	str.w	r0, [r7, #1456]	; 0x5b0
				token_counter++;
 8004f10:	f897 35af 	ldrb.w	r3, [r7, #1455]	; 0x5af
 8004f14:	3301      	adds	r3, #1
 8004f16:	f887 35af 	strb.w	r3, [r7, #1455]	; 0x5af
			while(token != NULL && token_counter < 8)
 8004f1a:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <AoC_Day_06+0x12a>
 8004f22:	f897 35af 	ldrb.w	r3, [r7, #1455]	; 0x5af
 8004f26:	2b07      	cmp	r3, #7
 8004f28:	d9db      	bls.n	8004ee2 <AoC_Day_06+0xe2>
			}

			// insert game size
			total_games = token_counter - 1;
 8004f2a:	f897 35af 	ldrb.w	r3, [r7, #1455]	; 0x5af
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	17da      	asrs	r2, r3, #31
 8004f32:	461d      	mov	r5, r3
 8004f34:	4616      	mov	r6, r2
 8004f36:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8004f3a:	e9c3 5600 	strd	r5, r6, [r3]

			// for each token after the first insert to game
			for(uint8_t index=1; index<token_counter; index++)
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 35ae 	strb.w	r3, [r7, #1454]	; 0x5ae
 8004f44:	e018      	b.n	8004f78 <AoC_Day_06+0x178>
			{
				games[index - 1].duration = atoll(token_buffer[index]);
 8004f46:	f897 35ae 	ldrb.w	r3, [r7, #1454]	; 0x5ae
 8004f4a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4413      	add	r3, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f019 ff3c 	bl	801edd0 <atoll>
 8004f58:	f897 35ae 	ldrb.w	r3, [r7, #1454]	; 0x5ae
 8004f5c:	1e5c      	subs	r4, r3, #1
 8004f5e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8004f62:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8004f66:	0123      	lsls	r3, r4, #4
 8004f68:	4413      	add	r3, r2
 8004f6a:	e9c3 0100 	strd	r0, r1, [r3]
			for(uint8_t index=1; index<token_counter; index++)
 8004f6e:	f897 35ae 	ldrb.w	r3, [r7, #1454]	; 0x5ae
 8004f72:	3301      	adds	r3, #1
 8004f74:	f887 35ae 	strb.w	r3, [r7, #1454]	; 0x5ae
 8004f78:	f897 25ae 	ldrb.w	r2, [r7, #1454]	; 0x5ae
 8004f7c:	f897 35af 	ldrb.w	r3, [r7, #1455]	; 0x5af
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3e0      	bcc.n	8004f46 <AoC_Day_06+0x146>
		}

		{
			// process distance
			char buffer[256];
			f_gets(buffer, 256, &file);
 8004f84:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004f88:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f92:	f018 fdb5 	bl	801db00 <f_gets>

			// tokenize data
			char token_buffer[8][16];
			memset(token_buffer, 0x00, 8 * 16);
 8004f96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f9a:	2280      	movs	r2, #128	; 0x80
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f01a f9ae 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 8004fa4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004fa8:	4931      	ldr	r1, [pc, #196]	; (8005070 <AoC_Day_06+0x270>)
 8004faa:	4618      	mov	r0, r3
 8004fac:	f01a f9fc 	bl	801f3a8 <strtok>
 8004fb0:	f8c7 05a8 	str.w	r0, [r7, #1448]	; 0x5a8
			uint8_t token_counter = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 35a7 	strb.w	r3, [r7, #1447]	; 0x5a7
			while(token != NULL && token_counter < 8)
 8004fba:	e01b      	b.n	8004ff4 <AoC_Day_06+0x1f4>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 8004fbc:	f897 35a7 	ldrb.w	r3, [r7, #1447]	; 0x5a7
 8004fc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	18d4      	adds	r4, r2, r3
 8004fc8:	f8d7 05a8 	ldr.w	r0, [r7, #1448]	; 0x5a8
 8004fcc:	f7fb f920 	bl	8000210 <strlen>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f01a f983 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 8004fde:	4924      	ldr	r1, [pc, #144]	; (8005070 <AoC_Day_06+0x270>)
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f01a f9e1 	bl	801f3a8 <strtok>
 8004fe6:	f8c7 05a8 	str.w	r0, [r7, #1448]	; 0x5a8
				token_counter++;
 8004fea:	f897 35a7 	ldrb.w	r3, [r7, #1447]	; 0x5a7
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f887 35a7 	strb.w	r3, [r7, #1447]	; 0x5a7
			while(token != NULL && token_counter < 8)
 8004ff4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <AoC_Day_06+0x204>
 8004ffc:	f897 35a7 	ldrb.w	r3, [r7, #1447]	; 0x5a7
 8005000:	2b07      	cmp	r3, #7
 8005002:	d9db      	bls.n	8004fbc <AoC_Day_06+0x1bc>
			}

			// for each token after the first insert to game
			for(uint8_t index=1; index<token_counter; index++)
 8005004:	2301      	movs	r3, #1
 8005006:	f887 35a6 	strb.w	r3, [r7, #1446]	; 0x5a6
 800500a:	e019      	b.n	8005040 <AoC_Day_06+0x240>
			{
				games[index - 1].distance = atoll(token_buffer[index]);
 800500c:	f897 35a6 	ldrb.w	r3, [r7, #1446]	; 0x5a6
 8005010:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f019 fed9 	bl	801edd0 <atoll>
 800501e:	f897 35a6 	ldrb.w	r3, [r7, #1446]	; 0x5a6
 8005022:	1e5c      	subs	r4, r3, #1
 8005024:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005028:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 800502c:	0123      	lsls	r3, r4, #4
 800502e:	4413      	add	r3, r2
 8005030:	3308      	adds	r3, #8
 8005032:	e9c3 0100 	strd	r0, r1, [r3]
			for(uint8_t index=1; index<token_counter; index++)
 8005036:	f897 35a6 	ldrb.w	r3, [r7, #1446]	; 0x5a6
 800503a:	3301      	adds	r3, #1
 800503c:	f887 35a6 	strb.w	r3, [r7, #1446]	; 0x5a6
 8005040:	f897 25a6 	ldrb.w	r2, [r7, #1446]	; 0x5a6
 8005044:	f897 35a7 	ldrb.w	r3, [r7, #1447]	; 0x5a7
 8005048:	429a      	cmp	r2, r3
 800504a:	d3df      	bcc.n	800500c <AoC_Day_06+0x20c>
			}
		}

		// calculate the distances
		uint64_t mul = 1;
 800504c:	f04f 0201 	mov.w	r2, #1
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8005058:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint8_t index=0; index<total_games; index++)
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3597 	strb.w	r3, [r7, #1431]	; 0x597
 8005062:	e138      	b.n	80052d6 <AoC_Day_06+0x4d6>
 8005064:	08024ee0 	.word	0x08024ee0
 8005068:	08024eec 	.word	0x08024eec
 800506c:	08024ef8 	.word	0x08024ef8
 8005070:	08024f10 	.word	0x08024f10
 8005074:	3a83126f 	.word	0x3a83126f
		{
			uint64_t lower = (int32_t)ceil(0.5f * (games[index].duration - sqrtf(games[index].duration * games[index].duration - 4.0f * ((float)games[index].distance + 0.001f))));
 8005078:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 800507c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005080:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8005084:	010b      	lsls	r3, r1, #4
 8005086:	4413      	add	r3, r2
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	f7fb fe92 	bl	8000db8 <__aeabi_ul2f>
 8005094:	ee08 0a10 	vmov	s16, r0
 8005098:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 800509c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80050a0:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80050a4:	010b      	lsls	r3, r1, #4
 80050a6:	4413      	add	r3, r2
 80050a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050ac:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 80050b0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80050b4:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80050b8:	010b      	lsls	r3, r1, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	fb02 f005 	mul.w	r0, r2, r5
 80050c4:	fb04 f103 	mul.w	r1, r4, r3
 80050c8:	4401      	add	r1, r0
 80050ca:	fba4 2302 	umull	r2, r3, r4, r2
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	4613      	mov	r3, r2
 80050d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	18cb      	adds	r3, r1, r3
 80050d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050de:	f7fb fe6b 	bl	8000db8 <__aeabi_ul2f>
 80050e2:	ee08 0a90 	vmov	s17, r0
 80050e6:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 80050ea:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80050ee:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80050f2:	010b      	lsls	r3, r1, #4
 80050f4:	4413      	add	r3, r2
 80050f6:	3308      	adds	r3, #8
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	f7fb fe5a 	bl	8000db8 <__aeabi_ul2f>
 8005104:	ee07 0a10 	vmov	s14, r0
 8005108:	ed5f 7a26 	vldr	s15, [pc, #-152]	; 8005074 <AoC_Day_06+0x274>
 800510c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005110:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005118:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800511c:	eeb0 0a67 	vmov.f32	s0, s15
 8005120:	f01e fed2 	bl	8023ec8 <sqrtf>
 8005124:	eef0 7a40 	vmov.f32	s15, s0
 8005128:	ee78 7a67 	vsub.f32	s15, s16, s15
 800512c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005134:	ee17 0a90 	vmov	r0, s15
 8005138:	f7fb fa26 	bl	8000588 <__aeabi_f2d>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	ec43 2b10 	vmov	d0, r2, r3
 8005144:	f01e fd20 	bl	8023b88 <ceil>
 8005148:	ec53 2b10 	vmov	r2, r3, d0
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	f7fb fd22 	bl	8000b98 <__aeabi_d2iz>
 8005154:	4603      	mov	r3, r0
 8005156:	17da      	asrs	r2, r3, #31
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	61fa      	str	r2, [r7, #28]
 800515c:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 8005160:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005164:	e9c2 3400 	strd	r3, r4, [r2]
			uint64_t upper = (int32_t)floor(0.5f * (games[index].duration + sqrtf(games[index].duration * games[index].duration - 4.0f * ((float)games[index].distance + 0.001f))));
 8005168:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 800516c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005170:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8005174:	010b      	lsls	r3, r1, #4
 8005176:	4413      	add	r3, r2
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	f7fb fe1a 	bl	8000db8 <__aeabi_ul2f>
 8005184:	ee08 0a10 	vmov	s16, r0
 8005188:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 800518c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005190:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8005194:	010b      	lsls	r3, r1, #4
 8005196:	4413      	add	r3, r2
 8005198:	e9d3 4500 	ldrd	r4, r5, [r3]
 800519c:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 80051a0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80051a4:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80051a8:	010b      	lsls	r3, r1, #4
 80051aa:	4413      	add	r3, r2
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	fb02 f005 	mul.w	r0, r2, r5
 80051b4:	fb04 f103 	mul.w	r1, r4, r3
 80051b8:	4401      	add	r1, r0
 80051ba:	fba4 2302 	umull	r2, r3, r4, r2
 80051be:	647b      	str	r3, [r7, #68]	; 0x44
 80051c0:	4613      	mov	r3, r2
 80051c2:	643b      	str	r3, [r7, #64]	; 0x40
 80051c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c6:	18cb      	adds	r3, r1, r3
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80051ce:	f7fb fdf3 	bl	8000db8 <__aeabi_ul2f>
 80051d2:	ee08 0a90 	vmov	s17, r0
 80051d6:	f897 1597 	ldrb.w	r1, [r7, #1431]	; 0x597
 80051da:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80051de:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80051e2:	010b      	lsls	r3, r1, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	3308      	adds	r3, #8
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	f7fb fde2 	bl	8000db8 <__aeabi_ul2f>
 80051f4:	ee07 0a10 	vmov	s14, r0
 80051f8:	ed5f 7a62 	vldr	s15, [pc, #-392]	; 8005074 <AoC_Day_06+0x274>
 80051fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005200:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005208:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800520c:	eeb0 0a67 	vmov.f32	s0, s15
 8005210:	f01e fe5a 	bl	8023ec8 <sqrtf>
 8005214:	eef0 7a40 	vmov.f32	s15, s0
 8005218:	ee78 7a27 	vadd.f32	s15, s16, s15
 800521c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005224:	ee17 0a90 	vmov	r0, s15
 8005228:	f7fb f9ae 	bl	8000588 <__aeabi_f2d>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	ec43 2b10 	vmov	d0, r2, r3
 8005234:	f01e fd2c 	bl	8023c90 <floor>
 8005238:	ec53 2b10 	vmov	r2, r3, d0
 800523c:	4610      	mov	r0, r2
 800523e:	4619      	mov	r1, r3
 8005240:	f7fb fcaa 	bl	8000b98 <__aeabi_d2iz>
 8005244:	4603      	mov	r3, r0
 8005246:	17da      	asrs	r2, r3, #31
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	617a      	str	r2, [r7, #20]
 800524c:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8005250:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005254:	e9c2 3400 	strd	r3, r4, [r2]
			uint64_t length = upper - lower + 1;
 8005258:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800525c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005260:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	1a84      	subs	r4, r0, r2
 800526a:	62bc      	str	r4, [r7, #40]	; 0x28
 800526c:	eb61 0303 	sbc.w	r3, r1, r3
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005272:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005276:	460b      	mov	r3, r1
 8005278:	3301      	adds	r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	4613      	mov	r3, r2
 800527e:	f143 0300 	adc.w	r3, r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 8005288:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800528c:	e9c2 3400 	strd	r3, r4, [r2]
			mul *= length;
 8005290:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8005294:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8005298:	fb03 f102 	mul.w	r1, r3, r2
 800529c:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80052a0:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	4419      	add	r1, r3
 80052aa:	f8d7 2598 	ldr.w	r2, [r7, #1432]	; 0x598
 80052ae:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80052b2:	fba2 8903 	umull	r8, r9, r2, r3
 80052b6:	eb01 0309 	add.w	r3, r1, r9
 80052ba:	4699      	mov	r9, r3
 80052bc:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80052c0:	e9c3 8900 	strd	r8, r9, [r3]
 80052c4:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80052c8:	e9c3 8900 	strd	r8, r9, [r3]
		for(uint8_t index=0; index<total_games; index++)
 80052cc:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 80052d0:	3301      	adds	r3, #1
 80052d2:	f887 3597 	strb.w	r3, [r7, #1431]	; 0x597
 80052d6:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 80052da:	2200      	movs	r2, #0
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	627a      	str	r2, [r7, #36]	; 0x24
 80052e0:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80052ec:	4621      	mov	r1, r4
 80052ee:	4291      	cmp	r1, r2
 80052f0:	4629      	mov	r1, r5
 80052f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80052f6:	f4ff aebf 	bcc.w	8005078 <AoC_Day_06+0x278>
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %llu\n", mul);
 80052fa:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80052fe:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	497d      	ldr	r1, [pc, #500]	; (80054fc <AoC_Day_06+0x6fc>)
 8005308:	f01a f81e 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800530c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005310:	4618      	mov	r0, r3
 8005312:	f7fa ff7d 	bl	8000210 <strlen>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800531e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005322:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7fb ff83 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 800532e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8005332:	4618      	mov	r0, r3
 8005334:	f018 fa00 	bl	801d738 <f_close>
		sram_clrmem();
 8005338:	f004 ff44 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 800533c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005340:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d10a      	bne.n	8005360 <AoC_Day_06+0x560>
			ret = f_open(&file, "day6t2.txt", FA_READ);
 800534a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800534e:	2201      	movs	r2, #1
 8005350:	496b      	ldr	r1, [pc, #428]	; (8005500 <AoC_Day_06+0x700>)
 8005352:	4618      	mov	r0, r3
 8005354:	f017 fd00 	bl	801cd58 <f_open>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 3596 	strb.w	r3, [r7, #1430]	; 0x596
 800535e:	e009      	b.n	8005374 <AoC_Day_06+0x574>
		else ret = f_open(&file, "day62.txt", FA_READ);
 8005360:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8005364:	2201      	movs	r2, #1
 8005366:	4967      	ldr	r1, [pc, #412]	; (8005504 <AoC_Day_06+0x704>)
 8005368:	4618      	mov	r0, r3
 800536a:	f017 fcf5 	bl	801cd58 <f_open>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3596 	strb.w	r3, [r7, #1430]	; 0x596
		if(ret != FR_OK)
 8005374:	f897 3596 	ldrb.w	r3, [r7, #1430]	; 0x596
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <AoC_Day_06+0x594>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800537c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005380:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2213      	movs	r2, #19
 8005388:	495f      	ldr	r1, [pc, #380]	; (8005508 <AoC_Day_06+0x708>)
 800538a:	4618      	mov	r0, r3
 800538c:	f7fb ff52 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8005390:	2301      	movs	r3, #1
 8005392:	e232      	b.n	80057fa <AoC_Day_06+0x9fa>
		}

		// create games
		Game_t games[20];
		memset(games, 0x00, sizeof(Game_t) * 20);
 8005394:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8005398:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f019 ffae 	bl	801f300 <memset>

		{
			// process duration
			char buffer[256];
			f_gets(buffer, 256, &file);
 80053a4:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80053a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80053ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053b0:	4618      	mov	r0, r3
 80053b2:	f018 fba5 	bl	801db00 <f_gets>

			// tokenize data
			char token_buffer[8][16];
			memset(token_buffer, 0x00, 8 * 16);
 80053b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f019 ff9e 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 80053c4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80053c8:	4950      	ldr	r1, [pc, #320]	; (800550c <AoC_Day_06+0x70c>)
 80053ca:	4618      	mov	r0, r3
 80053cc:	f019 ffec 	bl	801f3a8 <strtok>
 80053d0:	f8c7 0590 	str.w	r0, [r7, #1424]	; 0x590
			uint8_t token_counter = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 358f 	strb.w	r3, [r7, #1423]	; 0x58f
			while(token != NULL && token_counter < 8)
 80053da:	e01b      	b.n	8005414 <AoC_Day_06+0x614>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 80053dc:	f897 358f 	ldrb.w	r3, [r7, #1423]	; 0x58f
 80053e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	18d4      	adds	r4, r2, r3
 80053e8:	f8d7 0590 	ldr.w	r0, [r7, #1424]	; 0x590
 80053ec:	f7fa ff10 	bl	8000210 <strlen>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 80053f8:	4620      	mov	r0, r4
 80053fa:	f019 ff73 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 80053fe:	4943      	ldr	r1, [pc, #268]	; (800550c <AoC_Day_06+0x70c>)
 8005400:	2000      	movs	r0, #0
 8005402:	f019 ffd1 	bl	801f3a8 <strtok>
 8005406:	f8c7 0590 	str.w	r0, [r7, #1424]	; 0x590
				token_counter++;
 800540a:	f897 358f 	ldrb.w	r3, [r7, #1423]	; 0x58f
 800540e:	3301      	adds	r3, #1
 8005410:	f887 358f 	strb.w	r3, [r7, #1423]	; 0x58f
			while(token != NULL && token_counter < 8)
 8005414:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <AoC_Day_06+0x624>
 800541c:	f897 358f 	ldrb.w	r3, [r7, #1423]	; 0x58f
 8005420:	2b07      	cmp	r3, #7
 8005422:	d9db      	bls.n	80053dc <AoC_Day_06+0x5dc>
			}

			// for each token after the first insert to game
			for(uint8_t index=1; index<token_counter; index++)
 8005424:	2301      	movs	r3, #1
 8005426:	f887 358e 	strb.w	r3, [r7, #1422]	; 0x58e
 800542a:	e01c      	b.n	8005466 <AoC_Day_06+0x666>
			{
				games[index - 1].duration = atoll(token_buffer[index]);
 800542c:	f897 358e 	ldrb.w	r3, [r7, #1422]	; 0x58e
 8005430:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4413      	add	r3, r2
 8005438:	4618      	mov	r0, r3
 800543a:	f019 fcc9 	bl	801edd0 <atoll>
 800543e:	4604      	mov	r4, r0
 8005440:	460d      	mov	r5, r1
 8005442:	f897 358e 	ldrb.w	r3, [r7, #1422]	; 0x58e
 8005446:	1e59      	subs	r1, r3, #1
 8005448:	4622      	mov	r2, r4
 800544a:	462b      	mov	r3, r5
 800544c:	f507 60b7 	add.w	r0, r7, #1464	; 0x5b8
 8005450:	f5a0 7078 	sub.w	r0, r0, #992	; 0x3e0
 8005454:	0109      	lsls	r1, r1, #4
 8005456:	4401      	add	r1, r0
 8005458:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t index=1; index<token_counter; index++)
 800545c:	f897 358e 	ldrb.w	r3, [r7, #1422]	; 0x58e
 8005460:	3301      	adds	r3, #1
 8005462:	f887 358e 	strb.w	r3, [r7, #1422]	; 0x58e
 8005466:	f897 258e 	ldrb.w	r2, [r7, #1422]	; 0x58e
 800546a:	f897 358f 	ldrb.w	r3, [r7, #1423]	; 0x58f
 800546e:	429a      	cmp	r2, r3
 8005470:	d3dc      	bcc.n	800542c <AoC_Day_06+0x62c>
		}

		{
			// process distance
			char buffer[256];
			f_gets(buffer, 256, &file);
 8005472:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8005476:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800547a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800547e:	4618      	mov	r0, r3
 8005480:	f018 fb3e 	bl	801db00 <f_gets>

			// tokenize data
			char token_buffer[8][16];
			memset(token_buffer, 0x00, 8 * 16);
 8005484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005488:	2280      	movs	r2, #128	; 0x80
 800548a:	2100      	movs	r1, #0
 800548c:	4618      	mov	r0, r3
 800548e:	f019 ff37 	bl	801f300 <memset>
			char *token = strtok(buffer, " ");
 8005492:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005496:	491d      	ldr	r1, [pc, #116]	; (800550c <AoC_Day_06+0x70c>)
 8005498:	4618      	mov	r0, r3
 800549a:	f019 ff85 	bl	801f3a8 <strtok>
 800549e:	f8c7 0588 	str.w	r0, [r7, #1416]	; 0x588
			uint8_t token_counter = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 3587 	strb.w	r3, [r7, #1415]	; 0x587
			while(token != NULL && token_counter < 8)
 80054a8:	e01b      	b.n	80054e2 <AoC_Day_06+0x6e2>
			{
				memcpy(token_buffer[token_counter], token, strlen(token));
 80054aa:	f897 3587 	ldrb.w	r3, [r7, #1415]	; 0x587
 80054ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	18d4      	adds	r4, r2, r3
 80054b6:	f8d7 0588 	ldr.w	r0, [r7, #1416]	; 0x588
 80054ba:	f7fa fea9 	bl	8000210 <strlen>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 80054c6:	4620      	mov	r0, r4
 80054c8:	f019 ff0c 	bl	801f2e4 <memcpy>
				token = strtok(NULL, " ");
 80054cc:	490f      	ldr	r1, [pc, #60]	; (800550c <AoC_Day_06+0x70c>)
 80054ce:	2000      	movs	r0, #0
 80054d0:	f019 ff6a 	bl	801f3a8 <strtok>
 80054d4:	f8c7 0588 	str.w	r0, [r7, #1416]	; 0x588
				token_counter++;
 80054d8:	f897 3587 	ldrb.w	r3, [r7, #1415]	; 0x587
 80054dc:	3301      	adds	r3, #1
 80054de:	f887 3587 	strb.w	r3, [r7, #1415]	; 0x587
			while(token != NULL && token_counter < 8)
 80054e2:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <AoC_Day_06+0x6f2>
 80054ea:	f897 3587 	ldrb.w	r3, [r7, #1415]	; 0x587
 80054ee:	2b07      	cmp	r3, #7
 80054f0:	d9db      	bls.n	80054aa <AoC_Day_06+0x6aa>
			}

			// for each token after the first insert to game
			for(uint8_t index=1; index<token_counter; index++)
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 3586 	strb.w	r3, [r7, #1414]	; 0x586
 80054f8:	e028      	b.n	800554c <AoC_Day_06+0x74c>
 80054fa:	bf00      	nop
 80054fc:	08024f14 	.word	0x08024f14
 8005500:	08024f30 	.word	0x08024f30
 8005504:	08024f3c 	.word	0x08024f3c
 8005508:	08024ef8 	.word	0x08024ef8
 800550c:	08024f10 	.word	0x08024f10
			{
				games[index - 1].distance = atoll(token_buffer[index]);
 8005510:	f897 3586 	ldrb.w	r3, [r7, #1414]	; 0x586
 8005514:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	4413      	add	r3, r2
 800551c:	4618      	mov	r0, r3
 800551e:	f019 fc57 	bl	801edd0 <atoll>
 8005522:	4604      	mov	r4, r0
 8005524:	460d      	mov	r5, r1
 8005526:	f897 3586 	ldrb.w	r3, [r7, #1414]	; 0x586
 800552a:	1e59      	subs	r1, r3, #1
 800552c:	4622      	mov	r2, r4
 800552e:	462b      	mov	r3, r5
 8005530:	f507 60b7 	add.w	r0, r7, #1464	; 0x5b8
 8005534:	f5a0 7078 	sub.w	r0, r0, #992	; 0x3e0
 8005538:	0109      	lsls	r1, r1, #4
 800553a:	4401      	add	r1, r0
 800553c:	3108      	adds	r1, #8
 800553e:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t index=1; index<token_counter; index++)
 8005542:	f897 3586 	ldrb.w	r3, [r7, #1414]	; 0x586
 8005546:	3301      	adds	r3, #1
 8005548:	f887 3586 	strb.w	r3, [r7, #1414]	; 0x586
 800554c:	f897 2586 	ldrb.w	r2, [r7, #1414]	; 0x586
 8005550:	f897 3587 	ldrb.w	r3, [r7, #1415]	; 0x587
 8005554:	429a      	cmp	r2, r3
 8005556:	d3db      	bcc.n	8005510 <AoC_Day_06+0x710>
			}
		}

		{
			char answer[64];
			sprintf(answer, "Duration: %llu Distance: %llu\n", games[0].duration, games[0].distance);
 8005558:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800555c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005564:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005568:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800556c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005570:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8005574:	e9cd 2300 	strd	r2, r3, [sp]
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	49a6      	ldr	r1, [pc, #664]	; (8005818 <AoC_Day_06+0xa18>)
 800557e:	4620      	mov	r0, r4
 8005580:	f019 fee2 	bl	801f348 <sprintf>
			AdventOfCode_print(config, answer, strlen(answer));
 8005584:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005588:	4618      	mov	r0, r3
 800558a:	f7fa fe41 	bl	8000210 <strlen>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8005596:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800559a:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fb fe47 	bl	8001234 <AdventOfCode_print>
		}

		// calculate the distances
		uint64_t lower = (uint64_t)ceil(0.5 * (games[0].duration - sqrt(games[0].duration * games[0].duration - 4.0 * ((double)games[0].distance + 0.001))));
 80055a6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80055aa:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	4610      	mov	r0, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	f7fb f809 	bl	80005cc <__aeabi_ul2d>
 80055ba:	4680      	mov	r8, r0
 80055bc:	4689      	mov	r9, r1
 80055be:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80055c2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80055ce:	f5a1 7178 	sub.w	r1, r1, #992	; 0x3e0
 80055d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055d6:	fb00 f503 	mul.w	r5, r0, r3
 80055da:	fb02 f401 	mul.w	r4, r2, r1
 80055de:	442c      	add	r4, r5
 80055e0:	fba2 2300 	umull	r2, r3, r2, r0
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e6:	4613      	mov	r3, r2
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	18e3      	adds	r3, r4, r3
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055f4:	f7fa ffea 	bl	80005cc <__aeabi_ul2d>
 80055f8:	4604      	mov	r4, r0
 80055fa:	460d      	mov	r5, r1
 80055fc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8005600:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005604:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	f7fa ffde 	bl	80005cc <__aeabi_ul2d>
 8005610:	a37f      	add	r3, pc, #508	; (adr r3, 8005810 <AoC_Day_06+0xa10>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa fe59 	bl	80002cc <__adddf3>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	4b7d      	ldr	r3, [pc, #500]	; (800581c <AoC_Day_06+0xa1c>)
 8005628:	f7fb f806 	bl	8000638 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4620      	mov	r0, r4
 8005632:	4629      	mov	r1, r5
 8005634:	f7fa fe48 	bl	80002c8 <__aeabi_dsub>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	ec43 2b17 	vmov	d7, r2, r3
 8005640:	eeb0 0a47 	vmov.f32	s0, s14
 8005644:	eef0 0a67 	vmov.f32	s1, s15
 8005648:	f01e fc12 	bl	8023e70 <sqrt>
 800564c:	ec53 2b10 	vmov	r2, r3, d0
 8005650:	4640      	mov	r0, r8
 8005652:	4649      	mov	r1, r9
 8005654:	f7fa fe38 	bl	80002c8 <__aeabi_dsub>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	4b6e      	ldr	r3, [pc, #440]	; (8005820 <AoC_Day_06+0xa20>)
 8005666:	f7fa ffe7 	bl	8000638 <__aeabi_dmul>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	ec43 2b17 	vmov	d7, r2, r3
 8005672:	eeb0 0a47 	vmov.f32	s0, s14
 8005676:	eef0 0a67 	vmov.f32	s1, s15
 800567a:	f01e fa85 	bl	8023b88 <ceil>
 800567e:	ec53 2b10 	vmov	r2, r3, d0
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	f7fb fbf5 	bl	8000e74 <__aeabi_d2ulz>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8005692:	e9c1 2300 	strd	r2, r3, [r1]
		uint64_t upper = (uint64_t)floor(0.5 * (games[0].duration + sqrt(games[0].duration * games[0].duration - 4.0 * ((double)games[0].distance + 0.001))));
 8005696:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800569a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fa ff91 	bl	80005cc <__aeabi_ul2d>
 80056aa:	4680      	mov	r8, r0
 80056ac:	4689      	mov	r9, r1
 80056ae:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80056b2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80056b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056ba:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80056be:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	fb02 f501 	mul.w	r5, r2, r1
 80056ca:	fb00 f403 	mul.w	r4, r0, r3
 80056ce:	442c      	add	r4, r5
 80056d0:	fba0 2302 	umull	r2, r3, r0, r2
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
 80056d6:	4613      	mov	r3, r2
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	18e3      	adds	r3, r4, r3
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
 80056e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80056e4:	f7fa ff72 	bl	80005cc <__aeabi_ul2d>
 80056e8:	4604      	mov	r4, r0
 80056ea:	460d      	mov	r5, r1
 80056ec:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80056f0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80056f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fa ff66 	bl	80005cc <__aeabi_ul2d>
 8005700:	a343      	add	r3, pc, #268	; (adr r3, 8005810 <AoC_Day_06+0xa10>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa fde1 	bl	80002cc <__adddf3>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4610      	mov	r0, r2
 8005710:	4619      	mov	r1, r3
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <AoC_Day_06+0xa1c>)
 8005718:	f7fa ff8e 	bl	8000638 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa fdd0 	bl	80002c8 <__aeabi_dsub>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	ec43 2b17 	vmov	d7, r2, r3
 8005730:	eeb0 0a47 	vmov.f32	s0, s14
 8005734:	eef0 0a67 	vmov.f32	s1, s15
 8005738:	f01e fb9a 	bl	8023e70 <sqrt>
 800573c:	ec53 2b10 	vmov	r2, r3, d0
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fa fdc2 	bl	80002cc <__adddf3>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	4b32      	ldr	r3, [pc, #200]	; (8005820 <AoC_Day_06+0xa20>)
 8005756:	f7fa ff6f 	bl	8000638 <__aeabi_dmul>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	ec43 2b17 	vmov	d7, r2, r3
 8005762:	eeb0 0a47 	vmov.f32	s0, s14
 8005766:	eef0 0a67 	vmov.f32	s1, s15
 800576a:	f01e fa91 	bl	8023c90 <floor>
 800576e:	ec53 2b10 	vmov	r2, r3, d0
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	f7fb fb7d 	bl	8000e74 <__aeabi_d2ulz>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8005782:	e9c1 2300 	strd	r2, r3, [r1]
		uint64_t length = upper - lower + 1;
 8005786:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800578a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800578e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	ebb0 0a02 	subs.w	sl, r0, r2
 800579a:	eb61 0b03 	sbc.w	fp, r1, r3
 800579e:	f11a 0301 	adds.w	r3, sl, #1
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	f14b 0300 	adc.w	r3, fp, #0
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80057ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80057b2:	e9c2 3400 	strd	r3, r4, [r2]

		// output answer
		char answer[64];
		sprintf(answer, "    Part 2 answer: %llu\n", length);
 80057b6:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80057ba:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	4918      	ldr	r1, [pc, #96]	; (8005824 <AoC_Day_06+0xa24>)
 80057c4:	f019 fdc0 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80057c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fa fd1f 	bl	8000210 <strlen>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80057da:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80057de:	f2a3 5361 	subw	r3, r3, #1377	; 0x561
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fb fd25 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80057ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80057ee:	4618      	mov	r0, r3
 80057f0:	f017 ffa2 	bl	801d738 <f_close>
		sram_clrmem();
 80057f4:	f004 fce6 	bl	800a1c4 <sram_clrmem>
	}


	// status code
	return AOC_RETURN_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	f207 57bc 	addw	r7, r7, #1468	; 0x5bc
 8005800:	46bd      	mov	sp, r7
 8005802:	ecbd 8b02 	vpop	{d8}
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	bf00      	nop
 800580c:	f3af 8000 	nop.w
 8005810:	d2f1a9fc 	.word	0xd2f1a9fc
 8005814:	3f50624d 	.word	0x3f50624d
 8005818:	08024f48 	.word	0x08024f48
 800581c:	40100000 	.word	0x40100000
 8005820:	3fe00000 	.word	0x3fe00000
 8005824:	08024f68 	.word	0x08024f68

08005828 <cardValuePart1>:

#include "math.h"
#include "AoC/Days/Day07.h"

uint8_t cardValuePart1(char c)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
	if(c >= '0' && c <= '9')
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	2b2f      	cmp	r3, #47	; 0x2f
 8005836:	d906      	bls.n	8005846 <cardValuePart1+0x1e>
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b39      	cmp	r3, #57	; 0x39
 800583c:	d803      	bhi.n	8005846 <cardValuePart1+0x1e>
		return c - '0';
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	3b30      	subs	r3, #48	; 0x30
 8005842:	b2db      	uxtb	r3, r3
 8005844:	e039      	b.n	80058ba <cardValuePart1+0x92>
	switch(c)
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	3b41      	subs	r3, #65	; 0x41
 800584a:	2b13      	cmp	r3, #19
 800584c:	d834      	bhi.n	80058b8 <cardValuePart1+0x90>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <cardValuePart1+0x2c>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	080058b5 	.word	0x080058b5
 8005858:	080058b9 	.word	0x080058b9
 800585c:	080058b9 	.word	0x080058b9
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058b9 	.word	0x080058b9
 8005868:	080058b9 	.word	0x080058b9
 800586c:	080058b9 	.word	0x080058b9
 8005870:	080058b9 	.word	0x080058b9
 8005874:	080058b9 	.word	0x080058b9
 8005878:	080058a9 	.word	0x080058a9
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058b9 	.word	0x080058b9
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058b9 	.word	0x080058b9
 800588c:	080058b9 	.word	0x080058b9
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058b9 	.word	0x080058b9
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058a5 	.word	0x080058a5
	{
	case 'T': return 10;
 80058a4:	230a      	movs	r3, #10
 80058a6:	e008      	b.n	80058ba <cardValuePart1+0x92>
	case 'J': return 11;
 80058a8:	230b      	movs	r3, #11
 80058aa:	e006      	b.n	80058ba <cardValuePart1+0x92>
	case 'Q': return 12;
 80058ac:	230c      	movs	r3, #12
 80058ae:	e004      	b.n	80058ba <cardValuePart1+0x92>
	case 'K': return 13;
 80058b0:	230d      	movs	r3, #13
 80058b2:	e002      	b.n	80058ba <cardValuePart1+0x92>
	case 'A': return 14;
 80058b4:	230e      	movs	r3, #14
 80058b6:	e000      	b.n	80058ba <cardValuePart1+0x92>
	default: return 0;
 80058b8:	2300      	movs	r3, #0
	};
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <cardValuePart2>:

uint8_t cardValuePart2(char c)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	71fb      	strb	r3, [r7, #7]
	if(c >= '0' && c <= '9')
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	2b2f      	cmp	r3, #47	; 0x2f
 80058d6:	d906      	bls.n	80058e6 <cardValuePart2+0x1e>
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	2b39      	cmp	r3, #57	; 0x39
 80058dc:	d803      	bhi.n	80058e6 <cardValuePart2+0x1e>
		return c - '0';
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	3b30      	subs	r3, #48	; 0x30
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e039      	b.n	800595a <cardValuePart2+0x92>
	switch(c)
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	3b41      	subs	r3, #65	; 0x41
 80058ea:	2b13      	cmp	r3, #19
 80058ec:	d834      	bhi.n	8005958 <cardValuePart2+0x90>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <cardValuePart2+0x2c>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005955 	.word	0x08005955
 80058f8:	08005959 	.word	0x08005959
 80058fc:	08005959 	.word	0x08005959
 8005900:	08005959 	.word	0x08005959
 8005904:	08005959 	.word	0x08005959
 8005908:	08005959 	.word	0x08005959
 800590c:	08005959 	.word	0x08005959
 8005910:	08005959 	.word	0x08005959
 8005914:	08005959 	.word	0x08005959
 8005918:	08005949 	.word	0x08005949
 800591c:	08005951 	.word	0x08005951
 8005920:	08005959 	.word	0x08005959
 8005924:	08005959 	.word	0x08005959
 8005928:	08005959 	.word	0x08005959
 800592c:	08005959 	.word	0x08005959
 8005930:	08005959 	.word	0x08005959
 8005934:	0800594d 	.word	0x0800594d
 8005938:	08005959 	.word	0x08005959
 800593c:	08005959 	.word	0x08005959
 8005940:	08005945 	.word	0x08005945
	{
	case 'T': return 10;
 8005944:	230a      	movs	r3, #10
 8005946:	e008      	b.n	800595a <cardValuePart2+0x92>
	case 'J': return 1; // lowest value
 8005948:	2301      	movs	r3, #1
 800594a:	e006      	b.n	800595a <cardValuePart2+0x92>
	case 'Q': return 12;
 800594c:	230c      	movs	r3, #12
 800594e:	e004      	b.n	800595a <cardValuePart2+0x92>
	case 'K': return 13;
 8005950:	230d      	movs	r3, #13
 8005952:	e002      	b.n	800595a <cardValuePart2+0x92>
	case 'A': return 14;
 8005954:	230e      	movs	r3, #14
 8005956:	e000      	b.n	800595a <cardValuePart2+0x92>
	default: return 0;
 8005958:	2300      	movs	r3, #0
	};
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop

08005968 <swappedHandsPart2>:
	}
	return 0;
}

uint8_t swappedHandsPart2(char *hand0, char *hand1)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0; i<5; i++)
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e020      	b.n	80059ba <swappedHandsPart2+0x52>
	{
		uint8_t card_value_0 = cardValuePart2(hand0[i]);
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ffa1 	bl	80058c8 <cardValuePart2>
 8005986:	4603      	mov	r3, r0
 8005988:	73bb      	strb	r3, [r7, #14]
		uint8_t card_value_1 = cardValuePart2(hand1[i]);
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	4413      	add	r3, r2
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff ff98 	bl	80058c8 <cardValuePart2>
 8005998:	4603      	mov	r3, r0
 800599a:	737b      	strb	r3, [r7, #13]
		if(card_value_0 > card_value_1)
 800599c:	7bba      	ldrb	r2, [r7, #14]
 800599e:	7b7b      	ldrb	r3, [r7, #13]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d901      	bls.n	80059a8 <swappedHandsPart2+0x40>
			return 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e00c      	b.n	80059c2 <swappedHandsPart2+0x5a>
		if(card_value_0 < card_value_1)
 80059a8:	7bba      	ldrb	r2, [r7, #14]
 80059aa:	7b7b      	ldrb	r3, [r7, #13]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d201      	bcs.n	80059b4 <swappedHandsPart2+0x4c>
			return 1;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e006      	b.n	80059c2 <swappedHandsPart2+0x5a>
	for(uint8_t i=0; i<5; i++)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	3301      	adds	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d9db      	bls.n	8005978 <swappedHandsPart2+0x10>
	}
	return 0;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <handValue>:

uint8_t handValue(char *hand)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b088      	sub	sp, #32
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
	// create card counter
	uint8_t card_count[16];
	memset(card_count, 0x00, 16);
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	2210      	movs	r2, #16
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f019 fc90 	bl	801f300 <memset>

	// fill card count
	card_count[cardValuePart1(hand[0])] += 1;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff ff1f 	bl	8005828 <cardValuePart1>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	4613      	mov	r3, r2
 80059f0:	3320      	adds	r3, #32
 80059f2:	443b      	add	r3, r7
 80059f4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80059f8:	4611      	mov	r1, r2
 80059fa:	3301      	adds	r3, #1
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	f101 0320 	add.w	r3, r1, #32
 8005a02:	443b      	add	r3, r7
 8005a04:	f803 2c14 	strb.w	r2, [r3, #-20]
	card_count[cardValuePart1(hand[1])] += 1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff ff0a 	bl	8005828 <cardValuePart1>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	4613      	mov	r3, r2
 8005a1a:	3320      	adds	r3, #32
 8005a1c:	443b      	add	r3, r7
 8005a1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005a22:	4611      	mov	r1, r2
 8005a24:	3301      	adds	r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	f101 0320 	add.w	r3, r1, #32
 8005a2c:	443b      	add	r3, r7
 8005a2e:	f803 2c14 	strb.w	r2, [r3, #-20]
	card_count[cardValuePart1(hand[2])] += 1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3302      	adds	r3, #2
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fef5 	bl	8005828 <cardValuePart1>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	4613      	mov	r3, r2
 8005a44:	3320      	adds	r3, #32
 8005a46:	443b      	add	r3, r7
 8005a48:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	3301      	adds	r3, #1
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	f101 0320 	add.w	r3, r1, #32
 8005a56:	443b      	add	r3, r7
 8005a58:	f803 2c14 	strb.w	r2, [r3, #-20]
	card_count[cardValuePart1(hand[3])] += 1;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3303      	adds	r3, #3
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff fee0 	bl	8005828 <cardValuePart1>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	3320      	adds	r3, #32
 8005a70:	443b      	add	r3, r7
 8005a72:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005a76:	4611      	mov	r1, r2
 8005a78:	3301      	adds	r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	f101 0320 	add.w	r3, r1, #32
 8005a80:	443b      	add	r3, r7
 8005a82:	f803 2c14 	strb.w	r2, [r3, #-20]
	card_count[cardValuePart1(hand[4])] += 1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fecb 	bl	8005828 <cardValuePart1>
 8005a92:	4603      	mov	r3, r0
 8005a94:	461a      	mov	r2, r3
 8005a96:	4613      	mov	r3, r2
 8005a98:	3320      	adds	r3, #32
 8005a9a:	443b      	add	r3, r7
 8005a9c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	f101 0320 	add.w	r3, r1, #32
 8005aaa:	443b      	add	r3, r7
 8005aac:	f803 2c14 	strb.w	r2, [r3, #-20]

	// get highest reward
	for(uint8_t card_type=0; card_type<16; card_type++)
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e057      	b.n	8005b66 <handValue+0x19c>
	{
		// five of a kind
		if(card_count[card_type] == 5)
 8005ab6:	7ffb      	ldrb	r3, [r7, #31]
 8005ab8:	3320      	adds	r3, #32
 8005aba:	443b      	add	r3, r7
 8005abc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005ac0:	2b05      	cmp	r3, #5
 8005ac2:	d101      	bne.n	8005ac8 <handValue+0xfe>
			return 7;
 8005ac4:	2307      	movs	r3, #7
 8005ac6:	e052      	b.n	8005b6e <handValue+0x1a4>

		// four of a kind
		if(card_count[card_type] == 4)
 8005ac8:	7ffb      	ldrb	r3, [r7, #31]
 8005aca:	3320      	adds	r3, #32
 8005acc:	443b      	add	r3, r7
 8005ace:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d101      	bne.n	8005ada <handValue+0x110>
			return 6;
 8005ad6:	2306      	movs	r3, #6
 8005ad8:	e049      	b.n	8005b6e <handValue+0x1a4>

		// full house
		if(card_count[card_type] == 3)
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	3320      	adds	r3, #32
 8005ade:	443b      	add	r3, r7
 8005ae0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d113      	bne.n	8005b10 <handValue+0x146>
		{
			// check for full house
			for(uint8_t card_index=0; card_index<16; card_index++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	77bb      	strb	r3, [r7, #30]
 8005aec:	e00b      	b.n	8005b06 <handValue+0x13c>
				if(card_count[card_index] == 2)
 8005aee:	7fbb      	ldrb	r3, [r7, #30]
 8005af0:	3320      	adds	r3, #32
 8005af2:	443b      	add	r3, r7
 8005af4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d101      	bne.n	8005b00 <handValue+0x136>
					return 5;
 8005afc:	2305      	movs	r3, #5
 8005afe:	e036      	b.n	8005b6e <handValue+0x1a4>
			for(uint8_t card_index=0; card_index<16; card_index++)
 8005b00:	7fbb      	ldrb	r3, [r7, #30]
 8005b02:	3301      	adds	r3, #1
 8005b04:	77bb      	strb	r3, [r7, #30]
 8005b06:	7fbb      	ldrb	r3, [r7, #30]
 8005b08:	2b0f      	cmp	r3, #15
 8005b0a:	d9f0      	bls.n	8005aee <handValue+0x124>

			// three of a kind
			return 4;
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	e02e      	b.n	8005b6e <handValue+0x1a4>
		}

		// pairs
		if(card_count[card_type] == 2)
 8005b10:	7ffb      	ldrb	r3, [r7, #31]
 8005b12:	3320      	adds	r3, #32
 8005b14:	443b      	add	r3, r7
 8005b16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d120      	bne.n	8005b60 <handValue+0x196>
		{
			// check for two pair
			for(uint8_t card_index=0; card_index<16; card_index++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	777b      	strb	r3, [r7, #29]
 8005b22:	e018      	b.n	8005b56 <handValue+0x18c>
			{
				// two pair
				if(card_count[card_index] == 2 && card_index != card_type)
 8005b24:	7f7b      	ldrb	r3, [r7, #29]
 8005b26:	3320      	adds	r3, #32
 8005b28:	443b      	add	r3, r7
 8005b2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d105      	bne.n	8005b3e <handValue+0x174>
 8005b32:	7f7a      	ldrb	r2, [r7, #29]
 8005b34:	7ffb      	ldrb	r3, [r7, #31]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d001      	beq.n	8005b3e <handValue+0x174>
					return 3;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e017      	b.n	8005b6e <handValue+0x1a4>

				// full house
				if(card_count[card_index] == 3)
 8005b3e:	7f7b      	ldrb	r3, [r7, #29]
 8005b40:	3320      	adds	r3, #32
 8005b42:	443b      	add	r3, r7
 8005b44:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d101      	bne.n	8005b50 <handValue+0x186>
					return 5;
 8005b4c:	2305      	movs	r3, #5
 8005b4e:	e00e      	b.n	8005b6e <handValue+0x1a4>
			for(uint8_t card_index=0; card_index<16; card_index++)
 8005b50:	7f7b      	ldrb	r3, [r7, #29]
 8005b52:	3301      	adds	r3, #1
 8005b54:	777b      	strb	r3, [r7, #29]
 8005b56:	7f7b      	ldrb	r3, [r7, #29]
 8005b58:	2b0f      	cmp	r3, #15
 8005b5a:	d9e3      	bls.n	8005b24 <handValue+0x15a>
			}

			// 1 pair
			return 2;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e006      	b.n	8005b6e <handValue+0x1a4>
	for(uint8_t card_type=0; card_type<16; card_type++)
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	3301      	adds	r3, #1
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	2b0f      	cmp	r3, #15
 8005b6a:	d9a4      	bls.n	8005ab6 <handValue+0xec>
		}
	}

	// high card
	return 1;
 8005b6c:	2301      	movs	r3, #1
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <bestRankValue>:

char characters[] = "AKQT98765432";
uint8_t bestRankValue(char *hand)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08c      	sub	sp, #48	; 0x30
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	// get amount of jokers
	uint8_t joker_count = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(uint8_t i=0; i<5; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005b8c:	e010      	b.n	8005bb0 <bestRankValue+0x38>
		if(hand[i] == 'J')
 8005b8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b4a      	cmp	r3, #74	; 0x4a
 8005b9a:	d104      	bne.n	8005ba6 <bestRankValue+0x2e>
			joker_count++;
 8005b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(uint8_t i=0; i<5; i++)
 8005ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005baa:	3301      	adds	r3, #1
 8005bac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d9ea      	bls.n	8005b8e <bestRankValue+0x16>

	// total possible combinations
	char best_hand[6];
	uint8_t best_rank = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint32_t possiblities = powl(12, joker_count);
 8005bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fa fcbe 	bl	8000544 <__aeabi_ui2d>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	ec43 2b11 	vmov	d1, r2, r3
 8005bd0:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8005d98 <bestRankValue+0x220>
 8005bd4:	f01d ffd6 	bl	8023b84 <powl>
 8005bd8:	ec53 2b10 	vmov	r2, r3, d0
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fb f802 	bl	8000be8 <__aeabi_d2uiz>
 8005be4:	4603      	mov	r3, r0
 8005be6:	623b      	str	r3, [r7, #32]
	for(uint32_t posibility=0; posibility<possiblities; posibility++)
 8005be8:	2300      	movs	r3, #0
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bec:	e0c8      	b.n	8005d80 <bestRankValue+0x208>
	{
		// calculate replacement index
		uint8_t replacements[5];
		replacements[0] = posibility % 12;
 8005bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf0:	4b6b      	ldr	r3, [pc, #428]	; (8005da0 <bestRankValue+0x228>)
 8005bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bf6:	08da      	lsrs	r2, r3, #3
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	1aca      	subs	r2, r1, r3
 8005c02:	b2d3      	uxtb	r3, r2
 8005c04:	743b      	strb	r3, [r7, #16]
		replacements[1] = (posibility / 12) % 12;
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	4a65      	ldr	r2, [pc, #404]	; (8005da0 <bestRankValue+0x228>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	08d9      	lsrs	r1, r3, #3
 8005c10:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <bestRankValue+0x228>)
 8005c12:	fba3 2301 	umull	r2, r3, r3, r1
 8005c16:	08da      	lsrs	r2, r3, #3
 8005c18:	4613      	mov	r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	1aca      	subs	r2, r1, r3
 8005c22:	b2d3      	uxtb	r3, r2
 8005c24:	747b      	strb	r3, [r7, #17]
		replacements[2] = (posibility / 144) % 12;
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	4a5e      	ldr	r2, [pc, #376]	; (8005da4 <bestRankValue+0x22c>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0959      	lsrs	r1, r3, #5
 8005c30:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <bestRankValue+0x228>)
 8005c32:	fba3 2301 	umull	r2, r3, r3, r1
 8005c36:	08da      	lsrs	r2, r3, #3
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	1aca      	subs	r2, r1, r3
 8005c42:	b2d3      	uxtb	r3, r2
 8005c44:	74bb      	strb	r3, [r7, #18]
		replacements[3] = (posibility / 1728) % 12;
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	099b      	lsrs	r3, r3, #6
 8005c4a:	4a57      	ldr	r2, [pc, #348]	; (8005da8 <bestRankValue+0x230>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	4619      	mov	r1, r3
 8005c52:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <bestRankValue+0x228>)
 8005c54:	fba3 2301 	umull	r2, r3, r3, r1
 8005c58:	08da      	lsrs	r2, r3, #3
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	1aca      	subs	r2, r1, r3
 8005c64:	b2d3      	uxtb	r3, r2
 8005c66:	74fb      	strb	r3, [r7, #19]
		replacements[4] = (posibility / 20736) % 12;
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	4a50      	ldr	r2, [pc, #320]	; (8005dac <bestRankValue+0x234>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	0b99      	lsrs	r1, r3, #14
 8005c72:	4b4b      	ldr	r3, [pc, #300]	; (8005da0 <bestRankValue+0x228>)
 8005c74:	fba3 2301 	umull	r2, r3, r3, r1
 8005c78:	08da      	lsrs	r2, r3, #3
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	1aca      	subs	r2, r1, r3
 8005c84:	b2d3      	uxtb	r3, r2
 8005c86:	753b      	strb	r3, [r7, #20]

		// replace letters
		char check[6];
		memcpy(check, hand, 6);
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	6810      	ldr	r0, [r2, #0]
 8005c90:	6018      	str	r0, [r3, #0]
 8005c92:	8892      	ldrh	r2, [r2, #4]
 8005c94:	809a      	strh	r2, [r3, #4]
		uint8_t joker_index = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(uint8_t i=0; i<5; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ca2:	e01e      	b.n	8005ce2 <bestRankValue+0x16a>
			if(check[i] == 'J')
 8005ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ca8:	3330      	adds	r3, #48	; 0x30
 8005caa:	443b      	add	r3, r7
 8005cac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005cb0:	2b4a      	cmp	r3, #74	; 0x4a
 8005cb2:	d111      	bne.n	8005cd8 <bestRankValue+0x160>
				check[i] = characters[replacements[joker_index++]];
 8005cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8005cbe:	3330      	adds	r3, #48	; 0x30
 8005cc0:	443b      	add	r3, r7
 8005cc2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ccc:	4a38      	ldr	r2, [pc, #224]	; (8005db0 <bestRankValue+0x238>)
 8005cce:	5c52      	ldrb	r2, [r2, r1]
 8005cd0:	3330      	adds	r3, #48	; 0x30
 8005cd2:	443b      	add	r3, r7
 8005cd4:	f803 2c28 	strb.w	r2, [r3, #-40]
		for(uint8_t i=0; i<5; i++)
 8005cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d9dc      	bls.n	8005ca4 <bestRankValue+0x12c>

		// if first test just copy
		if(!best_rank)
 8005cea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d111      	bne.n	8005d16 <bestRankValue+0x19e>
		{
			memcpy(best_hand, check, 6);
 8005cf2:	f107 0318 	add.w	r3, r7, #24
 8005cf6:	f107 0208 	add.w	r2, r7, #8
 8005cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cfe:	6018      	str	r0, [r3, #0]
 8005d00:	3304      	adds	r3, #4
 8005d02:	8019      	strh	r1, [r3, #0]
			best_rank = handValue(best_hand);
 8005d04:	f107 0318 	add.w	r3, r7, #24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fe5e 	bl	80059ca <handValue>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005d14:	e031      	b.n	8005d7a <bestRankValue+0x202>
			continue;
		}

		// if rank is better
		uint8_t current_rank = handValue(check);
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fe55 	bl	80059ca <handValue>
 8005d20:	4603      	mov	r3, r0
 8005d22:	77fb      	strb	r3, [r7, #31]
		if(current_rank > best_rank)
 8005d24:	7ffa      	ldrb	r2, [r7, #31]
 8005d26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d90c      	bls.n	8005d48 <bestRankValue+0x1d0>
		{
			memcpy(best_hand, check, 6);
 8005d2e:	f107 0318 	add.w	r3, r7, #24
 8005d32:	f107 0208 	add.w	r2, r7, #8
 8005d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d3a:	6018      	str	r0, [r3, #0]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	8019      	strh	r1, [r3, #0]
			best_rank = current_rank;
 8005d40:	7ffb      	ldrb	r3, [r7, #31]
 8005d42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005d46:	e018      	b.n	8005d7a <bestRankValue+0x202>
		}
		else if(current_rank == best_rank && swappedHandsPart2(best_hand, check))
 8005d48:	7ffa      	ldrb	r2, [r7, #31]
 8005d4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d113      	bne.n	8005d7a <bestRankValue+0x202>
 8005d52:	f107 0208 	add.w	r2, r7, #8
 8005d56:	f107 0318 	add.w	r3, r7, #24
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff fe03 	bl	8005968 <swappedHandsPart2>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <bestRankValue+0x202>
		{
			memcpy(best_hand, check, 6);
 8005d68:	f107 0318 	add.w	r3, r7, #24
 8005d6c:	f107 0208 	add.w	r2, r7, #8
 8005d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d74:	6018      	str	r0, [r3, #0]
 8005d76:	3304      	adds	r3, #4
 8005d78:	8019      	strh	r1, [r3, #0]
	for(uint32_t posibility=0; posibility<possiblities; posibility++)
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	f4ff af32 	bcc.w	8005bee <bestRankValue+0x76>
		}
	}
	return best_rank;
 8005d8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3730      	adds	r7, #48	; 0x30
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	40280000 	.word	0x40280000
 8005da0:	aaaaaaab 	.word	0xaaaaaaab
 8005da4:	38e38e39 	.word	0x38e38e39
 8005da8:	097b4261 	.word	0x097b4261
 8005dac:	ca4587e7 	.word	0xca4587e7
 8005db0:	20000000 	.word	0x20000000

08005db4 <AoC_Day_07>:
	uint8_t rank;
	uint32_t subrank;
};

AdventOfCode_return_t AoC_Day_07(AdventOfCode_config_t config)
{
 8005db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db8:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8005dc4:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8005dc8:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8005dca:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8005dce:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <AoC_Day_07+0x2a>
		return AOC_RETURN_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f000 bc47 	b.w	800666c <AoC_Day_07+0x8b8>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8005dde:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8005de2:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d10a      	bne.n	8005e02 <AoC_Day_07+0x4e>
			ret = f_open(&file, "day7t.txt", FA_READ);
 8005dec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005df0:	2201      	movs	r2, #1
 8005df2:	49d5      	ldr	r1, [pc, #852]	; (8006148 <AoC_Day_07+0x394>)
 8005df4:	4618      	mov	r0, r3
 8005df6:	f016 ffaf 	bl	801cd58 <f_open>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
 8005e00:	e009      	b.n	8005e16 <AoC_Day_07+0x62>
		else ret = f_open(&file, "day7.txt", FA_READ);
 8005e02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005e06:	2201      	movs	r2, #1
 8005e08:	49d0      	ldr	r1, [pc, #832]	; (800614c <AoC_Day_07+0x398>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f016 ffa4 	bl	801cd58 <f_open>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
		if(ret != FR_OK)
 8005e16:	f897 33a7 	ldrb.w	r3, [r7, #935]	; 0x3a7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <AoC_Day_07+0x84>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8005e1e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8005e22:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2213      	movs	r2, #19
 8005e2a:	49c9      	ldr	r1, [pc, #804]	; (8006150 <AoC_Day_07+0x39c>)
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fb fa01 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f000 bc1a 	b.w	800666c <AoC_Day_07+0x8b8>
		}

		// creat game hands
		int32_t hand_ptr = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		Hand_t *hands = (Hand_t*)sram_calloc(1024, sizeof(Hand_t));
 8005e3e:	2114      	movs	r1, #20
 8005e40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005e44:	f004 f9a0 	bl	800a188 <sram_calloc>
 8005e48:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368

		// fill hands
		char buffer[128];
		while(f_gets(buffer, 128, &file))
 8005e4c:	e07c      	b.n	8005f48 <AoC_Day_07+0x194>
		{
			char *hand_str = strtok(buffer, " ");
 8005e4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e52:	49c0      	ldr	r1, [pc, #768]	; (8006154 <AoC_Day_07+0x3a0>)
 8005e54:	4618      	mov	r0, r3
 8005e56:	f019 faa7 	bl	801f3a8 <strtok>
 8005e5a:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
			memcpy(hands[hand_ptr].hand, hand_str, 5);
 8005e5e:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005e70:	4413      	add	r3, r2
 8005e72:	2205      	movs	r2, #5
 8005e74:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f019 fa33 	bl	801f2e4 <memcpy>
			hands[hand_ptr].bid = atoi(strtok(NULL, " "));
 8005e7e:	49b5      	ldr	r1, [pc, #724]	; (8006154 <AoC_Day_07+0x3a0>)
 8005e80:	2000      	movs	r0, #0
 8005e82:	f019 fa91 	bl	801f3a8 <strtok>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f018 ff99 	bl	801edc0 <atoi>
 8005e8e:	4601      	mov	r1, r0
 8005e90:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005ea2:	4413      	add	r3, r2
 8005ea4:	460a      	mov	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
			hands[hand_ptr].rank = handValue(hand_str);
 8005ea8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005eba:	189c      	adds	r4, r3, r2
 8005ebc:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 8005ec0:	f7ff fd83 	bl	80059ca <handValue>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	7323      	strb	r3, [r4, #12]
			hands[hand_ptr].subrank =
					cardValuePart1(hand_str[0]) * 65536 +
 8005ec8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff fcaa 	bl	8005828 <cardValuePart1>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	011c      	lsls	r4, r3, #4
					cardValuePart1(hand_str[1]) * 4096 +
 8005ed8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8005edc:	3301      	adds	r3, #1
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fca1 	bl	8005828 <cardValuePart1>
 8005ee6:	4603      	mov	r3, r0
					cardValuePart1(hand_str[0]) * 65536 +
 8005ee8:	4423      	add	r3, r4
					cardValuePart1(hand_str[1]) * 4096 +
 8005eea:	011c      	lsls	r4, r3, #4
					cardValuePart1(hand_str[2]) * 256 +
 8005eec:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8005ef0:	3302      	adds	r3, #2
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fc97 	bl	8005828 <cardValuePart1>
 8005efa:	4603      	mov	r3, r0
					cardValuePart1(hand_str[1]) * 4096 +
 8005efc:	4423      	add	r3, r4
					cardValuePart1(hand_str[2]) * 256 +
 8005efe:	011c      	lsls	r4, r3, #4
					cardValuePart1(hand_str[3]) * 16 +
 8005f00:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8005f04:	3303      	adds	r3, #3
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff fc8d 	bl	8005828 <cardValuePart1>
 8005f0e:	4603      	mov	r3, r0
					cardValuePart1(hand_str[2]) * 256 +
 8005f10:	4423      	add	r3, r4
 8005f12:	011c      	lsls	r4, r3, #4
					cardValuePart1(hand_str[4]);
 8005f14:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8005f18:	3304      	adds	r3, #4
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fc83 	bl	8005828 <cardValuePart1>
 8005f22:	4603      	mov	r3, r0
					cardValuePart1(hand_str[3]) * 16 +
 8005f24:	18e1      	adds	r1, r4, r3
			hands[hand_ptr].subrank =
 8005f26:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005f38:	4413      	add	r3, r2
					cardValuePart1(hand_str[3]) * 16 +
 8005f3a:	460a      	mov	r2, r1
			hands[hand_ptr].subrank =
 8005f3c:	611a      	str	r2, [r3, #16]
			hand_ptr++;
 8005f3e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8005f42:	3301      	adds	r3, #1
 8005f44:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
		while(f_gets(buffer, 128, &file))
 8005f48:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8005f4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	4618      	mov	r0, r3
 8005f54:	f017 fdd4 	bl	801db00 <f_gets>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f47f af77 	bne.w	8005e4e <AoC_Day_07+0x9a>
		}

		// sort hands
		uint32_t timeout = 0xFFFF;
 8005f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f64:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
		while(timeout--)
 8005f68:	e0e5      	b.n	8006136 <AoC_Day_07+0x382>
		{
			// go over each hand
			uint8_t sorted_flag = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
			for(uint16_t hand=0; hand<hand_ptr-1; hand++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8a7 3398 	strh.w	r3, [r7, #920]	; 0x398
 8005f76:	e0d2      	b.n	800611e <AoC_Day_07+0x36a>
			{
				// order is swapped
				if(hands[hand+0].rank < hands[hand+1].rank)
 8005f78:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	461a      	mov	r2, r3
 8005f86:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005f8a:	4413      	add	r3, r2
 8005f8c:	7b19      	ldrb	r1, [r3, #12]
 8005f8e:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005fa2:	4413      	add	r3, r2
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	d241      	bcs.n	800602e <AoC_Day_07+0x27a>
				{
					// swap items
					Hand_t temp = hands[hand+0];
 8005faa:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f507 7452 	add.w	r4, r7, #840	; 0x348
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	6023      	str	r3, [r4, #0]
					hands[hand+0] = hands[hand+1];
 8005fcc:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005fe0:	1899      	adds	r1, r3, r2
 8005fe2:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8005ff4:	4413      	add	r3, r2
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ffe:	682b      	ldr	r3, [r5, #0]
 8006000:	6023      	str	r3, [r4, #0]
					hands[hand+1] = temp;
 8006002:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	461a      	mov	r2, r3
 8006012:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8006016:	4413      	add	r3, r2
 8006018:	461d      	mov	r5, r3
 800601a:	f507 7452 	add.w	r4, r7, #840	; 0x348
 800601e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	602b      	str	r3, [r5, #0]
					sorted_flag = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
 800602c:	e072      	b.n	8006114 <AoC_Day_07+0x360>
				}

				// if the rank is the same value by card order
				else if(hands[hand+0].rank == hands[hand+1].rank && hands[hand+0].subrank < hands[hand+1].subrank)
 800602e:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	461a      	mov	r2, r3
 800603c:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8006040:	4413      	add	r3, r2
 8006042:	7b19      	ldrb	r1, [r3, #12]
 8006044:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	461a      	mov	r2, r3
 8006054:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8006058:	4413      	add	r3, r2
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	4299      	cmp	r1, r3
 800605e:	d159      	bne.n	8006114 <AoC_Day_07+0x360>
 8006060:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8006072:	4413      	add	r3, r2
 8006074:	6919      	ldr	r1, [r3, #16]
 8006076:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	461a      	mov	r2, r3
 8006086:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800608a:	4413      	add	r3, r2
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	4299      	cmp	r1, r3
 8006090:	d240      	bcs.n	8006114 <AoC_Day_07+0x360>
				{
					// swap items
					Hand_t temp = hands[hand+0];
 8006092:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	461a      	mov	r2, r3
 80060a0:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80060a4:	4413      	add	r3, r2
 80060a6:	f507 744d 	add.w	r4, r7, #820	; 0x334
 80060aa:	461d      	mov	r5, r3
 80060ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	6023      	str	r3, [r4, #0]
					hands[hand+0] = hands[hand+1];
 80060b4:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	461a      	mov	r2, r3
 80060c4:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80060c8:	1899      	adds	r1, r3, r2
 80060ca:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80060dc:	4413      	add	r3, r2
 80060de:	461c      	mov	r4, r3
 80060e0:	460d      	mov	r5, r1
 80060e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	6023      	str	r3, [r4, #0]
					hands[hand+1] = temp;
 80060ea:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80060fe:	4413      	add	r3, r2
 8006100:	461d      	mov	r5, r3
 8006102:	f507 744d 	add.w	r4, r7, #820	; 0x334
 8006106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	602b      	str	r3, [r5, #0]
					sorted_flag = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
			for(uint16_t hand=0; hand<hand_ptr-1; hand++)
 8006114:	f8b7 3398 	ldrh.w	r3, [r7, #920]	; 0x398
 8006118:	3301      	adds	r3, #1
 800611a:	f8a7 3398 	strh.w	r3, [r7, #920]	; 0x398
 800611e:	f8b7 2398 	ldrh.w	r2, [r7, #920]	; 0x398
 8006122:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8006126:	3b01      	subs	r3, #1
 8006128:	429a      	cmp	r2, r3
 800612a:	f6ff af25 	blt.w	8005f78 <AoC_Day_07+0x1c4>
				}
			}
			if(sorted_flag)
 800612e:	f897 339b 	ldrb.w	r3, [r7, #923]	; 0x39b
 8006132:	2b00      	cmp	r3, #0
 8006134:	d110      	bne.n	8006158 <AoC_Day_07+0x3a4>
		while(timeout--)
 8006136:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af12 	bne.w	8005f6a <AoC_Day_07+0x1b6>
 8006146:	e008      	b.n	800615a <AoC_Day_07+0x3a6>
 8006148:	08024f84 	.word	0x08024f84
 800614c:	08024f90 	.word	0x08024f90
 8006150:	08024f9c 	.word	0x08024f9c
 8006154:	08024fb4 	.word	0x08024fb4
				break;
 8006158:	bf00      	nop
		}

		// check timeout
		if(!timeout)
 800615a:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <AoC_Day_07+0x3c2>
		{
			AdventOfCode_print(config, "Timeout!\n", strlen("Timeout!\n"));
 8006162:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8006166:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2209      	movs	r2, #9
 800616e:	49c0      	ldr	r1, [pc, #768]	; (8006470 <AoC_Day_07+0x6bc>)
 8006170:	4618      	mov	r0, r3
 8006172:	f7fb f85f 	bl	8001234 <AdventOfCode_print>
		}

		// go over each hand
		uint64_t sum_of_values = 0;
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
		for(int32_t hand=0; hand<hand_ptr; hand++)
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8006188:	e025      	b.n	80061d6 <AoC_Day_07+0x422>
			sum_of_values += hands[hand].bid * (hand_ptr - hand);
 800618a:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	461a      	mov	r2, r3
 8006198:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800619c:	4413      	add	r3, r2
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 80061a4:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80061a8:	1a8a      	subs	r2, r1, r2
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	2200      	movs	r2, #0
 80061b0:	469a      	mov	sl, r3
 80061b2:	4693      	mov	fp, r2
 80061b4:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80061b8:	eb12 010a 	adds.w	r1, r2, sl
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	eb43 030b 	adc.w	r3, r3, fp
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80061c8:	e9c7 34e4 	strd	r3, r4, [r7, #912]	; 0x390
		for(int32_t hand=0; hand<hand_ptr; hand++)
 80061cc:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80061d0:	3301      	adds	r3, #1
 80061d2:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80061d6:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80061da:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80061de:	429a      	cmp	r2, r3
 80061e0:	dbd3      	blt.n	800618a <AoC_Day_07+0x3d6>

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %llu\n", sum_of_values);
 80061e2:	f107 001c 	add.w	r0, r7, #28
 80061e6:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80061ea:	49a2      	ldr	r1, [pc, #648]	; (8006474 <AoC_Day_07+0x6c0>)
 80061ec:	f019 f8ac 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80061f0:	f107 031c 	add.w	r3, r7, #28
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fa f80b 	bl	8000210 <strlen>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	f107 011c 	add.w	r1, r7, #28
 8006202:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8006206:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f7fb f811 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8006212:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006216:	4618      	mov	r0, r3
 8006218:	f017 fa8e 	bl	801d738 <f_close>
		sram_clrmem();
 800621c:	f003 ffd2 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8006220:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8006224:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d10a      	bne.n	8006244 <AoC_Day_07+0x490>
			ret = f_open(&file, "day7t.txt", FA_READ);
 800622e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006232:	2201      	movs	r2, #1
 8006234:	4990      	ldr	r1, [pc, #576]	; (8006478 <AoC_Day_07+0x6c4>)
 8006236:	4618      	mov	r0, r3
 8006238:	f016 fd8e 	bl	801cd58 <f_open>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
 8006242:	e009      	b.n	8006258 <AoC_Day_07+0x4a4>
		else ret = f_open(&file, "day7.txt", FA_READ);
 8006244:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006248:	2201      	movs	r2, #1
 800624a:	498c      	ldr	r1, [pc, #560]	; (800647c <AoC_Day_07+0x6c8>)
 800624c:	4618      	mov	r0, r3
 800624e:	f016 fd83 	bl	801cd58 <f_open>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
		if(ret != FR_OK)
 8006258:	f897 338b 	ldrb.w	r3, [r7, #907]	; 0x38b
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <AoC_Day_07+0x4c4>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8006260:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8006264:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2213      	movs	r2, #19
 800626c:	4984      	ldr	r1, [pc, #528]	; (8006480 <AoC_Day_07+0x6cc>)
 800626e:	4618      	mov	r0, r3
 8006270:	f7fa ffe0 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8006274:	2301      	movs	r3, #1
 8006276:	e1f9      	b.n	800666c <AoC_Day_07+0x8b8>
		}

		// creat game hands
		int32_t hand_ptr = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
		Hand_t *hands = (Hand_t*)sram_calloc(1024, sizeof(Hand_t));
 800627e:	2114      	movs	r1, #20
 8006280:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006284:	f003 ff80 	bl	800a188 <sram_calloc>
 8006288:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364

		// fill hands
		char buffer[128];
		while(f_gets(buffer, 128, &file))
 800628c:	e07c      	b.n	8006388 <AoC_Day_07+0x5d4>
		{
			char *hand_str = strtok(buffer, " ");
 800628e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006292:	497c      	ldr	r1, [pc, #496]	; (8006484 <AoC_Day_07+0x6d0>)
 8006294:	4618      	mov	r0, r3
 8006296:	f019 f887 	bl	801f3a8 <strtok>
 800629a:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
			memcpy(hands[hand_ptr].hand, hand_str, 5);
 800629e:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	461a      	mov	r2, r3
 80062ac:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80062b0:	4413      	add	r3, r2
 80062b2:	2205      	movs	r2, #5
 80062b4:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 80062b8:	4618      	mov	r0, r3
 80062ba:	f019 f813 	bl	801f2e4 <memcpy>
			hands[hand_ptr].bid = atoi(strtok(NULL, " "));
 80062be:	4971      	ldr	r1, [pc, #452]	; (8006484 <AoC_Day_07+0x6d0>)
 80062c0:	2000      	movs	r0, #0
 80062c2:	f019 f871 	bl	801f3a8 <strtok>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f018 fd79 	bl	801edc0 <atoi>
 80062ce:	4601      	mov	r1, r0
 80062d0:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	461a      	mov	r2, r3
 80062de:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80062e2:	4413      	add	r3, r2
 80062e4:	460a      	mov	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
			hands[hand_ptr].rank = bestRankValue(hand_str);
 80062e8:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	461a      	mov	r2, r3
 80062f6:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80062fa:	189c      	adds	r4, r3, r2
 80062fc:	f8d7 0360 	ldr.w	r0, [r7, #864]	; 0x360
 8006300:	f7ff fc3a 	bl	8005b78 <bestRankValue>
 8006304:	4603      	mov	r3, r0
 8006306:	7323      	strb	r3, [r4, #12]
			hands[hand_ptr].subrank =
					cardValuePart2(hand_str[0]) * 65536 +
 8006308:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fada 	bl	80058c8 <cardValuePart2>
 8006314:	4603      	mov	r3, r0
 8006316:	011c      	lsls	r4, r3, #4
					cardValuePart2(hand_str[1]) * 4096 +
 8006318:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800631c:	3301      	adds	r3, #1
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fad1 	bl	80058c8 <cardValuePart2>
 8006326:	4603      	mov	r3, r0
					cardValuePart2(hand_str[0]) * 65536 +
 8006328:	4423      	add	r3, r4
					cardValuePart2(hand_str[1]) * 4096 +
 800632a:	011c      	lsls	r4, r3, #4
					cardValuePart2(hand_str[2]) * 256 +
 800632c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8006330:	3302      	adds	r3, #2
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fac7 	bl	80058c8 <cardValuePart2>
 800633a:	4603      	mov	r3, r0
					cardValuePart2(hand_str[1]) * 4096 +
 800633c:	4423      	add	r3, r4
					cardValuePart2(hand_str[2]) * 256 +
 800633e:	011c      	lsls	r4, r3, #4
					cardValuePart2(hand_str[3]) * 16 +
 8006340:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8006344:	3303      	adds	r3, #3
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fabd 	bl	80058c8 <cardValuePart2>
 800634e:	4603      	mov	r3, r0
					cardValuePart2(hand_str[2]) * 256 +
 8006350:	4423      	add	r3, r4
 8006352:	011c      	lsls	r4, r3, #4
					cardValuePart2(hand_str[4]);
 8006354:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8006358:	3304      	adds	r3, #4
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fab3 	bl	80058c8 <cardValuePart2>
 8006362:	4603      	mov	r3, r0
					cardValuePart2(hand_str[3]) * 16 +
 8006364:	18e1      	adds	r1, r4, r3
			hands[hand_ptr].subrank =
 8006366:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	461a      	mov	r2, r3
 8006374:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006378:	4413      	add	r3, r2
					cardValuePart2(hand_str[3]) * 16 +
 800637a:	460a      	mov	r2, r1
			hands[hand_ptr].subrank =
 800637c:	611a      	str	r2, [r3, #16]
			hand_ptr++;
 800637e:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8006382:	3301      	adds	r3, #1
 8006384:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
		while(f_gets(buffer, 128, &file))
 8006388:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800638c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006390:	2180      	movs	r1, #128	; 0x80
 8006392:	4618      	mov	r0, r3
 8006394:	f017 fbb4 	bl	801db00 <f_gets>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f47f af77 	bne.w	800628e <AoC_Day_07+0x4da>
		}

		// sort hands
		uint32_t timeout = 0xFFFF;
 80063a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063a4:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		while(timeout--)
 80063a8:	e0f2      	b.n	8006590 <AoC_Day_07+0x7dc>
		{
			// go over each hand
			uint8_t sorted_flag = 1;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
			for(uint16_t hand=0; hand<hand_ptr-1; hand++)
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8a7 337c 	strh.w	r3, [r7, #892]	; 0x37c
 80063b6:	e0df      	b.n	8006578 <AoC_Day_07+0x7c4>
			{
				// order is swapped
				if(hands[hand+0].rank < hands[hand+1].rank)
 80063b8:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80063ca:	4413      	add	r3, r2
 80063cc:	7b19      	ldrb	r1, [r3, #12]
 80063ce:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	461a      	mov	r2, r3
 80063de:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80063e2:	4413      	add	r3, r2
 80063e4:	7b1b      	ldrb	r3, [r3, #12]
 80063e6:	4299      	cmp	r1, r3
 80063e8:	d24e      	bcs.n	8006488 <AoC_Day_07+0x6d4>
				{
					// swap items
					Hand_t temp = hands[hand+0];
 80063ea:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	461a      	mov	r2, r3
 80063f8:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80063fc:	4413      	add	r3, r2
 80063fe:	f507 7448 	add.w	r4, r7, #800	; 0x320
 8006402:	461d      	mov	r5, r3
 8006404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	6023      	str	r3, [r4, #0]
					hands[hand+0] = hands[hand+1];
 800640c:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	461a      	mov	r2, r3
 800641c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006420:	1899      	adds	r1, r3, r2
 8006422:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	461a      	mov	r2, r3
 8006430:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006434:	4413      	add	r3, r2
 8006436:	461c      	mov	r4, r3
 8006438:	460d      	mov	r5, r1
 800643a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643e:	682b      	ldr	r3, [r5, #0]
 8006440:	6023      	str	r3, [r4, #0]
					hands[hand+1] = temp;
 8006442:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006456:	4413      	add	r3, r2
 8006458:	461d      	mov	r5, r3
 800645a:	f507 7448 	add.w	r4, r7, #800	; 0x320
 800645e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	602b      	str	r3, [r5, #0]
					sorted_flag = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
 800646c:	e07f      	b.n	800656e <AoC_Day_07+0x7ba>
 800646e:	bf00      	nop
 8006470:	08024fb8 	.word	0x08024fb8
 8006474:	08024fc4 	.word	0x08024fc4
 8006478:	08024f84 	.word	0x08024f84
 800647c:	08024f90 	.word	0x08024f90
 8006480:	08024f9c 	.word	0x08024f9c
 8006484:	08024fb4 	.word	0x08024fb4
				}

				// if the rank is the same value by card order
				else if(hands[hand+0].rank == hands[hand+1].rank && hands[hand+0].subrank < hands[hand+1].subrank)
 8006488:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800649a:	4413      	add	r3, r2
 800649c:	7b19      	ldrb	r1, [r3, #12]
 800649e:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	461a      	mov	r2, r3
 80064ae:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80064b2:	4413      	add	r3, r2
 80064b4:	7b1b      	ldrb	r3, [r3, #12]
 80064b6:	4299      	cmp	r1, r3
 80064b8:	d159      	bne.n	800656e <AoC_Day_07+0x7ba>
 80064ba:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	461a      	mov	r2, r3
 80064c8:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80064cc:	4413      	add	r3, r2
 80064ce:	6919      	ldr	r1, [r3, #16]
 80064d0:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	461a      	mov	r2, r3
 80064e0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80064e4:	4413      	add	r3, r2
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d240      	bcs.n	800656e <AoC_Day_07+0x7ba>
				{
					// swap items
					Hand_t temp = hands[hand+0];
 80064ec:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	461a      	mov	r2, r3
 80064fa:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80064fe:	4413      	add	r3, r2
 8006500:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 8006504:	461d      	mov	r5, r3
 8006506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	6023      	str	r3, [r4, #0]
					hands[hand+0] = hands[hand+1];
 800650e:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	461a      	mov	r2, r3
 800651e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006522:	1899      	adds	r1, r3, r2
 8006524:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	461a      	mov	r2, r3
 8006532:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006536:	4413      	add	r3, r2
 8006538:	461c      	mov	r4, r3
 800653a:	460d      	mov	r5, r1
 800653c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800653e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	6023      	str	r3, [r4, #0]
					hands[hand+1] = temp;
 8006544:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	461a      	mov	r2, r3
 8006554:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8006558:	4413      	add	r3, r2
 800655a:	461d      	mov	r5, r3
 800655c:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 8006560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	602b      	str	r3, [r5, #0]
					sorted_flag = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
			for(uint16_t hand=0; hand<hand_ptr-1; hand++)
 800656e:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8006572:	3301      	adds	r3, #1
 8006574:	f8a7 337c 	strh.w	r3, [r7, #892]	; 0x37c
 8006578:	f8b7 237c 	ldrh.w	r2, [r7, #892]	; 0x37c
 800657c:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8006580:	3b01      	subs	r3, #1
 8006582:	429a      	cmp	r2, r3
 8006584:	f6ff af18 	blt.w	80063b8 <AoC_Day_07+0x604>
				}
			}
			if(sorted_flag)
 8006588:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 800658c:	2b00      	cmp	r3, #0
 800658e:	d108      	bne.n	80065a2 <AoC_Day_07+0x7ee>
		while(timeout--)
 8006590:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f af05 	bne.w	80063aa <AoC_Day_07+0x5f6>
 80065a0:	e000      	b.n	80065a4 <AoC_Day_07+0x7f0>
				break;
 80065a2:	bf00      	nop
		}

		// check timeout
		if(!timeout)
 80065a4:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <AoC_Day_07+0x80c>
		{
			AdventOfCode_print(config, "Timeout!\n", strlen("Timeout!\n"));
 80065ac:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80065b0:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2209      	movs	r2, #9
 80065b8:	492f      	ldr	r1, [pc, #188]	; (8006678 <AoC_Day_07+0x8c4>)
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fa fe3a 	bl	8001234 <AdventOfCode_print>
		}

		// go over each hand
		uint64_t sum_of_values = 0;
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
		for(int32_t hand=0; hand<hand_ptr; hand++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80065d2:	e025      	b.n	8006620 <AoC_Day_07+0x86c>
			sum_of_values += hands[hand].bid * (hand_ptr - hand);
 80065d4:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	461a      	mov	r2, r3
 80065e2:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80065e6:	4413      	add	r3, r2
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 80065ee:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80065f2:	1a8a      	subs	r2, r1, r2
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	2200      	movs	r2, #0
 80065fa:	4698      	mov	r8, r3
 80065fc:	4691      	mov	r9, r2
 80065fe:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8006602:	eb12 0108 	adds.w	r1, r2, r8
 8006606:	6039      	str	r1, [r7, #0]
 8006608:	eb43 0309 	adc.w	r3, r3, r9
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006612:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
		for(int32_t hand=0; hand<hand_ptr; hand++)
 8006616:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800661a:	3301      	adds	r3, #1
 800661c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8006620:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8006624:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8006628:	429a      	cmp	r2, r3
 800662a:	dbd3      	blt.n	80065d4 <AoC_Day_07+0x820>

		// output answer
		char answer[64];
		sprintf(answer, "    Part 2 answer: %llu\n", sum_of_values);
 800662c:	f107 001c 	add.w	r0, r7, #28
 8006630:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8006634:	4911      	ldr	r1, [pc, #68]	; (800667c <AoC_Day_07+0x8c8>)
 8006636:	f018 fe87 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800663a:	f107 031c 	add.w	r3, r7, #28
 800663e:	4618      	mov	r0, r3
 8006640:	f7f9 fde6 	bl	8000210 <strlen>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	f107 011c 	add.w	r1, r7, #28
 800664c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8006650:	f2a3 3391 	subw	r3, r3, #913	; 0x391
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fa fdec 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 800665c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006660:	4618      	mov	r0, r3
 8006662:	f017 f869 	bl	801d738 <f_close>
		sram_clrmem();
 8006666:	f003 fdad 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	f507 776a 	add.w	r7, r7, #936	; 0x3a8
 8006672:	46bd      	mov	sp, r7
 8006674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006678:	08024fb8 	.word	0x08024fb8
 800667c:	08024fe0 	.word	0x08024fe0

08006680 <AoC_Day_08>:
	char right[4];
	uint16_t right_index;
};

AdventOfCode_return_t AoC_Day_08(AdventOfCode_config_t config)
{
 8006680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006684:	f5ad 6ddc 	sub.w	sp, sp, #1760	; 0x6e0
 8006688:	af00      	add	r7, sp, #0
 800668a:	4601      	mov	r1, r0
 800668c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006690:	f2a3 62c1 	subw	r2, r3, #1729	; 0x6c1
 8006694:	460b      	mov	r3, r1
 8006696:	7013      	strb	r3, [r2, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8006698:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800669c:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <AoC_Day_08+0x2c>
		return AOC_RETURN_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f000 bc04 	b.w	8006eb4 <AoC_Day_08+0x834>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80066ac:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80066b0:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d10a      	bne.n	80066d0 <AoC_Day_08+0x50>
			ret = f_open(&file, "day8t.txt", FA_READ);
 80066ba:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80066be:	2201      	movs	r2, #1
 80066c0:	49d7      	ldr	r1, [pc, #860]	; (8006a20 <AoC_Day_08+0x3a0>)
 80066c2:	4618      	mov	r0, r3
 80066c4:	f016 fb48 	bl	801cd58 <f_open>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 36df 	strb.w	r3, [r7, #1759]	; 0x6df
 80066ce:	e009      	b.n	80066e4 <AoC_Day_08+0x64>
		else ret = f_open(&file, "day8.txt", FA_READ);
 80066d0:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80066d4:	2201      	movs	r2, #1
 80066d6:	49d3      	ldr	r1, [pc, #844]	; (8006a24 <AoC_Day_08+0x3a4>)
 80066d8:	4618      	mov	r0, r3
 80066da:	f016 fb3d 	bl	801cd58 <f_open>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 36df 	strb.w	r3, [r7, #1759]	; 0x6df
		if(ret != FR_OK)
 80066e4:	f897 36df 	ldrb.w	r3, [r7, #1759]	; 0x6df
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <AoC_Day_08+0x84>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80066ec:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80066f0:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2213      	movs	r2, #19
 80066f8:	49cb      	ldr	r1, [pc, #812]	; (8006a28 <AoC_Day_08+0x3a8>)
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fa fd9a 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8006700:	2301      	movs	r3, #1
 8006702:	e3d7      	b.n	8006eb4 <AoC_Day_08+0x834>
		}

		// fetch the command string
		char command_buffer[512];
		f_gets(command_buffer, 512, &file);
 8006704:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006708:	f507 7005 	add.w	r0, r7, #532	; 0x214
 800670c:	461a      	mov	r2, r3
 800670e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006712:	f017 f9f5 	bl	801db00 <f_gets>
		uint32_t command_length = strlen(command_buffer) - 1;
 8006716:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800671a:	4618      	mov	r0, r3
 800671c:	f7f9 fd78 	bl	8000210 <strlen>
 8006720:	4603      	mov	r3, r0
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670

		// skip white line
		char buffer[32];
		f_gets(buffer, 32, &file);
 8006728:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800672c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006730:	461a      	mov	r2, r3
 8006732:	2120      	movs	r1, #32
 8006734:	f017 f9e4 	bl	801db00 <f_gets>

		// partse input data
		uint32_t execution_ptr = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
		Execution_t *executions = (Execution_t*)sram_calloc(2000, sizeof(Execution_t));
 800673e:	2110      	movs	r1, #16
 8006740:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006744:	f003 fd20 	bl	800a188 <sram_calloc>
 8006748:	f8c7 066c 	str.w	r0, [r7, #1644]	; 0x66c
		while(f_gets(buffer, 32, &file))
 800674c:	e02e      	b.n	80067ac <AoC_Day_08+0x12c>
		{
			// fetch IDs from input data
			memcpy(executions[execution_ptr].id, buffer, 3);
 800674e:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8006758:	4413      	add	r3, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006760:	2203      	movs	r2, #3
 8006762:	4619      	mov	r1, r3
 8006764:	f018 fdbe 	bl	801f2e4 <memcpy>
			memcpy(executions[execution_ptr].left, buffer + 7, 3);
 8006768:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8006772:	4413      	add	r3, r2
 8006774:	1d18      	adds	r0, r3, #4
 8006776:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800677a:	3307      	adds	r3, #7
 800677c:	2203      	movs	r2, #3
 800677e:	4619      	mov	r1, r3
 8006780:	f018 fdb0 	bl	801f2e4 <memcpy>
			memcpy(executions[execution_ptr].right, buffer + 12, 3);
 8006784:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 800678e:	4413      	add	r3, r2
 8006790:	f103 000a 	add.w	r0, r3, #10
 8006794:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006798:	330c      	adds	r3, #12
 800679a:	2203      	movs	r2, #3
 800679c:	4619      	mov	r1, r3
 800679e:	f018 fda1 	bl	801f2e4 <memcpy>
			execution_ptr++;
 80067a2:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 80067a6:	3301      	adds	r3, #1
 80067a8:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
		while(f_gets(buffer, 32, &file))
 80067ac:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80067b0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80067b4:	461a      	mov	r2, r3
 80067b6:	2120      	movs	r1, #32
 80067b8:	f017 f9a2 	bl	801db00 <f_gets>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1c5      	bne.n	800674e <AoC_Day_08+0xce>
		}

		// process pre process IDs
		for(uint32_t index=0; index<execution_ptr; index++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 80067c8:	e068      	b.n	800689c <AoC_Day_08+0x21c>
		{
			// find left index
			char *left_id = executions[index].left;
 80067ca:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 80067d4:	4413      	add	r3, r2
 80067d6:	3304      	adds	r3, #4
 80067d8:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
			for(uint32_t search=0; search<execution_ptr; search++)
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 80067e2:	e01e      	b.n	8006822 <AoC_Day_08+0x1a2>
			{
				if(!memcmp(left_id, executions[search].id, 3))
 80067e4:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 80067ee:	4413      	add	r3, r2
 80067f0:	2203      	movs	r2, #3
 80067f2:	4619      	mov	r1, r3
 80067f4:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 80067f8:	f018 fd64 	bl	801f2c4 <memcmp>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <AoC_Day_08+0x198>
				{
					executions[index].left_index = search;
 8006802:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 800680c:	441a      	add	r2, r3
 800680e:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8006812:	b29b      	uxth	r3, r3
 8006814:	8113      	strh	r3, [r2, #8]
					break;
 8006816:	e00a      	b.n	800682e <AoC_Day_08+0x1ae>
			for(uint32_t search=0; search<execution_ptr; search++)
 8006818:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 800681c:	3301      	adds	r3, #1
 800681e:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8006822:	f8d7 26d0 	ldr.w	r2, [r7, #1744]	; 0x6d0
 8006826:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800682a:	429a      	cmp	r2, r3
 800682c:	d3da      	bcc.n	80067e4 <AoC_Day_08+0x164>
				}
			}
			// find right marker
			char *right_id = executions[index].right;
 800682e:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8006838:	4413      	add	r3, r2
 800683a:	330a      	adds	r3, #10
 800683c:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
			for(uint32_t search=0; search<execution_ptr; search++)
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8006846:	e01e      	b.n	8006886 <AoC_Day_08+0x206>
			{
				if(!memcmp(right_id, executions[search].id, 3))
 8006848:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8006852:	4413      	add	r3, r2
 8006854:	2203      	movs	r2, #3
 8006856:	4619      	mov	r1, r3
 8006858:	f8d7 0644 	ldr.w	r0, [r7, #1604]	; 0x644
 800685c:	f018 fd32 	bl	801f2c4 <memcmp>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <AoC_Day_08+0x1fc>
				{
					executions[index].right_index = search;
 8006866:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8006870:	441a      	add	r2, r3
 8006872:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 8006876:	b29b      	uxth	r3, r3
 8006878:	81d3      	strh	r3, [r2, #14]
					break;
 800687a:	e00a      	b.n	8006892 <AoC_Day_08+0x212>
			for(uint32_t search=0; search<execution_ptr; search++)
 800687c:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 8006880:	3301      	adds	r3, #1
 8006882:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8006886:	f8d7 26cc 	ldr.w	r2, [r7, #1740]	; 0x6cc
 800688a:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800688e:	429a      	cmp	r2, r3
 8006890:	d3da      	bcc.n	8006848 <AoC_Day_08+0x1c8>
		for(uint32_t index=0; index<execution_ptr; index++)
 8006892:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8006896:	3301      	adds	r3, #1
 8006898:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 800689c:	f8d7 26d4 	ldr.w	r2, [r7, #1748]	; 0x6d4
 80068a0:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d390      	bcc.n	80067ca <AoC_Day_08+0x14a>
				}
			}
		}

		// find end condition index
		uint32_t start_ptr = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
		for(; start_ptr<execution_ptr; start_ptr++)
 80068ae:	e012      	b.n	80068d6 <AoC_Day_08+0x256>
			if(!memcmp("AAA", executions[start_ptr].id, 3))
 80068b0:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 80068ba:	4413      	add	r3, r2
 80068bc:	2203      	movs	r2, #3
 80068be:	4619      	mov	r1, r3
 80068c0:	485a      	ldr	r0, [pc, #360]	; (8006a2c <AoC_Day_08+0x3ac>)
 80068c2:	f018 fcff 	bl	801f2c4 <memcmp>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <AoC_Day_08+0x264>
		for(; start_ptr<execution_ptr; start_ptr++)
 80068cc:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 80068d0:	3301      	adds	r3, #1
 80068d2:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 80068d6:	f8d7 26c8 	ldr.w	r2, [r7, #1736]	; 0x6c8
 80068da:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 80068de:	429a      	cmp	r2, r3
 80068e0:	d3e6      	bcc.n	80068b0 <AoC_Day_08+0x230>
 80068e2:	e000      	b.n	80068e6 <AoC_Day_08+0x266>
				break;
 80068e4:	bf00      	nop

		// find end condition index
		uint32_t end_ptr = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
		for(; end_ptr<execution_ptr; end_ptr++)
 80068ec:	e012      	b.n	8006914 <AoC_Day_08+0x294>
			if(!memcmp("ZZZ", executions[end_ptr].id, 3))
 80068ee:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 80068f8:	4413      	add	r3, r2
 80068fa:	2203      	movs	r2, #3
 80068fc:	4619      	mov	r1, r3
 80068fe:	484c      	ldr	r0, [pc, #304]	; (8006a30 <AoC_Day_08+0x3b0>)
 8006900:	f018 fce0 	bl	801f2c4 <memcmp>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <AoC_Day_08+0x2a2>
		for(; end_ptr<execution_ptr; end_ptr++)
 800690a:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 800690e:	3301      	adds	r3, #1
 8006910:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8006914:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	; 0x6c4
 8006918:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800691c:	429a      	cmp	r2, r3
 800691e:	d3e6      	bcc.n	80068ee <AoC_Day_08+0x26e>
 8006920:	e000      	b.n	8006924 <AoC_Day_08+0x2a4>
				break;
 8006922:	bf00      	nop

		uint32_t instruction_ptr = start_ptr;
 8006924:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 8006928:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		uint32_t counter = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
		while(counter < 0xFFFFFFFF)
 8006932:	e03b      	b.n	80069ac <AoC_Day_08+0x32c>
		{
			// get command
			uint32_t command_index = counter % command_length;
 8006934:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 8006938:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800693c:	fbb1 f2f3 	udiv	r2, r1, r3
 8006940:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	1acb      	subs	r3, r1, r3
 800694a:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
			char c = command_buffer[command_index];
 800694e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006952:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8006956:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800695a:	4413      	add	r3, r2
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f887 3667 	strb.w	r3, [r7, #1639]	; 0x667

			// process data
			if(c == 'R')
 8006962:	f897 3667 	ldrb.w	r3, [r7, #1639]	; 0x667
 8006966:	2b52      	cmp	r3, #82	; 0x52
 8006968:	d108      	bne.n	800697c <AoC_Day_08+0x2fc>
				instruction_ptr = executions[instruction_ptr].right_index;
 800696a:	f8d7 36c0 	ldr.w	r3, [r7, #1728]	; 0x6c0
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 8006974:	4413      	add	r3, r2
 8006976:	89db      	ldrh	r3, [r3, #14]
 8006978:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
			if(c == 'L')
 800697c:	f897 3667 	ldrb.w	r3, [r7, #1639]	; 0x667
 8006980:	2b4c      	cmp	r3, #76	; 0x4c
 8006982:	d108      	bne.n	8006996 <AoC_Day_08+0x316>
				instruction_ptr = executions[instruction_ptr].left_index;
 8006984:	f8d7 36c0 	ldr.w	r3, [r7, #1728]	; 0x6c0
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	f8d7 266c 	ldr.w	r2, [r7, #1644]	; 0x66c
 800698e:	4413      	add	r3, r2
 8006990:	891b      	ldrh	r3, [r3, #8]
 8006992:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
			counter++;
 8006996:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 800699a:	3301      	adds	r3, #1
 800699c:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc

			// check if end
			if(instruction_ptr == end_ptr)
 80069a0:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 80069a4:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d005      	beq.n	80069b8 <AoC_Day_08+0x338>
		while(counter < 0xFFFFFFFF)
 80069ac:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d1be      	bne.n	8006934 <AoC_Day_08+0x2b4>
 80069b6:	e000      	b.n	80069ba <AoC_Day_08+0x33a>
				break;
 80069b8:	bf00      	nop
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %lu\n", counter);
 80069ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80069be:	f8d7 26bc 	ldr.w	r2, [r7, #1724]	; 0x6bc
 80069c2:	491c      	ldr	r1, [pc, #112]	; (8006a34 <AoC_Day_08+0x3b4>)
 80069c4:	4618      	mov	r0, r3
 80069c6:	f018 fcbf 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80069ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7f9 fc1e 	bl	8000210 <strlen>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
 80069d8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80069dc:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80069e0:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fa fc24 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80069ec:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80069f0:	4618      	mov	r0, r3
 80069f2:	f016 fea1 	bl	801d738 <f_close>
		sram_clrmem();
 80069f6:	f003 fbe5 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80069fa:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80069fe:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d119      	bne.n	8006a3c <AoC_Day_08+0x3bc>
			ret = f_open(&file, "day8t2.txt", FA_READ);
 8006a08:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	490a      	ldr	r1, [pc, #40]	; (8006a38 <AoC_Day_08+0x3b8>)
 8006a10:	4618      	mov	r0, r3
 8006a12:	f016 f9a1 	bl	801cd58 <f_open>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 36bb 	strb.w	r3, [r7, #1723]	; 0x6bb
 8006a1c:	e018      	b.n	8006a50 <AoC_Day_08+0x3d0>
 8006a1e:	bf00      	nop
 8006a20:	08024ffc 	.word	0x08024ffc
 8006a24:	08025008 	.word	0x08025008
 8006a28:	08025014 	.word	0x08025014
 8006a2c:	0802502c 	.word	0x0802502c
 8006a30:	08025030 	.word	0x08025030
 8006a34:	08025034 	.word	0x08025034
 8006a38:	0802504c 	.word	0x0802504c
		else ret = f_open(&file, "day8.txt", FA_READ);
 8006a3c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006a40:	2201      	movs	r2, #1
 8006a42:	49b9      	ldr	r1, [pc, #740]	; (8006d28 <AoC_Day_08+0x6a8>)
 8006a44:	4618      	mov	r0, r3
 8006a46:	f016 f987 	bl	801cd58 <f_open>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 36bb 	strb.w	r3, [r7, #1723]	; 0x6bb
		if(ret != FR_OK)
 8006a50:	f897 36bb 	ldrb.w	r3, [r7, #1723]	; 0x6bb
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <AoC_Day_08+0x3f0>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8006a58:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006a5c:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2213      	movs	r2, #19
 8006a64:	49b1      	ldr	r1, [pc, #708]	; (8006d2c <AoC_Day_08+0x6ac>)
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fa fbe4 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e221      	b.n	8006eb4 <AoC_Day_08+0x834>
		}

		// fetch the command string
		char command_buffer[512];
		f_gets(command_buffer, 512, &file);
 8006a70:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006a74:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a7e:	f017 f83f 	bl	801db00 <f_gets>
		uint32_t command_length = strlen(command_buffer) - 1;
 8006a82:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7f9 fbc2 	bl	8000210 <strlen>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

		// skip white line
		char buffer[32];
		f_gets(buffer, 32, &file);
 8006a94:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006a98:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2120      	movs	r1, #32
 8006aa0:	f017 f82e 	bl	801db00 <f_gets>

		// partse input data
		uint32_t execution_ptr = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		Execution_t *executions = (Execution_t*)sram_calloc(2000, sizeof(Execution_t));
 8006aaa:	2110      	movs	r1, #16
 8006aac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006ab0:	f003 fb6a 	bl	800a188 <sram_calloc>
 8006ab4:	f8c7 065c 	str.w	r0, [r7, #1628]	; 0x65c
		while(f_gets(buffer, 32, &file))
 8006ab8:	e02e      	b.n	8006b18 <AoC_Day_08+0x498>
		{
			// fetch IDs from input data
			memcpy(executions[execution_ptr].id, buffer, 3);
 8006aba:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006ac4:	4413      	add	r3, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006acc:	2203      	movs	r2, #3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f018 fc08 	bl	801f2e4 <memcpy>
			memcpy(executions[execution_ptr].left, buffer + 7, 3);
 8006ad4:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006ade:	4413      	add	r3, r2
 8006ae0:	1d18      	adds	r0, r3, #4
 8006ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	2203      	movs	r2, #3
 8006aea:	4619      	mov	r1, r3
 8006aec:	f018 fbfa 	bl	801f2e4 <memcpy>
			memcpy(executions[execution_ptr].right, buffer + 12, 3);
 8006af0:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006afa:	4413      	add	r3, r2
 8006afc:	f103 000a 	add.w	r0, r3, #10
 8006b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b04:	330c      	adds	r3, #12
 8006b06:	2203      	movs	r2, #3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f018 fbeb 	bl	801f2e4 <memcpy>
			execution_ptr++;
 8006b0e:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006b12:	3301      	adds	r3, #1
 8006b14:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		while(f_gets(buffer, 32, &file))
 8006b18:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006b1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b20:	461a      	mov	r2, r3
 8006b22:	2120      	movs	r1, #32
 8006b24:	f016 ffec 	bl	801db00 <f_gets>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1c5      	bne.n	8006aba <AoC_Day_08+0x43a>
		}

		// process pre process IDs
		for(uint32_t index=0; index<execution_ptr; index++)
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
 8006b34:	e068      	b.n	8006c08 <AoC_Day_08+0x588>
		{
			// find left index
			char *left_id = executions[index].left;
 8006b36:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006b40:	4413      	add	r3, r2
 8006b42:	3304      	adds	r3, #4
 8006b44:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
			for(uint32_t search=0; search<execution_ptr; search++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8006b4e:	e01e      	b.n	8006b8e <AoC_Day_08+0x50e>
			{
				if(!memcmp(left_id, executions[search].id, 3))
 8006b50:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006b5a:	4413      	add	r3, r2
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f8d7 0650 	ldr.w	r0, [r7, #1616]	; 0x650
 8006b64:	f018 fbae 	bl	801f2c4 <memcmp>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <AoC_Day_08+0x504>
				{
					executions[index].left_index = search;
 8006b6e:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006b78:	441a      	add	r2, r3
 8006b7a:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	8113      	strh	r3, [r2, #8]
					break;
 8006b82:	e00a      	b.n	8006b9a <AoC_Day_08+0x51a>
			for(uint32_t search=0; search<execution_ptr; search++)
 8006b84:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8006b8e:	f8d7 26ac 	ldr.w	r2, [r7, #1708]	; 0x6ac
 8006b92:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d3da      	bcc.n	8006b50 <AoC_Day_08+0x4d0>
				}
			}
			// find right marker
			char *right_id = executions[index].right;
 8006b9a:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006ba4:	4413      	add	r3, r2
 8006ba6:	330a      	adds	r3, #10
 8006ba8:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
			for(uint32_t search=0; search<execution_ptr; search++)
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
 8006bb2:	e01e      	b.n	8006bf2 <AoC_Day_08+0x572>
			{
				if(!memcmp(right_id, executions[search].id, 3))
 8006bb4:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	; 0x6a8
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006bbe:	4413      	add	r3, r2
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8006bc8:	f018 fb7c 	bl	801f2c4 <memcmp>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <AoC_Day_08+0x568>
				{
					executions[index].right_index = search;
 8006bd2:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006bdc:	441a      	add	r2, r3
 8006bde:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	; 0x6a8
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	81d3      	strh	r3, [r2, #14]
					break;
 8006be6:	e00a      	b.n	8006bfe <AoC_Day_08+0x57e>
			for(uint32_t search=0; search<execution_ptr; search++)
 8006be8:	f8d7 36a8 	ldr.w	r3, [r7, #1704]	; 0x6a8
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
 8006bf2:	f8d7 26a8 	ldr.w	r2, [r7, #1704]	; 0x6a8
 8006bf6:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d3da      	bcc.n	8006bb4 <AoC_Day_08+0x534>
		for(uint32_t index=0; index<execution_ptr; index++)
 8006bfe:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8006c02:	3301      	adds	r3, #1
 8006c04:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
 8006c08:	f8d7 26b0 	ldr.w	r2, [r7, #1712]	; 0x6b0
 8006c0c:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d390      	bcc.n	8006b36 <AoC_Day_08+0x4b6>
				}
			}
		}

		// find end condition index
		uint32_t start_ptrs = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
		uint32_t line_a[100];
		for(uint32_t index=0; index<execution_ptr; index++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 8006c20:	e06c      	b.n	8006cfc <AoC_Day_08+0x67c>
		{
			// abort if not ending on A
			if(executions[index].id[2] != 'A')
 8006c22:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006c2c:	4413      	add	r3, r2
 8006c2e:	789b      	ldrb	r3, [r3, #2]
 8006c30:	2b41      	cmp	r3, #65	; 0x41
 8006c32:	d15d      	bne.n	8006cf0 <AoC_Day_08+0x670>
				continue;

			// find distance till first interaction with Z
			uint32_t start_ptr = index;
 8006c34:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8006c38:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
			uint32_t counter = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
			while(counter < 0xFFFFFFFF)
 8006c42:	e03e      	b.n	8006cc2 <AoC_Day_08+0x642>
			{
				// get command
				uint32_t command_index = counter % command_length;
 8006c44:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 8006c48:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8006c4c:	fbb1 f2f3 	udiv	r2, r1, r3
 8006c50:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	1acb      	subs	r3, r1, r3
 8006c5a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
				char c = command_buffer[command_index];
 8006c5e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006c62:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 8006c66:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8006c6a:	4413      	add	r3, r2
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f887 3657 	strb.w	r3, [r7, #1623]	; 0x657

				// process data
				if(c == 'R')
 8006c72:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006c76:	2b52      	cmp	r3, #82	; 0x52
 8006c78:	d108      	bne.n	8006c8c <AoC_Day_08+0x60c>
					start_ptr = executions[start_ptr].right_index;
 8006c7a:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006c84:	4413      	add	r3, r2
 8006c86:	89db      	ldrh	r3, [r3, #14]
 8006c88:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
				if(c == 'L')
 8006c8c:	f897 3657 	ldrb.w	r3, [r7, #1623]	; 0x657
 8006c90:	2b4c      	cmp	r3, #76	; 0x4c
 8006c92:	d108      	bne.n	8006ca6 <AoC_Day_08+0x626>
					start_ptr = executions[start_ptr].left_index;
 8006c94:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006c9e:	4413      	add	r3, r2
 8006ca0:	891b      	ldrh	r3, [r3, #8]
 8006ca2:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
				counter++;
 8006ca6:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8006caa:	3301      	adds	r3, #1
 8006cac:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698

				// check if end
				if(executions[start_ptr].id[2] == 'Z')
 8006cb0:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8006cba:	4413      	add	r3, r2
 8006cbc:	789b      	ldrb	r3, [r3, #2]
 8006cbe:	2b5a      	cmp	r3, #90	; 0x5a
 8006cc0:	d005      	beq.n	8006cce <AoC_Day_08+0x64e>
			while(counter < 0xFFFFFFFF)
 8006cc2:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d1bb      	bne.n	8006c44 <AoC_Day_08+0x5c4>
 8006ccc:	e000      	b.n	8006cd0 <AoC_Day_08+0x650>
					break;
 8006cce:	bf00      	nop
			}
			// save counter to A
			line_a[start_ptrs] = counter;
 8006cd0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006cd4:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 8006cd8:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 8006cdc:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8006ce0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			start_ptrs++;
 8006ce4:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8006cee:	e000      	b.n	8006cf2 <AoC_Day_08+0x672>
				continue;
 8006cf0:	bf00      	nop
		for(uint32_t index=0; index<execution_ptr; index++)
 8006cf2:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 8006cfc:	f8d7 26a0 	ldr.w	r2, [r7, #1696]	; 0x6a0
 8006d00:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d38c      	bcc.n	8006c22 <AoC_Day_08+0x5a2>
		}

		// match solutions
		uint32_t largest = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
		uint64_t multiple = 1;
 8006d0e:	f04f 0201 	mov.w	r2, #1
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8006d1a:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint8_t line=0; line<start_ptrs; line++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 3687 	strb.w	r3, [r7, #1671]	; 0x687
 8006d24:	e047      	b.n	8006db6 <AoC_Day_08+0x736>
 8006d26:	bf00      	nop
 8006d28:	08025008 	.word	0x08025008
 8006d2c:	08025014 	.word	0x08025014
		{
			if(largest < line_a[line])
 8006d30:	f897 2687 	ldrb.w	r2, [r7, #1671]	; 0x687
 8006d34:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006d38:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d40:	f8d7 2694 	ldr.w	r2, [r7, #1684]	; 0x694
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d209      	bcs.n	8006d5c <AoC_Day_08+0x6dc>
				largest = line_a[line];
 8006d48:	f897 2687 	ldrb.w	r2, [r7, #1671]	; 0x687
 8006d4c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006d50:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d58:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
			multiple *= line_a[line];
 8006d5c:	f897 2687 	ldrb.w	r2, [r7, #1671]	; 0x687
 8006d60:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006d64:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	617a      	str	r2, [r7, #20]
 8006d72:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8006d76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	fb02 f203 	mul.w	r2, r2, r3
 8006d80:	f8d7 3688 	ldr.w	r3, [r7, #1672]	; 0x688
 8006d84:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006d88:	fb01 f303 	mul.w	r3, r1, r3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f8d7 2688 	ldr.w	r2, [r7, #1672]	; 0x688
 8006d92:	6939      	ldr	r1, [r7, #16]
 8006d94:	fba2 4501 	umull	r4, r5, r2, r1
 8006d98:	442b      	add	r3, r5
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006da0:	e9c3 4500 	strd	r4, r5, [r3]
 8006da4:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006da8:	e9c3 4500 	strd	r4, r5, [r3]
		for(uint8_t line=0; line<start_ptrs; line++)
 8006dac:	f897 3687 	ldrb.w	r3, [r7, #1671]	; 0x687
 8006db0:	3301      	adds	r3, #1
 8006db2:	f887 3687 	strb.w	r3, [r7, #1671]	; 0x687
 8006db6:	f897 3687 	ldrb.w	r3, [r7, #1671]	; 0x687
 8006dba:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	; 0x6a4
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d8b6      	bhi.n	8006d30 <AoC_Day_08+0x6b0>
		}

		// 271 is prime multiple
		uint32_t GCD;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8006dc2:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006dc6:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d103      	bne.n	8006dd8 <AoC_Day_08+0x758>
			GCD = 1;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 8006dd6:	e003      	b.n	8006de0 <AoC_Day_08+0x760>
		else
			GCD = 271;
 8006dd8:	f240 130f 	movw	r3, #271	; 0x10f
 8006ddc:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680

		// LCM
		uint64_t lcm_out = line_a[0];
 8006de0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006de4:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8006df4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006df8:	e9c2 3400 	strd	r3, r4, [r2]
		for(uint8_t line=1; line<start_ptrs; line++)
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
 8006e02:	e02f      	b.n	8006e64 <AoC_Day_08+0x7e4>
		{
			lcm_out = (lcm_out * line_a[line]) / GCD;
 8006e04:	f897 2677 	ldrb.w	r2, [r7, #1655]	; 0x677
 8006e08:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006e0c:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e14:	2200      	movs	r2, #0
 8006e16:	469a      	mov	sl, r3
 8006e18:	4693      	mov	fp, r2
 8006e1a:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8006e1e:	fb0b f203 	mul.w	r2, fp, r3
 8006e22:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8006e26:	fb0a f303 	mul.w	r3, sl, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f8d7 2678 	ldr.w	r2, [r7, #1656]	; 0x678
 8006e30:	fba2 890a 	umull	r8, r9, r2, sl
 8006e34:	444b      	add	r3, r9
 8006e36:	4699      	mov	r9, r3
 8006e38:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	60bb      	str	r3, [r7, #8]
 8006e40:	60fa      	str	r2, [r7, #12]
 8006e42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e46:	4640      	mov	r0, r8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f7f9 fffb 	bl	8000e44 <__aeabi_uldivmod>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8006e56:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint8_t line=1; line<start_ptrs; line++)
 8006e5a:	f897 3677 	ldrb.w	r3, [r7, #1655]	; 0x677
 8006e5e:	3301      	adds	r3, #1
 8006e60:	f887 3677 	strb.w	r3, [r7, #1655]	; 0x677
 8006e64:	f897 3677 	ldrb.w	r3, [r7, #1655]	; 0x677
 8006e68:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	; 0x6a4
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d8c9      	bhi.n	8006e04 <AoC_Day_08+0x784>

		// 1658425115 to low

		// output answer
		char answer[64];
		sprintf(answer, "    Part 2 answer: %llu\n", lcm_out);
 8006e70:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8006e74:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	4910      	ldr	r1, [pc, #64]	; (8006ec0 <AoC_Day_08+0x840>)
 8006e7e:	f018 fa63 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8006e82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7f9 f9c2 	bl	8000210 <strlen>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006e94:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006e98:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fa f9c8 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8006ea4:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f016 fc45 	bl	801d738 <f_close>
		sram_clrmem();
 8006eae:	f003 f989 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f507 67dc 	add.w	r7, r7, #1760	; 0x6e0
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec0:	08025058 	.word	0x08025058

08006ec4 <recursion>:
	}
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
}

int32_t recursion(int32_t *sequence, uint32_t sequence_length)
{
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
	// create buffer in memory
	uint32_t diff_sequence_length = sequence_length - 1;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]
	int32_t *diff_sequence = (int32_t*)sram_malloc(sizeof(int32_t) * diff_sequence_length);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f003 f92f 	bl	800a13c <sram_malloc>
 8006ede:	60f8      	str	r0, [r7, #12]

	// fill with deltas
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
 8006ee4:	e013      	b.n	8006f0e <recursion+0x4a>
		diff_sequence[index] = sequence[index + 1] - sequence[index];
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	4403      	add	r3, r0
 8006f04:	1a8a      	subs	r2, r1, r2
 8006f06:	601a      	str	r2, [r3, #0]
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d8e7      	bhi.n	8006ee6 <recursion+0x22>

	// check if all zeros
	uint8_t all_zeros = 1;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75bb      	strb	r3, [r7, #22]
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	757b      	strb	r3, [r7, #21]
 8006f1e:	e00c      	b.n	8006f3a <recursion+0x76>
	{
		if(diff_sequence[index])
 8006f20:	7d7b      	ldrb	r3, [r7, #21]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <recursion+0x70>
		{
			all_zeros = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75bb      	strb	r3, [r7, #22]
			break;
 8006f32:	e006      	b.n	8006f42 <recursion+0x7e>
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006f34:	7d7b      	ldrb	r3, [r7, #21]
 8006f36:	3301      	adds	r3, #1
 8006f38:	757b      	strb	r3, [r7, #21]
 8006f3a:	7d7b      	ldrb	r3, [r7, #21]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d8ee      	bhi.n	8006f20 <recursion+0x5c>
		}
	}

	// end of line
	if(all_zeros)
 8006f42:	7dbb      	ldrb	r3, [r7, #22]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <recursion+0x88>
		return 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e00d      	b.n	8006f68 <recursion+0xa4>

	// do recursion
	return diff_sequence[diff_sequence_length - 1] + recursion(diff_sequence, diff_sequence_length);
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	681c      	ldr	r4, [r3, #0]
 8006f5c:	6939      	ldr	r1, [r7, #16]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7ff ffb0 	bl	8006ec4 <recursion>
 8006f64:	4603      	mov	r3, r0
 8006f66:	4423      	add	r3, r4
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd90      	pop	{r4, r7, pc}

08006f70 <reverseRecursion>:

int32_t reverseRecursion(int32_t *sequence, uint32_t sequence_length)
{
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	// create buffer in memory
	uint32_t diff_sequence_length = sequence_length - 1;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
	int32_t *diff_sequence = (int32_t*)sram_malloc(sizeof(int32_t) * diff_sequence_length);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f003 f8d9 	bl	800a13c <sram_malloc>
 8006f8a:	60f8      	str	r0, [r7, #12]

	// fill with deltas
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75fb      	strb	r3, [r7, #23]
 8006f90:	e013      	b.n	8006fba <reverseRecursion+0x4a>
		diff_sequence[index] = sequence[index + 1] - sequence[index];
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	3301      	adds	r3, #1
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	6819      	ldr	r1, [r3, #0]
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	4403      	add	r3, r0
 8006fb0:	1a8a      	subs	r2, r1, r2
 8006fb2:	601a      	str	r2, [r3, #0]
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	75fb      	strb	r3, [r7, #23]
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d8e7      	bhi.n	8006f92 <reverseRecursion+0x22>

	// check if all zeros
	uint8_t all_zeros = 1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75bb      	strb	r3, [r7, #22]
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	757b      	strb	r3, [r7, #21]
 8006fca:	e00c      	b.n	8006fe6 <reverseRecursion+0x76>
	{
		if(diff_sequence[index])
 8006fcc:	7d7b      	ldrb	r3, [r7, #21]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <reverseRecursion+0x70>
		{
			all_zeros = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75bb      	strb	r3, [r7, #22]
			break;
 8006fde:	e006      	b.n	8006fee <reverseRecursion+0x7e>
	for(uint8_t index=0; index<diff_sequence_length; index++)
 8006fe0:	7d7b      	ldrb	r3, [r7, #21]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	757b      	strb	r3, [r7, #21]
 8006fe6:	7d7b      	ldrb	r3, [r7, #21]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d8ee      	bhi.n	8006fcc <reverseRecursion+0x5c>
		}
	}

	// end of line
	if(all_zeros)
 8006fee:	7dbb      	ldrb	r3, [r7, #22]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <reverseRecursion+0x88>
		return 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e007      	b.n	8007008 <reverseRecursion+0x98>

	// do recursion
	return diff_sequence[0] - reverseRecursion(diff_sequence, diff_sequence_length);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681c      	ldr	r4, [r3, #0]
 8006ffc:	6939      	ldr	r1, [r7, #16]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff ffb6 	bl	8006f70 <reverseRecursion>
 8007004:	4603      	mov	r3, r0
 8007006:	1ae3      	subs	r3, r4, r3
}
 8007008:	4618      	mov	r0, r3
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	bd90      	pop	{r4, r7, pc}

08007010 <AoC_Day_09>:

AdventOfCode_return_t AoC_Day_09(AdventOfCode_config_t config)
{
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 8007018:	af00      	add	r7, sp, #0
 800701a:	4602      	mov	r2, r0
 800701c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007020:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 8007024:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8007026:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800702a:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <AoC_Day_09+0x28>
		return AOC_RETURN_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e1b9      	b.n	80073ac <AoC_Day_09+0x39c>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8007038:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800703c:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d10a      	bne.n	800705c <AoC_Day_09+0x4c>
			ret = f_open(&file, "day9t.txt", FA_READ);
 8007046:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800704a:	2201      	movs	r2, #1
 800704c:	49da      	ldr	r1, [pc, #872]	; (80073b8 <AoC_Day_09+0x3a8>)
 800704e:	4618      	mov	r0, r3
 8007050:	f015 fe82 	bl	801cd58 <f_open>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
 800705a:	e009      	b.n	8007070 <AoC_Day_09+0x60>
		else ret = f_open(&file, "day9.txt", FA_READ);
 800705c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007060:	2201      	movs	r2, #1
 8007062:	49d6      	ldr	r1, [pc, #856]	; (80073bc <AoC_Day_09+0x3ac>)
 8007064:	4618      	mov	r0, r3
 8007066:	f015 fe77 	bl	801cd58 <f_open>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
		if(ret != FR_OK)
 8007070:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <AoC_Day_09+0x80>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8007078:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800707c:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2213      	movs	r2, #19
 8007084:	49ce      	ldr	r1, [pc, #824]	; (80073c0 <AoC_Day_09+0x3b0>)
 8007086:	4618      	mov	r0, r3
 8007088:	f7fa f8d4 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 800708c:	2301      	movs	r3, #1
 800708e:	e18d      	b.n	80073ac <AoC_Day_09+0x39c>
		}

		// for each line
		int64_t answer_value = 0;
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800709c:	e9c1 2300 	strd	r2, r3, [r1]
		char buffer[256];
		while(f_gets(buffer, 256, &file))
 80070a0:	e07e      	b.n	80071a0 <AoC_Day_09+0x190>
		{
			// make token array
			char *tokens[64];
			uint32_t token_counter = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
			char *token = strtok(buffer, " ");
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	49c5      	ldr	r1, [pc, #788]	; (80073c4 <AoC_Day_09+0x3b4>)
 80070ae:	4618      	mov	r0, r3
 80070b0:	f018 f97a 	bl	801f3a8 <strtok>
 80070b4:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
			while(token != NULL)
 80070b8:	e014      	b.n	80070e4 <AoC_Day_09+0xd4>
			{
				tokens[token_counter] = token;
 80070ba:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80070be:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80070c2:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 80070c6:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80070ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				token = strtok(NULL, " ");
 80070ce:	49bd      	ldr	r1, [pc, #756]	; (80073c4 <AoC_Day_09+0x3b4>)
 80070d0:	2000      	movs	r0, #0
 80070d2:	f018 f969 	bl	801f3a8 <strtok>
 80070d6:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
				token_counter++;
 80070da:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
			while(token != NULL)
 80070e4:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e6      	bne.n	80070ba <AoC_Day_09+0xaa>
			}

			// create buffer in memory
			uint32_t sequence_length = token_counter;
 80070ec:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80070f0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
			int32_t *sequence = (int32_t*)sram_malloc(sizeof(int32_t) * sequence_length);
 80070f4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f003 f81e 	bl	800a13c <sram_malloc>
 8007100:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448

			// fill buffer
			for(uint8_t token_index=0; token_index<sequence_length; token_index++)
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 800710a:	e017      	b.n	800713c <AoC_Day_09+0x12c>
				sequence[token_index] = atol(tokens[token_index]);
 800710c:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 8007110:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007114:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8007118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800711c:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8007126:	18d6      	adds	r6, r2, r3
 8007128:	4608      	mov	r0, r1
 800712a:	f017 fe4d 	bl	801edc8 <atol>
 800712e:	4603      	mov	r3, r0
 8007130:	6033      	str	r3, [r6, #0]
			for(uint8_t token_index=0; token_index<sequence_length; token_index++)
 8007132:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8007136:	3301      	adds	r3, #1
 8007138:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 800713c:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8007140:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8007144:	429a      	cmp	r2, r3
 8007146:	d8e1      	bhi.n	800710c <AoC_Day_09+0xfc>

			// test sequence import
			int32_t next_sequence_value = recursion(sequence, sequence_length);
 8007148:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 800714c:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8007150:	f7ff feb8 	bl	8006ec4 <recursion>
 8007154:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
			next_sequence_value += sequence[sequence_length - 1];
 8007158:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800715c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8007168:	4413      	add	r3, r2
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8007170:	4413      	add	r3, r2
 8007172:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			answer_value += next_sequence_value;
 8007176:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800717a:	17da      	asrs	r2, r3, #31
 800717c:	4698      	mov	r8, r3
 800717e:	4691      	mov	r9, r2
 8007180:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	eb12 0108 	adds.w	r1, r2, r8
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	eb43 0309 	adc.w	r3, r3, r9
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8007198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800719c:	e9c1 2300 	strd	r2, r3, [r1]
		while(f_gets(buffer, 256, &file))
 80071a0:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80071a4:	f107 0314 	add.w	r3, r7, #20
 80071a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071ac:	4618      	mov	r0, r3
 80071ae:	f016 fca7 	bl	801db00 <f_gets>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f af74 	bne.w	80070a2 <AoC_Day_09+0x92>
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %llu\n", answer_value);
 80071ba:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80071be:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	4980      	ldr	r1, [pc, #512]	; (80073c8 <AoC_Day_09+0x3b8>)
 80071c8:	f018 f8be 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80071cc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 f81d 	bl	8000210 <strlen>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80071de:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80071e2:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fa f823 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 80071ee:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80071f2:	4618      	mov	r0, r3
 80071f4:	f016 faa0 	bl	801d738 <f_close>
		sram_clrmem();
 80071f8:	f002 ffe4 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80071fc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007200:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d10a      	bne.n	8007220 <AoC_Day_09+0x210>
			ret = f_open(&file, "day9t.txt", FA_READ);
 800720a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800720e:	2201      	movs	r2, #1
 8007210:	4969      	ldr	r1, [pc, #420]	; (80073b8 <AoC_Day_09+0x3a8>)
 8007212:	4618      	mov	r0, r3
 8007214:	f015 fda0 	bl	801cd58 <f_open>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
 800721e:	e009      	b.n	8007234 <AoC_Day_09+0x224>
		else ret = f_open(&file, "day9.txt", FA_READ);
 8007220:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8007224:	2201      	movs	r2, #1
 8007226:	4965      	ldr	r1, [pc, #404]	; (80073bc <AoC_Day_09+0x3ac>)
 8007228:	4618      	mov	r0, r3
 800722a:	f015 fd95 	bl	801cd58 <f_open>
 800722e:	4603      	mov	r3, r0
 8007230:	f887 3476 	strb.w	r3, [r7, #1142]	; 0x476
		if(ret != FR_OK)
 8007234:	f897 3476 	ldrb.w	r3, [r7, #1142]	; 0x476
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <AoC_Day_09+0x244>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800723c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007240:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2213      	movs	r2, #19
 8007248:	495d      	ldr	r1, [pc, #372]	; (80073c0 <AoC_Day_09+0x3b0>)
 800724a:	4618      	mov	r0, r3
 800724c:	f7f9 fff2 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8007250:	2301      	movs	r3, #1
 8007252:	e0ab      	b.n	80073ac <AoC_Day_09+0x39c>
		}

		// for each line
		int64_t answer_value = 0;
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8007260:	e9c1 2300 	strd	r2, r3, [r1]
		char buffer[256];
		while(f_gets(buffer, 256, &file))
 8007264:	e073      	b.n	800734e <AoC_Day_09+0x33e>
		{
			// make token array
			char *tokens[64];
			uint32_t token_counter = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
			char *token = strtok(buffer, " ");
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	4954      	ldr	r1, [pc, #336]	; (80073c4 <AoC_Day_09+0x3b4>)
 8007272:	4618      	mov	r0, r3
 8007274:	f018 f898 	bl	801f3a8 <strtok>
 8007278:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
			while(token != NULL)
 800727c:	e014      	b.n	80072a8 <AoC_Day_09+0x298>
			{
				tokens[token_counter] = token;
 800727e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007282:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8007286:	f8d7 2464 	ldr.w	r2, [r7, #1124]	; 0x464
 800728a:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 800728e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				token = strtok(NULL, " ");
 8007292:	494c      	ldr	r1, [pc, #304]	; (80073c4 <AoC_Day_09+0x3b4>)
 8007294:	2000      	movs	r0, #0
 8007296:	f018 f887 	bl	801f3a8 <strtok>
 800729a:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
				token_counter++;
 800729e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80072a2:	3301      	adds	r3, #1
 80072a4:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
			while(token != NULL)
 80072a8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <AoC_Day_09+0x26e>
			}

			// create buffer in memory
			uint32_t sequence_length = token_counter;
 80072b0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80072b4:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
			int32_t *sequence = (int32_t*)sram_malloc(sizeof(int32_t) * sequence_length);
 80072b8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 ff3c 	bl	800a13c <sram_malloc>
 80072c4:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454

			// fill buffer
			for(uint8_t token_index=0; token_index<sequence_length; token_index++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80072ce:	e017      	b.n	8007300 <AoC_Day_09+0x2f0>
				sequence[token_index] = atol(tokens[token_index]);
 80072d0:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 80072d4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80072d8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80072dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e0:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 80072ea:	18d6      	adds	r6, r2, r3
 80072ec:	4608      	mov	r0, r1
 80072ee:	f017 fd6b 	bl	801edc8 <atol>
 80072f2:	4603      	mov	r3, r0
 80072f4:	6033      	str	r3, [r6, #0]
			for(uint8_t token_index=0; token_index<sequence_length; token_index++)
 80072f6:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80072fa:	3301      	adds	r3, #1
 80072fc:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8007300:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8007304:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8007308:	429a      	cmp	r2, r3
 800730a:	d8e1      	bhi.n	80072d0 <AoC_Day_09+0x2c0>

			// test sequence import
			int32_t next_sequence_value = reverseRecursion(sequence, sequence_length);
 800730c:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8007310:	f8d7 0454 	ldr.w	r0, [r7, #1108]	; 0x454
 8007314:	f7ff fe2c 	bl	8006f70 <reverseRecursion>
 8007318:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
			next_sequence_value -= sequence[0];
 800731c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
			answer_value -= next_sequence_value;
 800732c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8007330:	17da      	asrs	r2, r3, #31
 8007332:	461c      	mov	r4, r3
 8007334:	4615      	mov	r5, r2
 8007336:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	ebb2 0a04 	subs.w	sl, r2, r4
 8007342:	eb63 0b05 	sbc.w	fp, r3, r5
 8007346:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800734a:	e9c3 ab00 	strd	sl, fp, [r3]
		while(f_gets(buffer, 256, &file))
 800734e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8007352:	f107 0314 	add.w	r3, r7, #20
 8007356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800735a:	4618      	mov	r0, r3
 800735c:	f016 fbd0 	bl	801db00 <f_gets>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f47f af7f 	bne.w	8007266 <AoC_Day_09+0x256>
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %lld\n", answer_value);
 8007368:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800736c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	4915      	ldr	r1, [pc, #84]	; (80073cc <AoC_Day_09+0x3bc>)
 8007376:	f017 ffe7 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800737a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800737e:	4618      	mov	r0, r3
 8007380:	f7f8 ff46 	bl	8000210 <strlen>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800738c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007390:	f2a3 4381 	subw	r3, r3, #1153	; 0x481
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7f9 ff4c 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 800739c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80073a0:	4618      	mov	r0, r3
 80073a2:	f016 f9c9 	bl	801d738 <f_close>
		sram_clrmem();
 80073a6:	f002 ff0d 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	f207 4794 	addw	r7, r7, #1172	; 0x494
 80073b2:	46bd      	mov	sp, r7
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	0802508c 	.word	0x0802508c
 80073bc:	08025098 	.word	0x08025098
 80073c0:	080250a4 	.word	0x080250a4
 80073c4:	080250bc 	.word	0x080250bc
 80073c8:	080250c0 	.word	0x080250c0
 80073cc:	080250dc 	.word	0x080250dc

080073d0 <replacementChar>:
};

char *direction_string[] = {"UP", "DOWN", "LEFT", "RIGHT"};

char replacementChar(char c)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
	switch(c)
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b53      	cmp	r3, #83	; 0x53
 80073de:	dc55      	bgt.n	800748c <replacementChar+0xbc>
 80073e0:	2b2d      	cmp	r3, #45	; 0x2d
 80073e2:	db63      	blt.n	80074ac <replacementChar+0xdc>
 80073e4:	3b2d      	subs	r3, #45	; 0x2d
 80073e6:	2b26      	cmp	r3, #38	; 0x26
 80073e8:	d860      	bhi.n	80074ac <replacementChar+0xdc>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <replacementChar+0x20>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007495 	.word	0x08007495
 80073f4:	080074ad 	.word	0x080074ad
 80073f8:	080074ad 	.word	0x080074ad
 80073fc:	080074ad 	.word	0x080074ad
 8007400:	080074ad 	.word	0x080074ad
 8007404:	080074ad 	.word	0x080074ad
 8007408:	080074ad 	.word	0x080074ad
 800740c:	080074ad 	.word	0x080074ad
 8007410:	080074ad 	.word	0x080074ad
 8007414:	080074ad 	.word	0x080074ad
 8007418:	080074a1 	.word	0x080074a1
 800741c:	080074ad 	.word	0x080074ad
 8007420:	080074ad 	.word	0x080074ad
 8007424:	080074ad 	.word	0x080074ad
 8007428:	080074ad 	.word	0x080074ad
 800742c:	080074ad 	.word	0x080074ad
 8007430:	080074ad 	.word	0x080074ad
 8007434:	080074ad 	.word	0x080074ad
 8007438:	080074ad 	.word	0x080074ad
 800743c:	080074ad 	.word	0x080074ad
 8007440:	080074ad 	.word	0x080074ad
 8007444:	080074ad 	.word	0x080074ad
 8007448:	080074ad 	.word	0x080074ad
 800744c:	080074ad 	.word	0x080074ad
 8007450:	080074ad 	.word	0x080074ad
 8007454:	080074a5 	.word	0x080074a5
 8007458:	080074ad 	.word	0x080074ad
 800745c:	080074ad 	.word	0x080074ad
 8007460:	080074ad 	.word	0x080074ad
 8007464:	0800749d 	.word	0x0800749d
 8007468:	080074ad 	.word	0x080074ad
 800746c:	08007499 	.word	0x08007499
 8007470:	080074ad 	.word	0x080074ad
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074ad 	.word	0x080074ad
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074a9 	.word	0x080074a9
 800748c:	2b7c      	cmp	r3, #124	; 0x7c
 800748e:	d10d      	bne.n	80074ac <replacementChar+0xdc>
	{
	case '|': return 'i';
 8007490:	2369      	movs	r3, #105	; 0x69
 8007492:	e00c      	b.n	80074ae <replacementChar+0xde>
	case '-': return '_';
 8007494:	235f      	movs	r3, #95	; 0x5f
 8007496:	e00a      	b.n	80074ae <replacementChar+0xde>
	case 'L': return 'l';
 8007498:	236c      	movs	r3, #108	; 0x6c
 800749a:	e008      	b.n	80074ae <replacementChar+0xde>
	case 'J': return 'j';
 800749c:	236a      	movs	r3, #106	; 0x6a
 800749e:	e006      	b.n	80074ae <replacementChar+0xde>
	case '7': return '?';
 80074a0:	233f      	movs	r3, #63	; 0x3f
 80074a2:	e004      	b.n	80074ae <replacementChar+0xde>
	case 'F': return 'r';
 80074a4:	2372      	movs	r3, #114	; 0x72
 80074a6:	e002      	b.n	80074ae <replacementChar+0xde>
	case 'S': return 'X';
 80074a8:	2358      	movs	r3, #88	; 0x58
 80074aa:	e000      	b.n	80074ae <replacementChar+0xde>
	}
	return '!';
 80074ac:	2321      	movs	r3, #33	; 0x21
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop

080074bc <getMazePosition>:

uint32_t maze_width;
uint32_t maze_depth;
char getMazePosition(char *maze, Position_t position)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	4638      	mov	r0, r7
 80074c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t index = position.y * (maze_width + 1) + position.x;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a08      	ldr	r2, [pc, #32]	; (80074f0 <getMazePosition+0x34>)
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	3201      	adds	r2, #1
 80074d2:	fb03 f202 	mul.w	r2, r3, r2
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	4413      	add	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
	return maze[index];
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	781b      	ldrb	r3, [r3, #0]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	20000b0c 	.word	0x20000b0c

080074f4 <setMazePosition>:

void setMazePosition(char *maze, Position_t position, char c)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	4638      	mov	r0, r7
 80074fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t index = position.y * (maze_width + 1) + position.x;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a09      	ldr	r2, [pc, #36]	; (800752c <setMazePosition+0x38>)
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	3201      	adds	r2, #1
 800750a:	fb03 f202 	mul.w	r2, r3, r2
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
	maze[index] = c;
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	4413      	add	r3, r2
 800751a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800751e:	701a      	strb	r2, [r3, #0]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000b0c 	.word	0x20000b0c

08007530 <getBigMazePosition>:
		HAL_Delay(10);
	}
}

char getBigMazePosition(char *maze, Position_t position)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	4638      	mov	r0, r7
 800753a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t index = position.y * (big_maze_width + 1) + position.x;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <getBigMazePosition+0x34>)
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	3201      	adds	r2, #1
 8007546:	fb03 f202 	mul.w	r2, r3, r2
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	4413      	add	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
	return maze[index];
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4413      	add	r3, r2
 8007556:	781b      	ldrb	r3, [r3, #0]
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	20000b14 	.word	0x20000b14

08007568 <setBigMazePosition>:

void setBigMazePosition(char *maze, Position_t position, char c)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	4638      	mov	r0, r7
 8007572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t index = position.y * (big_maze_width + 1) + position.x;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <setBigMazePosition+0x38>)
 800757a:	6812      	ldr	r2, [r2, #0]
 800757c:	3201      	adds	r2, #1
 800757e:	fb03 f202 	mul.w	r2, r3, r2
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	4413      	add	r3, r2
 8007586:	617b      	str	r3, [r7, #20]
	maze[index] = c;
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007592:	701a      	strb	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000b14 	.word	0x20000b14

080075a4 <getValidDirection>:

Direction_t getValidDirection(char *maze, Position_t position)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b092      	sub	sp, #72	; 0x48
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	4638      	mov	r0, r7
 80075ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(position.y > 0)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01d      	beq.n	80075f4 <getValidDirection+0x50>
	{
		Position_t new_pos = {position.x, position.y-1, 1};
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3b01      	subs	r3, #1
 80075c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075c2:	2301      	movs	r3, #1
 80075c4:	643b      	str	r3, [r7, #64]	; 0x40
		char chr = getMazePosition(maze, new_pos);
 80075c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f7ff ff75 	bl	80074bc <getMazePosition>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if(chr == '|' || chr == '7' || chr == 'F')
 80075d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075dc:	2b7c      	cmp	r3, #124	; 0x7c
 80075de:	d007      	beq.n	80075f0 <getValidDirection+0x4c>
 80075e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075e4:	2b37      	cmp	r3, #55	; 0x37
 80075e6:	d003      	beq.n	80075f0 <getValidDirection+0x4c>
 80075e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075ec:	2b46      	cmp	r3, #70	; 0x46
 80075ee:	d101      	bne.n	80075f4 <getValidDirection+0x50>
			return UP;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e069      	b.n	80076c8 <getValidDirection+0x124>
	}
	if(position.y+1 < maze_depth)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	4b35      	ldr	r3, [pc, #212]	; (80076d0 <getValidDirection+0x12c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d21d      	bcs.n	800763c <getValidDirection+0x98>
	{
		Position_t new_pos = {position.x, position.y+1, 1};
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3301      	adds	r3, #1
 8007608:	633b      	str	r3, [r7, #48]	; 0x30
 800760a:	2301      	movs	r3, #1
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
		char chr = getMazePosition(maze, new_pos);
 800760e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff ff51 	bl	80074bc <getMazePosition>
 800761a:	4603      	mov	r3, r0
 800761c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if(chr == '|' || chr == 'L' || chr == 'J')
 8007620:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007624:	2b7c      	cmp	r3, #124	; 0x7c
 8007626:	d007      	beq.n	8007638 <getValidDirection+0x94>
 8007628:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800762c:	2b4c      	cmp	r3, #76	; 0x4c
 800762e:	d003      	beq.n	8007638 <getValidDirection+0x94>
 8007630:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007634:	2b4a      	cmp	r3, #74	; 0x4a
 8007636:	d101      	bne.n	800763c <getValidDirection+0x98>
			return DOWN;
 8007638:	2301      	movs	r3, #1
 800763a:	e045      	b.n	80076c8 <getValidDirection+0x124>
	}
	if(position.x > 0)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01d      	beq.n	800767e <getValidDirection+0xda>
	{
		Position_t new_pos = {position.x-1, position.y, 1};
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	3b01      	subs	r3, #1
 8007646:	623b      	str	r3, [r7, #32]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
 800764c:	2301      	movs	r3, #1
 800764e:	62bb      	str	r3, [r7, #40]	; 0x28
		char chr = getMazePosition(maze, new_pos);
 8007650:	f107 0320 	add.w	r3, r7, #32
 8007654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff30 	bl	80074bc <getMazePosition>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		if(chr == '|' || chr == 'L' || chr == 'J')
 8007662:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007666:	2b7c      	cmp	r3, #124	; 0x7c
 8007668:	d007      	beq.n	800767a <getValidDirection+0xd6>
 800766a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800766e:	2b4c      	cmp	r3, #76	; 0x4c
 8007670:	d003      	beq.n	800767a <getValidDirection+0xd6>
 8007672:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007676:	2b4a      	cmp	r3, #74	; 0x4a
 8007678:	d101      	bne.n	800767e <getValidDirection+0xda>
			return LEFT;
 800767a:	2302      	movs	r3, #2
 800767c:	e024      	b.n	80076c8 <getValidDirection+0x124>
	}
	if(position.x + 1 < maze_width)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <getValidDirection+0x130>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d21d      	bcs.n	80076c6 <getValidDirection+0x122>
	{
		Position_t new_pos = {position.x+1, position.y, 1};
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	2301      	movs	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
		char chr = getMazePosition(maze, new_pos);
 8007698:	f107 0314 	add.w	r3, r7, #20
 800769c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff ff0c 	bl	80074bc <getMazePosition>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		if(chr == '|' || chr == 'L' || chr == 'J')
 80076aa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80076ae:	2b7c      	cmp	r3, #124	; 0x7c
 80076b0:	d007      	beq.n	80076c2 <getValidDirection+0x11e>
 80076b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80076b6:	2b4c      	cmp	r3, #76	; 0x4c
 80076b8:	d003      	beq.n	80076c2 <getValidDirection+0x11e>
 80076ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80076be:	2b4a      	cmp	r3, #74	; 0x4a
 80076c0:	d101      	bne.n	80076c6 <getValidDirection+0x122>
			return RIGHT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e000      	b.n	80076c8 <getValidDirection+0x124>
	}
	return DERROR;
 80076c6:	2304      	movs	r3, #4
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3748      	adds	r7, #72	; 0x48
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000b10 	.word	0x20000b10
 80076d4:	20000b0c 	.word	0x20000b0c

080076d8 <nextDirection>:

Direction_t nextDirection(char c, Direction_t direction)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	460a      	mov	r2, r1
 80076e2:	71fb      	strb	r3, [r7, #7]
 80076e4:	4613      	mov	r3, r2
 80076e6:	71bb      	strb	r3, [r7, #6]
	switch(direction)
 80076e8:	79bb      	ldrb	r3, [r7, #6]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d84a      	bhi.n	8007784 <nextDirection+0xac>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <nextDirection+0x1c>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007705 	.word	0x08007705
 80076f8:	08007725 	.word	0x08007725
 80076fc:	08007745 	.word	0x08007745
 8007700:	08007765 	.word	0x08007765
	{
	case UP:
		switch(c)
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b7c      	cmp	r3, #124	; 0x7c
 8007708:	d006      	beq.n	8007718 <nextDirection+0x40>
 800770a:	2b7c      	cmp	r3, #124	; 0x7c
 800770c:	dc3c      	bgt.n	8007788 <nextDirection+0xb0>
 800770e:	2b37      	cmp	r3, #55	; 0x37
 8007710:	d006      	beq.n	8007720 <nextDirection+0x48>
 8007712:	2b46      	cmp	r3, #70	; 0x46
 8007714:	d002      	beq.n	800771c <nextDirection+0x44>
		{
		case '|': return UP;
		case 'F': return RIGHT;
		case '7': return LEFT;
		}
		break;
 8007716:	e037      	b.n	8007788 <nextDirection+0xb0>
		case '|': return UP;
 8007718:	2300      	movs	r3, #0
 800771a:	e03d      	b.n	8007798 <nextDirection+0xc0>
		case 'F': return RIGHT;
 800771c:	2303      	movs	r3, #3
 800771e:	e03b      	b.n	8007798 <nextDirection+0xc0>
		case '7': return LEFT;
 8007720:	2302      	movs	r3, #2
 8007722:	e039      	b.n	8007798 <nextDirection+0xc0>
	case DOWN:
		switch(c)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b7c      	cmp	r3, #124	; 0x7c
 8007728:	d006      	beq.n	8007738 <nextDirection+0x60>
 800772a:	2b7c      	cmp	r3, #124	; 0x7c
 800772c:	dc2e      	bgt.n	800778c <nextDirection+0xb4>
 800772e:	2b4a      	cmp	r3, #74	; 0x4a
 8007730:	d006      	beq.n	8007740 <nextDirection+0x68>
 8007732:	2b4c      	cmp	r3, #76	; 0x4c
 8007734:	d002      	beq.n	800773c <nextDirection+0x64>
		{
		case '|': return DOWN;
		case 'L': return RIGHT;
		case 'J': return LEFT;
		}
		break;
 8007736:	e029      	b.n	800778c <nextDirection+0xb4>
		case '|': return DOWN;
 8007738:	2301      	movs	r3, #1
 800773a:	e02d      	b.n	8007798 <nextDirection+0xc0>
		case 'L': return RIGHT;
 800773c:	2303      	movs	r3, #3
 800773e:	e02b      	b.n	8007798 <nextDirection+0xc0>
		case 'J': return LEFT;
 8007740:	2302      	movs	r3, #2
 8007742:	e029      	b.n	8007798 <nextDirection+0xc0>
	case LEFT:
		switch(c)
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b4c      	cmp	r3, #76	; 0x4c
 8007748:	d008      	beq.n	800775c <nextDirection+0x84>
 800774a:	2b4c      	cmp	r3, #76	; 0x4c
 800774c:	dc20      	bgt.n	8007790 <nextDirection+0xb8>
 800774e:	2b2d      	cmp	r3, #45	; 0x2d
 8007750:	d002      	beq.n	8007758 <nextDirection+0x80>
 8007752:	2b46      	cmp	r3, #70	; 0x46
 8007754:	d004      	beq.n	8007760 <nextDirection+0x88>
		{
		case '-': return LEFT;
		case 'L': return UP;
		case 'F': return DOWN;
		}
		break;
 8007756:	e01b      	b.n	8007790 <nextDirection+0xb8>
		case '-': return LEFT;
 8007758:	2302      	movs	r3, #2
 800775a:	e01d      	b.n	8007798 <nextDirection+0xc0>
		case 'L': return UP;
 800775c:	2300      	movs	r3, #0
 800775e:	e01b      	b.n	8007798 <nextDirection+0xc0>
		case 'F': return DOWN;
 8007760:	2301      	movs	r3, #1
 8007762:	e019      	b.n	8007798 <nextDirection+0xc0>
	case RIGHT:
		switch(c)
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	2b4a      	cmp	r3, #74	; 0x4a
 8007768:	d008      	beq.n	800777c <nextDirection+0xa4>
 800776a:	2b4a      	cmp	r3, #74	; 0x4a
 800776c:	dc12      	bgt.n	8007794 <nextDirection+0xbc>
 800776e:	2b2d      	cmp	r3, #45	; 0x2d
 8007770:	d002      	beq.n	8007778 <nextDirection+0xa0>
 8007772:	2b37      	cmp	r3, #55	; 0x37
 8007774:	d004      	beq.n	8007780 <nextDirection+0xa8>
		{
		case '-': return RIGHT;
		case 'J': return UP;
		case '7': return DOWN;
		}
		break;
 8007776:	e00d      	b.n	8007794 <nextDirection+0xbc>
		case '-': return RIGHT;
 8007778:	2303      	movs	r3, #3
 800777a:	e00d      	b.n	8007798 <nextDirection+0xc0>
		case 'J': return UP;
 800777c:	2300      	movs	r3, #0
 800777e:	e00b      	b.n	8007798 <nextDirection+0xc0>
		case '7': return DOWN;
 8007780:	2301      	movs	r3, #1
 8007782:	e009      	b.n	8007798 <nextDirection+0xc0>
	default:
		break;
 8007784:	bf00      	nop
 8007786:	e006      	b.n	8007796 <nextDirection+0xbe>
		break;
 8007788:	bf00      	nop
 800778a:	e004      	b.n	8007796 <nextDirection+0xbe>
		break;
 800778c:	bf00      	nop
 800778e:	e002      	b.n	8007796 <nextDirection+0xbe>
		break;
 8007790:	bf00      	nop
 8007792:	e000      	b.n	8007796 <nextDirection+0xbe>
		break;
 8007794:	bf00      	nop
	}
	return DERROR;
 8007796:	2304      	movs	r3, #4
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <AoC_Day_10>:

AdventOfCode_return_t AoC_Day_10(AdventOfCode_config_t config)
{
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	f5ad 4d3f 	sub.w	sp, sp, #48896	; 0xbf00
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	4602      	mov	r2, r0
 80077b0:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 80077b4:	f6a3 7311 	subw	r3, r3, #3857	; 0xf11
 80077b8:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80077ba:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 80077be:	f6a3 7311 	subw	r3, r3, #3857	; 0xf11
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <AoC_Day_10+0x2a>
		return AOC_RETURN_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	f001 bb2c 	b.w	8008e26 <AoC_Day_10+0x1682>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80077ce:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 80077d2:	f6a3 7311 	subw	r3, r3, #3857	; 0xf11
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d110      	bne.n	80077fe <AoC_Day_10+0x5a>
			ret = f_open(&file, "day10t.txt", FA_READ);
 80077dc:	4ba4      	ldr	r3, [pc, #656]	; (8007a70 <AoC_Day_10+0x2cc>)
 80077de:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80077e2:	f103 0318 	add.w	r3, r3, #24
 80077e6:	443b      	add	r3, r7
 80077e8:	2201      	movs	r2, #1
 80077ea:	49a2      	ldr	r1, [pc, #648]	; (8007a74 <AoC_Day_10+0x2d0>)
 80077ec:	4618      	mov	r0, r3
 80077ee:	f015 fab3 	bl	801cd58 <f_open>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f64b 7217 	movw	r2, #48919	; 0xbf17
 80077f8:	443a      	add	r2, r7
 80077fa:	7013      	strb	r3, [r2, #0]
 80077fc:	e00f      	b.n	800781e <AoC_Day_10+0x7a>
		else ret = f_open(&file, "day10.txt", FA_READ);
 80077fe:	4b9c      	ldr	r3, [pc, #624]	; (8007a70 <AoC_Day_10+0x2cc>)
 8007800:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007804:	f103 0318 	add.w	r3, r3, #24
 8007808:	443b      	add	r3, r7
 800780a:	2201      	movs	r2, #1
 800780c:	499a      	ldr	r1, [pc, #616]	; (8007a78 <AoC_Day_10+0x2d4>)
 800780e:	4618      	mov	r0, r3
 8007810:	f015 faa2 	bl	801cd58 <f_open>
 8007814:	4603      	mov	r3, r0
 8007816:	f64b 7217 	movw	r2, #48919	; 0xbf17
 800781a:	443a      	add	r2, r7
 800781c:	7013      	strb	r3, [r2, #0]
		if(ret != FR_OK)
 800781e:	f64b 7317 	movw	r3, #48919	; 0xbf17
 8007822:	443b      	add	r3, r7
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00c      	beq.n	8007844 <AoC_Day_10+0xa0>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 800782a:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 800782e:	f6a3 7311 	subw	r3, r3, #3857	; 0xf11
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2213      	movs	r2, #19
 8007836:	4991      	ldr	r1, [pc, #580]	; (8007a7c <AoC_Day_10+0x2d8>)
 8007838:	4618      	mov	r0, r3
 800783a:	f7f9 fcfb 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 800783e:	2301      	movs	r3, #1
 8007840:	f001 baf1 	b.w	8008e26 <AoC_Day_10+0x1682>
		}

		// get file length
		int32_t file_size = f_size(&file);
 8007844:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8007848:	f6a3 439c 	subw	r3, r3, #3228	; 0xc9c
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f64b 62d0 	movw	r2, #48848	; 0xbed0
 8007852:	443a      	add	r2, r7
 8007854:	6013      	str	r3, [r2, #0]

		// extract data
		char *maze = (char*)sram_malloc(file_size + 1);
 8007856:	f64b 63d0 	movw	r3, #48848	; 0xbed0
 800785a:	443b      	add	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	4618      	mov	r0, r3
 8007862:	f002 fc6b 	bl	800a13c <sram_malloc>
 8007866:	f64b 63cc 	movw	r3, #48844	; 0xbecc
 800786a:	443b      	add	r3, r7
 800786c:	6018      	str	r0, [r3, #0]

		// insert data
		f_read(&file, maze, file_size + 1, NULL);
 800786e:	f64b 63d0 	movw	r3, #48848	; 0xbed0
 8007872:	443b      	add	r3, r7
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3301      	adds	r3, #1
 8007878:	461a      	mov	r2, r3
 800787a:	487d      	ldr	r0, [pc, #500]	; (8007a70 <AoC_Day_10+0x2cc>)
 800787c:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8007880:	4403      	add	r3, r0
 8007882:	19d8      	adds	r0, r3, r7
 8007884:	2300      	movs	r3, #0
 8007886:	f64b 61cc 	movw	r1, #48844	; 0xbecc
 800788a:	4439      	add	r1, r7
 800788c:	6809      	ldr	r1, [r1, #0]
 800788e:	f015 fc21 	bl	801d0d4 <f_read>

		// close file
		f_close(&file);
 8007892:	4b77      	ldr	r3, [pc, #476]	; (8007a70 <AoC_Day_10+0x2cc>)
 8007894:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007898:	f103 0318 	add.w	r3, r3, #24
 800789c:	443b      	add	r3, r7
 800789e:	4618      	mov	r0, r3
 80078a0:	f015 ff4a 	bl	801d738 <f_close>

		// get maze dimensions and insert line ends
		char *token = strtok(maze, "\n");
 80078a4:	4976      	ldr	r1, [pc, #472]	; (8007a80 <AoC_Day_10+0x2dc>)
 80078a6:	f64b 63cc 	movw	r3, #48844	; 0xbecc
 80078aa:	443b      	add	r3, r7
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f017 fd7b 	bl	801f3a8 <strtok>
 80078b2:	f64b 63c8 	movw	r3, #48840	; 0xbec8
 80078b6:	443b      	add	r3, r7
 80078b8:	6018      	str	r0, [r3, #0]
		maze_width = strlen(token);
 80078ba:	f64b 63c8 	movw	r3, #48840	; 0xbec8
 80078be:	443b      	add	r3, r7
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f7f8 fca5 	bl	8000210 <strlen>
 80078c6:	4603      	mov	r3, r0
 80078c8:	4a6e      	ldr	r2, [pc, #440]	; (8007a84 <AoC_Day_10+0x2e0>)
 80078ca:	6013      	str	r3, [r2, #0]
		uint32_t counter = 1;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f64b 7210 	movw	r2, #48912	; 0xbf10
 80078d2:	443a      	add	r2, r7
 80078d4:	6013      	str	r3, [r2, #0]
		while(strtok(NULL, "\n"))
 80078d6:	e008      	b.n	80078ea <AoC_Day_10+0x146>
			counter++;
 80078d8:	f64b 7310 	movw	r3, #48912	; 0xbf10
 80078dc:	443b      	add	r3, r7
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3301      	adds	r3, #1
 80078e2:	f64b 7210 	movw	r2, #48912	; 0xbf10
 80078e6:	443a      	add	r2, r7
 80078e8:	6013      	str	r3, [r2, #0]
		while(strtok(NULL, "\n"))
 80078ea:	4965      	ldr	r1, [pc, #404]	; (8007a80 <AoC_Day_10+0x2dc>)
 80078ec:	2000      	movs	r0, #0
 80078ee:	f017 fd5b 	bl	801f3a8 <strtok>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1ef      	bne.n	80078d8 <AoC_Day_10+0x134>
		maze_depth = counter;
 80078f8:	4a63      	ldr	r2, [pc, #396]	; (8007a88 <AoC_Day_10+0x2e4>)
 80078fa:	f64b 7310 	movw	r3, #48912	; 0xbf10
 80078fe:	443b      	add	r3, r7
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6013      	str	r3, [r2, #0]

		// locate start position
		Position_t start = {0, 0, 0};
 8007904:	2300      	movs	r3, #0
 8007906:	f64b 628c 	movw	r2, #48780	; 0xbe8c
 800790a:	443a      	add	r2, r7
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	2300      	movs	r3, #0
 8007910:	f64b 6290 	movw	r2, #48784	; 0xbe90
 8007914:	443a      	add	r2, r7
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	2300      	movs	r3, #0
 800791a:	f64b 6294 	movw	r2, #48788	; 0xbe94
 800791e:	443a      	add	r2, r7
 8007920:	6013      	str	r3, [r2, #0]
		for(start.y=0; start.y<maze_depth; start.y++)
 8007922:	2300      	movs	r3, #0
 8007924:	f64b 6290 	movw	r2, #48784	; 0xbe90
 8007928:	443a      	add	r2, r7
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	e03d      	b.n	80079aa <AoC_Day_10+0x206>
		{
			uint8_t located = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	f64b 720f 	movw	r2, #48911	; 0xbf0f
 8007934:	443a      	add	r2, r7
 8007936:	7013      	strb	r3, [r2, #0]
			for(start.x=0; start.x<maze_width; start.x++)
 8007938:	2300      	movs	r3, #0
 800793a:	f64b 628c 	movw	r2, #48780	; 0xbe8c
 800793e:	443a      	add	r2, r7
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	e01b      	b.n	800797c <AoC_Day_10+0x1d8>
			{
				if(getMazePosition(maze, start) == 'S')
 8007944:	f64b 638c 	movw	r3, #48780	; 0xbe8c
 8007948:	443b      	add	r3, r7
 800794a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800794c:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007950:	4438      	add	r0, r7
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	f7ff fdb2 	bl	80074bc <getMazePosition>
 8007958:	4603      	mov	r3, r0
 800795a:	2b53      	cmp	r3, #83	; 0x53
 800795c:	d105      	bne.n	800796a <AoC_Day_10+0x1c6>
				{
					located = 1;
 800795e:	2301      	movs	r3, #1
 8007960:	f64b 720f 	movw	r2, #48911	; 0xbf0f
 8007964:	443a      	add	r2, r7
 8007966:	7013      	strb	r3, [r2, #0]
					break;
 8007968:	e010      	b.n	800798c <AoC_Day_10+0x1e8>
			for(start.x=0; start.x<maze_width; start.x++)
 800796a:	f64b 638c 	movw	r3, #48780	; 0xbe8c
 800796e:	443b      	add	r3, r7
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	f64b 628c 	movw	r2, #48780	; 0xbe8c
 8007978:	443a      	add	r2, r7
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	f64b 638c 	movw	r3, #48780	; 0xbe8c
 8007980:	443b      	add	r3, r7
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	4b3f      	ldr	r3, [pc, #252]	; (8007a84 <AoC_Day_10+0x2e0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d3db      	bcc.n	8007944 <AoC_Day_10+0x1a0>
				}
			}
			if(located)
 800798c:	f64b 730f 	movw	r3, #48911	; 0xbf0f
 8007990:	443b      	add	r3, r7
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d111      	bne.n	80079bc <AoC_Day_10+0x218>
		for(start.y=0; start.y<maze_depth; start.y++)
 8007998:	f64b 6390 	movw	r3, #48784	; 0xbe90
 800799c:	443b      	add	r3, r7
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	f64b 6290 	movw	r2, #48784	; 0xbe90
 80079a6:	443a      	add	r2, r7
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	f64b 6390 	movw	r3, #48784	; 0xbe90
 80079ae:	443b      	add	r3, r7
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b35      	ldr	r3, [pc, #212]	; (8007a88 <AoC_Day_10+0x2e4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d3b9      	bcc.n	800792e <AoC_Day_10+0x18a>
 80079ba:	e000      	b.n	80079be <AoC_Day_10+0x21a>
				break;
 80079bc:	bf00      	nop
		}

		// process track
		Position_t position = start;
 80079be:	f64b 6380 	movw	r3, #48768	; 0xbe80
 80079c2:	443b      	add	r3, r7
 80079c4:	f64b 628c 	movw	r2, #48780	; 0xbe8c
 80079c8:	443a      	add	r2, r7
 80079ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80079cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Direction_t direction = getValidDirection(maze, position);
 80079d0:	f64b 6380 	movw	r3, #48768	; 0xbe80
 80079d4:	443b      	add	r3, r7
 80079d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079d8:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 80079dc:	4438      	add	r0, r7
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	f7ff fde0 	bl	80075a4 <getValidDirection>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 80079ea:	443a      	add	r2, r7
 80079ec:	7013      	strb	r3, [r2, #0]

		// do first movement
		uint32_t pipe_length = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	f64b 7208 	movw	r2, #48904	; 0xbf08
 80079f4:	443a      	add	r2, r7
 80079f6:	6013      	str	r3, [r2, #0]
		char pipe_type;
		switch(direction)
 80079f8:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 80079fc:	443b      	add	r3, r7
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	f200 80c1 	bhi.w	8007b88 <AoC_Day_10+0x3e4>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <AoC_Day_10+0x268>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a8d 	.word	0x08007a8d
 8007a14:	08007ae1 	.word	0x08007ae1
 8007a18:	08007b35 	.word	0x08007b35
		{
		case UP:
			position.y--;
 8007a1c:	f64b 6384 	movw	r3, #48772	; 0xbe84
 8007a20:	443b      	add	r3, r7
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	f64b 6284 	movw	r2, #48772	; 0xbe84
 8007a2a:	443a      	add	r2, r7
 8007a2c:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 8007a2e:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007a32:	443b      	add	r3, r7
 8007a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a36:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007a3a:	4438      	add	r0, r7
 8007a3c:	6800      	ldr	r0, [r0, #0]
 8007a3e:	f7ff fd3d 	bl	80074bc <getMazePosition>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f64b 62c7 	movw	r2, #48839	; 0xbec7
 8007a48:	443a      	add	r2, r7
 8007a4a:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 8007a4c:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007a50:	443b      	add	r3, r7
 8007a52:	781a      	ldrb	r2, [r3, #0]
 8007a54:	f64b 63c7 	movw	r3, #48839	; 0xbec7
 8007a58:	443b      	add	r3, r7
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fe3a 	bl	80076d8 <nextDirection>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007a6a:	443a      	add	r2, r7
 8007a6c:	7013      	strb	r3, [r2, #0]
			break;
 8007a6e:	e08c      	b.n	8007b8a <AoC_Day_10+0x3e6>
 8007a70:	ffff4364 	.word	0xffff4364
 8007a74:	08025118 	.word	0x08025118
 8007a78:	08025124 	.word	0x08025124
 8007a7c:	08025130 	.word	0x08025130
 8007a80:	08025148 	.word	0x08025148
 8007a84:	20000b0c 	.word	0x20000b0c
 8007a88:	20000b10 	.word	0x20000b10
		case DOWN:
			position.y++;
 8007a8c:	f64b 6384 	movw	r3, #48772	; 0xbe84
 8007a90:	443b      	add	r3, r7
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	f64b 6284 	movw	r2, #48772	; 0xbe84
 8007a9a:	443a      	add	r2, r7
 8007a9c:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 8007a9e:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007aa2:	443b      	add	r3, r7
 8007aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007aa6:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007aaa:	4438      	add	r0, r7
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	f7ff fd05 	bl	80074bc <getMazePosition>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f64b 62c7 	movw	r2, #48839	; 0xbec7
 8007ab8:	443a      	add	r2, r7
 8007aba:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 8007abc:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007ac0:	443b      	add	r3, r7
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	f64b 63c7 	movw	r3, #48839	; 0xbec7
 8007ac8:	443b      	add	r3, r7
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fe02 	bl	80076d8 <nextDirection>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007ada:	443a      	add	r2, r7
 8007adc:	7013      	strb	r3, [r2, #0]
			break;
 8007ade:	e054      	b.n	8007b8a <AoC_Day_10+0x3e6>
		case LEFT:
			position.x--;
 8007ae0:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007ae4:	443b      	add	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	f64b 6280 	movw	r2, #48768	; 0xbe80
 8007aee:	443a      	add	r2, r7
 8007af0:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 8007af2:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007af6:	443b      	add	r3, r7
 8007af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007afa:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007afe:	4438      	add	r0, r7
 8007b00:	6800      	ldr	r0, [r0, #0]
 8007b02:	f7ff fcdb 	bl	80074bc <getMazePosition>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f64b 62c7 	movw	r2, #48839	; 0xbec7
 8007b0c:	443a      	add	r2, r7
 8007b0e:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 8007b10:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007b14:	443b      	add	r3, r7
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	f64b 63c7 	movw	r3, #48839	; 0xbec7
 8007b1c:	443b      	add	r3, r7
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff fdd8 	bl	80076d8 <nextDirection>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007b2e:	443a      	add	r2, r7
 8007b30:	7013      	strb	r3, [r2, #0]
			break;
 8007b32:	e02a      	b.n	8007b8a <AoC_Day_10+0x3e6>
		case RIGHT:
			position.x++;
 8007b34:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007b38:	443b      	add	r3, r7
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f64b 6280 	movw	r2, #48768	; 0xbe80
 8007b42:	443a      	add	r2, r7
 8007b44:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 8007b46:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007b4a:	443b      	add	r3, r7
 8007b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b4e:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007b52:	4438      	add	r0, r7
 8007b54:	6800      	ldr	r0, [r0, #0]
 8007b56:	f7ff fcb1 	bl	80074bc <getMazePosition>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f64b 62c7 	movw	r2, #48839	; 0xbec7
 8007b60:	443a      	add	r2, r7
 8007b62:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 8007b64:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007b68:	443b      	add	r3, r7
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	f64b 63c7 	movw	r3, #48839	; 0xbec7
 8007b70:	443b      	add	r3, r7
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff fdae 	bl	80076d8 <nextDirection>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007b82:	443a      	add	r2, r7
 8007b84:	7013      	strb	r3, [r2, #0]
			break;
 8007b86:	e000      	b.n	8007b8a <AoC_Day_10+0x3e6>
		default:
			break;
 8007b88:	bf00      	nop
		}

		// insert next pipe
		pipe_length++;
 8007b8a:	f64b 7308 	movw	r3, #48904	; 0xbf08
 8007b8e:	443b      	add	r3, r7
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	f64b 7208 	movw	r2, #48904	; 0xbf08
 8007b98:	443a      	add	r2, r7
 8007b9a:	6013      	str	r3, [r2, #0]
		char track_token = '\0';
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f64b 7207 	movw	r2, #48903	; 0xbf07
 8007ba2:	443a      	add	r2, r7
 8007ba4:	7013      	strb	r3, [r2, #0]
		while(track_token != 'S')
 8007ba6:	e0cb      	b.n	8007d40 <AoC_Day_10+0x59c>
		{
			// process movement
			char pipe_type;
			switch(direction)
 8007ba8:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007bac:	443b      	add	r3, r7
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	f200 80b3 	bhi.w	8007d1c <AoC_Day_10+0x578>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <AoC_Day_10+0x418>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007c21 	.word	0x08007c21
 8007bc4:	08007c75 	.word	0x08007c75
 8007bc8:	08007cc9 	.word	0x08007cc9
			{
			case UP:
				position.y--;
 8007bcc:	f64b 6384 	movw	r3, #48772	; 0xbe84
 8007bd0:	443b      	add	r3, r7
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	f64b 6284 	movw	r2, #48772	; 0xbe84
 8007bda:	443a      	add	r2, r7
 8007bdc:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 8007bde:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007be2:	443b      	add	r3, r7
 8007be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007be6:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007bea:	4438      	add	r0, r7
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f7ff fc65 	bl	80074bc <getMazePosition>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f64b 7206 	movw	r2, #48902	; 0xbf06
 8007bf8:	443a      	add	r2, r7
 8007bfa:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 8007bfc:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007c00:	443b      	add	r3, r7
 8007c02:	781a      	ldrb	r2, [r3, #0]
 8007c04:	f64b 7306 	movw	r3, #48902	; 0xbf06
 8007c08:	443b      	add	r3, r7
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff fd62 	bl	80076d8 <nextDirection>
 8007c14:	4603      	mov	r3, r0
 8007c16:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007c1a:	443a      	add	r2, r7
 8007c1c:	7013      	strb	r3, [r2, #0]
				break;
 8007c1e:	e07e      	b.n	8007d1e <AoC_Day_10+0x57a>
			case DOWN:
				position.y++;
 8007c20:	f64b 6384 	movw	r3, #48772	; 0xbe84
 8007c24:	443b      	add	r3, r7
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f64b 6284 	movw	r2, #48772	; 0xbe84
 8007c2e:	443a      	add	r2, r7
 8007c30:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 8007c32:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007c36:	443b      	add	r3, r7
 8007c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c3a:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007c3e:	4438      	add	r0, r7
 8007c40:	6800      	ldr	r0, [r0, #0]
 8007c42:	f7ff fc3b 	bl	80074bc <getMazePosition>
 8007c46:	4603      	mov	r3, r0
 8007c48:	f64b 7206 	movw	r2, #48902	; 0xbf06
 8007c4c:	443a      	add	r2, r7
 8007c4e:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 8007c50:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007c54:	443b      	add	r3, r7
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	f64b 7306 	movw	r3, #48902	; 0xbf06
 8007c5c:	443b      	add	r3, r7
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	4611      	mov	r1, r2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fd38 	bl	80076d8 <nextDirection>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007c6e:	443a      	add	r2, r7
 8007c70:	7013      	strb	r3, [r2, #0]
				break;
 8007c72:	e054      	b.n	8007d1e <AoC_Day_10+0x57a>
			case LEFT:
				position.x--;
 8007c74:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007c78:	443b      	add	r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f64b 6280 	movw	r2, #48768	; 0xbe80
 8007c82:	443a      	add	r2, r7
 8007c84:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 8007c86:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007c8a:	443b      	add	r3, r7
 8007c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c8e:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007c92:	4438      	add	r0, r7
 8007c94:	6800      	ldr	r0, [r0, #0]
 8007c96:	f7ff fc11 	bl	80074bc <getMazePosition>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f64b 7206 	movw	r2, #48902	; 0xbf06
 8007ca0:	443a      	add	r2, r7
 8007ca2:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 8007ca4:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007ca8:	443b      	add	r3, r7
 8007caa:	781a      	ldrb	r2, [r3, #0]
 8007cac:	f64b 7306 	movw	r3, #48902	; 0xbf06
 8007cb0:	443b      	add	r3, r7
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fd0e 	bl	80076d8 <nextDirection>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007cc2:	443a      	add	r2, r7
 8007cc4:	7013      	strb	r3, [r2, #0]
				break;
 8007cc6:	e02a      	b.n	8007d1e <AoC_Day_10+0x57a>
			case RIGHT:
				position.x++;
 8007cc8:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007ccc:	443b      	add	r3, r7
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f64b 6280 	movw	r2, #48768	; 0xbe80
 8007cd6:	443a      	add	r2, r7
 8007cd8:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 8007cda:	f64b 6380 	movw	r3, #48768	; 0xbe80
 8007cde:	443b      	add	r3, r7
 8007ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ce2:	f64b 60cc 	movw	r0, #48844	; 0xbecc
 8007ce6:	4438      	add	r0, r7
 8007ce8:	6800      	ldr	r0, [r0, #0]
 8007cea:	f7ff fbe7 	bl	80074bc <getMazePosition>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f64b 7206 	movw	r2, #48902	; 0xbf06
 8007cf4:	443a      	add	r2, r7
 8007cf6:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 8007cf8:	f64b 730e 	movw	r3, #48910	; 0xbf0e
 8007cfc:	443b      	add	r3, r7
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	f64b 7306 	movw	r3, #48902	; 0xbf06
 8007d04:	443b      	add	r3, r7
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fce4 	bl	80076d8 <nextDirection>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f64b 720e 	movw	r2, #48910	; 0xbf0e
 8007d16:	443a      	add	r2, r7
 8007d18:	7013      	strb	r3, [r2, #0]
				break;
 8007d1a:	e000      	b.n	8007d1e <AoC_Day_10+0x57a>
			default:
				break;
 8007d1c:	bf00      	nop
			}

			// insert next pipe
			pipe_length++;
 8007d1e:	f64b 7308 	movw	r3, #48904	; 0xbf08
 8007d22:	443b      	add	r3, r7
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	f64b 7208 	movw	r2, #48904	; 0xbf08
 8007d2c:	443a      	add	r2, r7
 8007d2e:	6013      	str	r3, [r2, #0]

			// update pype type token
			track_token = pipe_type;
 8007d30:	f64b 7306 	movw	r3, #48902	; 0xbf06
 8007d34:	443b      	add	r3, r7
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f64b 7207 	movw	r2, #48903	; 0xbf07
 8007d3c:	443a      	add	r2, r7
 8007d3e:	7013      	strb	r3, [r2, #0]
		while(track_token != 'S')
 8007d40:	f64b 7307 	movw	r3, #48903	; 0xbf07
 8007d44:	443b      	add	r3, r7
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b53      	cmp	r3, #83	; 0x53
 8007d4a:	f47f af2d 	bne.w	8007ba8 <AoC_Day_10+0x404>
		}

		// answer
		uint32_t answer_value =  pipe_length / 2;
 8007d4e:	f64b 7308 	movw	r3, #48904	; 0xbf08
 8007d52:	443b      	add	r3, r7
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	f64b 62c0 	movw	r2, #48832	; 0xbec0
 8007d5c:	443a      	add	r2, r7
 8007d5e:	6013      	str	r3, [r2, #0]

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %lu\n", answer_value);
 8007d60:	4bbb      	ldr	r3, [pc, #748]	; (8008050 <AoC_Day_10+0x8ac>)
 8007d62:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007d66:	f103 0318 	add.w	r3, r3, #24
 8007d6a:	443b      	add	r3, r7
 8007d6c:	f64b 62c0 	movw	r2, #48832	; 0xbec0
 8007d70:	443a      	add	r2, r7
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	49b7      	ldr	r1, [pc, #732]	; (8008054 <AoC_Day_10+0x8b0>)
 8007d76:	4618      	mov	r0, r3
 8007d78:	f017 fae6 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8007d7c:	4bb4      	ldr	r3, [pc, #720]	; (8008050 <AoC_Day_10+0x8ac>)
 8007d7e:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007d82:	f103 0318 	add.w	r3, r3, #24
 8007d86:	443b      	add	r3, r7
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7f8 fa41 	bl	8000210 <strlen>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4619      	mov	r1, r3
 8007d92:	4baf      	ldr	r3, [pc, #700]	; (8008050 <AoC_Day_10+0x8ac>)
 8007d94:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007d98:	f103 0318 	add.w	r3, r3, #24
 8007d9c:	443b      	add	r3, r7
 8007d9e:	f607 7218 	addw	r2, r7, #3864	; 0xf18
 8007da2:	f6a2 7211 	subw	r2, r2, #3857	; 0xf11
 8007da6:	7810      	ldrb	r0, [r2, #0]
 8007da8:	460a      	mov	r2, r1
 8007daa:	4619      	mov	r1, r3
 8007dac:	f7f9 fa42 	bl	8001234 <AdventOfCode_print>

		// clean up
		sram_clrmem();
 8007db0:	f002 fa08 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8007db4:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8007db8:	f6a3 7311 	subw	r3, r3, #3857	; 0xf11
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d110      	bne.n	8007de4 <AoC_Day_10+0x640>
			ret = f_open(&file, "day10t.txt", FA_READ);
 8007dc2:	4ba3      	ldr	r3, [pc, #652]	; (8008050 <AoC_Day_10+0x8ac>)
 8007dc4:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007dc8:	f103 0318 	add.w	r3, r3, #24
 8007dcc:	443b      	add	r3, r7
 8007dce:	2201      	movs	r2, #1
 8007dd0:	49a1      	ldr	r1, [pc, #644]	; (8008058 <AoC_Day_10+0x8b4>)
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f014 ffc0 	bl	801cd58 <f_open>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f64b 7205 	movw	r2, #48901	; 0xbf05
 8007dde:	443a      	add	r2, r7
 8007de0:	7013      	strb	r3, [r2, #0]
 8007de2:	e00f      	b.n	8007e04 <AoC_Day_10+0x660>
		else ret = f_open(&file, "day10.txt", FA_READ);
 8007de4:	4b9a      	ldr	r3, [pc, #616]	; (8008050 <AoC_Day_10+0x8ac>)
 8007de6:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007dea:	f103 0318 	add.w	r3, r3, #24
 8007dee:	443b      	add	r3, r7
 8007df0:	2201      	movs	r2, #1
 8007df2:	499a      	ldr	r1, [pc, #616]	; (800805c <AoC_Day_10+0x8b8>)
 8007df4:	4618      	mov	r0, r3
 8007df6:	f014 ffaf 	bl	801cd58 <f_open>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f64b 7205 	movw	r2, #48901	; 0xbf05
 8007e00:	443a      	add	r2, r7
 8007e02:	7013      	strb	r3, [r2, #0]
		if(ret != FR_OK)
 8007e04:	f64b 7305 	movw	r3, #48901	; 0xbf05
 8007e08:	443b      	add	r3, r7
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00c      	beq.n	8007e2a <AoC_Day_10+0x686>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8007e10:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8007e14:	f6a3 7311 	subw	r3, r3, #3857	; 0xf11
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2213      	movs	r2, #19
 8007e1c:	4990      	ldr	r1, [pc, #576]	; (8008060 <AoC_Day_10+0x8bc>)
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7f9 fa08 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f000 bffe 	b.w	8008e26 <AoC_Day_10+0x1682>
		}

		// get file length
		int32_t file_size = f_size(&file);
 8007e2a:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8007e2e:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f64b 62bc 	movw	r2, #48828	; 0xbebc
 8007e38:	443a      	add	r2, r7
 8007e3a:	6013      	str	r3, [r2, #0]

		// extract data
		char *maze = (char*)sram_malloc(file_size + 1);
 8007e3c:	f64b 63bc 	movw	r3, #48828	; 0xbebc
 8007e40:	443b      	add	r3, r7
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	4618      	mov	r0, r3
 8007e48:	f002 f978 	bl	800a13c <sram_malloc>
 8007e4c:	f64b 63b8 	movw	r3, #48824	; 0xbeb8
 8007e50:	443b      	add	r3, r7
 8007e52:	6018      	str	r0, [r3, #0]

		// insert data
		f_read(&file, maze, file_size + 1, NULL);
 8007e54:	f64b 63bc 	movw	r3, #48828	; 0xbebc
 8007e58:	443b      	add	r3, r7
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	461a      	mov	r2, r3
 8007e60:	487b      	ldr	r0, [pc, #492]	; (8008050 <AoC_Day_10+0x8ac>)
 8007e62:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8007e66:	4403      	add	r3, r0
 8007e68:	19d8      	adds	r0, r3, r7
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f64b 61b8 	movw	r1, #48824	; 0xbeb8
 8007e70:	4439      	add	r1, r7
 8007e72:	6809      	ldr	r1, [r1, #0]
 8007e74:	f015 f92e 	bl	801d0d4 <f_read>

		// close file
		f_close(&file);
 8007e78:	4b75      	ldr	r3, [pc, #468]	; (8008050 <AoC_Day_10+0x8ac>)
 8007e7a:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8007e7e:	f103 0318 	add.w	r3, r3, #24
 8007e82:	443b      	add	r3, r7
 8007e84:	4618      	mov	r0, r3
 8007e86:	f015 fc57 	bl	801d738 <f_close>

		// get maze dimensions and insert line ends
		char *token = strtok(maze, "\n");
 8007e8a:	4976      	ldr	r1, [pc, #472]	; (8008064 <AoC_Day_10+0x8c0>)
 8007e8c:	f64b 63b8 	movw	r3, #48824	; 0xbeb8
 8007e90:	443b      	add	r3, r7
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	f017 fa88 	bl	801f3a8 <strtok>
 8007e98:	f64b 63b4 	movw	r3, #48820	; 0xbeb4
 8007e9c:	443b      	add	r3, r7
 8007e9e:	6018      	str	r0, [r3, #0]
		maze_width = strlen(token);
 8007ea0:	f64b 63b4 	movw	r3, #48820	; 0xbeb4
 8007ea4:	443b      	add	r3, r7
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	f7f8 f9b2 	bl	8000210 <strlen>
 8007eac:	4603      	mov	r3, r0
 8007eae:	4a6e      	ldr	r2, [pc, #440]	; (8008068 <AoC_Day_10+0x8c4>)
 8007eb0:	6013      	str	r3, [r2, #0]
		uint32_t counter = 1;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f507 423f 	add.w	r2, r7, #48896	; 0xbf00
 8007eb8:	6013      	str	r3, [r2, #0]
		while(strtok(NULL, "\n"))
 8007eba:	e006      	b.n	8007eca <AoC_Day_10+0x726>
			counter++;
 8007ebc:	f507 433f 	add.w	r3, r7, #48896	; 0xbf00
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f507 423f 	add.w	r2, r7, #48896	; 0xbf00
 8007ec8:	6013      	str	r3, [r2, #0]
		while(strtok(NULL, "\n"))
 8007eca:	4966      	ldr	r1, [pc, #408]	; (8008064 <AoC_Day_10+0x8c0>)
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f017 fa6b 	bl	801f3a8 <strtok>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f1      	bne.n	8007ebc <AoC_Day_10+0x718>
		maze_depth = counter;
 8007ed8:	4a64      	ldr	r2, [pc, #400]	; (800806c <AoC_Day_10+0x8c8>)
 8007eda:	f507 433f 	add.w	r3, r7, #48896	; 0xbf00
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6013      	str	r3, [r2, #0]

		// locate start position
		Position_t start = {0, 0, 0};
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f64b 6274 	movw	r2, #48756	; 0xbe74
 8007ee8:	443a      	add	r2, r7
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	2300      	movs	r3, #0
 8007eee:	f64b 6278 	movw	r2, #48760	; 0xbe78
 8007ef2:	443a      	add	r2, r7
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f64b 627c 	movw	r2, #48764	; 0xbe7c
 8007efc:	443a      	add	r2, r7
 8007efe:	6013      	str	r3, [r2, #0]
		for(start.y=0; start.y<maze_depth; start.y++)
 8007f00:	2300      	movs	r3, #0
 8007f02:	f64b 6278 	movw	r2, #48760	; 0xbe78
 8007f06:	443a      	add	r2, r7
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e03d      	b.n	8007f88 <AoC_Day_10+0x7e4>
		{
			uint8_t located = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f64b 62ff 	movw	r2, #48895	; 0xbeff
 8007f12:	443a      	add	r2, r7
 8007f14:	7013      	strb	r3, [r2, #0]
			for(start.x=0; start.x<maze_width; start.x++)
 8007f16:	2300      	movs	r3, #0
 8007f18:	f64b 6274 	movw	r2, #48756	; 0xbe74
 8007f1c:	443a      	add	r2, r7
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	e01b      	b.n	8007f5a <AoC_Day_10+0x7b6>
			{
				if(getMazePosition(maze, start) == 'S')
 8007f22:	f64b 6374 	movw	r3, #48756	; 0xbe74
 8007f26:	443b      	add	r3, r7
 8007f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f2a:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 8007f2e:	4438      	add	r0, r7
 8007f30:	6800      	ldr	r0, [r0, #0]
 8007f32:	f7ff fac3 	bl	80074bc <getMazePosition>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b53      	cmp	r3, #83	; 0x53
 8007f3a:	d105      	bne.n	8007f48 <AoC_Day_10+0x7a4>
				{
					located = 1;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f64b 62ff 	movw	r2, #48895	; 0xbeff
 8007f42:	443a      	add	r2, r7
 8007f44:	7013      	strb	r3, [r2, #0]
					break;
 8007f46:	e010      	b.n	8007f6a <AoC_Day_10+0x7c6>
			for(start.x=0; start.x<maze_width; start.x++)
 8007f48:	f64b 6374 	movw	r3, #48756	; 0xbe74
 8007f4c:	443b      	add	r3, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	f64b 6274 	movw	r2, #48756	; 0xbe74
 8007f56:	443a      	add	r2, r7
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	f64b 6374 	movw	r3, #48756	; 0xbe74
 8007f5e:	443b      	add	r3, r7
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b41      	ldr	r3, [pc, #260]	; (8008068 <AoC_Day_10+0x8c4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d3db      	bcc.n	8007f22 <AoC_Day_10+0x77e>
				}
			}
			if(located)
 8007f6a:	f64b 63ff 	movw	r3, #48895	; 0xbeff
 8007f6e:	443b      	add	r3, r7
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d111      	bne.n	8007f9a <AoC_Day_10+0x7f6>
		for(start.y=0; start.y<maze_depth; start.y++)
 8007f76:	f64b 6378 	movw	r3, #48760	; 0xbe78
 8007f7a:	443b      	add	r3, r7
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	f64b 6278 	movw	r2, #48760	; 0xbe78
 8007f84:	443a      	add	r2, r7
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f64b 6378 	movw	r3, #48760	; 0xbe78
 8007f8c:	443b      	add	r3, r7
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <AoC_Day_10+0x8c8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d3b9      	bcc.n	8007f0c <AoC_Day_10+0x768>
 8007f98:	e000      	b.n	8007f9c <AoC_Day_10+0x7f8>
				break;
 8007f9a:	bf00      	nop
		}

		// process track
		Position_t position = start;
 8007f9c:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8007fa0:	443b      	add	r3, r7
 8007fa2:	f64b 6274 	movw	r2, #48756	; 0xbe74
 8007fa6:	443a      	add	r2, r7
 8007fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Direction_t direction = getValidDirection(maze, position);
 8007fae:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8007fb2:	443b      	add	r3, r7
 8007fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fb6:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 8007fba:	4438      	add	r0, r7
 8007fbc:	6800      	ldr	r0, [r0, #0]
 8007fbe:	f7ff faf1 	bl	80075a4 <getValidDirection>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 8007fc8:	443a      	add	r2, r7
 8007fca:	7013      	strb	r3, [r2, #0]

		// do first movement
		uint32_t pipe_length = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f64b 62f8 	movw	r2, #48888	; 0xbef8
 8007fd2:	443a      	add	r2, r7
 8007fd4:	6013      	str	r3, [r2, #0]
		char pipe_type;
		switch(direction)
 8007fd6:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 8007fda:	443b      	add	r3, r7
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	f200 80c4 	bhi.w	800816c <AoC_Day_10+0x9c8>
 8007fe4:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <AoC_Day_10+0x848>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008071 	.word	0x08008071
 8007ff4:	080080c5 	.word	0x080080c5
 8007ff8:	08008119 	.word	0x08008119
		{
		case UP:
			position.y--;
 8007ffc:	f64b 636c 	movw	r3, #48748	; 0xbe6c
 8008000:	443b      	add	r3, r7
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3b01      	subs	r3, #1
 8008006:	f64b 626c 	movw	r2, #48748	; 0xbe6c
 800800a:	443a      	add	r2, r7
 800800c:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 800800e:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008012:	443b      	add	r3, r7
 8008014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008016:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800801a:	4438      	add	r0, r7
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f7ff fa4d 	bl	80074bc <getMazePosition>
 8008022:	4603      	mov	r3, r0
 8008024:	f64b 62f7 	movw	r2, #48887	; 0xbef7
 8008028:	443a      	add	r2, r7
 800802a:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 800802c:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 8008030:	443b      	add	r3, r7
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	f64b 63f7 	movw	r3, #48887	; 0xbef7
 8008038:	443b      	add	r3, r7
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff fb4a 	bl	80076d8 <nextDirection>
 8008044:	4603      	mov	r3, r0
 8008046:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 800804a:	443a      	add	r2, r7
 800804c:	7013      	strb	r3, [r2, #0]
			break;
 800804e:	e08e      	b.n	800816e <AoC_Day_10+0x9ca>
 8008050:	ffff4134 	.word	0xffff4134
 8008054:	0802514c 	.word	0x0802514c
 8008058:	08025118 	.word	0x08025118
 800805c:	08025124 	.word	0x08025124
 8008060:	08025130 	.word	0x08025130
 8008064:	08025148 	.word	0x08025148
 8008068:	20000b0c 	.word	0x20000b0c
 800806c:	20000b10 	.word	0x20000b10
		case DOWN:
			position.y++;
 8008070:	f64b 636c 	movw	r3, #48748	; 0xbe6c
 8008074:	443b      	add	r3, r7
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	f64b 626c 	movw	r2, #48748	; 0xbe6c
 800807e:	443a      	add	r2, r7
 8008080:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 8008082:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008086:	443b      	add	r3, r7
 8008088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800808a:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800808e:	4438      	add	r0, r7
 8008090:	6800      	ldr	r0, [r0, #0]
 8008092:	f7ff fa13 	bl	80074bc <getMazePosition>
 8008096:	4603      	mov	r3, r0
 8008098:	f64b 62f7 	movw	r2, #48887	; 0xbef7
 800809c:	443a      	add	r2, r7
 800809e:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 80080a0:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 80080a4:	443b      	add	r3, r7
 80080a6:	781a      	ldrb	r2, [r3, #0]
 80080a8:	f64b 63f7 	movw	r3, #48887	; 0xbef7
 80080ac:	443b      	add	r3, r7
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fb10 	bl	80076d8 <nextDirection>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 80080be:	443a      	add	r2, r7
 80080c0:	7013      	strb	r3, [r2, #0]
			break;
 80080c2:	e054      	b.n	800816e <AoC_Day_10+0x9ca>
		case LEFT:
			position.x--;
 80080c4:	f64b 6368 	movw	r3, #48744	; 0xbe68
 80080c8:	443b      	add	r3, r7
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	f64b 6268 	movw	r2, #48744	; 0xbe68
 80080d2:	443a      	add	r2, r7
 80080d4:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 80080d6:	f64b 6368 	movw	r3, #48744	; 0xbe68
 80080da:	443b      	add	r3, r7
 80080dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080de:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 80080e2:	4438      	add	r0, r7
 80080e4:	6800      	ldr	r0, [r0, #0]
 80080e6:	f7ff f9e9 	bl	80074bc <getMazePosition>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f64b 62f7 	movw	r2, #48887	; 0xbef7
 80080f0:	443a      	add	r2, r7
 80080f2:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 80080f4:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 80080f8:	443b      	add	r3, r7
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	f64b 63f7 	movw	r3, #48887	; 0xbef7
 8008100:	443b      	add	r3, r7
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fae6 	bl	80076d8 <nextDirection>
 800810c:	4603      	mov	r3, r0
 800810e:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 8008112:	443a      	add	r2, r7
 8008114:	7013      	strb	r3, [r2, #0]
			break;
 8008116:	e02a      	b.n	800816e <AoC_Day_10+0x9ca>
		case RIGHT:
			position.x++;
 8008118:	f64b 6368 	movw	r3, #48744	; 0xbe68
 800811c:	443b      	add	r3, r7
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3301      	adds	r3, #1
 8008122:	f64b 6268 	movw	r2, #48744	; 0xbe68
 8008126:	443a      	add	r2, r7
 8008128:	6013      	str	r3, [r2, #0]
			pipe_type = getMazePosition(maze, position);
 800812a:	f64b 6368 	movw	r3, #48744	; 0xbe68
 800812e:	443b      	add	r3, r7
 8008130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008132:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 8008136:	4438      	add	r0, r7
 8008138:	6800      	ldr	r0, [r0, #0]
 800813a:	f7ff f9bf 	bl	80074bc <getMazePosition>
 800813e:	4603      	mov	r3, r0
 8008140:	f64b 62f7 	movw	r2, #48887	; 0xbef7
 8008144:	443a      	add	r2, r7
 8008146:	7013      	strb	r3, [r2, #0]
			direction = nextDirection(pipe_type, direction);
 8008148:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 800814c:	443b      	add	r3, r7
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	f64b 63f7 	movw	r3, #48887	; 0xbef7
 8008154:	443b      	add	r3, r7
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fabc 	bl	80076d8 <nextDirection>
 8008160:	4603      	mov	r3, r0
 8008162:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 8008166:	443a      	add	r2, r7
 8008168:	7013      	strb	r3, [r2, #0]
			break;
 800816a:	e000      	b.n	800816e <AoC_Day_10+0x9ca>
		default:
			break;
 800816c:	bf00      	nop
		}

		// clear pipe position with a #
		setMazePosition(maze, position, replacementChar(pipe_type));
 800816e:	f64b 63f7 	movw	r3, #48887	; 0xbef7
 8008172:	443b      	add	r3, r7
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff f92a 	bl	80073d0 <replacementChar>
 800817c:	4603      	mov	r3, r0
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008184:	443b      	add	r3, r7
 8008186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008188:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800818c:	4438      	add	r0, r7
 800818e:	6800      	ldr	r0, [r0, #0]
 8008190:	f7ff f9b0 	bl	80074f4 <setMazePosition>
		pipe_length++;
 8008194:	f64b 63f8 	movw	r3, #48888	; 0xbef8
 8008198:	443b      	add	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3301      	adds	r3, #1
 800819e:	f64b 62f8 	movw	r2, #48888	; 0xbef8
 80081a2:	443a      	add	r2, r7
 80081a4:	6013      	str	r3, [r2, #0]
		char track_token = '\0';
 80081a6:	2300      	movs	r3, #0
 80081a8:	f64b 62f6 	movw	r2, #48886	; 0xbef6
 80081ac:	443a      	add	r2, r7
 80081ae:	7013      	strb	r3, [r2, #0]
		while(track_token != 'S')
 80081b0:	e0df      	b.n	8008372 <AoC_Day_10+0xbce>
		{
			// process movement
			char pipe_type;
			switch(direction)
 80081b2:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 80081b6:	443b      	add	r3, r7
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	f200 80b4 	bhi.w	8008328 <AoC_Day_10+0xb84>
 80081c0:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <AoC_Day_10+0xa24>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080081d9 	.word	0x080081d9
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	08008281 	.word	0x08008281
 80081d4:	080082d5 	.word	0x080082d5
			{
			case UP:
				position.y--;
 80081d8:	f64b 636c 	movw	r3, #48748	; 0xbe6c
 80081dc:	443b      	add	r3, r7
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	f64b 626c 	movw	r2, #48748	; 0xbe6c
 80081e6:	443a      	add	r2, r7
 80081e8:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 80081ea:	f64b 6368 	movw	r3, #48744	; 0xbe68
 80081ee:	443b      	add	r3, r7
 80081f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081f2:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 80081f6:	4438      	add	r0, r7
 80081f8:	6800      	ldr	r0, [r0, #0]
 80081fa:	f7ff f95f 	bl	80074bc <getMazePosition>
 80081fe:	4603      	mov	r3, r0
 8008200:	f64b 62f5 	movw	r2, #48885	; 0xbef5
 8008204:	443a      	add	r2, r7
 8008206:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 8008208:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 800820c:	443b      	add	r3, r7
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	f64b 63f5 	movw	r3, #48885	; 0xbef5
 8008214:	443b      	add	r3, r7
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fa5c 	bl	80076d8 <nextDirection>
 8008220:	4603      	mov	r3, r0
 8008222:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 8008226:	443a      	add	r2, r7
 8008228:	7013      	strb	r3, [r2, #0]
				break;
 800822a:	e07e      	b.n	800832a <AoC_Day_10+0xb86>
			case DOWN:
				position.y++;
 800822c:	f64b 636c 	movw	r3, #48748	; 0xbe6c
 8008230:	443b      	add	r3, r7
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	f64b 626c 	movw	r2, #48748	; 0xbe6c
 800823a:	443a      	add	r2, r7
 800823c:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 800823e:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008242:	443b      	add	r3, r7
 8008244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008246:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800824a:	4438      	add	r0, r7
 800824c:	6800      	ldr	r0, [r0, #0]
 800824e:	f7ff f935 	bl	80074bc <getMazePosition>
 8008252:	4603      	mov	r3, r0
 8008254:	f64b 62f5 	movw	r2, #48885	; 0xbef5
 8008258:	443a      	add	r2, r7
 800825a:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 800825c:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 8008260:	443b      	add	r3, r7
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	f64b 63f5 	movw	r3, #48885	; 0xbef5
 8008268:	443b      	add	r3, r7
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff fa32 	bl	80076d8 <nextDirection>
 8008274:	4603      	mov	r3, r0
 8008276:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 800827a:	443a      	add	r2, r7
 800827c:	7013      	strb	r3, [r2, #0]
				break;
 800827e:	e054      	b.n	800832a <AoC_Day_10+0xb86>
			case LEFT:
				position.x--;
 8008280:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008284:	443b      	add	r3, r7
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3b01      	subs	r3, #1
 800828a:	f64b 6268 	movw	r2, #48744	; 0xbe68
 800828e:	443a      	add	r2, r7
 8008290:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 8008292:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008296:	443b      	add	r3, r7
 8008298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800829a:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800829e:	4438      	add	r0, r7
 80082a0:	6800      	ldr	r0, [r0, #0]
 80082a2:	f7ff f90b 	bl	80074bc <getMazePosition>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f64b 62f5 	movw	r2, #48885	; 0xbef5
 80082ac:	443a      	add	r2, r7
 80082ae:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 80082b0:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 80082b4:	443b      	add	r3, r7
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	f64b 63f5 	movw	r3, #48885	; 0xbef5
 80082bc:	443b      	add	r3, r7
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fa08 	bl	80076d8 <nextDirection>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 80082ce:	443a      	add	r2, r7
 80082d0:	7013      	strb	r3, [r2, #0]
				break;
 80082d2:	e02a      	b.n	800832a <AoC_Day_10+0xb86>
			case RIGHT:
				position.x++;
 80082d4:	f64b 6368 	movw	r3, #48744	; 0xbe68
 80082d8:	443b      	add	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	f64b 6268 	movw	r2, #48744	; 0xbe68
 80082e2:	443a      	add	r2, r7
 80082e4:	6013      	str	r3, [r2, #0]
				pipe_type = getMazePosition(maze, position);
 80082e6:	f64b 6368 	movw	r3, #48744	; 0xbe68
 80082ea:	443b      	add	r3, r7
 80082ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082ee:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 80082f2:	4438      	add	r0, r7
 80082f4:	6800      	ldr	r0, [r0, #0]
 80082f6:	f7ff f8e1 	bl	80074bc <getMazePosition>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f64b 62f5 	movw	r2, #48885	; 0xbef5
 8008300:	443a      	add	r2, r7
 8008302:	7013      	strb	r3, [r2, #0]
				direction = nextDirection(pipe_type, direction);
 8008304:	f64b 63fe 	movw	r3, #48894	; 0xbefe
 8008308:	443b      	add	r3, r7
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	f64b 63f5 	movw	r3, #48885	; 0xbef5
 8008310:	443b      	add	r3, r7
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff f9de 	bl	80076d8 <nextDirection>
 800831c:	4603      	mov	r3, r0
 800831e:	f64b 62fe 	movw	r2, #48894	; 0xbefe
 8008322:	443a      	add	r2, r7
 8008324:	7013      	strb	r3, [r2, #0]
				break;
 8008326:	e000      	b.n	800832a <AoC_Day_10+0xb86>
			default:
				break;
 8008328:	bf00      	nop
			}

			// insert next pipe
			pipe_length++;
 800832a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
 800832e:	443b      	add	r3, r7
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	f64b 62f8 	movw	r2, #48888	; 0xbef8
 8008338:	443a      	add	r2, r7
 800833a:	6013      	str	r3, [r2, #0]

			// fill maze with pathing
			setMazePosition(maze, position, replacementChar(pipe_type));
 800833c:	f64b 63f5 	movw	r3, #48885	; 0xbef5
 8008340:	443b      	add	r3, r7
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f7ff f843 	bl	80073d0 <replacementChar>
 800834a:	4603      	mov	r3, r0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	f64b 6368 	movw	r3, #48744	; 0xbe68
 8008352:	443b      	add	r3, r7
 8008354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008356:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800835a:	4438      	add	r0, r7
 800835c:	6800      	ldr	r0, [r0, #0]
 800835e:	f7ff f8c9 	bl	80074f4 <setMazePosition>

			// update pype type token
			track_token = pipe_type;
 8008362:	f64b 63f5 	movw	r3, #48885	; 0xbef5
 8008366:	443b      	add	r3, r7
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f64b 62f6 	movw	r2, #48886	; 0xbef6
 800836e:	443a      	add	r2, r7
 8008370:	7013      	strb	r3, [r2, #0]
		while(track_token != 'S')
 8008372:	f64b 63f6 	movw	r3, #48886	; 0xbef6
 8008376:	443b      	add	r3, r7
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b53      	cmp	r3, #83	; 0x53
 800837c:	f47f af19 	bne.w	80081b2 <AoC_Day_10+0xa0e>
		}

		// create oversized maze
		big_maze_width = maze_width * 3;
 8008380:	4ba6      	ldr	r3, [pc, #664]	; (800861c <AoC_Day_10+0xe78>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	4413      	add	r3, r2
 800838a:	4aa5      	ldr	r2, [pc, #660]	; (8008620 <AoC_Day_10+0xe7c>)
 800838c:	6013      	str	r3, [r2, #0]
		big_maze_depth = maze_depth * 3;
 800838e:	4ba5      	ldr	r3, [pc, #660]	; (8008624 <AoC_Day_10+0xe80>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4613      	mov	r3, r2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	4413      	add	r3, r2
 8008398:	4aa3      	ldr	r2, [pc, #652]	; (8008628 <AoC_Day_10+0xe84>)
 800839a:	6013      	str	r3, [r2, #0]
		char *big_maze = (char*)sram_calloc((big_maze_width + 1) * big_maze_depth, 1);
 800839c:	4ba0      	ldr	r3, [pc, #640]	; (8008620 <AoC_Day_10+0xe7c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	4aa1      	ldr	r2, [pc, #644]	; (8008628 <AoC_Day_10+0xe84>)
 80083a4:	6812      	ldr	r2, [r2, #0]
 80083a6:	fb02 f303 	mul.w	r3, r2, r3
 80083aa:	2101      	movs	r1, #1
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 feeb 	bl	800a188 <sram_calloc>
 80083b2:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 80083b6:	443b      	add	r3, r7
 80083b8:	6018      	str	r0, [r3, #0]

		// fill big maze with dots
		for(uint32_t line=0; line<big_maze_depth; line++)
 80083ba:	2300      	movs	r3, #0
 80083bc:	f64b 62f0 	movw	r2, #48880	; 0xbef0
 80083c0:	443a      	add	r2, r7
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	e024      	b.n	8008410 <AoC_Day_10+0xc6c>
		{
			uint32_t index = line * (big_maze_width + 1);
 80083c6:	4b96      	ldr	r3, [pc, #600]	; (8008620 <AoC_Day_10+0xe7c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	f64b 63f0 	movw	r3, #48880	; 0xbef0
 80083d0:	443b      	add	r3, r7
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	fb02 f303 	mul.w	r3, r2, r3
 80083d8:	f64b 6298 	movw	r2, #48792	; 0xbe98
 80083dc:	443a      	add	r2, r7
 80083de:	6013      	str	r3, [r2, #0]
			memset(&big_maze[index], '.', big_maze_width);
 80083e0:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 80083e4:	443b      	add	r3, r7
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	f64b 6398 	movw	r3, #48792	; 0xbe98
 80083ec:	443b      	add	r3, r7
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4413      	add	r3, r2
 80083f2:	4a8b      	ldr	r2, [pc, #556]	; (8008620 <AoC_Day_10+0xe7c>)
 80083f4:	6812      	ldr	r2, [r2, #0]
 80083f6:	212e      	movs	r1, #46	; 0x2e
 80083f8:	4618      	mov	r0, r3
 80083fa:	f016 ff81 	bl	801f300 <memset>
		for(uint32_t line=0; line<big_maze_depth; line++)
 80083fe:	f64b 63f0 	movw	r3, #48880	; 0xbef0
 8008402:	443b      	add	r3, r7
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3301      	adds	r3, #1
 8008408:	f64b 62f0 	movw	r2, #48880	; 0xbef0
 800840c:	443a      	add	r2, r7
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	4b85      	ldr	r3, [pc, #532]	; (8008628 <AoC_Day_10+0xe84>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f64b 62f0 	movw	r2, #48880	; 0xbef0
 8008418:	443a      	add	r2, r7
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d3d2      	bcc.n	80083c6 <AoC_Day_10+0xc22>
		}

		// fill big maze with characters
		for(uint32_t position_x=0; position_x<maze_width; position_x++)
 8008420:	2300      	movs	r3, #0
 8008422:	f64b 62ec 	movw	r2, #48876	; 0xbeec
 8008426:	443a      	add	r2, r7
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e1f9      	b.n	8008820 <AoC_Day_10+0x107c>
		{
			for(uint32_t position_y=0; position_y<maze_depth; position_y++)
 800842c:	2300      	movs	r3, #0
 800842e:	f64b 62e8 	movw	r2, #48872	; 0xbee8
 8008432:	443a      	add	r2, r7
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	e1e1      	b.n	80087fc <AoC_Day_10+0x1058>
			{
				// abort if character is not part of real pipe
				char chr = getMazePosition(maze, (Position_t){position_x, position_y, 0});
 8008438:	f64b 63ec 	movw	r3, #48876	; 0xbeec
 800843c:	443b      	add	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f64b 6244 	movw	r2, #48708	; 0xbe44
 8008444:	443a      	add	r2, r7
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	f64b 63e8 	movw	r3, #48872	; 0xbee8
 800844c:	443b      	add	r3, r7
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f64b 6248 	movw	r2, #48712	; 0xbe48
 8008454:	443a      	add	r2, r7
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	2300      	movs	r3, #0
 800845a:	f64b 624c 	movw	r2, #48716	; 0xbe4c
 800845e:	443a      	add	r2, r7
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	f64b 6344 	movw	r3, #48708	; 0xbe44
 8008466:	443b      	add	r3, r7
 8008468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800846a:	f64b 60b8 	movw	r0, #48824	; 0xbeb8
 800846e:	4438      	add	r0, r7
 8008470:	6800      	ldr	r0, [r0, #0]
 8008472:	f7ff f823 	bl	80074bc <getMazePosition>
 8008476:	4603      	mov	r3, r0
 8008478:	f64b 62ab 	movw	r2, #48811	; 0xbeab
 800847c:	443a      	add	r2, r7
 800847e:	7013      	strb	r3, [r2, #0]
				if(chr != 'X' && chr != 'i' && chr != 'r' && chr != '?' && chr != 'l' && chr != 'j' && chr != '_')
 8008480:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 8008484:	443b      	add	r3, r7
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b58      	cmp	r3, #88	; 0x58
 800848a:	d024      	beq.n	80084d6 <AoC_Day_10+0xd32>
 800848c:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 8008490:	443b      	add	r3, r7
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b69      	cmp	r3, #105	; 0x69
 8008496:	d01e      	beq.n	80084d6 <AoC_Day_10+0xd32>
 8008498:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 800849c:	443b      	add	r3, r7
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b72      	cmp	r3, #114	; 0x72
 80084a2:	d018      	beq.n	80084d6 <AoC_Day_10+0xd32>
 80084a4:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80084a8:	443b      	add	r3, r7
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b3f      	cmp	r3, #63	; 0x3f
 80084ae:	d012      	beq.n	80084d6 <AoC_Day_10+0xd32>
 80084b0:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80084b4:	443b      	add	r3, r7
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b6c      	cmp	r3, #108	; 0x6c
 80084ba:	d00c      	beq.n	80084d6 <AoC_Day_10+0xd32>
 80084bc:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80084c0:	443b      	add	r3, r7
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b6a      	cmp	r3, #106	; 0x6a
 80084c6:	d006      	beq.n	80084d6 <AoC_Day_10+0xd32>
 80084c8:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80084cc:	443b      	add	r3, r7
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b5f      	cmp	r3, #95	; 0x5f
 80084d2:	f040 8189 	bne.w	80087e8 <AoC_Day_10+0x1044>
					continue;

				// get center index of maze part
				uint32_t big_pos_x = 1 + position_x * 3;
 80084d6:	f64b 63ec 	movw	r3, #48876	; 0xbeec
 80084da:	443b      	add	r3, r7
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	4413      	add	r3, r2
 80084e4:	3301      	adds	r3, #1
 80084e6:	f64b 62a4 	movw	r2, #48804	; 0xbea4
 80084ea:	443a      	add	r2, r7
 80084ec:	6013      	str	r3, [r2, #0]
				uint32_t big_pos_y = 1 + position_y * 3;
 80084ee:	f64b 63e8 	movw	r3, #48872	; 0xbee8
 80084f2:	443b      	add	r3, r7
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	4613      	mov	r3, r2
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4413      	add	r3, r2
 80084fc:	3301      	adds	r3, #1
 80084fe:	f64b 62a0 	movw	r2, #48800	; 0xbea0
 8008502:	443a      	add	r2, r7
 8008504:	6013      	str	r3, [r2, #0]
				uint32_t index = big_pos_y * (big_maze_width + 1) + big_pos_x;
 8008506:	4b46      	ldr	r3, [pc, #280]	; (8008620 <AoC_Day_10+0xe7c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	f64b 62a0 	movw	r2, #48800	; 0xbea0
 8008510:	443a      	add	r2, r7
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	f64b 62a4 	movw	r2, #48804	; 0xbea4
 800851c:	443a      	add	r2, r7
 800851e:	6812      	ldr	r2, [r2, #0]
 8008520:	4413      	add	r3, r2
 8008522:	f64b 629c 	movw	r2, #48796	; 0xbe9c
 8008526:	443a      	add	r2, r7
 8008528:	6013      	str	r3, [r2, #0]
				if(chr == 'X')
 800852a:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 800852e:	443b      	add	r3, r7
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b58      	cmp	r3, #88	; 0x58
 8008534:	d141      	bne.n	80085ba <AoC_Day_10+0xe16>
				{
					// draw figure
					big_maze[index] = '#';
 8008536:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 800853a:	443b      	add	r3, r7
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008542:	443b      	add	r3, r7
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4413      	add	r3, r2
 8008548:	2223      	movs	r2, #35	; 0x23
 800854a:	701a      	strb	r2, [r3, #0]
					big_maze[index+1] = '#';
 800854c:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008550:	443b      	add	r3, r7
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 800855a:	443a      	add	r2, r7
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	4413      	add	r3, r2
 8008560:	2223      	movs	r2, #35	; 0x23
 8008562:	701a      	strb	r2, [r3, #0]
					big_maze[index-1] = '#';
 8008564:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008568:	443b      	add	r3, r7
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3b01      	subs	r3, #1
 800856e:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 8008572:	443a      	add	r2, r7
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	4413      	add	r3, r2
 8008578:	2223      	movs	r2, #35	; 0x23
 800857a:	701a      	strb	r2, [r3, #0]
					big_maze[index+(big_maze_width + 1)] = '#';
 800857c:	4b28      	ldr	r3, [pc, #160]	; (8008620 <AoC_Day_10+0xe7c>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008584:	443b      	add	r3, r7
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4413      	add	r3, r2
 800858a:	3301      	adds	r3, #1
 800858c:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 8008590:	443a      	add	r2, r7
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	4413      	add	r3, r2
 8008596:	2223      	movs	r2, #35	; 0x23
 8008598:	701a      	strb	r2, [r3, #0]
					big_maze[index-(big_maze_width + 1)] = '#';
 800859a:	4b21      	ldr	r3, [pc, #132]	; (8008620 <AoC_Day_10+0xe7c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f64b 629c 	movw	r2, #48796	; 0xbe9c
 80085a2:	443a      	add	r2, r7
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 80085ae:	443a      	add	r2, r7
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	4413      	add	r3, r2
 80085b4:	2223      	movs	r2, #35	; 0x23
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	e117      	b.n	80087ea <AoC_Day_10+0x1046>
				}
				else if(chr == 'i')
 80085ba:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80085be:	443b      	add	r3, r7
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b69      	cmp	r3, #105	; 0x69
 80085c4:	d132      	bne.n	800862c <AoC_Day_10+0xe88>
				{
					// draw figure
					big_maze[index] = '#';
 80085c6:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 80085ca:	443b      	add	r3, r7
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80085d2:	443b      	add	r3, r7
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4413      	add	r3, r2
 80085d8:	2223      	movs	r2, #35	; 0x23
 80085da:	701a      	strb	r2, [r3, #0]
					big_maze[index+(big_maze_width + 1)] = '#';
 80085dc:	4b10      	ldr	r3, [pc, #64]	; (8008620 <AoC_Day_10+0xe7c>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80085e4:	443b      	add	r3, r7
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4413      	add	r3, r2
 80085ea:	3301      	adds	r3, #1
 80085ec:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 80085f0:	443a      	add	r2, r7
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	2223      	movs	r2, #35	; 0x23
 80085f8:	701a      	strb	r2, [r3, #0]
					big_maze[index-(big_maze_width + 1)] = '#';
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <AoC_Day_10+0xe7c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f64b 629c 	movw	r2, #48796	; 0xbe9c
 8008602:	443a      	add	r2, r7
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 800860e:	443a      	add	r2, r7
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	4413      	add	r3, r2
 8008614:	2223      	movs	r2, #35	; 0x23
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e0e7      	b.n	80087ea <AoC_Day_10+0x1046>
 800861a:	bf00      	nop
 800861c:	20000b0c 	.word	0x20000b0c
 8008620:	20000b14 	.word	0x20000b14
 8008624:	20000b10 	.word	0x20000b10
 8008628:	20000b18 	.word	0x20000b18
				}
				else if(chr == 'r')
 800862c:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 8008630:	443b      	add	r3, r7
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b72      	cmp	r3, #114	; 0x72
 8008636:	d126      	bne.n	8008686 <AoC_Day_10+0xee2>
				{
					// draw figure
					big_maze[index] = '#';
 8008638:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 800863c:	443b      	add	r3, r7
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008644:	443b      	add	r3, r7
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4413      	add	r3, r2
 800864a:	2223      	movs	r2, #35	; 0x23
 800864c:	701a      	strb	r2, [r3, #0]
					big_maze[index+1] = '#';
 800864e:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008652:	443b      	add	r3, r7
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 800865c:	443a      	add	r2, r7
 800865e:	6812      	ldr	r2, [r2, #0]
 8008660:	4413      	add	r3, r2
 8008662:	2223      	movs	r2, #35	; 0x23
 8008664:	701a      	strb	r2, [r3, #0]
					big_maze[index+(big_maze_width + 1)] = '#';
 8008666:	4ba2      	ldr	r3, [pc, #648]	; (80088f0 <AoC_Day_10+0x114c>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 800866e:	443b      	add	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4413      	add	r3, r2
 8008674:	3301      	adds	r3, #1
 8008676:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 800867a:	443a      	add	r2, r7
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	4413      	add	r3, r2
 8008680:	2223      	movs	r2, #35	; 0x23
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	e0b1      	b.n	80087ea <AoC_Day_10+0x1046>
				}
				else if(chr == '?')
 8008686:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 800868a:	443b      	add	r3, r7
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b3f      	cmp	r3, #63	; 0x3f
 8008690:	d126      	bne.n	80086e0 <AoC_Day_10+0xf3c>
				{
					// draw figure
					big_maze[index] = '#';
 8008692:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 8008696:	443b      	add	r3, r7
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 800869e:	443b      	add	r3, r7
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4413      	add	r3, r2
 80086a4:	2223      	movs	r2, #35	; 0x23
 80086a6:	701a      	strb	r2, [r3, #0]
					big_maze[index-1] = '#';
 80086a8:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80086ac:	443b      	add	r3, r7
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 80086b6:	443a      	add	r2, r7
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	4413      	add	r3, r2
 80086bc:	2223      	movs	r2, #35	; 0x23
 80086be:	701a      	strb	r2, [r3, #0]
					big_maze[index+(big_maze_width + 1)] = '#';
 80086c0:	4b8b      	ldr	r3, [pc, #556]	; (80088f0 <AoC_Day_10+0x114c>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80086c8:	443b      	add	r3, r7
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4413      	add	r3, r2
 80086ce:	3301      	adds	r3, #1
 80086d0:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 80086d4:	443a      	add	r2, r7
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	4413      	add	r3, r2
 80086da:	2223      	movs	r2, #35	; 0x23
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e084      	b.n	80087ea <AoC_Day_10+0x1046>
				}
				else if(chr == 'l')
 80086e0:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 80086e4:	443b      	add	r3, r7
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b6c      	cmp	r3, #108	; 0x6c
 80086ea:	d126      	bne.n	800873a <AoC_Day_10+0xf96>
				{
					// draw figure
					big_maze[index] = '#';
 80086ec:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 80086f0:	443b      	add	r3, r7
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80086f8:	443b      	add	r3, r7
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4413      	add	r3, r2
 80086fe:	2223      	movs	r2, #35	; 0x23
 8008700:	701a      	strb	r2, [r3, #0]
					big_maze[index+1] = '#';
 8008702:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008706:	443b      	add	r3, r7
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 8008710:	443a      	add	r2, r7
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	4413      	add	r3, r2
 8008716:	2223      	movs	r2, #35	; 0x23
 8008718:	701a      	strb	r2, [r3, #0]
					big_maze[index-(big_maze_width + 1)] = '#';
 800871a:	4b75      	ldr	r3, [pc, #468]	; (80088f0 <AoC_Day_10+0x114c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f64b 629c 	movw	r2, #48796	; 0xbe9c
 8008722:	443a      	add	r2, r7
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 800872e:	443a      	add	r2, r7
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	4413      	add	r3, r2
 8008734:	2223      	movs	r2, #35	; 0x23
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	e057      	b.n	80087ea <AoC_Day_10+0x1046>
				}
				else if(chr == 'j')
 800873a:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 800873e:	443b      	add	r3, r7
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b6a      	cmp	r3, #106	; 0x6a
 8008744:	d126      	bne.n	8008794 <AoC_Day_10+0xff0>
				{
					// draw figure
					big_maze[index] = '#';
 8008746:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 800874a:	443b      	add	r3, r7
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008752:	443b      	add	r3, r7
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4413      	add	r3, r2
 8008758:	2223      	movs	r2, #35	; 0x23
 800875a:	701a      	strb	r2, [r3, #0]
					big_maze[index-1] = '#';
 800875c:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 8008760:	443b      	add	r3, r7
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3b01      	subs	r3, #1
 8008766:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 800876a:	443a      	add	r2, r7
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	4413      	add	r3, r2
 8008770:	2223      	movs	r2, #35	; 0x23
 8008772:	701a      	strb	r2, [r3, #0]
					big_maze[index-(big_maze_width + 1)] = '#';
 8008774:	4b5e      	ldr	r3, [pc, #376]	; (80088f0 <AoC_Day_10+0x114c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f64b 629c 	movw	r2, #48796	; 0xbe9c
 800877c:	443a      	add	r2, r7
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	3b01      	subs	r3, #1
 8008784:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 8008788:	443a      	add	r2, r7
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	4413      	add	r3, r2
 800878e:	2223      	movs	r2, #35	; 0x23
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	e02a      	b.n	80087ea <AoC_Day_10+0x1046>
				}
				else if(chr == '_')
 8008794:	f64b 63ab 	movw	r3, #48811	; 0xbeab
 8008798:	443b      	add	r3, r7
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b5f      	cmp	r3, #95	; 0x5f
 800879e:	d124      	bne.n	80087ea <AoC_Day_10+0x1046>
				{
					// draw figure
					big_maze[index] = '#';
 80087a0:	f64b 63b0 	movw	r3, #48816	; 0xbeb0
 80087a4:	443b      	add	r3, r7
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80087ac:	443b      	add	r3, r7
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4413      	add	r3, r2
 80087b2:	2223      	movs	r2, #35	; 0x23
 80087b4:	701a      	strb	r2, [r3, #0]
					big_maze[index+1] = '#';
 80087b6:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80087ba:	443b      	add	r3, r7
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3301      	adds	r3, #1
 80087c0:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 80087c4:	443a      	add	r2, r7
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	4413      	add	r3, r2
 80087ca:	2223      	movs	r2, #35	; 0x23
 80087cc:	701a      	strb	r2, [r3, #0]
					big_maze[index-1] = '#';
 80087ce:	f64b 639c 	movw	r3, #48796	; 0xbe9c
 80087d2:	443b      	add	r3, r7
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	f64b 62b0 	movw	r2, #48816	; 0xbeb0
 80087dc:	443a      	add	r2, r7
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	4413      	add	r3, r2
 80087e2:	2223      	movs	r2, #35	; 0x23
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	e000      	b.n	80087ea <AoC_Day_10+0x1046>
					continue;
 80087e8:	bf00      	nop
			for(uint32_t position_y=0; position_y<maze_depth; position_y++)
 80087ea:	f64b 63e8 	movw	r3, #48872	; 0xbee8
 80087ee:	443b      	add	r3, r7
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	f64b 62e8 	movw	r2, #48872	; 0xbee8
 80087f8:	443a      	add	r2, r7
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	4b3d      	ldr	r3, [pc, #244]	; (80088f4 <AoC_Day_10+0x1150>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f64b 62e8 	movw	r2, #48872	; 0xbee8
 8008804:	443a      	add	r2, r7
 8008806:	6812      	ldr	r2, [r2, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	f4ff ae15 	bcc.w	8008438 <AoC_Day_10+0xc94>
		for(uint32_t position_x=0; position_x<maze_width; position_x++)
 800880e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
 8008812:	443b      	add	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	f64b 62ec 	movw	r2, #48876	; 0xbeec
 800881c:	443a      	add	r2, r7
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	4b35      	ldr	r3, [pc, #212]	; (80088f8 <AoC_Day_10+0x1154>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f64b 62ec 	movw	r2, #48876	; 0xbeec
 8008828:	443a      	add	r2, r7
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	f4ff adfd 	bcc.w	800842c <AoC_Day_10+0xc88>
			}
		}

		// flood fill
		Position_t queue[4000];
		uint32_t write_ptr = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 8008838:	443a      	add	r2, r7
 800883a:	6013      	str	r3, [r2, #0]
		uint32_t read_ptr = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	f64b 62e0 	movw	r2, #48864	; 0xbee0
 8008842:	443a      	add	r2, r7
 8008844:	6013      	str	r3, [r2, #0]

		// add ptr
		setBigMazePosition(big_maze, (Position_t){0, 0, 0}, '~');
 8008846:	2300      	movs	r3, #0
 8008848:	f64b 625c 	movw	r2, #48732	; 0xbe5c
 800884c:	443a      	add	r2, r7
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	2300      	movs	r3, #0
 8008852:	f64b 6260 	movw	r2, #48736	; 0xbe60
 8008856:	443a      	add	r2, r7
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	f64b 6264 	movw	r2, #48740	; 0xbe64
 8008860:	443a      	add	r2, r7
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	237e      	movs	r3, #126	; 0x7e
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	f64b 635c 	movw	r3, #48732	; 0xbe5c
 800886c:	443b      	add	r3, r7
 800886e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008870:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008874:	4438      	add	r0, r7
 8008876:	6800      	ldr	r0, [r0, #0]
 8008878:	f7fe fe76 	bl	8007568 <setBigMazePosition>
		queue[write_ptr] = (Position_t){0, 0, 0};
 800887c:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8008880:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 8008884:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008888:	443b      	add	r3, r7
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4613      	mov	r3, r2
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 800889e:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 80088a2:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 80088a6:	443b      	add	r3, r7
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4613      	mov	r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3304      	adds	r3, #4
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 80088be:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 80088c2:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 80088c6:	443b      	add	r3, r7
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4613      	mov	r3, r2
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	3308      	adds	r3, #8
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
		write_ptr++;
 80088da:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 80088de:	443b      	add	r3, r7
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 80088e8:	443a      	add	r2, r7
 80088ea:	6013      	str	r3, [r2, #0]

		while(write_ptr != read_ptr)
 80088ec:	e1f7      	b.n	8008cde <AoC_Day_10+0x153a>
 80088ee:	bf00      	nop
 80088f0:	20000b14 	.word	0x20000b14
 80088f4:	20000b10 	.word	0x20000b10
 80088f8:	20000b0c 	.word	0x20000b0c
		{
			Position_t position = queue[read_ptr];
 80088fc:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8008900:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 8008904:	f64b 63e0 	movw	r3, #48864	; 0xbee0
 8008908:	443b      	add	r3, r7
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	18ca      	adds	r2, r1, r3
 8008916:	f64b 6338 	movw	r3, #48696	; 0xbe38
 800891a:	443b      	add	r3, r7
 800891c:	ca07      	ldmia	r2, {r0, r1, r2}
 800891e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			read_ptr = (read_ptr + 1) % 4000;
 8008922:	f64b 63e0 	movw	r3, #48864	; 0xbee0
 8008926:	443b      	add	r3, r7
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3301      	adds	r3, #1
 800892c:	4ab1      	ldr	r2, [pc, #708]	; (8008bf4 <AoC_Day_10+0x1450>)
 800892e:	fba2 1203 	umull	r1, r2, r2, r3
 8008932:	0a12      	lsrs	r2, r2, #8
 8008934:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008938:	fb01 f202 	mul.w	r2, r1, r2
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	f64b 62e0 	movw	r2, #48864	; 0xbee0
 8008942:	443a      	add	r2, r7
 8008944:	6013      	str	r3, [r2, #0]

			// check positions
			if(position.y > 0)
 8008946:	f64b 633c 	movw	r3, #48700	; 0xbe3c
 800894a:	443b      	add	r3, r7
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d063      	beq.n	8008a1a <AoC_Day_10+0x1276>
			{
				Position_t new_pos = {position.x, position.y-1, 1};
 8008952:	f64b 6338 	movw	r3, #48696	; 0xbe38
 8008956:	443b      	add	r3, r7
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f64b 622c 	movw	r2, #48684	; 0xbe2c
 800895e:	443a      	add	r2, r7
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	f64b 633c 	movw	r3, #48700	; 0xbe3c
 8008966:	443b      	add	r3, r7
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3b01      	subs	r3, #1
 800896c:	f64b 6230 	movw	r2, #48688	; 0xbe30
 8008970:	443a      	add	r2, r7
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	2301      	movs	r3, #1
 8008976:	f64b 6234 	movw	r2, #48692	; 0xbe34
 800897a:	443a      	add	r2, r7
 800897c:	6013      	str	r3, [r2, #0]
				char chr = getBigMazePosition(big_maze, new_pos);
 800897e:	f64b 632c 	movw	r3, #48684	; 0xbe2c
 8008982:	443b      	add	r3, r7
 8008984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008986:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 800898a:	4438      	add	r0, r7
 800898c:	6800      	ldr	r0, [r0, #0]
 800898e:	f7fe fdcf 	bl	8007530 <getBigMazePosition>
 8008992:	4603      	mov	r3, r0
 8008994:	f64b 62af 	movw	r2, #48815	; 0xbeaf
 8008998:	443a      	add	r2, r7
 800899a:	7013      	strb	r3, [r2, #0]
				if(chr != '#' && chr !='~')
 800899c:	f64b 63af 	movw	r3, #48815	; 0xbeaf
 80089a0:	443b      	add	r3, r7
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b23      	cmp	r3, #35	; 0x23
 80089a6:	d038      	beq.n	8008a1a <AoC_Day_10+0x1276>
 80089a8:	f64b 63af 	movw	r3, #48815	; 0xbeaf
 80089ac:	443b      	add	r3, r7
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b7e      	cmp	r3, #126	; 0x7e
 80089b2:	d032      	beq.n	8008a1a <AoC_Day_10+0x1276>
				{
					// push position to queue
					setBigMazePosition(big_maze, new_pos, '~');
 80089b4:	237e      	movs	r3, #126	; 0x7e
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	f64b 632c 	movw	r3, #48684	; 0xbe2c
 80089bc:	443b      	add	r3, r7
 80089be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089c0:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 80089c4:	4438      	add	r0, r7
 80089c6:	6800      	ldr	r0, [r0, #0]
 80089c8:	f7fe fdce 	bl	8007568 <setBigMazePosition>
					queue[write_ptr] = new_pos;
 80089cc:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 80089d0:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 80089d4:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 80089d8:	443b      	add	r3, r7
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4613      	mov	r3, r2
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	461c      	mov	r4, r3
 80089e8:	f64b 632c 	movw	r3, #48684	; 0xbe2c
 80089ec:	443b      	add	r3, r7
 80089ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					write_ptr = (write_ptr + 1) % 4000;
 80089f6:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 80089fa:	443b      	add	r3, r7
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	4a7c      	ldr	r2, [pc, #496]	; (8008bf4 <AoC_Day_10+0x1450>)
 8008a02:	fba2 1203 	umull	r1, r2, r2, r3
 8008a06:	0a12      	lsrs	r2, r2, #8
 8008a08:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008a0c:	fb01 f202 	mul.w	r2, r1, r2
 8008a10:	1a9b      	subs	r3, r3, r2
 8008a12:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 8008a16:	443a      	add	r2, r7
 8008a18:	6013      	str	r3, [r2, #0]
				}
			}
			if(position.y+1 < big_maze_depth)
 8008a1a:	f64b 633c 	movw	r3, #48700	; 0xbe3c
 8008a1e:	443b      	add	r3, r7
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	4b74      	ldr	r3, [pc, #464]	; (8008bf8 <AoC_Day_10+0x1454>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d263      	bcs.n	8008af4 <AoC_Day_10+0x1350>
			{
				Position_t new_pos = {position.x, position.y+1, 1};
 8008a2c:	f64b 6338 	movw	r3, #48696	; 0xbe38
 8008a30:	443b      	add	r3, r7
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f64b 6220 	movw	r2, #48672	; 0xbe20
 8008a38:	443a      	add	r2, r7
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	f64b 633c 	movw	r3, #48700	; 0xbe3c
 8008a40:	443b      	add	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3301      	adds	r3, #1
 8008a46:	f64b 6224 	movw	r2, #48676	; 0xbe24
 8008a4a:	443a      	add	r2, r7
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f64b 6228 	movw	r2, #48680	; 0xbe28
 8008a54:	443a      	add	r2, r7
 8008a56:	6013      	str	r3, [r2, #0]
				char chr = getBigMazePosition(big_maze, new_pos);
 8008a58:	f64b 6320 	movw	r3, #48672	; 0xbe20
 8008a5c:	443b      	add	r3, r7
 8008a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a60:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008a64:	4438      	add	r0, r7
 8008a66:	6800      	ldr	r0, [r0, #0]
 8008a68:	f7fe fd62 	bl	8007530 <getBigMazePosition>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f64b 62ae 	movw	r2, #48814	; 0xbeae
 8008a72:	443a      	add	r2, r7
 8008a74:	7013      	strb	r3, [r2, #0]
				if(chr != '#' && chr !='~')
 8008a76:	f64b 63ae 	movw	r3, #48814	; 0xbeae
 8008a7a:	443b      	add	r3, r7
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b23      	cmp	r3, #35	; 0x23
 8008a80:	d038      	beq.n	8008af4 <AoC_Day_10+0x1350>
 8008a82:	f64b 63ae 	movw	r3, #48814	; 0xbeae
 8008a86:	443b      	add	r3, r7
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b7e      	cmp	r3, #126	; 0x7e
 8008a8c:	d032      	beq.n	8008af4 <AoC_Day_10+0x1350>
				{
					// push position to queue
					setBigMazePosition(big_maze, new_pos, '~');
 8008a8e:	237e      	movs	r3, #126	; 0x7e
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	f64b 6320 	movw	r3, #48672	; 0xbe20
 8008a96:	443b      	add	r3, r7
 8008a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a9a:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008a9e:	4438      	add	r0, r7
 8008aa0:	6800      	ldr	r0, [r0, #0]
 8008aa2:	f7fe fd61 	bl	8007568 <setBigMazePosition>
					queue[write_ptr] = new_pos;
 8008aa6:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8008aaa:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 8008aae:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008ab2:	443b      	add	r3, r7
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	461c      	mov	r4, r3
 8008ac2:	f64b 6320 	movw	r3, #48672	; 0xbe20
 8008ac6:	443b      	add	r3, r7
 8008ac8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008acc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					write_ptr = (write_ptr + 1) % 4000;
 8008ad0:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008ad4:	443b      	add	r3, r7
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	4a46      	ldr	r2, [pc, #280]	; (8008bf4 <AoC_Day_10+0x1450>)
 8008adc:	fba2 1203 	umull	r1, r2, r2, r3
 8008ae0:	0a12      	lsrs	r2, r2, #8
 8008ae2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008ae6:	fb01 f202 	mul.w	r2, r1, r2
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 8008af0:	443a      	add	r2, r7
 8008af2:	6013      	str	r3, [r2, #0]
				}
			}
			if(position.x > 0)
 8008af4:	f64b 6338 	movw	r3, #48696	; 0xbe38
 8008af8:	443b      	add	r3, r7
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d06e      	beq.n	8008bde <AoC_Day_10+0x143a>
			{
				Position_t new_pos = {position.x-1, position.y, 1};
 8008b00:	f64b 6338 	movw	r3, #48696	; 0xbe38
 8008b04:	443b      	add	r3, r7
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	1e5a      	subs	r2, r3, #1
 8008b0a:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008b0e:	443b      	add	r3, r7
 8008b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	f64b 633c 	movw	r3, #48700	; 0xbe3c
 8008b1a:	443b      	add	r3, r7
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008b22:	443b      	add	r3, r7
 8008b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008b2e:	443b      	add	r3, r7
 8008b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b34:	2201      	movs	r2, #1
 8008b36:	609a      	str	r2, [r3, #8]
				char chr = getBigMazePosition(big_maze, new_pos);
 8008b38:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008b3c:	443b      	add	r3, r7
 8008b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b44:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008b48:	4438      	add	r0, r7
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	f7fe fcf0 	bl	8007530 <getBigMazePosition>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f64b 62ad 	movw	r2, #48813	; 0xbead
 8008b56:	443a      	add	r2, r7
 8008b58:	7013      	strb	r3, [r2, #0]
				if(chr != '#' && chr !='~')
 8008b5a:	f64b 63ad 	movw	r3, #48813	; 0xbead
 8008b5e:	443b      	add	r3, r7
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b23      	cmp	r3, #35	; 0x23
 8008b64:	d03b      	beq.n	8008bde <AoC_Day_10+0x143a>
 8008b66:	f64b 63ad 	movw	r3, #48813	; 0xbead
 8008b6a:	443b      	add	r3, r7
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b7e      	cmp	r3, #126	; 0x7e
 8008b70:	d035      	beq.n	8008bde <AoC_Day_10+0x143a>
				{
					// push position to queue
					setBigMazePosition(big_maze, new_pos, '~');
 8008b72:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008b76:	443b      	add	r3, r7
 8008b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b7c:	227e      	movs	r2, #126	; 0x7e
 8008b7e:	9200      	str	r2, [sp, #0]
 8008b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b82:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008b86:	4438      	add	r0, r7
 8008b88:	6800      	ldr	r0, [r0, #0]
 8008b8a:	f7fe fced 	bl	8007568 <setBigMazePosition>
					queue[write_ptr] = new_pos;
 8008b8e:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8008b92:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 8008b96:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008b9a:	443b      	add	r3, r7
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4419      	add	r1, r3
 8008ba8:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008bac:	443b      	add	r3, r7
 8008bae:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					write_ptr = (write_ptr + 1) % 4000;
 8008bba:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008bbe:	443b      	add	r3, r7
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4a0b      	ldr	r2, [pc, #44]	; (8008bf4 <AoC_Day_10+0x1450>)
 8008bc6:	fba2 1203 	umull	r1, r2, r2, r3
 8008bca:	0a12      	lsrs	r2, r2, #8
 8008bcc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008bd0:	fb01 f202 	mul.w	r2, r1, r2
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 8008bda:	443a      	add	r2, r7
 8008bdc:	6013      	str	r3, [r2, #0]
				}
			}
			if(position.x + 1 < big_maze_width)
 8008bde:	f64b 6338 	movw	r3, #48696	; 0xbe38
 8008be2:	443b      	add	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <AoC_Day_10+0x1458>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d276      	bcs.n	8008cde <AoC_Day_10+0x153a>
 8008bf0:	e006      	b.n	8008c00 <AoC_Day_10+0x145c>
 8008bf2:	bf00      	nop
 8008bf4:	10624dd3 	.word	0x10624dd3
 8008bf8:	20000b18 	.word	0x20000b18
 8008bfc:	20000b14 	.word	0x20000b14
			{
				Position_t new_pos = {position.x+1, position.y, 1};
 8008c00:	f64b 6338 	movw	r3, #48696	; 0xbe38
 8008c04:	443b      	add	r3, r7
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008c0e:	443b      	add	r3, r7
 8008c10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f64b 633c 	movw	r3, #48700	; 0xbe3c
 8008c1a:	443b      	add	r3, r7
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008c22:	443b      	add	r3, r7
 8008c24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c28:	605a      	str	r2, [r3, #4]
 8008c2a:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008c2e:	443b      	add	r3, r7
 8008c30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c34:	2201      	movs	r2, #1
 8008c36:	609a      	str	r2, [r3, #8]
				char chr = getBigMazePosition(big_maze, new_pos);
 8008c38:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008c3c:	443b      	add	r3, r7
 8008c3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c44:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008c48:	4438      	add	r0, r7
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	f7fe fc70 	bl	8007530 <getBigMazePosition>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f64b 62ac 	movw	r2, #48812	; 0xbeac
 8008c56:	443a      	add	r2, r7
 8008c58:	7013      	strb	r3, [r2, #0]
				if(chr != '#' && chr !='~')
 8008c5a:	f64b 63ac 	movw	r3, #48812	; 0xbeac
 8008c5e:	443b      	add	r3, r7
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b23      	cmp	r3, #35	; 0x23
 8008c64:	d03b      	beq.n	8008cde <AoC_Day_10+0x153a>
 8008c66:	f64b 63ac 	movw	r3, #48812	; 0xbeac
 8008c6a:	443b      	add	r3, r7
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b7e      	cmp	r3, #126	; 0x7e
 8008c70:	d035      	beq.n	8008cde <AoC_Day_10+0x153a>
				{
					// push position to queue
					setBigMazePosition(big_maze, new_pos, '~');
 8008c72:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008c76:	443b      	add	r3, r7
 8008c78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c7c:	227e      	movs	r2, #126	; 0x7e
 8008c7e:	9200      	str	r2, [sp, #0]
 8008c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c82:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008c86:	4438      	add	r0, r7
 8008c88:	6800      	ldr	r0, [r0, #0]
 8008c8a:	f7fe fc6d 	bl	8007568 <setBigMazePosition>
					queue[write_ptr] = new_pos;
 8008c8e:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8008c92:	f6a3 419c 	subw	r1, r3, #3228	; 0xc9c
 8008c96:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008c9a:	443b      	add	r3, r7
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4419      	add	r1, r3
 8008ca8:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008cac:	443b      	add	r3, r7
 8008cae:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					write_ptr = (write_ptr + 1) % 4000;
 8008cba:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008cbe:	443b      	add	r3, r7
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	4a5b      	ldr	r2, [pc, #364]	; (8008e34 <AoC_Day_10+0x1690>)
 8008cc6:	fba2 1203 	umull	r1, r2, r2, r3
 8008cca:	0a12      	lsrs	r2, r2, #8
 8008ccc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008cd0:	fb01 f202 	mul.w	r2, r1, r2
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	f64b 62e4 	movw	r2, #48868	; 0xbee4
 8008cda:	443a      	add	r2, r7
 8008cdc:	6013      	str	r3, [r2, #0]
		while(write_ptr != read_ptr)
 8008cde:	f64b 63e4 	movw	r3, #48868	; 0xbee4
 8008ce2:	443b      	add	r3, r7
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	f64b 63e0 	movw	r3, #48864	; 0xbee0
 8008cea:	443b      	add	r3, r7
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	f47f ae04 	bne.w	80088fc <AoC_Day_10+0x1158>
				}
			}
		}

		// count all fills
		uint32_t empty_counter = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f64b 62dc 	movw	r2, #48860	; 0xbedc
 8008cfa:	443a      	add	r2, r7
 8008cfc:	6013      	str	r3, [r2, #0]
		for(uint32_t position_x=0; position_x<maze_width; position_x++)
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f64b 62d8 	movw	r2, #48856	; 0xbed8
 8008d04:	443a      	add	r2, r7
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	e05a      	b.n	8008dc0 <AoC_Day_10+0x161c>
			for(uint32_t position_y=0; position_y<maze_depth; position_y++)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f64b 62d4 	movw	r2, #48852	; 0xbed4
 8008d10:	443a      	add	r2, r7
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	e043      	b.n	8008d9e <AoC_Day_10+0x15fa>
				if(getBigMazePosition(big_maze, (Position_t){position_x * 3 + 1, position_y * 3 + 1, 0}) == '.')
 8008d16:	f64b 63d8 	movw	r3, #48856	; 0xbed8
 8008d1a:	443b      	add	r3, r7
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	4413      	add	r3, r2
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008d2a:	443b      	add	r3, r7
 8008d2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f64b 63d4 	movw	r3, #48852	; 0xbed4
 8008d36:	443b      	add	r3, r7
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	4413      	add	r3, r2
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008d46:	443b      	add	r3, r7
 8008d48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d4c:	605a      	str	r2, [r3, #4]
 8008d4e:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008d52:	443b      	add	r3, r7
 8008d54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d58:	2200      	movs	r2, #0
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	f64b 7318 	movw	r3, #48920	; 0xbf18
 8008d60:	443b      	add	r3, r7
 8008d62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d68:	f64b 60b0 	movw	r0, #48816	; 0xbeb0
 8008d6c:	4438      	add	r0, r7
 8008d6e:	6800      	ldr	r0, [r0, #0]
 8008d70:	f7fe fbde 	bl	8007530 <getBigMazePosition>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b2e      	cmp	r3, #46	; 0x2e
 8008d78:	d108      	bne.n	8008d8c <AoC_Day_10+0x15e8>
					empty_counter++;
 8008d7a:	f64b 63dc 	movw	r3, #48860	; 0xbedc
 8008d7e:	443b      	add	r3, r7
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	f64b 62dc 	movw	r2, #48860	; 0xbedc
 8008d88:	443a      	add	r2, r7
 8008d8a:	6013      	str	r3, [r2, #0]
			for(uint32_t position_y=0; position_y<maze_depth; position_y++)
 8008d8c:	f64b 63d4 	movw	r3, #48852	; 0xbed4
 8008d90:	443b      	add	r3, r7
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3301      	adds	r3, #1
 8008d96:	f64b 62d4 	movw	r2, #48852	; 0xbed4
 8008d9a:	443a      	add	r2, r7
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <AoC_Day_10+0x1694>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f64b 62d4 	movw	r2, #48852	; 0xbed4
 8008da6:	443a      	add	r2, r7
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d3b3      	bcc.n	8008d16 <AoC_Day_10+0x1572>
		for(uint32_t position_x=0; position_x<maze_width; position_x++)
 8008dae:	f64b 63d8 	movw	r3, #48856	; 0xbed8
 8008db2:	443b      	add	r3, r7
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3301      	adds	r3, #1
 8008db8:	f64b 62d8 	movw	r2, #48856	; 0xbed8
 8008dbc:	443a      	add	r2, r7
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	4b1e      	ldr	r3, [pc, #120]	; (8008e3c <AoC_Day_10+0x1698>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f64b 62d8 	movw	r2, #48856	; 0xbed8
 8008dc8:	443a      	add	r2, r7
 8008dca:	6812      	ldr	r2, [r2, #0]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d39c      	bcc.n	8008d0a <AoC_Day_10+0x1566>

		// output answer
		char answer[64];
		sprintf(answer, "    Part 2 answer: %lu\n", empty_counter);
 8008dd0:	4b1b      	ldr	r3, [pc, #108]	; (8008e40 <AoC_Day_10+0x169c>)
 8008dd2:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8008dd6:	f103 0318 	add.w	r3, r3, #24
 8008dda:	443b      	add	r3, r7
 8008ddc:	f64b 62dc 	movw	r2, #48860	; 0xbedc
 8008de0:	443a      	add	r2, r7
 8008de2:	6812      	ldr	r2, [r2, #0]
 8008de4:	4917      	ldr	r1, [pc, #92]	; (8008e44 <AoC_Day_10+0x16a0>)
 8008de6:	4618      	mov	r0, r3
 8008de8:	f016 faae 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8008dec:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <AoC_Day_10+0x169c>)
 8008dee:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8008df2:	f103 0318 	add.w	r3, r3, #24
 8008df6:	443b      	add	r3, r7
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7f7 fa09 	bl	8000210 <strlen>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4619      	mov	r1, r3
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <AoC_Day_10+0x169c>)
 8008e04:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8008e08:	f103 0318 	add.w	r3, r3, #24
 8008e0c:	443b      	add	r3, r7
 8008e0e:	f607 7218 	addw	r2, r7, #3864	; 0xf18
 8008e12:	f6a2 7211 	subw	r2, r2, #3857	; 0xf11
 8008e16:	7810      	ldrb	r0, [r2, #0]
 8008e18:	460a      	mov	r2, r1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f7f8 fa0a 	bl	8001234 <AdventOfCode_print>

		// clean up
		sram_clrmem();
 8008e20:	f001 f9d0 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	f507 473f 	add.w	r7, r7, #48896	; 0xbf00
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd90      	pop	{r4, r7, pc}
 8008e32:	bf00      	nop
 8008e34:	10624dd3 	.word	0x10624dd3
 8008e38:	20000b10 	.word	0x20000b10
 8008e3c:	20000b0c 	.word	0x20000b0c
 8008e40:	ffff40f4 	.word	0xffff40f4
 8008e44:	08025164 	.word	0x08025164

08008e48 <distance>:
		HAL_Delay(10);
	}
}

uint32_t distance(Galaxy_t *galaxy0, Galaxy_t* galaxy1)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	uint32_t offset_x = abs(galaxy0->x - galaxy1->x);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfb8      	it	lt
 8008e60:	425b      	neglt	r3, r3
 8008e62:	60fb      	str	r3, [r7, #12]
	uint32_t offset_y = abs(galaxy0->y - galaxy1->y);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfb8      	it	lt
 8008e72:	425b      	neglt	r3, r3
 8008e74:	60bb      	str	r3, [r7, #8]
	return offset_x + offset_y;
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4413      	add	r3, r2
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <AoC_Day_11>:

AdventOfCode_return_t AoC_Day_11(AdventOfCode_config_t config)
{
 8008e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e8c:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4602      	mov	r2, r0
 8008e94:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8008e98:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8008e9c:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8008e9e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8008ea2:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <AoC_Day_11+0x28>
		return AOC_RETURN_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e3d1      	b.n	8009654 <AoC_Day_11+0x7cc>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8008eb0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8008eb4:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d10a      	bne.n	8008ed4 <AoC_Day_11+0x4c>
			ret = f_open(&file, "day11t.txt", FA_READ);
 8008ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	49ba      	ldr	r1, [pc, #744]	; (80091b0 <AoC_Day_11+0x328>)
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f013 ff46 	bl	801cd58 <f_open>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 8008ed2:	e009      	b.n	8008ee8 <AoC_Day_11+0x60>
		else ret = f_open(&file, "day11.txt", FA_READ);
 8008ed4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ed8:	2201      	movs	r2, #1
 8008eda:	49b6      	ldr	r1, [pc, #728]	; (80091b4 <AoC_Day_11+0x32c>)
 8008edc:	4618      	mov	r0, r3
 8008ede:	f013 ff3b 	bl	801cd58 <f_open>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
		if(ret != FR_OK)
 8008ee8:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <AoC_Day_11+0x80>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8008ef0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8008ef4:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2213      	movs	r2, #19
 8008efc:	49ae      	ldr	r1, [pc, #696]	; (80091b8 <AoC_Day_11+0x330>)
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f8 f998 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e3a5      	b.n	8009654 <AoC_Day_11+0x7cc>
		}

		// get file length
		int32_t file_size = f_size(&file);
 8008f08:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8008f0c:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc

		// extract data
		char *space = (char*)sram_malloc(file_size + 1);
 8008f16:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 f90d 	bl	800a13c <sram_malloc>
 8008f22:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8

		// insert data
		f_read(&file, space, file_size + 1, NULL);
 8008f26:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008f32:	2300      	movs	r3, #0
 8008f34:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8008f38:	f014 f8cc 	bl	801d0d4 <f_read>

		// close file
		f_close(&file);
 8008f3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f40:	4618      	mov	r0, r3
 8008f42:	f014 fbf9 	bl	801d738 <f_close>

		// get space dimensions and insert line ends
		char *token = strtok(space, "\n");
 8008f46:	499d      	ldr	r1, [pc, #628]	; (80091bc <AoC_Day_11+0x334>)
 8008f48:	f8d7 02c8 	ldr.w	r0, [r7, #712]	; 0x2c8
 8008f4c:	f016 fa2c 	bl	801f3a8 <strtok>
 8008f50:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
		uint32_t space_width = strlen(token);
 8008f54:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 8008f58:	f7f7 f95a 	bl	8000210 <strlen>
 8008f5c:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
		uint32_t counter = 1;
 8008f60:	2301      	movs	r3, #1
 8008f62:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		while(strtok(NULL, "\n"))
 8008f66:	e004      	b.n	8008f72 <AoC_Day_11+0xea>
			counter++;
 8008f68:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		while(strtok(NULL, "\n"))
 8008f72:	4992      	ldr	r1, [pc, #584]	; (80091bc <AoC_Day_11+0x334>)
 8008f74:	2000      	movs	r0, #0
 8008f76:	f016 fa17 	bl	801f3a8 <strtok>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1f3      	bne.n	8008f68 <AoC_Day_11+0xe0>

		// count galaxies
		uint32_t total_galaxies = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
		for(uint32_t x=0; x<space_width; x++)
 8008f86:	2300      	movs	r3, #0
 8008f88:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8008f8c:	e028      	b.n	8008fe0 <AoC_Day_11+0x158>
			for(uint32_t y=0; y<space_width; y++)
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8008f94:	e019      	b.n	8008fca <AoC_Day_11+0x142>
				if(space[y * (space_width + 1) + x] == '#')
 8008f96:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8008fa0:	fb03 f202 	mul.w	r2, r3, r2
 8008fa4:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8008fa8:	4413      	add	r3, r2
 8008faa:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8008fae:	4413      	add	r3, r2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b23      	cmp	r3, #35	; 0x23
 8008fb4:	d104      	bne.n	8008fc0 <AoC_Day_11+0x138>
					total_galaxies++;
 8008fb6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8008fba:	3301      	adds	r3, #1
 8008fbc:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
			for(uint32_t y=0; y<space_width; y++)
 8008fc0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8008fca:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8008fce:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d3df      	bcc.n	8008f96 <AoC_Day_11+0x10e>
		for(uint32_t x=0; x<space_width; x++)
 8008fd6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8008fda:	3301      	adds	r3, #1
 8008fdc:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8008fe0:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8008fe4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d3d0      	bcc.n	8008f8e <AoC_Day_11+0x106>

		// create galaxy entites
		uint32_t galaxy_ptr = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
		Galaxy_t *galaxies = (Galaxy_t*)sram_calloc(total_galaxies, sizeof(Galaxy_t));
 8008ff2:	2110      	movs	r1, #16
 8008ff4:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 8008ff8:	f001 f8c6 	bl	800a188 <sram_calloc>
 8008ffc:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc

		// process X coordinates
		uint32_t current_x = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		for(uint32_t x=0; x<space_width; x++)
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800900c:	e04c      	b.n	80090a8 <AoC_Day_11+0x220>
		{
			uint32_t is_empty = 1;
 800900e:	2301      	movs	r3, #1
 8009010:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
			for(uint32_t y=0; y<space_width; y++)
 8009014:	2300      	movs	r3, #0
 8009016:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800901a:	e032      	b.n	8009082 <AoC_Day_11+0x1fa>
			{
				uint32_t index = y * (space_width + 1) + x;
 800901c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8009020:	3301      	adds	r3, #1
 8009022:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 800902e:	4413      	add	r3, r2
 8009030:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
				if(space[index] == '#')
 8009034:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8009038:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800903c:	4413      	add	r3, r2
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b23      	cmp	r3, #35	; 0x23
 8009042:	d119      	bne.n	8009078 <AoC_Day_11+0x1f0>
				{
					is_empty = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
					galaxies[galaxy_ptr].id = index;
 800904a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8009054:	4413      	add	r3, r2
 8009056:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800905a:	601a      	str	r2, [r3, #0]
					galaxies[galaxy_ptr].x = current_x;
 800905c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8009066:	4413      	add	r3, r2
 8009068:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 800906c:	605a      	str	r2, [r3, #4]
					galaxy_ptr++;
 800906e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8009072:	3301      	adds	r3, #1
 8009074:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
			for(uint32_t y=0; y<space_width; y++)
 8009078:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800907c:	3301      	adds	r3, #1
 800907e:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8009082:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8009086:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800908a:	429a      	cmp	r2, r3
 800908c:	d3c6      	bcc.n	800901c <AoC_Day_11+0x194>
				}
			}
			current_x += 1 + is_empty;
 800908e:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8009092:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8009096:	4413      	add	r3, r2
 8009098:	3301      	adds	r3, #1
 800909a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
		for(uint32_t x=0; x<space_width; x++)
 800909e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80090a2:	3301      	adds	r3, #1
 80090a4:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80090a8:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 80090ac:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3ac      	bcc.n	800900e <AoC_Day_11+0x186>
		}

		// process Y coordinates
		uint32_t current_y = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
		for(uint32_t y=0; y<space_width; y++)
 80090ba:	2300      	movs	r3, #0
 80090bc:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80090c0:	e05f      	b.n	8009182 <AoC_Day_11+0x2fa>
		{
			uint32_t is_empty = 1;
 80090c2:	2301      	movs	r3, #1
 80090c4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
			for(uint32_t x=0; x<space_width; x++)
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80090ce:	e045      	b.n	800915c <AoC_Day_11+0x2d4>
			{
				uint32_t index = y * (space_width + 1) + x;
 80090d0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80090d4:	3301      	adds	r3, #1
 80090d6:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80090e2:	4413      	add	r3, r2
 80090e4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
				if(space[index] == '#')
 80090e8:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80090ec:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80090f0:	4413      	add	r3, r2
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b23      	cmp	r3, #35	; 0x23
 80090f6:	d12c      	bne.n	8009152 <AoC_Day_11+0x2ca>
				{
					// locate galaxy id
					galaxy_ptr = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
					for(; galaxy_ptr<total_galaxies; galaxy_ptr++)
 80090fe:	e00f      	b.n	8009120 <AoC_Day_11+0x298>
						if(galaxies[galaxy_ptr].id == index)
 8009100:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800910a:	4413      	add	r3, r2
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009112:	429a      	cmp	r2, r3
 8009114:	d00b      	beq.n	800912e <AoC_Day_11+0x2a6>
					for(; galaxy_ptr<total_galaxies; galaxy_ptr++)
 8009116:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800911a:	3301      	adds	r3, #1
 800911c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8009120:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8009124:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8009128:	429a      	cmp	r2, r3
 800912a:	d3e9      	bcc.n	8009100 <AoC_Day_11+0x278>
 800912c:	e000      	b.n	8009130 <AoC_Day_11+0x2a8>
							break;
 800912e:	bf00      	nop

					is_empty = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
					galaxies[galaxy_ptr].y = current_y;
 8009136:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8009140:	4413      	add	r3, r2
 8009142:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8009146:	609a      	str	r2, [r3, #8]
					galaxy_ptr++;
 8009148:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800914c:	3301      	adds	r3, #1
 800914e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
			for(uint32_t x=0; x<space_width; x++)
 8009152:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8009156:	3301      	adds	r3, #1
 8009158:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 800915c:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8009160:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8009164:	429a      	cmp	r2, r3
 8009166:	d3b3      	bcc.n	80090d0 <AoC_Day_11+0x248>
				}
			}
			current_y += 1 + is_empty;
 8009168:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800916c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8009170:	4413      	add	r3, r2
 8009172:	3301      	adds	r3, #1
 8009174:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
		for(uint32_t y=0; y<space_width; y++)
 8009178:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800917c:	3301      	adds	r3, #1
 800917e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8009182:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8009186:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800918a:	429a      	cmp	r2, r3
 800918c:	d399      	bcc.n	80090c2 <AoC_Day_11+0x23a>
		}

		// process pairs
		uint64_t total_distance = 0;
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
		for(uint32_t i=0; i<total_galaxies; i++)
 800919a:	2300      	movs	r3, #0
 800919c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80091a0:	e047      	b.n	8009232 <AoC_Day_11+0x3aa>
		{
			for(uint32_t j=i+1; j<total_galaxies; j++)
 80091a2:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80091a6:	3301      	adds	r3, #1
 80091a8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80091ac:	e036      	b.n	800921c <AoC_Day_11+0x394>
 80091ae:	bf00      	nop
 80091b0:	08025180 	.word	0x08025180
 80091b4:	0802518c 	.word	0x0802518c
 80091b8:	08025198 	.word	0x08025198
 80091bc:	080251b0 	.word	0x080251b0
			{
				Galaxy_t *galaxy0 = &galaxies[i];
 80091c0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80091ca:	4413      	add	r3, r2
 80091cc:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				Galaxy_t *galaxy1 = &galaxies[j];
 80091d0:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80091da:	4413      	add	r3, r2
 80091dc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
				uint32_t dist = distance(galaxy0, galaxy1);
 80091e0:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80091e4:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 80091e8:	f7ff fe2e 	bl	8008e48 <distance>
 80091ec:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
				total_distance += dist;
 80091f0:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80091f4:	2200      	movs	r2, #0
 80091f6:	4698      	mov	r8, r3
 80091f8:	4691      	mov	r9, r2
 80091fa:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80091fe:	eb12 0108 	adds.w	r1, r2, r8
 8009202:	6039      	str	r1, [r7, #0]
 8009204:	eb43 0309 	adc.w	r3, r3, r9
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920e:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
			for(uint32_t j=i+1; j<total_galaxies; j++)
 8009212:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8009216:	3301      	adds	r3, #1
 8009218:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800921c:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8009220:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8009224:	429a      	cmp	r2, r3
 8009226:	d3cb      	bcc.n	80091c0 <AoC_Day_11+0x338>
		for(uint32_t i=0; i<total_galaxies; i++)
 8009228:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800922c:	3301      	adds	r3, #1
 800922e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8009232:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8009236:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800923a:	429a      	cmp	r2, r3
 800923c:	d3b1      	bcc.n	80091a2 <AoC_Day_11+0x31a>
			}
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %llu\n", total_distance);
 800923e:	f107 0010 	add.w	r0, r7, #16
 8009242:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8009246:	49d2      	ldr	r1, [pc, #840]	; (8009590 <AoC_Day_11+0x708>)
 8009248:	f016 f87e 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800924c:	f107 0310 	add.w	r3, r7, #16
 8009250:	4618      	mov	r0, r3
 8009252:	f7f6 ffdd 	bl	8000210 <strlen>
 8009256:	4603      	mov	r3, r0
 8009258:	461a      	mov	r2, r3
 800925a:	f107 0110 	add.w	r1, r7, #16
 800925e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009262:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f7f7 ffe3 	bl	8001234 <AdventOfCode_print>

		// clean up
		sram_clrmem();
 800926e:	f000 ffa9 	bl	800a1c4 <sram_clrmem>
	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		uint32_t multiplier;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8009272:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009276:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d10d      	bne.n	800929c <AoC_Day_11+0x414>
		{
			ret = f_open(&file, "day11t.txt", FA_READ);
 8009280:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009284:	2201      	movs	r2, #1
 8009286:	49c3      	ldr	r1, [pc, #780]	; (8009594 <AoC_Day_11+0x70c>)
 8009288:	4618      	mov	r0, r3
 800928a:	f013 fd65 	bl	801cd58 <f_open>
 800928e:	4603      	mov	r3, r0
 8009290:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
			multiplier = 10;
 8009294:	230a      	movs	r3, #10
 8009296:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800929a:	e00c      	b.n	80092b6 <AoC_Day_11+0x42e>
		}
		else
		{
			ret = f_open(&file, "day11.txt", FA_READ);
 800929c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092a0:	2201      	movs	r2, #1
 80092a2:	49bd      	ldr	r1, [pc, #756]	; (8009598 <AoC_Day_11+0x710>)
 80092a4:	4618      	mov	r0, r3
 80092a6:	f013 fd57 	bl	801cd58 <f_open>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
			multiplier = 1000000;
 80092b0:	4bba      	ldr	r3, [pc, #744]	; (800959c <AoC_Day_11+0x714>)
 80092b2:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
		}
		if(ret != FR_OK)
 80092b6:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <AoC_Day_11+0x44e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 80092be:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80092c2:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2213      	movs	r2, #19
 80092ca:	49b5      	ldr	r1, [pc, #724]	; (80095a0 <AoC_Day_11+0x718>)
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f7 ffb1 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e1be      	b.n	8009654 <AoC_Day_11+0x7cc>
		}

		// get file length
		int32_t file_size = f_size(&file);
 80092d6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80092da:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8

		// extract data
		char *space = (char*)sram_malloc(file_size + 1);
 80092e4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80092e8:	3301      	adds	r3, #1
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 ff26 	bl	800a13c <sram_malloc>
 80092f0:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4

		// insert data
		f_read(&file, space, file_size + 1, NULL);
 80092f4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80092f8:	3301      	adds	r3, #1
 80092fa:	461a      	mov	r2, r3
 80092fc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009300:	2300      	movs	r3, #0
 8009302:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8009306:	f013 fee5 	bl	801d0d4 <f_read>

		// close file
		f_close(&file);
 800930a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800930e:	4618      	mov	r0, r3
 8009310:	f014 fa12 	bl	801d738 <f_close>

		// get space dimensions and insert line ends
		char *token = strtok(space, "\n");
 8009314:	49a3      	ldr	r1, [pc, #652]	; (80095a4 <AoC_Day_11+0x71c>)
 8009316:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 800931a:	f016 f845 	bl	801f3a8 <strtok>
 800931e:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
		uint32_t space_width = strlen(token);
 8009322:	f8d7 02b0 	ldr.w	r0, [r7, #688]	; 0x2b0
 8009326:	f7f6 ff73 	bl	8000210 <strlen>
 800932a:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
		uint32_t counter = 1;
 800932e:	2301      	movs	r3, #1
 8009330:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
		while(strtok(NULL, "\n"))
 8009334:	e004      	b.n	8009340 <AoC_Day_11+0x4b8>
			counter++;
 8009336:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800933a:	3301      	adds	r3, #1
 800933c:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
		while(strtok(NULL, "\n"))
 8009340:	4998      	ldr	r1, [pc, #608]	; (80095a4 <AoC_Day_11+0x71c>)
 8009342:	2000      	movs	r0, #0
 8009344:	f016 f830 	bl	801f3a8 <strtok>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1f3      	bne.n	8009336 <AoC_Day_11+0x4ae>

		// count galaxies
		uint32_t total_galaxies = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
		for(uint32_t x=0; x<space_width; x++)
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800935a:	e028      	b.n	80093ae <AoC_Day_11+0x526>
			for(uint32_t y=0; y<space_width; y++)
 800935c:	2300      	movs	r3, #0
 800935e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8009362:	e019      	b.n	8009398 <AoC_Day_11+0x510>
				if(space[y * (space_width + 1) + x] == '#')
 8009364:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009368:	3301      	adds	r3, #1
 800936a:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 800936e:	fb03 f202 	mul.w	r2, r3, r2
 8009372:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8009376:	4413      	add	r3, r2
 8009378:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800937c:	4413      	add	r3, r2
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b23      	cmp	r3, #35	; 0x23
 8009382:	d104      	bne.n	800938e <AoC_Day_11+0x506>
					total_galaxies++;
 8009384:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8009388:	3301      	adds	r3, #1
 800938a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
			for(uint32_t y=0; y<space_width; y++)
 800938e:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8009392:	3301      	adds	r3, #1
 8009394:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8009398:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 800939c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d3df      	bcc.n	8009364 <AoC_Day_11+0x4dc>
		for(uint32_t x=0; x<space_width; x++)
 80093a4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80093a8:	3301      	adds	r3, #1
 80093aa:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80093ae:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 80093b2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d3d0      	bcc.n	800935c <AoC_Day_11+0x4d4>

		// create galaxy entites
		uint32_t galaxy_ptr = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
		Galaxy_t *galaxies = (Galaxy_t*)sram_calloc(total_galaxies, sizeof(Galaxy_t));
 80093c0:	2110      	movs	r1, #16
 80093c2:	f8d7 0310 	ldr.w	r0, [r7, #784]	; 0x310
 80093c6:	f000 fedf 	bl	800a188 <sram_calloc>
 80093ca:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8

		// process X coordinates
		uint32_t current_x = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
		for(uint32_t x=0; x<space_width; x++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80093da:	e051      	b.n	8009480 <AoC_Day_11+0x5f8>
		{
			uint32_t is_empty = 1;
 80093dc:	2301      	movs	r3, #1
 80093de:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
			for(uint32_t y=0; y<space_width; y++)
 80093e2:	2300      	movs	r3, #0
 80093e4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80093e8:	e032      	b.n	8009450 <AoC_Day_11+0x5c8>
			{
				uint32_t index = y * (space_width + 1) + x;
 80093ea:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80093ee:	3301      	adds	r3, #1
 80093f0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 80093fc:	4413      	add	r3, r2
 80093fe:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
				if(space[index] == '#')
 8009402:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8009406:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800940a:	4413      	add	r3, r2
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b23      	cmp	r3, #35	; 0x23
 8009410:	d119      	bne.n	8009446 <AoC_Day_11+0x5be>
				{
					is_empty = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
					galaxies[galaxy_ptr].id = index;
 8009418:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8009422:	4413      	add	r3, r2
 8009424:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8009428:	601a      	str	r2, [r3, #0]
					galaxies[galaxy_ptr].x = current_x;
 800942a:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8009434:	4413      	add	r3, r2
 8009436:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 800943a:	605a      	str	r2, [r3, #4]
					galaxy_ptr++;
 800943c:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8009440:	3301      	adds	r3, #1
 8009442:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
			for(uint32_t y=0; y<space_width; y++)
 8009446:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800944a:	3301      	adds	r3, #1
 800944c:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8009450:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8009454:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009458:	429a      	cmp	r2, r3
 800945a:	d3c6      	bcc.n	80093ea <AoC_Day_11+0x562>
				}
			}
			current_x += 1 + is_empty * (multiplier - 1);
 800945c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8009460:	3b01      	subs	r3, #1
 8009462:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8009466:	fb03 f202 	mul.w	r2, r3, r2
 800946a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800946e:	4413      	add	r3, r2
 8009470:	3301      	adds	r3, #1
 8009472:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
		for(uint32_t x=0; x<space_width; x++)
 8009476:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800947a:	3301      	adds	r3, #1
 800947c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8009480:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8009484:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009488:	429a      	cmp	r2, r3
 800948a:	d3a7      	bcc.n	80093dc <AoC_Day_11+0x554>
		}

		// process Y coordinates
		uint32_t current_y = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
		for(uint32_t y=0; y<space_width; y++)
 8009492:	2300      	movs	r3, #0
 8009494:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8009498:	e064      	b.n	8009564 <AoC_Day_11+0x6dc>
		{
			uint32_t is_empty = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
			for(uint32_t x=0; x<space_width; x++)
 80094a0:	2300      	movs	r3, #0
 80094a2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80094a6:	e045      	b.n	8009534 <AoC_Day_11+0x6ac>
			{
				uint32_t index = y * (space_width + 1) + x;
 80094a8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80094ac:	3301      	adds	r3, #1
 80094ae:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80094ba:	4413      	add	r3, r2
 80094bc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
				if(space[index] == '#')
 80094c0:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80094c4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094c8:	4413      	add	r3, r2
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2b23      	cmp	r3, #35	; 0x23
 80094ce:	d12c      	bne.n	800952a <AoC_Day_11+0x6a2>
				{
					// locate galaxy id
					galaxy_ptr = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
					for(; galaxy_ptr<total_galaxies; galaxy_ptr++)
 80094d6:	e00f      	b.n	80094f8 <AoC_Day_11+0x670>
						if(galaxies[galaxy_ptr].id == index)
 80094d8:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80094e2:	4413      	add	r3, r2
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d00b      	beq.n	8009506 <AoC_Day_11+0x67e>
					for(; galaxy_ptr<total_galaxies; galaxy_ptr++)
 80094ee:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80094f2:	3301      	adds	r3, #1
 80094f4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80094f8:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 80094fc:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8009500:	429a      	cmp	r2, r3
 8009502:	d3e9      	bcc.n	80094d8 <AoC_Day_11+0x650>
 8009504:	e000      	b.n	8009508 <AoC_Day_11+0x680>
							break;
 8009506:	bf00      	nop

					is_empty = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
					galaxies[galaxy_ptr].y = current_y;
 800950e:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8009518:	4413      	add	r3, r2
 800951a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 800951e:	609a      	str	r2, [r3, #8]
					galaxy_ptr++;
 8009520:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8009524:	3301      	adds	r3, #1
 8009526:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
			for(uint32_t x=0; x<space_width; x++)
 800952a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800952e:	3301      	adds	r3, #1
 8009530:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8009534:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8009538:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800953c:	429a      	cmp	r2, r3
 800953e:	d3b3      	bcc.n	80094a8 <AoC_Day_11+0x620>
				}
			}
			current_y += 1 + is_empty * (multiplier - 1);
 8009540:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8009544:	3b01      	subs	r3, #1
 8009546:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800954a:	fb03 f202 	mul.w	r2, r3, r2
 800954e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8009552:	4413      	add	r3, r2
 8009554:	3301      	adds	r3, #1
 8009556:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
		for(uint32_t y=0; y<space_width; y++)
 800955a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800955e:	3301      	adds	r3, #1
 8009560:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8009564:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8009568:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800956c:	429a      	cmp	r2, r3
 800956e:	d394      	bcc.n	800949a <AoC_Day_11+0x612>
		}

		// process pairs
		uint64_t total_distance = 0;
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
		for(uint32_t i=0; i<total_galaxies; i++)
 800957c:	2300      	movs	r3, #0
 800957e:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8009582:	e046      	b.n	8009612 <AoC_Day_11+0x78a>
		{
			for(uint32_t j=i+1; j<total_galaxies; j++)
 8009584:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009588:	3301      	adds	r3, #1
 800958a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800958e:	e035      	b.n	80095fc <AoC_Day_11+0x774>
 8009590:	080251b4 	.word	0x080251b4
 8009594:	08025180 	.word	0x08025180
 8009598:	0802518c 	.word	0x0802518c
 800959c:	000f4240 	.word	0x000f4240
 80095a0:	08025198 	.word	0x08025198
 80095a4:	080251b0 	.word	0x080251b0
			{
				Galaxy_t *galaxy0 = &galaxies[i];
 80095a8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80095b2:	4413      	add	r3, r2
 80095b4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
				Galaxy_t *galaxy1 = &galaxies[j];
 80095b8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80095c2:	4413      	add	r3, r2
 80095c4:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
				uint32_t dist = distance(galaxy0, galaxy1);
 80095c8:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 80095cc:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 80095d0:	f7ff fc3a 	bl	8008e48 <distance>
 80095d4:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
				total_distance += dist;
 80095d8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80095dc:	2200      	movs	r2, #0
 80095de:	461c      	mov	r4, r3
 80095e0:	4615      	mov	r5, r2
 80095e2:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80095e6:	eb12 0a04 	adds.w	sl, r2, r4
 80095ea:	eb43 0b05 	adc.w	fp, r3, r5
 80095ee:	e9c7 abb6 	strd	sl, fp, [r7, #728]	; 0x2d8
			for(uint32_t j=i+1; j<total_galaxies; j++)
 80095f2:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80095f6:	3301      	adds	r3, #1
 80095f8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80095fc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009600:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8009604:	429a      	cmp	r2, r3
 8009606:	d3cf      	bcc.n	80095a8 <AoC_Day_11+0x720>
		for(uint32_t i=0; i<total_galaxies; i++)
 8009608:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800960c:	3301      	adds	r3, #1
 800960e:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8009612:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8009616:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800961a:	429a      	cmp	r2, r3
 800961c:	d3b2      	bcc.n	8009584 <AoC_Day_11+0x6fc>
			}
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 2 answer: %llu\n", total_distance);
 800961e:	f107 0010 	add.w	r0, r7, #16
 8009622:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8009626:	490e      	ldr	r1, [pc, #56]	; (8009660 <AoC_Day_11+0x7d8>)
 8009628:	f015 fe8e 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800962c:	f107 0310 	add.w	r3, r7, #16
 8009630:	4618      	mov	r0, r3
 8009632:	f7f6 fded 	bl	8000210 <strlen>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	f107 0110 	add.w	r1, r7, #16
 800963e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8009642:	f2a3 3359 	subw	r3, r3, #857	; 0x359
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f7f7 fdf3 	bl	8001234 <AdventOfCode_print>

		// clean up
		sram_clrmem();
 800964e:	f000 fdb9 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	f507 775a 	add.w	r7, r7, #872	; 0x368
 800965a:	46bd      	mov	sp, r7
 800965c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009660:	080251d0 	.word	0x080251d0

08009664 <recursion>:
uint32_t cache_size = 0x800000llu / sizeof(CacheObject_t);
uint32_t cache_ptr = 0;
CacheObject_t *cache;

static uint64_t recursion(char *string, uint8_t *reference_sequence, uint8_t sequence_length, uint32_t dept)
{
 8009664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009668:	b08a      	sub	sp, #40	; 0x28
 800966a:	af00      	add	r7, sp, #0
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	603b      	str	r3, [r7, #0]
 8009672:	4613      	mov	r3, r2
 8009674:	71fb      	strb	r3, [r7, #7]
	// cache check
	for(uint32_t ptr=0; ptr<cache_ptr; ptr++)
 8009676:	2300      	movs	r3, #0
 8009678:	627b      	str	r3, [r7, #36]	; 0x24
 800967a:	e027      	b.n	80096cc <recursion+0x68>
		if(cache[ptr].string == string && cache[ptr].sequence == reference_sequence)
 800967c:	4b84      	ldr	r3, [pc, #528]	; (8009890 <recursion+0x22c>)
 800967e:	6819      	ldr	r1, [r3, #0]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	4613      	mov	r3, r2
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	429a      	cmp	r2, r3
 8009692:	d118      	bne.n	80096c6 <recursion+0x62>
 8009694:	4b7e      	ldr	r3, [pc, #504]	; (8009890 <recursion+0x22c>)
 8009696:	6819      	ldr	r1, [r3, #0]
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	4613      	mov	r3, r2
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d10c      	bne.n	80096c6 <recursion+0x62>
			return cache[ptr].count;
 80096ac:	4b78      	ldr	r3, [pc, #480]	; (8009890 <recursion+0x22c>)
 80096ae:	6819      	ldr	r1, [r3, #0]
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	4613      	mov	r3, r2
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2200      	movs	r2, #0
 80096c0:	461c      	mov	r4, r3
 80096c2:	4615      	mov	r5, r2
 80096c4:	e0db      	b.n	800987e <recursion+0x21a>
	for(uint32_t ptr=0; ptr<cache_ptr; ptr++)
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	3301      	adds	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
 80096cc:	4b71      	ldr	r3, [pc, #452]	; (8009894 <recursion+0x230>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3d2      	bcc.n	800967c <recursion+0x18>

	// verify if current sequence is correct
	if(strlen(string) == 0)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <recursion+0x90>
		return sequence_length == 0;
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	bf0c      	ite	eq
 80096e4:	2301      	moveq	r3, #1
 80096e6:	2300      	movne	r3, #0
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2200      	movs	r2, #0
 80096ee:	461c      	mov	r4, r3
 80096f0:	4615      	mov	r5, r2
 80096f2:	e0c4      	b.n	800987e <recursion+0x21a>
	if(sequence_length == 0)
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d121      	bne.n	800973e <recursion+0xda>
	{
		for(uint8_t i=0; i<strlen(string); i++)
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009700:	e010      	b.n	8009724 <recursion+0xc0>
			if(string[i] == '#')
 8009702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b23      	cmp	r3, #35	; 0x23
 800970e:	d104      	bne.n	800971a <recursion+0xb6>
				return 0;
 8009710:	f04f 0400 	mov.w	r4, #0
 8009714:	f04f 0500 	mov.w	r5, #0
 8009718:	e0b1      	b.n	800987e <recursion+0x21a>
		for(uint8_t i=0; i<strlen(string); i++)
 800971a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800971e:	3301      	adds	r3, #1
 8009720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009724:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7f6 fd71 	bl	8000210 <strlen>
 800972e:	4603      	mov	r3, r0
 8009730:	429c      	cmp	r4, r3
 8009732:	d3e6      	bcc.n	8009702 <recursion+0x9e>
		return 1;
 8009734:	f04f 0401 	mov.w	r4, #1
 8009738:	f04f 0500 	mov.w	r5, #0
 800973c:	e09f      	b.n	800987e <recursion+0x21a>
	}

	uint64_t counter = 0;
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(string[0] == '.' || string[0] == '?')
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b2e      	cmp	r3, #46	; 0x2e
 8009750:	d003      	beq.n	800975a <recursion+0xf6>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b3f      	cmp	r3, #63	; 0x3f
 8009758:	d10f      	bne.n	800977a <recursion+0x116>
		counter += recursion(string+1, reference_sequence, sequence_length, dept + 1);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1c58      	adds	r0, r3, #1
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	79fa      	ldrb	r2, [r7, #7]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	f7ff ff7d 	bl	8009664 <recursion>
 800976a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800976e:	eb12 0a00 	adds.w	sl, r2, r0
 8009772:	eb43 0b01 	adc.w	fp, r3, r1
 8009776:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	if(string[0] == '#' || string[0] == '?')
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b23      	cmp	r3, #35	; 0x23
 8009780:	d003      	beq.n	800978a <recursion+0x126>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b3f      	cmp	r3, #63	; 0x3f
 8009788:	d148      	bne.n	800981c <recursion+0x1b8>
	{
		if(reference_sequence[0] <= strlen(string) && (reference_sequence[0] == strlen(string) || string[reference_sequence[0]] != '#'))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	461c      	mov	r4, r3
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7f6 fd3d 	bl	8000210 <strlen>
 8009796:	4603      	mov	r3, r0
 8009798:	429c      	cmp	r4, r3
 800979a:	d83f      	bhi.n	800981c <recursion+0x1b8>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461c      	mov	r4, r3
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7f6 fd34 	bl	8000210 <strlen>
 80097a8:	4603      	mov	r3, r0
 80097aa:	429c      	cmp	r4, r3
 80097ac:	d007      	beq.n	80097be <recursion+0x15a>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	2b23      	cmp	r3, #35	; 0x23
 80097bc:	d02e      	beq.n	800981c <recursion+0x1b8>
		{
			// verify no operational springs in block
			uint8_t flag = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]
			for(uint8_t i=0; i<reference_sequence[0]; i++)
 80097c2:	2300      	movs	r3, #0
 80097c4:	75bb      	strb	r3, [r7, #22]
 80097c6:	e00b      	b.n	80097e0 <recursion+0x17c>
			{
				if(string[i] == '.')
 80097c8:	7dbb      	ldrb	r3, [r7, #22]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b2e      	cmp	r3, #46	; 0x2e
 80097d2:	d102      	bne.n	80097da <recursion+0x176>
				{
					flag = 1;
 80097d4:	2301      	movs	r3, #1
 80097d6:	75fb      	strb	r3, [r7, #23]
					break;
 80097d8:	e007      	b.n	80097ea <recursion+0x186>
			for(uint8_t i=0; i<reference_sequence[0]; i++)
 80097da:	7dbb      	ldrb	r3, [r7, #22]
 80097dc:	3301      	adds	r3, #1
 80097de:	75bb      	strb	r3, [r7, #22]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	7dba      	ldrb	r2, [r7, #22]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d3ee      	bcc.n	80097c8 <recursion+0x164>
				}
			}
			if(!flag)
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d115      	bne.n	800981c <recursion+0x1b8>
				counter += recursion(string+reference_sequence[0] + 1, reference_sequence + 1, sequence_length - 1, dept + 1);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	3301      	adds	r3, #1
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	18d0      	adds	r0, r2, r3
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	1c59      	adds	r1, r3, #1
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	3b01      	subs	r3, #1
 8009802:	b2da      	uxtb	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	f7ff ff2c 	bl	8009664 <recursion>
 800980c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009810:	eb12 0800 	adds.w	r8, r2, r0
 8009814:	eb43 0901 	adc.w	r9, r3, r1
 8009818:	e9c7 8906 	strd	r8, r9, [r7, #24]
		}
	}

	if(cache_ptr != cache_size && dept != 0)
 800981c:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <recursion+0x230>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	4b1d      	ldr	r3, [pc, #116]	; (8009898 <recursion+0x234>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	429a      	cmp	r2, r3
 8009826:	d028      	beq.n	800987a <recursion+0x216>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d025      	beq.n	800987a <recursion+0x216>
	{
		cache[cache_ptr].string = string;
 800982e:	4b18      	ldr	r3, [pc, #96]	; (8009890 <recursion+0x22c>)
 8009830:	6819      	ldr	r1, [r3, #0]
 8009832:	4b18      	ldr	r3, [pc, #96]	; (8009894 <recursion+0x230>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	4613      	mov	r3, r2
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	601a      	str	r2, [r3, #0]
		cache[cache_ptr].sequence = reference_sequence;
 8009844:	4b12      	ldr	r3, [pc, #72]	; (8009890 <recursion+0x22c>)
 8009846:	6819      	ldr	r1, [r3, #0]
 8009848:	4b12      	ldr	r3, [pc, #72]	; (8009894 <recursion+0x230>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	605a      	str	r2, [r3, #4]
		cache[cache_ptr].count = counter;
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <recursion+0x22c>)
 800985c:	6819      	ldr	r1, [r3, #0]
 800985e:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <recursion+0x230>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4613      	mov	r3, r2
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	4413      	add	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	440b      	add	r3, r1
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	609a      	str	r2, [r3, #8]
		cache_ptr++;
 8009870:	4b08      	ldr	r3, [pc, #32]	; (8009894 <recursion+0x230>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3301      	adds	r3, #1
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <recursion+0x230>)
 8009878:	6013      	str	r3, [r2, #0]
	}

	return counter;
 800987a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
}
 800987e:	4622      	mov	r2, r4
 8009880:	462b      	mov	r3, r5
 8009882:	4610      	mov	r0, r2
 8009884:	4619      	mov	r1, r3
 8009886:	3728      	adds	r7, #40	; 0x28
 8009888:	46bd      	mov	sp, r7
 800988a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800988e:	bf00      	nop
 8009890:	20000b20 	.word	0x20000b20
 8009894:	20000b1c 	.word	0x20000b1c
 8009898:	20000010 	.word	0x20000010

0800989c <AoC_Day_12>:

AdventOfCode_return_t AoC_Day_12(AdventOfCode_config_t config)
{
 800989c:	b5b0      	push	{r4, r5, r7, lr}
 800989e:	f5ad 6ddc 	sub.w	sp, sp, #1760	; 0x6e0
 80098a2:	af06      	add	r7, sp, #24
 80098a4:	4602      	mov	r2, r0
 80098a6:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80098aa:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80098ae:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80098b0:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80098b4:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <AoC_Day_12+0x26>
		return AOC_RETURN_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e241      	b.n	8009d46 <AoC_Day_12+0x4aa>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80098c2:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80098c6:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d10a      	bne.n	80098e6 <AoC_Day_12+0x4a>
			ret = f_open(&file, "day12t.txt", FA_READ);
 80098d0:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80098d4:	2201      	movs	r2, #1
 80098d6:	49b5      	ldr	r1, [pc, #724]	; (8009bac <AoC_Day_12+0x310>)
 80098d8:	4618      	mov	r0, r3
 80098da:	f013 fa3d 	bl	801cd58 <f_open>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 36c7 	strb.w	r3, [r7, #1735]	; 0x6c7
 80098e4:	e009      	b.n	80098fa <AoC_Day_12+0x5e>
		else ret = f_open(&file, "day12.txt", FA_READ);
 80098e6:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80098ea:	2201      	movs	r2, #1
 80098ec:	49b0      	ldr	r1, [pc, #704]	; (8009bb0 <AoC_Day_12+0x314>)
 80098ee:	4618      	mov	r0, r3
 80098f0:	f013 fa32 	bl	801cd58 <f_open>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 36c7 	strb.w	r3, [r7, #1735]	; 0x6c7
		if(ret != FR_OK)
 80098fa:	f897 36c7 	ldrb.w	r3, [r7, #1735]	; 0x6c7
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <AoC_Day_12+0x7e>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8009902:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8009906:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2213      	movs	r2, #19
 800990e:	49a9      	ldr	r1, [pc, #676]	; (8009bb4 <AoC_Day_12+0x318>)
 8009910:	4618      	mov	r0, r3
 8009912:	f7f7 fc8f 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8009916:	2301      	movs	r3, #1
 8009918:	e215      	b.n	8009d46 <AoC_Day_12+0x4aa>
		}

		// build cache
		cache_ptr = 0;
 800991a:	4ba7      	ldr	r3, [pc, #668]	; (8009bb8 <AoC_Day_12+0x31c>)
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]
		cache = (CacheObject_t*)sram_malloc(cache_size * sizeof(CacheObject_t));
 8009920:	4ba6      	ldr	r3, [pc, #664]	; (8009bbc <AoC_Day_12+0x320>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	4613      	mov	r3, r2
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fc05 	bl	800a13c <sram_malloc>
 8009932:	4603      	mov	r3, r0
 8009934:	4aa2      	ldr	r2, [pc, #648]	; (8009bc0 <AoC_Day_12+0x324>)
 8009936:	6013      	str	r3, [r2, #0]

		// for each line
		uint32_t total = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		char buffer[256];
		while(f_gets(buffer, 256, &file))
 800993e:	e05a      	b.n	80099f6 <AoC_Day_12+0x15a>
		{
			// split status code and sequences
			char *status_code = strtok(buffer, " ");
 8009940:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009944:	499f      	ldr	r1, [pc, #636]	; (8009bc4 <AoC_Day_12+0x328>)
 8009946:	4618      	mov	r0, r3
 8009948:	f015 fd2e 	bl	801f3a8 <strtok>
 800994c:	f8c7 0684 	str.w	r0, [r7, #1668]	; 0x684
			char *sequence_list = strtok(NULL, " ");
 8009950:	499c      	ldr	r1, [pc, #624]	; (8009bc4 <AoC_Day_12+0x328>)
 8009952:	2000      	movs	r0, #0
 8009954:	f015 fd28 	bl	801f3a8 <strtok>
 8009958:	f8c7 0680 	str.w	r0, [r7, #1664]	; 0x680

			// create array of sequences
			uint8_t length = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	f887 36bf 	strb.w	r3, [r7, #1727]	; 0x6bf
			uint8_t sequence[64];
			char *value_str = strtok(sequence_list, ",");
 8009962:	4999      	ldr	r1, [pc, #612]	; (8009bc8 <AoC_Day_12+0x32c>)
 8009964:	f8d7 0680 	ldr.w	r0, [r7, #1664]	; 0x680
 8009968:	f015 fd1e 	bl	801f3a8 <strtok>
 800996c:	f8c7 06b8 	str.w	r0, [r7, #1720]	; 0x6b8
			while(value_str != NULL)
 8009970:	e017      	b.n	80099a2 <AoC_Day_12+0x106>
			{
				sequence[length] = atoi(value_str);
 8009972:	f8d7 06b8 	ldr.w	r0, [r7, #1720]	; 0x6b8
 8009976:	f015 fa23 	bl	801edc0 <atoi>
 800997a:	4602      	mov	r2, r0
 800997c:	f897 36bf 	ldrb.w	r3, [r7, #1727]	; 0x6bf
 8009980:	b2d1      	uxtb	r1, r2
 8009982:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 8009986:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 800998a:	54d1      	strb	r1, [r2, r3]
				value_str = strtok(NULL, ",");
 800998c:	498e      	ldr	r1, [pc, #568]	; (8009bc8 <AoC_Day_12+0x32c>)
 800998e:	2000      	movs	r0, #0
 8009990:	f015 fd0a 	bl	801f3a8 <strtok>
 8009994:	f8c7 06b8 	str.w	r0, [r7, #1720]	; 0x6b8
				length++;
 8009998:	f897 36bf 	ldrb.w	r3, [r7, #1727]	; 0x6bf
 800999c:	3301      	adds	r3, #1
 800999e:	f887 36bf 	strb.w	r3, [r7, #1727]	; 0x6bf
			while(value_str != NULL)
 80099a2:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e3      	bne.n	8009972 <AoC_Day_12+0xd6>
			}

			// calculate answer
			cache_ptr = 0;
 80099aa:	4b83      	ldr	r3, [pc, #524]	; (8009bb8 <AoC_Day_12+0x31c>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
			strcat(status_code, ".");
 80099b0:	f8d7 0684 	ldr.w	r0, [r7, #1668]	; 0x684
 80099b4:	f7f6 fc2c 	bl	8000210 <strlen>
 80099b8:	4603      	mov	r3, r0
 80099ba:	461a      	mov	r2, r3
 80099bc:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 80099c0:	4413      	add	r3, r2
 80099c2:	4982      	ldr	r1, [pc, #520]	; (8009bcc <AoC_Day_12+0x330>)
 80099c4:	461a      	mov	r2, r3
 80099c6:	460b      	mov	r3, r1
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	8013      	strh	r3, [r2, #0]
			uint32_t count = recursion(status_code, sequence, length, 0);
 80099cc:	f897 26bf 	ldrb.w	r2, [r7, #1727]	; 0x6bf
 80099d0:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80099d4:	2300      	movs	r3, #0
 80099d6:	f8d7 0684 	ldr.w	r0, [r7, #1668]	; 0x684
 80099da:	f7ff fe43 	bl	8009664 <recursion>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4613      	mov	r3, r2
 80099e4:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
			total += count;
 80099e8:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 80099ec:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80099f0:	4413      	add	r3, r2
 80099f2:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		while(f_gets(buffer, 256, &file))
 80099f6:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80099fa:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80099fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a02:	4618      	mov	r0, r3
 8009a04:	f014 f87c 	bl	801db00 <f_gets>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d198      	bne.n	8009940 <AoC_Day_12+0xa4>
		}

		// output answer
		char answer[64];
		sprintf(answer, "    Part 1 answer: %lu\n", total);
 8009a0e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009a12:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8009a16:	496e      	ldr	r1, [pc, #440]	; (8009bd0 <AoC_Day_12+0x334>)
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f015 fc95 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8009a1e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f6 fbf4 	bl	8000210 <strlen>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 8009a30:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8009a34:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7f7 fbfa 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8009a40:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8009a44:	4618      	mov	r0, r3
 8009a46:	f013 fe77 	bl	801d738 <f_close>
		sram_clrmem();
 8009a4a:	f000 fbbb 	bl	800a1c4 <sram_clrmem>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8009a4e:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8009a52:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d10a      	bne.n	8009a72 <AoC_Day_12+0x1d6>
			ret = f_open(&file, "day12t.txt", FA_READ);
 8009a5c:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8009a60:	2201      	movs	r2, #1
 8009a62:	4952      	ldr	r1, [pc, #328]	; (8009bac <AoC_Day_12+0x310>)
 8009a64:	4618      	mov	r0, r3
 8009a66:	f013 f977 	bl	801cd58 <f_open>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009a70:	e009      	b.n	8009a86 <AoC_Day_12+0x1ea>
		else ret = f_open(&file, "day12.txt", FA_READ);
 8009a72:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8009a76:	2201      	movs	r2, #1
 8009a78:	494d      	ldr	r1, [pc, #308]	; (8009bb0 <AoC_Day_12+0x314>)
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f013 f96c 	bl	801cd58 <f_open>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
		if(ret != FR_OK)
 8009a86:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00b      	beq.n	8009aa6 <AoC_Day_12+0x20a>
		{
			AdventOfCode_print(config, "    Cannot find file!\n", strlen("\tCannot find file!\n"));
 8009a8e:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8009a92:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2213      	movs	r2, #19
 8009a9a:	4946      	ldr	r1, [pc, #280]	; (8009bb4 <AoC_Day_12+0x318>)
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7f7 fbc9 	bl	8001234 <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e14f      	b.n	8009d46 <AoC_Day_12+0x4aa>
		}


		// build cache
		cache_ptr = 0;
 8009aa6:	4b44      	ldr	r3, [pc, #272]	; (8009bb8 <AoC_Day_12+0x31c>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
		cache = (CacheObject_t*)sram_malloc(cache_size * sizeof(CacheObject_t));
 8009aac:	4b43      	ldr	r3, [pc, #268]	; (8009bbc <AoC_Day_12+0x320>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fb3f 	bl	800a13c <sram_malloc>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4a3f      	ldr	r2, [pc, #252]	; (8009bc0 <AoC_Day_12+0x324>)
 8009ac2:	6013      	str	r3, [r2, #0]

		// for each line
		uint32_t counter = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
		uint64_t total = 0;
 8009aca:	f04f 0200 	mov.w	r2, #0
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8009ad6:	e9c1 2300 	strd	r2, r3, [r1]
		char buffer[256];
		while(f_gets(buffer, 256, &file))
 8009ada:	e105      	b.n	8009ce8 <AoC_Day_12+0x44c>
		{
			// split status code and sequences
			char *status_code = strtok(buffer, " ");
 8009adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009ae0:	4938      	ldr	r1, [pc, #224]	; (8009bc4 <AoC_Day_12+0x328>)
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f015 fc60 	bl	801f3a8 <strtok>
 8009ae8:	f8c7 0698 	str.w	r0, [r7, #1688]	; 0x698
			char *sequence_list = strtok(NULL, " ");
 8009aec:	4935      	ldr	r1, [pc, #212]	; (8009bc4 <AoC_Day_12+0x328>)
 8009aee:	2000      	movs	r0, #0
 8009af0:	f015 fc5a 	bl	801f3a8 <strtok>
 8009af4:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694

			// create array of sequences
			uint8_t length = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7
			uint8_t sequence[64];
			char *value_str = strtok(sequence_list, ",");
 8009afe:	4932      	ldr	r1, [pc, #200]	; (8009bc8 <AoC_Day_12+0x32c>)
 8009b00:	f8d7 0694 	ldr.w	r0, [r7, #1684]	; 0x694
 8009b04:	f015 fc50 	bl	801f3a8 <strtok>
 8009b08:	f8c7 06a0 	str.w	r0, [r7, #1696]	; 0x6a0
			while(value_str != NULL)
 8009b0c:	e017      	b.n	8009b3e <AoC_Day_12+0x2a2>
			{
				sequence[length] = atoi(value_str);
 8009b0e:	f8d7 06a0 	ldr.w	r0, [r7, #1696]	; 0x6a0
 8009b12:	f015 f955 	bl	801edc0 <atoi>
 8009b16:	4602      	mov	r2, r0
 8009b18:	f897 36a7 	ldrb.w	r3, [r7, #1703]	; 0x6a7
 8009b1c:	b2d1      	uxtb	r1, r2
 8009b1e:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 8009b22:	f2a2 62bc 	subw	r2, r2, #1724	; 0x6bc
 8009b26:	54d1      	strb	r1, [r2, r3]
				value_str = strtok(NULL, ",");
 8009b28:	4927      	ldr	r1, [pc, #156]	; (8009bc8 <AoC_Day_12+0x32c>)
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	f015 fc3c 	bl	801f3a8 <strtok>
 8009b30:	f8c7 06a0 	str.w	r0, [r7, #1696]	; 0x6a0
				length++;
 8009b34:	f897 36a7 	ldrb.w	r3, [r7, #1703]	; 0x6a7
 8009b38:	3301      	adds	r3, #1
 8009b3a:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7
			while(value_str != NULL)
 8009b3e:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e3      	bne.n	8009b0e <AoC_Day_12+0x272>
			}

			// create 5x status code string
			char new_status_code[512];
			memset(new_status_code, 0x00, 512);
 8009b46:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f015 fbd5 	bl	801f300 <memset>
			for(uint8_t i=0; i<5; i++)
 8009b56:	2300      	movs	r3, #0
 8009b58:	f887 369f 	strb.w	r3, [r7, #1695]	; 0x69f
 8009b5c:	e01e      	b.n	8009b9c <AoC_Day_12+0x300>
			{
				strcat(new_status_code, status_code);
 8009b5e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009b62:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 8009b66:	4618      	mov	r0, r3
 8009b68:	f015 fc0e 	bl	801f388 <strcat>
				if(i != 4) strcat(new_status_code, "?");
 8009b6c:	f897 369f 	ldrb.w	r3, [r7, #1695]	; 0x69f
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	d00e      	beq.n	8009b92 <AoC_Day_12+0x2f6>
 8009b74:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f6 fb49 	bl	8000210 <strlen>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009b86:	4413      	add	r3, r2
 8009b88:	4912      	ldr	r1, [pc, #72]	; (8009bd4 <AoC_Day_12+0x338>)
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	8013      	strh	r3, [r2, #0]
			for(uint8_t i=0; i<5; i++)
 8009b92:	f897 369f 	ldrb.w	r3, [r7, #1695]	; 0x69f
 8009b96:	3301      	adds	r3, #1
 8009b98:	f887 369f 	strb.w	r3, [r7, #1695]	; 0x69f
 8009b9c:	f897 369f 	ldrb.w	r3, [r7, #1695]	; 0x69f
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d9dc      	bls.n	8009b5e <AoC_Day_12+0x2c2>
			}

			// create 5x sequence length count
			for(uint8_t i=0; i<4; i++)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 369e 	strb.w	r3, [r7, #1694]	; 0x69e
 8009baa:	e034      	b.n	8009c16 <AoC_Day_12+0x37a>
 8009bac:	080251ec 	.word	0x080251ec
 8009bb0:	080251f8 	.word	0x080251f8
 8009bb4:	08025204 	.word	0x08025204
 8009bb8:	20000b1c 	.word	0x20000b1c
 8009bbc:	20000010 	.word	0x20000010
 8009bc0:	20000b20 	.word	0x20000b20
 8009bc4:	0802521c 	.word	0x0802521c
 8009bc8:	08025220 	.word	0x08025220
 8009bcc:	08025224 	.word	0x08025224
 8009bd0:	08025228 	.word	0x08025228
 8009bd4:	08025240 	.word	0x08025240
				memcpy(sequence + (i+1)*length, sequence + (i)*length, length);
 8009bd8:	f897 369e 	ldrb.w	r3, [r7, #1694]	; 0x69e
 8009bdc:	3301      	adds	r3, #1
 8009bde:	f897 26a7 	ldrb.w	r2, [r7, #1703]	; 0x6a7
 8009be2:	fb02 f303 	mul.w	r3, r2, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	1898      	adds	r0, r3, r2
 8009bee:	f897 369e 	ldrb.w	r3, [r7, #1694]	; 0x69e
 8009bf2:	f897 26a7 	ldrb.w	r2, [r7, #1703]	; 0x6a7
 8009bf6:	fb02 f303 	mul.w	r3, r2, r3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4413      	add	r3, r2
 8009c02:	f897 26a7 	ldrb.w	r2, [r7, #1703]	; 0x6a7
 8009c06:	4619      	mov	r1, r3
 8009c08:	f015 fb6c 	bl	801f2e4 <memcpy>
			for(uint8_t i=0; i<4; i++)
 8009c0c:	f897 369e 	ldrb.w	r3, [r7, #1694]	; 0x69e
 8009c10:	3301      	adds	r3, #1
 8009c12:	f887 369e 	strb.w	r3, [r7, #1694]	; 0x69e
 8009c16:	f897 369e 	ldrb.w	r3, [r7, #1694]	; 0x69e
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d9dc      	bls.n	8009bd8 <AoC_Day_12+0x33c>
			length *= 5;
 8009c1e:	f897 36a7 	ldrb.w	r3, [r7, #1703]	; 0x6a7
 8009c22:	461a      	mov	r2, r3
 8009c24:	0092      	lsls	r2, r2, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	f887 36a7 	strb.w	r3, [r7, #1703]	; 0x6a7

			// calculate answer
			cache_ptr = 0;
 8009c2c:	4b48      	ldr	r3, [pc, #288]	; (8009d50 <AoC_Day_12+0x4b4>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
			strcat(new_status_code, ".");
 8009c32:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f6 faea 	bl	8000210 <strlen>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009c44:	4413      	add	r3, r2
 8009c46:	4943      	ldr	r1, [pc, #268]	; (8009d54 <AoC_Day_12+0x4b8>)
 8009c48:	461a      	mov	r2, r3
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	8013      	strh	r3, [r2, #0]
			uint64_t count = recursion(new_status_code, sequence, length, 0);
 8009c50:	f897 26a7 	ldrb.w	r2, [r7, #1703]	; 0x6a7
 8009c54:	f107 010c 	add.w	r1, r7, #12
 8009c58:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f7ff fd01 	bl	8009664 <recursion>
 8009c62:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8009c66:	e9c3 0100 	strd	r0, r1, [r3]
			{
				char answer[256];
				sprintf(answer, "Line[%4lu]: %llu <> [%lu %u] <> [%lu]\n", ++counter, count, (uint32_t)strlen(new_status_code), length, cache_ptr);
 8009c6a:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8009c6e:	3301      	adds	r3, #1
 8009c70:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
 8009c74:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f6 fac9 	bl	8000210 <strlen>
 8009c7e:	4601      	mov	r1, r0
 8009c80:	f897 36a7 	ldrb.w	r3, [r7, #1703]	; 0x6a7
 8009c84:	4a32      	ldr	r2, [pc, #200]	; (8009d50 <AoC_Day_12+0x4b4>)
 8009c86:	6812      	ldr	r2, [r2, #0]
 8009c88:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8009c8c:	9204      	str	r2, [sp, #16]
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	9102      	str	r1, [sp, #8]
 8009c92:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	e9cd 2300 	strd	r2, r3, [sp]
 8009c9e:	f8d7 26b0 	ldr.w	r2, [r7, #1712]	; 0x6b0
 8009ca2:	492d      	ldr	r1, [pc, #180]	; (8009d58 <AoC_Day_12+0x4bc>)
 8009ca4:	f015 fb50 	bl	801f348 <sprintf>
				AdventOfCode_print(config, answer, strlen(answer));
 8009ca8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f6 faaf 	bl	8000210 <strlen>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 8009cba:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8009cbe:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7f7 fab5 	bl	8001234 <AdventOfCode_print>
			}
			total += count;
 8009cca:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8009cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009cd2:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	1884      	adds	r4, r0, r2
 8009cdc:	eb41 0503 	adc.w	r5, r1, r3
 8009ce0:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8009ce4:	e9c3 4500 	strd	r4, r5, [r3]
		while(f_gets(buffer, 256, &file))
 8009ce8:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8009cec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f013 ff03 	bl	801db00 <f_gets>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f47f aeed 	bne.w	8009adc <AoC_Day_12+0x240>
		//1426673570795 false
		//

		// output answer
		char answer[128];
		sprintf(answer, "    Part 2 answer: %llu\n", total);
 8009d02:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 8009d06:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	4913      	ldr	r1, [pc, #76]	; (8009d5c <AoC_Day_12+0x4c0>)
 8009d10:	f015 fb1a 	bl	801f348 <sprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 8009d14:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f6 fa79 	bl	8000210 <strlen>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	461a      	mov	r2, r3
 8009d22:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8009d26:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8009d2a:	f2a3 63c1 	subw	r3, r3, #1729	; 0x6c1
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7f7 fa7f 	bl	8001234 <AdventOfCode_print>

		// clean up
		f_close(&file);
 8009d36:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f013 fcfc 	bl	801d738 <f_close>
		sram_clrmem();
 8009d40:	f000 fa40 	bl	800a1c4 <sram_clrmem>
	}

	// status code
	return AOC_RETURN_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	f507 67d9 	add.w	r7, r7, #1736	; 0x6c8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8009d50:	20000b1c 	.word	0x20000b1c
 8009d54:	08025224 	.word	0x08025224
 8009d58:	08025244 	.word	0x08025244
 8009d5c:	0802526c 	.word	0x0802526c

08009d60 <AoC_Day_13>:
 */

#include "AoC/Days/Day13.h"

AdventOfCode_return_t AoC_Day_13(AdventOfCode_config_t config)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <AoC_Day_13+0x14>
		return AOC_RETURN_NOK;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <AoC_Day_13+0x16>

	// status code
	return AOC_RETURN_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <AoC_Day_14>:
 */

#include "AoC/Days/Day14.h"

AdventOfCode_return_t AoC_Day_14(AdventOfCode_config_t config)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	4603      	mov	r3, r0
 8009d8a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <AoC_Day_14+0x14>
		return AOC_RETURN_NOK;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e000      	b.n	8009d98 <AoC_Day_14+0x16>

	// status code
	return AOC_RETURN_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <AoC_Day_15>:
 */

#include "AoC/Days/Day15.h"

AdventOfCode_return_t AoC_Day_15(AdventOfCode_config_t config)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <AoC_Day_15+0x14>
		return AOC_RETURN_NOK;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e000      	b.n	8009dba <AoC_Day_15+0x16>

	// status code
	return AOC_RETURN_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <AoC_Day_16>:
 */

#include "AoC/Days/Day16.h"

AdventOfCode_return_t AoC_Day_16(AdventOfCode_config_t config)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	4603      	mov	r3, r0
 8009dce:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <AoC_Day_16+0x14>
		return AOC_RETURN_NOK;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <AoC_Day_16+0x16>

	// status code
	return AOC_RETURN_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <AoC_Day_17>:
 */

#include "AoC/Days/Day17.h"

AdventOfCode_return_t AoC_Day_17(AdventOfCode_config_t config)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <AoC_Day_17+0x14>
		return AOC_RETURN_NOK;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e000      	b.n	8009dfe <AoC_Day_17+0x16>

	// status code
	return AOC_RETURN_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <AoC_Day_18>:
 */

#include "AoC/Days/Day18.h"

AdventOfCode_return_t AoC_Day_18(AdventOfCode_config_t config)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	4603      	mov	r3, r0
 8009e12:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <AoC_Day_18+0x14>
		return AOC_RETURN_NOK;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <AoC_Day_18+0x16>

	// status code
	return AOC_RETURN_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <AoC_Day_19>:
 */

#include "AoC/Days/Day19.h"

AdventOfCode_return_t AoC_Day_19(AdventOfCode_config_t config)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <AoC_Day_19+0x14>
		return AOC_RETURN_NOK;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <AoC_Day_19+0x16>

	// status code
	return AOC_RETURN_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <AoC_Day_20>:
 */

#include "AoC/Days/Day20.h"

AdventOfCode_return_t AoC_Day_20(AdventOfCode_config_t config)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	4603      	mov	r3, r0
 8009e56:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <AoC_Day_20+0x14>
		return AOC_RETURN_NOK;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e000      	b.n	8009e64 <AoC_Day_20+0x16>

	// status code
	return AOC_RETURN_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <AoC_Day_21>:
 */

#include "AoC/Days/Day21.h"

AdventOfCode_return_t AoC_Day_21(AdventOfCode_config_t config)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <AoC_Day_21+0x14>
		return AOC_RETURN_NOK;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <AoC_Day_21+0x16>

	// status code
	return AOC_RETURN_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <AoC_Day_22>:
 */

#include "AoC/Days/Day22.h"

AdventOfCode_return_t AoC_Day_22(AdventOfCode_config_t config)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	4603      	mov	r3, r0
 8009e9a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <AoC_Day_22+0x14>
		return AOC_RETURN_NOK;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e000      	b.n	8009ea8 <AoC_Day_22+0x16>

	// status code
	return AOC_RETURN_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <AoC_Day_23>:
 */

#include "AoC/Days/Day23.h"

AdventOfCode_return_t AoC_Day_23(AdventOfCode_config_t config)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <AoC_Day_23+0x14>
		return AOC_RETURN_NOK;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <AoC_Day_23+0x16>

	// status code
	return AOC_RETURN_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <AoC_Day_24>:
 */

#include "AoC/Days/Day24.h"

AdventOfCode_return_t AoC_Day_24(AdventOfCode_config_t config)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	4603      	mov	r3, r0
 8009ede:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <AoC_Day_24+0x14>
		return AOC_RETURN_NOK;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <AoC_Day_24+0x16>

	// status code
	return AOC_RETURN_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <AoC_Day_25>:
 */

#include "AoC/Days/Day25.h"

AdventOfCode_return_t AoC_Day_25(AdventOfCode_config_t config)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <AoC_Day_25+0x14>
		return AOC_RETURN_NOK;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <AoC_Day_25+0x16>

	// status code
	return AOC_RETURN_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <System_init>:

extern USBD_HandleTypeDef hUsbDeviceHS;

// state functions
void System_init(System_t *state)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
	// system resource states
	state->sram_working = 1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	70da      	strb	r2, [r3, #3]

	// external interface status
	state->vcom_open = 0;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	701a      	strb	r2, [r3, #0]

	// perform selftest
	System_selfTest(state);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f804 	bl	8009f48 <System_selfTest>
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <System_selfTest>:

void System_selfTest(System_t *state)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
	// test psram
	uint32_t *ptr = (void*)0x60000000 + 1000000ul;
 8009f50:	4b21      	ldr	r3, [pc, #132]	; (8009fd8 <System_selfTest+0x90>)
 8009f52:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8009f54:	2300      	movs	r3, #0
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	e00a      	b.n	8009f70 <System_selfTest+0x28>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	0919      	lsrs	r1, r3, #4
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	4413      	add	r3, r2
 8009f66:	b28a      	uxth	r2, r1
 8009f68:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4a1a      	ldr	r2, [pc, #104]	; (8009fdc <System_selfTest+0x94>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d9f0      	bls.n	8009f5a <System_selfTest+0x12>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	e00f      	b.n	8009f9e <System_selfTest+0x56>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	091b      	lsrs	r3, r3, #4
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d002      	beq.n	8009f98 <System_selfTest+0x50>
			state->sram_working = 0;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	613b      	str	r3, [r7, #16]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <System_selfTest+0x94>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d9eb      	bls.n	8009f7e <System_selfTest+0x36>

	// test sdio
	state->sdio.file_result = f_mount(&state->sdio.file_system, (const TCHAR*)SDPath, 0);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009fac:	2200      	movs	r2, #0
 8009fae:	490c      	ldr	r1, [pc, #48]	; (8009fe0 <System_selfTest+0x98>)
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f012 fe8b 	bl	801cccc <f_mount>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(state->sdio.file_result != FR_OK)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <System_selfTest+0x88>
		state->sdio_working = 0;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check
}
 8009fd0:	bf00      	nop
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	600f4240 	.word	0x600f4240
 8009fdc:	000f423f 	.word	0x000f423f
 8009fe0:	20001764 	.word	0x20001764

08009fe4 <System_initLog>:

// interface log functions
void System_initLog(System_t *state)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	char *logo = "\n________________________________________________________________________________\n"
 8009fec:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <System_initLog+0x38>)
 8009fee:	60fb      	str	r3, [r7, #12]
			" Device: FOX-PDA-v1\n"
			" Author: Justin Verkade\n"
			" Function: General purpose high performance developement board.\n"
			"________________________________________________________________________________\n";

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8009ff0:	bf00      	nop
 8009ff2:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <System_initLog+0x3c>)
 8009ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1f8      	bne.n	8009ff2 <System_initLog+0xe>
	CDC_Transmit_HS((uint8_t*)logo, strlen(logo));
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7f6 f905 	bl	8000210 <strlen>
 800a006:	4603      	mov	r3, r0
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4619      	mov	r1, r3
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f013 fefb 	bl	801de08 <CDC_Transmit_HS>
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	08025288 	.word	0x08025288
 800a020:	200017a8 	.word	0x200017a8

0800a024 <System_selfTestLog>:

void System_selfTestLog(System_t *state)
{
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b0d3      	sub	sp, #332	; 0x14c
 800a028:	af02      	add	r7, sp, #8
 800a02a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a02e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a032:	6018      	str	r0, [r3, #0]
	char *text = "\n"
 800a034:	4b3b      	ldr	r3, [pc, #236]	; (800a124 <System_selfTestLog+0x100>)
 800a036:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			" -> SDIO status: %s\n"
			" -> WIFI status: %s\n"
			"________________________________________________________________________________\n";

	char sram_str[16];
	if(state->sram_working)
 800a03a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a03e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <System_selfTestLog+0x36>
		strcpy(sram_str, "ENABLED");
 800a04a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a04e:	4a36      	ldr	r2, [pc, #216]	; (800a128 <System_selfTestLog+0x104>)
 800a050:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a054:	e883 0003 	stmia.w	r3, {r0, r1}
 800a058:	e005      	b.n	800a066 <System_selfTestLog+0x42>
	else
		strcpy(sram_str, "DISABLED");
 800a05a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a05e:	4a33      	ldr	r2, [pc, #204]	; (800a12c <System_selfTestLog+0x108>)
 800a060:	ca07      	ldmia	r2, {r0, r1, r2}
 800a062:	c303      	stmia	r3!, {r0, r1}
 800a064:	701a      	strb	r2, [r3, #0]

	char sdio_str[16];
	if(state->sdio_working)
 800a066:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a06a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	789b      	ldrb	r3, [r3, #2]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <System_selfTestLog+0x62>
		strcpy(sdio_str, "ENABLED");
 800a076:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800a07a:	4a2b      	ldr	r2, [pc, #172]	; (800a128 <System_selfTestLog+0x104>)
 800a07c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a080:	e883 0003 	stmia.w	r3, {r0, r1}
 800a084:	e005      	b.n	800a092 <System_selfTestLog+0x6e>
	else
		strcpy(sdio_str, "DISABLED");
 800a086:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800a08a:	4a28      	ldr	r2, [pc, #160]	; (800a12c <System_selfTestLog+0x108>)
 800a08c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a08e:	c303      	stmia	r3!, {r0, r1}
 800a090:	701a      	strb	r2, [r3, #0]

	char wifi_str[16];
	if(state->wifi_working)
 800a092:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a096:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	78db      	ldrb	r3, [r3, #3]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <System_selfTestLog+0x8c>
		strcpy(wifi_str, "NOT IMPLEMENTED"); // todo wifi not functional
 800a0a2:	4b23      	ldr	r3, [pc, #140]	; (800a130 <System_selfTestLog+0x10c>)
 800a0a4:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 800a0a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a0aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a0ae:	e005      	b.n	800a0bc <System_selfTestLog+0x98>
	else
		strcpy(wifi_str, "DISABLED");
 800a0b0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	; (800a12c <System_selfTestLog+0x108>)
 800a0b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a0b8:	c303      	stmia	r3!, {r0, r1}
 800a0ba:	701a      	strb	r2, [r3, #0]

	char text_buffer[256];
	sprintf(text_buffer, text, sram_str, sdio_str, wifi_str);
 800a0bc:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800a0c0:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800a0c4:	f107 000c 	add.w	r0, r7, #12
 800a0c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800a0d4:	f015 f938 	bl	801f348 <sprintf>

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 800a0d8:	bf00      	nop
 800a0da:	4b16      	ldr	r3, [pc, #88]	; (800a134 <System_selfTestLog+0x110>)
 800a0dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1f8      	bne.n	800a0da <System_selfTestLog+0xb6>
	CDC_Transmit_HS((uint8_t*)text_buffer, strlen(text_buffer));
 800a0e8:	f107 030c 	add.w	r3, r7, #12
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f6 f88f 	bl	8000210 <strlen>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	f107 030c 	add.w	r3, r7, #12
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f013 fe83 	bl	801de08 <CDC_Transmit_HS>

	// print new cursor
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 800a102:	bf00      	nop
 800a104:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <System_selfTestLog+0x110>)
 800a106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a10a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f8      	bne.n	800a104 <System_selfTestLog+0xe0>
	CDC_Transmit_HS((uint8_t*)">", 1);
 800a112:	2101      	movs	r1, #1
 800a114:	4808      	ldr	r0, [pc, #32]	; (800a138 <System_selfTestLog+0x114>)
 800a116:	f013 fe77 	bl	801de08 <CDC_Transmit_HS>
}
 800a11a:	bf00      	nop
 800a11c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a120:	46bd      	mov	sp, r7
 800a122:	bd90      	pop	{r4, r7, pc}
 800a124:	08025628 	.word	0x08025628
 800a128:	080256c8 	.word	0x080256c8
 800a12c:	080256d0 	.word	0x080256d0
 800a130:	080256dc 	.word	0x080256dc
 800a134:	200017a8 	.word	0x200017a8
 800a138:	080256ec 	.word	0x080256ec

0800a13c <sram_malloc>:
// local memory data
static uint8_t *sram_memory = (uint8_t*)SRAM_MEMORY_ADDRESS;
static uint32_t sram_ptr = 0x00000000llu;

void* sram_malloc(uint32_t bytes)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
	// get allocation ptr;
	void *alloc_ptr = sram_memory + sram_ptr;
 800a144:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <sram_malloc+0x44>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <sram_malloc+0x48>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4413      	add	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]

	// check for overrun
	uint32_t block_size = sram_ptr + bytes;
 800a150:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <sram_malloc+0x48>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	4413      	add	r3, r2
 800a158:	60bb      	str	r3, [r7, #8]
	if(block_size >= SRAM_MEMORY_SIZE)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a160:	d301      	bcc.n	800a166 <sram_malloc+0x2a>
		return NULL;
 800a162:	2300      	movs	r3, #0
 800a164:	e006      	b.n	800a174 <sram_malloc+0x38>

	// increment memory ptr;
	sram_ptr += bytes;
 800a166:	4b07      	ldr	r3, [pc, #28]	; (800a184 <sram_malloc+0x48>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	4a05      	ldr	r2, [pc, #20]	; (800a184 <sram_malloc+0x48>)
 800a170:	6013      	str	r3, [r2, #0]

	// return allocation address
	return alloc_ptr;
 800a172:	68fb      	ldr	r3, [r7, #12]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20000014 	.word	0x20000014
 800a184:	20000b24 	.word	0x20000b24

0800a188 <sram_calloc>:

void* sram_calloc(uint32_t object_count, uint16_t object_size)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	807b      	strh	r3, [r7, #2]
	// create memory block
	uint32_t block_size = object_count * object_size;
 800a194:	887a      	ldrh	r2, [r7, #2]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	60fb      	str	r3, [r7, #12]
	void *alloc_ptr = sram_malloc(block_size);
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff ffcc 	bl	800a13c <sram_malloc>
 800a1a4:	60b8      	str	r0, [r7, #8]

	// check if allocation completes
	if(alloc_ptr == NULL)
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <sram_calloc+0x28>
		return NULL;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e005      	b.n	800a1bc <sram_calloc+0x34>

	// empty alloction block
	memset(alloc_ptr, 0x00, block_size);
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	68b8      	ldr	r0, [r7, #8]
 800a1b6:	f015 f8a3 	bl	801f300 <memset>

	// return cleared allocation addres
	return alloc_ptr;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <sram_clrmem>:

void sram_clrmem()
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
	// reset allocation ptr
	sram_ptr = 0;
 800a1c8:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <sram_clrmem+0x14>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
}
 800a1ce:	bf00      	nop
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	20000b24 	.word	0x20000b24

0800a1dc <checkImplementation>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void checkImplementation(char token_buffer[6][32])
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800a1e8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800a1ec:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 800a1ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800a1f2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3320      	adds	r3, #32
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d105      	bne.n	800a20c <checkImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 800a200:	2215      	movs	r2, #21
 800a202:	4946      	ldr	r1, [pc, #280]	; (800a31c <checkImplementation+0x140>)
 800a204:	2002      	movs	r0, #2
 800a206:	f7f7 f815 	bl	8001234 <AdventOfCode_print>
		return;
 800a20a:	e083      	b.n	800a314 <checkImplementation+0x138>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 800a20c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800a210:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3320      	adds	r3, #32
 800a218:	4618      	mov	r0, r3
 800a21a:	f014 fdd1 	bl	801edc0 <atoi>
 800a21e:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
	if(day > 25 || day <= 0)
 800a222:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800a226:	2b19      	cmp	r3, #25
 800a228:	dc03      	bgt.n	800a232 <checkImplementation+0x56>
 800a22a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dc05      	bgt.n	800a23e <checkImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800a232:	221a      	movs	r2, #26
 800a234:	493a      	ldr	r1, [pc, #232]	; (800a320 <checkImplementation+0x144>)
 800a236:	2002      	movs	r0, #2
 800a238:	f7f6 fffc 	bl	8001234 <AdventOfCode_print>
		return;
 800a23c:	e06a      	b.n	800a314 <checkImplementation+0x138>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Checking day %ld\n", day);
 800a23e:	f107 0320 	add.w	r3, r7, #32
 800a242:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a246:	4937      	ldr	r1, [pc, #220]	; (800a324 <checkImplementation+0x148>)
 800a248:	4618      	mov	r0, r3
 800a24a:	f015 f87d 	bl	801f348 <sprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a24e:	f107 0320 	add.w	r3, r7, #32
 800a252:	4618      	mov	r0, r3
 800a254:	f7f5 ffdc 	bl	8000210 <strlen>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	f107 0320 	add.w	r3, r7, #32
 800a260:	4619      	mov	r1, r3
 800a262:	2002      	movs	r0, #2
 800a264:	f7f6 ffe6 	bl	8001234 <AdventOfCode_print>

	// check day
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 800a268:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800a26c:	3b01      	subs	r3, #1
 800a26e:	4a2e      	ldr	r2, [pc, #184]	; (800a328 <checkImplementation+0x14c>)
 800a270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a274:	2000      	movs	r0, #0
 800a276:	4798      	blx	r3
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
	if(ret == AOC_RETURN_OK)
 800a27e:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 800a282:	2b00      	cmp	r3, #0
 800a284:	d105      	bne.n	800a292 <checkImplementation+0xb6>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Implemented\n", strlen("\tState: Implemented\n"));
 800a286:	2214      	movs	r2, #20
 800a288:	4928      	ldr	r1, [pc, #160]	; (800a32c <checkImplementation+0x150>)
 800a28a:	2002      	movs	r0, #2
 800a28c:	f7f6 ffd2 	bl	8001234 <AdventOfCode_print>
 800a290:	e004      	b.n	800a29c <checkImplementation+0xc0>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 800a292:	2218      	movs	r2, #24
 800a294:	4926      	ldr	r1, [pc, #152]	; (800a330 <checkImplementation+0x154>)
 800a296:	2002      	movs	r0, #2
 800a298:	f7f6 ffcc 	bl	8001234 <AdventOfCode_print>

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 800a29c:	f107 0320 	add.w	r3, r7, #32
 800a2a0:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a2a4:	4923      	ldr	r1, [pc, #140]	; (800a334 <checkImplementation+0x158>)
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f015 f84e 	bl	801f348 <sprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 800a2ac:	f107 0208 	add.w	r2, r7, #8
 800a2b0:	f107 0320 	add.w	r3, r7, #32
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f013 fb3e 	bl	801d938 <f_stat>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d105      	bne.n	800a2ce <checkImplementation+0xf2>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Present\n", strlen("\tDebug: Present\n"));
 800a2c2:	2210      	movs	r2, #16
 800a2c4:	491c      	ldr	r1, [pc, #112]	; (800a338 <checkImplementation+0x15c>)
 800a2c6:	2002      	movs	r0, #2
 800a2c8:	f7f6 ffb4 	bl	8001234 <AdventOfCode_print>
 800a2cc:	e004      	b.n	800a2d8 <checkImplementation+0xfc>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 800a2ce:	220f      	movs	r2, #15
 800a2d0:	491a      	ldr	r1, [pc, #104]	; (800a33c <checkImplementation+0x160>)
 800a2d2:	2002      	movs	r0, #2
 800a2d4:	f7f6 ffae 	bl	8001234 <AdventOfCode_print>

	// check release file
	sprintf(buffer, "day%ld.txt", day);
 800a2d8:	f107 0320 	add.w	r3, r7, #32
 800a2dc:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a2e0:	4917      	ldr	r1, [pc, #92]	; (800a340 <checkImplementation+0x164>)
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f015 f830 	bl	801f348 <sprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 800a2e8:	f107 0208 	add.w	r2, r7, #8
 800a2ec:	f107 0320 	add.w	r3, r7, #32
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f013 fb20 	bl	801d938 <f_stat>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d105      	bne.n	800a30a <checkImplementation+0x12e>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Present\n", strlen("\tRelease: Present\n"));
 800a2fe:	2212      	movs	r2, #18
 800a300:	4910      	ldr	r1, [pc, #64]	; (800a344 <checkImplementation+0x168>)
 800a302:	2002      	movs	r0, #2
 800a304:	f7f6 ff96 	bl	8001234 <AdventOfCode_print>
 800a308:	e004      	b.n	800a314 <checkImplementation+0x138>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 800a30a:	2211      	movs	r2, #17
 800a30c:	490e      	ldr	r1, [pc, #56]	; (800a348 <checkImplementation+0x16c>)
 800a30e:	2002      	movs	r0, #2
 800a310:	f7f6 ff90 	bl	8001234 <AdventOfCode_print>
}
 800a314:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	080256f0 	.word	0x080256f0
 800a320:	08025708 	.word	0x08025708
 800a324:	08025724 	.word	0x08025724
 800a328:	200016f0 	.word	0x200016f0
 800a32c:	08025738 	.word	0x08025738
 800a330:	08025750 	.word	0x08025750
 800a334:	0802576c 	.word	0x0802576c
 800a338:	08025778 	.word	0x08025778
 800a33c:	0802578c 	.word	0x0802578c
 800a340:	0802579c 	.word	0x0802579c
 800a344:	080257a8 	.word	0x080257a8
 800a348:	080257bc 	.word	0x080257bc

0800a34c <runDebugImplementation>:

static void runDebugImplementation(char token_buffer[6][32])
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800a352:	af00      	add	r7, sp, #0
 800a354:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a358:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800a35c:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 800a35e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a362:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3320      	adds	r3, #32
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d105      	bne.n	800a37c <runDebugImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 800a370:	2215      	movs	r2, #21
 800a372:	495a      	ldr	r1, [pc, #360]	; (800a4dc <runDebugImplementation+0x190>)
 800a374:	2002      	movs	r0, #2
 800a376:	f7f6 ff5d 	bl	8001234 <AdventOfCode_print>
		return;
 800a37a:	e0aa      	b.n	800a4d2 <runDebugImplementation+0x186>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 800a37c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a380:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3320      	adds	r3, #32
 800a388:	4618      	mov	r0, r3
 800a38a:	f014 fd19 	bl	801edc0 <atoi>
 800a38e:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
	if(day > 25 || day <= 0)
 800a392:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a396:	2b19      	cmp	r3, #25
 800a398:	dc03      	bgt.n	800a3a2 <runDebugImplementation+0x56>
 800a39a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	dc05      	bgt.n	800a3ae <runDebugImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800a3a2:	221a      	movs	r2, #26
 800a3a4:	494e      	ldr	r1, [pc, #312]	; (800a4e0 <runDebugImplementation+0x194>)
 800a3a6:	2002      	movs	r0, #2
 800a3a8:	f7f6 ff44 	bl	8001234 <AdventOfCode_print>
		return;
 800a3ac:	e091      	b.n	800a4d2 <runDebugImplementation+0x186>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing debug day %ld\n", day);
 800a3ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3b2:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800a3b6:	494b      	ldr	r1, [pc, #300]	; (800a4e4 <runDebugImplementation+0x198>)
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f014 ffc5 	bl	801f348 <sprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f5 ff24 	bl	8000210 <strlen>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2002      	movs	r0, #2
 800a3d4:	f7f6 ff2e 	bl	8001234 <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 800a3d8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	4a42      	ldr	r2, [pc, #264]	; (800a4e8 <runDebugImplementation+0x19c>)
 800a3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	4798      	blx	r3
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
	if(ret != AOC_RETURN_OK)
 800a3ee:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <runDebugImplementation+0xb6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 800a3f6:	2218      	movs	r2, #24
 800a3f8:	493c      	ldr	r1, [pc, #240]	; (800a4ec <runDebugImplementation+0x1a0>)
 800a3fa:	2002      	movs	r0, #2
 800a3fc:	f7f6 ff1a 	bl	8001234 <AdventOfCode_print>
		return;
 800a400:	e067      	b.n	800a4d2 <runDebugImplementation+0x186>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 800a402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a406:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800a40a:	4939      	ldr	r1, [pc, #228]	; (800a4f0 <runDebugImplementation+0x1a4>)
 800a40c:	4618      	mov	r0, r3
 800a40e:	f014 ff9b 	bl	801f348 <sprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 800a412:	f107 020c 	add.w	r2, r7, #12
 800a416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f013 fa8b 	bl	801d938 <f_stat>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <runDebugImplementation+0xe8>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 800a428:	220f      	movs	r2, #15
 800a42a:	4932      	ldr	r1, [pc, #200]	; (800a4f4 <runDebugImplementation+0x1a8>)
 800a42c:	2002      	movs	r0, #2
 800a42e:	f7f6 ff01 	bl	8001234 <AdventOfCode_print>
		return;
 800a432:	e04e      	b.n	800a4d2 <runDebugImplementation+0x186>
	}

	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 800a434:	2207      	movs	r2, #7
 800a436:	4930      	ldr	r1, [pc, #192]	; (800a4f8 <runDebugImplementation+0x1ac>)
 800a438:	2002      	movs	r0, #2
 800a43a:	f7f6 fefb 	bl	8001234 <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 800a43e:	f001 fd05 	bl	800be4c <HAL_GetTick>
 800a442:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_DEBUG_VERBOSE);
 800a446:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a44a:	3b01      	subs	r3, #1
 800a44c:	4a26      	ldr	r2, [pc, #152]	; (800a4e8 <runDebugImplementation+0x19c>)
 800a44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a452:	2002      	movs	r0, #2
 800a454:	4798      	blx	r3
 800a456:	4603      	mov	r3, r0
 800a458:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	uint32_t end = HAL_GetTick();
 800a45c:	f001 fcf6 	bl	800be4c <HAL_GetTick>
 800a460:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424

	// clear allocated memory
	sram_clrmem();
 800a464:	f7ff feae 	bl	800a1c4 <sram_clrmem>

	// print execution results
	if(dret == AOC_RETURN_OK)
 800a468:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d118      	bne.n	800a4a2 <runDebugImplementation+0x156>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 800a470:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a474:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800a478:	1ad2      	subs	r2, r2, r3
 800a47a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a47e:	491f      	ldr	r1, [pc, #124]	; (800a4fc <runDebugImplementation+0x1b0>)
 800a480:	4618      	mov	r0, r3
 800a482:	f014 ff61 	bl	801f348 <sprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7f5 fec0 	bl	8000210 <strlen>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a498:	4619      	mov	r1, r3
 800a49a:	2002      	movs	r0, #2
 800a49c:	f7f6 feca 	bl	8001234 <AdventOfCode_print>
 800a4a0:	e017      	b.n	800a4d2 <runDebugImplementation+0x186>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 800a4a2:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a4a6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b0:	4913      	ldr	r1, [pc, #76]	; (800a500 <runDebugImplementation+0x1b4>)
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f014 ff48 	bl	801f348 <sprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a4b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7f5 fea7 	bl	8000210 <strlen>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	2002      	movs	r0, #2
 800a4ce:	f7f6 feb1 	bl	8001234 <AdventOfCode_print>
	}
}
 800a4d2:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	080256f0 	.word	0x080256f0
 800a4e0:	08025708 	.word	0x08025708
 800a4e4:	080257d0 	.word	0x080257d0
 800a4e8:	200016f0 	.word	0x200016f0
 800a4ec:	08025750 	.word	0x08025750
 800a4f0:	0802576c 	.word	0x0802576c
 800a4f4:	0802578c 	.word	0x0802578c
 800a4f8:	080257ec 	.word	0x080257ec
 800a4fc:	080257f4 	.word	0x080257f4
 800a500:	08025808 	.word	0x08025808

0800a504 <runReleaseImplementation>:

static void runReleaseImplementation(char token_buffer[6][32])
{
 800a504:	b580      	push	{r7, lr}
 800a506:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a510:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800a514:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 800a516:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a51a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3320      	adds	r3, #32
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d105      	bne.n	800a534 <runReleaseImplementation+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 800a528:	2215      	movs	r2, #21
 800a52a:	495a      	ldr	r1, [pc, #360]	; (800a694 <runReleaseImplementation+0x190>)
 800a52c:	2002      	movs	r0, #2
 800a52e:	f7f6 fe81 	bl	8001234 <AdventOfCode_print>
		return;
 800a532:	e0aa      	b.n	800a68a <runReleaseImplementation+0x186>
	}

	// check value
	int32_t day = atoi(token_buffer[1]);
 800a534:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a538:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3320      	adds	r3, #32
 800a540:	4618      	mov	r0, r3
 800a542:	f014 fc3d 	bl	801edc0 <atoi>
 800a546:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
	if(day > 25 || day <= 0)
 800a54a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a54e:	2b19      	cmp	r3, #25
 800a550:	dc03      	bgt.n	800a55a <runReleaseImplementation+0x56>
 800a552:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a556:	2b00      	cmp	r3, #0
 800a558:	dc05      	bgt.n	800a566 <runReleaseImplementation+0x62>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800a55a:	221a      	movs	r2, #26
 800a55c:	494e      	ldr	r1, [pc, #312]	; (800a698 <runReleaseImplementation+0x194>)
 800a55e:	2002      	movs	r0, #2
 800a560:	f7f6 fe68 	bl	8001234 <AdventOfCode_print>
		return;
 800a564:	e091      	b.n	800a68a <runReleaseImplementation+0x186>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing release day %ld\n", day);
 800a566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a56a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800a56e:	494b      	ldr	r1, [pc, #300]	; (800a69c <runReleaseImplementation+0x198>)
 800a570:	4618      	mov	r0, r3
 800a572:	f014 fee9 	bl	801f348 <sprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f5 fe48 	bl	8000210 <strlen>
 800a580:	4603      	mov	r3, r0
 800a582:	461a      	mov	r2, r3
 800a584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a588:	4619      	mov	r1, r3
 800a58a:	2002      	movs	r0, #2
 800a58c:	f7f6 fe52 	bl	8001234 <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 800a590:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a594:	3b01      	subs	r3, #1
 800a596:	4a42      	ldr	r2, [pc, #264]	; (800a6a0 <runReleaseImplementation+0x19c>)
 800a598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a59c:	2000      	movs	r0, #0
 800a59e:	4798      	blx	r3
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f887 3433 	strb.w	r3, [r7, #1075]	; 0x433
	if(ret != AOC_RETURN_OK)
 800a5a6:	f897 3433 	ldrb.w	r3, [r7, #1075]	; 0x433
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <runReleaseImplementation+0xb6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 800a5ae:	2218      	movs	r2, #24
 800a5b0:	493c      	ldr	r1, [pc, #240]	; (800a6a4 <runReleaseImplementation+0x1a0>)
 800a5b2:	2002      	movs	r0, #2
 800a5b4:	f7f6 fe3e 	bl	8001234 <AdventOfCode_print>
		return;
 800a5b8:	e067      	b.n	800a68a <runReleaseImplementation+0x186>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ld.txt", day);
 800a5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5be:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800a5c2:	4939      	ldr	r1, [pc, #228]	; (800a6a8 <runReleaseImplementation+0x1a4>)
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f014 febf 	bl	801f348 <sprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 800a5ca:	f107 020c 	add.w	r2, r7, #12
 800a5ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f013 f9af 	bl	801d938 <f_stat>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <runReleaseImplementation+0xe8>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 800a5e0:	2211      	movs	r2, #17
 800a5e2:	4932      	ldr	r1, [pc, #200]	; (800a6ac <runReleaseImplementation+0x1a8>)
 800a5e4:	2002      	movs	r0, #2
 800a5e6:	f7f6 fe25 	bl	8001234 <AdventOfCode_print>
		return;
 800a5ea:	e04e      	b.n	800a68a <runReleaseImplementation+0x186>
	}


	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 800a5ec:	2207      	movs	r2, #7
 800a5ee:	4930      	ldr	r1, [pc, #192]	; (800a6b0 <runReleaseImplementation+0x1ac>)
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	f7f6 fe1f 	bl	8001234 <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 800a5f6:	f001 fc29 	bl	800be4c <HAL_GetTick>
 800a5fa:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_RELEASE_VERBOSE);
 800a5fe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a602:	3b01      	subs	r3, #1
 800a604:	4a26      	ldr	r2, [pc, #152]	; (800a6a0 <runReleaseImplementation+0x19c>)
 800a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a60a:	2004      	movs	r0, #4
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	uint32_t end = HAL_GetTick();
 800a614:	f001 fc1a 	bl	800be4c <HAL_GetTick>
 800a618:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424

	// clear allocated memory
	sram_clrmem();
 800a61c:	f7ff fdd2 	bl	800a1c4 <sram_clrmem>

	// print execution results
	if(dret == AOC_RETURN_OK)
 800a620:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800a624:	2b00      	cmp	r3, #0
 800a626:	d118      	bne.n	800a65a <runReleaseImplementation+0x156>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 800a628:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a62c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800a630:	1ad2      	subs	r2, r2, r3
 800a632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a636:	491f      	ldr	r1, [pc, #124]	; (800a6b4 <runReleaseImplementation+0x1b0>)
 800a638:	4618      	mov	r0, r3
 800a63a:	f014 fe85 	bl	801f348 <sprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a63e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a642:	4618      	mov	r0, r3
 800a644:	f7f5 fde4 	bl	8000210 <strlen>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a650:	4619      	mov	r1, r3
 800a652:	2002      	movs	r0, #2
 800a654:	f7f6 fdee 	bl	8001234 <AdventOfCode_print>
 800a658:	e017      	b.n	800a68a <runReleaseImplementation+0x186>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 800a65a:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800a65e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800a662:	1ad2      	subs	r2, r2, r3
 800a664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a668:	4913      	ldr	r1, [pc, #76]	; (800a6b8 <runReleaseImplementation+0x1b4>)
 800a66a:	4618      	mov	r0, r3
 800a66c:	f014 fe6c 	bl	801f348 <sprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a674:	4618      	mov	r0, r3
 800a676:	f7f5 fdcb 	bl	8000210 <strlen>
 800a67a:	4603      	mov	r3, r0
 800a67c:	461a      	mov	r2, r3
 800a67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a682:	4619      	mov	r1, r3
 800a684:	2002      	movs	r0, #2
 800a686:	f7f6 fdd5 	bl	8001234 <AdventOfCode_print>
	}
}
 800a68a:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	080256f0 	.word	0x080256f0
 800a698:	08025708 	.word	0x08025708
 800a69c:	08025818 	.word	0x08025818
 800a6a0:	200016f0 	.word	0x200016f0
 800a6a4:	08025750 	.word	0x08025750
 800a6a8:	0802579c 	.word	0x0802579c
 800a6ac:	080257bc 	.word	0x080257bc
 800a6b0:	080257ec 	.word	0x080257ec
 800a6b4:	080257f4 	.word	0x080257f4
 800a6b8:	08025808 	.word	0x08025808

0800a6bc <fetchPuzzleInput>:

static void fetchPuzzleInput(char token_buffer[6][32])
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	f5ad 6dc9 	sub.w	sp, sp, #1608	; 0x648
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800a6c8:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800a6cc:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 800a6ce:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800a6d2:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3320      	adds	r3, #32
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d105      	bne.n	800a6ec <fetchPuzzleInput+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 800a6e0:	2214      	movs	r2, #20
 800a6e2:	4953      	ldr	r1, [pc, #332]	; (800a830 <fetchPuzzleInput+0x174>)
 800a6e4:	2002      	movs	r0, #2
 800a6e6:	f7f6 fda5 	bl	8001234 <AdventOfCode_print>
		return;
 800a6ea:	e09c      	b.n	800a826 <fetchPuzzleInput+0x16a>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Creating %s\n", token_buffer[1]);
 800a6ec:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800a6f0:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f103 0220 	add.w	r2, r3, #32
 800a6fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a6fe:	494d      	ldr	r1, [pc, #308]	; (800a834 <fetchPuzzleInput+0x178>)
 800a700:	4618      	mov	r0, r3
 800a702:	f014 fe21 	bl	801f348 <sprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a706:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7f5 fd80 	bl	8000210 <strlen>
 800a710:	4603      	mov	r3, r0
 800a712:	461a      	mov	r2, r3
 800a714:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a718:	4619      	mov	r1, r3
 800a71a:	2002      	movs	r0, #2
 800a71c:	f7f6 fd8a 	bl	8001234 <AdventOfCode_print>

	// create file
	FIL file;
	uint8_t ret = f_open(&file, token_buffer[1], FA_CREATE_ALWAYS | FA_WRITE);
 800a720:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800a724:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f103 0120 	add.w	r1, r3, #32
 800a72e:	f107 0308 	add.w	r3, r7, #8
 800a732:	220a      	movs	r2, #10
 800a734:	4618      	mov	r0, r3
 800a736:	f012 fb0f 	bl	801cd58 <f_open>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f887 363f 	strb.w	r3, [r7, #1599]	; 0x63f
	if(ret != FR_OK)
 800a740:	f897 363f 	ldrb.w	r3, [r7, #1599]	; 0x63f
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <fetchPuzzleInput+0x98>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to create file!\n", strlen("Failed to create file!\n"));
 800a748:	2217      	movs	r2, #23
 800a74a:	493b      	ldr	r1, [pc, #236]	; (800a838 <fetchPuzzleInput+0x17c>)
 800a74c:	2002      	movs	r0, #2
 800a74e:	f7f6 fd71 	bl	8001234 <AdventOfCode_print>
		return;
 800a752:	e068      	b.n	800a826 <fetchPuzzleInput+0x16a>
	}

	// fetch data
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploade data:\n{\n", strlen("Uploade data:\n{\n"));
 800a754:	2210      	movs	r2, #16
 800a756:	4939      	ldr	r1, [pc, #228]	; (800a83c <fetchPuzzleInput+0x180>)
 800a758:	2002      	movs	r0, #2
 800a75a:	f7f6 fd6b 	bl	8001234 <AdventOfCode_print>

	usb_rx_ready = 0;
 800a75e:	4b38      	ldr	r3, [pc, #224]	; (800a840 <fetchPuzzleInput+0x184>)
 800a760:	2200      	movs	r2, #0
 800a762:	701a      	strb	r2, [r3, #0]
	uint8_t done = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
	uint32_t counter = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
	while(!done)
 800a770:	e046      	b.n	800a800 <fetchPuzzleInput+0x144>
	{
		// wait for new data
		if(!usb_rx_ready)
 800a772:	4b33      	ldr	r3, [pc, #204]	; (800a840 <fetchPuzzleInput+0x184>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d100      	bne.n	800a77e <fetchPuzzleInput+0xc2>
			continue;
 800a77c:	e040      	b.n	800a800 <fetchPuzzleInput+0x144>

		// flicker lightn light
		if((counter++ % 2) == 0)
 800a77e:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	f8c7 2640 	str.w	r2, [r7, #1600]	; 0x640
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d103      	bne.n	800a798 <fetchPuzzleInput+0xdc>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800a790:	2140      	movs	r1, #64	; 0x40
 800a792:	482c      	ldr	r0, [pc, #176]	; (800a844 <fetchPuzzleInput+0x188>)
 800a794:	f002 fc9b 	bl	800d0ce <HAL_GPIO_TogglePin>

		// check last character
		char last_character = usb_rx_buffer[usb_rx_length - 3];
 800a798:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <fetchPuzzleInput+0x18c>)
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	3b03      	subs	r3, #3
 800a79e:	4a2b      	ldr	r2, [pc, #172]	; (800a84c <fetchPuzzleInput+0x190>)
 800a7a0:	5cd3      	ldrb	r3, [r2, r3]
 800a7a2:	f887 363e 	strb.w	r3, [r7, #1598]	; 0x63e
		if(last_character == '`')
 800a7a6:	f897 363e 	ldrb.w	r3, [r7, #1598]	; 0x63e
 800a7aa:	2b60      	cmp	r3, #96	; 0x60
 800a7ac:	d108      	bne.n	800a7c0 <fetchPuzzleInput+0x104>
		{
			usb_rx_buffer[usb_rx_length - 3] = 0x00;
 800a7ae:	4b26      	ldr	r3, [pc, #152]	; (800a848 <fetchPuzzleInput+0x18c>)
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	3b03      	subs	r3, #3
 800a7b4:	4a25      	ldr	r2, [pc, #148]	; (800a84c <fetchPuzzleInput+0x190>)
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	54d1      	strb	r1, [r2, r3]
			done = 1;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f887 3647 	strb.w	r3, [r7, #1607]	; 0x647
		}

		// echo message
		sprintf(buffer, "%s", (char*)usb_rx_buffer);
 800a7c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a7c4:	4a21      	ldr	r2, [pc, #132]	; (800a84c <fetchPuzzleInput+0x190>)
 800a7c6:	4922      	ldr	r1, [pc, #136]	; (800a850 <fetchPuzzleInput+0x194>)
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f014 fdbd 	bl	801f348 <sprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a7ce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7f5 fd1c 	bl	8000210 <strlen>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	2002      	movs	r0, #2
 800a7e4:	f7f6 fd26 	bl	8001234 <AdventOfCode_print>

		// write to file
		f_write(&file, usb_rx_buffer, usb_rx_length, NULL);
 800a7e8:	4b17      	ldr	r3, [pc, #92]	; (800a848 <fetchPuzzleInput+0x18c>)
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f107 0008 	add.w	r0, r7, #8
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4915      	ldr	r1, [pc, #84]	; (800a84c <fetchPuzzleInput+0x190>)
 800a7f6:	f012 fdac 	bl	801d352 <f_write>

		// clear flag
		usb_rx_ready = 0;
 800a7fa:	4b11      	ldr	r3, [pc, #68]	; (800a840 <fetchPuzzleInput+0x184>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	701a      	strb	r2, [r3, #0]
	while(!done)
 800a800:	f897 3647 	ldrb.w	r3, [r7, #1607]	; 0x647
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0b4      	beq.n	800a772 <fetchPuzzleInput+0xb6>
	}

	// close file
	f_close(&file);
 800a808:	f107 0308 	add.w	r3, r7, #8
 800a80c:	4618      	mov	r0, r3
 800a80e:	f012 ff93 	bl	801d738 <f_close>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\n}\nSaving input\n", strlen("\n}\nSaving input\n"));
 800a812:	2210      	movs	r2, #16
 800a814:	490f      	ldr	r1, [pc, #60]	; (800a854 <fetchPuzzleInput+0x198>)
 800a816:	2002      	movs	r0, #2
 800a818:	f7f6 fd0c 	bl	8001234 <AdventOfCode_print>

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800a81c:	2201      	movs	r2, #1
 800a81e:	2140      	movs	r1, #64	; 0x40
 800a820:	4808      	ldr	r0, [pc, #32]	; (800a844 <fetchPuzzleInput+0x188>)
 800a822:	f002 fc3b 	bl	800d09c <HAL_GPIO_WritePin>
}
 800a826:	f507 67c9 	add.w	r7, r7, #1608	; 0x648
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	08025834 	.word	0x08025834
 800a834:	0802584c 	.word	0x0802584c
 800a838:	0802585c 	.word	0x0802585c
 800a83c:	08025874 	.word	0x08025874
 800a840:	200016ee 	.word	0x200016ee
 800a844:	40021800 	.word	0x40021800
 800a848:	200016ec 	.word	0x200016ec
 800a84c:	200012ec 	.word	0x200012ec
 800a850:	08025888 	.word	0x08025888
 800a854:	0802588c 	.word	0x0802588c

0800a858 <showDirectory>:

static void showDirectory()
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b0a4      	sub	sp, #144	; 0x90
 800a85c:	af00      	add	r7, sp, #0
	// opening log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploaded files:\n{\n", strlen("Uploaded files:\n{\n"));
 800a85e:	2212      	movs	r2, #18
 800a860:	4922      	ldr	r1, [pc, #136]	; (800a8ec <showDirectory+0x94>)
 800a862:	2002      	movs	r0, #2
 800a864:	f7f6 fce6 	bl	8001234 <AdventOfCode_print>
	char buffer[64];

	DIR dir;
	FILINFO fno;
	uint8_t counter = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	f_opendir(&dir, "/");
 800a86e:	f107 031c 	add.w	r3, r7, #28
 800a872:	491f      	ldr	r1, [pc, #124]	; (800a8f0 <showDirectory+0x98>)
 800a874:	4618      	mov	r0, r3
 800a876:	f012 ff89 	bl	801d78c <f_opendir>
	do
	{
		f_readdir(&dir, &fno);
 800a87a:	1d3a      	adds	r2, r7, #4
 800a87c:	f107 031c 	add.w	r3, r7, #28
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f013 f81b 	bl	801d8be <f_readdir>
		if(fno.fname[0] != 0 && counter++ > 1)
 800a888:	7b7b      	ldrb	r3, [r7, #13]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d01c      	beq.n	800a8c8 <showDirectory+0x70>
 800a88e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a892:	1c5a      	adds	r2, r3, #1
 800a894:	f887 208f 	strb.w	r2, [r7, #143]	; 0x8f
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d915      	bls.n	800a8c8 <showDirectory+0x70>
		{
			sprintf(buffer, "\t%s\n", fno.fname);
 800a89c:	1d3b      	adds	r3, r7, #4
 800a89e:	f103 0209 	add.w	r2, r3, #9
 800a8a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8a6:	4913      	ldr	r1, [pc, #76]	; (800a8f4 <showDirectory+0x9c>)
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f014 fd4d 	bl	801f348 <sprintf>
			AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a8ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7f5 fcac 	bl	8000210 <strlen>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	2002      	movs	r0, #2
 800a8c4:	f7f6 fcb6 	bl	8001234 <AdventOfCode_print>
		}
	} while(fno.fname[0] != 0);
 800a8c8:	7b7b      	ldrb	r3, [r7, #13]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1d5      	bne.n	800a87a <showDirectory+0x22>
	f_closedir(&dir);
 800a8ce:	f107 031c 	add.w	r3, r7, #28
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f012 ffcd 	bl	801d872 <f_closedir>

	// closing log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "}\n", strlen("}\n"));
 800a8d8:	2202      	movs	r2, #2
 800a8da:	4907      	ldr	r1, [pc, #28]	; (800a8f8 <showDirectory+0xa0>)
 800a8dc:	2002      	movs	r0, #2
 800a8de:	f7f6 fca9 	bl	8001234 <AdventOfCode_print>
}
 800a8e2:	bf00      	nop
 800a8e4:	3790      	adds	r7, #144	; 0x90
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	080258a0 	.word	0x080258a0
 800a8f0:	080258b4 	.word	0x080258b4
 800a8f4:	080258b8 	.word	0x080258b8
 800a8f8:	080258c0 	.word	0x080258c0

0800a8fc <deleteFile>:

static void deleteFile(char token_buffer[6][32])
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800a902:	af00      	add	r7, sp, #0
 800a904:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800a908:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800a90c:	6018      	str	r0, [r3, #0]
	// no value given
	if(token_buffer[1][0] == 0x00)
 800a90e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800a912:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3320      	adds	r3, #32
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d105      	bne.n	800a92c <deleteFile+0x30>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 800a920:	2214      	movs	r2, #20
 800a922:	491f      	ldr	r1, [pc, #124]	; (800a9a0 <deleteFile+0xa4>)
 800a924:	2002      	movs	r0, #2
 800a926:	f7f6 fc85 	bl	8001234 <AdventOfCode_print>
		return;
 800a92a:	e034      	b.n	800a996 <deleteFile+0x9a>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Deleting %s\n", token_buffer[1]);
 800a92c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800a930:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f103 0220 	add.w	r2, r3, #32
 800a93a:	f107 0308 	add.w	r3, r7, #8
 800a93e:	4919      	ldr	r1, [pc, #100]	; (800a9a4 <deleteFile+0xa8>)
 800a940:	4618      	mov	r0, r3
 800a942:	f014 fd01 	bl	801f348 <sprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800a946:	f107 0308 	add.w	r3, r7, #8
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7f5 fc60 	bl	8000210 <strlen>
 800a950:	4603      	mov	r3, r0
 800a952:	461a      	mov	r2, r3
 800a954:	f107 0308 	add.w	r3, r7, #8
 800a958:	4619      	mov	r1, r3
 800a95a:	2002      	movs	r0, #2
 800a95c:	f7f6 fc6a 	bl	8001234 <AdventOfCode_print>

	// delete file
	uint8_t ret = f_unlink(token_buffer[1]);
 800a960:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800a964:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3320      	adds	r3, #32
 800a96c:	4618      	mov	r0, r3
 800a96e:	f013 f81c 	bl	801d9aa <f_unlink>
 800a972:	4603      	mov	r3, r0
 800a974:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	if(ret != FR_OK)
 800a978:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <deleteFile+0x90>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to delete file!\n", strlen("Failed to delete file!\n"));
 800a980:	2217      	movs	r2, #23
 800a982:	4909      	ldr	r1, [pc, #36]	; (800a9a8 <deleteFile+0xac>)
 800a984:	2002      	movs	r0, #2
 800a986:	f7f6 fc55 	bl	8001234 <AdventOfCode_print>
		return;
 800a98a:	e004      	b.n	800a996 <deleteFile+0x9a>
	}

	// deleted file
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Deleted file\n", strlen("Deleted file\n"));
 800a98c:	220d      	movs	r2, #13
 800a98e:	4907      	ldr	r1, [pc, #28]	; (800a9ac <deleteFile+0xb0>)
 800a990:	2002      	movs	r0, #2
 800a992:	f7f6 fc4f 	bl	8001234 <AdventOfCode_print>
}
 800a996:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08025834 	.word	0x08025834
 800a9a4:	080258c4 	.word	0x080258c4
 800a9a8:	080258d4 	.word	0x080258d4
 800a9ac:	080258ec 	.word	0x080258ec

0800a9b0 <showHelp>:

static void showHelp()
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 800a9b6:	af00      	add	r7, sp, #0
	// print execution commands
	char puzzle_commands[] =
 800a9b8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800a9bc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800a9c0:	4a18      	ldr	r2, [pc, #96]	; (800aa24 <showHelp+0x74>)
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	f240 1365 	movw	r3, #357	; 0x165
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f014 fc8a 	bl	801f2e4 <memcpy>
			"               [check <day_number>]\n"
			"    test     > Run puzzle implementation using test input.\n"
			"               [test <day_number>]\n"
			"    release  > Run puzzle implementation using release input.\n"
			"               [release <day_number>]\n";
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, puzzle_commands, strlen(puzzle_commands));
 800a9d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f5 fc1b 	bl	8000210 <strlen>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	461a      	mov	r2, r3
 800a9de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	2002      	movs	r0, #2
 800a9e6:	f7f6 fc25 	bl	8001234 <AdventOfCode_print>

	// print file commands
	char file_commands[] =
 800a9ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800a9ee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800a9f2:	4a0d      	ldr	r2, [pc, #52]	; (800aa28 <showHelp+0x78>)
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	f44f 7399 	mov.w	r3, #306	; 0x132
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f014 fc71 	bl	801f2e4 <memcpy>
			"               [list]\n"
			"    upload   > Upload puzzle input data to the SD card.\n"
			"               [upload <name_of_file>.txt]\n"
			"    delete   > Delete puzzle input data on the SD card.\n"
			"               [delete <name_of_file>.txt]\n";
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, file_commands, strlen(file_commands));
 800aa02:	1d3b      	adds	r3, r7, #4
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7f5 fc03 	bl	8000210 <strlen>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	1d3b      	adds	r3, r7, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	2002      	movs	r0, #2
 800aa14:	f7f6 fc0e 	bl	8001234 <AdventOfCode_print>
}
 800aa18:	bf00      	nop
 800aa1a:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	080258fc 	.word	0x080258fc
 800aa28:	08025a64 	.word	0x08025a64

0800aa2c <invalidCommand>:

static void invalidCommand()
{
 800aa2c:	b5b0      	push	{r4, r5, r7, lr}
 800aa2e:	b090      	sub	sp, #64	; 0x40
 800aa30:	af00      	add	r7, sp, #0
	char unknown_string[] = "Unkown command refer to the commands list using [help]!\n";
 800aa32:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <invalidCommand+0x40>)
 800aa34:	1d3c      	adds	r4, r7, #4
 800aa36:	461d      	mov	r5, r3
 800aa38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aa48:	c403      	stmia	r4!, {r0, r1}
 800aa4a:	7022      	strb	r2, [r4, #0]
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, unknown_string, strlen(unknown_string));
 800aa4c:	1d3b      	adds	r3, r7, #4
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7f5 fbde 	bl	8000210 <strlen>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	1d3b      	adds	r3, r7, #4
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	2002      	movs	r0, #2
 800aa5e:	f7f6 fbe9 	bl	8001234 <AdventOfCode_print>
}
 800aa62:	bf00      	nop
 800aa64:	3740      	adds	r7, #64	; 0x40
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bdb0      	pop	{r4, r5, r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	08025b98 	.word	0x08025b98

0800aa70 <USBD_HandleCommands>:

void USBD_HandleCommands()
{
 800aa70:	b590      	push	{r4, r7, lr}
 800aa72:	b0b3      	sub	sp, #204	; 0xcc
 800aa74:	af00      	add	r7, sp, #0
	// check if message is valid
	if(!usb_rx_ready)
 800aa76:	4b63      	ldr	r3, [pc, #396]	; (800ac04 <USBD_HandleCommands+0x194>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80bd 	beq.w	800abfc <USBD_HandleCommands+0x18c>
		return;

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800aa82:	2201      	movs	r2, #1
 800aa84:	2140      	movs	r1, #64	; 0x40
 800aa86:	4860      	ldr	r0, [pc, #384]	; (800ac08 <USBD_HandleCommands+0x198>)
 800aa88:	f002 fb08 	bl	800d09c <HAL_GPIO_WritePin>

	// tokenize input
	char token_buffer[6][32];
	memset(token_buffer, 0x00, 6 * 32);
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	22c0      	movs	r2, #192	; 0xc0
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f014 fc34 	bl	801f300 <memset>
	char *token = strtok((char*)usb_rx_buffer, " ");
 800aa98:	495c      	ldr	r1, [pc, #368]	; (800ac0c <USBD_HandleCommands+0x19c>)
 800aa9a:	485d      	ldr	r0, [pc, #372]	; (800ac10 <USBD_HandleCommands+0x1a0>)
 800aa9c:	f014 fc84 	bl	801f3a8 <strtok>
 800aaa0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	uint8_t token_counter = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(token != NULL && token_counter < 6)
 800aaaa:	e01a      	b.n	800aae2 <USBD_HandleCommands+0x72>
	{
		memcpy(token_buffer[token_counter], token, strlen(token));
 800aaac:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800aab0:	463a      	mov	r2, r7
 800aab2:	015b      	lsls	r3, r3, #5
 800aab4:	18d4      	adds	r4, r2, r3
 800aab6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800aaba:	f7f5 fba9 	bl	8000210 <strlen>
 800aabe:	4603      	mov	r3, r0
 800aac0:	461a      	mov	r2, r3
 800aac2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800aac6:	4620      	mov	r0, r4
 800aac8:	f014 fc0c 	bl	801f2e4 <memcpy>
		token = strtok(NULL, " ");
 800aacc:	494f      	ldr	r1, [pc, #316]	; (800ac0c <USBD_HandleCommands+0x19c>)
 800aace:	2000      	movs	r0, #0
 800aad0:	f014 fc6a 	bl	801f3a8 <strtok>
 800aad4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
		token_counter++;
 800aad8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800aadc:	3301      	adds	r3, #1
 800aade:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(token != NULL && token_counter < 6)
 800aae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <USBD_HandleCommands+0x82>
 800aaea:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800aaee:	2b05      	cmp	r3, #5
 800aaf0:	d9dc      	bls.n	800aaac <USBD_HandleCommands+0x3c>
	}

	// process command
	uint8_t token_length = strlen(token_buffer[0]);
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f5 fb8b 	bl	8000210 <strlen>
 800aafa:	4603      	mov	r3, r0
 800aafc:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	if(token_counter == 1) token_length -= 2;
 800ab00:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d104      	bne.n	800ab12 <USBD_HandleCommands+0xa2>
 800ab08:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800ab0c:	3b02      	subs	r3, #2
 800ab0e:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	if(!memcmp(token_buffer[0], USB_COMMAND_CHECK, token_length))
 800ab12:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800ab16:	463b      	mov	r3, r7
 800ab18:	493e      	ldr	r1, [pc, #248]	; (800ac14 <USBD_HandleCommands+0x1a4>)
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f014 fbd2 	bl	801f2c4 <memcmp>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <USBD_HandleCommands+0xc0>
		checkImplementation(token_buffer);
 800ab26:	463b      	mov	r3, r7
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff fb57 	bl	800a1dc <checkImplementation>
 800ab2e:	e057      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else if(!memcmp(token_buffer[0], USB_COMMAND_TEST, token_length))
 800ab30:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800ab34:	463b      	mov	r3, r7
 800ab36:	4938      	ldr	r1, [pc, #224]	; (800ac18 <USBD_HandleCommands+0x1a8>)
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f014 fbc3 	bl	801f2c4 <memcmp>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d104      	bne.n	800ab4e <USBD_HandleCommands+0xde>
		runDebugImplementation(token_buffer);
 800ab44:	463b      	mov	r3, r7
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7ff fc00 	bl	800a34c <runDebugImplementation>
 800ab4c:	e048      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else if(!memcmp(token_buffer[0], USB_COMMAND_RELEASE, token_length))
 800ab4e:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800ab52:	463b      	mov	r3, r7
 800ab54:	4931      	ldr	r1, [pc, #196]	; (800ac1c <USBD_HandleCommands+0x1ac>)
 800ab56:	4618      	mov	r0, r3
 800ab58:	f014 fbb4 	bl	801f2c4 <memcmp>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d104      	bne.n	800ab6c <USBD_HandleCommands+0xfc>
		runReleaseImplementation(token_buffer);
 800ab62:	463b      	mov	r3, r7
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff fccd 	bl	800a504 <runReleaseImplementation>
 800ab6a:	e039      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else if(!memcmp(token_buffer[0], USB_COMMAND_LIST, token_length))
 800ab6c:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800ab70:	463b      	mov	r3, r7
 800ab72:	492b      	ldr	r1, [pc, #172]	; (800ac20 <USBD_HandleCommands+0x1b0>)
 800ab74:	4618      	mov	r0, r3
 800ab76:	f014 fba5 	bl	801f2c4 <memcmp>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <USBD_HandleCommands+0x116>
		showDirectory();
 800ab80:	f7ff fe6a 	bl	800a858 <showDirectory>
 800ab84:	e02c      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else if(!memcmp(token_buffer[0], USB_COMMAND_UPLOAD, token_length))
 800ab86:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	4925      	ldr	r1, [pc, #148]	; (800ac24 <USBD_HandleCommands+0x1b4>)
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f014 fb98 	bl	801f2c4 <memcmp>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d104      	bne.n	800aba4 <USBD_HandleCommands+0x134>
		fetchPuzzleInput(token_buffer);
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff fd8d 	bl	800a6bc <fetchPuzzleInput>
 800aba2:	e01d      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else if(!memcmp(token_buffer[0], USB_COMMAND_DELETE, token_length))
 800aba4:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800aba8:	463b      	mov	r3, r7
 800abaa:	491f      	ldr	r1, [pc, #124]	; (800ac28 <USBD_HandleCommands+0x1b8>)
 800abac:	4618      	mov	r0, r3
 800abae:	f014 fb89 	bl	801f2c4 <memcmp>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d104      	bne.n	800abc2 <USBD_HandleCommands+0x152>
		deleteFile(token_buffer);
 800abb8:	463b      	mov	r3, r7
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fe9e 	bl	800a8fc <deleteFile>
 800abc0:	e00e      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else if(!memcmp(token_buffer[0], USB_COMMAND_HELP, token_length))
 800abc2:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 800abc6:	463b      	mov	r3, r7
 800abc8:	4918      	ldr	r1, [pc, #96]	; (800ac2c <USBD_HandleCommands+0x1bc>)
 800abca:	4618      	mov	r0, r3
 800abcc:	f014 fb7a 	bl	801f2c4 <memcmp>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <USBD_HandleCommands+0x16c>
		showHelp();
 800abd6:	f7ff feeb 	bl	800a9b0 <showHelp>
 800abda:	e001      	b.n	800abe0 <USBD_HandleCommands+0x170>
	else
		invalidCommand();
 800abdc:	f7ff ff26 	bl	800aa2c <invalidCommand>

	// print new cursor
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, ">", 1);
 800abe0:	2201      	movs	r2, #1
 800abe2:	4913      	ldr	r1, [pc, #76]	; (800ac30 <USBD_HandleCommands+0x1c0>)
 800abe4:	2002      	movs	r0, #2
 800abe6:	f7f6 fb25 	bl	8001234 <AdventOfCode_print>

	// clear receive flag
	usb_rx_ready = 0;
 800abea:	4b06      	ldr	r3, [pc, #24]	; (800ac04 <USBD_HandleCommands+0x194>)
 800abec:	2200      	movs	r2, #0
 800abee:	701a      	strb	r2, [r3, #0]

	// turn off led
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800abf0:	2200      	movs	r2, #0
 800abf2:	2140      	movs	r1, #64	; 0x40
 800abf4:	4804      	ldr	r0, [pc, #16]	; (800ac08 <USBD_HandleCommands+0x198>)
 800abf6:	f002 fa51 	bl	800d09c <HAL_GPIO_WritePin>
 800abfa:	e000      	b.n	800abfe <USBD_HandleCommands+0x18e>
		return;
 800abfc:	bf00      	nop
}
 800abfe:	37cc      	adds	r7, #204	; 0xcc
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd90      	pop	{r4, r7, pc}
 800ac04:	200016ee 	.word	0x200016ee
 800ac08:	40021800 	.word	0x40021800
 800ac0c:	08025bd4 	.word	0x08025bd4
 800ac10:	200012ec 	.word	0x200012ec
 800ac14:	08025bd8 	.word	0x08025bd8
 800ac18:	08025be0 	.word	0x08025be0
 800ac1c:	08025be8 	.word	0x08025be8
 800ac20:	08025bf0 	.word	0x08025bf0
 800ac24:	08025bf8 	.word	0x08025bf8
 800ac28:	08025c00 	.word	0x08025c00
 800ac2c:	08025c08 	.word	0x08025c08
 800ac30:	08025c10 	.word	0x08025c10

0800ac34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b096      	sub	sp, #88	; 0x58
 800ac38:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ac3a:	f001 f8b6 	bl	800bdaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ac3e:	f000 f899 	bl	800ad74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ac42:	f000 fae9 	bl	800b218 <MX_GPIO_Init>
  MX_DMA_Init();
 800ac46:	f000 fa57 	bl	800b0f8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800ac4a:	f000 f961 	bl	800af10 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 800ac4e:	f012 fff1 	bl	801dc34 <MX_USB_DEVICE_Init>
  MX_USB_HOST_Init();
 800ac52:	f013 fd9d 	bl	801e790 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 800ac56:	f000 fa1f 	bl	800b098 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800ac5a:	f000 f97b 	bl	800af54 <MX_TIM1_Init>
  MX_TIM11_Init();
 800ac5e:	f000 f9cd 	bl	800affc <MX_TIM11_Init>
  MX_ADC1_Init();
 800ac62:	f000 f8f5 	bl	800ae50 <MX_ADC1_Init>
  MX_FMC_Init();
 800ac66:	f000 fa75 	bl	800b154 <MX_FMC_Init>
  MX_FATFS_Init();
 800ac6a:	f00c f80b 	bl	8016c84 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	// wait for usb connection
	while(!usb_connected)
 800ac6e:	e003      	b.n	800ac78 <main+0x44>
		HAL_Delay(500);
 800ac70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ac74:	f001 f8f6 	bl	800be64 <HAL_Delay>
	while(!usb_connected)
 800ac78:	4b22      	ldr	r3, [pc, #136]	; (800ad04 <main+0xd0>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0f6      	beq.n	800ac70 <main+0x3c>

	// system startup
	System_init(&system_state);
 800ac82:	4821      	ldr	r0, [pc, #132]	; (800ad08 <main+0xd4>)
 800ac84:	f7ff f949 	bl	8009f1a <System_init>

	// system init terminal log
	System_initLog(&system_state);
 800ac88:	481f      	ldr	r0, [pc, #124]	; (800ad08 <main+0xd4>)
 800ac8a:	f7ff f9ab 	bl	8009fe4 <System_initLog>
	System_selfTestLog(&system_state);
 800ac8e:	481e      	ldr	r0, [pc, #120]	; (800ad08 <main+0xd4>)
 800ac90:	f7ff f9c8 	bl	800a024 <System_selfTestLog>

	// init AOC
	AdventOfCode_init(&aoc,
 800ac94:	4b1d      	ldr	r3, [pc, #116]	; (800ad0c <main+0xd8>)
 800ac96:	9315      	str	r3, [sp, #84]	; 0x54
 800ac98:	4b1d      	ldr	r3, [pc, #116]	; (800ad10 <main+0xdc>)
 800ac9a:	9314      	str	r3, [sp, #80]	; 0x50
 800ac9c:	4b1d      	ldr	r3, [pc, #116]	; (800ad14 <main+0xe0>)
 800ac9e:	9313      	str	r3, [sp, #76]	; 0x4c
 800aca0:	4b1d      	ldr	r3, [pc, #116]	; (800ad18 <main+0xe4>)
 800aca2:	9312      	str	r3, [sp, #72]	; 0x48
 800aca4:	4b1d      	ldr	r3, [pc, #116]	; (800ad1c <main+0xe8>)
 800aca6:	9311      	str	r3, [sp, #68]	; 0x44
 800aca8:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <main+0xec>)
 800acaa:	9310      	str	r3, [sp, #64]	; 0x40
 800acac:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <main+0xf0>)
 800acae:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb0:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <main+0xf4>)
 800acb2:	930e      	str	r3, [sp, #56]	; 0x38
 800acb4:	4b1d      	ldr	r3, [pc, #116]	; (800ad2c <main+0xf8>)
 800acb6:	930d      	str	r3, [sp, #52]	; 0x34
 800acb8:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <main+0xfc>)
 800acba:	930c      	str	r3, [sp, #48]	; 0x30
 800acbc:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <main+0x100>)
 800acbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800acc0:	4b1d      	ldr	r3, [pc, #116]	; (800ad38 <main+0x104>)
 800acc2:	930a      	str	r3, [sp, #40]	; 0x28
 800acc4:	4b1d      	ldr	r3, [pc, #116]	; (800ad3c <main+0x108>)
 800acc6:	9309      	str	r3, [sp, #36]	; 0x24
 800acc8:	4b1d      	ldr	r3, [pc, #116]	; (800ad40 <main+0x10c>)
 800acca:	9308      	str	r3, [sp, #32]
 800accc:	4b1d      	ldr	r3, [pc, #116]	; (800ad44 <main+0x110>)
 800acce:	9307      	str	r3, [sp, #28]
 800acd0:	4b1d      	ldr	r3, [pc, #116]	; (800ad48 <main+0x114>)
 800acd2:	9306      	str	r3, [sp, #24]
 800acd4:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <main+0x118>)
 800acd6:	9305      	str	r3, [sp, #20]
 800acd8:	4b1d      	ldr	r3, [pc, #116]	; (800ad50 <main+0x11c>)
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	4b1d      	ldr	r3, [pc, #116]	; (800ad54 <main+0x120>)
 800acde:	9303      	str	r3, [sp, #12]
 800ace0:	4b1d      	ldr	r3, [pc, #116]	; (800ad58 <main+0x124>)
 800ace2:	9302      	str	r3, [sp, #8]
 800ace4:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <main+0x128>)
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <main+0x12c>)
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	4b1d      	ldr	r3, [pc, #116]	; (800ad64 <main+0x130>)
 800acee:	4a1e      	ldr	r2, [pc, #120]	; (800ad68 <main+0x134>)
 800acf0:	491e      	ldr	r1, [pc, #120]	; (800ad6c <main+0x138>)
 800acf2:	481f      	ldr	r0, [pc, #124]	; (800ad70 <main+0x13c>)
 800acf4:	f7f6 fa46 	bl	8001184 <AdventOfCode_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		USBD_HandleCommands();
 800acf8:	f7ff feba 	bl	800aa70 <USBD_HandleCommands>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800acfc:	f013 fd6e 	bl	801e7dc <MX_USB_HOST_Process>
		USBD_HandleCommands();
 800ad00:	e7fa      	b.n	800acf8 <main+0xc4>
 800ad02:	bf00      	nop
 800ad04:	200016ef 	.word	0x200016ef
 800ad08:	20000e80 	.word	0x20000e80
 800ad0c:	08009ef9 	.word	0x08009ef9
 800ad10:	08009ed7 	.word	0x08009ed7
 800ad14:	08009eb5 	.word	0x08009eb5
 800ad18:	08009e93 	.word	0x08009e93
 800ad1c:	08009e71 	.word	0x08009e71
 800ad20:	08009e4f 	.word	0x08009e4f
 800ad24:	08009e2d 	.word	0x08009e2d
 800ad28:	08009e0b 	.word	0x08009e0b
 800ad2c:	08009de9 	.word	0x08009de9
 800ad30:	08009dc7 	.word	0x08009dc7
 800ad34:	08009da5 	.word	0x08009da5
 800ad38:	08009d83 	.word	0x08009d83
 800ad3c:	08009d61 	.word	0x08009d61
 800ad40:	0800989d 	.word	0x0800989d
 800ad44:	08008e89 	.word	0x08008e89
 800ad48:	080077a5 	.word	0x080077a5
 800ad4c:	08007011 	.word	0x08007011
 800ad50:	08006681 	.word	0x08006681
 800ad54:	08005db5 	.word	0x08005db5
 800ad58:	08004e01 	.word	0x08004e01
 800ad5c:	080036d5 	.word	0x080036d5
 800ad60:	08002e39 	.word	0x08002e39
 800ad64:	08001cf1 	.word	0x08001cf1
 800ad68:	080016d5 	.word	0x080016d5
 800ad6c:	08001281 	.word	0x08001281
 800ad70:	200016f0 	.word	0x200016f0

0800ad74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b094      	sub	sp, #80	; 0x50
 800ad78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad7a:	f107 0320 	add.w	r3, r7, #32
 800ad7e:	2230      	movs	r2, #48	; 0x30
 800ad80:	2100      	movs	r1, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f014 fabc 	bl	801f300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	605a      	str	r2, [r3, #4]
 800ad92:	609a      	str	r2, [r3, #8]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800ad98:	f005 f9a6 	bl	80100e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad9c:	4b2a      	ldr	r3, [pc, #168]	; (800ae48 <SystemClock_Config+0xd4>)
 800ad9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada0:	4a29      	ldr	r2, [pc, #164]	; (800ae48 <SystemClock_Config+0xd4>)
 800ada2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ada6:	6413      	str	r3, [r2, #64]	; 0x40
 800ada8:	4b27      	ldr	r3, [pc, #156]	; (800ae48 <SystemClock_Config+0xd4>)
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adb0:	60bb      	str	r3, [r7, #8]
 800adb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800adb4:	4b25      	ldr	r3, [pc, #148]	; (800ae4c <SystemClock_Config+0xd8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a24      	ldr	r2, [pc, #144]	; (800ae4c <SystemClock_Config+0xd8>)
 800adba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	4b22      	ldr	r3, [pc, #136]	; (800ae4c <SystemClock_Config+0xd8>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800adc8:	607b      	str	r3, [r7, #4]
 800adca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adcc:	2301      	movs	r3, #1
 800adce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800add0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800add6:	2302      	movs	r3, #2
 800add8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800adda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ade0:	2308      	movs	r3, #8
 800ade2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800ade4:	23d8      	movs	r3, #216	; 0xd8
 800ade6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ade8:	2302      	movs	r3, #2
 800adea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800adec:	2309      	movs	r3, #9
 800adee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800adf0:	f107 0320 	add.w	r3, r7, #32
 800adf4:	4618      	mov	r0, r3
 800adf6:	f005 f9d7 	bl	80101a8 <HAL_RCC_OscConfig>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800ae00:	f000 fb3c 	bl	800b47c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800ae04:	f005 f980 	bl	8010108 <HAL_PWREx_EnableOverDrive>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800ae0e:	f000 fb35 	bl	800b47c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ae12:	230f      	movs	r3, #15
 800ae14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ae16:	2302      	movs	r3, #2
 800ae18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ae1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ae22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ae24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800ae2a:	f107 030c 	add.w	r3, r7, #12
 800ae2e:	2107      	movs	r1, #7
 800ae30:	4618      	mov	r0, r3
 800ae32:	f005 fc5d 	bl	80106f0 <HAL_RCC_ClockConfig>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800ae3c:	f000 fb1e 	bl	800b47c <Error_Handler>
  }
}
 800ae40:	bf00      	nop
 800ae42:	3750      	adds	r7, #80	; 0x50
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	40007000 	.word	0x40007000

0800ae50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ae56:	463b      	mov	r3, r7
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	605a      	str	r2, [r3, #4]
 800ae5e:	609a      	str	r2, [r3, #8]
 800ae60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ae62:	4b28      	ldr	r3, [pc, #160]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae64:	4a28      	ldr	r2, [pc, #160]	; (800af08 <MX_ADC1_Init+0xb8>)
 800ae66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800ae68:	4b26      	ldr	r3, [pc, #152]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ae6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ae70:	4b24      	ldr	r3, [pc, #144]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800ae76:	4b23      	ldr	r3, [pc, #140]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ae7c:	4b21      	ldr	r3, [pc, #132]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae7e:	2201      	movs	r2, #1
 800ae80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ae82:	4b20      	ldr	r3, [pc, #128]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ae8a:	4b1e      	ldr	r3, [pc, #120]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ae90:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae92:	4a1e      	ldr	r2, [pc, #120]	; (800af0c <MX_ADC1_Init+0xbc>)
 800ae94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ae96:	4b1b      	ldr	r3, [pc, #108]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800ae9c:	4b19      	ldr	r3, [pc, #100]	; (800af04 <MX_ADC1_Init+0xb4>)
 800ae9e:	2202      	movs	r2, #2
 800aea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800aea2:	4b18      	ldr	r3, [pc, #96]	; (800af04 <MX_ADC1_Init+0xb4>)
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800aeaa:	4b16      	ldr	r3, [pc, #88]	; (800af04 <MX_ADC1_Init+0xb4>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800aeb0:	4814      	ldr	r0, [pc, #80]	; (800af04 <MX_ADC1_Init+0xb4>)
 800aeb2:	f000 fffb 	bl	800beac <HAL_ADC_Init>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800aebc:	f000 fade 	bl	800b47c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800aec4:	2301      	movs	r3, #1
 800aec6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800aec8:	2306      	movs	r3, #6
 800aeca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aecc:	463b      	mov	r3, r7
 800aece:	4619      	mov	r1, r3
 800aed0:	480c      	ldr	r0, [pc, #48]	; (800af04 <MX_ADC1_Init+0xb4>)
 800aed2:	f001 f82f 	bl	800bf34 <HAL_ADC_ConfigChannel>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800aedc:	f000 face 	bl	800b47c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800aee0:	2302      	movs	r3, #2
 800aee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800aee4:	2302      	movs	r3, #2
 800aee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800aee8:	463b      	mov	r3, r7
 800aeea:	4619      	mov	r1, r3
 800aeec:	4805      	ldr	r0, [pc, #20]	; (800af04 <MX_ADC1_Init+0xb4>)
 800aeee:	f001 f821 	bl	800bf34 <HAL_ADC_ConfigChannel>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800aef8:	f000 fac0 	bl	800b47c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20000b28 	.word	0x20000b28
 800af08:	40012000 	.word	0x40012000
 800af0c:	0f000001 	.word	0x0f000001

0800af10 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800af14:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af16:	4a0e      	ldr	r2, [pc, #56]	; (800af50 <MX_SDMMC1_SD_Init+0x40>)
 800af18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800af20:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af22:	2200      	movs	r2, #0
 800af24:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800af26:	4b09      	ldr	r3, [pc, #36]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af28:	2200      	movs	r2, #0
 800af2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800af2c:	4b07      	ldr	r3, [pc, #28]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af2e:	2200      	movs	r2, #0
 800af30:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800af32:	4b06      	ldr	r3, [pc, #24]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af38:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 800af3a:	4b04      	ldr	r3, [pc, #16]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af3c:	2204      	movs	r2, #4
 800af3e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 800af40:	4802      	ldr	r0, [pc, #8]	; (800af4c <MX_SDMMC1_SD_Init+0x3c>)
 800af42:	f006 f9b1 	bl	80112a8 <HAL_SD_Init>
  /* USER CODE END SDMMC1_Init 2 */

}
 800af46:	bf00      	nop
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000bd0 	.word	0x20000bd0
 800af50:	40012c00 	.word	0x40012c00

0800af54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af5a:	f107 0310 	add.w	r3, r7, #16
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	605a      	str	r2, [r3, #4]
 800af64:	609a      	str	r2, [r3, #8]
 800af66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af68:	1d3b      	adds	r3, r7, #4
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	605a      	str	r2, [r3, #4]
 800af70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800af72:	4b20      	ldr	r3, [pc, #128]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af74:	4a20      	ldr	r2, [pc, #128]	; (800aff8 <MX_TIM1_Init+0xa4>)
 800af76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800af78:	4b1e      	ldr	r3, [pc, #120]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af7e:	4b1d      	ldr	r3, [pc, #116]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af80:	2200      	movs	r2, #0
 800af82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800af84:	4b1b      	ldr	r3, [pc, #108]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af8c:	4b19      	ldr	r3, [pc, #100]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af8e:	2200      	movs	r2, #0
 800af90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800af92:	4b18      	ldr	r3, [pc, #96]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af94:	2200      	movs	r2, #0
 800af96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af98:	4b16      	ldr	r3, [pc, #88]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800af9e:	4815      	ldr	r0, [pc, #84]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800afa0:	f007 faf2 	bl	8012588 <HAL_TIM_Base_Init>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800afaa:	f000 fa67 	bl	800b47c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800afb4:	f107 0310 	add.w	r3, r7, #16
 800afb8:	4619      	mov	r1, r3
 800afba:	480e      	ldr	r0, [pc, #56]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800afbc:	f007 fcb0 	bl	8012920 <HAL_TIM_ConfigClockSource>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800afc6:	f000 fa59 	bl	800b47c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afca:	2300      	movs	r3, #0
 800afcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800afce:	2300      	movs	r3, #0
 800afd0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800afd6:	1d3b      	adds	r3, r7, #4
 800afd8:	4619      	mov	r1, r3
 800afda:	4806      	ldr	r0, [pc, #24]	; (800aff4 <MX_TIM1_Init+0xa0>)
 800afdc:	f008 f902 	bl	80131e4 <HAL_TIMEx_MasterConfigSynchronization>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800afe6:	f000 fa49 	bl	800b47c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800afea:	bf00      	nop
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20000d14 	.word	0x20000d14
 800aff8:	40010000 	.word	0x40010000

0800affc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b002:	1d3b      	adds	r3, r7, #4
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	605a      	str	r2, [r3, #4]
 800b00a:	609a      	str	r2, [r3, #8]
 800b00c:	60da      	str	r2, [r3, #12]
 800b00e:	611a      	str	r2, [r3, #16]
 800b010:	615a      	str	r2, [r3, #20]
 800b012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800b014:	4b1e      	ldr	r3, [pc, #120]	; (800b090 <MX_TIM11_Init+0x94>)
 800b016:	4a1f      	ldr	r2, [pc, #124]	; (800b094 <MX_TIM11_Init+0x98>)
 800b018:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800b01a:	4b1d      	ldr	r3, [pc, #116]	; (800b090 <MX_TIM11_Init+0x94>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b020:	4b1b      	ldr	r3, [pc, #108]	; (800b090 <MX_TIM11_Init+0x94>)
 800b022:	2200      	movs	r2, #0
 800b024:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800b026:	4b1a      	ldr	r3, [pc, #104]	; (800b090 <MX_TIM11_Init+0x94>)
 800b028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b02c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b02e:	4b18      	ldr	r3, [pc, #96]	; (800b090 <MX_TIM11_Init+0x94>)
 800b030:	2200      	movs	r2, #0
 800b032:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b034:	4b16      	ldr	r3, [pc, #88]	; (800b090 <MX_TIM11_Init+0x94>)
 800b036:	2200      	movs	r2, #0
 800b038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800b03a:	4815      	ldr	r0, [pc, #84]	; (800b090 <MX_TIM11_Init+0x94>)
 800b03c:	f007 faa4 	bl	8012588 <HAL_TIM_Base_Init>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800b046:	f000 fa19 	bl	800b47c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800b04a:	4811      	ldr	r0, [pc, #68]	; (800b090 <MX_TIM11_Init+0x94>)
 800b04c:	f007 faf3 	bl	8012636 <HAL_TIM_PWM_Init>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800b056:	f000 fa11 	bl	800b47c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b05a:	2360      	movs	r3, #96	; 0x60
 800b05c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b062:	2300      	movs	r3, #0
 800b064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b06a:	1d3b      	adds	r3, r7, #4
 800b06c:	2200      	movs	r2, #0
 800b06e:	4619      	mov	r1, r3
 800b070:	4807      	ldr	r0, [pc, #28]	; (800b090 <MX_TIM11_Init+0x94>)
 800b072:	f007 fb41 	bl	80126f8 <HAL_TIM_PWM_ConfigChannel>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800b07c:	f000 f9fe 	bl	800b47c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800b080:	4803      	ldr	r0, [pc, #12]	; (800b090 <MX_TIM11_Init+0x94>)
 800b082:	f000 fc1d 	bl	800b8c0 <HAL_TIM_MspPostInit>

}
 800b086:	bf00      	nop
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000d60 	.word	0x20000d60
 800b094:	40014800 	.word	0x40014800

0800b098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b09c:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b09e:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <MX_USART1_UART_Init+0x5c>)
 800b0a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b0a2:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b0a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b0b0:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b0bc:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0be:	220c      	movs	r2, #12
 800b0c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b0c8:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b0ce:	4b08      	ldr	r3, [pc, #32]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b0da:	4805      	ldr	r0, [pc, #20]	; (800b0f0 <MX_USART1_UART_Init+0x58>)
 800b0dc:	f008 f910 	bl	8013300 <HAL_UART_Init>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b0e6:	f000 f9c9 	bl	800b47c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b0ea:	bf00      	nop
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000dac 	.word	0x20000dac
 800b0f4:	40011000 	.word	0x40011000

0800b0f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b0fe:	4b14      	ldr	r3, [pc, #80]	; (800b150 <MX_DMA_Init+0x58>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	4a13      	ldr	r2, [pc, #76]	; (800b150 <MX_DMA_Init+0x58>)
 800b104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b108:	6313      	str	r3, [r2, #48]	; 0x30
 800b10a:	4b11      	ldr	r3, [pc, #68]	; (800b150 <MX_DMA_Init+0x58>)
 800b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b112:	607b      	str	r3, [r7, #4]
 800b114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	2038      	movs	r0, #56	; 0x38
 800b11c:	f001 fa35 	bl	800c58a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b120:	2038      	movs	r0, #56	; 0x38
 800b122:	f001 fa4e 	bl	800c5c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800b126:	2200      	movs	r2, #0
 800b128:	2100      	movs	r1, #0
 800b12a:	203b      	movs	r0, #59	; 0x3b
 800b12c:	f001 fa2d 	bl	800c58a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800b130:	203b      	movs	r0, #59	; 0x3b
 800b132:	f001 fa46 	bl	800c5c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800b136:	2200      	movs	r2, #0
 800b138:	2100      	movs	r1, #0
 800b13a:	2045      	movs	r0, #69	; 0x45
 800b13c:	f001 fa25 	bl	800c58a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800b140:	2045      	movs	r0, #69	; 0x45
 800b142:	f001 fa3e 	bl	800c5c2 <HAL_NVIC_EnableIRQ>

}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	40023800 	.word	0x40023800

0800b154 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800b15a:	1d3b      	adds	r3, r7, #4
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	605a      	str	r2, [r3, #4]
 800b162:	609a      	str	r2, [r3, #8]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	611a      	str	r2, [r3, #16]
 800b168:	615a      	str	r2, [r3, #20]
 800b16a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800b16c:	4b28      	ldr	r3, [pc, #160]	; (800b210 <MX_FMC_Init+0xbc>)
 800b16e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800b172:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800b174:	4b26      	ldr	r3, [pc, #152]	; (800b210 <MX_FMC_Init+0xbc>)
 800b176:	4a27      	ldr	r2, [pc, #156]	; (800b214 <MX_FMC_Init+0xc0>)
 800b178:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800b17a:	4b25      	ldr	r3, [pc, #148]	; (800b210 <MX_FMC_Init+0xbc>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800b180:	4b23      	ldr	r3, [pc, #140]	; (800b210 <MX_FMC_Init+0xbc>)
 800b182:	2200      	movs	r2, #0
 800b184:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 800b186:	4b22      	ldr	r3, [pc, #136]	; (800b210 <MX_FMC_Init+0xbc>)
 800b188:	2204      	movs	r2, #4
 800b18a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800b18c:	4b20      	ldr	r3, [pc, #128]	; (800b210 <MX_FMC_Init+0xbc>)
 800b18e:	2210      	movs	r2, #16
 800b190:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800b192:	4b1f      	ldr	r3, [pc, #124]	; (800b210 <MX_FMC_Init+0xbc>)
 800b194:	2200      	movs	r2, #0
 800b196:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800b198:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <MX_FMC_Init+0xbc>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800b19e:	4b1c      	ldr	r3, [pc, #112]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800b1a4:	4b1a      	ldr	r3, [pc, #104]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b1aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800b1ac:	4b18      	ldr	r3, [pc, #96]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800b1b2:	4b17      	ldr	r3, [pc, #92]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800b1be:	4b14      	ldr	r3, [pc, #80]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800b1c4:	4b12      	ldr	r3, [pc, #72]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800b1ca:	4b11      	ldr	r3, [pc, #68]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800b1d0:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 800b1d6:	2308      	movs	r3, #8
 800b1d8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800b1da:	230f      	movs	r3, #15
 800b1dc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 10;
 800b1de:	230a      	movs	r3, #10
 800b1e0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800b1e6:	2310      	movs	r3, #16
 800b1e8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800b1ea:	2311      	movs	r3, #17
 800b1ec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800b1f2:	1d3b      	adds	r3, r7, #4
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4805      	ldr	r0, [pc, #20]	; (800b210 <MX_FMC_Init+0xbc>)
 800b1fa:	f007 f97d 	bl	80124f8 <HAL_SRAM_Init>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 800b204:	f000 f93a 	bl	800b47c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800b208:	bf00      	nop
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000e34 	.word	0x20000e34
 800b214:	a0000104 	.word	0xa0000104

0800b218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08e      	sub	sp, #56	; 0x38
 800b21c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b21e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	605a      	str	r2, [r3, #4]
 800b228:	609a      	str	r2, [r3, #8]
 800b22a:	60da      	str	r2, [r3, #12]
 800b22c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b22e:	4b8b      	ldr	r3, [pc, #556]	; (800b45c <MX_GPIO_Init+0x244>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	4a8a      	ldr	r2, [pc, #552]	; (800b45c <MX_GPIO_Init+0x244>)
 800b234:	f043 0310 	orr.w	r3, r3, #16
 800b238:	6313      	str	r3, [r2, #48]	; 0x30
 800b23a:	4b88      	ldr	r3, [pc, #544]	; (800b45c <MX_GPIO_Init+0x244>)
 800b23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23e:	f003 0310 	and.w	r3, r3, #16
 800b242:	623b      	str	r3, [r7, #32]
 800b244:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b246:	4b85      	ldr	r3, [pc, #532]	; (800b45c <MX_GPIO_Init+0x244>)
 800b248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24a:	4a84      	ldr	r2, [pc, #528]	; (800b45c <MX_GPIO_Init+0x244>)
 800b24c:	f043 0302 	orr.w	r3, r3, #2
 800b250:	6313      	str	r3, [r2, #48]	; 0x30
 800b252:	4b82      	ldr	r3, [pc, #520]	; (800b45c <MX_GPIO_Init+0x244>)
 800b254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	61fb      	str	r3, [r7, #28]
 800b25c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b25e:	4b7f      	ldr	r3, [pc, #508]	; (800b45c <MX_GPIO_Init+0x244>)
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	4a7e      	ldr	r2, [pc, #504]	; (800b45c <MX_GPIO_Init+0x244>)
 800b264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b268:	6313      	str	r3, [r2, #48]	; 0x30
 800b26a:	4b7c      	ldr	r3, [pc, #496]	; (800b45c <MX_GPIO_Init+0x244>)
 800b26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b276:	4b79      	ldr	r3, [pc, #484]	; (800b45c <MX_GPIO_Init+0x244>)
 800b278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27a:	4a78      	ldr	r2, [pc, #480]	; (800b45c <MX_GPIO_Init+0x244>)
 800b27c:	f043 0308 	orr.w	r3, r3, #8
 800b280:	6313      	str	r3, [r2, #48]	; 0x30
 800b282:	4b76      	ldr	r3, [pc, #472]	; (800b45c <MX_GPIO_Init+0x244>)
 800b284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b28e:	4b73      	ldr	r3, [pc, #460]	; (800b45c <MX_GPIO_Init+0x244>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	4a72      	ldr	r2, [pc, #456]	; (800b45c <MX_GPIO_Init+0x244>)
 800b294:	f043 0304 	orr.w	r3, r3, #4
 800b298:	6313      	str	r3, [r2, #48]	; 0x30
 800b29a:	4b70      	ldr	r3, [pc, #448]	; (800b45c <MX_GPIO_Init+0x244>)
 800b29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29e:	f003 0304 	and.w	r3, r3, #4
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2a6:	4b6d      	ldr	r3, [pc, #436]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2aa:	4a6c      	ldr	r2, [pc, #432]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2b2:	4b6a      	ldr	r3, [pc, #424]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800b2be:	4b67      	ldr	r3, [pc, #412]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c2:	4a66      	ldr	r2, [pc, #408]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ca:	4b64      	ldr	r3, [pc, #400]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d2:	60bb      	str	r3, [r7, #8]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b2d6:	4b61      	ldr	r3, [pc, #388]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	4a60      	ldr	r2, [pc, #384]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2dc:	f043 0320 	orr.w	r3, r3, #32
 800b2e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2e2:	4b5e      	ldr	r3, [pc, #376]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	f003 0320 	and.w	r3, r3, #32
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b2ee:	4b5b      	ldr	r3, [pc, #364]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f2:	4a5a      	ldr	r2, [pc, #360]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2fa:	4b58      	ldr	r3, [pc, #352]	; (800b45c <MX_GPIO_Init+0x244>)
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 800b306:	2200      	movs	r2, #0
 800b308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b30c:	4854      	ldr	r0, [pc, #336]	; (800b460 <MX_GPIO_Init+0x248>)
 800b30e:	f001 fec5 	bl	800d09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 800b312:	2200      	movs	r2, #0
 800b314:	2104      	movs	r1, #4
 800b316:	4853      	ldr	r0, [pc, #332]	; (800b464 <MX_GPIO_Init+0x24c>)
 800b318:	f001 fec0 	bl	800d09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800b31c:	2200      	movs	r2, #0
 800b31e:	2140      	movs	r1, #64	; 0x40
 800b320:	4851      	ldr	r0, [pc, #324]	; (800b468 <MX_GPIO_Init+0x250>)
 800b322:	f001 febb 	bl	800d09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800b326:	2200      	movs	r2, #0
 800b328:	21c0      	movs	r1, #192	; 0xc0
 800b32a:	4850      	ldr	r0, [pc, #320]	; (800b46c <MX_GPIO_Init+0x254>)
 800b32c:	f001 feb6 	bl	800d09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 800b330:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b336:	2301      	movs	r3, #1
 800b338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b33e:	2300      	movs	r3, #0
 800b340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800b342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b346:	4619      	mov	r1, r3
 800b348:	4845      	ldr	r0, [pc, #276]	; (800b460 <MX_GPIO_Init+0x248>)
 800b34a:	f001 fcfb 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 800b34e:	f643 4333 	movw	r3, #15411	; 0x3c33
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b354:	2300      	movs	r3, #0
 800b356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b35c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b360:	4619      	mov	r1, r3
 800b362:	483f      	ldr	r0, [pc, #252]	; (800b460 <MX_GPIO_Init+0x248>)
 800b364:	f001 fcee 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 800b368:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b36e:	2300      	movs	r3, #0
 800b370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b372:	2300      	movs	r3, #0
 800b374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b37a:	4619      	mov	r1, r3
 800b37c:	483b      	ldr	r0, [pc, #236]	; (800b46c <MX_GPIO_Init+0x254>)
 800b37e:	f001 fce1 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 800b382:	f248 63e8 	movw	r3, #34536	; 0x86e8
 800b386:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b388:	2300      	movs	r3, #0
 800b38a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b38c:	2300      	movs	r3, #0
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b394:	4619      	mov	r1, r3
 800b396:	4836      	ldr	r0, [pc, #216]	; (800b470 <MX_GPIO_Init+0x258>)
 800b398:	f001 fcd4 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b39c:	2340      	movs	r3, #64	; 0x40
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4831      	ldr	r0, [pc, #196]	; (800b474 <MX_GPIO_Init+0x25c>)
 800b3b0:	f001 fcc8 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 800b3b4:	230b      	movs	r3, #11
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b3c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4827      	ldr	r0, [pc, #156]	; (800b464 <MX_GPIO_Init+0x24c>)
 800b3c8:	f001 fcbc 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_HOST_VBUF_Pin */
  GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 800b3cc:	2304      	movs	r3, #4
 800b3ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 800b3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4820      	ldr	r0, [pc, #128]	; (800b464 <MX_GPIO_Init+0x24c>)
 800b3e4:	f001 fcae 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 800b3e8:	23a0      	movs	r3, #160	; 0xa0
 800b3ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	481b      	ldr	r0, [pc, #108]	; (800b468 <MX_GPIO_Init+0x250>)
 800b3fc:	f001 fca2 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800b400:	2340      	movs	r3, #64	; 0x40
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b404:	2301      	movs	r3, #1
 800b406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b408:	2300      	movs	r3, #0
 800b40a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b40c:	2300      	movs	r3, #0
 800b40e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800b410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b414:	4619      	mov	r1, r3
 800b416:	4814      	ldr	r0, [pc, #80]	; (800b468 <MX_GPIO_Init+0x250>)
 800b418:	f001 fc94 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800b41c:	23c0      	movs	r3, #192	; 0xc0
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b420:	2301      	movs	r3, #1
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b424:	2300      	movs	r3, #0
 800b426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b428:	2300      	movs	r3, #0
 800b42a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b430:	4619      	mov	r1, r3
 800b432:	480e      	ldr	r0, [pc, #56]	; (800b46c <MX_GPIO_Init+0x254>)
 800b434:	f001 fc86 	bl	800cd44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b43c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b43e:	2300      	movs	r3, #0
 800b440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b442:	2300      	movs	r3, #0
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b44a:	4619      	mov	r1, r3
 800b44c:	480a      	ldr	r0, [pc, #40]	; (800b478 <MX_GPIO_Init+0x260>)
 800b44e:	f001 fc79 	bl	800cd44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b452:	bf00      	nop
 800b454:	3738      	adds	r7, #56	; 0x38
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	40023800 	.word	0x40023800
 800b460:	40020400 	.word	0x40020400
 800b464:	40022000 	.word	0x40022000
 800b468:	40020800 	.word	0x40020800
 800b46c:	40021800 	.word	0x40021800
 800b470:	40020000 	.word	0x40020000
 800b474:	40020c00 	.word	0x40020c00
 800b478:	40021400 	.word	0x40021400

0800b47c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b482:	b672      	cpsid	i
}
 800b484:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800b486:	2200      	movs	r2, #0
 800b488:	2140      	movs	r1, #64	; 0x40
 800b48a:	481c      	ldr	r0, [pc, #112]	; (800b4fc <Error_Handler+0x80>)
 800b48c:	f001 fe06 	bl	800d09c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800b490:	2200      	movs	r2, #0
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	4819      	ldr	r0, [pc, #100]	; (800b4fc <Error_Handler+0x80>)
 800b496:	f001 fe01 	bl	800d09c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800b49a:	2200      	movs	r2, #0
 800b49c:	2140      	movs	r1, #64	; 0x40
 800b49e:	4818      	ldr	r0, [pc, #96]	; (800b500 <Error_Handler+0x84>)
 800b4a0:	f001 fdfc 	bl	800d09c <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 800b4a4:	4b17      	ldr	r3, [pc, #92]	; (800b504 <Error_Handler+0x88>)
 800b4a6:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d010      	beq.n	800b4d0 <Error_Handler+0x54>
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	dc17      	bgt.n	800b4e2 <Error_Handler+0x66>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <Error_Handler+0x40>
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d005      	beq.n	800b4c6 <Error_Handler+0x4a>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 800b4ba:	e012      	b.n	800b4e2 <Error_Handler+0x66>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b4bc:	2140      	movs	r1, #64	; 0x40
 800b4be:	480f      	ldr	r0, [pc, #60]	; (800b4fc <Error_Handler+0x80>)
 800b4c0:	f001 fe05 	bl	800d0ce <HAL_GPIO_TogglePin>
			break;
 800b4c4:	e00e      	b.n	800b4e4 <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800b4c6:	2180      	movs	r1, #128	; 0x80
 800b4c8:	480c      	ldr	r0, [pc, #48]	; (800b4fc <Error_Handler+0x80>)
 800b4ca:	f001 fe00 	bl	800d0ce <HAL_GPIO_TogglePin>
			break;
 800b4ce:	e009      	b.n	800b4e4 <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800b4d0:	2140      	movs	r1, #64	; 0x40
 800b4d2:	480a      	ldr	r0, [pc, #40]	; (800b4fc <Error_Handler+0x80>)
 800b4d4:	f001 fdfb 	bl	800d0ce <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800b4d8:	2180      	movs	r1, #128	; 0x80
 800b4da:	4808      	ldr	r0, [pc, #32]	; (800b4fc <Error_Handler+0x80>)
 800b4dc:	f001 fdf7 	bl	800d0ce <HAL_GPIO_TogglePin>
			break;
 800b4e0:	e000      	b.n	800b4e4 <Error_Handler+0x68>
			break;
 800b4e2:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	e002      	b.n	800b4f0 <Error_Handler+0x74>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	607b      	str	r3, [r7, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a05      	ldr	r2, [pc, #20]	; (800b508 <Error_Handler+0x8c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d9f8      	bls.n	800b4ea <Error_Handler+0x6e>
		switch(system_state.error)
 800b4f8:	e7d4      	b.n	800b4a4 <Error_Handler+0x28>
 800b4fa:	bf00      	nop
 800b4fc:	40021800 	.word	0x40021800
 800b500:	40020800 	.word	0x40020800
 800b504:	20000e80 	.word	0x20000e80
 800b508:	001e847f 	.word	0x001e847f

0800b50c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b512:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <HAL_MspInit+0x44>)
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	4a0e      	ldr	r2, [pc, #56]	; (800b550 <HAL_MspInit+0x44>)
 800b518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b51c:	6413      	str	r3, [r2, #64]	; 0x40
 800b51e:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <HAL_MspInit+0x44>)
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b526:	607b      	str	r3, [r7, #4]
 800b528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b52a:	4b09      	ldr	r3, [pc, #36]	; (800b550 <HAL_MspInit+0x44>)
 800b52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52e:	4a08      	ldr	r2, [pc, #32]	; (800b550 <HAL_MspInit+0x44>)
 800b530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b534:	6453      	str	r3, [r2, #68]	; 0x44
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <HAL_MspInit+0x44>)
 800b538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	40023800 	.word	0x40023800

0800b554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08a      	sub	sp, #40	; 0x28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b55c:	f107 0314 	add.w	r3, r7, #20
 800b560:	2200      	movs	r2, #0
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	605a      	str	r2, [r3, #4]
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	60da      	str	r2, [r3, #12]
 800b56a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a2d      	ldr	r2, [pc, #180]	; (800b628 <HAL_ADC_MspInit+0xd4>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d153      	bne.n	800b61e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b576:	4b2d      	ldr	r3, [pc, #180]	; (800b62c <HAL_ADC_MspInit+0xd8>)
 800b578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57a:	4a2c      	ldr	r2, [pc, #176]	; (800b62c <HAL_ADC_MspInit+0xd8>)
 800b57c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b580:	6453      	str	r3, [r2, #68]	; 0x44
 800b582:	4b2a      	ldr	r3, [pc, #168]	; (800b62c <HAL_ADC_MspInit+0xd8>)
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58a:	613b      	str	r3, [r7, #16]
 800b58c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b58e:	4b27      	ldr	r3, [pc, #156]	; (800b62c <HAL_ADC_MspInit+0xd8>)
 800b590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b592:	4a26      	ldr	r2, [pc, #152]	; (800b62c <HAL_ADC_MspInit+0xd8>)
 800b594:	f043 0301 	orr.w	r3, r3, #1
 800b598:	6313      	str	r3, [r2, #48]	; 0x30
 800b59a:	4b24      	ldr	r3, [pc, #144]	; (800b62c <HAL_ADC_MspInit+0xd8>)
 800b59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800b5a6:	2305      	movs	r3, #5
 800b5a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5b2:	f107 0314 	add.w	r3, r7, #20
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	481d      	ldr	r0, [pc, #116]	; (800b630 <HAL_ADC_MspInit+0xdc>)
 800b5ba:	f001 fbc3 	bl	800cd44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800b5be:	4b1d      	ldr	r3, [pc, #116]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5c0:	4a1d      	ldr	r2, [pc, #116]	; (800b638 <HAL_ADC_MspInit+0xe4>)
 800b5c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800b5c4:	4b1b      	ldr	r3, [pc, #108]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b5ca:	4b1a      	ldr	r3, [pc, #104]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5d0:	4b18      	ldr	r3, [pc, #96]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b5d6:	4b17      	ldr	r3, [pc, #92]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b5de:	4b15      	ldr	r3, [pc, #84]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b5e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b5e6:	4b13      	ldr	r3, [pc, #76]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b5ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b5ee:	4b11      	ldr	r3, [pc, #68]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800b5f6:	4b0f      	ldr	r3, [pc, #60]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b5fc:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b602:	480c      	ldr	r0, [pc, #48]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b604:	f000 fff8 	bl	800c5f8 <HAL_DMA_Init>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800b60e:	f7ff ff35 	bl	800b47c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a07      	ldr	r2, [pc, #28]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b616:	639a      	str	r2, [r3, #56]	; 0x38
 800b618:	4a06      	ldr	r2, [pc, #24]	; (800b634 <HAL_ADC_MspInit+0xe0>)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b61e:	bf00      	nop
 800b620:	3728      	adds	r7, #40	; 0x28
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	40012000 	.word	0x40012000
 800b62c:	40023800 	.word	0x40023800
 800b630:	40020000 	.word	0x40020000
 800b634:	20000b70 	.word	0x20000b70
 800b638:	40026410 	.word	0x40026410

0800b63c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b0ac      	sub	sp, #176	; 0xb0
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b644:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	605a      	str	r2, [r3, #4]
 800b64e:	609a      	str	r2, [r3, #8]
 800b650:	60da      	str	r2, [r3, #12]
 800b652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b654:	f107 0318 	add.w	r3, r7, #24
 800b658:	2284      	movs	r2, #132	; 0x84
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f013 fe4f 	bl	801f300 <memset>
  if(hsd->Instance==SDMMC1)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a74      	ldr	r2, [pc, #464]	; (800b838 <HAL_SD_MspInit+0x1fc>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	f040 80e0 	bne.w	800b82e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800b66e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800b672:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b674:	2300      	movs	r3, #0
 800b676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800b67a:	2300      	movs	r3, #0
 800b67c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b680:	f107 0318 	add.w	r3, r7, #24
 800b684:	4618      	mov	r0, r3
 800b686:	f005 fa57 	bl	8010b38 <HAL_RCCEx_PeriphCLKConfig>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 800b690:	f7ff fef4 	bl	800b47c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b694:	4b69      	ldr	r3, [pc, #420]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b698:	4a68      	ldr	r2, [pc, #416]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b69a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b69e:	6453      	str	r3, [r2, #68]	; 0x44
 800b6a0:	4b66      	ldr	r3, [pc, #408]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b6ac:	4b63      	ldr	r3, [pc, #396]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b0:	4a62      	ldr	r2, [pc, #392]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6b2:	f043 0304 	orr.w	r3, r3, #4
 800b6b6:	6313      	str	r3, [r2, #48]	; 0x30
 800b6b8:	4b60      	ldr	r3, [pc, #384]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b6c4:	4b5d      	ldr	r3, [pc, #372]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c8:	4a5c      	ldr	r2, [pc, #368]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6ca:	f043 0308 	orr.w	r3, r3, #8
 800b6ce:	6313      	str	r3, [r2, #48]	; 0x30
 800b6d0:	4b5a      	ldr	r3, [pc, #360]	; (800b83c <HAL_SD_MspInit+0x200>)
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 800b6dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800b6e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b6fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b700:	4619      	mov	r1, r3
 800b702:	484f      	ldr	r0, [pc, #316]	; (800b840 <HAL_SD_MspInit+0x204>)
 800b704:	f001 fb1e 	bl	800cd44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b708:	2304      	movs	r3, #4
 800b70a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b70e:	2302      	movs	r3, #2
 800b710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b714:	2300      	movs	r3, #0
 800b716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b71a:	2303      	movs	r3, #3
 800b71c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b720:	230c      	movs	r3, #12
 800b722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b72a:	4619      	mov	r1, r3
 800b72c:	4845      	ldr	r0, [pc, #276]	; (800b844 <HAL_SD_MspInit+0x208>)
 800b72e:	f001 fb09 	bl	800cd44 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800b732:	4b45      	ldr	r3, [pc, #276]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b734:	4a45      	ldr	r2, [pc, #276]	; (800b84c <HAL_SD_MspInit+0x210>)
 800b736:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800b738:	4b43      	ldr	r3, [pc, #268]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b73a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b73e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b740:	4b41      	ldr	r3, [pc, #260]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b742:	2200      	movs	r2, #0
 800b744:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b746:	4b40      	ldr	r3, [pc, #256]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b748:	2200      	movs	r2, #0
 800b74a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b74c:	4b3e      	ldr	r3, [pc, #248]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b74e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b752:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b754:	4b3c      	ldr	r3, [pc, #240]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b75a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b75c:	4b3a      	ldr	r3, [pc, #232]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b75e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b762:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800b764:	4b38      	ldr	r3, [pc, #224]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b766:	2220      	movs	r2, #32
 800b768:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b76a:	4b37      	ldr	r3, [pc, #220]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b770:	4b35      	ldr	r3, [pc, #212]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b772:	2204      	movs	r2, #4
 800b774:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b776:	4b34      	ldr	r3, [pc, #208]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b778:	2203      	movs	r2, #3
 800b77a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800b77c:	4b32      	ldr	r3, [pc, #200]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b77e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b782:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b784:	4b30      	ldr	r3, [pc, #192]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b786:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b78a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800b78c:	482e      	ldr	r0, [pc, #184]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b78e:	f000 ff33 	bl	800c5f8 <HAL_DMA_Init>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 800b798:	f7ff fe70 	bl	800b47c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a2a      	ldr	r2, [pc, #168]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b7a0:	641a      	str	r2, [r3, #64]	; 0x40
 800b7a2:	4a29      	ldr	r2, [pc, #164]	; (800b848 <HAL_SD_MspInit+0x20c>)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800b7a8:	4b29      	ldr	r3, [pc, #164]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7aa:	4a2a      	ldr	r2, [pc, #168]	; (800b854 <HAL_SD_MspInit+0x218>)
 800b7ac:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800b7ae:	4b28      	ldr	r3, [pc, #160]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7b4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7b6:	4b26      	ldr	r3, [pc, #152]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7b8:	2240      	movs	r2, #64	; 0x40
 800b7ba:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7bc:	4b24      	ldr	r3, [pc, #144]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b7c2:	4b23      	ldr	r3, [pc, #140]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7c8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b7ca:	4b21      	ldr	r3, [pc, #132]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7d0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b7d2:	4b1f      	ldr	r3, [pc, #124]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7d8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800b7da:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7dc:	2220      	movs	r2, #32
 800b7de:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b7e0:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b7e6:	4b1a      	ldr	r3, [pc, #104]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7e8:	2204      	movs	r2, #4
 800b7ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b7ec:	4b18      	ldr	r3, [pc, #96]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800b7f2:	4b17      	ldr	r3, [pc, #92]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b7f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b7fa:	4b15      	ldr	r3, [pc, #84]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b7fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b800:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800b802:	4813      	ldr	r0, [pc, #76]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b804:	f000 fef8 	bl	800c5f8 <HAL_DMA_Init>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800b80e:	f7ff fe35 	bl	800b47c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a0e      	ldr	r2, [pc, #56]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b816:	63da      	str	r2, [r3, #60]	; 0x3c
 800b818:	4a0d      	ldr	r2, [pc, #52]	; (800b850 <HAL_SD_MspInit+0x214>)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800b81e:	2200      	movs	r2, #0
 800b820:	2100      	movs	r1, #0
 800b822:	2031      	movs	r0, #49	; 0x31
 800b824:	f000 feb1 	bl	800c58a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b828:	2031      	movs	r0, #49	; 0x31
 800b82a:	f000 feca 	bl	800c5c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800b82e:	bf00      	nop
 800b830:	37b0      	adds	r7, #176	; 0xb0
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	40012c00 	.word	0x40012c00
 800b83c:	40023800 	.word	0x40023800
 800b840:	40020800 	.word	0x40020800
 800b844:	40020c00 	.word	0x40020c00
 800b848:	20000c54 	.word	0x20000c54
 800b84c:	40026458 	.word	0x40026458
 800b850:	20000cb4 	.word	0x20000cb4
 800b854:	400264a0 	.word	0x400264a0

0800b858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a13      	ldr	r2, [pc, #76]	; (800b8b4 <HAL_TIM_Base_MspInit+0x5c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d10c      	bne.n	800b884 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b86a:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <HAL_TIM_Base_MspInit+0x60>)
 800b86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86e:	4a12      	ldr	r2, [pc, #72]	; (800b8b8 <HAL_TIM_Base_MspInit+0x60>)
 800b870:	f043 0301 	orr.w	r3, r3, #1
 800b874:	6453      	str	r3, [r2, #68]	; 0x44
 800b876:	4b10      	ldr	r3, [pc, #64]	; (800b8b8 <HAL_TIM_Base_MspInit+0x60>)
 800b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800b882:	e010      	b.n	800b8a6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a0c      	ldr	r2, [pc, #48]	; (800b8bc <HAL_TIM_Base_MspInit+0x64>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d10b      	bne.n	800b8a6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800b88e:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <HAL_TIM_Base_MspInit+0x60>)
 800b890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b892:	4a09      	ldr	r2, [pc, #36]	; (800b8b8 <HAL_TIM_Base_MspInit+0x60>)
 800b894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b898:	6453      	str	r3, [r2, #68]	; 0x44
 800b89a:	4b07      	ldr	r3, [pc, #28]	; (800b8b8 <HAL_TIM_Base_MspInit+0x60>)
 800b89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8a2:	60bb      	str	r3, [r7, #8]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
}
 800b8a6:	bf00      	nop
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	40010000 	.word	0x40010000
 800b8b8:	40023800 	.word	0x40023800
 800b8bc:	40014800 	.word	0x40014800

0800b8c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8c8:	f107 030c 	add.w	r3, r7, #12
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	605a      	str	r2, [r3, #4]
 800b8d2:	609a      	str	r2, [r3, #8]
 800b8d4:	60da      	str	r2, [r3, #12]
 800b8d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a11      	ldr	r2, [pc, #68]	; (800b924 <HAL_TIM_MspPostInit+0x64>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d11b      	bne.n	800b91a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b8e2:	4b11      	ldr	r3, [pc, #68]	; (800b928 <HAL_TIM_MspPostInit+0x68>)
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	4a10      	ldr	r2, [pc, #64]	; (800b928 <HAL_TIM_MspPostInit+0x68>)
 800b8e8:	f043 0320 	orr.w	r3, r3, #32
 800b8ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	; (800b928 <HAL_TIM_MspPostInit+0x68>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	f003 0320 	and.w	r3, r3, #32
 800b8f6:	60bb      	str	r3, [r7, #8]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800b8fa:	2380      	movs	r3, #128	; 0x80
 800b8fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8fe:	2302      	movs	r3, #2
 800b900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b906:	2300      	movs	r3, #0
 800b908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800b90a:	2303      	movs	r3, #3
 800b90c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 800b90e:	f107 030c 	add.w	r3, r7, #12
 800b912:	4619      	mov	r1, r3
 800b914:	4805      	ldr	r0, [pc, #20]	; (800b92c <HAL_TIM_MspPostInit+0x6c>)
 800b916:	f001 fa15 	bl	800cd44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800b91a:	bf00      	nop
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	40014800 	.word	0x40014800
 800b928:	40023800 	.word	0x40023800
 800b92c:	40021400 	.word	0x40021400

0800b930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b0aa      	sub	sp, #168	; 0xa8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b938:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	605a      	str	r2, [r3, #4]
 800b942:	609a      	str	r2, [r3, #8]
 800b944:	60da      	str	r2, [r3, #12]
 800b946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b948:	f107 0310 	add.w	r3, r7, #16
 800b94c:	2284      	movs	r2, #132	; 0x84
 800b94e:	2100      	movs	r1, #0
 800b950:	4618      	mov	r0, r3
 800b952:	f013 fcd5 	bl	801f300 <memset>
  if(huart->Instance==USART1)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a21      	ldr	r2, [pc, #132]	; (800b9e0 <HAL_UART_MspInit+0xb0>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d13a      	bne.n	800b9d6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b960:	2340      	movs	r3, #64	; 0x40
 800b962:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b964:	2300      	movs	r3, #0
 800b966:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b968:	f107 0310 	add.w	r3, r7, #16
 800b96c:	4618      	mov	r0, r3
 800b96e:	f005 f8e3 	bl	8010b38 <HAL_RCCEx_PeriphCLKConfig>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b978:	f7ff fd80 	bl	800b47c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b97c:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <HAL_UART_MspInit+0xb4>)
 800b97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b980:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <HAL_UART_MspInit+0xb4>)
 800b982:	f043 0310 	orr.w	r3, r3, #16
 800b986:	6453      	str	r3, [r2, #68]	; 0x44
 800b988:	4b16      	ldr	r3, [pc, #88]	; (800b9e4 <HAL_UART_MspInit+0xb4>)
 800b98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98c:	f003 0310 	and.w	r3, r3, #16
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b994:	4b13      	ldr	r3, [pc, #76]	; (800b9e4 <HAL_UART_MspInit+0xb4>)
 800b996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b998:	4a12      	ldr	r2, [pc, #72]	; (800b9e4 <HAL_UART_MspInit+0xb4>)
 800b99a:	f043 0302 	orr.w	r3, r3, #2
 800b99e:	6313      	str	r3, [r2, #48]	; 0x30
 800b9a0:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <HAL_UART_MspInit+0xb4>)
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	60bb      	str	r3, [r7, #8]
 800b9aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 800b9ac:	23c0      	movs	r3, #192	; 0xc0
 800b9ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b9c4:	2307      	movs	r3, #7
 800b9c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4805      	ldr	r0, [pc, #20]	; (800b9e8 <HAL_UART_MspInit+0xb8>)
 800b9d2:	f001 f9b7 	bl	800cd44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b9d6:	bf00      	nop
 800b9d8:	37a8      	adds	r7, #168	; 0xa8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	40011000 	.word	0x40011000
 800b9e4:	40023800 	.word	0x40023800
 800b9e8:	40020400 	.word	0x40020400

0800b9ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b9f2:	1d3b      	adds	r3, r7, #4
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	605a      	str	r2, [r3, #4]
 800b9fa:	609a      	str	r2, [r3, #8]
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ba00:	4b2b      	ldr	r3, [pc, #172]	; (800bab0 <HAL_FMC_MspInit+0xc4>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d14e      	bne.n	800baa6 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 800ba08:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <HAL_FMC_MspInit+0xc4>)
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ba0e:	4b29      	ldr	r3, [pc, #164]	; (800bab4 <HAL_FMC_MspInit+0xc8>)
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	4a28      	ldr	r2, [pc, #160]	; (800bab4 <HAL_FMC_MspInit+0xc8>)
 800ba14:	f043 0301 	orr.w	r3, r3, #1
 800ba18:	6393      	str	r3, [r2, #56]	; 0x38
 800ba1a:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <HAL_FMC_MspInit+0xc8>)
 800ba1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	603b      	str	r3, [r7, #0]
 800ba24:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 800ba26:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 800ba2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba34:	2303      	movs	r3, #3
 800ba36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ba38:	230c      	movs	r3, #12
 800ba3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ba3c:	1d3b      	adds	r3, r7, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	481d      	ldr	r0, [pc, #116]	; (800bab8 <HAL_FMC_MspInit+0xcc>)
 800ba42:	f001 f97f 	bl	800cd44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 800ba46:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800ba4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba54:	2303      	movs	r3, #3
 800ba56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ba58:	230c      	movs	r3, #12
 800ba5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba5c:	1d3b      	adds	r3, r7, #4
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4816      	ldr	r0, [pc, #88]	; (800babc <HAL_FMC_MspInit+0xd0>)
 800ba62:	f001 f96f 	bl	800cd44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 800ba66:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800ba6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba74:	2303      	movs	r3, #3
 800ba76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ba78:	230c      	movs	r3, #12
 800ba7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ba7c:	1d3b      	adds	r3, r7, #4
 800ba7e:	4619      	mov	r1, r3
 800ba80:	480f      	ldr	r0, [pc, #60]	; (800bac0 <HAL_FMC_MspInit+0xd4>)
 800ba82:	f001 f95f 	bl	800cd44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 800ba86:	233f      	movs	r3, #63	; 0x3f
 800ba88:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba92:	2303      	movs	r3, #3
 800ba94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ba96:	230c      	movs	r3, #12
 800ba98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ba9a:	1d3b      	adds	r3, r7, #4
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4809      	ldr	r0, [pc, #36]	; (800bac4 <HAL_FMC_MspInit+0xd8>)
 800baa0:	f001 f950 	bl	800cd44 <HAL_GPIO_Init>
 800baa4:	e000      	b.n	800baa8 <HAL_FMC_MspInit+0xbc>
    return;
 800baa6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	20001754 	.word	0x20001754
 800bab4:	40023800 	.word	0x40023800
 800bab8:	40021000 	.word	0x40021000
 800babc:	40020c00 	.word	0x40020c00
 800bac0:	40021400 	.word	0x40021400
 800bac4:	40021800 	.word	0x40021800

0800bac8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800bad0:	f7ff ff8c 	bl	800b9ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bae0:	e7fe      	b.n	800bae0 <NMI_Handler+0x4>

0800bae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bae2:	b480      	push	{r7}
 800bae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bae6:	e7fe      	b.n	800bae6 <HardFault_Handler+0x4>

0800bae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800baec:	e7fe      	b.n	800baec <MemManage_Handler+0x4>

0800baee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800baee:	b480      	push	{r7}
 800baf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800baf2:	e7fe      	b.n	800baf2 <BusFault_Handler+0x4>

0800baf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800baf8:	e7fe      	b.n	800baf8 <UsageFault_Handler+0x4>

0800bafa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bafa:	b480      	push	{r7}
 800bafc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bafe:	bf00      	nop
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bb0c:	bf00      	nop
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bb16:	b480      	push	{r7}
 800bb18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bb1a:	bf00      	nop
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bb28:	f000 f97c 	bl	800be24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bb2c:	bf00      	nop
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800bb34:	4802      	ldr	r0, [pc, #8]	; (800bb40 <SDMMC1_IRQHandler+0x10>)
 800bb36:	f005 fe37 	bl	80117a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800bb3a:	bf00      	nop
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20000bd0 	.word	0x20000bd0

0800bb44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800bb48:	4802      	ldr	r0, [pc, #8]	; (800bb54 <DMA2_Stream0_IRQHandler+0x10>)
 800bb4a:	f000 fe85 	bl	800c858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800bb4e:	bf00      	nop
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20000b70 	.word	0x20000b70

0800bb58 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800bb5c:	4802      	ldr	r0, [pc, #8]	; (800bb68 <DMA2_Stream3_IRQHandler+0x10>)
 800bb5e:	f000 fe7b 	bl	800c858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800bb62:	bf00      	nop
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000c54 	.word	0x20000c54

0800bb6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800bb70:	4802      	ldr	r0, [pc, #8]	; (800bb7c <OTG_FS_IRQHandler+0x10>)
 800bb72:	f001 fd31 	bl	800d5d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800bb76:	bf00      	nop
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20003568 	.word	0x20003568

0800bb80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800bb84:	4802      	ldr	r0, [pc, #8]	; (800bb90 <DMA2_Stream6_IRQHandler+0x10>)
 800bb86:	f000 fe67 	bl	800c858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800bb8a:	bf00      	nop
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000cb4 	.word	0x20000cb4

0800bb94 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800bb98:	4802      	ldr	r0, [pc, #8]	; (800bba4 <OTG_HS_IRQHandler+0x10>)
 800bb9a:	f003 f933 	bl	800ee04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800bb9e:	bf00      	nop
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20002c84 	.word	0x20002c84

0800bba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
  return 1;
 800bbac:	2301      	movs	r3, #1
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <_kill>:

int _kill(int pid, int sig)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800bbc2:	f013 f909 	bl	801edd8 <__errno>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2216      	movs	r2, #22
 800bbca:	601a      	str	r2, [r3, #0]
  return -1;
 800bbcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <_exit>:

void _exit (int status)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800bbe0:	f04f 31ff 	mov.w	r1, #4294967295
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff ffe7 	bl	800bbb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800bbea:	e7fe      	b.n	800bbea <_exit+0x12>

0800bbec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	e00a      	b.n	800bc14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800bbfe:	f3af 8000 	nop.w
 800bc02:	4601      	mov	r1, r0
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	60ba      	str	r2, [r7, #8]
 800bc0a:	b2ca      	uxtb	r2, r1
 800bc0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	3301      	adds	r3, #1
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	dbf0      	blt.n	800bbfe <_read+0x12>
  }

  return len;
 800bc1c:	687b      	ldr	r3, [r7, #4]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b086      	sub	sp, #24
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]
 800bc36:	e009      	b.n	800bc4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	60ba      	str	r2, [r7, #8]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	dbf1      	blt.n	800bc38 <_write+0x12>
  }
  return len;
 800bc54:	687b      	ldr	r3, [r7, #4]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <_close>:

int _close(int file)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b083      	sub	sp, #12
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bc66:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bc86:	605a      	str	r2, [r3, #4]
  return 0;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <_isatty>:

int _isatty(int file)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bc9e:	2301      	movs	r3, #1
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bcd0:	4a14      	ldr	r2, [pc, #80]	; (800bd24 <_sbrk+0x5c>)
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <_sbrk+0x60>)
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bcdc:	4b13      	ldr	r3, [pc, #76]	; (800bd2c <_sbrk+0x64>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bce4:	4b11      	ldr	r3, [pc, #68]	; (800bd2c <_sbrk+0x64>)
 800bce6:	4a12      	ldr	r2, [pc, #72]	; (800bd30 <_sbrk+0x68>)
 800bce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bcea:	4b10      	ldr	r3, [pc, #64]	; (800bd2c <_sbrk+0x64>)
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d207      	bcs.n	800bd08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bcf8:	f013 f86e 	bl	801edd8 <__errno>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	220c      	movs	r2, #12
 800bd00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bd02:	f04f 33ff 	mov.w	r3, #4294967295
 800bd06:	e009      	b.n	800bd1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bd08:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <_sbrk+0x64>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bd0e:	4b07      	ldr	r3, [pc, #28]	; (800bd2c <_sbrk+0x64>)
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4413      	add	r3, r2
 800bd16:	4a05      	ldr	r2, [pc, #20]	; (800bd2c <_sbrk+0x64>)
 800bd18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	20050000 	.word	0x20050000
 800bd28:	00008000 	.word	0x00008000
 800bd2c:	20001758 	.word	0x20001758
 800bd30:	200038a8 	.word	0x200038a8

0800bd34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bd34:	b480      	push	{r7}
 800bd36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bd38:	4b06      	ldr	r3, [pc, #24]	; (800bd54 <SystemInit+0x20>)
 800bd3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd3e:	4a05      	ldr	r2, [pc, #20]	; (800bd54 <SystemInit+0x20>)
 800bd40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bd48:	bf00      	nop
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	e000ed00 	.word	0xe000ed00

0800bd58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bd58:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bd5c:	480d      	ldr	r0, [pc, #52]	; (800bd94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800bd5e:	490e      	ldr	r1, [pc, #56]	; (800bd98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800bd60:	4a0e      	ldr	r2, [pc, #56]	; (800bd9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800bd62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bd64:	e002      	b.n	800bd6c <LoopCopyDataInit>

0800bd66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bd66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bd68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bd6a:	3304      	adds	r3, #4

0800bd6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd70:	d3f9      	bcc.n	800bd66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd72:	4a0b      	ldr	r2, [pc, #44]	; (800bda0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bd74:	4c0b      	ldr	r4, [pc, #44]	; (800bda4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800bd76:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd78:	e001      	b.n	800bd7e <LoopFillZerobss>

0800bd7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd7c:	3204      	adds	r2, #4

0800bd7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd80:	d3fb      	bcc.n	800bd7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bd82:	f7ff ffd7 	bl	800bd34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bd86:	f013 f82d 	bl	801ede4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd8a:	f7fe ff53 	bl	800ac34 <main>
  bx  lr    
 800bd8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bd90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800bd94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd98:	20000af0 	.word	0x20000af0
  ldr r2, =_sidata
 800bd9c:	08026134 	.word	0x08026134
  ldr r2, =_sbss
 800bda0:	20000af0 	.word	0x20000af0
  ldr r4, =_ebss
 800bda4:	200038a8 	.word	0x200038a8

0800bda8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bda8:	e7fe      	b.n	800bda8 <ADC_IRQHandler>

0800bdaa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bdae:	2003      	movs	r0, #3
 800bdb0:	f000 fbe0 	bl	800c574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bdb4:	200f      	movs	r0, #15
 800bdb6:	f000 f805 	bl	800bdc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bdba:	f7ff fba7 	bl	800b50c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bdcc:	4b12      	ldr	r3, [pc, #72]	; (800be18 <HAL_InitTick+0x54>)
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	4b12      	ldr	r3, [pc, #72]	; (800be1c <HAL_InitTick+0x58>)
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bdda:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 fbfb 	bl	800c5de <HAL_SYSTICK_Config>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e00e      	b.n	800be10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b0f      	cmp	r3, #15
 800bdf6:	d80a      	bhi.n	800be0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	f000 fbc3 	bl	800c58a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800be04:	4a06      	ldr	r2, [pc, #24]	; (800be20 <HAL_InitTick+0x5c>)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	e000      	b.n	800be10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
}
 800be10:	4618      	mov	r0, r3
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20000018 	.word	0x20000018
 800be1c:	20000020 	.word	0x20000020
 800be20:	2000001c 	.word	0x2000001c

0800be24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be24:	b480      	push	{r7}
 800be26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <HAL_IncTick+0x20>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	461a      	mov	r2, r3
 800be2e:	4b06      	ldr	r3, [pc, #24]	; (800be48 <HAL_IncTick+0x24>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4413      	add	r3, r2
 800be34:	4a04      	ldr	r2, [pc, #16]	; (800be48 <HAL_IncTick+0x24>)
 800be36:	6013      	str	r3, [r2, #0]
}
 800be38:	bf00      	nop
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	20000020 	.word	0x20000020
 800be48:	2000175c 	.word	0x2000175c

0800be4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	af00      	add	r7, sp, #0
  return uwTick;
 800be50:	4b03      	ldr	r3, [pc, #12]	; (800be60 <HAL_GetTick+0x14>)
 800be52:	681b      	ldr	r3, [r3, #0]
}
 800be54:	4618      	mov	r0, r3
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	2000175c 	.word	0x2000175c

0800be64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800be6c:	f7ff ffee 	bl	800be4c <HAL_GetTick>
 800be70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7c:	d005      	beq.n	800be8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800be7e:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <HAL_Delay+0x44>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800be8a:	bf00      	nop
 800be8c:	f7ff ffde 	bl	800be4c <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d8f7      	bhi.n	800be8c <HAL_Delay+0x28>
  {
  }
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000020 	.word	0x20000020

0800beac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e031      	b.n	800bf26 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d109      	bne.n	800bede <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fb42 	bl	800b554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee2:	f003 0310 	and.w	r3, r3, #16
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d116      	bne.n	800bf18 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800beee:	4b10      	ldr	r3, [pc, #64]	; (800bf30 <HAL_ADC_Init+0x84>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	f043 0202 	orr.w	r2, r3, #2
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f970 	bl	800c1e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	f043 0201 	orr.w	r2, r3, #1
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	641a      	str	r2, [r3, #64]	; 0x40
 800bf16:	e001      	b.n	800bf1c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	ffffeefd 	.word	0xffffeefd

0800bf34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d101      	bne.n	800bf50 <HAL_ADC_ConfigChannel+0x1c>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	e136      	b.n	800c1be <HAL_ADC_ConfigChannel+0x28a>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b09      	cmp	r3, #9
 800bf5e:	d93a      	bls.n	800bfd6 <HAL_ADC_ConfigChannel+0xa2>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf68:	d035      	beq.n	800bfd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68d9      	ldr	r1, [r3, #12]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	461a      	mov	r2, r3
 800bf78:	4613      	mov	r3, r2
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	4413      	add	r3, r2
 800bf7e:	3b1e      	subs	r3, #30
 800bf80:	2207      	movs	r2, #7
 800bf82:	fa02 f303 	lsl.w	r3, r2, r3
 800bf86:	43da      	mvns	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	400a      	ands	r2, r1
 800bf8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a8d      	ldr	r2, [pc, #564]	; (800c1cc <HAL_ADC_ConfigChannel+0x298>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d10a      	bne.n	800bfb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68d9      	ldr	r1, [r3, #12]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	061a      	lsls	r2, r3, #24
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bfae:	e035      	b.n	800c01c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68d9      	ldr	r1, [r3, #12]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4403      	add	r3, r0
 800bfc8:	3b1e      	subs	r3, #30
 800bfca:	409a      	lsls	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bfd4:	e022      	b.n	800c01c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6919      	ldr	r1, [r3, #16]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	4413      	add	r3, r2
 800bfea:	2207      	movs	r2, #7
 800bfec:	fa02 f303 	lsl.w	r3, r2, r3
 800bff0:	43da      	mvns	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	400a      	ands	r2, r1
 800bff8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6919      	ldr	r1, [r3, #16]
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	b29b      	uxth	r3, r3
 800c00a:	4618      	mov	r0, r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	4403      	add	r3, r0
 800c012:	409a      	lsls	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	430a      	orrs	r2, r1
 800c01a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2b06      	cmp	r3, #6
 800c022:	d824      	bhi.n	800c06e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	3b05      	subs	r3, #5
 800c036:	221f      	movs	r2, #31
 800c038:	fa02 f303 	lsl.w	r3, r2, r3
 800c03c:	43da      	mvns	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	400a      	ands	r2, r1
 800c044:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	b29b      	uxth	r3, r3
 800c052:	4618      	mov	r0, r3
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	3b05      	subs	r3, #5
 800c060:	fa00 f203 	lsl.w	r2, r0, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	635a      	str	r2, [r3, #52]	; 0x34
 800c06c:	e04c      	b.n	800c108 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	2b0c      	cmp	r3, #12
 800c074:	d824      	bhi.n	800c0c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	3b23      	subs	r3, #35	; 0x23
 800c088:	221f      	movs	r2, #31
 800c08a:	fa02 f303 	lsl.w	r3, r2, r3
 800c08e:	43da      	mvns	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	400a      	ands	r2, r1
 800c096:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	3b23      	subs	r3, #35	; 0x23
 800c0b2:	fa00 f203 	lsl.w	r2, r0, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c0be:	e023      	b.n	800c108 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3b41      	subs	r3, #65	; 0x41
 800c0d2:	221f      	movs	r2, #31
 800c0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d8:	43da      	mvns	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	400a      	ands	r2, r1
 800c0e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	3b41      	subs	r3, #65	; 0x41
 800c0fc:	fa00 f203 	lsl.w	r2, r0, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	430a      	orrs	r2, r1
 800c106:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a30      	ldr	r2, [pc, #192]	; (800c1d0 <HAL_ADC_ConfigChannel+0x29c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d10a      	bne.n	800c128 <HAL_ADC_ConfigChannel+0x1f4>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c11a:	d105      	bne.n	800c128 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800c11c:	4b2d      	ldr	r3, [pc, #180]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a2c      	ldr	r2, [pc, #176]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c122:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c126:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a28      	ldr	r2, [pc, #160]	; (800c1d0 <HAL_ADC_ConfigChannel+0x29c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d10f      	bne.n	800c152 <HAL_ADC_ConfigChannel+0x21e>
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b12      	cmp	r3, #18
 800c138:	d10b      	bne.n	800c152 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800c13a:	4b26      	ldr	r3, [pc, #152]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	4a25      	ldr	r2, [pc, #148]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c140:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c144:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800c146:	4b23      	ldr	r3, [pc, #140]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	4a22      	ldr	r2, [pc, #136]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c14c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c150:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a1e      	ldr	r2, [pc, #120]	; (800c1d0 <HAL_ADC_ConfigChannel+0x29c>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d12b      	bne.n	800c1b4 <HAL_ADC_ConfigChannel+0x280>
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a1a      	ldr	r2, [pc, #104]	; (800c1cc <HAL_ADC_ConfigChannel+0x298>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d003      	beq.n	800c16e <HAL_ADC_ConfigChannel+0x23a>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b11      	cmp	r3, #17
 800c16c:	d122      	bne.n	800c1b4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800c16e:	4b19      	ldr	r3, [pc, #100]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	4a18      	ldr	r2, [pc, #96]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c174:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c178:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800c17a:	4b16      	ldr	r3, [pc, #88]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	4a15      	ldr	r2, [pc, #84]	; (800c1d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800c180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c184:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a10      	ldr	r2, [pc, #64]	; (800c1cc <HAL_ADC_ConfigChannel+0x298>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d111      	bne.n	800c1b4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800c190:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <HAL_ADC_ConfigChannel+0x2a4>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a11      	ldr	r2, [pc, #68]	; (800c1dc <HAL_ADC_ConfigChannel+0x2a8>)
 800c196:	fba2 2303 	umull	r2, r3, r2, r3
 800c19a:	0c9a      	lsrs	r2, r3, #18
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800c1a6:	e002      	b.n	800c1ae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1f9      	bne.n	800c1a8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	10000012 	.word	0x10000012
 800c1d0:	40012000 	.word	0x40012000
 800c1d4:	40012300 	.word	0x40012300
 800c1d8:	20000018 	.word	0x20000018
 800c1dc:	431bde83 	.word	0x431bde83

0800c1e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800c1e8:	4b78      	ldr	r3, [pc, #480]	; (800c3cc <ADC_Init+0x1ec>)
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	4a77      	ldr	r2, [pc, #476]	; (800c3cc <ADC_Init+0x1ec>)
 800c1ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c1f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800c1f4:	4b75      	ldr	r3, [pc, #468]	; (800c3cc <ADC_Init+0x1ec>)
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	4973      	ldr	r1, [pc, #460]	; (800c3cc <ADC_Init+0x1ec>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6859      	ldr	r1, [r3, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	021a      	lsls	r2, r3, #8
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	430a      	orrs	r2, r1
 800c224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6859      	ldr	r1, [r3, #4]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	430a      	orrs	r2, r1
 800c246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6899      	ldr	r1, [r3, #8]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68da      	ldr	r2, [r3, #12]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26e:	4a58      	ldr	r2, [pc, #352]	; (800c3d0 <ADC_Init+0x1f0>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d022      	beq.n	800c2ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689a      	ldr	r2, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6899      	ldr	r1, [r3, #8]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	689a      	ldr	r2, [r3, #8]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c2a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6899      	ldr	r1, [r3, #8]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	609a      	str	r2, [r3, #8]
 800c2b8:	e00f      	b.n	800c2da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c2c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c2d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f022 0202 	bic.w	r2, r2, #2
 800c2e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6899      	ldr	r1, [r3, #8]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	005a      	lsls	r2, r3, #1
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	430a      	orrs	r2, r1
 800c2fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d01b      	beq.n	800c340 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6859      	ldr	r1, [r3, #4]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c332:	3b01      	subs	r3, #1
 800c334:	035a      	lsls	r2, r3, #13
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	605a      	str	r2, [r3, #4]
 800c33e:	e007      	b.n	800c350 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c34e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c35e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	051a      	lsls	r2, r3, #20
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	430a      	orrs	r2, r1
 800c374:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6899      	ldr	r1, [r3, #8]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c392:	025a      	lsls	r2, r3, #9
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	430a      	orrs	r2, r1
 800c39a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689a      	ldr	r2, [r3, #8]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	6899      	ldr	r1, [r3, #8]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	029a      	lsls	r2, r3, #10
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	609a      	str	r2, [r3, #8]
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	40012300 	.word	0x40012300
 800c3d0:	0f000001 	.word	0x0f000001

0800c3d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <__NVIC_SetPriorityGrouping+0x40>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c3fc:	4b06      	ldr	r3, [pc, #24]	; (800c418 <__NVIC_SetPriorityGrouping+0x44>)
 800c3fe:	4313      	orrs	r3, r2
 800c400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c402:	4a04      	ldr	r2, [pc, #16]	; (800c414 <__NVIC_SetPriorityGrouping+0x40>)
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	60d3      	str	r3, [r2, #12]
}
 800c408:	bf00      	nop
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	e000ed00 	.word	0xe000ed00
 800c418:	05fa0000 	.word	0x05fa0000

0800c41c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c41c:	b480      	push	{r7}
 800c41e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c420:	4b04      	ldr	r3, [pc, #16]	; (800c434 <__NVIC_GetPriorityGrouping+0x18>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	0a1b      	lsrs	r3, r3, #8
 800c426:	f003 0307 	and.w	r3, r3, #7
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	e000ed00 	.word	0xe000ed00

0800c438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c446:	2b00      	cmp	r3, #0
 800c448:	db0b      	blt.n	800c462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	f003 021f 	and.w	r2, r3, #31
 800c450:	4907      	ldr	r1, [pc, #28]	; (800c470 <__NVIC_EnableIRQ+0x38>)
 800c452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c456:	095b      	lsrs	r3, r3, #5
 800c458:	2001      	movs	r0, #1
 800c45a:	fa00 f202 	lsl.w	r2, r0, r2
 800c45e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c462:	bf00      	nop
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	e000e100 	.word	0xe000e100

0800c474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c484:	2b00      	cmp	r3, #0
 800c486:	db0a      	blt.n	800c49e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	490c      	ldr	r1, [pc, #48]	; (800c4c0 <__NVIC_SetPriority+0x4c>)
 800c48e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c492:	0112      	lsls	r2, r2, #4
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	440b      	add	r3, r1
 800c498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c49c:	e00a      	b.n	800c4b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	4908      	ldr	r1, [pc, #32]	; (800c4c4 <__NVIC_SetPriority+0x50>)
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	f003 030f 	and.w	r3, r3, #15
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	0112      	lsls	r2, r2, #4
 800c4ae:	b2d2      	uxtb	r2, r2
 800c4b0:	440b      	add	r3, r1
 800c4b2:	761a      	strb	r2, [r3, #24]
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	e000e100 	.word	0xe000e100
 800c4c4:	e000ed00 	.word	0xe000ed00

0800c4c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b089      	sub	sp, #36	; 0x24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	f1c3 0307 	rsb	r3, r3, #7
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	bf28      	it	cs
 800c4e6:	2304      	movcs	r3, #4
 800c4e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	2b06      	cmp	r3, #6
 800c4f0:	d902      	bls.n	800c4f8 <NVIC_EncodePriority+0x30>
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	3b03      	subs	r3, #3
 800c4f6:	e000      	b.n	800c4fa <NVIC_EncodePriority+0x32>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	fa02 f303 	lsl.w	r3, r2, r3
 800c506:	43da      	mvns	r2, r3
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	401a      	ands	r2, r3
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c510:	f04f 31ff 	mov.w	r1, #4294967295
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	fa01 f303 	lsl.w	r3, r1, r3
 800c51a:	43d9      	mvns	r1, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c520:	4313      	orrs	r3, r2
         );
}
 800c522:	4618      	mov	r0, r3
 800c524:	3724      	adds	r7, #36	; 0x24
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
	...

0800c530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c540:	d301      	bcc.n	800c546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c542:	2301      	movs	r3, #1
 800c544:	e00f      	b.n	800c566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c546:	4a0a      	ldr	r2, [pc, #40]	; (800c570 <SysTick_Config+0x40>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c54e:	210f      	movs	r1, #15
 800c550:	f04f 30ff 	mov.w	r0, #4294967295
 800c554:	f7ff ff8e 	bl	800c474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <SysTick_Config+0x40>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c55e:	4b04      	ldr	r3, [pc, #16]	; (800c570 <SysTick_Config+0x40>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000e010 	.word	0xe000e010

0800c574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ff29 	bl	800c3d4 <__NVIC_SetPriorityGrouping>
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b086      	sub	sp, #24
 800c58e:	af00      	add	r7, sp, #0
 800c590:	4603      	mov	r3, r0
 800c592:	60b9      	str	r1, [r7, #8]
 800c594:	607a      	str	r2, [r7, #4]
 800c596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c598:	2300      	movs	r3, #0
 800c59a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c59c:	f7ff ff3e 	bl	800c41c <__NVIC_GetPriorityGrouping>
 800c5a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	68b9      	ldr	r1, [r7, #8]
 800c5a6:	6978      	ldr	r0, [r7, #20]
 800c5a8:	f7ff ff8e 	bl	800c4c8 <NVIC_EncodePriority>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7ff ff5d 	bl	800c474 <__NVIC_SetPriority>
}
 800c5ba:	bf00      	nop
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c5cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff ff31 	bl	800c438 <__NVIC_EnableIRQ>
}
 800c5d6:	bf00      	nop
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff ffa2 	bl	800c530 <SysTick_Config>
 800c5ec:	4603      	mov	r3, r0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c604:	f7ff fc22 	bl	800be4c <HAL_GetTick>
 800c608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	e099      	b.n	800c748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2202      	movs	r2, #2
 800c618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 0201 	bic.w	r2, r2, #1
 800c632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c634:	e00f      	b.n	800c656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c636:	f7ff fc09 	bl	800be4c <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b05      	cmp	r3, #5
 800c642:	d908      	bls.n	800c656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2220      	movs	r2, #32
 800c648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2203      	movs	r2, #3
 800c64e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c652:	2303      	movs	r3, #3
 800c654:	e078      	b.n	800c748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e8      	bne.n	800c636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4b38      	ldr	r3, [pc, #224]	; (800c750 <HAL_DMA_Init+0x158>)
 800c670:	4013      	ands	r3, r2
 800c672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c68e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c69a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ac:	2b04      	cmp	r3, #4
 800c6ae:	d107      	bne.n	800c6c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f023 0307 	bic.w	r3, r3, #7
 800c6d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d117      	bne.n	800c71a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00e      	beq.n	800c71a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 faa5 	bl	800cc4c <DMA_CheckFifoParam>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d008      	beq.n	800c71a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2240      	movs	r2, #64	; 0x40
 800c70c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c716:	2301      	movs	r3, #1
 800c718:	e016      	b.n	800c748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fa5c 	bl	800cbe0 <DMA_CalcBaseAndBitshift>
 800c728:	4603      	mov	r3, r0
 800c72a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c730:	223f      	movs	r2, #63	; 0x3f
 800c732:	409a      	lsls	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2201      	movs	r2, #1
 800c742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	f010803f 	.word	0xf010803f

0800c754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
 800c760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c76a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c772:	2b01      	cmp	r3, #1
 800c774:	d101      	bne.n	800c77a <HAL_DMA_Start_IT+0x26>
 800c776:	2302      	movs	r3, #2
 800c778:	e048      	b.n	800c80c <HAL_DMA_Start_IT+0xb8>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d137      	bne.n	800c7fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2202      	movs	r2, #2
 800c792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2200      	movs	r2, #0
 800c79a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	68b9      	ldr	r1, [r7, #8]
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f000 f9ee 	bl	800cb84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ac:	223f      	movs	r2, #63	; 0x3f
 800c7ae:	409a      	lsls	r2, r3
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f042 0216 	orr.w	r2, r2, #22
 800c7c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	695a      	ldr	r2, [r3, #20]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d007      	beq.n	800c7ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0208 	orr.w	r2, r2, #8
 800c7ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f042 0201 	orr.w	r2, r2, #1
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	e005      	b.n	800c80a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c806:	2302      	movs	r3, #2
 800c808:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b02      	cmp	r3, #2
 800c826:	d004      	beq.n	800c832 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2280      	movs	r2, #128	; 0x80
 800c82c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e00c      	b.n	800c84c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2205      	movs	r2, #5
 800c836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0201 	bic.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c864:	4b8e      	ldr	r3, [pc, #568]	; (800caa0 <HAL_DMA_IRQHandler+0x248>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a8e      	ldr	r2, [pc, #568]	; (800caa4 <HAL_DMA_IRQHandler+0x24c>)
 800c86a:	fba2 2303 	umull	r2, r3, r2, r3
 800c86e:	0a9b      	lsrs	r3, r3, #10
 800c870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c882:	2208      	movs	r2, #8
 800c884:	409a      	lsls	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4013      	ands	r3, r2
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d01a      	beq.n	800c8c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 0304 	and.w	r3, r3, #4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d013      	beq.n	800c8c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f022 0204 	bic.w	r2, r2, #4
 800c8aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	409a      	lsls	r2, r3
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8bc:	f043 0201 	orr.w	r2, r3, #1
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	409a      	lsls	r2, r3
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d012      	beq.n	800c8fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	695b      	ldr	r3, [r3, #20]
 800c8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00b      	beq.n	800c8fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	409a      	lsls	r2, r3
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f2:	f043 0202 	orr.w	r2, r3, #2
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8fe:	2204      	movs	r2, #4
 800c900:	409a      	lsls	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	4013      	ands	r3, r2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d012      	beq.n	800c930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00b      	beq.n	800c930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c91c:	2204      	movs	r2, #4
 800c91e:	409a      	lsls	r2, r3
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c928:	f043 0204 	orr.w	r2, r3, #4
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c934:	2210      	movs	r2, #16
 800c936:	409a      	lsls	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4013      	ands	r3, r2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d043      	beq.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0308 	and.w	r3, r3, #8
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d03c      	beq.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c952:	2210      	movs	r2, #16
 800c954:	409a      	lsls	r2, r3
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c964:	2b00      	cmp	r3, #0
 800c966:	d018      	beq.n	800c99a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c972:	2b00      	cmp	r3, #0
 800c974:	d108      	bne.n	800c988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d024      	beq.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	4798      	blx	r3
 800c986:	e01f      	b.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d01b      	beq.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	4798      	blx	r3
 800c998:	e016      	b.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d107      	bne.n	800c9b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f022 0208 	bic.w	r2, r2, #8
 800c9b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d003      	beq.n	800c9c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	409a      	lsls	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4013      	ands	r3, r2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 808f 	beq.w	800caf8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 0310 	and.w	r3, r3, #16
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 8087 	beq.w	800caf8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	409a      	lsls	r2, r3
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b05      	cmp	r3, #5
 800ca00:	d136      	bne.n	800ca70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f022 0216 	bic.w	r2, r2, #22
 800ca10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	695a      	ldr	r2, [r3, #20]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d103      	bne.n	800ca32 <HAL_DMA_IRQHandler+0x1da>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d007      	beq.n	800ca42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f022 0208 	bic.w	r2, r2, #8
 800ca40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca46:	223f      	movs	r2, #63	; 0x3f
 800ca48:	409a      	lsls	r2, r3
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d07e      	beq.n	800cb64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	4798      	blx	r3
        }
        return;
 800ca6e:	e079      	b.n	800cb64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d01d      	beq.n	800caba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10d      	bne.n	800caa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d031      	beq.n	800caf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	4798      	blx	r3
 800ca9c:	e02c      	b.n	800caf8 <HAL_DMA_IRQHandler+0x2a0>
 800ca9e:	bf00      	nop
 800caa0:	20000018 	.word	0x20000018
 800caa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caac:	2b00      	cmp	r3, #0
 800caae:	d023      	beq.n	800caf8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	4798      	blx	r3
 800cab8:	e01e      	b.n	800caf8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10f      	bne.n	800cae8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 0210 	bic.w	r2, r2, #16
 800cad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d032      	beq.n	800cb66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb04:	f003 0301 	and.w	r3, r3, #1
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d022      	beq.n	800cb52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2205      	movs	r2, #5
 800cb10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f022 0201 	bic.w	r2, r2, #1
 800cb22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	3301      	adds	r3, #1
 800cb28:	60bb      	str	r3, [r7, #8]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d307      	bcc.n	800cb40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1f2      	bne.n	800cb24 <HAL_DMA_IRQHandler+0x2cc>
 800cb3e:	e000      	b.n	800cb42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800cb40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	4798      	blx	r3
 800cb62:	e000      	b.n	800cb66 <HAL_DMA_IRQHandler+0x30e>
        return;
 800cb64:	bf00      	nop
    }
  }
}
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cba0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	2b40      	cmp	r3, #64	; 0x40
 800cbb0:	d108      	bne.n	800cbc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cbc2:	e007      	b.n	800cbd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	60da      	str	r2, [r3, #12]
}
 800cbd4:	bf00      	nop
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	3b10      	subs	r3, #16
 800cbf0:	4a13      	ldr	r2, [pc, #76]	; (800cc40 <DMA_CalcBaseAndBitshift+0x60>)
 800cbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbf6:	091b      	lsrs	r3, r3, #4
 800cbf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cbfa:	4a12      	ldr	r2, [pc, #72]	; (800cc44 <DMA_CalcBaseAndBitshift+0x64>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4413      	add	r3, r2
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	461a      	mov	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d908      	bls.n	800cc20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <DMA_CalcBaseAndBitshift+0x68>)
 800cc16:	4013      	ands	r3, r2
 800cc18:	1d1a      	adds	r2, r3, #4
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	659a      	str	r2, [r3, #88]	; 0x58
 800cc1e:	e006      	b.n	800cc2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	461a      	mov	r2, r3
 800cc26:	4b08      	ldr	r3, [pc, #32]	; (800cc48 <DMA_CalcBaseAndBitshift+0x68>)
 800cc28:	4013      	ands	r3, r2
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	aaaaaaab 	.word	0xaaaaaaab
 800cc44:	08025cbc 	.word	0x08025cbc
 800cc48:	fffffc00 	.word	0xfffffc00

0800cc4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d11f      	bne.n	800cca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d856      	bhi.n	800cd1a <DMA_CheckFifoParam+0xce>
 800cc6c:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <DMA_CheckFifoParam+0x28>)
 800cc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc72:	bf00      	nop
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc97 	.word	0x0800cc97
 800cc7c:	0800cc85 	.word	0x0800cc85
 800cc80:	0800cd1b 	.word	0x0800cd1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d046      	beq.n	800cd1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc94:	e043      	b.n	800cd1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cc9e:	d140      	bne.n	800cd22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cca4:	e03d      	b.n	800cd22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccae:	d121      	bne.n	800ccf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d837      	bhi.n	800cd26 <DMA_CheckFifoParam+0xda>
 800ccb6:	a201      	add	r2, pc, #4	; (adr r2, 800ccbc <DMA_CheckFifoParam+0x70>)
 800ccb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbc:	0800cccd 	.word	0x0800cccd
 800ccc0:	0800ccd3 	.word	0x0800ccd3
 800ccc4:	0800cccd 	.word	0x0800cccd
 800ccc8:	0800cce5 	.word	0x0800cce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd0:	e030      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d025      	beq.n	800cd2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cce2:	e022      	b.n	800cd2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ccec:	d11f      	bne.n	800cd2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ccf2:	e01c      	b.n	800cd2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d903      	bls.n	800cd02 <DMA_CheckFifoParam+0xb6>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	d003      	beq.n	800cd08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cd00:	e018      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	73fb      	strb	r3, [r7, #15]
      break;
 800cd06:	e015      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00e      	beq.n	800cd32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	73fb      	strb	r3, [r7, #15]
      break;
 800cd18:	e00b      	b.n	800cd32 <DMA_CheckFifoParam+0xe6>
      break;
 800cd1a:	bf00      	nop
 800cd1c:	e00a      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      break;
 800cd1e:	bf00      	nop
 800cd20:	e008      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      break;
 800cd22:	bf00      	nop
 800cd24:	e006      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      break;
 800cd26:	bf00      	nop
 800cd28:	e004      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      break;
 800cd2a:	bf00      	nop
 800cd2c:	e002      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      break;   
 800cd2e:	bf00      	nop
 800cd30:	e000      	b.n	800cd34 <DMA_CheckFifoParam+0xe8>
      break;
 800cd32:	bf00      	nop
    }
  } 
  
  return status; 
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop

0800cd44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b089      	sub	sp, #36	; 0x24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800cd52:	2300      	movs	r3, #0
 800cd54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800cd56:	2300      	movs	r3, #0
 800cd58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cd5e:	2300      	movs	r3, #0
 800cd60:	61fb      	str	r3, [r7, #28]
 800cd62:	e175      	b.n	800d050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cd64:	2201      	movs	r2, #1
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	4013      	ands	r3, r2
 800cd76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	f040 8164 	bne.w	800d04a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	f003 0303 	and.w	r3, r3, #3
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d005      	beq.n	800cd9a <HAL_GPIO_Init+0x56>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d130      	bne.n	800cdfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	2203      	movs	r2, #3
 800cda6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdaa:	43db      	mvns	r3, r3
 800cdac:	69ba      	ldr	r2, [r7, #24]
 800cdae:	4013      	ands	r3, r2
 800cdb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	68da      	ldr	r2, [r3, #12]
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	fa02 f303 	lsl.w	r3, r2, r3
 800cdbe:	69ba      	ldr	r2, [r7, #24]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	69ba      	ldr	r2, [r7, #24]
 800cdc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd8:	43db      	mvns	r3, r3
 800cdda:	69ba      	ldr	r2, [r7, #24]
 800cddc:	4013      	ands	r3, r2
 800cdde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	091b      	lsrs	r3, r3, #4
 800cde6:	f003 0201 	and.w	r2, r3, #1
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf0:	69ba      	ldr	r2, [r7, #24]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	69ba      	ldr	r2, [r7, #24]
 800cdfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f003 0303 	and.w	r3, r3, #3
 800ce04:	2b03      	cmp	r3, #3
 800ce06:	d017      	beq.n	800ce38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	2203      	movs	r2, #3
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	43db      	mvns	r3, r3
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	fa02 f303 	lsl.w	r3, r2, r3
 800ce2c:	69ba      	ldr	r2, [r7, #24]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	f003 0303 	and.w	r3, r3, #3
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	d123      	bne.n	800ce8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	08da      	lsrs	r2, r3, #3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3208      	adds	r2, #8
 800ce4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	f003 0307 	and.w	r3, r3, #7
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	220f      	movs	r2, #15
 800ce5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce60:	43db      	mvns	r3, r3
 800ce62:	69ba      	ldr	r2, [r7, #24]
 800ce64:	4013      	ands	r3, r2
 800ce66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	691a      	ldr	r2, [r3, #16]
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	f003 0307 	and.w	r3, r3, #7
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	fa02 f303 	lsl.w	r3, r2, r3
 800ce78:	69ba      	ldr	r2, [r7, #24]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	08da      	lsrs	r2, r3, #3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	3208      	adds	r2, #8
 800ce86:	69b9      	ldr	r1, [r7, #24]
 800ce88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	2203      	movs	r2, #3
 800ce98:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9c:	43db      	mvns	r3, r3
 800ce9e:	69ba      	ldr	r2, [r7, #24]
 800cea0:	4013      	ands	r3, r2
 800cea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	f003 0203 	and.w	r2, r3, #3
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb4:	69ba      	ldr	r2, [r7, #24]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 80be 	beq.w	800d04a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cece:	4b66      	ldr	r3, [pc, #408]	; (800d068 <HAL_GPIO_Init+0x324>)
 800ced0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced2:	4a65      	ldr	r2, [pc, #404]	; (800d068 <HAL_GPIO_Init+0x324>)
 800ced4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ced8:	6453      	str	r3, [r2, #68]	; 0x44
 800ceda:	4b63      	ldr	r3, [pc, #396]	; (800d068 <HAL_GPIO_Init+0x324>)
 800cedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800cee6:	4a61      	ldr	r2, [pc, #388]	; (800d06c <HAL_GPIO_Init+0x328>)
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	089b      	lsrs	r3, r3, #2
 800ceec:	3302      	adds	r3, #2
 800ceee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	f003 0303 	and.w	r3, r3, #3
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	220f      	movs	r2, #15
 800cefe:	fa02 f303 	lsl.w	r3, r2, r3
 800cf02:	43db      	mvns	r3, r3
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	4013      	ands	r3, r2
 800cf08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a58      	ldr	r2, [pc, #352]	; (800d070 <HAL_GPIO_Init+0x32c>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d037      	beq.n	800cf82 <HAL_GPIO_Init+0x23e>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a57      	ldr	r2, [pc, #348]	; (800d074 <HAL_GPIO_Init+0x330>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d031      	beq.n	800cf7e <HAL_GPIO_Init+0x23a>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a56      	ldr	r2, [pc, #344]	; (800d078 <HAL_GPIO_Init+0x334>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d02b      	beq.n	800cf7a <HAL_GPIO_Init+0x236>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4a55      	ldr	r2, [pc, #340]	; (800d07c <HAL_GPIO_Init+0x338>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d025      	beq.n	800cf76 <HAL_GPIO_Init+0x232>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a54      	ldr	r2, [pc, #336]	; (800d080 <HAL_GPIO_Init+0x33c>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d01f      	beq.n	800cf72 <HAL_GPIO_Init+0x22e>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a53      	ldr	r2, [pc, #332]	; (800d084 <HAL_GPIO_Init+0x340>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d019      	beq.n	800cf6e <HAL_GPIO_Init+0x22a>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a52      	ldr	r2, [pc, #328]	; (800d088 <HAL_GPIO_Init+0x344>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d013      	beq.n	800cf6a <HAL_GPIO_Init+0x226>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a51      	ldr	r2, [pc, #324]	; (800d08c <HAL_GPIO_Init+0x348>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d00d      	beq.n	800cf66 <HAL_GPIO_Init+0x222>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a50      	ldr	r2, [pc, #320]	; (800d090 <HAL_GPIO_Init+0x34c>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d007      	beq.n	800cf62 <HAL_GPIO_Init+0x21e>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a4f      	ldr	r2, [pc, #316]	; (800d094 <HAL_GPIO_Init+0x350>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d101      	bne.n	800cf5e <HAL_GPIO_Init+0x21a>
 800cf5a:	2309      	movs	r3, #9
 800cf5c:	e012      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf5e:	230a      	movs	r3, #10
 800cf60:	e010      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf62:	2308      	movs	r3, #8
 800cf64:	e00e      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf66:	2307      	movs	r3, #7
 800cf68:	e00c      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf6a:	2306      	movs	r3, #6
 800cf6c:	e00a      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf6e:	2305      	movs	r3, #5
 800cf70:	e008      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf72:	2304      	movs	r3, #4
 800cf74:	e006      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf76:	2303      	movs	r3, #3
 800cf78:	e004      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e002      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <HAL_GPIO_Init+0x240>
 800cf82:	2300      	movs	r3, #0
 800cf84:	69fa      	ldr	r2, [r7, #28]
 800cf86:	f002 0203 	and.w	r2, r2, #3
 800cf8a:	0092      	lsls	r2, r2, #2
 800cf8c:	4093      	lsls	r3, r2
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800cf94:	4935      	ldr	r1, [pc, #212]	; (800d06c <HAL_GPIO_Init+0x328>)
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	089b      	lsrs	r3, r3, #2
 800cf9a:	3302      	adds	r3, #2
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cfa2:	4b3d      	ldr	r3, [pc, #244]	; (800d098 <HAL_GPIO_Init+0x354>)
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	43db      	mvns	r3, r3
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	4013      	ands	r3, r2
 800cfb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d003      	beq.n	800cfc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cfc6:	4a34      	ldr	r2, [pc, #208]	; (800d098 <HAL_GPIO_Init+0x354>)
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cfcc:	4b32      	ldr	r3, [pc, #200]	; (800d098 <HAL_GPIO_Init+0x354>)
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	43db      	mvns	r3, r3
 800cfd6:	69ba      	ldr	r2, [r7, #24]
 800cfd8:	4013      	ands	r3, r2
 800cfda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d003      	beq.n	800cff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cff0:	4a29      	ldr	r2, [pc, #164]	; (800d098 <HAL_GPIO_Init+0x354>)
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cff6:	4b28      	ldr	r3, [pc, #160]	; (800d098 <HAL_GPIO_Init+0x354>)
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	43db      	mvns	r3, r3
 800d000:	69ba      	ldr	r2, [r7, #24]
 800d002:	4013      	ands	r3, r2
 800d004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	4313      	orrs	r3, r2
 800d018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d01a:	4a1f      	ldr	r2, [pc, #124]	; (800d098 <HAL_GPIO_Init+0x354>)
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d020:	4b1d      	ldr	r3, [pc, #116]	; (800d098 <HAL_GPIO_Init+0x354>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	43db      	mvns	r3, r3
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	4013      	ands	r3, r2
 800d02e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d03c:	69ba      	ldr	r2, [r7, #24]
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	4313      	orrs	r3, r2
 800d042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d044:	4a14      	ldr	r2, [pc, #80]	; (800d098 <HAL_GPIO_Init+0x354>)
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	3301      	adds	r3, #1
 800d04e:	61fb      	str	r3, [r7, #28]
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	2b0f      	cmp	r3, #15
 800d054:	f67f ae86 	bls.w	800cd64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d058:	bf00      	nop
 800d05a:	bf00      	nop
 800d05c:	3724      	adds	r7, #36	; 0x24
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	40023800 	.word	0x40023800
 800d06c:	40013800 	.word	0x40013800
 800d070:	40020000 	.word	0x40020000
 800d074:	40020400 	.word	0x40020400
 800d078:	40020800 	.word	0x40020800
 800d07c:	40020c00 	.word	0x40020c00
 800d080:	40021000 	.word	0x40021000
 800d084:	40021400 	.word	0x40021400
 800d088:	40021800 	.word	0x40021800
 800d08c:	40021c00 	.word	0x40021c00
 800d090:	40022000 	.word	0x40022000
 800d094:	40022400 	.word	0x40022400
 800d098:	40013c00 	.word	0x40013c00

0800d09c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	807b      	strh	r3, [r7, #2]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d0ac:	787b      	ldrb	r3, [r7, #1]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d0b2:	887a      	ldrh	r2, [r7, #2]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d0b8:	e003      	b.n	800d0c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d0ba:	887b      	ldrh	r3, [r7, #2]
 800d0bc:	041a      	lsls	r2, r3, #16
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	619a      	str	r2, [r3, #24]
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d0e0:	887a      	ldrh	r2, [r7, #2]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	041a      	lsls	r2, r3, #16
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	43d9      	mvns	r1, r3
 800d0ec:	887b      	ldrh	r3, [r7, #2]
 800d0ee:	400b      	ands	r3, r1
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	619a      	str	r2, [r3, #24]
}
 800d0f6:	bf00      	nop
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800d102:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d104:	b08f      	sub	sp, #60	; 0x3c
 800d106:	af0a      	add	r7, sp, #40	; 0x28
 800d108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e054      	b.n	800d1be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f011 fb8c 	bl	801e84c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2203      	movs	r2, #3
 800d138:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4618      	mov	r0, r3
 800d154:	f007 fc7b 	bl	8014a4e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	603b      	str	r3, [r7, #0]
 800d15e:	687e      	ldr	r6, [r7, #4]
 800d160:	466d      	mov	r5, sp
 800d162:	f106 0410 	add.w	r4, r6, #16
 800d166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d16a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d16c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d16e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d172:	e885 0003 	stmia.w	r5, {r0, r1}
 800d176:	1d33      	adds	r3, r6, #4
 800d178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d17a:	6838      	ldr	r0, [r7, #0]
 800d17c:	f007 fb5c 	bl	8014838 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2101      	movs	r1, #1
 800d186:	4618      	mov	r0, r3
 800d188:	f007 fc72 	bl	8014a70 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	603b      	str	r3, [r7, #0]
 800d192:	687e      	ldr	r6, [r7, #4]
 800d194:	466d      	mov	r5, sp
 800d196:	f106 0410 	add.w	r4, r6, #16
 800d19a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d19c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d19e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d1a6:	e885 0003 	stmia.w	r5, {r0, r1}
 800d1aa:	1d33      	adds	r3, r6, #4
 800d1ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1ae:	6838      	ldr	r0, [r7, #0]
 800d1b0:	f008 ffae 	bl	8016110 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1c6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d1c6:	b590      	push	{r4, r7, lr}
 800d1c8:	b089      	sub	sp, #36	; 0x24
 800d1ca:	af04      	add	r7, sp, #16
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	70fb      	strb	r3, [r7, #3]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	70bb      	strb	r3, [r7, #2]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d101      	bne.n	800d1ee <HAL_HCD_HC_Init+0x28>
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	e076      	b.n	800d2dc <HAL_HCD_HC_Init+0x116>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800d1f6:	78fb      	ldrb	r3, [r7, #3]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	212c      	movs	r1, #44	; 0x2c
 800d1fc:	fb01 f303 	mul.w	r3, r1, r3
 800d200:	4413      	add	r3, r2
 800d202:	333d      	adds	r3, #61	; 0x3d
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800d208:	78fb      	ldrb	r3, [r7, #3]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	212c      	movs	r1, #44	; 0x2c
 800d20e:	fb01 f303 	mul.w	r3, r1, r3
 800d212:	4413      	add	r3, r2
 800d214:	3338      	adds	r3, #56	; 0x38
 800d216:	787a      	ldrb	r2, [r7, #1]
 800d218:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800d21a:	78fb      	ldrb	r3, [r7, #3]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	212c      	movs	r1, #44	; 0x2c
 800d220:	fb01 f303 	mul.w	r3, r1, r3
 800d224:	4413      	add	r3, r2
 800d226:	3340      	adds	r3, #64	; 0x40
 800d228:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d22a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800d22c:	78fb      	ldrb	r3, [r7, #3]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	212c      	movs	r1, #44	; 0x2c
 800d232:	fb01 f303 	mul.w	r3, r1, r3
 800d236:	4413      	add	r3, r2
 800d238:	3339      	adds	r3, #57	; 0x39
 800d23a:	78fa      	ldrb	r2, [r7, #3]
 800d23c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800d23e:	78fb      	ldrb	r3, [r7, #3]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	212c      	movs	r1, #44	; 0x2c
 800d244:	fb01 f303 	mul.w	r3, r1, r3
 800d248:	4413      	add	r3, r2
 800d24a:	333f      	adds	r3, #63	; 0x3f
 800d24c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d250:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800d252:	78fb      	ldrb	r3, [r7, #3]
 800d254:	78ba      	ldrb	r2, [r7, #2]
 800d256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d25a:	b2d0      	uxtb	r0, r2
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	212c      	movs	r1, #44	; 0x2c
 800d260:	fb01 f303 	mul.w	r3, r1, r3
 800d264:	4413      	add	r3, r2
 800d266:	333a      	adds	r3, #58	; 0x3a
 800d268:	4602      	mov	r2, r0
 800d26a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800d26c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d270:	2b00      	cmp	r3, #0
 800d272:	da09      	bge.n	800d288 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	212c      	movs	r1, #44	; 0x2c
 800d27a:	fb01 f303 	mul.w	r3, r1, r3
 800d27e:	4413      	add	r3, r2
 800d280:	333b      	adds	r3, #59	; 0x3b
 800d282:	2201      	movs	r2, #1
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e008      	b.n	800d29a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800d288:	78fb      	ldrb	r3, [r7, #3]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	212c      	movs	r1, #44	; 0x2c
 800d28e:	fb01 f303 	mul.w	r3, r1, r3
 800d292:	4413      	add	r3, r2
 800d294:	333b      	adds	r3, #59	; 0x3b
 800d296:	2200      	movs	r2, #0
 800d298:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800d29a:	78fb      	ldrb	r3, [r7, #3]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	212c      	movs	r1, #44	; 0x2c
 800d2a0:	fb01 f303 	mul.w	r3, r1, r3
 800d2a4:	4413      	add	r3, r2
 800d2a6:	333c      	adds	r3, #60	; 0x3c
 800d2a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d2ac:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	787c      	ldrb	r4, [r7, #1]
 800d2b4:	78ba      	ldrb	r2, [r7, #2]
 800d2b6:	78f9      	ldrb	r1, [r7, #3]
 800d2b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2ba:	9302      	str	r3, [sp, #8]
 800d2bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2c0:	9301      	str	r3, [sp, #4]
 800d2c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	4623      	mov	r3, r4
 800d2ca:	f009 f89b 	bl	8016404 <USB_HC_Init>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3714      	adds	r7, #20
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd90      	pop	{r4, r7, pc}

0800d2e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d101      	bne.n	800d302 <HAL_HCD_HC_Halt+0x1e>
 800d2fe:	2302      	movs	r3, #2
 800d300:	e00f      	b.n	800d322 <HAL_HCD_HC_Halt+0x3e>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	78fa      	ldrb	r2, [r7, #3]
 800d310:	4611      	mov	r1, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f009 faeb 	bl	80168ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800d320:	7bfb      	ldrb	r3, [r7, #15]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
	...

0800d32c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	4608      	mov	r0, r1
 800d336:	4611      	mov	r1, r2
 800d338:	461a      	mov	r2, r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	70fb      	strb	r3, [r7, #3]
 800d33e:	460b      	mov	r3, r1
 800d340:	70bb      	strb	r3, [r7, #2]
 800d342:	4613      	mov	r3, r2
 800d344:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800d346:	78fb      	ldrb	r3, [r7, #3]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	212c      	movs	r1, #44	; 0x2c
 800d34c:	fb01 f303 	mul.w	r3, r1, r3
 800d350:	4413      	add	r3, r2
 800d352:	333b      	adds	r3, #59	; 0x3b
 800d354:	78ba      	ldrb	r2, [r7, #2]
 800d356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800d358:	78fb      	ldrb	r3, [r7, #3]
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	212c      	movs	r1, #44	; 0x2c
 800d35e:	fb01 f303 	mul.w	r3, r1, r3
 800d362:	4413      	add	r3, r2
 800d364:	333f      	adds	r3, #63	; 0x3f
 800d366:	787a      	ldrb	r2, [r7, #1]
 800d368:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800d36a:	7c3b      	ldrb	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d112      	bne.n	800d396 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	212c      	movs	r1, #44	; 0x2c
 800d376:	fb01 f303 	mul.w	r3, r1, r3
 800d37a:	4413      	add	r3, r2
 800d37c:	3342      	adds	r3, #66	; 0x42
 800d37e:	2203      	movs	r2, #3
 800d380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800d382:	78fb      	ldrb	r3, [r7, #3]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	212c      	movs	r1, #44	; 0x2c
 800d388:	fb01 f303 	mul.w	r3, r1, r3
 800d38c:	4413      	add	r3, r2
 800d38e:	333d      	adds	r3, #61	; 0x3d
 800d390:	7f3a      	ldrb	r2, [r7, #28]
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	e008      	b.n	800d3a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800d396:	78fb      	ldrb	r3, [r7, #3]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	212c      	movs	r1, #44	; 0x2c
 800d39c:	fb01 f303 	mul.w	r3, r1, r3
 800d3a0:	4413      	add	r3, r2
 800d3a2:	3342      	adds	r3, #66	; 0x42
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800d3a8:	787b      	ldrb	r3, [r7, #1]
 800d3aa:	2b03      	cmp	r3, #3
 800d3ac:	f200 80c6 	bhi.w	800d53c <HAL_HCD_HC_SubmitRequest+0x210>
 800d3b0:	a201      	add	r2, pc, #4	; (adr r2, 800d3b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800d3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b6:	bf00      	nop
 800d3b8:	0800d3c9 	.word	0x0800d3c9
 800d3bc:	0800d529 	.word	0x0800d529
 800d3c0:	0800d42d 	.word	0x0800d42d
 800d3c4:	0800d4ab 	.word	0x0800d4ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800d3c8:	7c3b      	ldrb	r3, [r7, #16]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	f040 80b8 	bne.w	800d540 <HAL_HCD_HC_SubmitRequest+0x214>
 800d3d0:	78bb      	ldrb	r3, [r7, #2]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f040 80b4 	bne.w	800d540 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800d3d8:	8b3b      	ldrh	r3, [r7, #24]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d108      	bne.n	800d3f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	212c      	movs	r1, #44	; 0x2c
 800d3e4:	fb01 f303 	mul.w	r3, r1, r3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	3355      	adds	r3, #85	; 0x55
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	212c      	movs	r1, #44	; 0x2c
 800d3f6:	fb01 f303 	mul.w	r3, r1, r3
 800d3fa:	4413      	add	r3, r2
 800d3fc:	3355      	adds	r3, #85	; 0x55
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d109      	bne.n	800d418 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	212c      	movs	r1, #44	; 0x2c
 800d40a:	fb01 f303 	mul.w	r3, r1, r3
 800d40e:	4413      	add	r3, r2
 800d410:	3342      	adds	r3, #66	; 0x42
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800d416:	e093      	b.n	800d540 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800d418:	78fb      	ldrb	r3, [r7, #3]
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	212c      	movs	r1, #44	; 0x2c
 800d41e:	fb01 f303 	mul.w	r3, r1, r3
 800d422:	4413      	add	r3, r2
 800d424:	3342      	adds	r3, #66	; 0x42
 800d426:	2202      	movs	r2, #2
 800d428:	701a      	strb	r2, [r3, #0]
      break;
 800d42a:	e089      	b.n	800d540 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800d42c:	78bb      	ldrb	r3, [r7, #2]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d11d      	bne.n	800d46e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800d432:	78fb      	ldrb	r3, [r7, #3]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	212c      	movs	r1, #44	; 0x2c
 800d438:	fb01 f303 	mul.w	r3, r1, r3
 800d43c:	4413      	add	r3, r2
 800d43e:	3355      	adds	r3, #85	; 0x55
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d109      	bne.n	800d45a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800d446:	78fb      	ldrb	r3, [r7, #3]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	212c      	movs	r1, #44	; 0x2c
 800d44c:	fb01 f303 	mul.w	r3, r1, r3
 800d450:	4413      	add	r3, r2
 800d452:	3342      	adds	r3, #66	; 0x42
 800d454:	2200      	movs	r2, #0
 800d456:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800d458:	e073      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800d45a:	78fb      	ldrb	r3, [r7, #3]
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	212c      	movs	r1, #44	; 0x2c
 800d460:	fb01 f303 	mul.w	r3, r1, r3
 800d464:	4413      	add	r3, r2
 800d466:	3342      	adds	r3, #66	; 0x42
 800d468:	2202      	movs	r2, #2
 800d46a:	701a      	strb	r2, [r3, #0]
      break;
 800d46c:	e069      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800d46e:	78fb      	ldrb	r3, [r7, #3]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	212c      	movs	r1, #44	; 0x2c
 800d474:	fb01 f303 	mul.w	r3, r1, r3
 800d478:	4413      	add	r3, r2
 800d47a:	3354      	adds	r3, #84	; 0x54
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d109      	bne.n	800d496 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800d482:	78fb      	ldrb	r3, [r7, #3]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	212c      	movs	r1, #44	; 0x2c
 800d488:	fb01 f303 	mul.w	r3, r1, r3
 800d48c:	4413      	add	r3, r2
 800d48e:	3342      	adds	r3, #66	; 0x42
 800d490:	2200      	movs	r2, #0
 800d492:	701a      	strb	r2, [r3, #0]
      break;
 800d494:	e055      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800d496:	78fb      	ldrb	r3, [r7, #3]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	212c      	movs	r1, #44	; 0x2c
 800d49c:	fb01 f303 	mul.w	r3, r1, r3
 800d4a0:	4413      	add	r3, r2
 800d4a2:	3342      	adds	r3, #66	; 0x42
 800d4a4:	2202      	movs	r2, #2
 800d4a6:	701a      	strb	r2, [r3, #0]
      break;
 800d4a8:	e04b      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800d4aa:	78bb      	ldrb	r3, [r7, #2]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d11d      	bne.n	800d4ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	212c      	movs	r1, #44	; 0x2c
 800d4b6:	fb01 f303 	mul.w	r3, r1, r3
 800d4ba:	4413      	add	r3, r2
 800d4bc:	3355      	adds	r3, #85	; 0x55
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d109      	bne.n	800d4d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800d4c4:	78fb      	ldrb	r3, [r7, #3]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	212c      	movs	r1, #44	; 0x2c
 800d4ca:	fb01 f303 	mul.w	r3, r1, r3
 800d4ce:	4413      	add	r3, r2
 800d4d0:	3342      	adds	r3, #66	; 0x42
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800d4d6:	e034      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800d4d8:	78fb      	ldrb	r3, [r7, #3]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	212c      	movs	r1, #44	; 0x2c
 800d4de:	fb01 f303 	mul.w	r3, r1, r3
 800d4e2:	4413      	add	r3, r2
 800d4e4:	3342      	adds	r3, #66	; 0x42
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	701a      	strb	r2, [r3, #0]
      break;
 800d4ea:	e02a      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	212c      	movs	r1, #44	; 0x2c
 800d4f2:	fb01 f303 	mul.w	r3, r1, r3
 800d4f6:	4413      	add	r3, r2
 800d4f8:	3354      	adds	r3, #84	; 0x54
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d109      	bne.n	800d514 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	212c      	movs	r1, #44	; 0x2c
 800d506:	fb01 f303 	mul.w	r3, r1, r3
 800d50a:	4413      	add	r3, r2
 800d50c:	3342      	adds	r3, #66	; 0x42
 800d50e:	2200      	movs	r2, #0
 800d510:	701a      	strb	r2, [r3, #0]
      break;
 800d512:	e016      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800d514:	78fb      	ldrb	r3, [r7, #3]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	212c      	movs	r1, #44	; 0x2c
 800d51a:	fb01 f303 	mul.w	r3, r1, r3
 800d51e:	4413      	add	r3, r2
 800d520:	3342      	adds	r3, #66	; 0x42
 800d522:	2202      	movs	r2, #2
 800d524:	701a      	strb	r2, [r3, #0]
      break;
 800d526:	e00c      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800d528:	78fb      	ldrb	r3, [r7, #3]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	212c      	movs	r1, #44	; 0x2c
 800d52e:	fb01 f303 	mul.w	r3, r1, r3
 800d532:	4413      	add	r3, r2
 800d534:	3342      	adds	r3, #66	; 0x42
 800d536:	2200      	movs	r2, #0
 800d538:	701a      	strb	r2, [r3, #0]
      break;
 800d53a:	e002      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800d53c:	bf00      	nop
 800d53e:	e000      	b.n	800d542 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800d540:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800d542:	78fb      	ldrb	r3, [r7, #3]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	212c      	movs	r1, #44	; 0x2c
 800d548:	fb01 f303 	mul.w	r3, r1, r3
 800d54c:	4413      	add	r3, r2
 800d54e:	3344      	adds	r3, #68	; 0x44
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800d554:	78fb      	ldrb	r3, [r7, #3]
 800d556:	8b3a      	ldrh	r2, [r7, #24]
 800d558:	6879      	ldr	r1, [r7, #4]
 800d55a:	202c      	movs	r0, #44	; 0x2c
 800d55c:	fb00 f303 	mul.w	r3, r0, r3
 800d560:	440b      	add	r3, r1
 800d562:	334c      	adds	r3, #76	; 0x4c
 800d564:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800d566:	78fb      	ldrb	r3, [r7, #3]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	212c      	movs	r1, #44	; 0x2c
 800d56c:	fb01 f303 	mul.w	r3, r1, r3
 800d570:	4413      	add	r3, r2
 800d572:	3360      	adds	r3, #96	; 0x60
 800d574:	2200      	movs	r2, #0
 800d576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800d578:	78fb      	ldrb	r3, [r7, #3]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	212c      	movs	r1, #44	; 0x2c
 800d57e:	fb01 f303 	mul.w	r3, r1, r3
 800d582:	4413      	add	r3, r2
 800d584:	3350      	adds	r3, #80	; 0x50
 800d586:	2200      	movs	r2, #0
 800d588:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	212c      	movs	r1, #44	; 0x2c
 800d590:	fb01 f303 	mul.w	r3, r1, r3
 800d594:	4413      	add	r3, r2
 800d596:	3339      	adds	r3, #57	; 0x39
 800d598:	78fa      	ldrb	r2, [r7, #3]
 800d59a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800d59c:	78fb      	ldrb	r3, [r7, #3]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	212c      	movs	r1, #44	; 0x2c
 800d5a2:	fb01 f303 	mul.w	r3, r1, r3
 800d5a6:	4413      	add	r3, r2
 800d5a8:	3361      	adds	r3, #97	; 0x61
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6818      	ldr	r0, [r3, #0]
 800d5b2:	78fb      	ldrb	r3, [r7, #3]
 800d5b4:	222c      	movs	r2, #44	; 0x2c
 800d5b6:	fb02 f303 	mul.w	r3, r2, r3
 800d5ba:	3338      	adds	r3, #56	; 0x38
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	18d1      	adds	r1, r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f009 f83e 	bl	8016648 <USB_HC_StartXfer>
 800d5cc:	4603      	mov	r3, r0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop

0800d5d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f008 fcca 	bl	8015f88 <USB_GetMode>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	f040 80f6 	bne.w	800d7e8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4618      	mov	r0, r3
 800d602:	f008 fc0d 	bl	8015e20 <USB_ReadInterrupts>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 80ec 	beq.w	800d7e6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4618      	mov	r0, r3
 800d614:	f008 fc04 	bl	8015e20 <USB_ReadInterrupts>
 800d618:	4603      	mov	r3, r0
 800d61a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d61e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d622:	d104      	bne.n	800d62e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d62c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4618      	mov	r0, r3
 800d634:	f008 fbf4 	bl	8015e20 <USB_ReadInterrupts>
 800d638:	4603      	mov	r3, r0
 800d63a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d642:	d104      	bne.n	800d64e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d64c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4618      	mov	r0, r3
 800d654:	f008 fbe4 	bl	8015e20 <USB_ReadInterrupts>
 800d658:	4603      	mov	r3, r0
 800d65a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d65e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d662:	d104      	bne.n	800d66e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d66c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	f008 fbd4 	bl	8015e20 <USB_ReadInterrupts>
 800d678:	4603      	mov	r3, r0
 800d67a:	f003 0302 	and.w	r3, r3, #2
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d103      	bne.n	800d68a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2202      	movs	r2, #2
 800d688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4618      	mov	r0, r3
 800d690:	f008 fbc6 	bl	8015e20 <USB_ReadInterrupts>
 800d694:	4603      	mov	r3, r0
 800d696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d69a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d69e:	d11c      	bne.n	800d6da <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d6a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10f      	bne.n	800d6da <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800d6ba:	2110      	movs	r1, #16
 800d6bc:	6938      	ldr	r0, [r7, #16]
 800d6be:	f007 fb81 	bl	8014dc4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800d6c2:	6938      	ldr	r0, [r7, #16]
 800d6c4:	f007 fbb2 	bl	8014e2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f008 fdd2 	bl	8016278 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f011 f947 	bl	801e968 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f008 fb9e 	bl	8015e20 <USB_ReadInterrupts>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d6ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6ee:	d102      	bne.n	800d6f6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f001 f9ce 	bl	800ea92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f008 fb90 	bl	8015e20 <USB_ReadInterrupts>
 800d700:	4603      	mov	r3, r0
 800d702:	f003 0308 	and.w	r3, r3, #8
 800d706:	2b08      	cmp	r3, #8
 800d708:	d106      	bne.n	800d718 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f011 f910 	bl	801e930 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2208      	movs	r2, #8
 800d716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f008 fb7f 	bl	8015e20 <USB_ReadInterrupts>
 800d722:	4603      	mov	r3, r0
 800d724:	f003 0310 	and.w	r3, r3, #16
 800d728:	2b10      	cmp	r3, #16
 800d72a:	d101      	bne.n	800d730 <HAL_HCD_IRQHandler+0x158>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e000      	b.n	800d732 <HAL_HCD_IRQHandler+0x15a>
 800d730:	2300      	movs	r3, #0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d012      	beq.n	800d75c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	699a      	ldr	r2, [r3, #24]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f022 0210 	bic.w	r2, r2, #16
 800d744:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 f8d1 	bl	800e8ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	699a      	ldr	r2, [r3, #24]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f042 0210 	orr.w	r2, r2, #16
 800d75a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f008 fb5d 	bl	8015e20 <USB_ReadInterrupts>
 800d766:	4603      	mov	r3, r0
 800d768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d76c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d770:	d13a      	bne.n	800d7e8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4618      	mov	r0, r3
 800d778:	f009 f8a8 	bl	80168cc <USB_HC_ReadInterrupt>
 800d77c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
 800d782:	e025      	b.n	800d7d0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	f003 030f 	and.w	r3, r3, #15
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	fa22 f303 	lsr.w	r3, r2, r3
 800d790:	f003 0301 	and.w	r3, r3, #1
 800d794:	2b00      	cmp	r3, #0
 800d796:	d018      	beq.n	800d7ca <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	015a      	lsls	r2, r3, #5
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4413      	add	r3, r2
 800d7a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7ae:	d106      	bne.n	800d7be <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f8ab 	bl	800d912 <HCD_HC_IN_IRQHandler>
 800d7bc:	e005      	b.n	800d7ca <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fcc6 	bl	800e156 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	617b      	str	r3, [r7, #20]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d3d4      	bcc.n	800d784 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d7e2:	615a      	str	r2, [r3, #20]
 800d7e4:	e000      	b.n	800d7e8 <HAL_HCD_IRQHandler+0x210>
      return;
 800d7e6:	bf00      	nop
    }
  }
}
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d101      	bne.n	800d804 <HAL_HCD_Start+0x16>
 800d800:	2302      	movs	r3, #2
 800d802:	e013      	b.n	800d82c <HAL_HCD_Start+0x3e>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2101      	movs	r1, #1
 800d812:	4618      	mov	r0, r3
 800d814:	f008 fd94 	bl	8016340 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f007 f905 	bl	8014a2c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800d842:	2b01      	cmp	r3, #1
 800d844:	d101      	bne.n	800d84a <HAL_HCD_Stop+0x16>
 800d846:	2302      	movs	r3, #2
 800d848:	e00d      	b.n	800d866 <HAL_HCD_Stop+0x32>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f009 f982 	bl	8016b60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f008 fd36 	bl	80162ec <USB_ResetPort>
 800d880:	4603      	mov	r3, r0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d88a:	b480      	push	{r7}
 800d88c:	b083      	sub	sp, #12
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	460b      	mov	r3, r1
 800d894:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800d896:	78fb      	ldrb	r3, [r7, #3]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	212c      	movs	r1, #44	; 0x2c
 800d89c:	fb01 f303 	mul.w	r3, r1, r3
 800d8a0:	4413      	add	r3, r2
 800d8a2:	3360      	adds	r3, #96	; 0x60
 800d8a4:	781b      	ldrb	r3, [r3, #0]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b083      	sub	sp, #12
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800d8be:	78fb      	ldrb	r3, [r7, #3]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	212c      	movs	r1, #44	; 0x2c
 800d8c4:	fb01 f303 	mul.w	r3, r1, r3
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3350      	adds	r3, #80	; 0x50
 800d8cc:	681b      	ldr	r3, [r3, #0]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f008 fd7a 	bl	80163e0 <USB_GetCurrentFrame>
 800d8ec:	4603      	mov	r3, r0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	f008 fd55 	bl	80163b2 <USB_GetHostSpeed>
 800d908:	4603      	mov	r3, r0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b086      	sub	sp, #24
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800d928:	78fb      	ldrb	r3, [r7, #3]
 800d92a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	b2d2      	uxtb	r2, r2
 800d934:	4611      	mov	r1, r2
 800d936:	4618      	mov	r0, r3
 800d938:	f008 fa85 	bl	8015e46 <USB_ReadChInterrupts>
 800d93c:	4603      	mov	r3, r0
 800d93e:	f003 0304 	and.w	r3, r3, #4
 800d942:	2b04      	cmp	r3, #4
 800d944:	d11a      	bne.n	800d97c <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	015a      	lsls	r2, r3, #5
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	4413      	add	r3, r2
 800d94e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d952:	461a      	mov	r2, r3
 800d954:	2304      	movs	r3, #4
 800d956:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	212c      	movs	r1, #44	; 0x2c
 800d95e:	fb01 f303 	mul.w	r3, r1, r3
 800d962:	4413      	add	r3, r2
 800d964:	3361      	adds	r3, #97	; 0x61
 800d966:	2207      	movs	r2, #7
 800d968:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	b2d2      	uxtb	r2, r2
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f008 ffba 	bl	80168ee <USB_HC_Halt>
 800d97a:	e0a2      	b.n	800dac2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	4611      	mov	r1, r2
 800d986:	4618      	mov	r0, r3
 800d988:	f008 fa5d 	bl	8015e46 <USB_ReadChInterrupts>
 800d98c:	4603      	mov	r3, r0
 800d98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d996:	d11b      	bne.n	800d9d0 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	212c      	movs	r1, #44	; 0x2c
 800d9b2:	fb01 f303 	mul.w	r3, r1, r3
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3361      	adds	r3, #97	; 0x61
 800d9ba:	2208      	movs	r2, #8
 800d9bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	b2d2      	uxtb	r2, r2
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f008 ff90 	bl	80168ee <USB_HC_Halt>
 800d9ce:	e078      	b.n	800dac2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	b2d2      	uxtb	r2, r2
 800d9d8:	4611      	mov	r1, r2
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f008 fa33 	bl	8015e46 <USB_ReadChInterrupts>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	f003 0308 	and.w	r3, r3, #8
 800d9e6:	2b08      	cmp	r3, #8
 800d9e8:	d11a      	bne.n	800da20 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	015a      	lsls	r2, r3, #5
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	2308      	movs	r3, #8
 800d9fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	212c      	movs	r1, #44	; 0x2c
 800da02:	fb01 f303 	mul.w	r3, r1, r3
 800da06:	4413      	add	r3, r2
 800da08:	3361      	adds	r3, #97	; 0x61
 800da0a:	2206      	movs	r2, #6
 800da0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	b2d2      	uxtb	r2, r2
 800da16:	4611      	mov	r1, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f008 ff68 	bl	80168ee <USB_HC_Halt>
 800da1e:	e050      	b.n	800dac2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	b2d2      	uxtb	r2, r2
 800da28:	4611      	mov	r1, r2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f008 fa0b 	bl	8015e46 <USB_ReadChInterrupts>
 800da30:	4603      	mov	r3, r0
 800da32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da3a:	d11b      	bne.n	800da74 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	015a      	lsls	r2, r3, #5
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	4413      	add	r3, r2
 800da44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da48:	461a      	mov	r2, r3
 800da4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	212c      	movs	r1, #44	; 0x2c
 800da56:	fb01 f303 	mul.w	r3, r1, r3
 800da5a:	4413      	add	r3, r2
 800da5c:	3361      	adds	r3, #97	; 0x61
 800da5e:	2209      	movs	r2, #9
 800da60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	b2d2      	uxtb	r2, r2
 800da6a:	4611      	mov	r1, r2
 800da6c:	4618      	mov	r0, r3
 800da6e:	f008 ff3e 	bl	80168ee <USB_HC_Halt>
 800da72:	e026      	b.n	800dac2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	b2d2      	uxtb	r2, r2
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f008 f9e1 	bl	8015e46 <USB_ReadChInterrupts>
 800da84:	4603      	mov	r3, r0
 800da86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da8a:	2b80      	cmp	r3, #128	; 0x80
 800da8c:	d119      	bne.n	800dac2 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	015a      	lsls	r2, r3, #5
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	4413      	add	r3, r2
 800da96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da9a:	461a      	mov	r2, r3
 800da9c:	2380      	movs	r3, #128	; 0x80
 800da9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	212c      	movs	r1, #44	; 0x2c
 800daa6:	fb01 f303 	mul.w	r3, r1, r3
 800daaa:	4413      	add	r3, r2
 800daac:	3361      	adds	r3, #97	; 0x61
 800daae:	2207      	movs	r2, #7
 800dab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	b2d2      	uxtb	r2, r2
 800daba:	4611      	mov	r1, r2
 800dabc:	4618      	mov	r0, r3
 800dabe:	f008 ff16 	bl	80168ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	b2d2      	uxtb	r2, r2
 800daca:	4611      	mov	r1, r2
 800dacc:	4618      	mov	r0, r3
 800dace:	f008 f9ba 	bl	8015e46 <USB_ReadChInterrupts>
 800dad2:	4603      	mov	r3, r0
 800dad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dadc:	d112      	bne.n	800db04 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	b2d2      	uxtb	r2, r2
 800dae6:	4611      	mov	r1, r2
 800dae8:	4618      	mov	r0, r3
 800daea:	f008 ff00 	bl	80168ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dafa:	461a      	mov	r2, r3
 800dafc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db00:	6093      	str	r3, [r2, #8]
 800db02:	e325      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f008 f999 	bl	8015e46 <USB_ReadChInterrupts>
 800db14:	4603      	mov	r3, r0
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	f040 80e8 	bne.w	800dcf0 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	015a      	lsls	r2, r3, #5
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	4413      	add	r3, r2
 800db28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db2c:	461a      	mov	r2, r3
 800db2e:	2320      	movs	r3, #32
 800db30:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d019      	beq.n	800db6e <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	212c      	movs	r1, #44	; 0x2c
 800db40:	fb01 f303 	mul.w	r3, r1, r3
 800db44:	4413      	add	r3, r2
 800db46:	3348      	adds	r3, #72	; 0x48
 800db48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	0159      	lsls	r1, r3, #5
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	440b      	add	r3, r1
 800db52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800db5c:	1ad2      	subs	r2, r2, r3
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	202c      	movs	r0, #44	; 0x2c
 800db64:	fb00 f303 	mul.w	r3, r0, r3
 800db68:	440b      	add	r3, r1
 800db6a:	3350      	adds	r3, #80	; 0x50
 800db6c:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	212c      	movs	r1, #44	; 0x2c
 800db74:	fb01 f303 	mul.w	r3, r1, r3
 800db78:	4413      	add	r3, r2
 800db7a:	3361      	adds	r3, #97	; 0x61
 800db7c:	2201      	movs	r2, #1
 800db7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	212c      	movs	r1, #44	; 0x2c
 800db86:	fb01 f303 	mul.w	r3, r1, r3
 800db8a:	4413      	add	r3, r2
 800db8c:	335c      	adds	r3, #92	; 0x5c
 800db8e:	2200      	movs	r2, #0
 800db90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	015a      	lsls	r2, r3, #5
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	4413      	add	r3, r2
 800db9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db9e:	461a      	mov	r2, r3
 800dba0:	2301      	movs	r3, #1
 800dba2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	212c      	movs	r1, #44	; 0x2c
 800dbaa:	fb01 f303 	mul.w	r3, r1, r3
 800dbae:	4413      	add	r3, r2
 800dbb0:	333f      	adds	r3, #63	; 0x3f
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d009      	beq.n	800dbcc <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	212c      	movs	r1, #44	; 0x2c
 800dbbe:	fb01 f303 	mul.w	r3, r1, r3
 800dbc2:	4413      	add	r3, r2
 800dbc4:	333f      	adds	r3, #63	; 0x3f
 800dbc6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d111      	bne.n	800dbf0 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	b2d2      	uxtb	r2, r2
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f008 fe89 	bl	80168ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	015a      	lsls	r2, r3, #5
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbe8:	461a      	mov	r2, r3
 800dbea:	2310      	movs	r3, #16
 800dbec:	6093      	str	r3, [r2, #8]
 800dbee:	e03a      	b.n	800dc66 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	212c      	movs	r1, #44	; 0x2c
 800dbf6:	fb01 f303 	mul.w	r3, r1, r3
 800dbfa:	4413      	add	r3, r2
 800dbfc:	333f      	adds	r3, #63	; 0x3f
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b03      	cmp	r3, #3
 800dc02:	d009      	beq.n	800dc18 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	212c      	movs	r1, #44	; 0x2c
 800dc0a:	fb01 f303 	mul.w	r3, r1, r3
 800dc0e:	4413      	add	r3, r2
 800dc10:	333f      	adds	r3, #63	; 0x3f
 800dc12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d126      	bne.n	800dc66 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	015a      	lsls	r2, r3, #5
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	4413      	add	r3, r2
 800dc20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	0151      	lsls	r1, r2, #5
 800dc2a:	693a      	ldr	r2, [r7, #16]
 800dc2c:	440a      	add	r2, r1
 800dc2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc36:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	212c      	movs	r1, #44	; 0x2c
 800dc3e:	fb01 f303 	mul.w	r3, r1, r3
 800dc42:	4413      	add	r3, r2
 800dc44:	3360      	adds	r3, #96	; 0x60
 800dc46:	2201      	movs	r2, #1
 800dc48:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	b2d9      	uxtb	r1, r3
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	202c      	movs	r0, #44	; 0x2c
 800dc54:	fb00 f303 	mul.w	r3, r0, r3
 800dc58:	4413      	add	r3, r2
 800dc5a:	3360      	adds	r3, #96	; 0x60
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f010 fe8f 	bl	801e984 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d12b      	bne.n	800dcc6 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	212c      	movs	r1, #44	; 0x2c
 800dc74:	fb01 f303 	mul.w	r3, r1, r3
 800dc78:	4413      	add	r3, r2
 800dc7a:	3348      	adds	r3, #72	; 0x48
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6879      	ldr	r1, [r7, #4]
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	202c      	movs	r0, #44	; 0x2c
 800dc84:	fb00 f202 	mul.w	r2, r0, r2
 800dc88:	440a      	add	r2, r1
 800dc8a:	3240      	adds	r2, #64	; 0x40
 800dc8c:	8812      	ldrh	r2, [r2, #0]
 800dc8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f000 825a 	beq.w	800e150 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	212c      	movs	r1, #44	; 0x2c
 800dca2:	fb01 f303 	mul.w	r3, r1, r3
 800dca6:	4413      	add	r3, r2
 800dca8:	3354      	adds	r3, #84	; 0x54
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	f083 0301 	eor.w	r3, r3, #1
 800dcb0:	b2d8      	uxtb	r0, r3
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	212c      	movs	r1, #44	; 0x2c
 800dcb8:	fb01 f303 	mul.w	r3, r1, r3
 800dcbc:	4413      	add	r3, r2
 800dcbe:	3354      	adds	r3, #84	; 0x54
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	e244      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	212c      	movs	r1, #44	; 0x2c
 800dccc:	fb01 f303 	mul.w	r3, r1, r3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	3354      	adds	r3, #84	; 0x54
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	f083 0301 	eor.w	r3, r3, #1
 800dcda:	b2d8      	uxtb	r0, r3
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	212c      	movs	r1, #44	; 0x2c
 800dce2:	fb01 f303 	mul.w	r3, r1, r3
 800dce6:	4413      	add	r3, r2
 800dce8:	3354      	adds	r3, #84	; 0x54
 800dcea:	4602      	mov	r2, r0
 800dcec:	701a      	strb	r2, [r3, #0]
 800dcee:	e22f      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	4611      	mov	r1, r2
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f008 f8a3 	bl	8015e46 <USB_ReadChInterrupts>
 800dd00:	4603      	mov	r3, r0
 800dd02:	f003 0320 	and.w	r3, r3, #32
 800dd06:	2b20      	cmp	r3, #32
 800dd08:	d109      	bne.n	800dd1e <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd16:	461a      	mov	r2, r3
 800dd18:	2320      	movs	r3, #32
 800dd1a:	6093      	str	r3, [r2, #8]
 800dd1c:	e218      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	b2d2      	uxtb	r2, r2
 800dd26:	4611      	mov	r1, r2
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f008 f88c 	bl	8015e46 <USB_ReadChInterrupts>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	f003 0302 	and.w	r3, r3, #2
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	f040 816b 	bne.w	800e010 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	015a      	lsls	r2, r3, #5
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	4413      	add	r3, r2
 800dd42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd46:	461a      	mov	r2, r3
 800dd48:	2302      	movs	r3, #2
 800dd4a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	212c      	movs	r1, #44	; 0x2c
 800dd52:	fb01 f303 	mul.w	r3, r1, r3
 800dd56:	4413      	add	r3, r2
 800dd58:	3361      	adds	r3, #97	; 0x61
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d112      	bne.n	800dd86 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	212c      	movs	r1, #44	; 0x2c
 800dd66:	fb01 f303 	mul.w	r3, r1, r3
 800dd6a:	4413      	add	r3, r2
 800dd6c:	3361      	adds	r3, #97	; 0x61
 800dd6e:	2202      	movs	r2, #2
 800dd70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	212c      	movs	r1, #44	; 0x2c
 800dd78:	fb01 f303 	mul.w	r3, r1, r3
 800dd7c:	4413      	add	r3, r2
 800dd7e:	3360      	adds	r3, #96	; 0x60
 800dd80:	2201      	movs	r2, #1
 800dd82:	701a      	strb	r2, [r3, #0]
 800dd84:	e135      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	212c      	movs	r1, #44	; 0x2c
 800dd8c:	fb01 f303 	mul.w	r3, r1, r3
 800dd90:	4413      	add	r3, r2
 800dd92:	3361      	adds	r3, #97	; 0x61
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b06      	cmp	r3, #6
 800dd98:	d112      	bne.n	800ddc0 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	212c      	movs	r1, #44	; 0x2c
 800dda0:	fb01 f303 	mul.w	r3, r1, r3
 800dda4:	4413      	add	r3, r2
 800dda6:	3361      	adds	r3, #97	; 0x61
 800dda8:	2202      	movs	r2, #2
 800ddaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	212c      	movs	r1, #44	; 0x2c
 800ddb2:	fb01 f303 	mul.w	r3, r1, r3
 800ddb6:	4413      	add	r3, r2
 800ddb8:	3360      	adds	r3, #96	; 0x60
 800ddba:	2205      	movs	r2, #5
 800ddbc:	701a      	strb	r2, [r3, #0]
 800ddbe:	e118      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	212c      	movs	r1, #44	; 0x2c
 800ddc6:	fb01 f303 	mul.w	r3, r1, r3
 800ddca:	4413      	add	r3, r2
 800ddcc:	3361      	adds	r3, #97	; 0x61
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b07      	cmp	r3, #7
 800ddd2:	d009      	beq.n	800dde8 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	212c      	movs	r1, #44	; 0x2c
 800ddda:	fb01 f303 	mul.w	r3, r1, r3
 800ddde:	4413      	add	r3, r2
 800dde0:	3361      	adds	r3, #97	; 0x61
 800dde2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800dde4:	2b09      	cmp	r3, #9
 800dde6:	d159      	bne.n	800de9c <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	212c      	movs	r1, #44	; 0x2c
 800ddee:	fb01 f303 	mul.w	r3, r1, r3
 800ddf2:	4413      	add	r3, r2
 800ddf4:	3361      	adds	r3, #97	; 0x61
 800ddf6:	2202      	movs	r2, #2
 800ddf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	212c      	movs	r1, #44	; 0x2c
 800de00:	fb01 f303 	mul.w	r3, r1, r3
 800de04:	4413      	add	r3, r2
 800de06:	335c      	adds	r3, #92	; 0x5c
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	202c      	movs	r0, #44	; 0x2c
 800de12:	fb00 f303 	mul.w	r3, r0, r3
 800de16:	440b      	add	r3, r1
 800de18:	335c      	adds	r3, #92	; 0x5c
 800de1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	212c      	movs	r1, #44	; 0x2c
 800de22:	fb01 f303 	mul.w	r3, r1, r3
 800de26:	4413      	add	r3, r2
 800de28:	335c      	adds	r3, #92	; 0x5c
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d912      	bls.n	800de56 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	212c      	movs	r1, #44	; 0x2c
 800de36:	fb01 f303 	mul.w	r3, r1, r3
 800de3a:	4413      	add	r3, r2
 800de3c:	335c      	adds	r3, #92	; 0x5c
 800de3e:	2200      	movs	r2, #0
 800de40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	212c      	movs	r1, #44	; 0x2c
 800de48:	fb01 f303 	mul.w	r3, r1, r3
 800de4c:	4413      	add	r3, r2
 800de4e:	3360      	adds	r3, #96	; 0x60
 800de50:	2204      	movs	r2, #4
 800de52:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800de54:	e0cd      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	212c      	movs	r1, #44	; 0x2c
 800de5c:	fb01 f303 	mul.w	r3, r1, r3
 800de60:	4413      	add	r3, r2
 800de62:	3360      	adds	r3, #96	; 0x60
 800de64:	2202      	movs	r2, #2
 800de66:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	015a      	lsls	r2, r3, #5
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	4413      	add	r3, r2
 800de70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de7e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de86:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de94:	461a      	mov	r2, r3
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800de9a:	e0aa      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	212c      	movs	r1, #44	; 0x2c
 800dea2:	fb01 f303 	mul.w	r3, r1, r3
 800dea6:	4413      	add	r3, r2
 800dea8:	3361      	adds	r3, #97	; 0x61
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b05      	cmp	r3, #5
 800deae:	d109      	bne.n	800dec4 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	212c      	movs	r1, #44	; 0x2c
 800deb6:	fb01 f303 	mul.w	r3, r1, r3
 800deba:	4413      	add	r3, r2
 800debc:	3361      	adds	r3, #97	; 0x61
 800debe:	2202      	movs	r2, #2
 800dec0:	701a      	strb	r2, [r3, #0]
 800dec2:	e096      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	212c      	movs	r1, #44	; 0x2c
 800deca:	fb01 f303 	mul.w	r3, r1, r3
 800dece:	4413      	add	r3, r2
 800ded0:	3361      	adds	r3, #97	; 0x61
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d109      	bne.n	800deec <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	212c      	movs	r1, #44	; 0x2c
 800dede:	fb01 f303 	mul.w	r3, r1, r3
 800dee2:	4413      	add	r3, r2
 800dee4:	3361      	adds	r3, #97	; 0x61
 800dee6:	2202      	movs	r2, #2
 800dee8:	701a      	strb	r2, [r3, #0]
 800deea:	e082      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	212c      	movs	r1, #44	; 0x2c
 800def2:	fb01 f303 	mul.w	r3, r1, r3
 800def6:	4413      	add	r3, r2
 800def8:	3361      	adds	r3, #97	; 0x61
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	2b04      	cmp	r3, #4
 800defe:	d13f      	bne.n	800df80 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	212c      	movs	r1, #44	; 0x2c
 800df06:	fb01 f303 	mul.w	r3, r1, r3
 800df0a:	4413      	add	r3, r2
 800df0c:	3361      	adds	r3, #97	; 0x61
 800df0e:	2202      	movs	r2, #2
 800df10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	212c      	movs	r1, #44	; 0x2c
 800df18:	fb01 f303 	mul.w	r3, r1, r3
 800df1c:	4413      	add	r3, r2
 800df1e:	3360      	adds	r3, #96	; 0x60
 800df20:	2202      	movs	r2, #2
 800df22:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	212c      	movs	r1, #44	; 0x2c
 800df2a:	fb01 f303 	mul.w	r3, r1, r3
 800df2e:	4413      	add	r3, r2
 800df30:	333f      	adds	r3, #63	; 0x3f
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d009      	beq.n	800df4c <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	212c      	movs	r1, #44	; 0x2c
 800df3e:	fb01 f303 	mul.w	r3, r1, r3
 800df42:	4413      	add	r3, r2
 800df44:	333f      	adds	r3, #63	; 0x3f
 800df46:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d152      	bne.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	4413      	add	r3, r2
 800df54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800df62:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df6a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	015a      	lsls	r2, r3, #5
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	4413      	add	r3, r2
 800df74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df78:	461a      	mov	r2, r3
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	e038      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	212c      	movs	r1, #44	; 0x2c
 800df86:	fb01 f303 	mul.w	r3, r1, r3
 800df8a:	4413      	add	r3, r2
 800df8c:	3361      	adds	r3, #97	; 0x61
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b08      	cmp	r3, #8
 800df92:	d123      	bne.n	800dfdc <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	212c      	movs	r1, #44	; 0x2c
 800df9a:	fb01 f303 	mul.w	r3, r1, r3
 800df9e:	4413      	add	r3, r2
 800dfa0:	3361      	adds	r3, #97	; 0x61
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	212c      	movs	r1, #44	; 0x2c
 800dfac:	fb01 f303 	mul.w	r3, r1, r3
 800dfb0:	4413      	add	r3, r2
 800dfb2:	335c      	adds	r3, #92	; 0x5c
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	1c5a      	adds	r2, r3, #1
 800dfb8:	6879      	ldr	r1, [r7, #4]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	202c      	movs	r0, #44	; 0x2c
 800dfbe:	fb00 f303 	mul.w	r3, r0, r3
 800dfc2:	440b      	add	r3, r1
 800dfc4:	335c      	adds	r3, #92	; 0x5c
 800dfc6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	212c      	movs	r1, #44	; 0x2c
 800dfce:	fb01 f303 	mul.w	r3, r1, r3
 800dfd2:	4413      	add	r3, r2
 800dfd4:	3360      	adds	r3, #96	; 0x60
 800dfd6:	2204      	movs	r2, #4
 800dfd8:	701a      	strb	r2, [r3, #0]
 800dfda:	e00a      	b.n	800dff2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	212c      	movs	r1, #44	; 0x2c
 800dfe2:	fb01 f303 	mul.w	r3, r1, r3
 800dfe6:	4413      	add	r3, r2
 800dfe8:	3361      	adds	r3, #97	; 0x61
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	f000 80ae 	beq.w	800e14e <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	b2d9      	uxtb	r1, r3
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	202c      	movs	r0, #44	; 0x2c
 800dffc:	fb00 f303 	mul.w	r3, r0, r3
 800e000:	4413      	add	r3, r2
 800e002:	3360      	adds	r3, #96	; 0x60
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f010 fcbb 	bl	801e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 800e00e:	e09f      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	b2d2      	uxtb	r2, r2
 800e018:	4611      	mov	r1, r2
 800e01a:	4618      	mov	r0, r3
 800e01c:	f007 ff13 	bl	8015e46 <USB_ReadChInterrupts>
 800e020:	4603      	mov	r3, r0
 800e022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e026:	2b40      	cmp	r3, #64	; 0x40
 800e028:	d123      	bne.n	800e072 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	015a      	lsls	r2, r3, #5
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	4413      	add	r3, r2
 800e032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e036:	461a      	mov	r2, r3
 800e038:	2340      	movs	r3, #64	; 0x40
 800e03a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	212c      	movs	r1, #44	; 0x2c
 800e042:	fb01 f303 	mul.w	r3, r1, r3
 800e046:	4413      	add	r3, r2
 800e048:	3361      	adds	r3, #97	; 0x61
 800e04a:	2205      	movs	r2, #5
 800e04c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	212c      	movs	r1, #44	; 0x2c
 800e054:	fb01 f303 	mul.w	r3, r1, r3
 800e058:	4413      	add	r3, r2
 800e05a:	335c      	adds	r3, #92	; 0x5c
 800e05c:	2200      	movs	r2, #0
 800e05e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	b2d2      	uxtb	r2, r2
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f008 fc3f 	bl	80168ee <USB_HC_Halt>
 800e070:	e06e      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	b2d2      	uxtb	r2, r2
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f007 fee2 	bl	8015e46 <USB_ReadChInterrupts>
 800e082:	4603      	mov	r3, r0
 800e084:	f003 0310 	and.w	r3, r3, #16
 800e088:	2b10      	cmp	r3, #16
 800e08a:	d161      	bne.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	212c      	movs	r1, #44	; 0x2c
 800e092:	fb01 f303 	mul.w	r3, r1, r3
 800e096:	4413      	add	r3, r2
 800e098:	333f      	adds	r3, #63	; 0x3f
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d11a      	bne.n	800e0d6 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	212c      	movs	r1, #44	; 0x2c
 800e0a6:	fb01 f303 	mul.w	r3, r1, r3
 800e0aa:	4413      	add	r3, r2
 800e0ac:	335c      	adds	r3, #92	; 0x5c
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	212c      	movs	r1, #44	; 0x2c
 800e0b8:	fb01 f303 	mul.w	r3, r1, r3
 800e0bc:	4413      	add	r3, r2
 800e0be:	3361      	adds	r3, #97	; 0x61
 800e0c0:	2204      	movs	r2, #4
 800e0c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f008 fc0d 	bl	80168ee <USB_HC_Halt>
 800e0d4:	e031      	b.n	800e13a <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	212c      	movs	r1, #44	; 0x2c
 800e0dc:	fb01 f303 	mul.w	r3, r1, r3
 800e0e0:	4413      	add	r3, r2
 800e0e2:	333f      	adds	r3, #63	; 0x3f
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d009      	beq.n	800e0fe <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	212c      	movs	r1, #44	; 0x2c
 800e0f0:	fb01 f303 	mul.w	r3, r1, r3
 800e0f4:	4413      	add	r3, r2
 800e0f6:	333f      	adds	r3, #63	; 0x3f
 800e0f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	d11d      	bne.n	800e13a <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	212c      	movs	r1, #44	; 0x2c
 800e104:	fb01 f303 	mul.w	r3, r1, r3
 800e108:	4413      	add	r3, r2
 800e10a:	335c      	adds	r3, #92	; 0x5c
 800e10c:	2200      	movs	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d110      	bne.n	800e13a <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	212c      	movs	r1, #44	; 0x2c
 800e11e:	fb01 f303 	mul.w	r3, r1, r3
 800e122:	4413      	add	r3, r2
 800e124:	3361      	adds	r3, #97	; 0x61
 800e126:	2204      	movs	r2, #4
 800e128:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	4611      	mov	r1, r2
 800e134:	4618      	mov	r0, r3
 800e136:	f008 fbda 	bl	80168ee <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	015a      	lsls	r2, r3, #5
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	4413      	add	r3, r2
 800e142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e146:	461a      	mov	r2, r3
 800e148:	2310      	movs	r3, #16
 800e14a:	6093      	str	r3, [r2, #8]
 800e14c:	e000      	b.n	800e150 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800e14e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b088      	sub	sp, #32
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	460b      	mov	r3, r1
 800e160:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800e16c:	78fb      	ldrb	r3, [r7, #3]
 800e16e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	b2d2      	uxtb	r2, r2
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f007 fe63 	bl	8015e46 <USB_ReadChInterrupts>
 800e180:	4603      	mov	r3, r0
 800e182:	f003 0304 	and.w	r3, r3, #4
 800e186:	2b04      	cmp	r3, #4
 800e188:	d11a      	bne.n	800e1c0 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	015a      	lsls	r2, r3, #5
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	4413      	add	r3, r2
 800e192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e196:	461a      	mov	r2, r3
 800e198:	2304      	movs	r3, #4
 800e19a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	212c      	movs	r1, #44	; 0x2c
 800e1a2:	fb01 f303 	mul.w	r3, r1, r3
 800e1a6:	4413      	add	r3, r2
 800e1a8:	3361      	adds	r3, #97	; 0x61
 800e1aa:	2207      	movs	r2, #7
 800e1ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	697a      	ldr	r2, [r7, #20]
 800e1b4:	b2d2      	uxtb	r2, r2
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f008 fb98 	bl	80168ee <USB_HC_Halt>
 800e1be:	e393      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	697a      	ldr	r2, [r7, #20]
 800e1c6:	b2d2      	uxtb	r2, r2
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f007 fe3b 	bl	8015e46 <USB_ReadChInterrupts>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f003 0320 	and.w	r3, r3, #32
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	d137      	bne.n	800e24a <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	2320      	movs	r3, #32
 800e1ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	212c      	movs	r1, #44	; 0x2c
 800e1f2:	fb01 f303 	mul.w	r3, r1, r3
 800e1f6:	4413      	add	r3, r2
 800e1f8:	333d      	adds	r3, #61	; 0x3d
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	f040 8373 	bne.w	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	212c      	movs	r1, #44	; 0x2c
 800e208:	fb01 f303 	mul.w	r3, r1, r3
 800e20c:	4413      	add	r3, r2
 800e20e:	333d      	adds	r3, #61	; 0x3d
 800e210:	2200      	movs	r2, #0
 800e212:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	212c      	movs	r1, #44	; 0x2c
 800e21a:	fb01 f303 	mul.w	r3, r1, r3
 800e21e:	4413      	add	r3, r2
 800e220:	3360      	adds	r3, #96	; 0x60
 800e222:	2202      	movs	r2, #2
 800e224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	212c      	movs	r1, #44	; 0x2c
 800e22c:	fb01 f303 	mul.w	r3, r1, r3
 800e230:	4413      	add	r3, r2
 800e232:	3361      	adds	r3, #97	; 0x61
 800e234:	2203      	movs	r2, #3
 800e236:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	697a      	ldr	r2, [r7, #20]
 800e23e:	b2d2      	uxtb	r2, r2
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f008 fb53 	bl	80168ee <USB_HC_Halt>
 800e248:	e34e      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	697a      	ldr	r2, [r7, #20]
 800e250:	b2d2      	uxtb	r2, r2
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f007 fdf6 	bl	8015e46 <USB_ReadChInterrupts>
 800e25a:	4603      	mov	r3, r0
 800e25c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e264:	d112      	bne.n	800e28c <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	015a      	lsls	r2, r3, #5
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	4413      	add	r3, r2
 800e26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e272:	461a      	mov	r2, r3
 800e274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e278:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	b2d2      	uxtb	r2, r2
 800e282:	4611      	mov	r1, r2
 800e284:	4618      	mov	r0, r3
 800e286:	f008 fb32 	bl	80168ee <USB_HC_Halt>
 800e28a:	e32d      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	697a      	ldr	r2, [r7, #20]
 800e292:	b2d2      	uxtb	r2, r2
 800e294:	4611      	mov	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f007 fdd5 	bl	8015e46 <USB_ReadChInterrupts>
 800e29c:	4603      	mov	r3, r0
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d142      	bne.n	800e32c <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	212c      	movs	r1, #44	; 0x2c
 800e2ac:	fb01 f303 	mul.w	r3, r1, r3
 800e2b0:	4413      	add	r3, r2
 800e2b2:	335c      	adds	r3, #92	; 0x5c
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	b2d2      	uxtb	r2, r2
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f007 fdbf 	bl	8015e46 <USB_ReadChInterrupts>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ce:	2b40      	cmp	r3, #64	; 0x40
 800e2d0:	d111      	bne.n	800e2f6 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	212c      	movs	r1, #44	; 0x2c
 800e2d8:	fb01 f303 	mul.w	r3, r1, r3
 800e2dc:	4413      	add	r3, r2
 800e2de:	333d      	adds	r3, #61	; 0x3d
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	015a      	lsls	r2, r3, #5
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	4413      	add	r3, r2
 800e2ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	2340      	movs	r3, #64	; 0x40
 800e2f4:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	015a      	lsls	r2, r3, #5
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e302:	461a      	mov	r2, r3
 800e304:	2301      	movs	r3, #1
 800e306:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	212c      	movs	r1, #44	; 0x2c
 800e30e:	fb01 f303 	mul.w	r3, r1, r3
 800e312:	4413      	add	r3, r2
 800e314:	3361      	adds	r3, #97	; 0x61
 800e316:	2201      	movs	r2, #1
 800e318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	697a      	ldr	r2, [r7, #20]
 800e320:	b2d2      	uxtb	r2, r2
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f008 fae2 	bl	80168ee <USB_HC_Halt>
 800e32a:	e2dd      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	697a      	ldr	r2, [r7, #20]
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	4611      	mov	r1, r2
 800e336:	4618      	mov	r0, r3
 800e338:	f007 fd85 	bl	8015e46 <USB_ReadChInterrupts>
 800e33c:	4603      	mov	r3, r0
 800e33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e342:	2b40      	cmp	r3, #64	; 0x40
 800e344:	d12c      	bne.n	800e3a0 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	212c      	movs	r1, #44	; 0x2c
 800e34c:	fb01 f303 	mul.w	r3, r1, r3
 800e350:	4413      	add	r3, r2
 800e352:	3361      	adds	r3, #97	; 0x61
 800e354:	2205      	movs	r2, #5
 800e356:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	212c      	movs	r1, #44	; 0x2c
 800e35e:	fb01 f303 	mul.w	r3, r1, r3
 800e362:	4413      	add	r3, r2
 800e364:	333d      	adds	r3, #61	; 0x3d
 800e366:	2201      	movs	r2, #1
 800e368:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	212c      	movs	r1, #44	; 0x2c
 800e370:	fb01 f303 	mul.w	r3, r1, r3
 800e374:	4413      	add	r3, r2
 800e376:	335c      	adds	r3, #92	; 0x5c
 800e378:	2200      	movs	r2, #0
 800e37a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	b2d2      	uxtb	r2, r2
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f008 fab1 	bl	80168ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	015a      	lsls	r2, r3, #5
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	4413      	add	r3, r2
 800e394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e398:	461a      	mov	r2, r3
 800e39a:	2340      	movs	r3, #64	; 0x40
 800e39c:	6093      	str	r3, [r2, #8]
 800e39e:	e2a3      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	b2d2      	uxtb	r2, r2
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f007 fd4b 	bl	8015e46 <USB_ReadChInterrupts>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	f003 0308 	and.w	r3, r3, #8
 800e3b6:	2b08      	cmp	r3, #8
 800e3b8:	d11a      	bne.n	800e3f0 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	2308      	movs	r3, #8
 800e3ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	212c      	movs	r1, #44	; 0x2c
 800e3d2:	fb01 f303 	mul.w	r3, r1, r3
 800e3d6:	4413      	add	r3, r2
 800e3d8:	3361      	adds	r3, #97	; 0x61
 800e3da:	2206      	movs	r2, #6
 800e3dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	b2d2      	uxtb	r2, r2
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f008 fa80 	bl	80168ee <USB_HC_Halt>
 800e3ee:	e27b      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f007 fd23 	bl	8015e46 <USB_ReadChInterrupts>
 800e400:	4603      	mov	r3, r0
 800e402:	f003 0310 	and.w	r3, r3, #16
 800e406:	2b10      	cmp	r3, #16
 800e408:	d140      	bne.n	800e48c <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	212c      	movs	r1, #44	; 0x2c
 800e410:	fb01 f303 	mul.w	r3, r1, r3
 800e414:	4413      	add	r3, r2
 800e416:	335c      	adds	r3, #92	; 0x5c
 800e418:	2200      	movs	r2, #0
 800e41a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	212c      	movs	r1, #44	; 0x2c
 800e422:	fb01 f303 	mul.w	r3, r1, r3
 800e426:	4413      	add	r3, r2
 800e428:	3361      	adds	r3, #97	; 0x61
 800e42a:	2204      	movs	r2, #4
 800e42c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	212c      	movs	r1, #44	; 0x2c
 800e434:	fb01 f303 	mul.w	r3, r1, r3
 800e438:	4413      	add	r3, r2
 800e43a:	333d      	adds	r3, #61	; 0x3d
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d112      	bne.n	800e468 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	212c      	movs	r1, #44	; 0x2c
 800e448:	fb01 f303 	mul.w	r3, r1, r3
 800e44c:	4413      	add	r3, r2
 800e44e:	333c      	adds	r3, #60	; 0x3c
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d108      	bne.n	800e468 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	212c      	movs	r1, #44	; 0x2c
 800e45c:	fb01 f303 	mul.w	r3, r1, r3
 800e460:	4413      	add	r3, r2
 800e462:	333d      	adds	r3, #61	; 0x3d
 800e464:	2201      	movs	r2, #1
 800e466:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	b2d2      	uxtb	r2, r2
 800e470:	4611      	mov	r1, r2
 800e472:	4618      	mov	r0, r3
 800e474:	f008 fa3b 	bl	80168ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e484:	461a      	mov	r2, r3
 800e486:	2310      	movs	r3, #16
 800e488:	6093      	str	r3, [r2, #8]
 800e48a:	e22d      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	b2d2      	uxtb	r2, r2
 800e494:	4611      	mov	r1, r2
 800e496:	4618      	mov	r0, r3
 800e498:	f007 fcd5 	bl	8015e46 <USB_ReadChInterrupts>
 800e49c:	4603      	mov	r3, r0
 800e49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4a2:	2b80      	cmp	r3, #128	; 0x80
 800e4a4:	d164      	bne.n	800e570 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d111      	bne.n	800e4d2 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	212c      	movs	r1, #44	; 0x2c
 800e4b4:	fb01 f303 	mul.w	r3, r1, r3
 800e4b8:	4413      	add	r3, r2
 800e4ba:	3361      	adds	r3, #97	; 0x61
 800e4bc:	2207      	movs	r2, #7
 800e4be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	697a      	ldr	r2, [r7, #20]
 800e4c6:	b2d2      	uxtb	r2, r2
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f008 fa0f 	bl	80168ee <USB_HC_Halt>
 800e4d0:	e044      	b.n	800e55c <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	212c      	movs	r1, #44	; 0x2c
 800e4d8:	fb01 f303 	mul.w	r3, r1, r3
 800e4dc:	4413      	add	r3, r2
 800e4de:	335c      	adds	r3, #92	; 0x5c
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	202c      	movs	r0, #44	; 0x2c
 800e4ea:	fb00 f303 	mul.w	r3, r0, r3
 800e4ee:	440b      	add	r3, r1
 800e4f0:	335c      	adds	r3, #92	; 0x5c
 800e4f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	212c      	movs	r1, #44	; 0x2c
 800e4fa:	fb01 f303 	mul.w	r3, r1, r3
 800e4fe:	4413      	add	r3, r2
 800e500:	335c      	adds	r3, #92	; 0x5c
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b02      	cmp	r3, #2
 800e506:	d920      	bls.n	800e54a <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	212c      	movs	r1, #44	; 0x2c
 800e50e:	fb01 f303 	mul.w	r3, r1, r3
 800e512:	4413      	add	r3, r2
 800e514:	335c      	adds	r3, #92	; 0x5c
 800e516:	2200      	movs	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	212c      	movs	r1, #44	; 0x2c
 800e520:	fb01 f303 	mul.w	r3, r1, r3
 800e524:	4413      	add	r3, r2
 800e526:	3360      	adds	r3, #96	; 0x60
 800e528:	2204      	movs	r2, #4
 800e52a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	b2d9      	uxtb	r1, r3
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	202c      	movs	r0, #44	; 0x2c
 800e536:	fb00 f303 	mul.w	r3, r0, r3
 800e53a:	4413      	add	r3, r2
 800e53c:	3360      	adds	r3, #96	; 0x60
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f010 fa1e 	bl	801e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 800e548:	e008      	b.n	800e55c <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	212c      	movs	r1, #44	; 0x2c
 800e550:	fb01 f303 	mul.w	r3, r1, r3
 800e554:	4413      	add	r3, r2
 800e556:	3360      	adds	r3, #96	; 0x60
 800e558:	2202      	movs	r2, #2
 800e55a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	015a      	lsls	r2, r3, #5
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	4413      	add	r3, r2
 800e564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e568:	461a      	mov	r2, r3
 800e56a:	2380      	movs	r3, #128	; 0x80
 800e56c:	6093      	str	r3, [r2, #8]
 800e56e:	e1bb      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	697a      	ldr	r2, [r7, #20]
 800e576:	b2d2      	uxtb	r2, r2
 800e578:	4611      	mov	r1, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f007 fc63 	bl	8015e46 <USB_ReadChInterrupts>
 800e580:	4603      	mov	r3, r0
 800e582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e58a:	d11b      	bne.n	800e5c4 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	212c      	movs	r1, #44	; 0x2c
 800e592:	fb01 f303 	mul.w	r3, r1, r3
 800e596:	4413      	add	r3, r2
 800e598:	3361      	adds	r3, #97	; 0x61
 800e59a:	2209      	movs	r2, #9
 800e59c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	697a      	ldr	r2, [r7, #20]
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f008 f9a0 	bl	80168ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5c0:	6093      	str	r3, [r2, #8]
 800e5c2:	e191      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	b2d2      	uxtb	r2, r2
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f007 fc39 	bl	8015e46 <USB_ReadChInterrupts>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	f003 0302 	and.w	r3, r3, #2
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	f040 8184 	bne.w	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	015a      	lsls	r2, r3, #5
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	212c      	movs	r1, #44	; 0x2c
 800e5f8:	fb01 f303 	mul.w	r3, r1, r3
 800e5fc:	4413      	add	r3, r2
 800e5fe:	3361      	adds	r3, #97	; 0x61
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	2b01      	cmp	r3, #1
 800e604:	f040 8087 	bne.w	800e716 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	212c      	movs	r1, #44	; 0x2c
 800e60e:	fb01 f303 	mul.w	r3, r1, r3
 800e612:	4413      	add	r3, r2
 800e614:	3361      	adds	r3, #97	; 0x61
 800e616:	2202      	movs	r2, #2
 800e618:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	212c      	movs	r1, #44	; 0x2c
 800e620:	fb01 f303 	mul.w	r3, r1, r3
 800e624:	4413      	add	r3, r2
 800e626:	3360      	adds	r3, #96	; 0x60
 800e628:	2201      	movs	r2, #1
 800e62a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	212c      	movs	r1, #44	; 0x2c
 800e632:	fb01 f303 	mul.w	r3, r1, r3
 800e636:	4413      	add	r3, r2
 800e638:	333f      	adds	r3, #63	; 0x3f
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d00a      	beq.n	800e656 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	212c      	movs	r1, #44	; 0x2c
 800e646:	fb01 f303 	mul.w	r3, r1, r3
 800e64a:	4413      	add	r3, r2
 800e64c:	333f      	adds	r3, #63	; 0x3f
 800e64e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800e650:	2b03      	cmp	r3, #3
 800e652:	f040 8139 	bne.w	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d113      	bne.n	800e686 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	212c      	movs	r1, #44	; 0x2c
 800e664:	fb01 f303 	mul.w	r3, r1, r3
 800e668:	4413      	add	r3, r2
 800e66a:	3355      	adds	r3, #85	; 0x55
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	f083 0301 	eor.w	r3, r3, #1
 800e672:	b2d8      	uxtb	r0, r3
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	212c      	movs	r1, #44	; 0x2c
 800e67a:	fb01 f303 	mul.w	r3, r1, r3
 800e67e:	4413      	add	r3, r2
 800e680:	3355      	adds	r3, #85	; 0x55
 800e682:	4602      	mov	r2, r0
 800e684:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	f040 811c 	bne.w	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	212c      	movs	r1, #44	; 0x2c
 800e696:	fb01 f303 	mul.w	r3, r1, r3
 800e69a:	4413      	add	r3, r2
 800e69c:	334c      	adds	r3, #76	; 0x4c
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 8111 	beq.w	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	212c      	movs	r1, #44	; 0x2c
 800e6ac:	fb01 f303 	mul.w	r3, r1, r3
 800e6b0:	4413      	add	r3, r2
 800e6b2:	334c      	adds	r3, #76	; 0x4c
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6879      	ldr	r1, [r7, #4]
 800e6b8:	697a      	ldr	r2, [r7, #20]
 800e6ba:	202c      	movs	r0, #44	; 0x2c
 800e6bc:	fb00 f202 	mul.w	r2, r0, r2
 800e6c0:	440a      	add	r2, r1
 800e6c2:	3240      	adds	r2, #64	; 0x40
 800e6c4:	8812      	ldrh	r2, [r2, #0]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	202c      	movs	r0, #44	; 0x2c
 800e6d0:	fb00 f202 	mul.w	r2, r0, r2
 800e6d4:	440a      	add	r2, r1
 800e6d6:	3240      	adds	r2, #64	; 0x40
 800e6d8:	8812      	ldrh	r2, [r2, #0]
 800e6da:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f003 0301 	and.w	r3, r3, #1
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f000 80ee 	beq.w	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	212c      	movs	r1, #44	; 0x2c
 800e6f2:	fb01 f303 	mul.w	r3, r1, r3
 800e6f6:	4413      	add	r3, r2
 800e6f8:	3355      	adds	r3, #85	; 0x55
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f083 0301 	eor.w	r3, r3, #1
 800e700:	b2d8      	uxtb	r0, r3
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	212c      	movs	r1, #44	; 0x2c
 800e708:	fb01 f303 	mul.w	r3, r1, r3
 800e70c:	4413      	add	r3, r2
 800e70e:	3355      	adds	r3, #85	; 0x55
 800e710:	4602      	mov	r2, r0
 800e712:	701a      	strb	r2, [r3, #0]
 800e714:	e0d8      	b.n	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	212c      	movs	r1, #44	; 0x2c
 800e71c:	fb01 f303 	mul.w	r3, r1, r3
 800e720:	4413      	add	r3, r2
 800e722:	3361      	adds	r3, #97	; 0x61
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	2b03      	cmp	r3, #3
 800e728:	d109      	bne.n	800e73e <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	212c      	movs	r1, #44	; 0x2c
 800e730:	fb01 f303 	mul.w	r3, r1, r3
 800e734:	4413      	add	r3, r2
 800e736:	3361      	adds	r3, #97	; 0x61
 800e738:	2202      	movs	r2, #2
 800e73a:	701a      	strb	r2, [r3, #0]
 800e73c:	e0c4      	b.n	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	212c      	movs	r1, #44	; 0x2c
 800e744:	fb01 f303 	mul.w	r3, r1, r3
 800e748:	4413      	add	r3, r2
 800e74a:	3361      	adds	r3, #97	; 0x61
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	2b04      	cmp	r3, #4
 800e750:	d112      	bne.n	800e778 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	212c      	movs	r1, #44	; 0x2c
 800e758:	fb01 f303 	mul.w	r3, r1, r3
 800e75c:	4413      	add	r3, r2
 800e75e:	3361      	adds	r3, #97	; 0x61
 800e760:	2202      	movs	r2, #2
 800e762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	212c      	movs	r1, #44	; 0x2c
 800e76a:	fb01 f303 	mul.w	r3, r1, r3
 800e76e:	4413      	add	r3, r2
 800e770:	3360      	adds	r3, #96	; 0x60
 800e772:	2202      	movs	r2, #2
 800e774:	701a      	strb	r2, [r3, #0]
 800e776:	e0a7      	b.n	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	212c      	movs	r1, #44	; 0x2c
 800e77e:	fb01 f303 	mul.w	r3, r1, r3
 800e782:	4413      	add	r3, r2
 800e784:	3361      	adds	r3, #97	; 0x61
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	2b05      	cmp	r3, #5
 800e78a:	d112      	bne.n	800e7b2 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	212c      	movs	r1, #44	; 0x2c
 800e792:	fb01 f303 	mul.w	r3, r1, r3
 800e796:	4413      	add	r3, r2
 800e798:	3361      	adds	r3, #97	; 0x61
 800e79a:	2202      	movs	r2, #2
 800e79c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	212c      	movs	r1, #44	; 0x2c
 800e7a4:	fb01 f303 	mul.w	r3, r1, r3
 800e7a8:	4413      	add	r3, r2
 800e7aa:	3360      	adds	r3, #96	; 0x60
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	e08a      	b.n	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	212c      	movs	r1, #44	; 0x2c
 800e7b8:	fb01 f303 	mul.w	r3, r1, r3
 800e7bc:	4413      	add	r3, r2
 800e7be:	3361      	adds	r3, #97	; 0x61
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	2b06      	cmp	r3, #6
 800e7c4:	d112      	bne.n	800e7ec <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	212c      	movs	r1, #44	; 0x2c
 800e7cc:	fb01 f303 	mul.w	r3, r1, r3
 800e7d0:	4413      	add	r3, r2
 800e7d2:	3361      	adds	r3, #97	; 0x61
 800e7d4:	2202      	movs	r2, #2
 800e7d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	212c      	movs	r1, #44	; 0x2c
 800e7de:	fb01 f303 	mul.w	r3, r1, r3
 800e7e2:	4413      	add	r3, r2
 800e7e4:	3360      	adds	r3, #96	; 0x60
 800e7e6:	2205      	movs	r2, #5
 800e7e8:	701a      	strb	r2, [r3, #0]
 800e7ea:	e06d      	b.n	800e8c8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	212c      	movs	r1, #44	; 0x2c
 800e7f2:	fb01 f303 	mul.w	r3, r1, r3
 800e7f6:	4413      	add	r3, r2
 800e7f8:	3361      	adds	r3, #97	; 0x61
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b07      	cmp	r3, #7
 800e7fe:	d009      	beq.n	800e814 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	212c      	movs	r1, #44	; 0x2c
 800e806:	fb01 f303 	mul.w	r3, r1, r3
 800e80a:	4413      	add	r3, r2
 800e80c:	3361      	adds	r3, #97	; 0x61
 800e80e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800e810:	2b09      	cmp	r3, #9
 800e812:	d168      	bne.n	800e8e6 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	212c      	movs	r1, #44	; 0x2c
 800e81a:	fb01 f303 	mul.w	r3, r1, r3
 800e81e:	4413      	add	r3, r2
 800e820:	3361      	adds	r3, #97	; 0x61
 800e822:	2202      	movs	r2, #2
 800e824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	212c      	movs	r1, #44	; 0x2c
 800e82c:	fb01 f303 	mul.w	r3, r1, r3
 800e830:	4413      	add	r3, r2
 800e832:	335c      	adds	r3, #92	; 0x5c
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	202c      	movs	r0, #44	; 0x2c
 800e83e:	fb00 f303 	mul.w	r3, r0, r3
 800e842:	440b      	add	r3, r1
 800e844:	335c      	adds	r3, #92	; 0x5c
 800e846:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	212c      	movs	r1, #44	; 0x2c
 800e84e:	fb01 f303 	mul.w	r3, r1, r3
 800e852:	4413      	add	r3, r2
 800e854:	335c      	adds	r3, #92	; 0x5c
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d912      	bls.n	800e882 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	212c      	movs	r1, #44	; 0x2c
 800e862:	fb01 f303 	mul.w	r3, r1, r3
 800e866:	4413      	add	r3, r2
 800e868:	335c      	adds	r3, #92	; 0x5c
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	212c      	movs	r1, #44	; 0x2c
 800e874:	fb01 f303 	mul.w	r3, r1, r3
 800e878:	4413      	add	r3, r2
 800e87a:	3360      	adds	r3, #96	; 0x60
 800e87c:	2204      	movs	r2, #4
 800e87e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800e880:	e021      	b.n	800e8c6 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	212c      	movs	r1, #44	; 0x2c
 800e888:	fb01 f303 	mul.w	r3, r1, r3
 800e88c:	4413      	add	r3, r2
 800e88e:	3360      	adds	r3, #96	; 0x60
 800e890:	2202      	movs	r2, #2
 800e892:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e8aa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8b2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800e8c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	b2d9      	uxtb	r1, r3
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	202c      	movs	r0, #44	; 0x2c
 800e8d2:	fb00 f303 	mul.w	r3, r0, r3
 800e8d6:	4413      	add	r3, r2
 800e8d8:	3360      	adds	r3, #96	; 0x60
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f010 f850 	bl	801e984 <HAL_HCD_HC_NotifyURBChange_Callback>
 800e8e4:	e000      	b.n	800e8e8 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 800e8e6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800e8e8:	3720      	adds	r7, #32
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b08a      	sub	sp, #40	; 0x28
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	f003 030f 	and.w	r3, r3, #15
 800e90e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	0c5b      	lsrs	r3, r3, #17
 800e914:	f003 030f 	and.w	r3, r3, #15
 800e918:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	091b      	lsrs	r3, r3, #4
 800e91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e922:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2b02      	cmp	r3, #2
 800e928:	d004      	beq.n	800e934 <HCD_RXQLVL_IRQHandler+0x46>
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	2b05      	cmp	r3, #5
 800e92e:	f000 80a9 	beq.w	800ea84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800e932:	e0aa      	b.n	800ea8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	2b00      	cmp	r3, #0
 800e938:	f000 80a6 	beq.w	800ea88 <HCD_RXQLVL_IRQHandler+0x19a>
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	212c      	movs	r1, #44	; 0x2c
 800e942:	fb01 f303 	mul.w	r3, r1, r3
 800e946:	4413      	add	r3, r2
 800e948:	3344      	adds	r3, #68	; 0x44
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f000 809b 	beq.w	800ea88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	212c      	movs	r1, #44	; 0x2c
 800e958:	fb01 f303 	mul.w	r3, r1, r3
 800e95c:	4413      	add	r3, r2
 800e95e:	3350      	adds	r3, #80	; 0x50
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	441a      	add	r2, r3
 800e966:	6879      	ldr	r1, [r7, #4]
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	202c      	movs	r0, #44	; 0x2c
 800e96c:	fb00 f303 	mul.w	r3, r0, r3
 800e970:	440b      	add	r3, r1
 800e972:	334c      	adds	r3, #76	; 0x4c
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	429a      	cmp	r2, r3
 800e978:	d87a      	bhi.n	800ea70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6818      	ldr	r0, [r3, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	212c      	movs	r1, #44	; 0x2c
 800e984:	fb01 f303 	mul.w	r3, r1, r3
 800e988:	4413      	add	r3, r2
 800e98a:	3344      	adds	r3, #68	; 0x44
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	b292      	uxth	r2, r2
 800e992:	4619      	mov	r1, r3
 800e994:	f007 f8b0 	bl	8015af8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	212c      	movs	r1, #44	; 0x2c
 800e99e:	fb01 f303 	mul.w	r3, r1, r3
 800e9a2:	4413      	add	r3, r2
 800e9a4:	3344      	adds	r3, #68	; 0x44
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	6879      	ldr	r1, [r7, #4]
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	202c      	movs	r0, #44	; 0x2c
 800e9b2:	fb00 f303 	mul.w	r3, r0, r3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3344      	adds	r3, #68	; 0x44
 800e9ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	212c      	movs	r1, #44	; 0x2c
 800e9c2:	fb01 f303 	mul.w	r3, r1, r3
 800e9c6:	4413      	add	r3, r2
 800e9c8:	3350      	adds	r3, #80	; 0x50
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	441a      	add	r2, r3
 800e9d0:	6879      	ldr	r1, [r7, #4]
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	202c      	movs	r0, #44	; 0x2c
 800e9d6:	fb00 f303 	mul.w	r3, r0, r3
 800e9da:	440b      	add	r3, r1
 800e9dc:	3350      	adds	r3, #80	; 0x50
 800e9de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	015a      	lsls	r2, r3, #5
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	0cdb      	lsrs	r3, r3, #19
 800e9f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	212c      	movs	r1, #44	; 0x2c
 800e9fc:	fb01 f303 	mul.w	r3, r1, r3
 800ea00:	4413      	add	r3, r2
 800ea02:	3340      	adds	r3, #64	; 0x40
 800ea04:	881b      	ldrh	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d13c      	bne.n	800ea88 <HCD_RXQLVL_IRQHandler+0x19a>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d039      	beq.n	800ea88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	015a      	lsls	r2, r3, #5
 800ea18:	6a3b      	ldr	r3, [r7, #32]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ea2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ea32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	015a      	lsls	r2, r3, #5
 800ea38:	6a3b      	ldr	r3, [r7, #32]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea40:	461a      	mov	r2, r3
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	212c      	movs	r1, #44	; 0x2c
 800ea4c:	fb01 f303 	mul.w	r3, r1, r3
 800ea50:	4413      	add	r3, r2
 800ea52:	3354      	adds	r3, #84	; 0x54
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f083 0301 	eor.w	r3, r3, #1
 800ea5a:	b2d8      	uxtb	r0, r3
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	212c      	movs	r1, #44	; 0x2c
 800ea62:	fb01 f303 	mul.w	r3, r1, r3
 800ea66:	4413      	add	r3, r2
 800ea68:	3354      	adds	r3, #84	; 0x54
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	701a      	strb	r2, [r3, #0]
      break;
 800ea6e:	e00b      	b.n	800ea88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	212c      	movs	r1, #44	; 0x2c
 800ea76:	fb01 f303 	mul.w	r3, r1, r3
 800ea7a:	4413      	add	r3, r2
 800ea7c:	3360      	adds	r3, #96	; 0x60
 800ea7e:	2204      	movs	r2, #4
 800ea80:	701a      	strb	r2, [r3, #0]
      break;
 800ea82:	e001      	b.n	800ea88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800ea84:	bf00      	nop
 800ea86:	e000      	b.n	800ea8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800ea88:	bf00      	nop
  }
}
 800ea8a:	bf00      	nop
 800ea8c:	3728      	adds	r7, #40	; 0x28
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b086      	sub	sp, #24
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800eabe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f003 0302 	and.w	r3, r3, #2
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d10b      	bne.n	800eae2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f003 0301 	and.w	r3, r3, #1
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d102      	bne.n	800eada <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f00f ff39 	bl	801e94c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f043 0302 	orr.w	r3, r3, #2
 800eae0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f003 0308 	and.w	r3, r3, #8
 800eae8:	2b08      	cmp	r3, #8
 800eaea:	d132      	bne.n	800eb52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	f043 0308 	orr.w	r3, r3, #8
 800eaf2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f003 0304 	and.w	r3, r3, #4
 800eafa:	2b04      	cmp	r3, #4
 800eafc:	d126      	bne.n	800eb4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d113      	bne.n	800eb2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800eb0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb10:	d106      	bne.n	800eb20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2102      	movs	r1, #2
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f007 fbad 	bl	8016278 <USB_InitFSLSPClkSel>
 800eb1e:	e011      	b.n	800eb44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2101      	movs	r1, #1
 800eb26:	4618      	mov	r0, r3
 800eb28:	f007 fba6 	bl	8016278 <USB_InitFSLSPClkSel>
 800eb2c:	e00a      	b.n	800eb44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d106      	bne.n	800eb44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800eb42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f00f ff2b 	bl	801e9a0 <HAL_HCD_PortEnabled_Callback>
 800eb4a:	e002      	b.n	800eb52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f00f ff35 	bl	801e9bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f003 0320 	and.w	r3, r3, #32
 800eb58:	2b20      	cmp	r3, #32
 800eb5a:	d103      	bne.n	800eb64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	f043 0320 	orr.w	r3, r3, #32
 800eb62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	6013      	str	r3, [r2, #0]
}
 800eb70:	bf00      	nop
 800eb72:	3718      	adds	r7, #24
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb7a:	b08f      	sub	sp, #60	; 0x3c
 800eb7c:	af0a      	add	r7, sp, #40	; 0x28
 800eb7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d101      	bne.n	800eb8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e116      	b.n	800edb8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f00f fa89 	bl	801e0bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2203      	movs	r2, #3
 800ebae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d102      	bne.n	800ebc4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f005 ff40 	bl	8014a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	687e      	ldr	r6, [r7, #4]
 800ebd6:	466d      	mov	r5, sp
 800ebd8:	f106 0410 	add.w	r4, r6, #16
 800ebdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ebe8:	e885 0003 	stmia.w	r5, {r0, r1}
 800ebec:	1d33      	adds	r3, r6, #4
 800ebee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ebf0:	6838      	ldr	r0, [r7, #0]
 800ebf2:	f005 fe21 	bl	8014838 <USB_CoreInit>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d005      	beq.n	800ec08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2202      	movs	r2, #2
 800ec00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	e0d7      	b.n	800edb8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f005 ff2e 	bl	8014a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
 800ec18:	e04a      	b.n	800ecb0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ec1a:	7bfa      	ldrb	r2, [r7, #15]
 800ec1c:	6879      	ldr	r1, [r7, #4]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	4413      	add	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	440b      	add	r3, r1
 800ec28:	333d      	adds	r3, #61	; 0x3d
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ec2e:	7bfa      	ldrb	r2, [r7, #15]
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	4613      	mov	r3, r2
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	4413      	add	r3, r2
 800ec38:	009b      	lsls	r3, r3, #2
 800ec3a:	440b      	add	r3, r1
 800ec3c:	333c      	adds	r3, #60	; 0x3c
 800ec3e:	7bfa      	ldrb	r2, [r7, #15]
 800ec40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ec42:	7bfa      	ldrb	r2, [r7, #15]
 800ec44:	7bfb      	ldrb	r3, [r7, #15]
 800ec46:	b298      	uxth	r0, r3
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	00db      	lsls	r3, r3, #3
 800ec4e:	4413      	add	r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	440b      	add	r3, r1
 800ec54:	3344      	adds	r3, #68	; 0x44
 800ec56:	4602      	mov	r2, r0
 800ec58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ec5a:	7bfa      	ldrb	r2, [r7, #15]
 800ec5c:	6879      	ldr	r1, [r7, #4]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	4413      	add	r3, r2
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	440b      	add	r3, r1
 800ec68:	3340      	adds	r3, #64	; 0x40
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ec6e:	7bfa      	ldrb	r2, [r7, #15]
 800ec70:	6879      	ldr	r1, [r7, #4]
 800ec72:	4613      	mov	r3, r2
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	4413      	add	r3, r2
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	440b      	add	r3, r1
 800ec7c:	3348      	adds	r3, #72	; 0x48
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ec82:	7bfa      	ldrb	r2, [r7, #15]
 800ec84:	6879      	ldr	r1, [r7, #4]
 800ec86:	4613      	mov	r3, r2
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	4413      	add	r3, r2
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	440b      	add	r3, r1
 800ec90:	334c      	adds	r3, #76	; 0x4c
 800ec92:	2200      	movs	r2, #0
 800ec94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ec96:	7bfa      	ldrb	r2, [r7, #15]
 800ec98:	6879      	ldr	r1, [r7, #4]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	00db      	lsls	r3, r3, #3
 800ec9e:	4413      	add	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	440b      	add	r3, r1
 800eca4:	3354      	adds	r3, #84	; 0x54
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	3301      	adds	r3, #1
 800ecae:	73fb      	strb	r3, [r7, #15]
 800ecb0:	7bfa      	ldrb	r2, [r7, #15]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d3af      	bcc.n	800ec1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ecba:	2300      	movs	r3, #0
 800ecbc:	73fb      	strb	r3, [r7, #15]
 800ecbe:	e044      	b.n	800ed4a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ecc0:	7bfa      	ldrb	r2, [r7, #15]
 800ecc2:	6879      	ldr	r1, [r7, #4]
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	4413      	add	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	440b      	add	r3, r1
 800ecce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ecd6:	7bfa      	ldrb	r2, [r7, #15]
 800ecd8:	6879      	ldr	r1, [r7, #4]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	4413      	add	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	440b      	add	r3, r1
 800ece4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ece8:	7bfa      	ldrb	r2, [r7, #15]
 800ecea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ecec:	7bfa      	ldrb	r2, [r7, #15]
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	440b      	add	r3, r1
 800ecfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ecfe:	2200      	movs	r2, #0
 800ed00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ed02:	7bfa      	ldrb	r2, [r7, #15]
 800ed04:	6879      	ldr	r1, [r7, #4]
 800ed06:	4613      	mov	r3, r2
 800ed08:	00db      	lsls	r3, r3, #3
 800ed0a:	4413      	add	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	440b      	add	r3, r1
 800ed10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ed18:	7bfa      	ldrb	r2, [r7, #15]
 800ed1a:	6879      	ldr	r1, [r7, #4]
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	4413      	add	r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	440b      	add	r3, r1
 800ed26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ed2e:	7bfa      	ldrb	r2, [r7, #15]
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	4613      	mov	r3, r2
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	440b      	add	r3, r1
 800ed3c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ed40:	2200      	movs	r2, #0
 800ed42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
 800ed46:	3301      	adds	r3, #1
 800ed48:	73fb      	strb	r3, [r7, #15]
 800ed4a:	7bfa      	ldrb	r2, [r7, #15]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d3b5      	bcc.n	800ecc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	603b      	str	r3, [r7, #0]
 800ed5a:	687e      	ldr	r6, [r7, #4]
 800ed5c:	466d      	mov	r5, sp
 800ed5e:	f106 0410 	add.w	r4, r6, #16
 800ed62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed6e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ed72:	1d33      	adds	r3, r6, #4
 800ed74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed76:	6838      	ldr	r0, [r7, #0]
 800ed78:	f005 fec6 	bl	8014b08 <USB_DevInit>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d005      	beq.n	800ed8e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2202      	movs	r2, #2
 800ed86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e014      	b.n	800edb8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d102      	bne.n	800edac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f001 f97a 	bl	80100a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f007 f814 	bl	8015dde <USB_DevDisconnect>

  return HAL_OK;
 800edb6:	2300      	movs	r3, #0
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d101      	bne.n	800edd6 <HAL_PCD_Start+0x16>
 800edd2:	2302      	movs	r3, #2
 800edd4:	e012      	b.n	800edfc <HAL_PCD_Start+0x3c>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f005 fe22 	bl	8014a2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4618      	mov	r0, r3
 800edee:	f006 ffd5 	bl	8015d9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800edfa:	2300      	movs	r3, #0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ee04:	b590      	push	{r4, r7, lr}
 800ee06:	b08d      	sub	sp, #52	; 0x34
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f007 f8b4 	bl	8015f88 <USB_GetMode>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f040 84b7 	bne.w	800f796 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f006 fff7 	bl	8015e20 <USB_ReadInterrupts>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	f000 84ad 	beq.w	800f794 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	0a1b      	lsrs	r3, r3, #8
 800ee44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f006 ffe4 	bl	8015e20 <USB_ReadInterrupts>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f003 0302 	and.w	r3, r3, #2
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d107      	bne.n	800ee72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	695a      	ldr	r2, [r3, #20]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f002 0202 	and.w	r2, r2, #2
 800ee70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f006 ffd2 	bl	8015e20 <USB_ReadInterrupts>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	f003 0310 	and.w	r3, r3, #16
 800ee82:	2b10      	cmp	r3, #16
 800ee84:	d161      	bne.n	800ef4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	699a      	ldr	r2, [r3, #24]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f022 0210 	bic.w	r2, r2, #16
 800ee94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	f003 020f 	and.w	r2, r3, #15
 800eea2:	4613      	mov	r3, r2
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	4413      	add	r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	0c5b      	lsrs	r3, r3, #17
 800eeba:	f003 030f 	and.w	r3, r3, #15
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d124      	bne.n	800ef0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800eec2:	69ba      	ldr	r2, [r7, #24]
 800eec4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800eec8:	4013      	ands	r3, r2
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d035      	beq.n	800ef3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	091b      	lsrs	r3, r3, #4
 800eed6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800eed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eedc:	b29b      	uxth	r3, r3
 800eede:	461a      	mov	r2, r3
 800eee0:	6a38      	ldr	r0, [r7, #32]
 800eee2:	f006 fe09 	bl	8015af8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	691a      	ldr	r2, [r3, #16]
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	091b      	lsrs	r3, r3, #4
 800eeee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eef2:	441a      	add	r2, r3
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	6a1a      	ldr	r2, [r3, #32]
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	091b      	lsrs	r3, r3, #4
 800ef00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef04:	441a      	add	r2, r3
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	621a      	str	r2, [r3, #32]
 800ef0a:	e016      	b.n	800ef3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	0c5b      	lsrs	r3, r3, #17
 800ef10:	f003 030f 	and.w	r3, r3, #15
 800ef14:	2b06      	cmp	r3, #6
 800ef16:	d110      	bne.n	800ef3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ef1e:	2208      	movs	r2, #8
 800ef20:	4619      	mov	r1, r3
 800ef22:	6a38      	ldr	r0, [r7, #32]
 800ef24:	f006 fde8 	bl	8015af8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	6a1a      	ldr	r2, [r3, #32]
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	091b      	lsrs	r3, r3, #4
 800ef30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef34:	441a      	add	r2, r3
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	699a      	ldr	r2, [r3, #24]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f042 0210 	orr.w	r2, r2, #16
 800ef48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f006 ff66 	bl	8015e20 <USB_ReadInterrupts>
 800ef54:	4603      	mov	r3, r0
 800ef56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ef5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ef5e:	f040 80a7 	bne.w	800f0b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ef62:	2300      	movs	r3, #0
 800ef64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f006 ff8c 	bl	8015e88 <USB_ReadDevAllOutEpInterrupt>
 800ef70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ef72:	e099      	b.n	800f0a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	f003 0301 	and.w	r3, r3, #1
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 808e 	beq.w	800f09c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef86:	b2d2      	uxtb	r2, r2
 800ef88:	4611      	mov	r1, r2
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f006 ffb0 	bl	8015ef0 <USB_ReadDevOutEPInterrupt>
 800ef90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	f003 0301 	and.w	r3, r3, #1
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00c      	beq.n	800efb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	015a      	lsls	r2, r3, #5
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	4413      	add	r3, r2
 800efa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efa8:	461a      	mov	r2, r3
 800efaa:	2301      	movs	r3, #1
 800efac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800efae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 feef 	bl	800fd94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	f003 0308 	and.w	r3, r3, #8
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00c      	beq.n	800efda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	015a      	lsls	r2, r3, #5
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	4413      	add	r3, r2
 800efc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efcc:	461a      	mov	r2, r3
 800efce:	2308      	movs	r3, #8
 800efd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800efd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 ffc5 	bl	800ff64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	f003 0310 	and.w	r3, r3, #16
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d008      	beq.n	800eff6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	015a      	lsls	r2, r3, #5
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	4413      	add	r3, r2
 800efec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff0:	461a      	mov	r2, r3
 800eff2:	2310      	movs	r3, #16
 800eff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f003 0302 	and.w	r3, r3, #2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d030      	beq.n	800f062 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f000:	6a3b      	ldr	r3, [r7, #32]
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f008:	2b80      	cmp	r3, #128	; 0x80
 800f00a:	d109      	bne.n	800f020 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	69fa      	ldr	r2, [r7, #28]
 800f016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f01a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f01e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f022:	4613      	mov	r3, r2
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	4413      	add	r3, r2
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	4413      	add	r3, r2
 800f032:	3304      	adds	r3, #4
 800f034:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	78db      	ldrb	r3, [r3, #3]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d108      	bne.n	800f050 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	2200      	movs	r2, #0
 800f042:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f046:	b2db      	uxtb	r3, r3
 800f048:	4619      	mov	r1, r3
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f00f f950 	bl	801e2f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	015a      	lsls	r2, r3, #5
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	4413      	add	r3, r2
 800f058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05c:	461a      	mov	r2, r3
 800f05e:	2302      	movs	r3, #2
 800f060:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	f003 0320 	and.w	r3, r3, #32
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d008      	beq.n	800f07e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06e:	015a      	lsls	r2, r3, #5
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	4413      	add	r3, r2
 800f074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f078:	461a      	mov	r2, r3
 800f07a:	2320      	movs	r3, #32
 800f07c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f084:	2b00      	cmp	r3, #0
 800f086:	d009      	beq.n	800f09c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	015a      	lsls	r2, r3, #5
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	4413      	add	r3, r2
 800f090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f094:	461a      	mov	r2, r3
 800f096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f09a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	3301      	adds	r3, #1
 800f0a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	085b      	lsrs	r3, r3, #1
 800f0a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f47f af62 	bne.w	800ef74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f006 feb3 	bl	8015e20 <USB_ReadInterrupts>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0c4:	f040 80db 	bne.w	800f27e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f006 fef5 	bl	8015ebc <USB_ReadDevAllInEpInterrupt>
 800f0d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f0d8:	e0cd      	b.n	800f276 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	f003 0301 	and.w	r3, r3, #1
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	f000 80c2 	beq.w	800f26a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ec:	b2d2      	uxtb	r2, r2
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f006 ff1b 	bl	8015f2c <USB_ReadDevInEPInterrupt>
 800f0f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d057      	beq.n	800f1b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f104:	f003 030f 	and.w	r3, r3, #15
 800f108:	2201      	movs	r2, #1
 800f10a:	fa02 f303 	lsl.w	r3, r2, r3
 800f10e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	43db      	mvns	r3, r3
 800f11c:	69f9      	ldr	r1, [r7, #28]
 800f11e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f122:	4013      	ands	r3, r2
 800f124:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f128:	015a      	lsls	r2, r3, #5
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	4413      	add	r3, r2
 800f12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f132:	461a      	mov	r2, r3
 800f134:	2301      	movs	r3, #1
 800f136:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	691b      	ldr	r3, [r3, #16]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d132      	bne.n	800f1a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f140:	6879      	ldr	r1, [r7, #4]
 800f142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f144:	4613      	mov	r3, r2
 800f146:	00db      	lsls	r3, r3, #3
 800f148:	4413      	add	r3, r2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	440b      	add	r3, r1
 800f14e:	334c      	adds	r3, #76	; 0x4c
 800f150:	6819      	ldr	r1, [r3, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f156:	4613      	mov	r3, r2
 800f158:	00db      	lsls	r3, r3, #3
 800f15a:	4413      	add	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4403      	add	r3, r0
 800f160:	3348      	adds	r3, #72	; 0x48
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4419      	add	r1, r3
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16a:	4613      	mov	r3, r2
 800f16c:	00db      	lsls	r3, r3, #3
 800f16e:	4413      	add	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4403      	add	r3, r0
 800f174:	334c      	adds	r3, #76	; 0x4c
 800f176:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d113      	bne.n	800f1a6 <HAL_PCD_IRQHandler+0x3a2>
 800f17e:	6879      	ldr	r1, [r7, #4]
 800f180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f182:	4613      	mov	r3, r2
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	4413      	add	r3, r2
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	440b      	add	r3, r1
 800f18c:	3354      	adds	r3, #84	; 0x54
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d108      	bne.n	800f1a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6818      	ldr	r0, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f19e:	461a      	mov	r2, r3
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	f006 ff23 	bl	8015fec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f00f f81a 	bl	801e1e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	f003 0308 	and.w	r3, r3, #8
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d008      	beq.n	800f1ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	015a      	lsls	r2, r3, #5
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	2308      	movs	r3, #8
 800f1cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d008      	beq.n	800f1ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	015a      	lsls	r2, r3, #5
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	4413      	add	r3, r2
 800f1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	2310      	movs	r3, #16
 800f1e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d008      	beq.n	800f206 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	015a      	lsls	r2, r3, #5
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f200:	461a      	mov	r2, r3
 800f202:	2340      	movs	r3, #64	; 0x40
 800f204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d023      	beq.n	800f258 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800f210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f212:	6a38      	ldr	r0, [r7, #32]
 800f214:	f005 fdd6 	bl	8014dc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800f218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f21a:	4613      	mov	r3, r2
 800f21c:	00db      	lsls	r3, r3, #3
 800f21e:	4413      	add	r3, r2
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	3338      	adds	r3, #56	; 0x38
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	4413      	add	r3, r2
 800f228:	3304      	adds	r3, #4
 800f22a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	78db      	ldrb	r3, [r3, #3]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d108      	bne.n	800f246 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	2200      	movs	r2, #0
 800f238:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f00f f867 	bl	801e314 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f252:	461a      	mov	r2, r3
 800f254:	2302      	movs	r3, #2
 800f256:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fd08 	bl	800fc7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	3301      	adds	r3, #1
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	085b      	lsrs	r3, r3, #1
 800f274:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f47f af2e 	bne.w	800f0da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4618      	mov	r0, r3
 800f284:	f006 fdcc 	bl	8015e20 <USB_ReadInterrupts>
 800f288:	4603      	mov	r3, r0
 800f28a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f28e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f292:	d122      	bne.n	800f2da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	69fa      	ldr	r2, [r7, #28]
 800f29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2a2:	f023 0301 	bic.w	r3, r3, #1
 800f2a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d108      	bne.n	800f2c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f00f f9e7 	bl	801e690 <HAL_PCDEx_LPM_Callback>
 800f2c2:	e002      	b.n	800f2ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f00f f805 	bl	801e2d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	695a      	ldr	r2, [r3, #20]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f2d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f006 fd9e 	bl	8015e20 <USB_ReadInterrupts>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2ee:	d112      	bne.n	800f316 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	f003 0301 	and.w	r3, r3, #1
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d102      	bne.n	800f306 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f00e ffc1 	bl	801e288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	695a      	ldr	r2, [r3, #20]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f314:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4618      	mov	r0, r3
 800f31c:	f006 fd80 	bl	8015e20 <USB_ReadInterrupts>
 800f320:	4603      	mov	r3, r0
 800f322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f32a:	d121      	bne.n	800f370 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	695a      	ldr	r2, [r3, #20]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800f33a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f342:	2b00      	cmp	r3, #0
 800f344:	d111      	bne.n	800f36a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f354:	089b      	lsrs	r3, r3, #2
 800f356:	f003 020f 	and.w	r2, r3, #15
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f360:	2101      	movs	r1, #1
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f00f f994 	bl	801e690 <HAL_PCDEx_LPM_Callback>
 800f368:	e002      	b.n	800f370 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f00e ff8c 	bl	801e288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4618      	mov	r0, r3
 800f376:	f006 fd53 	bl	8015e20 <USB_ReadInterrupts>
 800f37a:	4603      	mov	r3, r0
 800f37c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f384:	f040 80b7 	bne.w	800f4f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f396:	f023 0301 	bic.w	r3, r3, #1
 800f39a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2110      	movs	r1, #16
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f005 fd0e 	bl	8014dc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3ac:	e046      	b.n	800f43c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b0:	015a      	lsls	r2, r3, #5
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	015a      	lsls	r2, r3, #5
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3d2:	0151      	lsls	r1, r2, #5
 800f3d4:	69fa      	ldr	r2, [r7, #28]
 800f3d6:	440a      	add	r2, r1
 800f3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e4:	015a      	lsls	r2, r3, #5
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f8:	015a      	lsls	r2, r3, #5
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f406:	0151      	lsls	r1, r2, #5
 800f408:	69fa      	ldr	r2, [r7, #28]
 800f40a:	440a      	add	r2, r1
 800f40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f410:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f414:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f418:	015a      	lsls	r2, r3, #5
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	4413      	add	r3, r2
 800f41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f426:	0151      	lsls	r1, r2, #5
 800f428:	69fa      	ldr	r2, [r7, #28]
 800f42a:	440a      	add	r2, r1
 800f42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f434:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	3301      	adds	r3, #1
 800f43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f442:	429a      	cmp	r2, r3
 800f444:	d3b3      	bcc.n	800f3ae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f44c:	69db      	ldr	r3, [r3, #28]
 800f44e:	69fa      	ldr	r2, [r7, #28]
 800f450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f454:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f458:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d016      	beq.n	800f490 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f46c:	69fa      	ldr	r2, [r7, #28]
 800f46e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f472:	f043 030b 	orr.w	r3, r3, #11
 800f476:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f482:	69fa      	ldr	r2, [r7, #28]
 800f484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f488:	f043 030b 	orr.w	r3, r3, #11
 800f48c:	6453      	str	r3, [r2, #68]	; 0x44
 800f48e:	e015      	b.n	800f4bc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f496:	695a      	ldr	r2, [r3, #20]
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f49e:	4619      	mov	r1, r3
 800f4a0:	f242 032b 	movw	r3, #8235	; 0x202b
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	69fa      	ldr	r2, [r7, #28]
 800f4b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4b6:	f043 030b 	orr.w	r3, r3, #11
 800f4ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	69fa      	ldr	r2, [r7, #28]
 800f4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f4ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6818      	ldr	r0, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	f006 fd83 	bl	8015fec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	695a      	ldr	r2, [r3, #20]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f4f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f006 fc90 	bl	8015e20 <USB_ReadInterrupts>
 800f500:	4603      	mov	r3, r0
 800f502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f50a:	d124      	bne.n	800f556 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4618      	mov	r0, r3
 800f512:	f006 fd47 	bl	8015fa4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f005 fccf 	bl	8014ebe <USB_GetDevSpeed>
 800f520:	4603      	mov	r3, r0
 800f522:	461a      	mov	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681c      	ldr	r4, [r3, #0]
 800f52c:	f001 fad0 	bl	8010ad0 <HAL_RCC_GetHCLKFreq>
 800f530:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f536:	b2db      	uxtb	r3, r3
 800f538:	461a      	mov	r2, r3
 800f53a:	4620      	mov	r0, r4
 800f53c:	f005 f9d4 	bl	80148e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f00e fe78 	bl	801e236 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	695a      	ldr	r2, [r3, #20]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f554:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f006 fc60 	bl	8015e20 <USB_ReadInterrupts>
 800f560:	4603      	mov	r3, r0
 800f562:	f003 0308 	and.w	r3, r3, #8
 800f566:	2b08      	cmp	r3, #8
 800f568:	d10a      	bne.n	800f580 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f00e fe55 	bl	801e21a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	695a      	ldr	r2, [r3, #20]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f002 0208 	and.w	r2, r2, #8
 800f57e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f006 fc4b 	bl	8015e20 <USB_ReadInterrupts>
 800f58a:	4603      	mov	r3, r0
 800f58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f590:	2b80      	cmp	r3, #128	; 0x80
 800f592:	d122      	bne.n	800f5da <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f5a4:	e014      	b.n	800f5d0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800f5a6:	6879      	ldr	r1, [r7, #4]
 800f5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	4413      	add	r3, r2
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	440b      	add	r3, r1
 800f5b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d105      	bne.n	800f5ca <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 fb27 	bl	800fc18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d3e5      	bcc.n	800f5a6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f006 fc1e 	bl	8015e20 <USB_ReadInterrupts>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5ee:	d13b      	bne.n	800f668 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f5f4:	e02b      	b.n	800f64e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	015a      	lsls	r2, r3, #5
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f606:	6879      	ldr	r1, [r7, #4]
 800f608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f60a:	4613      	mov	r3, r2
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	4413      	add	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	440b      	add	r3, r1
 800f614:	3340      	adds	r3, #64	; 0x40
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d115      	bne.n	800f648 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800f61c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f61e:	2b00      	cmp	r3, #0
 800f620:	da12      	bge.n	800f648 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f626:	4613      	mov	r3, r2
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	4413      	add	r3, r2
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	440b      	add	r3, r1
 800f630:	333f      	adds	r3, #63	; 0x3f
 800f632:	2201      	movs	r2, #1
 800f634:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800f636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 fae8 	bl	800fc18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	3301      	adds	r3, #1
 800f64c:	627b      	str	r3, [r7, #36]	; 0x24
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f654:	429a      	cmp	r2, r3
 800f656:	d3ce      	bcc.n	800f5f6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	695a      	ldr	r2, [r3, #20]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800f666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f006 fbd7 	bl	8015e20 <USB_ReadInterrupts>
 800f672:	4603      	mov	r3, r0
 800f674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f67c:	d155      	bne.n	800f72a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f67e:	2301      	movs	r3, #1
 800f680:	627b      	str	r3, [r7, #36]	; 0x24
 800f682:	e045      	b.n	800f710 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800f684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800f694:	6879      	ldr	r1, [r7, #4]
 800f696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f698:	4613      	mov	r3, r2
 800f69a:	00db      	lsls	r3, r3, #3
 800f69c:	4413      	add	r3, r2
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	440b      	add	r3, r1
 800f6a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d12e      	bne.n	800f70a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800f6ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	da2b      	bge.n	800f70a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800f6be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d121      	bne.n	800f70a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	00db      	lsls	r3, r3, #3
 800f6ce:	4413      	add	r3, r2
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	440b      	add	r3, r1
 800f6d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f6d8:	2201      	movs	r2, #1
 800f6da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	699b      	ldr	r3, [r3, #24]
 800f6e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6e4:	6a3b      	ldr	r3, [r7, #32]
 800f6e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800f6e8:	6a3b      	ldr	r3, [r7, #32]
 800f6ea:	695b      	ldr	r3, [r3, #20]
 800f6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10a      	bne.n	800f70a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	69fa      	ldr	r2, [r7, #28]
 800f6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f706:	6053      	str	r3, [r2, #4]
            break;
 800f708:	e007      	b.n	800f71a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	3301      	adds	r3, #1
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f716:	429a      	cmp	r2, r3
 800f718:	d3b4      	bcc.n	800f684 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	695a      	ldr	r2, [r3, #20]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4618      	mov	r0, r3
 800f730:	f006 fb76 	bl	8015e20 <USB_ReadInterrupts>
 800f734:	4603      	mov	r3, r0
 800f736:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f73a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f73e:	d10a      	bne.n	800f756 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f00e fdf9 	bl	801e338 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	695a      	ldr	r2, [r3, #20]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f006 fb60 	bl	8015e20 <USB_ReadInterrupts>
 800f760:	4603      	mov	r3, r0
 800f762:	f003 0304 	and.w	r3, r3, #4
 800f766:	2b04      	cmp	r3, #4
 800f768:	d115      	bne.n	800f796 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f00e fde9 	bl	801e354 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	6859      	ldr	r1, [r3, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	69ba      	ldr	r2, [r7, #24]
 800f78e:	430a      	orrs	r2, r1
 800f790:	605a      	str	r2, [r3, #4]
 800f792:	e000      	b.n	800f796 <HAL_PCD_IRQHandler+0x992>
      return;
 800f794:	bf00      	nop
    }
  }
}
 800f796:	3734      	adds	r7, #52	; 0x34
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd90      	pop	{r4, r7, pc}

0800f79c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d101      	bne.n	800f7b6 <HAL_PCD_SetAddress+0x1a>
 800f7b2:	2302      	movs	r3, #2
 800f7b4:	e013      	b.n	800f7de <HAL_PCD_SetAddress+0x42>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	78fa      	ldrb	r2, [r7, #3]
 800f7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	78fa      	ldrb	r2, [r7, #3]
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f006 fabe 	bl	8015d50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	4608      	mov	r0, r1
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	70fb      	strb	r3, [r7, #3]
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	803b      	strh	r3, [r7, #0]
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	da0f      	bge.n	800f82c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f80c:	78fb      	ldrb	r3, [r7, #3]
 800f80e:	f003 020f 	and.w	r2, r3, #15
 800f812:	4613      	mov	r3, r2
 800f814:	00db      	lsls	r3, r3, #3
 800f816:	4413      	add	r3, r2
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	3338      	adds	r3, #56	; 0x38
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	4413      	add	r3, r2
 800f820:	3304      	adds	r3, #4
 800f822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2201      	movs	r2, #1
 800f828:	705a      	strb	r2, [r3, #1]
 800f82a:	e00f      	b.n	800f84c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f82c:	78fb      	ldrb	r3, [r7, #3]
 800f82e:	f003 020f 	and.w	r2, r3, #15
 800f832:	4613      	mov	r3, r2
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	4413      	add	r3, r2
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	4413      	add	r3, r2
 800f842:	3304      	adds	r3, #4
 800f844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2200      	movs	r2, #0
 800f84a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f84c:	78fb      	ldrb	r3, [r7, #3]
 800f84e:	f003 030f 	and.w	r3, r3, #15
 800f852:	b2da      	uxtb	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f858:	883a      	ldrh	r2, [r7, #0]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	78ba      	ldrb	r2, [r7, #2]
 800f862:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	785b      	ldrb	r3, [r3, #1]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d004      	beq.n	800f876 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	b29a      	uxth	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f876:	78bb      	ldrb	r3, [r7, #2]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d102      	bne.n	800f882 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2200      	movs	r2, #0
 800f880:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d101      	bne.n	800f890 <HAL_PCD_EP_Open+0xaa>
 800f88c:	2302      	movs	r3, #2
 800f88e:	e00e      	b.n	800f8ae <HAL_PCD_EP_Open+0xc8>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68f9      	ldr	r1, [r7, #12]
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f005 fb32 	bl	8014f08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800f8ac:	7afb      	ldrb	r3, [r7, #11]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b084      	sub	sp, #16
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	460b      	mov	r3, r1
 800f8c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f8c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	da0f      	bge.n	800f8ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f8ca:	78fb      	ldrb	r3, [r7, #3]
 800f8cc:	f003 020f 	and.w	r2, r3, #15
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	00db      	lsls	r3, r3, #3
 800f8d4:	4413      	add	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	3338      	adds	r3, #56	; 0x38
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	4413      	add	r3, r2
 800f8de:	3304      	adds	r3, #4
 800f8e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	705a      	strb	r2, [r3, #1]
 800f8e8:	e00f      	b.n	800f90a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	f003 020f 	and.w	r2, r3, #15
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	4413      	add	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	4413      	add	r3, r2
 800f900:	3304      	adds	r3, #4
 800f902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800f90a:	78fb      	ldrb	r3, [r7, #3]
 800f90c:	f003 030f 	and.w	r3, r3, #15
 800f910:	b2da      	uxtb	r2, r3
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d101      	bne.n	800f924 <HAL_PCD_EP_Close+0x6e>
 800f920:	2302      	movs	r3, #2
 800f922:	e00e      	b.n	800f942 <HAL_PCD_EP_Close+0x8c>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2201      	movs	r2, #1
 800f928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	68f9      	ldr	r1, [r7, #12]
 800f932:	4618      	mov	r0, r3
 800f934:	f005 fb70 	bl	8015018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b086      	sub	sp, #24
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	607a      	str	r2, [r7, #4]
 800f954:	603b      	str	r3, [r7, #0]
 800f956:	460b      	mov	r3, r1
 800f958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f95a:	7afb      	ldrb	r3, [r7, #11]
 800f95c:	f003 020f 	and.w	r2, r3, #15
 800f960:	4613      	mov	r3, r2
 800f962:	00db      	lsls	r3, r3, #3
 800f964:	4413      	add	r3, r2
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	4413      	add	r3, r2
 800f970:	3304      	adds	r3, #4
 800f972:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	683a      	ldr	r2, [r7, #0]
 800f97e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	2200      	movs	r2, #0
 800f984:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2200      	movs	r2, #0
 800f98a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f98c:	7afb      	ldrb	r3, [r7, #11]
 800f98e:	f003 030f 	and.w	r3, r3, #15
 800f992:	b2da      	uxtb	r2, r3
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	691b      	ldr	r3, [r3, #16]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d102      	bne.n	800f9a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f9a6:	7afb      	ldrb	r3, [r7, #11]
 800f9a8:	f003 030f 	and.w	r3, r3, #15
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d109      	bne.n	800f9c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6818      	ldr	r0, [r3, #0]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	6979      	ldr	r1, [r7, #20]
 800f9be:	f005 fe57 	bl	8015670 <USB_EP0StartXfer>
 800f9c2:	e008      	b.n	800f9d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6818      	ldr	r0, [r3, #0]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	6979      	ldr	r1, [r7, #20]
 800f9d2:	f005 fbfd 	bl	80151d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f9d6:	2300      	movs	r3, #0
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3718      	adds	r7, #24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	f003 020f 	and.w	r2, r3, #15
 800f9f2:	6879      	ldr	r1, [r7, #4]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	4413      	add	r3, r2
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	440b      	add	r3, r1
 800f9fe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fa02:	681b      	ldr	r3, [r3, #0]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	607a      	str	r2, [r7, #4]
 800fa1a:	603b      	str	r3, [r7, #0]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fa20:	7afb      	ldrb	r3, [r7, #11]
 800fa22:	f003 020f 	and.w	r2, r3, #15
 800fa26:	4613      	mov	r3, r2
 800fa28:	00db      	lsls	r3, r3, #3
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	3338      	adds	r3, #56	; 0x38
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4413      	add	r3, r2
 800fa34:	3304      	adds	r3, #4
 800fa36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2200      	movs	r2, #0
 800fa48:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fa50:	7afb      	ldrb	r3, [r7, #11]
 800fa52:	f003 030f 	and.w	r3, r3, #15
 800fa56:	b2da      	uxtb	r2, r3
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d102      	bne.n	800fa6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fa6a:	7afb      	ldrb	r3, [r7, #11]
 800fa6c:	f003 030f 	and.w	r3, r3, #15
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d109      	bne.n	800fa88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6818      	ldr	r0, [r3, #0]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	461a      	mov	r2, r3
 800fa80:	6979      	ldr	r1, [r7, #20]
 800fa82:	f005 fdf5 	bl	8015670 <USB_EP0StartXfer>
 800fa86:	e008      	b.n	800fa9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	6818      	ldr	r0, [r3, #0]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	691b      	ldr	r3, [r3, #16]
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	461a      	mov	r2, r3
 800fa94:	6979      	ldr	r1, [r7, #20]
 800fa96:	f005 fb9b 	bl	80151d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fa9a:	2300      	movs	r3, #0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3718      	adds	r7, #24
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	460b      	mov	r3, r1
 800faae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fab0:	78fb      	ldrb	r3, [r7, #3]
 800fab2:	f003 020f 	and.w	r2, r3, #15
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d901      	bls.n	800fac2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800fabe:	2301      	movs	r3, #1
 800fac0:	e050      	b.n	800fb64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	da0f      	bge.n	800faea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800faca:	78fb      	ldrb	r3, [r7, #3]
 800facc:	f003 020f 	and.w	r2, r3, #15
 800fad0:	4613      	mov	r3, r2
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	4413      	add	r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	3338      	adds	r3, #56	; 0x38
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	4413      	add	r3, r2
 800fade:	3304      	adds	r3, #4
 800fae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2201      	movs	r2, #1
 800fae6:	705a      	strb	r2, [r3, #1]
 800fae8:	e00d      	b.n	800fb06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800faea:	78fa      	ldrb	r2, [r7, #3]
 800faec:	4613      	mov	r3, r2
 800faee:	00db      	lsls	r3, r3, #3
 800faf0:	4413      	add	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	4413      	add	r3, r2
 800fafc:	3304      	adds	r3, #4
 800fafe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2200      	movs	r2, #0
 800fb04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	f003 030f 	and.w	r3, r3, #15
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d101      	bne.n	800fb26 <HAL_PCD_EP_SetStall+0x82>
 800fb22:	2302      	movs	r3, #2
 800fb24:	e01e      	b.n	800fb64 <HAL_PCD_EP_SetStall+0xc0>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68f9      	ldr	r1, [r7, #12]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f006 f837 	bl	8015ba8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fb3a:	78fb      	ldrb	r3, [r7, #3]
 800fb3c:	f003 030f 	and.w	r3, r3, #15
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d10a      	bne.n	800fb5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6818      	ldr	r0, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	b2d9      	uxtb	r1, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fb54:	461a      	mov	r2, r3
 800fb56:	f006 fa49 	bl	8015fec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	460b      	mov	r3, r1
 800fb76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fb78:	78fb      	ldrb	r3, [r7, #3]
 800fb7a:	f003 020f 	and.w	r2, r3, #15
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d901      	bls.n	800fb8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	e042      	b.n	800fc10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fb8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	da0f      	bge.n	800fbb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fb92:	78fb      	ldrb	r3, [r7, #3]
 800fb94:	f003 020f 	and.w	r2, r3, #15
 800fb98:	4613      	mov	r3, r2
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	4413      	add	r3, r2
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	3338      	adds	r3, #56	; 0x38
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	4413      	add	r3, r2
 800fba6:	3304      	adds	r3, #4
 800fba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2201      	movs	r2, #1
 800fbae:	705a      	strb	r2, [r3, #1]
 800fbb0:	e00f      	b.n	800fbd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fbb2:	78fb      	ldrb	r3, [r7, #3]
 800fbb4:	f003 020f 	and.w	r2, r3, #15
 800fbb8:	4613      	mov	r3, r2
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	4413      	add	r3, r2
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	3304      	adds	r3, #4
 800fbca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fbd8:	78fb      	ldrb	r3, [r7, #3]
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d101      	bne.n	800fbf2 <HAL_PCD_EP_ClrStall+0x86>
 800fbee:	2302      	movs	r3, #2
 800fbf0:	e00e      	b.n	800fc10 <HAL_PCD_EP_ClrStall+0xa4>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	68f9      	ldr	r1, [r7, #12]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f006 f83f 	bl	8015c84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	460b      	mov	r3, r1
 800fc22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800fc24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	da0c      	bge.n	800fc46 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc2c:	78fb      	ldrb	r3, [r7, #3]
 800fc2e:	f003 020f 	and.w	r2, r3, #15
 800fc32:	4613      	mov	r3, r2
 800fc34:	00db      	lsls	r3, r3, #3
 800fc36:	4413      	add	r3, r2
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	3338      	adds	r3, #56	; 0x38
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	4413      	add	r3, r2
 800fc40:	3304      	adds	r3, #4
 800fc42:	60fb      	str	r3, [r7, #12]
 800fc44:	e00c      	b.n	800fc60 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc46:	78fb      	ldrb	r3, [r7, #3]
 800fc48:	f003 020f 	and.w	r2, r3, #15
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	00db      	lsls	r3, r3, #3
 800fc50:	4413      	add	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	3304      	adds	r3, #4
 800fc5e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68f9      	ldr	r1, [r7, #12]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f005 fe5e 	bl	8015928 <USB_EPStopXfer>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800fc70:	7afb      	ldrb	r3, [r7, #11]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b08a      	sub	sp, #40	; 0x28
 800fc7e:	af02      	add	r7, sp, #8
 800fc80:	6078      	str	r0, [r7, #4]
 800fc82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800fc8e:	683a      	ldr	r2, [r7, #0]
 800fc90:	4613      	mov	r3, r2
 800fc92:	00db      	lsls	r3, r3, #3
 800fc94:	4413      	add	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	3338      	adds	r3, #56	; 0x38
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	3304      	adds	r3, #4
 800fca0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6a1a      	ldr	r2, [r3, #32]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d901      	bls.n	800fcb2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e06c      	b.n	800fd8c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	699a      	ldr	r2, [r3, #24]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	69fa      	ldr	r2, [r7, #28]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d902      	bls.n	800fcce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	3303      	adds	r3, #3
 800fcd2:	089b      	lsrs	r3, r3, #2
 800fcd4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fcd6:	e02b      	b.n	800fd30 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	699a      	ldr	r2, [r3, #24]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6a1b      	ldr	r3, [r3, #32]
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	69fa      	ldr	r2, [r7, #28]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d902      	bls.n	800fcf4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	3303      	adds	r3, #3
 800fcf8:	089b      	lsrs	r3, r3, #2
 800fcfa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6919      	ldr	r1, [r3, #16]
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	4603      	mov	r3, r0
 800fd12:	6978      	ldr	r0, [r7, #20]
 800fd14:	f005 feb2 	bl	8015a7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	691a      	ldr	r2, [r3, #16]
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	441a      	add	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6a1a      	ldr	r2, [r3, #32]
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	441a      	add	r2, r3
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	015a      	lsls	r2, r3, #5
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	4413      	add	r3, r2
 800fd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd3c:	699b      	ldr	r3, [r3, #24]
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d809      	bhi.n	800fd5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6a1a      	ldr	r2, [r3, #32]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d203      	bcs.n	800fd5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	699b      	ldr	r3, [r3, #24]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1be      	bne.n	800fcd8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	699a      	ldr	r2, [r3, #24]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6a1b      	ldr	r3, [r3, #32]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d811      	bhi.n	800fd8a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	f003 030f 	and.w	r3, r3, #15
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	43db      	mvns	r3, r3
 800fd80:	6939      	ldr	r1, [r7, #16]
 800fd82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd86:	4013      	ands	r3, r2
 800fd88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3720      	adds	r7, #32
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	333c      	adds	r3, #60	; 0x3c
 800fdac:	3304      	adds	r3, #4
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	015a      	lsls	r2, r3, #5
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	4413      	add	r3, r2
 800fdba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d17b      	bne.n	800fec2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	f003 0308 	and.w	r3, r3, #8
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d015      	beq.n	800fe00 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	4a61      	ldr	r2, [pc, #388]	; (800ff5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	f240 80b9 	bls.w	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f000 80b3 	beq.w	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	015a      	lsls	r2, r3, #5
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdfc:	6093      	str	r3, [r2, #8]
 800fdfe:	e0a7      	b.n	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	f003 0320 	and.w	r3, r3, #32
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d009      	beq.n	800fe1e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	015a      	lsls	r2, r3, #5
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	4413      	add	r3, r2
 800fe12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe16:	461a      	mov	r2, r3
 800fe18:	2320      	movs	r3, #32
 800fe1a:	6093      	str	r3, [r2, #8]
 800fe1c:	e098      	b.n	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f040 8093 	bne.w	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	4a4b      	ldr	r2, [pc, #300]	; (800ff5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d90f      	bls.n	800fe52 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00a      	beq.n	800fe52 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	015a      	lsls	r2, r3, #5
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	4413      	add	r3, r2
 800fe44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe48:	461a      	mov	r2, r3
 800fe4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe4e:	6093      	str	r3, [r2, #8]
 800fe50:	e07e      	b.n	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800fe52:	683a      	ldr	r2, [r7, #0]
 800fe54:	4613      	mov	r3, r2
 800fe56:	00db      	lsls	r3, r3, #3
 800fe58:	4413      	add	r3, r2
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	4413      	add	r3, r2
 800fe64:	3304      	adds	r3, #4
 800fe66:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	69da      	ldr	r2, [r3, #28]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	0159      	lsls	r1, r3, #5
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	440b      	add	r3, r1
 800fe74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe7e:	1ad2      	subs	r2, r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d114      	bne.n	800feb4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	699b      	ldr	r3, [r3, #24]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d109      	bne.n	800fea6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6818      	ldr	r0, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	2101      	movs	r1, #1
 800fea0:	f006 f8a4 	bl	8015fec <USB_EP0_OutStart>
 800fea4:	e006      	b.n	800feb4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	691a      	ldr	r2, [r3, #16]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6a1b      	ldr	r3, [r3, #32]
 800feae:	441a      	add	r2, r3
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	4619      	mov	r1, r3
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f00e f978 	bl	801e1b0 <HAL_PCD_DataOutStageCallback>
 800fec0:	e046      	b.n	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	4a26      	ldr	r2, [pc, #152]	; (800ff60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d124      	bne.n	800ff14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00a      	beq.n	800feea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee0:	461a      	mov	r2, r3
 800fee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fee6:	6093      	str	r3, [r2, #8]
 800fee8:	e032      	b.n	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	f003 0320 	and.w	r3, r3, #32
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d008      	beq.n	800ff06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	015a      	lsls	r2, r3, #5
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	4413      	add	r3, r2
 800fefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff00:	461a      	mov	r2, r3
 800ff02:	2320      	movs	r3, #32
 800ff04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f00e f94f 	bl	801e1b0 <HAL_PCD_DataOutStageCallback>
 800ff12:	e01d      	b.n	800ff50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d114      	bne.n	800ff44 <PCD_EP_OutXfrComplete_int+0x1b0>
 800ff1a:	6879      	ldr	r1, [r7, #4]
 800ff1c:	683a      	ldr	r2, [r7, #0]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	00db      	lsls	r3, r3, #3
 800ff22:	4413      	add	r3, r2
 800ff24:	009b      	lsls	r3, r3, #2
 800ff26:	440b      	add	r3, r1
 800ff28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d108      	bne.n	800ff44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6818      	ldr	r0, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	2100      	movs	r1, #0
 800ff40:	f006 f854 	bl	8015fec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f00e f930 	bl	801e1b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3720      	adds	r7, #32
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	4f54300a 	.word	0x4f54300a
 800ff60:	4f54310a 	.word	0x4f54310a

0800ff64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	333c      	adds	r3, #60	; 0x3c
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	015a      	lsls	r2, r3, #5
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	4413      	add	r3, r2
 800ff8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	4a15      	ldr	r2, [pc, #84]	; (800ffec <PCD_EP_OutSetupPacket_int+0x88>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d90e      	bls.n	800ffb8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d009      	beq.n	800ffb8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	015a      	lsls	r2, r3, #5
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	4413      	add	r3, r2
 800ffac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffb6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f00e f8e7 	bl	801e18c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	4a0a      	ldr	r2, [pc, #40]	; (800ffec <PCD_EP_OutSetupPacket_int+0x88>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d90c      	bls.n	800ffe0 <PCD_EP_OutSetupPacket_int+0x7c>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	691b      	ldr	r3, [r3, #16]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d108      	bne.n	800ffe0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6818      	ldr	r0, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ffd8:	461a      	mov	r2, r3
 800ffda:	2101      	movs	r1, #1
 800ffdc:	f006 f806 	bl	8015fec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ffe0:	2300      	movs	r3, #0
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3718      	adds	r7, #24
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	4f54300a 	.word	0x4f54300a

0800fff0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	460b      	mov	r3, r1
 800fffa:	70fb      	strb	r3, [r7, #3]
 800fffc:	4613      	mov	r3, r2
 800fffe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010006:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8010008:	78fb      	ldrb	r3, [r7, #3]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d107      	bne.n	801001e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801000e:	883b      	ldrh	r3, [r7, #0]
 8010010:	0419      	lsls	r1, r3, #16
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	430a      	orrs	r2, r1
 801001a:	629a      	str	r2, [r3, #40]	; 0x28
 801001c:	e028      	b.n	8010070 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010024:	0c1b      	lsrs	r3, r3, #16
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	4413      	add	r3, r2
 801002a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801002c:	2300      	movs	r3, #0
 801002e:	73fb      	strb	r3, [r7, #15]
 8010030:	e00d      	b.n	801004e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	3340      	adds	r3, #64	; 0x40
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	4413      	add	r3, r2
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	0c1b      	lsrs	r3, r3, #16
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	4413      	add	r3, r2
 8010046:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010048:	7bfb      	ldrb	r3, [r7, #15]
 801004a:	3301      	adds	r3, #1
 801004c:	73fb      	strb	r3, [r7, #15]
 801004e:	7bfa      	ldrb	r2, [r7, #15]
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	3b01      	subs	r3, #1
 8010054:	429a      	cmp	r2, r3
 8010056:	d3ec      	bcc.n	8010032 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8010058:	883b      	ldrh	r3, [r7, #0]
 801005a:	0418      	lsls	r0, r3, #16
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6819      	ldr	r1, [r3, #0]
 8010060:	78fb      	ldrb	r3, [r7, #3]
 8010062:	3b01      	subs	r3, #1
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	4302      	orrs	r2, r0
 8010068:	3340      	adds	r3, #64	; 0x40
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	440b      	add	r3, r1
 801006e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr

0801007e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801007e:	b480      	push	{r7}
 8010080:	b083      	sub	sp, #12
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	460b      	mov	r3, r1
 8010088:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	887a      	ldrh	r2, [r7, #2]
 8010090:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	4618      	mov	r0, r3
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2201      	movs	r2, #1
 80100b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80100d0:	4313      	orrs	r3, r2
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3714      	adds	r7, #20
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	10000003 	.word	0x10000003

080100e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80100e8:	b480      	push	{r7}
 80100ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80100ec:	4b05      	ldr	r3, [pc, #20]	; (8010104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a04      	ldr	r2, [pc, #16]	; (8010104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80100f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100f6:	6013      	str	r3, [r2, #0]
}
 80100f8:	bf00      	nop
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr
 8010102:	bf00      	nop
 8010104:	40007000 	.word	0x40007000

08010108 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8010112:	4b23      	ldr	r3, [pc, #140]	; (80101a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8010114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010116:	4a22      	ldr	r2, [pc, #136]	; (80101a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8010118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801011c:	6413      	str	r3, [r2, #64]	; 0x40
 801011e:	4b20      	ldr	r3, [pc, #128]	; (80101a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8010120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010126:	603b      	str	r3, [r7, #0]
 8010128:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801012a:	4b1e      	ldr	r3, [pc, #120]	; (80101a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4a1d      	ldr	r2, [pc, #116]	; (80101a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010134:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010136:	f7fb fe89 	bl	800be4c <HAL_GetTick>
 801013a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801013c:	e009      	b.n	8010152 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801013e:	f7fb fe85 	bl	800be4c <HAL_GetTick>
 8010142:	4602      	mov	r2, r0
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801014c:	d901      	bls.n	8010152 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 801014e:	2303      	movs	r3, #3
 8010150:	e022      	b.n	8010198 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010152:	4b14      	ldr	r3, [pc, #80]	; (80101a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801015a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801015e:	d1ee      	bne.n	801013e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8010160:	4b10      	ldr	r3, [pc, #64]	; (80101a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a0f      	ldr	r2, [pc, #60]	; (80101a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801016a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801016c:	f7fb fe6e 	bl	800be4c <HAL_GetTick>
 8010170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010172:	e009      	b.n	8010188 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010174:	f7fb fe6a 	bl	800be4c <HAL_GetTick>
 8010178:	4602      	mov	r2, r0
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010182:	d901      	bls.n	8010188 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8010184:	2303      	movs	r3, #3
 8010186:	e007      	b.n	8010198 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010188:	4b06      	ldr	r3, [pc, #24]	; (80101a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010194:	d1ee      	bne.n	8010174 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8010196:	2300      	movs	r3, #0
}
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	40023800 	.word	0x40023800
 80101a4:	40007000 	.word	0x40007000

080101a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b086      	sub	sp, #24
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80101b0:	2300      	movs	r3, #0
 80101b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80101ba:	2301      	movs	r3, #1
 80101bc:	e291      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 0301 	and.w	r3, r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 8087 	beq.w	80102da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80101cc:	4b96      	ldr	r3, [pc, #600]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f003 030c 	and.w	r3, r3, #12
 80101d4:	2b04      	cmp	r3, #4
 80101d6:	d00c      	beq.n	80101f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80101d8:	4b93      	ldr	r3, [pc, #588]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	f003 030c 	and.w	r3, r3, #12
 80101e0:	2b08      	cmp	r3, #8
 80101e2:	d112      	bne.n	801020a <HAL_RCC_OscConfig+0x62>
 80101e4:	4b90      	ldr	r3, [pc, #576]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101f0:	d10b      	bne.n	801020a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101f2:	4b8d      	ldr	r3, [pc, #564]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d06c      	beq.n	80102d8 <HAL_RCC_OscConfig+0x130>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d168      	bne.n	80102d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e26b      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010212:	d106      	bne.n	8010222 <HAL_RCC_OscConfig+0x7a>
 8010214:	4b84      	ldr	r3, [pc, #528]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	4a83      	ldr	r2, [pc, #524]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801021a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	e02e      	b.n	8010280 <HAL_RCC_OscConfig+0xd8>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10c      	bne.n	8010244 <HAL_RCC_OscConfig+0x9c>
 801022a:	4b7f      	ldr	r3, [pc, #508]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4a7e      	ldr	r2, [pc, #504]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010234:	6013      	str	r3, [r2, #0]
 8010236:	4b7c      	ldr	r3, [pc, #496]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4a7b      	ldr	r2, [pc, #492]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801023c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	e01d      	b.n	8010280 <HAL_RCC_OscConfig+0xd8>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801024c:	d10c      	bne.n	8010268 <HAL_RCC_OscConfig+0xc0>
 801024e:	4b76      	ldr	r3, [pc, #472]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a75      	ldr	r2, [pc, #468]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010258:	6013      	str	r3, [r2, #0]
 801025a:	4b73      	ldr	r3, [pc, #460]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a72      	ldr	r2, [pc, #456]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010264:	6013      	str	r3, [r2, #0]
 8010266:	e00b      	b.n	8010280 <HAL_RCC_OscConfig+0xd8>
 8010268:	4b6f      	ldr	r3, [pc, #444]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a6e      	ldr	r2, [pc, #440]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801026e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	4b6c      	ldr	r3, [pc, #432]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4a6b      	ldr	r2, [pc, #428]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801027a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801027e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d013      	beq.n	80102b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010288:	f7fb fde0 	bl	800be4c <HAL_GetTick>
 801028c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801028e:	e008      	b.n	80102a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010290:	f7fb fddc 	bl	800be4c <HAL_GetTick>
 8010294:	4602      	mov	r2, r0
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	2b64      	cmp	r3, #100	; 0x64
 801029c:	d901      	bls.n	80102a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801029e:	2303      	movs	r3, #3
 80102a0:	e21f      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80102a2:	4b61      	ldr	r3, [pc, #388]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d0f0      	beq.n	8010290 <HAL_RCC_OscConfig+0xe8>
 80102ae:	e014      	b.n	80102da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102b0:	f7fb fdcc 	bl	800be4c <HAL_GetTick>
 80102b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80102b6:	e008      	b.n	80102ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80102b8:	f7fb fdc8 	bl	800be4c <HAL_GetTick>
 80102bc:	4602      	mov	r2, r0
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	2b64      	cmp	r3, #100	; 0x64
 80102c4:	d901      	bls.n	80102ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80102c6:	2303      	movs	r3, #3
 80102c8:	e20b      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80102ca:	4b57      	ldr	r3, [pc, #348]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1f0      	bne.n	80102b8 <HAL_RCC_OscConfig+0x110>
 80102d6:	e000      	b.n	80102da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80102d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f003 0302 	and.w	r3, r3, #2
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d069      	beq.n	80103ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80102e6:	4b50      	ldr	r3, [pc, #320]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	f003 030c 	and.w	r3, r3, #12
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00b      	beq.n	801030a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80102f2:	4b4d      	ldr	r3, [pc, #308]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	f003 030c 	and.w	r3, r3, #12
 80102fa:	2b08      	cmp	r3, #8
 80102fc:	d11c      	bne.n	8010338 <HAL_RCC_OscConfig+0x190>
 80102fe:	4b4a      	ldr	r3, [pc, #296]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010306:	2b00      	cmp	r3, #0
 8010308:	d116      	bne.n	8010338 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801030a:	4b47      	ldr	r3, [pc, #284]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f003 0302 	and.w	r3, r3, #2
 8010312:	2b00      	cmp	r3, #0
 8010314:	d005      	beq.n	8010322 <HAL_RCC_OscConfig+0x17a>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d001      	beq.n	8010322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801031e:	2301      	movs	r3, #1
 8010320:	e1df      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010322:	4b41      	ldr	r3, [pc, #260]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	691b      	ldr	r3, [r3, #16]
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	493d      	ldr	r1, [pc, #244]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010332:	4313      	orrs	r3, r2
 8010334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010336:	e040      	b.n	80103ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d023      	beq.n	8010388 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010340:	4b39      	ldr	r3, [pc, #228]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a38      	ldr	r2, [pc, #224]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010346:	f043 0301 	orr.w	r3, r3, #1
 801034a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801034c:	f7fb fd7e 	bl	800be4c <HAL_GetTick>
 8010350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010352:	e008      	b.n	8010366 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010354:	f7fb fd7a 	bl	800be4c <HAL_GetTick>
 8010358:	4602      	mov	r2, r0
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	1ad3      	subs	r3, r2, r3
 801035e:	2b02      	cmp	r3, #2
 8010360:	d901      	bls.n	8010366 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8010362:	2303      	movs	r3, #3
 8010364:	e1bd      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010366:	4b30      	ldr	r3, [pc, #192]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f003 0302 	and.w	r3, r3, #2
 801036e:	2b00      	cmp	r3, #0
 8010370:	d0f0      	beq.n	8010354 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010372:	4b2d      	ldr	r3, [pc, #180]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	00db      	lsls	r3, r3, #3
 8010380:	4929      	ldr	r1, [pc, #164]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010382:	4313      	orrs	r3, r2
 8010384:	600b      	str	r3, [r1, #0]
 8010386:	e018      	b.n	80103ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010388:	4b27      	ldr	r3, [pc, #156]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a26      	ldr	r2, [pc, #152]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 801038e:	f023 0301 	bic.w	r3, r3, #1
 8010392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010394:	f7fb fd5a 	bl	800be4c <HAL_GetTick>
 8010398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801039a:	e008      	b.n	80103ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801039c:	f7fb fd56 	bl	800be4c <HAL_GetTick>
 80103a0:	4602      	mov	r2, r0
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	2b02      	cmp	r3, #2
 80103a8:	d901      	bls.n	80103ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80103aa:	2303      	movs	r3, #3
 80103ac:	e199      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80103ae:	4b1e      	ldr	r3, [pc, #120]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f003 0302 	and.w	r3, r3, #2
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1f0      	bne.n	801039c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f003 0308 	and.w	r3, r3, #8
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d038      	beq.n	8010438 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d019      	beq.n	8010402 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80103ce:	4b16      	ldr	r3, [pc, #88]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80103d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103d2:	4a15      	ldr	r2, [pc, #84]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80103d4:	f043 0301 	orr.w	r3, r3, #1
 80103d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103da:	f7fb fd37 	bl	800be4c <HAL_GetTick>
 80103de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80103e0:	e008      	b.n	80103f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80103e2:	f7fb fd33 	bl	800be4c <HAL_GetTick>
 80103e6:	4602      	mov	r2, r0
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d901      	bls.n	80103f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80103f0:	2303      	movs	r3, #3
 80103f2:	e176      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80103f4:	4b0c      	ldr	r3, [pc, #48]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 80103f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103f8:	f003 0302 	and.w	r3, r3, #2
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d0f0      	beq.n	80103e2 <HAL_RCC_OscConfig+0x23a>
 8010400:	e01a      	b.n	8010438 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010402:	4b09      	ldr	r3, [pc, #36]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010406:	4a08      	ldr	r2, [pc, #32]	; (8010428 <HAL_RCC_OscConfig+0x280>)
 8010408:	f023 0301 	bic.w	r3, r3, #1
 801040c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801040e:	f7fb fd1d 	bl	800be4c <HAL_GetTick>
 8010412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010414:	e00a      	b.n	801042c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010416:	f7fb fd19 	bl	800be4c <HAL_GetTick>
 801041a:	4602      	mov	r2, r0
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	2b02      	cmp	r3, #2
 8010422:	d903      	bls.n	801042c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8010424:	2303      	movs	r3, #3
 8010426:	e15c      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
 8010428:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801042c:	4b91      	ldr	r3, [pc, #580]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 801042e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010430:	f003 0302 	and.w	r3, r3, #2
 8010434:	2b00      	cmp	r3, #0
 8010436:	d1ee      	bne.n	8010416 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f003 0304 	and.w	r3, r3, #4
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 80a4 	beq.w	801058e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010446:	4b8b      	ldr	r3, [pc, #556]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10d      	bne.n	801046e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8010452:	4b88      	ldr	r3, [pc, #544]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010456:	4a87      	ldr	r2, [pc, #540]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801045c:	6413      	str	r3, [r2, #64]	; 0x40
 801045e:	4b85      	ldr	r3, [pc, #532]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010466:	60bb      	str	r3, [r7, #8]
 8010468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801046a:	2301      	movs	r3, #1
 801046c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801046e:	4b82      	ldr	r3, [pc, #520]	; (8010678 <HAL_RCC_OscConfig+0x4d0>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010476:	2b00      	cmp	r3, #0
 8010478:	d118      	bne.n	80104ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801047a:	4b7f      	ldr	r3, [pc, #508]	; (8010678 <HAL_RCC_OscConfig+0x4d0>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4a7e      	ldr	r2, [pc, #504]	; (8010678 <HAL_RCC_OscConfig+0x4d0>)
 8010480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010486:	f7fb fce1 	bl	800be4c <HAL_GetTick>
 801048a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801048c:	e008      	b.n	80104a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801048e:	f7fb fcdd 	bl	800be4c <HAL_GetTick>
 8010492:	4602      	mov	r2, r0
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	2b64      	cmp	r3, #100	; 0x64
 801049a:	d901      	bls.n	80104a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801049c:	2303      	movs	r3, #3
 801049e:	e120      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80104a0:	4b75      	ldr	r3, [pc, #468]	; (8010678 <HAL_RCC_OscConfig+0x4d0>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d0f0      	beq.n	801048e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d106      	bne.n	80104c2 <HAL_RCC_OscConfig+0x31a>
 80104b4:	4b6f      	ldr	r3, [pc, #444]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104b8:	4a6e      	ldr	r2, [pc, #440]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104ba:	f043 0301 	orr.w	r3, r3, #1
 80104be:	6713      	str	r3, [r2, #112]	; 0x70
 80104c0:	e02d      	b.n	801051e <HAL_RCC_OscConfig+0x376>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d10c      	bne.n	80104e4 <HAL_RCC_OscConfig+0x33c>
 80104ca:	4b6a      	ldr	r3, [pc, #424]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ce:	4a69      	ldr	r2, [pc, #420]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104d0:	f023 0301 	bic.w	r3, r3, #1
 80104d4:	6713      	str	r3, [r2, #112]	; 0x70
 80104d6:	4b67      	ldr	r3, [pc, #412]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104da:	4a66      	ldr	r2, [pc, #408]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104dc:	f023 0304 	bic.w	r3, r3, #4
 80104e0:	6713      	str	r3, [r2, #112]	; 0x70
 80104e2:	e01c      	b.n	801051e <HAL_RCC_OscConfig+0x376>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	2b05      	cmp	r3, #5
 80104ea:	d10c      	bne.n	8010506 <HAL_RCC_OscConfig+0x35e>
 80104ec:	4b61      	ldr	r3, [pc, #388]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104f0:	4a60      	ldr	r2, [pc, #384]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104f2:	f043 0304 	orr.w	r3, r3, #4
 80104f6:	6713      	str	r3, [r2, #112]	; 0x70
 80104f8:	4b5e      	ldr	r3, [pc, #376]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104fc:	4a5d      	ldr	r2, [pc, #372]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80104fe:	f043 0301 	orr.w	r3, r3, #1
 8010502:	6713      	str	r3, [r2, #112]	; 0x70
 8010504:	e00b      	b.n	801051e <HAL_RCC_OscConfig+0x376>
 8010506:	4b5b      	ldr	r3, [pc, #364]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050a:	4a5a      	ldr	r2, [pc, #360]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 801050c:	f023 0301 	bic.w	r3, r3, #1
 8010510:	6713      	str	r3, [r2, #112]	; 0x70
 8010512:	4b58      	ldr	r3, [pc, #352]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010516:	4a57      	ldr	r2, [pc, #348]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010518:	f023 0304 	bic.w	r3, r3, #4
 801051c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d015      	beq.n	8010552 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010526:	f7fb fc91 	bl	800be4c <HAL_GetTick>
 801052a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801052c:	e00a      	b.n	8010544 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801052e:	f7fb fc8d 	bl	800be4c <HAL_GetTick>
 8010532:	4602      	mov	r2, r0
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	f241 3288 	movw	r2, #5000	; 0x1388
 801053c:	4293      	cmp	r3, r2
 801053e:	d901      	bls.n	8010544 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8010540:	2303      	movs	r3, #3
 8010542:	e0ce      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010544:	4b4b      	ldr	r3, [pc, #300]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010548:	f003 0302 	and.w	r3, r3, #2
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0ee      	beq.n	801052e <HAL_RCC_OscConfig+0x386>
 8010550:	e014      	b.n	801057c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010552:	f7fb fc7b 	bl	800be4c <HAL_GetTick>
 8010556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010558:	e00a      	b.n	8010570 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801055a:	f7fb fc77 	bl	800be4c <HAL_GetTick>
 801055e:	4602      	mov	r2, r0
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	f241 3288 	movw	r2, #5000	; 0x1388
 8010568:	4293      	cmp	r3, r2
 801056a:	d901      	bls.n	8010570 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801056c:	2303      	movs	r3, #3
 801056e:	e0b8      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010570:	4b40      	ldr	r3, [pc, #256]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010574:	f003 0302 	and.w	r3, r3, #2
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1ee      	bne.n	801055a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801057c:	7dfb      	ldrb	r3, [r7, #23]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d105      	bne.n	801058e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010582:	4b3c      	ldr	r3, [pc, #240]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010586:	4a3b      	ldr	r2, [pc, #236]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801058c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	699b      	ldr	r3, [r3, #24]
 8010592:	2b00      	cmp	r3, #0
 8010594:	f000 80a4 	beq.w	80106e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010598:	4b36      	ldr	r3, [pc, #216]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	f003 030c 	and.w	r3, r3, #12
 80105a0:	2b08      	cmp	r3, #8
 80105a2:	d06b      	beq.n	801067c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	699b      	ldr	r3, [r3, #24]
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d149      	bne.n	8010640 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80105ac:	4b31      	ldr	r3, [pc, #196]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a30      	ldr	r2, [pc, #192]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80105b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80105b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105b8:	f7fb fc48 	bl	800be4c <HAL_GetTick>
 80105bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80105be:	e008      	b.n	80105d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80105c0:	f7fb fc44 	bl	800be4c <HAL_GetTick>
 80105c4:	4602      	mov	r2, r0
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	1ad3      	subs	r3, r2, r3
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d901      	bls.n	80105d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80105ce:	2303      	movs	r3, #3
 80105d0:	e087      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80105d2:	4b28      	ldr	r3, [pc, #160]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1f0      	bne.n	80105c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	69da      	ldr	r2, [r3, #28]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a1b      	ldr	r3, [r3, #32]
 80105e6:	431a      	orrs	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ec:	019b      	lsls	r3, r3, #6
 80105ee:	431a      	orrs	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105f4:	085b      	lsrs	r3, r3, #1
 80105f6:	3b01      	subs	r3, #1
 80105f8:	041b      	lsls	r3, r3, #16
 80105fa:	431a      	orrs	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010600:	061b      	lsls	r3, r3, #24
 8010602:	4313      	orrs	r3, r2
 8010604:	4a1b      	ldr	r2, [pc, #108]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801060a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801060c:	4b19      	ldr	r3, [pc, #100]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a18      	ldr	r2, [pc, #96]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010618:	f7fb fc18 	bl	800be4c <HAL_GetTick>
 801061c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801061e:	e008      	b.n	8010632 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010620:	f7fb fc14 	bl	800be4c <HAL_GetTick>
 8010624:	4602      	mov	r2, r0
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	2b02      	cmp	r3, #2
 801062c:	d901      	bls.n	8010632 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 801062e:	2303      	movs	r3, #3
 8010630:	e057      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010632:	4b10      	ldr	r3, [pc, #64]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d0f0      	beq.n	8010620 <HAL_RCC_OscConfig+0x478>
 801063e:	e04f      	b.n	80106e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010640:	4b0c      	ldr	r3, [pc, #48]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a0b      	ldr	r2, [pc, #44]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801064a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801064c:	f7fb fbfe 	bl	800be4c <HAL_GetTick>
 8010650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010652:	e008      	b.n	8010666 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010654:	f7fb fbfa 	bl	800be4c <HAL_GetTick>
 8010658:	4602      	mov	r2, r0
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	2b02      	cmp	r3, #2
 8010660:	d901      	bls.n	8010666 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8010662:	2303      	movs	r3, #3
 8010664:	e03d      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010666:	4b03      	ldr	r3, [pc, #12]	; (8010674 <HAL_RCC_OscConfig+0x4cc>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1f0      	bne.n	8010654 <HAL_RCC_OscConfig+0x4ac>
 8010672:	e035      	b.n	80106e0 <HAL_RCC_OscConfig+0x538>
 8010674:	40023800 	.word	0x40023800
 8010678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801067c:	4b1b      	ldr	r3, [pc, #108]	; (80106ec <HAL_RCC_OscConfig+0x544>)
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	2b01      	cmp	r3, #1
 8010688:	d028      	beq.n	80106dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010694:	429a      	cmp	r2, r3
 8010696:	d121      	bne.n	80106dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d11a      	bne.n	80106dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80106ac:	4013      	ands	r3, r2
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80106b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d111      	bne.n	80106dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106c2:	085b      	lsrs	r3, r3, #1
 80106c4:	3b01      	subs	r3, #1
 80106c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d107      	bne.n	80106dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80106d8:	429a      	cmp	r2, r3
 80106da:	d001      	beq.n	80106e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80106dc:	2301      	movs	r3, #1
 80106de:	e000      	b.n	80106e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3718      	adds	r7, #24
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	40023800 	.word	0x40023800

080106f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d101      	bne.n	8010708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8010704:	2301      	movs	r3, #1
 8010706:	e0d0      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010708:	4b6a      	ldr	r3, [pc, #424]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f003 030f 	and.w	r3, r3, #15
 8010710:	683a      	ldr	r2, [r7, #0]
 8010712:	429a      	cmp	r2, r3
 8010714:	d910      	bls.n	8010738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010716:	4b67      	ldr	r3, [pc, #412]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f023 020f 	bic.w	r2, r3, #15
 801071e:	4965      	ldr	r1, [pc, #404]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	4313      	orrs	r3, r2
 8010724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010726:	4b63      	ldr	r3, [pc, #396]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f003 030f 	and.w	r3, r3, #15
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	429a      	cmp	r2, r3
 8010732:	d001      	beq.n	8010738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	e0b8      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f003 0302 	and.w	r3, r3, #2
 8010740:	2b00      	cmp	r3, #0
 8010742:	d020      	beq.n	8010786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f003 0304 	and.w	r3, r3, #4
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010750:	4b59      	ldr	r3, [pc, #356]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	4a58      	ldr	r2, [pc, #352]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801075a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f003 0308 	and.w	r3, r3, #8
 8010764:	2b00      	cmp	r3, #0
 8010766:	d005      	beq.n	8010774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010768:	4b53      	ldr	r3, [pc, #332]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	4a52      	ldr	r2, [pc, #328]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 801076e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010774:	4b50      	ldr	r3, [pc, #320]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	494d      	ldr	r1, [pc, #308]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010782:	4313      	orrs	r3, r2
 8010784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d040      	beq.n	8010814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d107      	bne.n	80107aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801079a:	4b47      	ldr	r3, [pc, #284]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d115      	bne.n	80107d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80107a6:	2301      	movs	r3, #1
 80107a8:	e07f      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	2b02      	cmp	r3, #2
 80107b0:	d107      	bne.n	80107c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80107b2:	4b41      	ldr	r3, [pc, #260]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d109      	bne.n	80107d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	e073      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107c2:	4b3d      	ldr	r3, [pc, #244]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f003 0302 	and.w	r3, r3, #2
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80107ce:	2301      	movs	r3, #1
 80107d0:	e06b      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80107d2:	4b39      	ldr	r3, [pc, #228]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	f023 0203 	bic.w	r2, r3, #3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	4936      	ldr	r1, [pc, #216]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 80107e0:	4313      	orrs	r3, r2
 80107e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107e4:	f7fb fb32 	bl	800be4c <HAL_GetTick>
 80107e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80107ea:	e00a      	b.n	8010802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80107ec:	f7fb fb2e 	bl	800be4c <HAL_GetTick>
 80107f0:	4602      	mov	r2, r0
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	1ad3      	subs	r3, r2, r3
 80107f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d901      	bls.n	8010802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80107fe:	2303      	movs	r3, #3
 8010800:	e053      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010802:	4b2d      	ldr	r3, [pc, #180]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	f003 020c 	and.w	r2, r3, #12
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	429a      	cmp	r2, r3
 8010812:	d1eb      	bne.n	80107ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010814:	4b27      	ldr	r3, [pc, #156]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f003 030f 	and.w	r3, r3, #15
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	429a      	cmp	r2, r3
 8010820:	d210      	bcs.n	8010844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010822:	4b24      	ldr	r3, [pc, #144]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f023 020f 	bic.w	r2, r3, #15
 801082a:	4922      	ldr	r1, [pc, #136]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	4313      	orrs	r3, r2
 8010830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010832:	4b20      	ldr	r3, [pc, #128]	; (80108b4 <HAL_RCC_ClockConfig+0x1c4>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f003 030f 	and.w	r3, r3, #15
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	429a      	cmp	r2, r3
 801083e:	d001      	beq.n	8010844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8010840:	2301      	movs	r3, #1
 8010842:	e032      	b.n	80108aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f003 0304 	and.w	r3, r3, #4
 801084c:	2b00      	cmp	r3, #0
 801084e:	d008      	beq.n	8010862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010850:	4b19      	ldr	r3, [pc, #100]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	4916      	ldr	r1, [pc, #88]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 801085e:	4313      	orrs	r3, r2
 8010860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 0308 	and.w	r3, r3, #8
 801086a:	2b00      	cmp	r3, #0
 801086c:	d009      	beq.n	8010882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801086e:	4b12      	ldr	r3, [pc, #72]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	691b      	ldr	r3, [r3, #16]
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	490e      	ldr	r1, [pc, #56]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 801087e:	4313      	orrs	r3, r2
 8010880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010882:	f000 f821 	bl	80108c8 <HAL_RCC_GetSysClockFreq>
 8010886:	4602      	mov	r2, r0
 8010888:	4b0b      	ldr	r3, [pc, #44]	; (80108b8 <HAL_RCC_ClockConfig+0x1c8>)
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	091b      	lsrs	r3, r3, #4
 801088e:	f003 030f 	and.w	r3, r3, #15
 8010892:	490a      	ldr	r1, [pc, #40]	; (80108bc <HAL_RCC_ClockConfig+0x1cc>)
 8010894:	5ccb      	ldrb	r3, [r1, r3]
 8010896:	fa22 f303 	lsr.w	r3, r2, r3
 801089a:	4a09      	ldr	r2, [pc, #36]	; (80108c0 <HAL_RCC_ClockConfig+0x1d0>)
 801089c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801089e:	4b09      	ldr	r3, [pc, #36]	; (80108c4 <HAL_RCC_ClockConfig+0x1d4>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fb fa8e 	bl	800bdc4 <HAL_InitTick>

  return HAL_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	40023c00 	.word	0x40023c00
 80108b8:	40023800 	.word	0x40023800
 80108bc:	08025ca4 	.word	0x08025ca4
 80108c0:	20000018 	.word	0x20000018
 80108c4:	2000001c 	.word	0x2000001c

080108c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80108c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108cc:	b094      	sub	sp, #80	; 0x50
 80108ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80108d0:	2300      	movs	r3, #0
 80108d2:	647b      	str	r3, [r7, #68]	; 0x44
 80108d4:	2300      	movs	r3, #0
 80108d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108d8:	2300      	movs	r3, #0
 80108da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80108e0:	4b79      	ldr	r3, [pc, #484]	; (8010ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	f003 030c 	and.w	r3, r3, #12
 80108e8:	2b08      	cmp	r3, #8
 80108ea:	d00d      	beq.n	8010908 <HAL_RCC_GetSysClockFreq+0x40>
 80108ec:	2b08      	cmp	r3, #8
 80108ee:	f200 80e1 	bhi.w	8010ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <HAL_RCC_GetSysClockFreq+0x34>
 80108f6:	2b04      	cmp	r3, #4
 80108f8:	d003      	beq.n	8010902 <HAL_RCC_GetSysClockFreq+0x3a>
 80108fa:	e0db      	b.n	8010ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80108fc:	4b73      	ldr	r3, [pc, #460]	; (8010acc <HAL_RCC_GetSysClockFreq+0x204>)
 80108fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010900:	e0db      	b.n	8010aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010902:	4b72      	ldr	r3, [pc, #456]	; (8010acc <HAL_RCC_GetSysClockFreq+0x204>)
 8010904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010906:	e0d8      	b.n	8010aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010908:	4b6f      	ldr	r3, [pc, #444]	; (8010ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010910:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8010912:	4b6d      	ldr	r3, [pc, #436]	; (8010ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801091a:	2b00      	cmp	r3, #0
 801091c:	d063      	beq.n	80109e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801091e:	4b6a      	ldr	r3, [pc, #424]	; (8010ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	099b      	lsrs	r3, r3, #6
 8010924:	2200      	movs	r2, #0
 8010926:	63bb      	str	r3, [r7, #56]	; 0x38
 8010928:	63fa      	str	r2, [r7, #60]	; 0x3c
 801092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010930:	633b      	str	r3, [r7, #48]	; 0x30
 8010932:	2300      	movs	r3, #0
 8010934:	637b      	str	r3, [r7, #52]	; 0x34
 8010936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801093a:	4622      	mov	r2, r4
 801093c:	462b      	mov	r3, r5
 801093e:	f04f 0000 	mov.w	r0, #0
 8010942:	f04f 0100 	mov.w	r1, #0
 8010946:	0159      	lsls	r1, r3, #5
 8010948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801094c:	0150      	lsls	r0, r2, #5
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4621      	mov	r1, r4
 8010954:	1a51      	subs	r1, r2, r1
 8010956:	6139      	str	r1, [r7, #16]
 8010958:	4629      	mov	r1, r5
 801095a:	eb63 0301 	sbc.w	r3, r3, r1
 801095e:	617b      	str	r3, [r7, #20]
 8010960:	f04f 0200 	mov.w	r2, #0
 8010964:	f04f 0300 	mov.w	r3, #0
 8010968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801096c:	4659      	mov	r1, fp
 801096e:	018b      	lsls	r3, r1, #6
 8010970:	4651      	mov	r1, sl
 8010972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010976:	4651      	mov	r1, sl
 8010978:	018a      	lsls	r2, r1, #6
 801097a:	4651      	mov	r1, sl
 801097c:	ebb2 0801 	subs.w	r8, r2, r1
 8010980:	4659      	mov	r1, fp
 8010982:	eb63 0901 	sbc.w	r9, r3, r1
 8010986:	f04f 0200 	mov.w	r2, #0
 801098a:	f04f 0300 	mov.w	r3, #0
 801098e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801099a:	4690      	mov	r8, r2
 801099c:	4699      	mov	r9, r3
 801099e:	4623      	mov	r3, r4
 80109a0:	eb18 0303 	adds.w	r3, r8, r3
 80109a4:	60bb      	str	r3, [r7, #8]
 80109a6:	462b      	mov	r3, r5
 80109a8:	eb49 0303 	adc.w	r3, r9, r3
 80109ac:	60fb      	str	r3, [r7, #12]
 80109ae:	f04f 0200 	mov.w	r2, #0
 80109b2:	f04f 0300 	mov.w	r3, #0
 80109b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80109ba:	4629      	mov	r1, r5
 80109bc:	028b      	lsls	r3, r1, #10
 80109be:	4621      	mov	r1, r4
 80109c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80109c4:	4621      	mov	r1, r4
 80109c6:	028a      	lsls	r2, r1, #10
 80109c8:	4610      	mov	r0, r2
 80109ca:	4619      	mov	r1, r3
 80109cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ce:	2200      	movs	r2, #0
 80109d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80109d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80109d8:	f7f0 fa34 	bl	8000e44 <__aeabi_uldivmod>
 80109dc:	4602      	mov	r2, r0
 80109de:	460b      	mov	r3, r1
 80109e0:	4613      	mov	r3, r2
 80109e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109e4:	e058      	b.n	8010a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80109e6:	4b38      	ldr	r3, [pc, #224]	; (8010ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	099b      	lsrs	r3, r3, #6
 80109ec:	2200      	movs	r2, #0
 80109ee:	4618      	mov	r0, r3
 80109f0:	4611      	mov	r1, r2
 80109f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80109f6:	623b      	str	r3, [r7, #32]
 80109f8:	2300      	movs	r3, #0
 80109fa:	627b      	str	r3, [r7, #36]	; 0x24
 80109fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010a00:	4642      	mov	r2, r8
 8010a02:	464b      	mov	r3, r9
 8010a04:	f04f 0000 	mov.w	r0, #0
 8010a08:	f04f 0100 	mov.w	r1, #0
 8010a0c:	0159      	lsls	r1, r3, #5
 8010a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010a12:	0150      	lsls	r0, r2, #5
 8010a14:	4602      	mov	r2, r0
 8010a16:	460b      	mov	r3, r1
 8010a18:	4641      	mov	r1, r8
 8010a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8010a1e:	4649      	mov	r1, r9
 8010a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8010a24:	f04f 0200 	mov.w	r2, #0
 8010a28:	f04f 0300 	mov.w	r3, #0
 8010a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010a38:	ebb2 040a 	subs.w	r4, r2, sl
 8010a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8010a40:	f04f 0200 	mov.w	r2, #0
 8010a44:	f04f 0300 	mov.w	r3, #0
 8010a48:	00eb      	lsls	r3, r5, #3
 8010a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010a4e:	00e2      	lsls	r2, r4, #3
 8010a50:	4614      	mov	r4, r2
 8010a52:	461d      	mov	r5, r3
 8010a54:	4643      	mov	r3, r8
 8010a56:	18e3      	adds	r3, r4, r3
 8010a58:	603b      	str	r3, [r7, #0]
 8010a5a:	464b      	mov	r3, r9
 8010a5c:	eb45 0303 	adc.w	r3, r5, r3
 8010a60:	607b      	str	r3, [r7, #4]
 8010a62:	f04f 0200 	mov.w	r2, #0
 8010a66:	f04f 0300 	mov.w	r3, #0
 8010a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010a6e:	4629      	mov	r1, r5
 8010a70:	028b      	lsls	r3, r1, #10
 8010a72:	4621      	mov	r1, r4
 8010a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010a78:	4621      	mov	r1, r4
 8010a7a:	028a      	lsls	r2, r1, #10
 8010a7c:	4610      	mov	r0, r2
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a82:	2200      	movs	r2, #0
 8010a84:	61bb      	str	r3, [r7, #24]
 8010a86:	61fa      	str	r2, [r7, #28]
 8010a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a8c:	f7f0 f9da 	bl	8000e44 <__aeabi_uldivmod>
 8010a90:	4602      	mov	r2, r0
 8010a92:	460b      	mov	r3, r1
 8010a94:	4613      	mov	r3, r2
 8010a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8010a98:	4b0b      	ldr	r3, [pc, #44]	; (8010ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	0c1b      	lsrs	r3, r3, #16
 8010a9e:	f003 0303 	and.w	r3, r3, #3
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	005b      	lsls	r3, r3, #1
 8010aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8010aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010ab2:	e002      	b.n	8010aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010ab4:	4b05      	ldr	r3, [pc, #20]	; (8010acc <HAL_RCC_GetSysClockFreq+0x204>)
 8010ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3750      	adds	r7, #80	; 0x50
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010ac6:	bf00      	nop
 8010ac8:	40023800 	.word	0x40023800
 8010acc:	00f42400 	.word	0x00f42400

08010ad0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010ad4:	4b03      	ldr	r3, [pc, #12]	; (8010ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	20000018 	.word	0x20000018

08010ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010aec:	f7ff fff0 	bl	8010ad0 <HAL_RCC_GetHCLKFreq>
 8010af0:	4602      	mov	r2, r0
 8010af2:	4b05      	ldr	r3, [pc, #20]	; (8010b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010af4:	689b      	ldr	r3, [r3, #8]
 8010af6:	0a9b      	lsrs	r3, r3, #10
 8010af8:	f003 0307 	and.w	r3, r3, #7
 8010afc:	4903      	ldr	r1, [pc, #12]	; (8010b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010afe:	5ccb      	ldrb	r3, [r1, r3]
 8010b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	40023800 	.word	0x40023800
 8010b0c:	08025cb4 	.word	0x08025cb4

08010b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010b14:	f7ff ffdc 	bl	8010ad0 <HAL_RCC_GetHCLKFreq>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	0b5b      	lsrs	r3, r3, #13
 8010b20:	f003 0307 	and.w	r3, r3, #7
 8010b24:	4903      	ldr	r1, [pc, #12]	; (8010b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010b26:	5ccb      	ldrb	r3, [r1, r3]
 8010b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	40023800 	.word	0x40023800
 8010b34:	08025cb4 	.word	0x08025cb4

08010b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b088      	sub	sp, #32
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8010b44:	2300      	movs	r3, #0
 8010b46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8010b50:	2300      	movs	r3, #0
 8010b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f003 0301 	and.w	r3, r3, #1
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d012      	beq.n	8010b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8010b60:	4b69      	ldr	r3, [pc, #420]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	4a68      	ldr	r2, [pc, #416]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010b6a:	6093      	str	r3, [r2, #8]
 8010b6c:	4b66      	ldr	r3, [pc, #408]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010b6e:	689a      	ldr	r2, [r3, #8]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b74:	4964      	ldr	r1, [pc, #400]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010b76:	4313      	orrs	r3, r2
 8010b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d101      	bne.n	8010b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8010b82:	2301      	movs	r3, #1
 8010b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d017      	beq.n	8010bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010b92:	4b5d      	ldr	r3, [pc, #372]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba0:	4959      	ldr	r1, [pc, #356]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bb0:	d101      	bne.n	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d101      	bne.n	8010bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d017      	beq.n	8010bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010bce:	4b4e      	ldr	r3, [pc, #312]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bdc:	494a      	ldr	r1, [pc, #296]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010bde:	4313      	orrs	r3, r2
 8010be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010bec:	d101      	bne.n	8010bf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d101      	bne.n	8010bfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f003 0320 	and.w	r3, r3, #32
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f000 808b 	beq.w	8010d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8010c1c:	4b3a      	ldr	r3, [pc, #232]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c20:	4a39      	ldr	r2, [pc, #228]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c26:	6413      	str	r3, [r2, #64]	; 0x40
 8010c28:	4b37      	ldr	r3, [pc, #220]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c30:	60bb      	str	r3, [r7, #8]
 8010c32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010c34:	4b35      	ldr	r3, [pc, #212]	; (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a34      	ldr	r2, [pc, #208]	; (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c40:	f7fb f904 	bl	800be4c <HAL_GetTick>
 8010c44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8010c46:	e008      	b.n	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010c48:	f7fb f900 	bl	800be4c <HAL_GetTick>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	2b64      	cmp	r3, #100	; 0x64
 8010c54:	d901      	bls.n	8010c5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8010c56:	2303      	movs	r3, #3
 8010c58:	e31f      	b.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8010c5a:	4b2c      	ldr	r3, [pc, #176]	; (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d0f0      	beq.n	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8010c66:	4b28      	ldr	r3, [pc, #160]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d035      	beq.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d02e      	beq.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010c84:	4b20      	ldr	r3, [pc, #128]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010c8e:	4b1e      	ldr	r3, [pc, #120]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c92:	4a1d      	ldr	r2, [pc, #116]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010c9a:	4b1b      	ldr	r3, [pc, #108]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c9e:	4a1a      	ldr	r2, [pc, #104]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8010ca6:	4a18      	ldr	r2, [pc, #96]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8010cac:	4b16      	ldr	r3, [pc, #88]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cb0:	f003 0301 	and.w	r3, r3, #1
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d114      	bne.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010cb8:	f7fb f8c8 	bl	800be4c <HAL_GetTick>
 8010cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010cbe:	e00a      	b.n	8010cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cc0:	f7fb f8c4 	bl	800be4c <HAL_GetTick>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d901      	bls.n	8010cd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8010cd2:	2303      	movs	r3, #3
 8010cd4:	e2e1      	b.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010cd6:	4b0c      	ldr	r3, [pc, #48]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cda:	f003 0302 	and.w	r3, r3, #2
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d0ee      	beq.n	8010cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010cee:	d111      	bne.n	8010d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8010cf0:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010cfc:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8010cfe:	400b      	ands	r3, r1
 8010d00:	4901      	ldr	r1, [pc, #4]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010d02:	4313      	orrs	r3, r2
 8010d04:	608b      	str	r3, [r1, #8]
 8010d06:	e00b      	b.n	8010d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8010d08:	40023800 	.word	0x40023800
 8010d0c:	40007000 	.word	0x40007000
 8010d10:	0ffffcff 	.word	0x0ffffcff
 8010d14:	4ba8      	ldr	r3, [pc, #672]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	4aa7      	ldr	r2, [pc, #668]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8010d1e:	6093      	str	r3, [r2, #8]
 8010d20:	4ba5      	ldr	r3, [pc, #660]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d2c:	49a2      	ldr	r1, [pc, #648]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f003 0310 	and.w	r3, r3, #16
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d010      	beq.n	8010d60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010d3e:	4b9e      	ldr	r3, [pc, #632]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d44:	4a9c      	ldr	r2, [pc, #624]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8010d4e:	4b9a      	ldr	r3, [pc, #616]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d58:	4997      	ldr	r1, [pc, #604]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00a      	beq.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010d6c:	4b92      	ldr	r3, [pc, #584]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d7a:	498f      	ldr	r1, [pc, #572]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00a      	beq.n	8010da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010d8e:	4b8a      	ldr	r3, [pc, #552]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d9c:	4986      	ldr	r1, [pc, #536]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00a      	beq.n	8010dc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010db0:	4b81      	ldr	r3, [pc, #516]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dbe:	497e      	ldr	r1, [pc, #504]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00a      	beq.n	8010de8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010dd2:	4b79      	ldr	r3, [pc, #484]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010de0:	4975      	ldr	r1, [pc, #468]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010de2:	4313      	orrs	r3, r2
 8010de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00a      	beq.n	8010e0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010df4:	4b70      	ldr	r3, [pc, #448]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dfa:	f023 0203 	bic.w	r2, r3, #3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e02:	496d      	ldr	r1, [pc, #436]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e04:	4313      	orrs	r3, r2
 8010e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00a      	beq.n	8010e2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010e16:	4b68      	ldr	r3, [pc, #416]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e1c:	f023 020c 	bic.w	r2, r3, #12
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e24:	4964      	ldr	r1, [pc, #400]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e26:	4313      	orrs	r3, r2
 8010e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00a      	beq.n	8010e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010e38:	4b5f      	ldr	r3, [pc, #380]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e46:	495c      	ldr	r1, [pc, #368]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00a      	beq.n	8010e70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010e5a:	4b57      	ldr	r3, [pc, #348]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e68:	4953      	ldr	r1, [pc, #332]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00a      	beq.n	8010e92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010e7c:	4b4e      	ldr	r3, [pc, #312]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e8a:	494b      	ldr	r1, [pc, #300]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00a      	beq.n	8010eb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8010e9e:	4b46      	ldr	r3, [pc, #280]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eac:	4942      	ldr	r1, [pc, #264]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00a      	beq.n	8010ed6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8010ec0:	4b3d      	ldr	r3, [pc, #244]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ece:	493a      	ldr	r1, [pc, #232]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010ed0:	4313      	orrs	r3, r2
 8010ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8010ee2:	4b35      	ldr	r3, [pc, #212]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ef0:	4931      	ldr	r1, [pc, #196]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010ef2:	4313      	orrs	r3, r2
 8010ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d00a      	beq.n	8010f1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010f04:	4b2c      	ldr	r3, [pc, #176]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f12:	4929      	ldr	r1, [pc, #164]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f14:	4313      	orrs	r3, r2
 8010f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d011      	beq.n	8010f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8010f26:	4b24      	ldr	r3, [pc, #144]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f34:	4920      	ldr	r1, [pc, #128]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f36:	4313      	orrs	r3, r2
 8010f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f44:	d101      	bne.n	8010f4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8010f46:	2301      	movs	r3, #1
 8010f48:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d00a      	beq.n	8010f6c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010f56:	4b18      	ldr	r3, [pc, #96]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f64:	4914      	ldr	r1, [pc, #80]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f66:	4313      	orrs	r3, r2
 8010f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00b      	beq.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010f78:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f88:	490b      	ldr	r1, [pc, #44]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d006      	beq.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 80d8 	beq.w	8011154 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8010fa4:	4b04      	ldr	r3, [pc, #16]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4a03      	ldr	r2, [pc, #12]	; (8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8010faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010fb0:	f7fa ff4c 	bl	800be4c <HAL_GetTick>
 8010fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010fb6:	e00a      	b.n	8010fce <HAL_RCCEx_PeriphCLKConfig+0x496>
 8010fb8:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8010fbc:	f7fa ff46 	bl	800be4c <HAL_GetTick>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	2b64      	cmp	r3, #100	; 0x64
 8010fc8:	d901      	bls.n	8010fce <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010fca:	2303      	movs	r3, #3
 8010fcc:	e165      	b.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010fce:	4ba9      	ldr	r3, [pc, #676]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d1f0      	bne.n	8010fbc <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f003 0301 	and.w	r3, r3, #1
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d021      	beq.n	801102a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d11d      	bne.n	801102a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8010fee:	4ba1      	ldr	r3, [pc, #644]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8010ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ff4:	0c1b      	lsrs	r3, r3, #16
 8010ff6:	f003 0303 	and.w	r3, r3, #3
 8010ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8010ffc:	4b9d      	ldr	r3, [pc, #628]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8010ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011002:	0e1b      	lsrs	r3, r3, #24
 8011004:	f003 030f 	and.w	r3, r3, #15
 8011008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	019a      	lsls	r2, r3, #6
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	041b      	lsls	r3, r3, #16
 8011014:	431a      	orrs	r2, r3
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	061b      	lsls	r3, r3, #24
 801101a:	431a      	orrs	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	689b      	ldr	r3, [r3, #8]
 8011020:	071b      	lsls	r3, r3, #28
 8011022:	4994      	ldr	r1, [pc, #592]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011024:	4313      	orrs	r3, r2
 8011026:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011032:	2b00      	cmp	r3, #0
 8011034:	d004      	beq.n	8011040 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801103a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801103e:	d00a      	beq.n	8011056 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011048:	2b00      	cmp	r3, #0
 801104a:	d02e      	beq.n	80110aa <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011054:	d129      	bne.n	80110aa <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011056:	4b87      	ldr	r3, [pc, #540]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801105c:	0c1b      	lsrs	r3, r3, #16
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011064:	4b83      	ldr	r3, [pc, #524]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801106a:	0f1b      	lsrs	r3, r3, #28
 801106c:	f003 0307 	and.w	r3, r3, #7
 8011070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	019a      	lsls	r2, r3, #6
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	041b      	lsls	r3, r3, #16
 801107c:	431a      	orrs	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	061b      	lsls	r3, r3, #24
 8011084:	431a      	orrs	r2, r3
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	071b      	lsls	r3, r3, #28
 801108a:	497a      	ldr	r1, [pc, #488]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801108c:	4313      	orrs	r3, r2
 801108e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8011092:	4b78      	ldr	r3, [pc, #480]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011098:	f023 021f 	bic.w	r2, r3, #31
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a0:	3b01      	subs	r3, #1
 80110a2:	4974      	ldr	r1, [pc, #464]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80110a4:	4313      	orrs	r3, r2
 80110a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d01d      	beq.n	80110f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80110b6:	4b6f      	ldr	r3, [pc, #444]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80110b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110bc:	0e1b      	lsrs	r3, r3, #24
 80110be:	f003 030f 	and.w	r3, r3, #15
 80110c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80110c4:	4b6b      	ldr	r3, [pc, #428]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80110c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110ca:	0f1b      	lsrs	r3, r3, #28
 80110cc:	f003 0307 	and.w	r3, r3, #7
 80110d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	019a      	lsls	r2, r3, #6
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	041b      	lsls	r3, r3, #16
 80110de:	431a      	orrs	r2, r3
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	061b      	lsls	r3, r3, #24
 80110e4:	431a      	orrs	r2, r3
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	071b      	lsls	r3, r3, #28
 80110ea:	4962      	ldr	r1, [pc, #392]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80110ec:	4313      	orrs	r3, r2
 80110ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d011      	beq.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	019a      	lsls	r2, r3, #6
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	691b      	ldr	r3, [r3, #16]
 8011108:	041b      	lsls	r3, r3, #16
 801110a:	431a      	orrs	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	061b      	lsls	r3, r3, #24
 8011112:	431a      	orrs	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	071b      	lsls	r3, r3, #28
 801111a:	4956      	ldr	r1, [pc, #344]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801111c:	4313      	orrs	r3, r2
 801111e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011122:	4b54      	ldr	r3, [pc, #336]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4a53      	ldr	r2, [pc, #332]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801112c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801112e:	f7fa fe8d 	bl	800be4c <HAL_GetTick>
 8011132:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011134:	e008      	b.n	8011148 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011136:	f7fa fe89 	bl	800be4c <HAL_GetTick>
 801113a:	4602      	mov	r2, r0
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	2b64      	cmp	r3, #100	; 0x64
 8011142:	d901      	bls.n	8011148 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011144:	2303      	movs	r3, #3
 8011146:	e0a8      	b.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011148:	4b4a      	ldr	r3, [pc, #296]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011150:	2b00      	cmp	r3, #0
 8011152:	d0f0      	beq.n	8011136 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	2b01      	cmp	r3, #1
 8011158:	f040 809e 	bne.w	8011298 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801115c:	4b45      	ldr	r3, [pc, #276]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a44      	ldr	r2, [pc, #272]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011168:	f7fa fe70 	bl	800be4c <HAL_GetTick>
 801116c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801116e:	e008      	b.n	8011182 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011170:	f7fa fe6c 	bl	800be4c <HAL_GetTick>
 8011174:	4602      	mov	r2, r0
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	1ad3      	subs	r3, r2, r3
 801117a:	2b64      	cmp	r3, #100	; 0x64
 801117c:	d901      	bls.n	8011182 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801117e:	2303      	movs	r3, #3
 8011180:	e08b      	b.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011182:	4b3c      	ldr	r3, [pc, #240]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801118a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801118e:	d0ef      	beq.n	8011170 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011198:	2b00      	cmp	r3, #0
 801119a:	d003      	beq.n	80111a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d009      	beq.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d02e      	beq.n	801120e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d12a      	bne.n	801120e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80111b8:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80111ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111be:	0c1b      	lsrs	r3, r3, #16
 80111c0:	f003 0303 	and.w	r3, r3, #3
 80111c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80111c6:	4b2b      	ldr	r3, [pc, #172]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80111c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111cc:	0f1b      	lsrs	r3, r3, #28
 80111ce:	f003 0307 	and.w	r3, r3, #7
 80111d2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	695b      	ldr	r3, [r3, #20]
 80111d8:	019a      	lsls	r2, r3, #6
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	041b      	lsls	r3, r3, #16
 80111de:	431a      	orrs	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	061b      	lsls	r3, r3, #24
 80111e6:	431a      	orrs	r2, r3
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	071b      	lsls	r3, r3, #28
 80111ec:	4921      	ldr	r1, [pc, #132]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80111ee:	4313      	orrs	r3, r2
 80111f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80111f4:	4b1f      	ldr	r3, [pc, #124]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80111f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011202:	3b01      	subs	r3, #1
 8011204:	021b      	lsls	r3, r3, #8
 8011206:	491b      	ldr	r1, [pc, #108]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011208:	4313      	orrs	r3, r2
 801120a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011216:	2b00      	cmp	r3, #0
 8011218:	d022      	beq.n	8011260 <HAL_RCCEx_PeriphCLKConfig+0x728>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801121e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011222:	d11d      	bne.n	8011260 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011224:	4b13      	ldr	r3, [pc, #76]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801122a:	0e1b      	lsrs	r3, r3, #24
 801122c:	f003 030f 	and.w	r3, r3, #15
 8011230:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011232:	4b10      	ldr	r3, [pc, #64]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011238:	0f1b      	lsrs	r3, r3, #28
 801123a:	f003 0307 	and.w	r3, r3, #7
 801123e:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	695b      	ldr	r3, [r3, #20]
 8011244:	019a      	lsls	r2, r3, #6
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6a1b      	ldr	r3, [r3, #32]
 801124a:	041b      	lsls	r3, r3, #16
 801124c:	431a      	orrs	r2, r3
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	061b      	lsls	r3, r3, #24
 8011252:	431a      	orrs	r2, r3
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	071b      	lsls	r3, r3, #28
 8011258:	4906      	ldr	r1, [pc, #24]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801125a:	4313      	orrs	r3, r2
 801125c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8011260:	4b04      	ldr	r3, [pc, #16]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a03      	ldr	r2, [pc, #12]	; (8011274 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8011266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801126a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801126c:	f7fa fdee 	bl	800be4c <HAL_GetTick>
 8011270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011272:	e00a      	b.n	801128a <HAL_RCCEx_PeriphCLKConfig+0x752>
 8011274:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011278:	f7fa fde8 	bl	800be4c <HAL_GetTick>
 801127c:	4602      	mov	r2, r0
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	2b64      	cmp	r3, #100	; 0x64
 8011284:	d901      	bls.n	801128a <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011286:	2303      	movs	r3, #3
 8011288:	e007      	b.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801128a:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011296:	d1ef      	bne.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8011298:	2300      	movs	r3, #0
}
 801129a:	4618      	mov	r0, r3
 801129c:	3720      	adds	r7, #32
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	40023800 	.word	0x40023800

080112a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d101      	bne.n	80112ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80112b6:	2301      	movs	r3, #1
 80112b8:	e022      	b.n	8011300 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d105      	bne.n	80112d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2200      	movs	r2, #0
 80112ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7fa f9b5 	bl	800b63c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2203      	movs	r2, #3
 80112d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 f814 	bl	8011308 <HAL_SD_InitCard>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80112e6:	2301      	movs	r3, #1
 80112e8:	e00a      	b.n	8011300 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2201      	movs	r2, #1
 80112fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011308:	b5b0      	push	{r4, r5, r7, lr}
 801130a:	b08e      	sub	sp, #56	; 0x38
 801130c:	af04      	add	r7, sp, #16
 801130e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011310:	2300      	movs	r3, #0
 8011312:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8011314:	2300      	movs	r3, #0
 8011316:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011318:	2300      	movs	r3, #0
 801131a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801131c:	2300      	movs	r3, #0
 801131e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011320:	2300      	movs	r3, #0
 8011322:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8011324:	2376      	movs	r3, #118	; 0x76
 8011326:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681d      	ldr	r5, [r3, #0]
 801132c:	466c      	mov	r4, sp
 801132e:	f107 0314 	add.w	r3, r7, #20
 8011332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801133a:	f107 0308 	add.w	r3, r7, #8
 801133e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011340:	4628      	mov	r0, r5
 8011342:	f002 fd47 	bl	8013dd4 <SDMMC_Init>
 8011346:	4603      	mov	r3, r0
 8011348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 801134c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8011354:	2301      	movs	r3, #1
 8011356:	e059      	b.n	801140c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011366:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4618      	mov	r0, r3
 801136e:	f002 fd7b 	bl	8013e68 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011380:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8011382:	2002      	movs	r0, #2
 8011384:	f7fa fd6e 	bl	800be64 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 ff59 	bl	8012240 <SD_PowerON>
 801138e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011390:	6a3b      	ldr	r3, [r7, #32]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00b      	beq.n	80113ae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2201      	movs	r2, #1
 801139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	431a      	orrs	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e02e      	b.n	801140c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 fe78 	bl	80120a4 <SD_InitCard>
 80113b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00b      	beq.n	80113d4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2201      	movs	r2, #1
 80113c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	431a      	orrs	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	e01b      	b.n	801140c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80113dc:	4618      	mov	r0, r3
 80113de:	f002 fdd5 	bl	8013f8c <SDMMC_CmdBlockLength>
 80113e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80113e4:	6a3b      	ldr	r3, [r7, #32]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d00f      	beq.n	801140a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	4a09      	ldr	r2, [pc, #36]	; (8011414 <HAL_SD_InitCard+0x10c>)
 80113f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113f6:	6a3b      	ldr	r3, [r7, #32]
 80113f8:	431a      	orrs	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2201      	movs	r2, #1
 8011402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011406:	2301      	movs	r3, #1
 8011408:	e000      	b.n	801140c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3728      	adds	r7, #40	; 0x28
 8011410:	46bd      	mov	sp, r7
 8011412:	bdb0      	pop	{r4, r5, r7, pc}
 8011414:	004005ff 	.word	0x004005ff

08011418 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b08c      	sub	sp, #48	; 0x30
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
 8011424:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d107      	bne.n	8011440 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801143c:	2301      	movs	r3, #1
 801143e:	e0c3      	b.n	80115c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011446:	b2db      	uxtb	r3, r3
 8011448:	2b01      	cmp	r3, #1
 801144a:	f040 80bc 	bne.w	80115c6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2200      	movs	r2, #0
 8011452:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	441a      	add	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801145e:	429a      	cmp	r2, r3
 8011460:	d907      	bls.n	8011472 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011466:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801146e:	2301      	movs	r3, #1
 8011470:	e0aa      	b.n	80115c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2203      	movs	r2, #3
 8011476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2200      	movs	r2, #0
 8011480:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8011490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011496:	4a4e      	ldr	r2, [pc, #312]	; (80115d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8011498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801149e:	4a4d      	ldr	r2, [pc, #308]	; (80115d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80114a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114a6:	2200      	movs	r2, #0
 80114a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ae:	2200      	movs	r2, #0
 80114b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114c2:	689a      	ldr	r2, [r3, #8]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	430a      	orrs	r2, r1
 80114cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	3380      	adds	r3, #128	; 0x80
 80114d8:	4619      	mov	r1, r3
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	025b      	lsls	r3, r3, #9
 80114e0:	089b      	lsrs	r3, r3, #2
 80114e2:	f7fb f937 	bl	800c754 <HAL_DMA_Start_IT>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d017      	beq.n	801151c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80114fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a35      	ldr	r2, [pc, #212]	; (80115d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8011502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011508:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2201      	movs	r2, #1
 8011514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8011518:	2301      	movs	r3, #1
 801151a:	e055      	b.n	80115c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f042 0208 	orr.w	r2, r2, #8
 801152a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011530:	2b01      	cmp	r3, #1
 8011532:	d002      	beq.n	801153a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	025b      	lsls	r3, r3, #9
 8011538:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801153a:	f04f 33ff 	mov.w	r3, #4294967295
 801153e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	025b      	lsls	r3, r3, #9
 8011544:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8011546:	2390      	movs	r3, #144	; 0x90
 8011548:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801154a:	2302      	movs	r3, #2
 801154c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801154e:	2300      	movs	r3, #0
 8011550:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8011552:	2301      	movs	r3, #1
 8011554:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f107 0210 	add.w	r2, r7, #16
 801155e:	4611      	mov	r1, r2
 8011560:	4618      	mov	r0, r3
 8011562:	f002 fce7 	bl	8013f34 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	2b01      	cmp	r3, #1
 801156a:	d90a      	bls.n	8011582 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2282      	movs	r2, #130	; 0x82
 8011570:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011578:	4618      	mov	r0, r3
 801157a:	f002 fd4b 	bl	8014014 <SDMMC_CmdReadMultiBlock>
 801157e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011580:	e009      	b.n	8011596 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2281      	movs	r2, #129	; 0x81
 8011586:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801158e:	4618      	mov	r0, r3
 8011590:	f002 fd1e 	bl	8013fd0 <SDMMC_CmdReadSingleBlock>
 8011594:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8011596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d012      	beq.n	80115c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a0d      	ldr	r2, [pc, #52]	; (80115d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80115a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115aa:	431a      	orrs	r2, r3
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2201      	movs	r2, #1
 80115b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2200      	movs	r2, #0
 80115bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	e002      	b.n	80115c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e000      	b.n	80115c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80115c6:	2302      	movs	r3, #2
  }
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3730      	adds	r7, #48	; 0x30
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	08011eb3 	.word	0x08011eb3
 80115d4:	08011f25 	.word	0x08011f25
 80115d8:	004005ff 	.word	0x004005ff

080115dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b08c      	sub	sp, #48	; 0x30
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	60b9      	str	r1, [r7, #8]
 80115e6:	607a      	str	r2, [r7, #4]
 80115e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d107      	bne.n	8011604 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011600:	2301      	movs	r3, #1
 8011602:	e0c6      	b.n	8011792 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801160a:	b2db      	uxtb	r3, r3
 801160c:	2b01      	cmp	r3, #1
 801160e:	f040 80bf 	bne.w	8011790 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2200      	movs	r2, #0
 8011616:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	441a      	add	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011622:	429a      	cmp	r2, r3
 8011624:	d907      	bls.n	8011636 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801162a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8011632:	2301      	movs	r3, #1
 8011634:	e0ad      	b.n	8011792 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2203      	movs	r2, #3
 801163a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2200      	movs	r2, #0
 8011644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f042 021a 	orr.w	r2, r2, #26
 8011654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801165a:	4a50      	ldr	r2, [pc, #320]	; (801179c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 801165c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011662:	4a4f      	ldr	r2, [pc, #316]	; (80117a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8011664:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801166a:	2200      	movs	r2, #0
 801166c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011672:	2b01      	cmp	r3, #1
 8011674:	d002      	beq.n	801167c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8011676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011678:	025b      	lsls	r3, r3, #9
 801167a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d90a      	bls.n	8011698 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	22a0      	movs	r2, #160	; 0xa0
 8011686:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801168e:	4618      	mov	r0, r3
 8011690:	f002 fd04 	bl	801409c <SDMMC_CmdWriteMultiBlock>
 8011694:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011696:	e009      	b.n	80116ac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2290      	movs	r2, #144	; 0x90
 801169c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116a4:	4618      	mov	r0, r3
 80116a6:	f002 fcd7 	bl	8014058 <SDMMC_CmdWriteSingleBlock>
 80116aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d012      	beq.n	80116d8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4a3b      	ldr	r2, [pc, #236]	; (80117a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80116b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c0:	431a      	orrs	r2, r3
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2201      	movs	r2, #1
 80116ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2200      	movs	r2, #0
 80116d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e05c      	b.n	8011792 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f042 0208 	orr.w	r2, r2, #8
 80116e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ec:	2240      	movs	r2, #64	; 0x40
 80116ee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011700:	689a      	ldr	r2, [r3, #8]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	430a      	orrs	r2, r1
 801170a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011710:	68b9      	ldr	r1, [r7, #8]
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	3380      	adds	r3, #128	; 0x80
 8011718:	461a      	mov	r2, r3
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	025b      	lsls	r3, r3, #9
 801171e:	089b      	lsrs	r3, r3, #2
 8011720:	f7fb f818 	bl	800c754 <HAL_DMA_Start_IT>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d01a      	beq.n	8011760 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f022 021a 	bic.w	r2, r2, #26
 8011738:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4a19      	ldr	r2, [pc, #100]	; (80117a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8011740:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011746:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2201      	movs	r2, #1
 8011752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	e018      	b.n	8011792 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011760:	f04f 33ff 	mov.w	r3, #4294967295
 8011764:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	025b      	lsls	r3, r3, #9
 801176a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801176c:	2390      	movs	r3, #144	; 0x90
 801176e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8011770:	2300      	movs	r3, #0
 8011772:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011774:	2300      	movs	r3, #0
 8011776:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8011778:	2301      	movs	r3, #1
 801177a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f107 0210 	add.w	r2, r7, #16
 8011784:	4611      	mov	r1, r2
 8011786:	4618      	mov	r0, r3
 8011788:	f002 fbd4 	bl	8013f34 <SDMMC_ConfigData>

      return HAL_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	e000      	b.n	8011792 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8011790:	2302      	movs	r3, #2
  }
}
 8011792:	4618      	mov	r0, r3
 8011794:	3730      	adds	r7, #48	; 0x30
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	08011e89 	.word	0x08011e89
 80117a0:	08011f25 	.word	0x08011f25
 80117a4:	004005ff 	.word	0x004005ff

080117a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d008      	beq.n	80117d6 <HAL_SD_IRQHandler+0x2e>
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f003 0308 	and.w	r3, r3, #8
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d003      	beq.n	80117d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f000 fdec 	bl	80123ac <SD_Read_IT>
 80117d4:	e15a      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 808d 	beq.w	8011900 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	4b9a      	ldr	r3, [pc, #616]	; (8011a64 <HAL_SD_IRQHandler+0x2bc>)
 80117fc:	400b      	ands	r3, r1
 80117fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f022 0201 	bic.w	r2, r2, #1
 801180e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f003 0308 	and.w	r3, r3, #8
 8011816:	2b00      	cmp	r3, #0
 8011818:	d039      	beq.n	801188e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f003 0302 	and.w	r3, r3, #2
 8011820:	2b00      	cmp	r3, #0
 8011822:	d104      	bne.n	801182e <HAL_SD_IRQHandler+0x86>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f003 0320 	and.w	r3, r3, #32
 801182a:	2b00      	cmp	r3, #0
 801182c:	d011      	beq.n	8011852 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4618      	mov	r0, r3
 8011834:	f002 fc54 	bl	80140e0 <SDMMC_CmdStopTransfer>
 8011838:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d008      	beq.n	8011852 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	431a      	orrs	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f000 f921 	bl	8011a94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f240 523a 	movw	r2, #1338	; 0x53a
 801185a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2201      	movs	r2, #1
 8011860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	2b00      	cmp	r3, #0
 8011872:	d104      	bne.n	801187e <HAL_SD_IRQHandler+0xd6>
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f003 0302 	and.w	r3, r3, #2
 801187a:	2b00      	cmp	r3, #0
 801187c:	d003      	beq.n	8011886 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f005 fa98 	bl	8016db4 <HAL_SD_RxCpltCallback>
 8011884:	e102      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f005 fa8a 	bl	8016da0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801188c:	e0fe      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011894:	2b00      	cmp	r3, #0
 8011896:	f000 80f9 	beq.w	8011a8c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f003 0320 	and.w	r3, r3, #32
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d011      	beq.n	80118c8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f002 fc19 	bl	80140e0 <SDMMC_CmdStopTransfer>
 80118ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d008      	beq.n	80118c8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	431a      	orrs	r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 f8e6 	bl	8011a94 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f003 0301 	and.w	r3, r3, #1
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f040 80dc 	bne.w	8011a8c <HAL_SD_IRQHandler+0x2e4>
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f003 0302 	and.w	r3, r3, #2
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f040 80d6 	bne.w	8011a8c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f022 0208 	bic.w	r2, r2, #8
 80118ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2201      	movs	r2, #1
 80118f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f005 fa51 	bl	8016da0 <HAL_SD_TxCpltCallback>
}
 80118fe:	e0c5      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801190a:	2b00      	cmp	r3, #0
 801190c:	d008      	beq.n	8011920 <HAL_SD_IRQHandler+0x178>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f003 0308 	and.w	r3, r3, #8
 8011914:	2b00      	cmp	r3, #0
 8011916:	d003      	beq.n	8011920 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 fd98 	bl	801244e <SD_Write_IT>
 801191e:	e0b5      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011926:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 801192a:	2b00      	cmp	r3, #0
 801192c:	f000 80ae 	beq.w	8011a8c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011936:	f003 0302 	and.w	r3, r3, #2
 801193a:	2b00      	cmp	r3, #0
 801193c:	d005      	beq.n	801194a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011942:	f043 0202 	orr.w	r2, r3, #2
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011950:	f003 0308 	and.w	r3, r3, #8
 8011954:	2b00      	cmp	r3, #0
 8011956:	d005      	beq.n	8011964 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801195c:	f043 0208 	orr.w	r2, r3, #8
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196a:	f003 0320 	and.w	r3, r3, #32
 801196e:	2b00      	cmp	r3, #0
 8011970:	d005      	beq.n	801197e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011976:	f043 0220 	orr.w	r2, r3, #32
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011984:	f003 0310 	and.w	r3, r3, #16
 8011988:	2b00      	cmp	r3, #0
 801198a:	d005      	beq.n	8011998 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011990:	f043 0210 	orr.w	r2, r3, #16
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f240 523a 	movw	r2, #1338	; 0x53a
 80119a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80119b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f002 fb92 	bl	80140e0 <SDMMC_CmdStopTransfer>
 80119bc:	4602      	mov	r2, r0
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119c2:	431a      	orrs	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f003 0308 	and.w	r3, r3, #8
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2201      	movs	r2, #1
 80119d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2200      	movs	r2, #0
 80119de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 f857 	bl	8011a94 <HAL_SD_ErrorCallback>
}
 80119e6:	e051      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d04c      	beq.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f003 0310 	and.w	r3, r3, #16
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d104      	bne.n	8011a06 <HAL_SD_IRQHandler+0x25e>
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f003 0320 	and.w	r3, r3, #32
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d011      	beq.n	8011a2a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a0a:	4a17      	ldr	r2, [pc, #92]	; (8011a68 <HAL_SD_IRQHandler+0x2c0>)
 8011a0c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fa fefe 	bl	800c814 <HAL_DMA_Abort_IT>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d036      	beq.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a22:	4618      	mov	r0, r3
 8011a24:	f000 fad0 	bl	8011fc8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8011a28:	e030      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f003 0301 	and.w	r3, r3, #1
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d104      	bne.n	8011a3e <HAL_SD_IRQHandler+0x296>
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f003 0302 	and.w	r3, r3, #2
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d018      	beq.n	8011a70 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a42:	4a0a      	ldr	r2, [pc, #40]	; (8011a6c <HAL_SD_IRQHandler+0x2c4>)
 8011a44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fa fee2 	bl	800c814 <HAL_DMA_Abort_IT>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d01a      	beq.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 faeb 	bl	8012036 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8011a60:	e014      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
 8011a62:	bf00      	nop
 8011a64:	ffff3ec5 	.word	0xffff3ec5
 8011a68:	08011fc9 	.word	0x08011fc9
 8011a6c:	08012037 	.word	0x08012037
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2201      	movs	r2, #1
 8011a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f005 f981 	bl	8016d8c <HAL_SD_AbortCallback>
}
 8011a8a:	e7ff      	b.n	8011a8c <HAL_SD_IRQHandler+0x2e4>
 8011a8c:	bf00      	nop
 8011a8e:	3710      	adds	r7, #16
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8011a9c:	bf00      	nop
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ab6:	0f9b      	lsrs	r3, r3, #30
 8011ab8:	b2da      	uxtb	r2, r3
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ac2:	0e9b      	lsrs	r3, r3, #26
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	f003 030f 	and.w	r3, r3, #15
 8011aca:	b2da      	uxtb	r2, r3
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ad4:	0e1b      	lsrs	r3, r3, #24
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	f003 0303 	and.w	r3, r3, #3
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ae6:	0c1b      	lsrs	r3, r3, #16
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011af2:	0a1b      	lsrs	r3, r3, #8
 8011af4:	b2da      	uxtb	r2, r3
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b08:	0d1b      	lsrs	r3, r3, #20
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b14:	0c1b      	lsrs	r3, r3, #16
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	f003 030f 	and.w	r3, r3, #15
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b26:	0bdb      	lsrs	r3, r3, #15
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b38:	0b9b      	lsrs	r3, r3, #14
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	f003 0301 	and.w	r3, r3, #1
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b4a:	0b5b      	lsrs	r3, r3, #13
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	f003 0301 	and.w	r3, r3, #1
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b5c:	0b1b      	lsrs	r3, r3, #12
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	f003 0301 	and.w	r3, r3, #1
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d163      	bne.n	8011c40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b7c:	009a      	lsls	r2, r3, #2
 8011b7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8011b82:	4013      	ands	r3, r2
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011b88:	0f92      	lsrs	r2, r2, #30
 8011b8a:	431a      	orrs	r2, r3
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b94:	0edb      	lsrs	r3, r3, #27
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	f003 0307 	and.w	r3, r3, #7
 8011b9c:	b2da      	uxtb	r2, r3
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ba6:	0e1b      	lsrs	r3, r3, #24
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	f003 0307 	and.w	r3, r3, #7
 8011bae:	b2da      	uxtb	r2, r3
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb8:	0d5b      	lsrs	r3, r3, #21
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	f003 0307 	and.w	r3, r3, #7
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bca:	0c9b      	lsrs	r3, r3, #18
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	f003 0307 	and.w	r3, r3, #7
 8011bd2:	b2da      	uxtb	r2, r3
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bdc:	0bdb      	lsrs	r3, r3, #15
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	f003 0307 	and.w	r3, r3, #7
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	691b      	ldr	r3, [r3, #16]
 8011bee:	1c5a      	adds	r2, r3, #1
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	7e1b      	ldrb	r3, [r3, #24]
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	f003 0307 	and.w	r3, r3, #7
 8011bfe:	3302      	adds	r3, #2
 8011c00:	2201      	movs	r2, #1
 8011c02:	fa02 f303 	lsl.w	r3, r2, r3
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011c0a:	fb03 f202 	mul.w	r2, r3, r2
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	7a1b      	ldrb	r3, [r3, #8]
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	f003 030f 	and.w	r3, r3, #15
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	409a      	lsls	r2, r3
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011c2c:	0a52      	lsrs	r2, r2, #9
 8011c2e:	fb03 f202 	mul.w	r2, r3, r2
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c3c:	661a      	str	r2, [r3, #96]	; 0x60
 8011c3e:	e031      	b.n	8011ca4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d11d      	bne.n	8011c84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c4c:	041b      	lsls	r3, r3, #16
 8011c4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c56:	0c1b      	lsrs	r3, r3, #16
 8011c58:	431a      	orrs	r2, r3
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	691b      	ldr	r3, [r3, #16]
 8011c62:	3301      	adds	r3, #1
 8011c64:	029a      	lsls	r2, r3, #10
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	661a      	str	r2, [r3, #96]	; 0x60
 8011c82:	e00f      	b.n	8011ca4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4a58      	ldr	r2, [pc, #352]	; (8011dec <HAL_SD_GetCardCSD+0x344>)
 8011c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2201      	movs	r2, #1
 8011c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	e09d      	b.n	8011de0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ca8:	0b9b      	lsrs	r3, r3, #14
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cba:	09db      	lsrs	r3, r3, #7
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cc2:	b2da      	uxtb	r2, r3
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cdc:	0fdb      	lsrs	r3, r3, #31
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ce8:	0f5b      	lsrs	r3, r3, #29
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	f003 0303 	and.w	r3, r3, #3
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cfa:	0e9b      	lsrs	r3, r3, #26
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	f003 0307 	and.w	r3, r3, #7
 8011d02:	b2da      	uxtb	r2, r3
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d0c:	0d9b      	lsrs	r3, r3, #22
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	f003 030f 	and.w	r3, r3, #15
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d1e:	0d5b      	lsrs	r3, r3, #21
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	f003 0301 	and.w	r3, r3, #1
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	2200      	movs	r2, #0
 8011d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d3a:	0c1b      	lsrs	r3, r3, #16
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d4e:	0bdb      	lsrs	r3, r3, #15
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	f003 0301 	and.w	r3, r3, #1
 8011d56:	b2da      	uxtb	r2, r3
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d62:	0b9b      	lsrs	r3, r3, #14
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	f003 0301 	and.w	r3, r3, #1
 8011d6a:	b2da      	uxtb	r2, r3
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d76:	0b5b      	lsrs	r3, r3, #13
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	f003 0301 	and.w	r3, r3, #1
 8011d7e:	b2da      	uxtb	r2, r3
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d8a:	0b1b      	lsrs	r3, r3, #12
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	b2da      	uxtb	r2, r3
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d9e:	0a9b      	lsrs	r3, r3, #10
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	f003 0303 	and.w	r3, r3, #3
 8011da6:	b2da      	uxtb	r2, r3
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011db2:	0a1b      	lsrs	r3, r3, #8
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	f003 0303 	and.w	r3, r3, #3
 8011dba:	b2da      	uxtb	r2, r3
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc6:	085b      	lsrs	r3, r3, #1
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	2201      	movs	r2, #1
 8011dda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8011dde:	2300      	movs	r3, #0
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	370c      	adds	r7, #12
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr
 8011dec:	004005ff 	.word	0x004005ff

08011df0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b083      	sub	sp, #12
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8011e3a:	2300      	movs	r3, #0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	370c      	adds	r7, #12
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr

08011e48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b086      	sub	sp, #24
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011e54:	f107 030c 	add.w	r3, r7, #12
 8011e58:	4619      	mov	r1, r3
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 fa7e 	bl	801235c <SD_SendStatus>
 8011e60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d005      	beq.n	8011e74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	431a      	orrs	r2, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	0a5b      	lsrs	r3, r3, #9
 8011e78:	f003 030f 	and.w	r3, r3, #15
 8011e7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8011e7e:	693b      	ldr	r3, [r7, #16]
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3718      	adds	r7, #24
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e94:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011ea4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8011ea6:	bf00      	nop
 8011ea8:	3714      	adds	r7, #20
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr

08011eb2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011eb2:	b580      	push	{r7, lr}
 8011eb4:	b084      	sub	sp, #16
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ebe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ec4:	2b82      	cmp	r3, #130	; 0x82
 8011ec6:	d111      	bne.n	8011eec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f002 f907 	bl	80140e0 <SDMMC_CmdStopTransfer>
 8011ed2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d008      	beq.n	8011eec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	431a      	orrs	r2, r3
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	f7ff fdd4 	bl	8011a94 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f022 0208 	bic.w	r2, r2, #8
 8011efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f240 523a 	movw	r2, #1338	; 0x53a
 8011f04:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2200      	movs	r2, #0
 8011f12:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f004 ff4d 	bl	8016db4 <HAL_SD_RxCpltCallback>
#endif
}
 8011f1a:	bf00      	nop
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
	...

08011f24 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f30:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f7fa fe1a 	bl	800cb6c <HAL_DMA_GetError>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d03e      	beq.n	8011fbc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f44:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f4c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d002      	beq.n	8011f5a <SD_DMAError+0x36>
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	d12d      	bne.n	8011fb6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	4a19      	ldr	r2, [pc, #100]	; (8011fc4 <SD_DMAError+0xa0>)
 8011f60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8011f70:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8011f7e:	6978      	ldr	r0, [r7, #20]
 8011f80:	f7ff ff62 	bl	8011e48 <HAL_SD_GetCardState>
 8011f84:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	2b06      	cmp	r3, #6
 8011f8a:	d002      	beq.n	8011f92 <SD_DMAError+0x6e>
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2b05      	cmp	r3, #5
 8011f90:	d10a      	bne.n	8011fa8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	4618      	mov	r0, r3
 8011f98:	f002 f8a2 	bl	80140e0 <SDMMC_CmdStopTransfer>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa2:	431a      	orrs	r2, r3
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	2201      	movs	r2, #1
 8011fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8011fb6:	6978      	ldr	r0, [r7, #20]
 8011fb8:	f7ff fd6c 	bl	8011a94 <HAL_SD_ErrorCallback>
#endif
  }
}
 8011fbc:	bf00      	nop
 8011fbe:	3718      	adds	r7, #24
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	004005ff 	.word	0x004005ff

08011fc8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b084      	sub	sp, #16
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fd4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f240 523a 	movw	r2, #1338	; 0x53a
 8011fde:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f7ff ff31 	bl	8011e48 <HAL_SD_GetCardState>
 8011fe6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2201      	movs	r2, #1
 8011fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2b06      	cmp	r3, #6
 8011ffa:	d002      	beq.n	8012002 <SD_DMATxAbort+0x3a>
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	2b05      	cmp	r3, #5
 8012000:	d10a      	bne.n	8012018 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4618      	mov	r0, r3
 8012008:	f002 f86a 	bl	80140e0 <SDMMC_CmdStopTransfer>
 801200c:	4602      	mov	r2, r0
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012012:	431a      	orrs	r2, r3
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801201c:	2b00      	cmp	r3, #0
 801201e:	d103      	bne.n	8012028 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	f004 feb3 	bl	8016d8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8012026:	e002      	b.n	801202e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f7ff fd33 	bl	8011a94 <HAL_SD_ErrorCallback>
}
 801202e:	bf00      	nop
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b084      	sub	sp, #16
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012042:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f240 523a 	movw	r2, #1338	; 0x53a
 801204c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	f7ff fefa 	bl	8011e48 <HAL_SD_GetCardState>
 8012054:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2201      	movs	r2, #1
 801205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2200      	movs	r2, #0
 8012062:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b06      	cmp	r3, #6
 8012068:	d002      	beq.n	8012070 <SD_DMARxAbort+0x3a>
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	2b05      	cmp	r3, #5
 801206e:	d10a      	bne.n	8012086 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4618      	mov	r0, r3
 8012076:	f002 f833 	bl	80140e0 <SDMMC_CmdStopTransfer>
 801207a:	4602      	mov	r2, r0
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012080:	431a      	orrs	r2, r3
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801208a:	2b00      	cmp	r3, #0
 801208c:	d103      	bne.n	8012096 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f004 fe7c 	bl	8016d8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8012094:	e002      	b.n	801209c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8012096:	68f8      	ldr	r0, [r7, #12]
 8012098:	f7ff fcfc 	bl	8011a94 <HAL_SD_ErrorCallback>
}
 801209c:	bf00      	nop
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80120a4:	b5b0      	push	{r4, r5, r7, lr}
 80120a6:	b094      	sub	sp, #80	; 0x50
 80120a8:	af04      	add	r7, sp, #16
 80120aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80120ac:	2301      	movs	r3, #1
 80120ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4618      	mov	r0, r3
 80120b6:	f001 fee5 	bl	8013e84 <SDMMC_GetPowerState>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d102      	bne.n	80120c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80120c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80120c4:	e0b8      	b.n	8012238 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120ca:	2b03      	cmp	r3, #3
 80120cc:	d02f      	beq.n	801212e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f002 f8cc 	bl	8014270 <SDMMC_CmdSendCID>
 80120d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80120da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d001      	beq.n	80120e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80120e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120e2:	e0a9      	b.n	8012238 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2100      	movs	r1, #0
 80120ea:	4618      	mov	r0, r3
 80120ec:	f001 ff0f 	bl	8013f0e <SDMMC_GetResponse>
 80120f0:	4602      	mov	r2, r0
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2104      	movs	r1, #4
 80120fc:	4618      	mov	r0, r3
 80120fe:	f001 ff06 	bl	8013f0e <SDMMC_GetResponse>
 8012102:	4602      	mov	r2, r0
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	2108      	movs	r1, #8
 801210e:	4618      	mov	r0, r3
 8012110:	f001 fefd 	bl	8013f0e <SDMMC_GetResponse>
 8012114:	4602      	mov	r2, r0
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	210c      	movs	r1, #12
 8012120:	4618      	mov	r0, r3
 8012122:	f001 fef4 	bl	8013f0e <SDMMC_GetResponse>
 8012126:	4602      	mov	r2, r0
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012132:	2b03      	cmp	r3, #3
 8012134:	d00d      	beq.n	8012152 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f107 020e 	add.w	r2, r7, #14
 801213e:	4611      	mov	r1, r2
 8012140:	4618      	mov	r0, r3
 8012142:	f002 f8d2 	bl	80142ea <SDMMC_CmdSetRelAdd>
 8012146:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801214a:	2b00      	cmp	r3, #0
 801214c:	d001      	beq.n	8012152 <SD_InitCard+0xae>
    {
      return errorstate;
 801214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012150:	e072      	b.n	8012238 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012156:	2b03      	cmp	r3, #3
 8012158:	d036      	beq.n	80121c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801215a:	89fb      	ldrh	r3, [r7, #14]
 801215c:	461a      	mov	r2, r3
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801216a:	041b      	lsls	r3, r3, #16
 801216c:	4619      	mov	r1, r3
 801216e:	4610      	mov	r0, r2
 8012170:	f002 f89c 	bl	80142ac <SDMMC_CmdSendCSD>
 8012174:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012178:	2b00      	cmp	r3, #0
 801217a:	d001      	beq.n	8012180 <SD_InitCard+0xdc>
    {
      return errorstate;
 801217c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801217e:	e05b      	b.n	8012238 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2100      	movs	r1, #0
 8012186:	4618      	mov	r0, r3
 8012188:	f001 fec1 	bl	8013f0e <SDMMC_GetResponse>
 801218c:	4602      	mov	r2, r0
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2104      	movs	r1, #4
 8012198:	4618      	mov	r0, r3
 801219a:	f001 feb8 	bl	8013f0e <SDMMC_GetResponse>
 801219e:	4602      	mov	r2, r0
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2108      	movs	r1, #8
 80121aa:	4618      	mov	r0, r3
 80121ac:	f001 feaf 	bl	8013f0e <SDMMC_GetResponse>
 80121b0:	4602      	mov	r2, r0
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	210c      	movs	r1, #12
 80121bc:	4618      	mov	r0, r3
 80121be:	f001 fea6 	bl	8013f0e <SDMMC_GetResponse>
 80121c2:	4602      	mov	r2, r0
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2104      	movs	r1, #4
 80121ce:	4618      	mov	r0, r3
 80121d0:	f001 fe9d 	bl	8013f0e <SDMMC_GetResponse>
 80121d4:	4603      	mov	r3, r0
 80121d6:	0d1a      	lsrs	r2, r3, #20
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80121dc:	f107 0310 	add.w	r3, r7, #16
 80121e0:	4619      	mov	r1, r3
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7ff fc60 	bl	8011aa8 <HAL_SD_GetCardCSD>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d002      	beq.n	80121f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80121ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80121f2:	e021      	b.n	8012238 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6819      	ldr	r1, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121fc:	041b      	lsls	r3, r3, #16
 80121fe:	2200      	movs	r2, #0
 8012200:	461c      	mov	r4, r3
 8012202:	4615      	mov	r5, r2
 8012204:	4622      	mov	r2, r4
 8012206:	462b      	mov	r3, r5
 8012208:	4608      	mov	r0, r1
 801220a:	f001 ff8b 	bl	8014124 <SDMMC_CmdSelDesel>
 801220e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8012210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <SD_InitCard+0x176>
  {
    return errorstate;
 8012216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012218:	e00e      	b.n	8012238 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681d      	ldr	r5, [r3, #0]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	466c      	mov	r4, sp
 8012222:	f103 0210 	add.w	r2, r3, #16
 8012226:	ca07      	ldmia	r2, {r0, r1, r2}
 8012228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801222c:	3304      	adds	r3, #4
 801222e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012230:	4628      	mov	r0, r5
 8012232:	f001 fdcf 	bl	8013dd4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8012236:	2300      	movs	r3, #0
}
 8012238:	4618      	mov	r0, r3
 801223a:	3740      	adds	r7, #64	; 0x40
 801223c:	46bd      	mov	sp, r7
 801223e:	bdb0      	pop	{r4, r5, r7, pc}

08012240 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012248:	2300      	movs	r3, #0
 801224a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 801224c:	2300      	movs	r3, #0
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	2300      	movs	r3, #0
 8012252:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	4618      	mov	r0, r3
 801225a:	f001 ff86 	bl	801416a <SDMMC_CmdGoIdleState>
 801225e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d001      	beq.n	801226a <SD_PowerON+0x2a>
  {
    return errorstate;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	e072      	b.n	8012350 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4618      	mov	r0, r3
 8012270:	f001 ff99 	bl	80141a6 <SDMMC_CmdOperCond>
 8012274:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d00d      	beq.n	8012298 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4618      	mov	r0, r3
 8012288:	f001 ff6f 	bl	801416a <SDMMC_CmdGoIdleState>
 801228c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d004      	beq.n	801229e <SD_PowerON+0x5e>
    {
      return errorstate;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	e05b      	b.n	8012350 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2201      	movs	r2, #1
 801229c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d137      	bne.n	8012316 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2100      	movs	r1, #0
 80122ac:	4618      	mov	r0, r3
 80122ae:	f001 ff99 	bl	80141e4 <SDMMC_CmdAppCommand>
 80122b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d02d      	beq.n	8012316 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80122ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80122be:	e047      	b.n	8012350 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2100      	movs	r1, #0
 80122c6:	4618      	mov	r0, r3
 80122c8:	f001 ff8c 	bl	80141e4 <SDMMC_CmdAppCommand>
 80122cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d001      	beq.n	80122d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	e03b      	b.n	8012350 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	491e      	ldr	r1, [pc, #120]	; (8012358 <SD_PowerON+0x118>)
 80122de:	4618      	mov	r0, r3
 80122e0:	f001 ffa2 	bl	8014228 <SDMMC_CmdAppOperCommand>
 80122e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80122ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80122f0:	e02e      	b.n	8012350 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2100      	movs	r1, #0
 80122f8:	4618      	mov	r0, r3
 80122fa:	f001 fe08 	bl	8013f0e <SDMMC_GetResponse>
 80122fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	0fdb      	lsrs	r3, r3, #31
 8012304:	2b01      	cmp	r3, #1
 8012306:	d101      	bne.n	801230c <SD_PowerON+0xcc>
 8012308:	2301      	movs	r3, #1
 801230a:	e000      	b.n	801230e <SD_PowerON+0xce>
 801230c:	2300      	movs	r3, #0
 801230e:	613b      	str	r3, [r7, #16]

    count++;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	3301      	adds	r3, #1
 8012314:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801231c:	4293      	cmp	r3, r2
 801231e:	d802      	bhi.n	8012326 <SD_PowerON+0xe6>
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d0cc      	beq.n	80122c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801232c:	4293      	cmp	r3, r2
 801232e:	d902      	bls.n	8012336 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8012330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012334:	e00c      	b.n	8012350 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801233c:	2b00      	cmp	r3, #0
 801233e:	d003      	beq.n	8012348 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2201      	movs	r2, #1
 8012344:	645a      	str	r2, [r3, #68]	; 0x44
 8012346:	e002      	b.n	801234e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	c1100000 	.word	0xc1100000

0801235c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d102      	bne.n	8012372 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801236c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012370:	e018      	b.n	80123a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801237a:	041b      	lsls	r3, r3, #16
 801237c:	4619      	mov	r1, r3
 801237e:	4610      	mov	r0, r2
 8012380:	f001 ffd4 	bl	801432c <SDMMC_CmdSendStatus>
 8012384:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <SD_SendStatus+0x34>
  {
    return errorstate;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	e009      	b.n	80123a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2100      	movs	r1, #0
 8012396:	4618      	mov	r0, r3
 8012398:	f001 fdb9 	bl	8013f0e <SDMMC_GetResponse>
 801239c:	4602      	mov	r2, r0
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80123a2:	2300      	movs	r3, #0
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3710      	adds	r7, #16
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d03f      	beq.n	8012446 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80123c6:	2300      	movs	r3, #0
 80123c8:	617b      	str	r3, [r7, #20]
 80123ca:	e033      	b.n	8012434 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f001 fd2b 	bl	8013e2c <SDMMC_ReadFIFO>
 80123d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	3301      	adds	r3, #1
 80123e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	0a1b      	lsrs	r3, r3, #8
 80123f0:	b2da      	uxtb	r2, r3
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	3301      	adds	r3, #1
 80123fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	3b01      	subs	r3, #1
 8012400:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	0c1b      	lsrs	r3, r3, #16
 8012406:	b2da      	uxtb	r2, r3
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	3301      	adds	r3, #1
 8012410:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	3b01      	subs	r3, #1
 8012416:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	0e1b      	lsrs	r3, r3, #24
 801241c:	b2da      	uxtb	r2, r3
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	701a      	strb	r2, [r3, #0]
      tmp++;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	3301      	adds	r3, #1
 8012426:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	3b01      	subs	r3, #1
 801242c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	3301      	adds	r3, #1
 8012432:	617b      	str	r3, [r7, #20]
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	2b07      	cmp	r3, #7
 8012438:	d9c8      	bls.n	80123cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	693a      	ldr	r2, [r7, #16]
 8012444:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8012446:	bf00      	nop
 8012448:	3718      	adds	r7, #24
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b086      	sub	sp, #24
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6a1b      	ldr	r3, [r3, #32]
 801245a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012460:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d043      	beq.n	80124f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8012468:	2300      	movs	r3, #0
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	e037      	b.n	80124de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	60bb      	str	r3, [r7, #8]
      tmp++;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	3301      	adds	r3, #1
 8012478:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	3b01      	subs	r3, #1
 801247e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	021a      	lsls	r2, r3, #8
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	4313      	orrs	r3, r2
 801248a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	3301      	adds	r3, #1
 8012490:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	3b01      	subs	r3, #1
 8012496:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	041a      	lsls	r2, r3, #16
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	4313      	orrs	r3, r2
 80124a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	3301      	adds	r3, #1
 80124a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	3b01      	subs	r3, #1
 80124ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	061a      	lsls	r2, r3, #24
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	4313      	orrs	r3, r2
 80124ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	3301      	adds	r3, #1
 80124c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	3b01      	subs	r3, #1
 80124c6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f107 0208 	add.w	r2, r7, #8
 80124d0:	4611      	mov	r1, r2
 80124d2:	4618      	mov	r0, r3
 80124d4:	f001 fcb7 	bl	8013e46 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	3301      	adds	r3, #1
 80124dc:	617b      	str	r3, [r7, #20]
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	2b07      	cmp	r3, #7
 80124e2:	d9c4      	bls.n	801246e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	693a      	ldr	r2, [r7, #16]
 80124ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80124f0:	bf00      	nop
 80124f2:	3718      	adds	r7, #24
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d101      	bne.n	801250e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 801250a:	2301      	movs	r3, #1
 801250c:	e038      	b.n	8012580 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2200      	movs	r2, #0
 801251e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7f9 fad0 	bl	800bac8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	3308      	adds	r3, #8
 8012530:	4619      	mov	r1, r3
 8012532:	4610      	mov	r0, r2
 8012534:	f001 fb36 	bl	8013ba4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6818      	ldr	r0, [r3, #0]
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	461a      	mov	r2, r3
 8012542:	68b9      	ldr	r1, [r7, #8]
 8012544:	f001 fbbe 	bl	8013cc4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	6858      	ldr	r0, [r3, #4]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	689a      	ldr	r2, [r3, #8]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012554:	6879      	ldr	r1, [r7, #4]
 8012556:	f001 fc05 	bl	8013d64 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	6892      	ldr	r2, [r2, #8]
 8012562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	6892      	ldr	r2, [r2, #8]
 801256e:	f041 0101 	orr.w	r1, r1, #1
 8012572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2201      	movs	r2, #1
 801257a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 801257e:	2300      	movs	r3, #0
}
 8012580:	4618      	mov	r0, r3
 8012582:	3710      	adds	r7, #16
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d101      	bne.n	801259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012596:	2301      	movs	r3, #1
 8012598:	e049      	b.n	801262e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d106      	bne.n	80125b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2200      	movs	r2, #0
 80125aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7f9 f952 	bl	800b858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2202      	movs	r2, #2
 80125b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	3304      	adds	r3, #4
 80125c4:	4619      	mov	r1, r3
 80125c6:	4610      	mov	r0, r2
 80125c8:	f000 fa74 	bl	8012ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2201      	movs	r2, #1
 80125d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2201      	movs	r2, #1
 80125d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2201      	movs	r2, #1
 80125e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2201      	movs	r2, #1
 80125e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2201      	movs	r2, #1
 80125f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2201      	movs	r2, #1
 80125f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2201      	movs	r2, #1
 8012600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2201      	movs	r2, #1
 8012608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2201      	movs	r2, #1
 8012610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2201      	movs	r2, #1
 8012618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2201      	movs	r2, #1
 8012620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2201      	movs	r2, #1
 8012628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012636:	b580      	push	{r7, lr}
 8012638:	b082      	sub	sp, #8
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d101      	bne.n	8012648 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012644:	2301      	movs	r3, #1
 8012646:	e049      	b.n	80126dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b00      	cmp	r3, #0
 8012652:	d106      	bne.n	8012662 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f000 f841 	bl	80126e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2202      	movs	r2, #2
 8012666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3304      	adds	r3, #4
 8012672:	4619      	mov	r1, r3
 8012674:	4610      	mov	r0, r2
 8012676:	f000 fa1d 	bl	8012ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2201      	movs	r2, #1
 801267e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2201      	movs	r2, #1
 8012686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2201      	movs	r2, #1
 801268e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2201      	movs	r2, #1
 8012696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2201      	movs	r2, #1
 801269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2201      	movs	r2, #1
 80126a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2201      	movs	r2, #1
 80126ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2201      	movs	r2, #1
 80126b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2201      	movs	r2, #1
 80126be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2201      	movs	r2, #1
 80126c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2201      	movs	r2, #1
 80126ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2201      	movs	r2, #1
 80126d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80126da:	2300      	movs	r3, #0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80126ec:	bf00      	nop
 80126ee:	370c      	adds	r7, #12
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012704:	2300      	movs	r3, #0
 8012706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801270e:	2b01      	cmp	r3, #1
 8012710:	d101      	bne.n	8012716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012712:	2302      	movs	r3, #2
 8012714:	e0ff      	b.n	8012916 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2201      	movs	r2, #1
 801271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2b14      	cmp	r3, #20
 8012722:	f200 80f0 	bhi.w	8012906 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012726:	a201      	add	r2, pc, #4	; (adr r2, 801272c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272c:	08012781 	.word	0x08012781
 8012730:	08012907 	.word	0x08012907
 8012734:	08012907 	.word	0x08012907
 8012738:	08012907 	.word	0x08012907
 801273c:	080127c1 	.word	0x080127c1
 8012740:	08012907 	.word	0x08012907
 8012744:	08012907 	.word	0x08012907
 8012748:	08012907 	.word	0x08012907
 801274c:	08012803 	.word	0x08012803
 8012750:	08012907 	.word	0x08012907
 8012754:	08012907 	.word	0x08012907
 8012758:	08012907 	.word	0x08012907
 801275c:	08012843 	.word	0x08012843
 8012760:	08012907 	.word	0x08012907
 8012764:	08012907 	.word	0x08012907
 8012768:	08012907 	.word	0x08012907
 801276c:	08012885 	.word	0x08012885
 8012770:	08012907 	.word	0x08012907
 8012774:	08012907 	.word	0x08012907
 8012778:	08012907 	.word	0x08012907
 801277c:	080128c5 	.word	0x080128c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	68b9      	ldr	r1, [r7, #8]
 8012786:	4618      	mov	r0, r3
 8012788:	f000 fa34 	bl	8012bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	699a      	ldr	r2, [r3, #24]
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f042 0208 	orr.w	r2, r2, #8
 801279a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	699a      	ldr	r2, [r3, #24]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	f022 0204 	bic.w	r2, r2, #4
 80127aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	6999      	ldr	r1, [r3, #24]
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	691a      	ldr	r2, [r3, #16]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	430a      	orrs	r2, r1
 80127bc:	619a      	str	r2, [r3, #24]
      break;
 80127be:	e0a5      	b.n	801290c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68b9      	ldr	r1, [r7, #8]
 80127c6:	4618      	mov	r0, r3
 80127c8:	f000 fa86 	bl	8012cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	699a      	ldr	r2, [r3, #24]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80127da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	699a      	ldr	r2, [r3, #24]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80127ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6999      	ldr	r1, [r3, #24]
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	691b      	ldr	r3, [r3, #16]
 80127f6:	021a      	lsls	r2, r3, #8
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	430a      	orrs	r2, r1
 80127fe:	619a      	str	r2, [r3, #24]
      break;
 8012800:	e084      	b.n	801290c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	68b9      	ldr	r1, [r7, #8]
 8012808:	4618      	mov	r0, r3
 801280a:	f000 fadd 	bl	8012dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	69da      	ldr	r2, [r3, #28]
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f042 0208 	orr.w	r2, r2, #8
 801281c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	69da      	ldr	r2, [r3, #28]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f022 0204 	bic.w	r2, r2, #4
 801282c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	69d9      	ldr	r1, [r3, #28]
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	691a      	ldr	r2, [r3, #16]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	430a      	orrs	r2, r1
 801283e:	61da      	str	r2, [r3, #28]
      break;
 8012840:	e064      	b.n	801290c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	68b9      	ldr	r1, [r7, #8]
 8012848:	4618      	mov	r0, r3
 801284a:	f000 fb33 	bl	8012eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	69da      	ldr	r2, [r3, #28]
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801285c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	69da      	ldr	r2, [r3, #28]
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801286c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	69d9      	ldr	r1, [r3, #28]
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	691b      	ldr	r3, [r3, #16]
 8012878:	021a      	lsls	r2, r3, #8
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	430a      	orrs	r2, r1
 8012880:	61da      	str	r2, [r3, #28]
      break;
 8012882:	e043      	b.n	801290c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	68b9      	ldr	r1, [r7, #8]
 801288a:	4618      	mov	r0, r3
 801288c:	f000 fb6a 	bl	8012f64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f042 0208 	orr.w	r2, r2, #8
 801289e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	f022 0204 	bic.w	r2, r2, #4
 80128ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	691a      	ldr	r2, [r3, #16]
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	430a      	orrs	r2, r1
 80128c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80128c2:	e023      	b.n	801290c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	68b9      	ldr	r1, [r7, #8]
 80128ca:	4618      	mov	r0, r3
 80128cc:	f000 fb9c 	bl	8013008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80128de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80128ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	021a      	lsls	r2, r3, #8
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	430a      	orrs	r2, r1
 8012902:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012904:	e002      	b.n	801290c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012906:	2301      	movs	r3, #1
 8012908:	75fb      	strb	r3, [r7, #23]
      break;
 801290a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2200      	movs	r2, #0
 8012910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012914:	7dfb      	ldrb	r3, [r7, #23]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop

08012920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801292a:	2300      	movs	r3, #0
 801292c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012934:	2b01      	cmp	r3, #1
 8012936:	d101      	bne.n	801293c <HAL_TIM_ConfigClockSource+0x1c>
 8012938:	2302      	movs	r3, #2
 801293a:	e0b4      	b.n	8012aa6 <HAL_TIM_ConfigClockSource+0x186>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2201      	movs	r2, #1
 8012940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2202      	movs	r2, #2
 8012948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012954:	68ba      	ldr	r2, [r7, #8]
 8012956:	4b56      	ldr	r3, [pc, #344]	; (8012ab0 <HAL_TIM_ConfigClockSource+0x190>)
 8012958:	4013      	ands	r3, r2
 801295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012974:	d03e      	beq.n	80129f4 <HAL_TIM_ConfigClockSource+0xd4>
 8012976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801297a:	f200 8087 	bhi.w	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 801297e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012982:	f000 8086 	beq.w	8012a92 <HAL_TIM_ConfigClockSource+0x172>
 8012986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801298a:	d87f      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 801298c:	2b70      	cmp	r3, #112	; 0x70
 801298e:	d01a      	beq.n	80129c6 <HAL_TIM_ConfigClockSource+0xa6>
 8012990:	2b70      	cmp	r3, #112	; 0x70
 8012992:	d87b      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 8012994:	2b60      	cmp	r3, #96	; 0x60
 8012996:	d050      	beq.n	8012a3a <HAL_TIM_ConfigClockSource+0x11a>
 8012998:	2b60      	cmp	r3, #96	; 0x60
 801299a:	d877      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 801299c:	2b50      	cmp	r3, #80	; 0x50
 801299e:	d03c      	beq.n	8012a1a <HAL_TIM_ConfigClockSource+0xfa>
 80129a0:	2b50      	cmp	r3, #80	; 0x50
 80129a2:	d873      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 80129a4:	2b40      	cmp	r3, #64	; 0x40
 80129a6:	d058      	beq.n	8012a5a <HAL_TIM_ConfigClockSource+0x13a>
 80129a8:	2b40      	cmp	r3, #64	; 0x40
 80129aa:	d86f      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 80129ac:	2b30      	cmp	r3, #48	; 0x30
 80129ae:	d064      	beq.n	8012a7a <HAL_TIM_ConfigClockSource+0x15a>
 80129b0:	2b30      	cmp	r3, #48	; 0x30
 80129b2:	d86b      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 80129b4:	2b20      	cmp	r3, #32
 80129b6:	d060      	beq.n	8012a7a <HAL_TIM_ConfigClockSource+0x15a>
 80129b8:	2b20      	cmp	r3, #32
 80129ba:	d867      	bhi.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d05c      	beq.n	8012a7a <HAL_TIM_ConfigClockSource+0x15a>
 80129c0:	2b10      	cmp	r3, #16
 80129c2:	d05a      	beq.n	8012a7a <HAL_TIM_ConfigClockSource+0x15a>
 80129c4:	e062      	b.n	8012a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6818      	ldr	r0, [r3, #0]
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	6899      	ldr	r1, [r3, #8]
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	685a      	ldr	r2, [r3, #4]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	f000 fbe5 	bl	80131a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80129e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	68ba      	ldr	r2, [r7, #8]
 80129f0:	609a      	str	r2, [r3, #8]
      break;
 80129f2:	e04f      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6818      	ldr	r0, [r3, #0]
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	6899      	ldr	r1, [r3, #8]
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	685a      	ldr	r2, [r3, #4]
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	f000 fbce 	bl	80131a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	689a      	ldr	r2, [r3, #8]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012a16:	609a      	str	r2, [r3, #8]
      break;
 8012a18:	e03c      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	6859      	ldr	r1, [r3, #4]
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	461a      	mov	r2, r3
 8012a28:	f000 fb42 	bl	80130b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2150      	movs	r1, #80	; 0x50
 8012a32:	4618      	mov	r0, r3
 8012a34:	f000 fb9b 	bl	801316e <TIM_ITRx_SetConfig>
      break;
 8012a38:	e02c      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6818      	ldr	r0, [r3, #0]
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	6859      	ldr	r1, [r3, #4]
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	461a      	mov	r2, r3
 8012a48:	f000 fb61 	bl	801310e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2160      	movs	r1, #96	; 0x60
 8012a52:	4618      	mov	r0, r3
 8012a54:	f000 fb8b 	bl	801316e <TIM_ITRx_SetConfig>
      break;
 8012a58:	e01c      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6818      	ldr	r0, [r3, #0]
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	6859      	ldr	r1, [r3, #4]
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	461a      	mov	r2, r3
 8012a68:	f000 fb22 	bl	80130b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2140      	movs	r1, #64	; 0x40
 8012a72:	4618      	mov	r0, r3
 8012a74:	f000 fb7b 	bl	801316e <TIM_ITRx_SetConfig>
      break;
 8012a78:	e00c      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	4619      	mov	r1, r3
 8012a84:	4610      	mov	r0, r2
 8012a86:	f000 fb72 	bl	801316e <TIM_ITRx_SetConfig>
      break;
 8012a8a:	e003      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8012a90:	e000      	b.n	8012a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2201      	movs	r2, #1
 8012a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3710      	adds	r7, #16
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	fffeff88 	.word	0xfffeff88

08012ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b085      	sub	sp, #20
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4a40      	ldr	r2, [pc, #256]	; (8012bc8 <TIM_Base_SetConfig+0x114>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d013      	beq.n	8012af4 <TIM_Base_SetConfig+0x40>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ad2:	d00f      	beq.n	8012af4 <TIM_Base_SetConfig+0x40>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	4a3d      	ldr	r2, [pc, #244]	; (8012bcc <TIM_Base_SetConfig+0x118>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d00b      	beq.n	8012af4 <TIM_Base_SetConfig+0x40>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4a3c      	ldr	r2, [pc, #240]	; (8012bd0 <TIM_Base_SetConfig+0x11c>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d007      	beq.n	8012af4 <TIM_Base_SetConfig+0x40>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4a3b      	ldr	r2, [pc, #236]	; (8012bd4 <TIM_Base_SetConfig+0x120>)
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d003      	beq.n	8012af4 <TIM_Base_SetConfig+0x40>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4a3a      	ldr	r2, [pc, #232]	; (8012bd8 <TIM_Base_SetConfig+0x124>)
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d108      	bne.n	8012b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	4313      	orrs	r3, r2
 8012b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4a2f      	ldr	r2, [pc, #188]	; (8012bc8 <TIM_Base_SetConfig+0x114>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d02b      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b14:	d027      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4a2c      	ldr	r2, [pc, #176]	; (8012bcc <TIM_Base_SetConfig+0x118>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d023      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4a2b      	ldr	r2, [pc, #172]	; (8012bd0 <TIM_Base_SetConfig+0x11c>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d01f      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4a2a      	ldr	r2, [pc, #168]	; (8012bd4 <TIM_Base_SetConfig+0x120>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d01b      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a29      	ldr	r2, [pc, #164]	; (8012bd8 <TIM_Base_SetConfig+0x124>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d017      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a28      	ldr	r2, [pc, #160]	; (8012bdc <TIM_Base_SetConfig+0x128>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d013      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a27      	ldr	r2, [pc, #156]	; (8012be0 <TIM_Base_SetConfig+0x12c>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d00f      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a26      	ldr	r2, [pc, #152]	; (8012be4 <TIM_Base_SetConfig+0x130>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d00b      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4a25      	ldr	r2, [pc, #148]	; (8012be8 <TIM_Base_SetConfig+0x134>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d007      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4a24      	ldr	r2, [pc, #144]	; (8012bec <TIM_Base_SetConfig+0x138>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d003      	beq.n	8012b66 <TIM_Base_SetConfig+0xb2>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4a23      	ldr	r2, [pc, #140]	; (8012bf0 <TIM_Base_SetConfig+0x13c>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d108      	bne.n	8012b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	68fa      	ldr	r2, [r7, #12]
 8012b74:	4313      	orrs	r3, r2
 8012b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	695b      	ldr	r3, [r3, #20]
 8012b82:	4313      	orrs	r3, r2
 8012b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	68fa      	ldr	r2, [r7, #12]
 8012b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	689a      	ldr	r2, [r3, #8]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4a0a      	ldr	r2, [pc, #40]	; (8012bc8 <TIM_Base_SetConfig+0x114>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d003      	beq.n	8012bac <TIM_Base_SetConfig+0xf8>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	4a0c      	ldr	r2, [pc, #48]	; (8012bd8 <TIM_Base_SetConfig+0x124>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d103      	bne.n	8012bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	691a      	ldr	r2, [r3, #16]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	615a      	str	r2, [r3, #20]
}
 8012bba:	bf00      	nop
 8012bbc:	3714      	adds	r7, #20
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr
 8012bc6:	bf00      	nop
 8012bc8:	40010000 	.word	0x40010000
 8012bcc:	40000400 	.word	0x40000400
 8012bd0:	40000800 	.word	0x40000800
 8012bd4:	40000c00 	.word	0x40000c00
 8012bd8:	40010400 	.word	0x40010400
 8012bdc:	40014000 	.word	0x40014000
 8012be0:	40014400 	.word	0x40014400
 8012be4:	40014800 	.word	0x40014800
 8012be8:	40001800 	.word	0x40001800
 8012bec:	40001c00 	.word	0x40001c00
 8012bf0:	40002000 	.word	0x40002000

08012bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b087      	sub	sp, #28
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	6a1b      	ldr	r3, [r3, #32]
 8012c02:	f023 0201 	bic.w	r2, r3, #1
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6a1b      	ldr	r3, [r3, #32]
 8012c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	699b      	ldr	r3, [r3, #24]
 8012c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	4b2b      	ldr	r3, [pc, #172]	; (8012ccc <TIM_OC1_SetConfig+0xd8>)
 8012c20:	4013      	ands	r3, r2
 8012c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f023 0303 	bic.w	r3, r3, #3
 8012c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68fa      	ldr	r2, [r7, #12]
 8012c32:	4313      	orrs	r3, r2
 8012c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	f023 0302 	bic.w	r3, r3, #2
 8012c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	697a      	ldr	r2, [r7, #20]
 8012c44:	4313      	orrs	r3, r2
 8012c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	4a21      	ldr	r2, [pc, #132]	; (8012cd0 <TIM_OC1_SetConfig+0xdc>)
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	d003      	beq.n	8012c58 <TIM_OC1_SetConfig+0x64>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4a20      	ldr	r2, [pc, #128]	; (8012cd4 <TIM_OC1_SetConfig+0xe0>)
 8012c54:	4293      	cmp	r3, r2
 8012c56:	d10c      	bne.n	8012c72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	f023 0308 	bic.w	r3, r3, #8
 8012c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	4313      	orrs	r3, r2
 8012c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	f023 0304 	bic.w	r3, r3, #4
 8012c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4a16      	ldr	r2, [pc, #88]	; (8012cd0 <TIM_OC1_SetConfig+0xdc>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d003      	beq.n	8012c82 <TIM_OC1_SetConfig+0x8e>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4a15      	ldr	r2, [pc, #84]	; (8012cd4 <TIM_OC1_SetConfig+0xe0>)
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d111      	bne.n	8012ca6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	695b      	ldr	r3, [r3, #20]
 8012c96:	693a      	ldr	r2, [r7, #16]
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	699b      	ldr	r3, [r3, #24]
 8012ca0:	693a      	ldr	r2, [r7, #16]
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	68fa      	ldr	r2, [r7, #12]
 8012cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	685a      	ldr	r2, [r3, #4]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	697a      	ldr	r2, [r7, #20]
 8012cbe:	621a      	str	r2, [r3, #32]
}
 8012cc0:	bf00      	nop
 8012cc2:	371c      	adds	r7, #28
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr
 8012ccc:	fffeff8f 	.word	0xfffeff8f
 8012cd0:	40010000 	.word	0x40010000
 8012cd4:	40010400 	.word	0x40010400

08012cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b087      	sub	sp, #28
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6a1b      	ldr	r3, [r3, #32]
 8012ce6:	f023 0210 	bic.w	r2, r3, #16
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	699b      	ldr	r3, [r3, #24]
 8012cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	4b2e      	ldr	r3, [pc, #184]	; (8012dbc <TIM_OC2_SetConfig+0xe4>)
 8012d04:	4013      	ands	r3, r2
 8012d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	021b      	lsls	r3, r3, #8
 8012d16:	68fa      	ldr	r2, [r7, #12]
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	f023 0320 	bic.w	r3, r3, #32
 8012d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	011b      	lsls	r3, r3, #4
 8012d2a:	697a      	ldr	r2, [r7, #20]
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	4a23      	ldr	r2, [pc, #140]	; (8012dc0 <TIM_OC2_SetConfig+0xe8>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d003      	beq.n	8012d40 <TIM_OC2_SetConfig+0x68>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	4a22      	ldr	r2, [pc, #136]	; (8012dc4 <TIM_OC2_SetConfig+0xec>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d10d      	bne.n	8012d5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	011b      	lsls	r3, r3, #4
 8012d4e:	697a      	ldr	r2, [r7, #20]
 8012d50:	4313      	orrs	r3, r2
 8012d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	4a18      	ldr	r2, [pc, #96]	; (8012dc0 <TIM_OC2_SetConfig+0xe8>)
 8012d60:	4293      	cmp	r3, r2
 8012d62:	d003      	beq.n	8012d6c <TIM_OC2_SetConfig+0x94>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	4a17      	ldr	r2, [pc, #92]	; (8012dc4 <TIM_OC2_SetConfig+0xec>)
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d113      	bne.n	8012d94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	695b      	ldr	r3, [r3, #20]
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	693a      	ldr	r2, [r7, #16]
 8012d84:	4313      	orrs	r3, r2
 8012d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	699b      	ldr	r3, [r3, #24]
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	693a      	ldr	r2, [r7, #16]
 8012d90:	4313      	orrs	r3, r2
 8012d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	693a      	ldr	r2, [r7, #16]
 8012d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	685a      	ldr	r2, [r3, #4]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	697a      	ldr	r2, [r7, #20]
 8012dac:	621a      	str	r2, [r3, #32]
}
 8012dae:	bf00      	nop
 8012db0:	371c      	adds	r7, #28
 8012db2:	46bd      	mov	sp, r7
 8012db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db8:	4770      	bx	lr
 8012dba:	bf00      	nop
 8012dbc:	feff8fff 	.word	0xfeff8fff
 8012dc0:	40010000 	.word	0x40010000
 8012dc4:	40010400 	.word	0x40010400

08012dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012dc8:	b480      	push	{r7}
 8012dca:	b087      	sub	sp, #28
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6a1b      	ldr	r3, [r3, #32]
 8012dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6a1b      	ldr	r3, [r3, #32]
 8012de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	69db      	ldr	r3, [r3, #28]
 8012dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	4b2d      	ldr	r3, [pc, #180]	; (8012ea8 <TIM_OC3_SetConfig+0xe0>)
 8012df4:	4013      	ands	r3, r2
 8012df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f023 0303 	bic.w	r3, r3, #3
 8012dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	4313      	orrs	r3, r2
 8012e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	689b      	ldr	r3, [r3, #8]
 8012e16:	021b      	lsls	r3, r3, #8
 8012e18:	697a      	ldr	r2, [r7, #20]
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	4a22      	ldr	r2, [pc, #136]	; (8012eac <TIM_OC3_SetConfig+0xe4>)
 8012e22:	4293      	cmp	r3, r2
 8012e24:	d003      	beq.n	8012e2e <TIM_OC3_SetConfig+0x66>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	4a21      	ldr	r2, [pc, #132]	; (8012eb0 <TIM_OC3_SetConfig+0xe8>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d10d      	bne.n	8012e4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	021b      	lsls	r3, r3, #8
 8012e3c:	697a      	ldr	r2, [r7, #20]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4a17      	ldr	r2, [pc, #92]	; (8012eac <TIM_OC3_SetConfig+0xe4>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d003      	beq.n	8012e5a <TIM_OC3_SetConfig+0x92>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	4a16      	ldr	r2, [pc, #88]	; (8012eb0 <TIM_OC3_SetConfig+0xe8>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d113      	bne.n	8012e82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	695b      	ldr	r3, [r3, #20]
 8012e6e:	011b      	lsls	r3, r3, #4
 8012e70:	693a      	ldr	r2, [r7, #16]
 8012e72:	4313      	orrs	r3, r2
 8012e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	011b      	lsls	r3, r3, #4
 8012e7c:	693a      	ldr	r2, [r7, #16]
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	693a      	ldr	r2, [r7, #16]
 8012e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	68fa      	ldr	r2, [r7, #12]
 8012e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	685a      	ldr	r2, [r3, #4]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	697a      	ldr	r2, [r7, #20]
 8012e9a:	621a      	str	r2, [r3, #32]
}
 8012e9c:	bf00      	nop
 8012e9e:	371c      	adds	r7, #28
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr
 8012ea8:	fffeff8f 	.word	0xfffeff8f
 8012eac:	40010000 	.word	0x40010000
 8012eb0:	40010400 	.word	0x40010400

08012eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b087      	sub	sp, #28
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6a1b      	ldr	r3, [r3, #32]
 8012ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a1b      	ldr	r3, [r3, #32]
 8012ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	69db      	ldr	r3, [r3, #28]
 8012eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	4b1e      	ldr	r3, [pc, #120]	; (8012f58 <TIM_OC4_SetConfig+0xa4>)
 8012ee0:	4013      	ands	r3, r2
 8012ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	021b      	lsls	r3, r3, #8
 8012ef2:	68fa      	ldr	r2, [r7, #12]
 8012ef4:	4313      	orrs	r3, r2
 8012ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	031b      	lsls	r3, r3, #12
 8012f06:	693a      	ldr	r2, [r7, #16]
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	4a13      	ldr	r2, [pc, #76]	; (8012f5c <TIM_OC4_SetConfig+0xa8>)
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d003      	beq.n	8012f1c <TIM_OC4_SetConfig+0x68>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	4a12      	ldr	r2, [pc, #72]	; (8012f60 <TIM_OC4_SetConfig+0xac>)
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	d109      	bne.n	8012f30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	695b      	ldr	r3, [r3, #20]
 8012f28:	019b      	lsls	r3, r3, #6
 8012f2a:	697a      	ldr	r2, [r7, #20]
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	697a      	ldr	r2, [r7, #20]
 8012f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	68fa      	ldr	r2, [r7, #12]
 8012f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	685a      	ldr	r2, [r3, #4]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	693a      	ldr	r2, [r7, #16]
 8012f48:	621a      	str	r2, [r3, #32]
}
 8012f4a:	bf00      	nop
 8012f4c:	371c      	adds	r7, #28
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop
 8012f58:	feff8fff 	.word	0xfeff8fff
 8012f5c:	40010000 	.word	0x40010000
 8012f60:	40010400 	.word	0x40010400

08012f64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012f64:	b480      	push	{r7}
 8012f66:	b087      	sub	sp, #28
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6a1b      	ldr	r3, [r3, #32]
 8012f72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6a1b      	ldr	r3, [r3, #32]
 8012f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	4b1b      	ldr	r3, [pc, #108]	; (8012ffc <TIM_OC5_SetConfig+0x98>)
 8012f90:	4013      	ands	r3, r2
 8012f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	68fa      	ldr	r2, [r7, #12]
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	689b      	ldr	r3, [r3, #8]
 8012faa:	041b      	lsls	r3, r3, #16
 8012fac:	693a      	ldr	r2, [r7, #16]
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	4a12      	ldr	r2, [pc, #72]	; (8013000 <TIM_OC5_SetConfig+0x9c>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d003      	beq.n	8012fc2 <TIM_OC5_SetConfig+0x5e>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4a11      	ldr	r2, [pc, #68]	; (8013004 <TIM_OC5_SetConfig+0xa0>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d109      	bne.n	8012fd6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	021b      	lsls	r3, r3, #8
 8012fd0:	697a      	ldr	r2, [r7, #20]
 8012fd2:	4313      	orrs	r3, r2
 8012fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	697a      	ldr	r2, [r7, #20]
 8012fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	68fa      	ldr	r2, [r7, #12]
 8012fe0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	685a      	ldr	r2, [r3, #4]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	693a      	ldr	r2, [r7, #16]
 8012fee:	621a      	str	r2, [r3, #32]
}
 8012ff0:	bf00      	nop
 8012ff2:	371c      	adds	r7, #28
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr
 8012ffc:	fffeff8f 	.word	0xfffeff8f
 8013000:	40010000 	.word	0x40010000
 8013004:	40010400 	.word	0x40010400

08013008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013008:	b480      	push	{r7}
 801300a:	b087      	sub	sp, #28
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6a1b      	ldr	r3, [r3, #32]
 8013016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6a1b      	ldr	r3, [r3, #32]
 8013022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	4b1c      	ldr	r3, [pc, #112]	; (80130a4 <TIM_OC6_SetConfig+0x9c>)
 8013034:	4013      	ands	r3, r2
 8013036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	021b      	lsls	r3, r3, #8
 801303e:	68fa      	ldr	r2, [r7, #12]
 8013040:	4313      	orrs	r3, r2
 8013042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801304a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	051b      	lsls	r3, r3, #20
 8013052:	693a      	ldr	r2, [r7, #16]
 8013054:	4313      	orrs	r3, r2
 8013056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4a13      	ldr	r2, [pc, #76]	; (80130a8 <TIM_OC6_SetConfig+0xa0>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d003      	beq.n	8013068 <TIM_OC6_SetConfig+0x60>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4a12      	ldr	r2, [pc, #72]	; (80130ac <TIM_OC6_SetConfig+0xa4>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d109      	bne.n	801307c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801306e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	695b      	ldr	r3, [r3, #20]
 8013074:	029b      	lsls	r3, r3, #10
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	4313      	orrs	r3, r2
 801307a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	697a      	ldr	r2, [r7, #20]
 8013080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	685a      	ldr	r2, [r3, #4]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	693a      	ldr	r2, [r7, #16]
 8013094:	621a      	str	r2, [r3, #32]
}
 8013096:	bf00      	nop
 8013098:	371c      	adds	r7, #28
 801309a:	46bd      	mov	sp, r7
 801309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a0:	4770      	bx	lr
 80130a2:	bf00      	nop
 80130a4:	feff8fff 	.word	0xfeff8fff
 80130a8:	40010000 	.word	0x40010000
 80130ac:	40010400 	.word	0x40010400

080130b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b087      	sub	sp, #28
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	6a1b      	ldr	r3, [r3, #32]
 80130c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	6a1b      	ldr	r3, [r3, #32]
 80130c6:	f023 0201 	bic.w	r2, r3, #1
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80130da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	011b      	lsls	r3, r3, #4
 80130e0:	693a      	ldr	r2, [r7, #16]
 80130e2:	4313      	orrs	r3, r2
 80130e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	f023 030a 	bic.w	r3, r3, #10
 80130ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80130ee:	697a      	ldr	r2, [r7, #20]
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	4313      	orrs	r3, r2
 80130f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	693a      	ldr	r2, [r7, #16]
 80130fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	697a      	ldr	r2, [r7, #20]
 8013100:	621a      	str	r2, [r3, #32]
}
 8013102:	bf00      	nop
 8013104:	371c      	adds	r7, #28
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr

0801310e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801310e:	b480      	push	{r7}
 8013110:	b087      	sub	sp, #28
 8013112:	af00      	add	r7, sp, #0
 8013114:	60f8      	str	r0, [r7, #12]
 8013116:	60b9      	str	r1, [r7, #8]
 8013118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	6a1b      	ldr	r3, [r3, #32]
 801311e:	f023 0210 	bic.w	r2, r3, #16
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	699b      	ldr	r3, [r3, #24]
 801312a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	6a1b      	ldr	r3, [r3, #32]
 8013130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	031b      	lsls	r3, r3, #12
 801313e:	697a      	ldr	r2, [r7, #20]
 8013140:	4313      	orrs	r3, r2
 8013142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801314a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	011b      	lsls	r3, r3, #4
 8013150:	693a      	ldr	r2, [r7, #16]
 8013152:	4313      	orrs	r3, r2
 8013154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	697a      	ldr	r2, [r7, #20]
 801315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	693a      	ldr	r2, [r7, #16]
 8013160:	621a      	str	r2, [r3, #32]
}
 8013162:	bf00      	nop
 8013164:	371c      	adds	r7, #28
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr

0801316e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801316e:	b480      	push	{r7}
 8013170:	b085      	sub	sp, #20
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
 8013176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	4313      	orrs	r3, r2
 801318c:	f043 0307 	orr.w	r3, r3, #7
 8013190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	68fa      	ldr	r2, [r7, #12]
 8013196:	609a      	str	r2, [r3, #8]
}
 8013198:	bf00      	nop
 801319a:	3714      	adds	r7, #20
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b087      	sub	sp, #28
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	607a      	str	r2, [r7, #4]
 80131b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80131be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	021a      	lsls	r2, r3, #8
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	431a      	orrs	r2, r3
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	4313      	orrs	r3, r2
 80131cc:	697a      	ldr	r2, [r7, #20]
 80131ce:	4313      	orrs	r3, r2
 80131d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	697a      	ldr	r2, [r7, #20]
 80131d6:	609a      	str	r2, [r3, #8]
}
 80131d8:	bf00      	nop
 80131da:	371c      	adds	r7, #28
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d101      	bne.n	80131fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80131f8:	2302      	movs	r3, #2
 80131fa:	e06d      	b.n	80132d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2202      	movs	r2, #2
 8013208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	4a30      	ldr	r2, [pc, #192]	; (80132e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013222:	4293      	cmp	r3, r2
 8013224:	d004      	beq.n	8013230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4a2f      	ldr	r2, [pc, #188]	; (80132e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d108      	bne.n	8013242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	68fa      	ldr	r2, [r7, #12]
 801323e:	4313      	orrs	r3, r2
 8013240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	68fa      	ldr	r2, [r7, #12]
 8013250:	4313      	orrs	r3, r2
 8013252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	68fa      	ldr	r2, [r7, #12]
 801325a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a20      	ldr	r2, [pc, #128]	; (80132e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d022      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801326e:	d01d      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4a1d      	ldr	r2, [pc, #116]	; (80132ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d018      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	4a1c      	ldr	r2, [pc, #112]	; (80132f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013280:	4293      	cmp	r3, r2
 8013282:	d013      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a1a      	ldr	r2, [pc, #104]	; (80132f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d00e      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a15      	ldr	r2, [pc, #84]	; (80132e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d009      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a16      	ldr	r2, [pc, #88]	; (80132f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d004      	beq.n	80132ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a15      	ldr	r2, [pc, #84]	; (80132fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d10c      	bne.n	80132c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80132b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	689b      	ldr	r3, [r3, #8]
 80132b8:	68ba      	ldr	r2, [r7, #8]
 80132ba:	4313      	orrs	r3, r2
 80132bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2201      	movs	r2, #1
 80132ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2200      	movs	r2, #0
 80132d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3714      	adds	r7, #20
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr
 80132e4:	40010000 	.word	0x40010000
 80132e8:	40010400 	.word	0x40010400
 80132ec:	40000400 	.word	0x40000400
 80132f0:	40000800 	.word	0x40000800
 80132f4:	40000c00 	.word	0x40000c00
 80132f8:	40014000 	.word	0x40014000
 80132fc:	40001800 	.word	0x40001800

08013300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801330e:	2301      	movs	r3, #1
 8013310:	e040      	b.n	8013394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013316:	2b00      	cmp	r3, #0
 8013318:	d106      	bne.n	8013328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2200      	movs	r2, #0
 801331e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7f8 fb04 	bl	800b930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2224      	movs	r2, #36	; 0x24
 801332c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f022 0201 	bic.w	r2, r2, #1
 801333c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 f82c 	bl	801339c <UART_SetConfig>
 8013344:	4603      	mov	r3, r0
 8013346:	2b01      	cmp	r3, #1
 8013348:	d101      	bne.n	801334e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e022      	b.n	8013394 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013352:	2b00      	cmp	r3, #0
 8013354:	d002      	beq.n	801335c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 fa84 	bl	8013864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	685a      	ldr	r2, [r3, #4]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801336a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	689a      	ldr	r2, [r3, #8]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801337a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	f042 0201 	orr.w	r2, r2, #1
 801338a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f000 fb0b 	bl	80139a8 <UART_CheckIdleState>
 8013392:	4603      	mov	r3, r0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b088      	sub	sp, #32
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80133a4:	2300      	movs	r3, #0
 80133a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	689a      	ldr	r2, [r3, #8]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	691b      	ldr	r3, [r3, #16]
 80133b0:	431a      	orrs	r2, r3
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	695b      	ldr	r3, [r3, #20]
 80133b6:	431a      	orrs	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	69db      	ldr	r3, [r3, #28]
 80133bc:	4313      	orrs	r3, r2
 80133be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	4ba6      	ldr	r3, [pc, #664]	; (8013660 <UART_SetConfig+0x2c4>)
 80133c8:	4013      	ands	r3, r2
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	6812      	ldr	r2, [r2, #0]
 80133ce:	6979      	ldr	r1, [r7, #20]
 80133d0:	430b      	orrs	r3, r1
 80133d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	68da      	ldr	r2, [r3, #12]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	430a      	orrs	r2, r1
 80133e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	699b      	ldr	r3, [r3, #24]
 80133ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6a1b      	ldr	r3, [r3, #32]
 80133f4:	697a      	ldr	r2, [r7, #20]
 80133f6:	4313      	orrs	r3, r2
 80133f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	697a      	ldr	r2, [r7, #20]
 801340a:	430a      	orrs	r2, r1
 801340c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a94      	ldr	r2, [pc, #592]	; (8013664 <UART_SetConfig+0x2c8>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d120      	bne.n	801345a <UART_SetConfig+0xbe>
 8013418:	4b93      	ldr	r3, [pc, #588]	; (8013668 <UART_SetConfig+0x2cc>)
 801341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801341e:	f003 0303 	and.w	r3, r3, #3
 8013422:	2b03      	cmp	r3, #3
 8013424:	d816      	bhi.n	8013454 <UART_SetConfig+0xb8>
 8013426:	a201      	add	r2, pc, #4	; (adr r2, 801342c <UART_SetConfig+0x90>)
 8013428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342c:	0801343d 	.word	0x0801343d
 8013430:	08013449 	.word	0x08013449
 8013434:	08013443 	.word	0x08013443
 8013438:	0801344f 	.word	0x0801344f
 801343c:	2301      	movs	r3, #1
 801343e:	77fb      	strb	r3, [r7, #31]
 8013440:	e150      	b.n	80136e4 <UART_SetConfig+0x348>
 8013442:	2302      	movs	r3, #2
 8013444:	77fb      	strb	r3, [r7, #31]
 8013446:	e14d      	b.n	80136e4 <UART_SetConfig+0x348>
 8013448:	2304      	movs	r3, #4
 801344a:	77fb      	strb	r3, [r7, #31]
 801344c:	e14a      	b.n	80136e4 <UART_SetConfig+0x348>
 801344e:	2308      	movs	r3, #8
 8013450:	77fb      	strb	r3, [r7, #31]
 8013452:	e147      	b.n	80136e4 <UART_SetConfig+0x348>
 8013454:	2310      	movs	r3, #16
 8013456:	77fb      	strb	r3, [r7, #31]
 8013458:	e144      	b.n	80136e4 <UART_SetConfig+0x348>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a83      	ldr	r2, [pc, #524]	; (801366c <UART_SetConfig+0x2d0>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d132      	bne.n	80134ca <UART_SetConfig+0x12e>
 8013464:	4b80      	ldr	r3, [pc, #512]	; (8013668 <UART_SetConfig+0x2cc>)
 8013466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801346a:	f003 030c 	and.w	r3, r3, #12
 801346e:	2b0c      	cmp	r3, #12
 8013470:	d828      	bhi.n	80134c4 <UART_SetConfig+0x128>
 8013472:	a201      	add	r2, pc, #4	; (adr r2, 8013478 <UART_SetConfig+0xdc>)
 8013474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013478:	080134ad 	.word	0x080134ad
 801347c:	080134c5 	.word	0x080134c5
 8013480:	080134c5 	.word	0x080134c5
 8013484:	080134c5 	.word	0x080134c5
 8013488:	080134b9 	.word	0x080134b9
 801348c:	080134c5 	.word	0x080134c5
 8013490:	080134c5 	.word	0x080134c5
 8013494:	080134c5 	.word	0x080134c5
 8013498:	080134b3 	.word	0x080134b3
 801349c:	080134c5 	.word	0x080134c5
 80134a0:	080134c5 	.word	0x080134c5
 80134a4:	080134c5 	.word	0x080134c5
 80134a8:	080134bf 	.word	0x080134bf
 80134ac:	2300      	movs	r3, #0
 80134ae:	77fb      	strb	r3, [r7, #31]
 80134b0:	e118      	b.n	80136e4 <UART_SetConfig+0x348>
 80134b2:	2302      	movs	r3, #2
 80134b4:	77fb      	strb	r3, [r7, #31]
 80134b6:	e115      	b.n	80136e4 <UART_SetConfig+0x348>
 80134b8:	2304      	movs	r3, #4
 80134ba:	77fb      	strb	r3, [r7, #31]
 80134bc:	e112      	b.n	80136e4 <UART_SetConfig+0x348>
 80134be:	2308      	movs	r3, #8
 80134c0:	77fb      	strb	r3, [r7, #31]
 80134c2:	e10f      	b.n	80136e4 <UART_SetConfig+0x348>
 80134c4:	2310      	movs	r3, #16
 80134c6:	77fb      	strb	r3, [r7, #31]
 80134c8:	e10c      	b.n	80136e4 <UART_SetConfig+0x348>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	4a68      	ldr	r2, [pc, #416]	; (8013670 <UART_SetConfig+0x2d4>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d120      	bne.n	8013516 <UART_SetConfig+0x17a>
 80134d4:	4b64      	ldr	r3, [pc, #400]	; (8013668 <UART_SetConfig+0x2cc>)
 80134d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80134da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80134de:	2b30      	cmp	r3, #48	; 0x30
 80134e0:	d013      	beq.n	801350a <UART_SetConfig+0x16e>
 80134e2:	2b30      	cmp	r3, #48	; 0x30
 80134e4:	d814      	bhi.n	8013510 <UART_SetConfig+0x174>
 80134e6:	2b20      	cmp	r3, #32
 80134e8:	d009      	beq.n	80134fe <UART_SetConfig+0x162>
 80134ea:	2b20      	cmp	r3, #32
 80134ec:	d810      	bhi.n	8013510 <UART_SetConfig+0x174>
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d002      	beq.n	80134f8 <UART_SetConfig+0x15c>
 80134f2:	2b10      	cmp	r3, #16
 80134f4:	d006      	beq.n	8013504 <UART_SetConfig+0x168>
 80134f6:	e00b      	b.n	8013510 <UART_SetConfig+0x174>
 80134f8:	2300      	movs	r3, #0
 80134fa:	77fb      	strb	r3, [r7, #31]
 80134fc:	e0f2      	b.n	80136e4 <UART_SetConfig+0x348>
 80134fe:	2302      	movs	r3, #2
 8013500:	77fb      	strb	r3, [r7, #31]
 8013502:	e0ef      	b.n	80136e4 <UART_SetConfig+0x348>
 8013504:	2304      	movs	r3, #4
 8013506:	77fb      	strb	r3, [r7, #31]
 8013508:	e0ec      	b.n	80136e4 <UART_SetConfig+0x348>
 801350a:	2308      	movs	r3, #8
 801350c:	77fb      	strb	r3, [r7, #31]
 801350e:	e0e9      	b.n	80136e4 <UART_SetConfig+0x348>
 8013510:	2310      	movs	r3, #16
 8013512:	77fb      	strb	r3, [r7, #31]
 8013514:	e0e6      	b.n	80136e4 <UART_SetConfig+0x348>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a56      	ldr	r2, [pc, #344]	; (8013674 <UART_SetConfig+0x2d8>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d120      	bne.n	8013562 <UART_SetConfig+0x1c6>
 8013520:	4b51      	ldr	r3, [pc, #324]	; (8013668 <UART_SetConfig+0x2cc>)
 8013522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013526:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801352a:	2bc0      	cmp	r3, #192	; 0xc0
 801352c:	d013      	beq.n	8013556 <UART_SetConfig+0x1ba>
 801352e:	2bc0      	cmp	r3, #192	; 0xc0
 8013530:	d814      	bhi.n	801355c <UART_SetConfig+0x1c0>
 8013532:	2b80      	cmp	r3, #128	; 0x80
 8013534:	d009      	beq.n	801354a <UART_SetConfig+0x1ae>
 8013536:	2b80      	cmp	r3, #128	; 0x80
 8013538:	d810      	bhi.n	801355c <UART_SetConfig+0x1c0>
 801353a:	2b00      	cmp	r3, #0
 801353c:	d002      	beq.n	8013544 <UART_SetConfig+0x1a8>
 801353e:	2b40      	cmp	r3, #64	; 0x40
 8013540:	d006      	beq.n	8013550 <UART_SetConfig+0x1b4>
 8013542:	e00b      	b.n	801355c <UART_SetConfig+0x1c0>
 8013544:	2300      	movs	r3, #0
 8013546:	77fb      	strb	r3, [r7, #31]
 8013548:	e0cc      	b.n	80136e4 <UART_SetConfig+0x348>
 801354a:	2302      	movs	r3, #2
 801354c:	77fb      	strb	r3, [r7, #31]
 801354e:	e0c9      	b.n	80136e4 <UART_SetConfig+0x348>
 8013550:	2304      	movs	r3, #4
 8013552:	77fb      	strb	r3, [r7, #31]
 8013554:	e0c6      	b.n	80136e4 <UART_SetConfig+0x348>
 8013556:	2308      	movs	r3, #8
 8013558:	77fb      	strb	r3, [r7, #31]
 801355a:	e0c3      	b.n	80136e4 <UART_SetConfig+0x348>
 801355c:	2310      	movs	r3, #16
 801355e:	77fb      	strb	r3, [r7, #31]
 8013560:	e0c0      	b.n	80136e4 <UART_SetConfig+0x348>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4a44      	ldr	r2, [pc, #272]	; (8013678 <UART_SetConfig+0x2dc>)
 8013568:	4293      	cmp	r3, r2
 801356a:	d125      	bne.n	80135b8 <UART_SetConfig+0x21c>
 801356c:	4b3e      	ldr	r3, [pc, #248]	; (8013668 <UART_SetConfig+0x2cc>)
 801356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801357a:	d017      	beq.n	80135ac <UART_SetConfig+0x210>
 801357c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013580:	d817      	bhi.n	80135b2 <UART_SetConfig+0x216>
 8013582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013586:	d00b      	beq.n	80135a0 <UART_SetConfig+0x204>
 8013588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801358c:	d811      	bhi.n	80135b2 <UART_SetConfig+0x216>
 801358e:	2b00      	cmp	r3, #0
 8013590:	d003      	beq.n	801359a <UART_SetConfig+0x1fe>
 8013592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013596:	d006      	beq.n	80135a6 <UART_SetConfig+0x20a>
 8013598:	e00b      	b.n	80135b2 <UART_SetConfig+0x216>
 801359a:	2300      	movs	r3, #0
 801359c:	77fb      	strb	r3, [r7, #31]
 801359e:	e0a1      	b.n	80136e4 <UART_SetConfig+0x348>
 80135a0:	2302      	movs	r3, #2
 80135a2:	77fb      	strb	r3, [r7, #31]
 80135a4:	e09e      	b.n	80136e4 <UART_SetConfig+0x348>
 80135a6:	2304      	movs	r3, #4
 80135a8:	77fb      	strb	r3, [r7, #31]
 80135aa:	e09b      	b.n	80136e4 <UART_SetConfig+0x348>
 80135ac:	2308      	movs	r3, #8
 80135ae:	77fb      	strb	r3, [r7, #31]
 80135b0:	e098      	b.n	80136e4 <UART_SetConfig+0x348>
 80135b2:	2310      	movs	r3, #16
 80135b4:	77fb      	strb	r3, [r7, #31]
 80135b6:	e095      	b.n	80136e4 <UART_SetConfig+0x348>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4a2f      	ldr	r2, [pc, #188]	; (801367c <UART_SetConfig+0x2e0>)
 80135be:	4293      	cmp	r3, r2
 80135c0:	d125      	bne.n	801360e <UART_SetConfig+0x272>
 80135c2:	4b29      	ldr	r3, [pc, #164]	; (8013668 <UART_SetConfig+0x2cc>)
 80135c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80135cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80135d0:	d017      	beq.n	8013602 <UART_SetConfig+0x266>
 80135d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80135d6:	d817      	bhi.n	8013608 <UART_SetConfig+0x26c>
 80135d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80135dc:	d00b      	beq.n	80135f6 <UART_SetConfig+0x25a>
 80135de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80135e2:	d811      	bhi.n	8013608 <UART_SetConfig+0x26c>
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d003      	beq.n	80135f0 <UART_SetConfig+0x254>
 80135e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135ec:	d006      	beq.n	80135fc <UART_SetConfig+0x260>
 80135ee:	e00b      	b.n	8013608 <UART_SetConfig+0x26c>
 80135f0:	2301      	movs	r3, #1
 80135f2:	77fb      	strb	r3, [r7, #31]
 80135f4:	e076      	b.n	80136e4 <UART_SetConfig+0x348>
 80135f6:	2302      	movs	r3, #2
 80135f8:	77fb      	strb	r3, [r7, #31]
 80135fa:	e073      	b.n	80136e4 <UART_SetConfig+0x348>
 80135fc:	2304      	movs	r3, #4
 80135fe:	77fb      	strb	r3, [r7, #31]
 8013600:	e070      	b.n	80136e4 <UART_SetConfig+0x348>
 8013602:	2308      	movs	r3, #8
 8013604:	77fb      	strb	r3, [r7, #31]
 8013606:	e06d      	b.n	80136e4 <UART_SetConfig+0x348>
 8013608:	2310      	movs	r3, #16
 801360a:	77fb      	strb	r3, [r7, #31]
 801360c:	e06a      	b.n	80136e4 <UART_SetConfig+0x348>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4a1b      	ldr	r2, [pc, #108]	; (8013680 <UART_SetConfig+0x2e4>)
 8013614:	4293      	cmp	r3, r2
 8013616:	d138      	bne.n	801368a <UART_SetConfig+0x2ee>
 8013618:	4b13      	ldr	r3, [pc, #76]	; (8013668 <UART_SetConfig+0x2cc>)
 801361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801361e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013626:	d017      	beq.n	8013658 <UART_SetConfig+0x2bc>
 8013628:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801362c:	d82a      	bhi.n	8013684 <UART_SetConfig+0x2e8>
 801362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013632:	d00b      	beq.n	801364c <UART_SetConfig+0x2b0>
 8013634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013638:	d824      	bhi.n	8013684 <UART_SetConfig+0x2e8>
 801363a:	2b00      	cmp	r3, #0
 801363c:	d003      	beq.n	8013646 <UART_SetConfig+0x2aa>
 801363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013642:	d006      	beq.n	8013652 <UART_SetConfig+0x2b6>
 8013644:	e01e      	b.n	8013684 <UART_SetConfig+0x2e8>
 8013646:	2300      	movs	r3, #0
 8013648:	77fb      	strb	r3, [r7, #31]
 801364a:	e04b      	b.n	80136e4 <UART_SetConfig+0x348>
 801364c:	2302      	movs	r3, #2
 801364e:	77fb      	strb	r3, [r7, #31]
 8013650:	e048      	b.n	80136e4 <UART_SetConfig+0x348>
 8013652:	2304      	movs	r3, #4
 8013654:	77fb      	strb	r3, [r7, #31]
 8013656:	e045      	b.n	80136e4 <UART_SetConfig+0x348>
 8013658:	2308      	movs	r3, #8
 801365a:	77fb      	strb	r3, [r7, #31]
 801365c:	e042      	b.n	80136e4 <UART_SetConfig+0x348>
 801365e:	bf00      	nop
 8013660:	efff69f3 	.word	0xefff69f3
 8013664:	40011000 	.word	0x40011000
 8013668:	40023800 	.word	0x40023800
 801366c:	40004400 	.word	0x40004400
 8013670:	40004800 	.word	0x40004800
 8013674:	40004c00 	.word	0x40004c00
 8013678:	40005000 	.word	0x40005000
 801367c:	40011400 	.word	0x40011400
 8013680:	40007800 	.word	0x40007800
 8013684:	2310      	movs	r3, #16
 8013686:	77fb      	strb	r3, [r7, #31]
 8013688:	e02c      	b.n	80136e4 <UART_SetConfig+0x348>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	4a72      	ldr	r2, [pc, #456]	; (8013858 <UART_SetConfig+0x4bc>)
 8013690:	4293      	cmp	r3, r2
 8013692:	d125      	bne.n	80136e0 <UART_SetConfig+0x344>
 8013694:	4b71      	ldr	r3, [pc, #452]	; (801385c <UART_SetConfig+0x4c0>)
 8013696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801369a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801369e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80136a2:	d017      	beq.n	80136d4 <UART_SetConfig+0x338>
 80136a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80136a8:	d817      	bhi.n	80136da <UART_SetConfig+0x33e>
 80136aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136ae:	d00b      	beq.n	80136c8 <UART_SetConfig+0x32c>
 80136b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136b4:	d811      	bhi.n	80136da <UART_SetConfig+0x33e>
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <UART_SetConfig+0x326>
 80136ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80136be:	d006      	beq.n	80136ce <UART_SetConfig+0x332>
 80136c0:	e00b      	b.n	80136da <UART_SetConfig+0x33e>
 80136c2:	2300      	movs	r3, #0
 80136c4:	77fb      	strb	r3, [r7, #31]
 80136c6:	e00d      	b.n	80136e4 <UART_SetConfig+0x348>
 80136c8:	2302      	movs	r3, #2
 80136ca:	77fb      	strb	r3, [r7, #31]
 80136cc:	e00a      	b.n	80136e4 <UART_SetConfig+0x348>
 80136ce:	2304      	movs	r3, #4
 80136d0:	77fb      	strb	r3, [r7, #31]
 80136d2:	e007      	b.n	80136e4 <UART_SetConfig+0x348>
 80136d4:	2308      	movs	r3, #8
 80136d6:	77fb      	strb	r3, [r7, #31]
 80136d8:	e004      	b.n	80136e4 <UART_SetConfig+0x348>
 80136da:	2310      	movs	r3, #16
 80136dc:	77fb      	strb	r3, [r7, #31]
 80136de:	e001      	b.n	80136e4 <UART_SetConfig+0x348>
 80136e0:	2310      	movs	r3, #16
 80136e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	69db      	ldr	r3, [r3, #28]
 80136e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136ec:	d15b      	bne.n	80137a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80136ee:	7ffb      	ldrb	r3, [r7, #31]
 80136f0:	2b08      	cmp	r3, #8
 80136f2:	d828      	bhi.n	8013746 <UART_SetConfig+0x3aa>
 80136f4:	a201      	add	r2, pc, #4	; (adr r2, 80136fc <UART_SetConfig+0x360>)
 80136f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136fa:	bf00      	nop
 80136fc:	08013721 	.word	0x08013721
 8013700:	08013729 	.word	0x08013729
 8013704:	08013731 	.word	0x08013731
 8013708:	08013747 	.word	0x08013747
 801370c:	08013737 	.word	0x08013737
 8013710:	08013747 	.word	0x08013747
 8013714:	08013747 	.word	0x08013747
 8013718:	08013747 	.word	0x08013747
 801371c:	0801373f 	.word	0x0801373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013720:	f7fd f9e2 	bl	8010ae8 <HAL_RCC_GetPCLK1Freq>
 8013724:	61b8      	str	r0, [r7, #24]
        break;
 8013726:	e013      	b.n	8013750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013728:	f7fd f9f2 	bl	8010b10 <HAL_RCC_GetPCLK2Freq>
 801372c:	61b8      	str	r0, [r7, #24]
        break;
 801372e:	e00f      	b.n	8013750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013730:	4b4b      	ldr	r3, [pc, #300]	; (8013860 <UART_SetConfig+0x4c4>)
 8013732:	61bb      	str	r3, [r7, #24]
        break;
 8013734:	e00c      	b.n	8013750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013736:	f7fd f8c7 	bl	80108c8 <HAL_RCC_GetSysClockFreq>
 801373a:	61b8      	str	r0, [r7, #24]
        break;
 801373c:	e008      	b.n	8013750 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013742:	61bb      	str	r3, [r7, #24]
        break;
 8013744:	e004      	b.n	8013750 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8013746:	2300      	movs	r3, #0
 8013748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801374a:	2301      	movs	r3, #1
 801374c:	77bb      	strb	r3, [r7, #30]
        break;
 801374e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d074      	beq.n	8013840 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	005a      	lsls	r2, r3, #1
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	085b      	lsrs	r3, r3, #1
 8013760:	441a      	add	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	fbb2 f3f3 	udiv	r3, r2, r3
 801376a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	2b0f      	cmp	r3, #15
 8013770:	d916      	bls.n	80137a0 <UART_SetConfig+0x404>
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013778:	d212      	bcs.n	80137a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	b29b      	uxth	r3, r3
 801377e:	f023 030f 	bic.w	r3, r3, #15
 8013782:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	085b      	lsrs	r3, r3, #1
 8013788:	b29b      	uxth	r3, r3
 801378a:	f003 0307 	and.w	r3, r3, #7
 801378e:	b29a      	uxth	r2, r3
 8013790:	89fb      	ldrh	r3, [r7, #14]
 8013792:	4313      	orrs	r3, r2
 8013794:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	89fa      	ldrh	r2, [r7, #14]
 801379c:	60da      	str	r2, [r3, #12]
 801379e:	e04f      	b.n	8013840 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80137a0:	2301      	movs	r3, #1
 80137a2:	77bb      	strb	r3, [r7, #30]
 80137a4:	e04c      	b.n	8013840 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80137a6:	7ffb      	ldrb	r3, [r7, #31]
 80137a8:	2b08      	cmp	r3, #8
 80137aa:	d828      	bhi.n	80137fe <UART_SetConfig+0x462>
 80137ac:	a201      	add	r2, pc, #4	; (adr r2, 80137b4 <UART_SetConfig+0x418>)
 80137ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137b2:	bf00      	nop
 80137b4:	080137d9 	.word	0x080137d9
 80137b8:	080137e1 	.word	0x080137e1
 80137bc:	080137e9 	.word	0x080137e9
 80137c0:	080137ff 	.word	0x080137ff
 80137c4:	080137ef 	.word	0x080137ef
 80137c8:	080137ff 	.word	0x080137ff
 80137cc:	080137ff 	.word	0x080137ff
 80137d0:	080137ff 	.word	0x080137ff
 80137d4:	080137f7 	.word	0x080137f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80137d8:	f7fd f986 	bl	8010ae8 <HAL_RCC_GetPCLK1Freq>
 80137dc:	61b8      	str	r0, [r7, #24]
        break;
 80137de:	e013      	b.n	8013808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80137e0:	f7fd f996 	bl	8010b10 <HAL_RCC_GetPCLK2Freq>
 80137e4:	61b8      	str	r0, [r7, #24]
        break;
 80137e6:	e00f      	b.n	8013808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80137e8:	4b1d      	ldr	r3, [pc, #116]	; (8013860 <UART_SetConfig+0x4c4>)
 80137ea:	61bb      	str	r3, [r7, #24]
        break;
 80137ec:	e00c      	b.n	8013808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80137ee:	f7fd f86b 	bl	80108c8 <HAL_RCC_GetSysClockFreq>
 80137f2:	61b8      	str	r0, [r7, #24]
        break;
 80137f4:	e008      	b.n	8013808 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80137f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137fa:	61bb      	str	r3, [r7, #24]
        break;
 80137fc:	e004      	b.n	8013808 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80137fe:	2300      	movs	r3, #0
 8013800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8013802:	2301      	movs	r3, #1
 8013804:	77bb      	strb	r3, [r7, #30]
        break;
 8013806:	bf00      	nop
    }

    if (pclk != 0U)
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d018      	beq.n	8013840 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	085a      	lsrs	r2, r3, #1
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	441a      	add	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013820:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	2b0f      	cmp	r3, #15
 8013826:	d909      	bls.n	801383c <UART_SetConfig+0x4a0>
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801382e:	d205      	bcs.n	801383c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	b29a      	uxth	r2, r3
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	60da      	str	r2, [r3, #12]
 801383a:	e001      	b.n	8013840 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801383c:	2301      	movs	r3, #1
 801383e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2200      	movs	r2, #0
 8013844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2200      	movs	r2, #0
 801384a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801384c:	7fbb      	ldrb	r3, [r7, #30]
}
 801384e:	4618      	mov	r0, r3
 8013850:	3720      	adds	r7, #32
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
 8013856:	bf00      	nop
 8013858:	40007c00 	.word	0x40007c00
 801385c:	40023800 	.word	0x40023800
 8013860:	00f42400 	.word	0x00f42400

08013864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013870:	f003 0301 	and.w	r3, r3, #1
 8013874:	2b00      	cmp	r3, #0
 8013876:	d00a      	beq.n	801388e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	430a      	orrs	r2, r1
 801388c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013892:	f003 0302 	and.w	r3, r3, #2
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00a      	beq.n	80138b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	430a      	orrs	r2, r1
 80138ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b4:	f003 0304 	and.w	r3, r3, #4
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00a      	beq.n	80138d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	430a      	orrs	r2, r1
 80138d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d6:	f003 0308 	and.w	r3, r3, #8
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d00a      	beq.n	80138f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	430a      	orrs	r2, r1
 80138f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f8:	f003 0310 	and.w	r3, r3, #16
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00a      	beq.n	8013916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	689b      	ldr	r3, [r3, #8]
 8013906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	430a      	orrs	r2, r1
 8013914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391a:	f003 0320 	and.w	r3, r3, #32
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00a      	beq.n	8013938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	689b      	ldr	r3, [r3, #8]
 8013928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	430a      	orrs	r2, r1
 8013936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013940:	2b00      	cmp	r3, #0
 8013942:	d01a      	beq.n	801397a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	430a      	orrs	r2, r1
 8013958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801395e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013962:	d10a      	bne.n	801397a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	430a      	orrs	r2, r1
 8013978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013982:	2b00      	cmp	r3, #0
 8013984:	d00a      	beq.n	801399c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	430a      	orrs	r2, r1
 801399a:	605a      	str	r2, [r3, #4]
  }
}
 801399c:	bf00      	nop
 801399e:	370c      	adds	r7, #12
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b086      	sub	sp, #24
 80139ac:	af02      	add	r7, sp, #8
 80139ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80139b8:	f7f8 fa48 	bl	800be4c <HAL_GetTick>
 80139bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	f003 0308 	and.w	r3, r3, #8
 80139c8:	2b08      	cmp	r3, #8
 80139ca:	d10e      	bne.n	80139ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80139cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2200      	movs	r2, #0
 80139d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f000 f81b 	bl	8013a16 <UART_WaitOnFlagUntilTimeout>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d001      	beq.n	80139ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139e6:	2303      	movs	r3, #3
 80139e8:	e011      	b.n	8013a0e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2220      	movs	r2, #32
 80139ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2220      	movs	r2, #32
 80139f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8013a0c:	2300      	movs	r3, #0
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3710      	adds	r7, #16
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}

08013a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a16:	b580      	push	{r7, lr}
 8013a18:	b09c      	sub	sp, #112	; 0x70
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	60f8      	str	r0, [r7, #12]
 8013a1e:	60b9      	str	r1, [r7, #8]
 8013a20:	603b      	str	r3, [r7, #0]
 8013a22:	4613      	mov	r3, r2
 8013a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a26:	e0a7      	b.n	8013b78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a2e:	f000 80a3 	beq.w	8013b78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a32:	f7f8 fa0b 	bl	800be4c <HAL_GetTick>
 8013a36:	4602      	mov	r2, r0
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d302      	bcc.n	8013a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8013a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d13f      	bne.n	8013ac8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a50:	e853 3f00 	ldrex	r3, [r3]
 8013a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	461a      	mov	r2, r3
 8013a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013a68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013a6e:	e841 2300 	strex	r3, r2, [r1]
 8013a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d1e6      	bne.n	8013a48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	3308      	adds	r3, #8
 8013a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a84:	e853 3f00 	ldrex	r3, [r3]
 8013a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8c:	f023 0301 	bic.w	r3, r3, #1
 8013a90:	663b      	str	r3, [r7, #96]	; 0x60
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	3308      	adds	r3, #8
 8013a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8013a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013aa2:	e841 2300 	strex	r3, r2, [r1]
 8013aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d1e5      	bne.n	8013a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2220      	movs	r2, #32
 8013ab2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2220      	movs	r2, #32
 8013ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8013ac4:	2303      	movs	r3, #3
 8013ac6:	e068      	b.n	8013b9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f003 0304 	and.w	r3, r3, #4
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d050      	beq.n	8013b78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	69db      	ldr	r3, [r3, #28]
 8013adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ae4:	d148      	bne.n	8013b78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013aee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af8:	e853 3f00 	ldrex	r3, [r3]
 8013afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8013b10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b16:	e841 2300 	strex	r3, r2, [r1]
 8013b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1e6      	bne.n	8013af0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	3308      	adds	r3, #8
 8013b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	e853 3f00 	ldrex	r3, [r3]
 8013b30:	613b      	str	r3, [r7, #16]
   return(result);
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	f023 0301 	bic.w	r3, r3, #1
 8013b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	3308      	adds	r3, #8
 8013b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013b42:	623a      	str	r2, [r7, #32]
 8013b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b46:	69f9      	ldr	r1, [r7, #28]
 8013b48:	6a3a      	ldr	r2, [r7, #32]
 8013b4a:	e841 2300 	strex	r3, r2, [r1]
 8013b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1e5      	bne.n	8013b22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2220      	movs	r2, #32
 8013b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2220      	movs	r2, #32
 8013b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2220      	movs	r2, #32
 8013b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8013b74:	2303      	movs	r3, #3
 8013b76:	e010      	b.n	8013b9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	69da      	ldr	r2, [r3, #28]
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	4013      	ands	r3, r2
 8013b82:	68ba      	ldr	r2, [r7, #8]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	bf0c      	ite	eq
 8013b88:	2301      	moveq	r3, #1
 8013b8a:	2300      	movne	r3, #0
 8013b8c:	b2db      	uxtb	r3, r3
 8013b8e:	461a      	mov	r2, r3
 8013b90:	79fb      	ldrb	r3, [r7, #7]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	f43f af48 	beq.w	8013a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3770      	adds	r7, #112	; 0x70
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
	...

08013ba4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b087      	sub	sp, #28
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bb8:	683a      	ldr	r2, [r7, #0]
 8013bba:	6812      	ldr	r2, [r2, #0]
 8013bbc:	f023 0101 	bic.w	r1, r3, #1
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	689b      	ldr	r3, [r3, #8]
 8013bca:	2b08      	cmp	r3, #8
 8013bcc:	d102      	bne.n	8013bd4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8013bce:	2340      	movs	r3, #64	; 0x40
 8013bd0:	617b      	str	r3, [r7, #20]
 8013bd2:	e001      	b.n	8013bd8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8013be4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8013bea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8013bf0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8013bf6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8013bfc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8013c02:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8013c08:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8013c0e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8013c14:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8013c1a:	4313      	orrs	r3, r2
 8013c1c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c22:	693a      	ldr	r2, [r7, #16]
 8013c24:	4313      	orrs	r3, r2
 8013c26:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c2c:	693a      	ldr	r2, [r7, #16]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c36:	693a      	ldr	r2, [r7, #16]
 8013c38:	4313      	orrs	r3, r2
 8013c3a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8013c3c:	4b20      	ldr	r3, [pc, #128]	; (8013cc0 <FMC_NORSRAM_Init+0x11c>)
 8013c3e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c46:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c4e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8013c56:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	43db      	mvns	r3, r3
 8013c66:	ea02 0103 	and.w	r1, r2, r3
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	4319      	orrs	r1, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c80:	d10c      	bne.n	8013c9c <FMC_NORSRAM_Init+0xf8>
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d008      	beq.n	8013c9c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c96:	431a      	orrs	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d006      	beq.n	8013cb2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cac:	431a      	orrs	r2, r3
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8013cb2:	2300      	movs	r3, #0
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	371c      	adds	r7, #28
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr
 8013cc0:	0008fb7f 	.word	0x0008fb7f

08013cc4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b087      	sub	sp, #28
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	1c5a      	adds	r2, r3, #1
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cda:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	011b      	lsls	r3, r3, #4
 8013ce8:	431a      	orrs	r2, r3
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	689b      	ldr	r3, [r3, #8]
 8013cee:	021b      	lsls	r3, r3, #8
 8013cf0:	431a      	orrs	r2, r3
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	041b      	lsls	r3, r3, #16
 8013cf8:	431a      	orrs	r2, r3
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	691b      	ldr	r3, [r3, #16]
 8013cfe:	3b01      	subs	r3, #1
 8013d00:	051b      	lsls	r3, r3, #20
 8013d02:	431a      	orrs	r2, r3
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	695b      	ldr	r3, [r3, #20]
 8013d08:	3b02      	subs	r3, #2
 8013d0a:	061b      	lsls	r3, r3, #24
 8013d0c:	431a      	orrs	r2, r3
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	699b      	ldr	r3, [r3, #24]
 8013d12:	4313      	orrs	r3, r2
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	3201      	adds	r2, #1
 8013d18:	4319      	orrs	r1, r3
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013d2c:	d113      	bne.n	8013d56 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013d36:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	691b      	ldr	r3, [r3, #16]
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	051b      	lsls	r3, r3, #20
 8013d40:	697a      	ldr	r2, [r7, #20]
 8013d42:	4313      	orrs	r3, r2
 8013d44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	685b      	ldr	r3, [r3, #4]
 8013d4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	431a      	orrs	r2, r3
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8013d56:	2300      	movs	r3, #0
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	371c      	adds	r7, #28
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8013d64:	b480      	push	{r7}
 8013d66:	b085      	sub	sp, #20
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
 8013d70:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013d78:	d11d      	bne.n	8013db6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013d82:	4b13      	ldr	r3, [pc, #76]	; (8013dd0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8013d84:	4013      	ands	r3, r2
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	6811      	ldr	r1, [r2, #0]
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	6852      	ldr	r2, [r2, #4]
 8013d8e:	0112      	lsls	r2, r2, #4
 8013d90:	4311      	orrs	r1, r2
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	6892      	ldr	r2, [r2, #8]
 8013d96:	0212      	lsls	r2, r2, #8
 8013d98:	4311      	orrs	r1, r2
 8013d9a:	68ba      	ldr	r2, [r7, #8]
 8013d9c:	6992      	ldr	r2, [r2, #24]
 8013d9e:	4311      	orrs	r1, r2
 8013da0:	68ba      	ldr	r2, [r7, #8]
 8013da2:	68d2      	ldr	r2, [r2, #12]
 8013da4:	0412      	lsls	r2, r2, #16
 8013da6:	430a      	orrs	r2, r1
 8013da8:	ea43 0102 	orr.w	r1, r3, r2
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013db4:	e005      	b.n	8013dc2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3714      	adds	r7, #20
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr
 8013dd0:	cff00000 	.word	0xcff00000

08013dd4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013dd4:	b084      	sub	sp, #16
 8013dd6:	b480      	push	{r7}
 8013dd8:	b085      	sub	sp, #20
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	f107 001c 	add.w	r0, r7, #28
 8013de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8013dea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8013dec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8013dee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8013df2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8013df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8013df6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8013df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8013dfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8013dfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	4313      	orrs	r3, r2
 8013e04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	685a      	ldr	r2, [r3, #4]
 8013e0a:	4b07      	ldr	r3, [pc, #28]	; (8013e28 <SDMMC_Init+0x54>)
 8013e0c:	4013      	ands	r3, r2
 8013e0e:	68fa      	ldr	r2, [r7, #12]
 8013e10:	431a      	orrs	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3714      	adds	r7, #20
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	b004      	add	sp, #16
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop
 8013e28:	ffff8100 	.word	0xffff8100

08013e2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	370c      	adds	r7, #12
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8013e46:	b480      	push	{r7}
 8013e48:	b083      	sub	sp, #12
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
 8013e4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013e5a:	2300      	movs	r3, #0
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8013e68:	b480      	push	{r7}
 8013e6a:	b083      	sub	sp, #12
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2203      	movs	r2, #3
 8013e74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013e76:	2300      	movs	r3, #0
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8013e84:	b480      	push	{r7}
 8013e86:	b083      	sub	sp, #12
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f003 0303 	and.w	r3, r3, #3
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	370c      	adds	r7, #12
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013ebe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8013ec4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8013eca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	68da      	ldr	r2, [r3, #12]
 8013ed6:	4b06      	ldr	r3, [pc, #24]	; (8013ef0 <SDMMC_SendCommand+0x50>)
 8013ed8:	4013      	ands	r3, r2
 8013eda:	68fa      	ldr	r2, [r7, #12]
 8013edc:	431a      	orrs	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8013ee2:	2300      	movs	r3, #0
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3714      	adds	r7, #20
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	fffff000 	.word	0xfffff000

08013ef4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013ef4:	b480      	push	{r7}
 8013ef6:	b083      	sub	sp, #12
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	691b      	ldr	r3, [r3, #16]
 8013f00:	b2db      	uxtb	r3, r3
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	370c      	adds	r7, #12
 8013f06:	46bd      	mov	sp, r7
 8013f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0c:	4770      	bx	lr

08013f0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013f0e:	b480      	push	{r7}
 8013f10:	b085      	sub	sp, #20
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
 8013f16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	3314      	adds	r3, #20
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	4413      	add	r3, r2
 8013f22:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	681b      	ldr	r3, [r3, #0]
}  
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3714      	adds	r7, #20
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8013f34:	b480      	push	{r7}
 8013f36:	b085      	sub	sp, #20
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013f5a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8013f60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8013f66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f72:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	431a      	orrs	r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013f7e:	2300      	movs	r3, #0

}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3714      	adds	r7, #20
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b088      	sub	sp, #32
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013f9a:	2310      	movs	r3, #16
 8013f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013f9e:	2340      	movs	r3, #64	; 0x40
 8013fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013fac:	f107 0308 	add.w	r3, r7, #8
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7ff ff74 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fbc:	2110      	movs	r1, #16
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f000 f9d6 	bl	8014370 <SDMMC_GetCmdResp1>
 8013fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013fc6:	69fb      	ldr	r3, [r7, #28]
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3720      	adds	r7, #32
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b088      	sub	sp, #32
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013fde:	2311      	movs	r3, #17
 8013fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013fe2:	2340      	movs	r3, #64	; 0x40
 8013fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ff0:	f107 0308 	add.w	r3, r7, #8
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f7ff ff52 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8014000:	2111      	movs	r1, #17
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f9b4 	bl	8014370 <SDMMC_GetCmdResp1>
 8014008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801400a:	69fb      	ldr	r3, [r7, #28]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3720      	adds	r7, #32
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b088      	sub	sp, #32
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8014022:	2312      	movs	r3, #18
 8014024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014026:	2340      	movs	r3, #64	; 0x40
 8014028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801402a:	2300      	movs	r3, #0
 801402c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801402e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014034:	f107 0308 	add.w	r3, r7, #8
 8014038:	4619      	mov	r1, r3
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f7ff ff30 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8014040:	f241 3288 	movw	r2, #5000	; 0x1388
 8014044:	2112      	movs	r1, #18
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f000 f992 	bl	8014370 <SDMMC_GetCmdResp1>
 801404c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801404e:	69fb      	ldr	r3, [r7, #28]
}
 8014050:	4618      	mov	r0, r3
 8014052:	3720      	adds	r7, #32
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b088      	sub	sp, #32
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8014066:	2318      	movs	r3, #24
 8014068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801406a:	2340      	movs	r3, #64	; 0x40
 801406c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801406e:	2300      	movs	r3, #0
 8014070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014076:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014078:	f107 0308 	add.w	r3, r7, #8
 801407c:	4619      	mov	r1, r3
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7ff ff0e 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014084:	f241 3288 	movw	r2, #5000	; 0x1388
 8014088:	2118      	movs	r1, #24
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f000 f970 	bl	8014370 <SDMMC_GetCmdResp1>
 8014090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014092:	69fb      	ldr	r3, [r7, #28]
}
 8014094:	4618      	mov	r0, r3
 8014096:	3720      	adds	r7, #32
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b088      	sub	sp, #32
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80140aa:	2319      	movs	r3, #25
 80140ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80140ae:	2340      	movs	r3, #64	; 0x40
 80140b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80140b2:	2300      	movs	r3, #0
 80140b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80140b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80140ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80140bc:	f107 0308 	add.w	r3, r7, #8
 80140c0:	4619      	mov	r1, r3
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f7ff feec 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80140c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80140cc:	2119      	movs	r1, #25
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f000 f94e 	bl	8014370 <SDMMC_GetCmdResp1>
 80140d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80140d6:	69fb      	ldr	r3, [r7, #28]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3720      	adds	r7, #32
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b088      	sub	sp, #32
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80140e8:	2300      	movs	r3, #0
 80140ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80140ec:	230c      	movs	r3, #12
 80140ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80140f0:	2340      	movs	r3, #64	; 0x40
 80140f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80140f4:	2300      	movs	r3, #0
 80140f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80140f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80140fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80140fe:	f107 0308 	add.w	r3, r7, #8
 8014102:	4619      	mov	r1, r3
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7ff fecb 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801410a:	4a05      	ldr	r2, [pc, #20]	; (8014120 <SDMMC_CmdStopTransfer+0x40>)
 801410c:	210c      	movs	r1, #12
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f000 f92e 	bl	8014370 <SDMMC_GetCmdResp1>
 8014114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014116:	69fb      	ldr	r3, [r7, #28]
}
 8014118:	4618      	mov	r0, r3
 801411a:	3720      	adds	r7, #32
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}
 8014120:	05f5e100 	.word	0x05f5e100

08014124 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b08a      	sub	sp, #40	; 0x28
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014134:	2307      	movs	r3, #7
 8014136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014138:	2340      	movs	r3, #64	; 0x40
 801413a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801413c:	2300      	movs	r3, #0
 801413e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014144:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014146:	f107 0310 	add.w	r3, r7, #16
 801414a:	4619      	mov	r1, r3
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	f7ff fea7 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014152:	f241 3288 	movw	r2, #5000	; 0x1388
 8014156:	2107      	movs	r1, #7
 8014158:	68f8      	ldr	r0, [r7, #12]
 801415a:	f000 f909 	bl	8014370 <SDMMC_GetCmdResp1>
 801415e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8014160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014162:	4618      	mov	r0, r3
 8014164:	3728      	adds	r7, #40	; 0x28
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b088      	sub	sp, #32
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8014172:	2300      	movs	r3, #0
 8014174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014176:	2300      	movs	r3, #0
 8014178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801417a:	2300      	movs	r3, #0
 801417c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801417e:	2300      	movs	r3, #0
 8014180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014188:	f107 0308 	add.w	r3, r7, #8
 801418c:	4619      	mov	r1, r3
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f7ff fe86 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f000 fb23 	bl	80147e0 <SDMMC_GetCmdError>
 801419a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801419c:	69fb      	ldr	r3, [r7, #28]
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3720      	adds	r7, #32
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}

080141a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	b088      	sub	sp, #32
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80141ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80141b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80141b4:	2308      	movs	r3, #8
 80141b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80141b8:	2340      	movs	r3, #64	; 0x40
 80141ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80141bc:	2300      	movs	r3, #0
 80141be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80141c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80141c6:	f107 0308 	add.w	r3, r7, #8
 80141ca:	4619      	mov	r1, r3
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f7ff fe67 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f000 fab6 	bl	8014744 <SDMMC_GetCmdResp7>
 80141d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80141da:	69fb      	ldr	r3, [r7, #28]
}
 80141dc:	4618      	mov	r0, r3
 80141de:	3720      	adds	r7, #32
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b088      	sub	sp, #32
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80141f2:	2337      	movs	r3, #55	; 0x37
 80141f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80141f6:	2340      	movs	r3, #64	; 0x40
 80141f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80141fa:	2300      	movs	r3, #0
 80141fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80141fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014202:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014204:	f107 0308 	add.w	r3, r7, #8
 8014208:	4619      	mov	r1, r3
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff fe48 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014210:	f241 3288 	movw	r2, #5000	; 0x1388
 8014214:	2137      	movs	r1, #55	; 0x37
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f000 f8aa 	bl	8014370 <SDMMC_GetCmdResp1>
 801421c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801421e:	69fb      	ldr	r3, [r7, #28]
}
 8014220:	4618      	mov	r0, r3
 8014222:	3720      	adds	r7, #32
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b088      	sub	sp, #32
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8014232:	683a      	ldr	r2, [r7, #0]
 8014234:	4b0d      	ldr	r3, [pc, #52]	; (801426c <SDMMC_CmdAppOperCommand+0x44>)
 8014236:	4313      	orrs	r3, r2
 8014238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801423a:	2329      	movs	r3, #41	; 0x29
 801423c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801423e:	2340      	movs	r3, #64	; 0x40
 8014240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014242:	2300      	movs	r3, #0
 8014244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801424a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801424c:	f107 0308 	add.w	r3, r7, #8
 8014250:	4619      	mov	r1, r3
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7ff fe24 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f000 f9bf 	bl	80145dc <SDMMC_GetCmdResp3>
 801425e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014260:	69fb      	ldr	r3, [r7, #28]
}
 8014262:	4618      	mov	r0, r3
 8014264:	3720      	adds	r7, #32
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	80100000 	.word	0x80100000

08014270 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b088      	sub	sp, #32
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014278:	2300      	movs	r3, #0
 801427a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801427c:	2302      	movs	r3, #2
 801427e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014280:	23c0      	movs	r3, #192	; 0xc0
 8014282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014284:	2300      	movs	r3, #0
 8014286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801428c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801428e:	f107 0308 	add.w	r3, r7, #8
 8014292:	4619      	mov	r1, r3
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7ff fe03 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 f956 	bl	801454c <SDMMC_GetCmdResp2>
 80142a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142a2:	69fb      	ldr	r3, [r7, #28]
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3720      	adds	r7, #32
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b088      	sub	sp, #32
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80142ba:	2309      	movs	r3, #9
 80142bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80142be:	23c0      	movs	r3, #192	; 0xc0
 80142c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142c2:	2300      	movs	r3, #0
 80142c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142cc:	f107 0308 	add.w	r3, r7, #8
 80142d0:	4619      	mov	r1, r3
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f7ff fde4 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f000 f937 	bl	801454c <SDMMC_GetCmdResp2>
 80142de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142e0:	69fb      	ldr	r3, [r7, #28]
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3720      	adds	r7, #32
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b088      	sub	sp, #32
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
 80142f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80142f4:	2300      	movs	r3, #0
 80142f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80142f8:	2303      	movs	r3, #3
 80142fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80142fc:	2340      	movs	r3, #64	; 0x40
 80142fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014300:	2300      	movs	r3, #0
 8014302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801430a:	f107 0308 	add.w	r3, r7, #8
 801430e:	4619      	mov	r1, r3
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f7ff fdc5 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	2103      	movs	r1, #3
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 f99c 	bl	8014658 <SDMMC_GetCmdResp6>
 8014320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014322:	69fb      	ldr	r3, [r7, #28]
}
 8014324:	4618      	mov	r0, r3
 8014326:	3720      	adds	r7, #32
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b088      	sub	sp, #32
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801433a:	230d      	movs	r3, #13
 801433c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801433e:	2340      	movs	r3, #64	; 0x40
 8014340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014342:	2300      	movs	r3, #0
 8014344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801434a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801434c:	f107 0308 	add.w	r3, r7, #8
 8014350:	4619      	mov	r1, r3
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff fda4 	bl	8013ea0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8014358:	f241 3288 	movw	r2, #5000	; 0x1388
 801435c:	210d      	movs	r1, #13
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 f806 	bl	8014370 <SDMMC_GetCmdResp1>
 8014364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014366:	69fb      	ldr	r3, [r7, #28]
}
 8014368:	4618      	mov	r0, r3
 801436a:	3720      	adds	r7, #32
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b088      	sub	sp, #32
 8014374:	af00      	add	r7, sp, #0
 8014376:	60f8      	str	r0, [r7, #12]
 8014378:	460b      	mov	r3, r1
 801437a:	607a      	str	r2, [r7, #4]
 801437c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801437e:	4b70      	ldr	r3, [pc, #448]	; (8014540 <SDMMC_GetCmdResp1+0x1d0>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a70      	ldr	r2, [pc, #448]	; (8014544 <SDMMC_GetCmdResp1+0x1d4>)
 8014384:	fba2 2303 	umull	r2, r3, r2, r3
 8014388:	0a5a      	lsrs	r2, r3, #9
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	fb02 f303 	mul.w	r3, r2, r3
 8014390:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	1e5a      	subs	r2, r3, #1
 8014396:	61fa      	str	r2, [r7, #28]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d102      	bne.n	80143a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801439c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80143a0:	e0c9      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d0ef      	beq.n	8014392 <SDMMC_GetCmdResp1+0x22>
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1ea      	bne.n	8014392 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143c0:	f003 0304 	and.w	r3, r3, #4
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d004      	beq.n	80143d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	2204      	movs	r2, #4
 80143cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80143ce:	2304      	movs	r3, #4
 80143d0:	e0b1      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143d6:	f003 0301 	and.w	r3, r3, #1
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d004      	beq.n	80143e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2201      	movs	r2, #1
 80143e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80143e4:	2301      	movs	r3, #1
 80143e6:	e0a6      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	22c5      	movs	r2, #197	; 0xc5
 80143ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f7ff fd80 	bl	8013ef4 <SDMMC_GetCommandResponse>
 80143f4:	4603      	mov	r3, r0
 80143f6:	461a      	mov	r2, r3
 80143f8:	7afb      	ldrb	r3, [r7, #11]
 80143fa:	4293      	cmp	r3, r2
 80143fc:	d001      	beq.n	8014402 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80143fe:	2301      	movs	r3, #1
 8014400:	e099      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014402:	2100      	movs	r1, #0
 8014404:	68f8      	ldr	r0, [r7, #12]
 8014406:	f7ff fd82 	bl	8013f0e <SDMMC_GetResponse>
 801440a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801440c:	697a      	ldr	r2, [r7, #20]
 801440e:	4b4e      	ldr	r3, [pc, #312]	; (8014548 <SDMMC_GetCmdResp1+0x1d8>)
 8014410:	4013      	ands	r3, r2
 8014412:	2b00      	cmp	r3, #0
 8014414:	d101      	bne.n	801441a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014416:	2300      	movs	r3, #0
 8014418:	e08d      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	2b00      	cmp	r3, #0
 801441e:	da02      	bge.n	8014426 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014424:	e087      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801442c:	2b00      	cmp	r3, #0
 801442e:	d001      	beq.n	8014434 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014430:	2340      	movs	r3, #64	; 0x40
 8014432:	e080      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801443a:	2b00      	cmp	r3, #0
 801443c:	d001      	beq.n	8014442 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801443e:	2380      	movs	r3, #128	; 0x80
 8014440:	e079      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014448:	2b00      	cmp	r3, #0
 801444a:	d002      	beq.n	8014452 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801444c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014450:	e071      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014458:	2b00      	cmp	r3, #0
 801445a:	d002      	beq.n	8014462 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801445c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014460:	e069      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014468:	2b00      	cmp	r3, #0
 801446a:	d002      	beq.n	8014472 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801446c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014470:	e061      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014478:	2b00      	cmp	r3, #0
 801447a:	d002      	beq.n	8014482 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801447c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014480:	e059      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014488:	2b00      	cmp	r3, #0
 801448a:	d002      	beq.n	8014492 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801448c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014490:	e051      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014498:	2b00      	cmp	r3, #0
 801449a:	d002      	beq.n	80144a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801449c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80144a0:	e049      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d002      	beq.n	80144b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80144ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80144b0:	e041      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d002      	beq.n	80144c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80144bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80144c0:	e039      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d002      	beq.n	80144d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80144cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80144d0:	e031      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d002      	beq.n	80144e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80144dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80144e0:	e029      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d002      	beq.n	80144f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80144ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80144f0:	e021      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d002      	beq.n	8014502 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80144fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014500:	e019      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014508:	2b00      	cmp	r3, #0
 801450a:	d002      	beq.n	8014512 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801450c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014510:	e011      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014518:	2b00      	cmp	r3, #0
 801451a:	d002      	beq.n	8014522 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801451c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014520:	e009      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	f003 0308 	and.w	r3, r3, #8
 8014528:	2b00      	cmp	r3, #0
 801452a:	d002      	beq.n	8014532 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801452c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014530:	e001      	b.n	8014536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014536:	4618      	mov	r0, r3
 8014538:	3720      	adds	r7, #32
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20000018 	.word	0x20000018
 8014544:	10624dd3 	.word	0x10624dd3
 8014548:	fdffe008 	.word	0xfdffe008

0801454c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801454c:	b480      	push	{r7}
 801454e:	b085      	sub	sp, #20
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014554:	4b1f      	ldr	r3, [pc, #124]	; (80145d4 <SDMMC_GetCmdResp2+0x88>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a1f      	ldr	r2, [pc, #124]	; (80145d8 <SDMMC_GetCmdResp2+0x8c>)
 801455a:	fba2 2303 	umull	r2, r3, r2, r3
 801455e:	0a5b      	lsrs	r3, r3, #9
 8014560:	f241 3288 	movw	r2, #5000	; 0x1388
 8014564:	fb02 f303 	mul.w	r3, r2, r3
 8014568:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	1e5a      	subs	r2, r3, #1
 801456e:	60fa      	str	r2, [r7, #12]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d102      	bne.n	801457a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014578:	e026      	b.n	80145c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801457e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014586:	2b00      	cmp	r3, #0
 8014588:	d0ef      	beq.n	801456a <SDMMC_GetCmdResp2+0x1e>
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014590:	2b00      	cmp	r3, #0
 8014592:	d1ea      	bne.n	801456a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014598:	f003 0304 	and.w	r3, r3, #4
 801459c:	2b00      	cmp	r3, #0
 801459e:	d004      	beq.n	80145aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2204      	movs	r2, #4
 80145a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80145a6:	2304      	movs	r3, #4
 80145a8:	e00e      	b.n	80145c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145ae:	f003 0301 	and.w	r3, r3, #1
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d004      	beq.n	80145c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2201      	movs	r2, #1
 80145ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80145bc:	2301      	movs	r3, #1
 80145be:	e003      	b.n	80145c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	22c5      	movs	r2, #197	; 0xc5
 80145c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80145c6:	2300      	movs	r3, #0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3714      	adds	r7, #20
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr
 80145d4:	20000018 	.word	0x20000018
 80145d8:	10624dd3 	.word	0x10624dd3

080145dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80145dc:	b480      	push	{r7}
 80145de:	b085      	sub	sp, #20
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80145e4:	4b1a      	ldr	r3, [pc, #104]	; (8014650 <SDMMC_GetCmdResp3+0x74>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4a1a      	ldr	r2, [pc, #104]	; (8014654 <SDMMC_GetCmdResp3+0x78>)
 80145ea:	fba2 2303 	umull	r2, r3, r2, r3
 80145ee:	0a5b      	lsrs	r3, r3, #9
 80145f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80145f4:	fb02 f303 	mul.w	r3, r2, r3
 80145f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	1e5a      	subs	r2, r3, #1
 80145fe:	60fa      	str	r2, [r7, #12]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d102      	bne.n	801460a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014608:	e01b      	b.n	8014642 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801460e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014616:	2b00      	cmp	r3, #0
 8014618:	d0ef      	beq.n	80145fa <SDMMC_GetCmdResp3+0x1e>
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014620:	2b00      	cmp	r3, #0
 8014622:	d1ea      	bne.n	80145fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014628:	f003 0304 	and.w	r3, r3, #4
 801462c:	2b00      	cmp	r3, #0
 801462e:	d004      	beq.n	801463a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2204      	movs	r2, #4
 8014634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014636:	2304      	movs	r3, #4
 8014638:	e003      	b.n	8014642 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	22c5      	movs	r2, #197	; 0xc5
 801463e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014640:	2300      	movs	r3, #0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3714      	adds	r7, #20
 8014646:	46bd      	mov	sp, r7
 8014648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop
 8014650:	20000018 	.word	0x20000018
 8014654:	10624dd3 	.word	0x10624dd3

08014658 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b088      	sub	sp, #32
 801465c:	af00      	add	r7, sp, #0
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	460b      	mov	r3, r1
 8014662:	607a      	str	r2, [r7, #4]
 8014664:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014666:	4b35      	ldr	r3, [pc, #212]	; (801473c <SDMMC_GetCmdResp6+0xe4>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	4a35      	ldr	r2, [pc, #212]	; (8014740 <SDMMC_GetCmdResp6+0xe8>)
 801466c:	fba2 2303 	umull	r2, r3, r2, r3
 8014670:	0a5b      	lsrs	r3, r3, #9
 8014672:	f241 3288 	movw	r2, #5000	; 0x1388
 8014676:	fb02 f303 	mul.w	r3, r2, r3
 801467a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	1e5a      	subs	r2, r3, #1
 8014680:	61fa      	str	r2, [r7, #28]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d102      	bne.n	801468c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801468a:	e052      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014690:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014698:	2b00      	cmp	r3, #0
 801469a:	d0ef      	beq.n	801467c <SDMMC_GetCmdResp6+0x24>
 801469c:	69bb      	ldr	r3, [r7, #24]
 801469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d1ea      	bne.n	801467c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146aa:	f003 0304 	and.w	r3, r3, #4
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d004      	beq.n	80146bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2204      	movs	r2, #4
 80146b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80146b8:	2304      	movs	r3, #4
 80146ba:	e03a      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146c0:	f003 0301 	and.w	r3, r3, #1
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d004      	beq.n	80146d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2201      	movs	r2, #1
 80146cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80146ce:	2301      	movs	r3, #1
 80146d0:	e02f      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f7ff fc0e 	bl	8013ef4 <SDMMC_GetCommandResponse>
 80146d8:	4603      	mov	r3, r0
 80146da:	461a      	mov	r2, r3
 80146dc:	7afb      	ldrb	r3, [r7, #11]
 80146de:	4293      	cmp	r3, r2
 80146e0:	d001      	beq.n	80146e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80146e2:	2301      	movs	r3, #1
 80146e4:	e025      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	22c5      	movs	r2, #197	; 0xc5
 80146ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80146ec:	2100      	movs	r1, #0
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f7ff fc0d 	bl	8013f0e <SDMMC_GetResponse>
 80146f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d106      	bne.n	801470e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	0c1b      	lsrs	r3, r3, #16
 8014704:	b29a      	uxth	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801470a:	2300      	movs	r3, #0
 801470c:	e011      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801471c:	e009      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801472c:	e001      	b.n	8014732 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801472e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014732:	4618      	mov	r0, r3
 8014734:	3720      	adds	r7, #32
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	20000018 	.word	0x20000018
 8014740:	10624dd3 	.word	0x10624dd3

08014744 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014744:	b480      	push	{r7}
 8014746:	b085      	sub	sp, #20
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801474c:	4b22      	ldr	r3, [pc, #136]	; (80147d8 <SDMMC_GetCmdResp7+0x94>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	4a22      	ldr	r2, [pc, #136]	; (80147dc <SDMMC_GetCmdResp7+0x98>)
 8014752:	fba2 2303 	umull	r2, r3, r2, r3
 8014756:	0a5b      	lsrs	r3, r3, #9
 8014758:	f241 3288 	movw	r2, #5000	; 0x1388
 801475c:	fb02 f303 	mul.w	r3, r2, r3
 8014760:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	1e5a      	subs	r2, r3, #1
 8014766:	60fa      	str	r2, [r7, #12]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d102      	bne.n	8014772 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801476c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014770:	e02c      	b.n	80147cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014776:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801477e:	2b00      	cmp	r3, #0
 8014780:	d0ef      	beq.n	8014762 <SDMMC_GetCmdResp7+0x1e>
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014788:	2b00      	cmp	r3, #0
 801478a:	d1ea      	bne.n	8014762 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014790:	f003 0304 	and.w	r3, r3, #4
 8014794:	2b00      	cmp	r3, #0
 8014796:	d004      	beq.n	80147a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2204      	movs	r2, #4
 801479c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801479e:	2304      	movs	r3, #4
 80147a0:	e014      	b.n	80147cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147a6:	f003 0301 	and.w	r3, r3, #1
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d004      	beq.n	80147b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2201      	movs	r2, #1
 80147b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80147b4:	2301      	movs	r3, #1
 80147b6:	e009      	b.n	80147cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2240      	movs	r2, #64	; 0x40
 80147c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80147ca:	2300      	movs	r3, #0
  
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3714      	adds	r7, #20
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr
 80147d8:	20000018 	.word	0x20000018
 80147dc:	10624dd3 	.word	0x10624dd3

080147e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b085      	sub	sp, #20
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80147e8:	4b11      	ldr	r3, [pc, #68]	; (8014830 <SDMMC_GetCmdError+0x50>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	4a11      	ldr	r2, [pc, #68]	; (8014834 <SDMMC_GetCmdError+0x54>)
 80147ee:	fba2 2303 	umull	r2, r3, r2, r3
 80147f2:	0a5b      	lsrs	r3, r3, #9
 80147f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80147f8:	fb02 f303 	mul.w	r3, r2, r3
 80147fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	1e5a      	subs	r2, r3, #1
 8014802:	60fa      	str	r2, [r7, #12]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d102      	bne.n	801480e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801480c:	e009      	b.n	8014822 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014816:	2b00      	cmp	r3, #0
 8014818:	d0f1      	beq.n	80147fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	22c5      	movs	r2, #197	; 0xc5
 801481e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8014820:	2300      	movs	r3, #0
}
 8014822:	4618      	mov	r0, r3
 8014824:	3714      	adds	r7, #20
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr
 801482e:	bf00      	nop
 8014830:	20000018 	.word	0x20000018
 8014834:	10624dd3 	.word	0x10624dd3

08014838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014838:	b084      	sub	sp, #16
 801483a:	b580      	push	{r7, lr}
 801483c:	b084      	sub	sp, #16
 801483e:	af00      	add	r7, sp, #0
 8014840:	6078      	str	r0, [r7, #4]
 8014842:	f107 001c 	add.w	r0, r7, #28
 8014846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484c:	2b01      	cmp	r3, #1
 801484e:	d120      	bne.n	8014892 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	68da      	ldr	r2, [r3, #12]
 8014860:	4b20      	ldr	r3, [pc, #128]	; (80148e4 <USB_CoreInit+0xac>)
 8014862:	4013      	ands	r3, r2
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014876:	2b01      	cmp	r3, #1
 8014878:	d105      	bne.n	8014886 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	68db      	ldr	r3, [r3, #12]
 801487e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f001 fc0e 	bl	80160a8 <USB_CoreReset>
 801488c:	4603      	mov	r3, r0
 801488e:	73fb      	strb	r3, [r7, #15]
 8014890:	e010      	b.n	80148b4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f001 fc02 	bl	80160a8 <USB_CoreReset>
 80148a4:	4603      	mov	r3, r0
 80148a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d10b      	bne.n	80148d2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	689b      	ldr	r3, [r3, #8]
 80148be:	f043 0206 	orr.w	r2, r3, #6
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	689b      	ldr	r3, [r3, #8]
 80148ca:	f043 0220 	orr.w	r2, r3, #32
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80148d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80148de:	b004      	add	sp, #16
 80148e0:	4770      	bx	lr
 80148e2:	bf00      	nop
 80148e4:	ffbdffbf 	.word	0xffbdffbf

080148e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b087      	sub	sp, #28
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	4613      	mov	r3, r2
 80148f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80148f6:	79fb      	ldrb	r3, [r7, #7]
 80148f8:	2b02      	cmp	r3, #2
 80148fa:	d165      	bne.n	80149c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	4a41      	ldr	r2, [pc, #260]	; (8014a04 <USB_SetTurnaroundTime+0x11c>)
 8014900:	4293      	cmp	r3, r2
 8014902:	d906      	bls.n	8014912 <USB_SetTurnaroundTime+0x2a>
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	4a40      	ldr	r2, [pc, #256]	; (8014a08 <USB_SetTurnaroundTime+0x120>)
 8014908:	4293      	cmp	r3, r2
 801490a:	d202      	bcs.n	8014912 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801490c:	230f      	movs	r3, #15
 801490e:	617b      	str	r3, [r7, #20]
 8014910:	e062      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	4a3c      	ldr	r2, [pc, #240]	; (8014a08 <USB_SetTurnaroundTime+0x120>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d306      	bcc.n	8014928 <USB_SetTurnaroundTime+0x40>
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	4a3b      	ldr	r2, [pc, #236]	; (8014a0c <USB_SetTurnaroundTime+0x124>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d202      	bcs.n	8014928 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014922:	230e      	movs	r3, #14
 8014924:	617b      	str	r3, [r7, #20]
 8014926:	e057      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	4a38      	ldr	r2, [pc, #224]	; (8014a0c <USB_SetTurnaroundTime+0x124>)
 801492c:	4293      	cmp	r3, r2
 801492e:	d306      	bcc.n	801493e <USB_SetTurnaroundTime+0x56>
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	4a37      	ldr	r2, [pc, #220]	; (8014a10 <USB_SetTurnaroundTime+0x128>)
 8014934:	4293      	cmp	r3, r2
 8014936:	d202      	bcs.n	801493e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014938:	230d      	movs	r3, #13
 801493a:	617b      	str	r3, [r7, #20]
 801493c:	e04c      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	4a33      	ldr	r2, [pc, #204]	; (8014a10 <USB_SetTurnaroundTime+0x128>)
 8014942:	4293      	cmp	r3, r2
 8014944:	d306      	bcc.n	8014954 <USB_SetTurnaroundTime+0x6c>
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	4a32      	ldr	r2, [pc, #200]	; (8014a14 <USB_SetTurnaroundTime+0x12c>)
 801494a:	4293      	cmp	r3, r2
 801494c:	d802      	bhi.n	8014954 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801494e:	230c      	movs	r3, #12
 8014950:	617b      	str	r3, [r7, #20]
 8014952:	e041      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	4a2f      	ldr	r2, [pc, #188]	; (8014a14 <USB_SetTurnaroundTime+0x12c>)
 8014958:	4293      	cmp	r3, r2
 801495a:	d906      	bls.n	801496a <USB_SetTurnaroundTime+0x82>
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	4a2e      	ldr	r2, [pc, #184]	; (8014a18 <USB_SetTurnaroundTime+0x130>)
 8014960:	4293      	cmp	r3, r2
 8014962:	d802      	bhi.n	801496a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014964:	230b      	movs	r3, #11
 8014966:	617b      	str	r3, [r7, #20]
 8014968:	e036      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	4a2a      	ldr	r2, [pc, #168]	; (8014a18 <USB_SetTurnaroundTime+0x130>)
 801496e:	4293      	cmp	r3, r2
 8014970:	d906      	bls.n	8014980 <USB_SetTurnaroundTime+0x98>
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	4a29      	ldr	r2, [pc, #164]	; (8014a1c <USB_SetTurnaroundTime+0x134>)
 8014976:	4293      	cmp	r3, r2
 8014978:	d802      	bhi.n	8014980 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801497a:	230a      	movs	r3, #10
 801497c:	617b      	str	r3, [r7, #20]
 801497e:	e02b      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	4a26      	ldr	r2, [pc, #152]	; (8014a1c <USB_SetTurnaroundTime+0x134>)
 8014984:	4293      	cmp	r3, r2
 8014986:	d906      	bls.n	8014996 <USB_SetTurnaroundTime+0xae>
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	4a25      	ldr	r2, [pc, #148]	; (8014a20 <USB_SetTurnaroundTime+0x138>)
 801498c:	4293      	cmp	r3, r2
 801498e:	d202      	bcs.n	8014996 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014990:	2309      	movs	r3, #9
 8014992:	617b      	str	r3, [r7, #20]
 8014994:	e020      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	4a21      	ldr	r2, [pc, #132]	; (8014a20 <USB_SetTurnaroundTime+0x138>)
 801499a:	4293      	cmp	r3, r2
 801499c:	d306      	bcc.n	80149ac <USB_SetTurnaroundTime+0xc4>
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	4a20      	ldr	r2, [pc, #128]	; (8014a24 <USB_SetTurnaroundTime+0x13c>)
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d802      	bhi.n	80149ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80149a6:	2308      	movs	r3, #8
 80149a8:	617b      	str	r3, [r7, #20]
 80149aa:	e015      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	4a1d      	ldr	r2, [pc, #116]	; (8014a24 <USB_SetTurnaroundTime+0x13c>)
 80149b0:	4293      	cmp	r3, r2
 80149b2:	d906      	bls.n	80149c2 <USB_SetTurnaroundTime+0xda>
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	4a1c      	ldr	r2, [pc, #112]	; (8014a28 <USB_SetTurnaroundTime+0x140>)
 80149b8:	4293      	cmp	r3, r2
 80149ba:	d202      	bcs.n	80149c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80149bc:	2307      	movs	r3, #7
 80149be:	617b      	str	r3, [r7, #20]
 80149c0:	e00a      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80149c2:	2306      	movs	r3, #6
 80149c4:	617b      	str	r3, [r7, #20]
 80149c6:	e007      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80149c8:	79fb      	ldrb	r3, [r7, #7]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d102      	bne.n	80149d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80149ce:	2309      	movs	r3, #9
 80149d0:	617b      	str	r3, [r7, #20]
 80149d2:	e001      	b.n	80149d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80149d4:	2309      	movs	r3, #9
 80149d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	68db      	ldr	r3, [r3, #12]
 80149dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	68da      	ldr	r2, [r3, #12]
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	029b      	lsls	r3, r3, #10
 80149ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80149f0:	431a      	orrs	r2, r3
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80149f6:	2300      	movs	r3, #0
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	371c      	adds	r7, #28
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr
 8014a04:	00d8acbf 	.word	0x00d8acbf
 8014a08:	00e4e1c0 	.word	0x00e4e1c0
 8014a0c:	00f42400 	.word	0x00f42400
 8014a10:	01067380 	.word	0x01067380
 8014a14:	011a499f 	.word	0x011a499f
 8014a18:	01312cff 	.word	0x01312cff
 8014a1c:	014ca43f 	.word	0x014ca43f
 8014a20:	016e3600 	.word	0x016e3600
 8014a24:	01a6ab1f 	.word	0x01a6ab1f
 8014a28:	01e84800 	.word	0x01e84800

08014a2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	f043 0201 	orr.w	r2, r3, #1
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014a40:	2300      	movs	r3, #0
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	370c      	adds	r7, #12
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a4e:	b480      	push	{r7}
 8014a50:	b083      	sub	sp, #12
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	689b      	ldr	r3, [r3, #8]
 8014a5a:	f023 0201 	bic.w	r2, r3, #1
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014a62:	2300      	movs	r3, #0
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	370c      	adds	r7, #12
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6e:	4770      	bx	lr

08014a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	460b      	mov	r3, r1
 8014a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014a8c:	78fb      	ldrb	r3, [r7, #3]
 8014a8e:	2b01      	cmp	r3, #1
 8014a90:	d115      	bne.n	8014abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014a9e:	2001      	movs	r0, #1
 8014aa0:	f7f7 f9e0 	bl	800be64 <HAL_Delay>
      ms++;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f001 fa6c 	bl	8015f88 <USB_GetMode>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b01      	cmp	r3, #1
 8014ab4:	d01e      	beq.n	8014af4 <USB_SetCurrentMode+0x84>
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	2b31      	cmp	r3, #49	; 0x31
 8014aba:	d9f0      	bls.n	8014a9e <USB_SetCurrentMode+0x2e>
 8014abc:	e01a      	b.n	8014af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014abe:	78fb      	ldrb	r3, [r7, #3]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d115      	bne.n	8014af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014ad0:	2001      	movs	r0, #1
 8014ad2:	f7f7 f9c7 	bl	800be64 <HAL_Delay>
      ms++;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f001 fa53 	bl	8015f88 <USB_GetMode>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d005      	beq.n	8014af4 <USB_SetCurrentMode+0x84>
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2b31      	cmp	r3, #49	; 0x31
 8014aec:	d9f0      	bls.n	8014ad0 <USB_SetCurrentMode+0x60>
 8014aee:	e001      	b.n	8014af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014af0:	2301      	movs	r3, #1
 8014af2:	e005      	b.n	8014b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2b32      	cmp	r3, #50	; 0x32
 8014af8:	d101      	bne.n	8014afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014afa:	2301      	movs	r3, #1
 8014afc:	e000      	b.n	8014b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014afe:	2300      	movs	r3, #0
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3710      	adds	r7, #16
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014b08:	b084      	sub	sp, #16
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b086      	sub	sp, #24
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
 8014b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014b22:	2300      	movs	r3, #0
 8014b24:	613b      	str	r3, [r7, #16]
 8014b26:	e009      	b.n	8014b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014b28:	687a      	ldr	r2, [r7, #4]
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	3340      	adds	r3, #64	; 0x40
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	4413      	add	r3, r2
 8014b32:	2200      	movs	r2, #0
 8014b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014b36:	693b      	ldr	r3, [r7, #16]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	613b      	str	r3, [r7, #16]
 8014b3c:	693b      	ldr	r3, [r7, #16]
 8014b3e:	2b0e      	cmp	r3, #14
 8014b40:	d9f2      	bls.n	8014b28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d11c      	bne.n	8014b82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	68fa      	ldr	r2, [r7, #12]
 8014b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014b56:	f043 0302 	orr.w	r3, r3, #2
 8014b5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	601a      	str	r2, [r3, #0]
 8014b80:	e005      	b.n	8014b8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014b94:	461a      	mov	r2, r3
 8014b96:	2300      	movs	r3, #0
 8014b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ba8:	461a      	mov	r2, r3
 8014baa:	680b      	ldr	r3, [r1, #0]
 8014bac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d10c      	bne.n	8014bce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d104      	bne.n	8014bc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014bba:	2100      	movs	r1, #0
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 f965 	bl	8014e8c <USB_SetDevSpeed>
 8014bc2:	e008      	b.n	8014bd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014bc4:	2101      	movs	r1, #1
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f000 f960 	bl	8014e8c <USB_SetDevSpeed>
 8014bcc:	e003      	b.n	8014bd6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014bce:	2103      	movs	r1, #3
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 f95b 	bl	8014e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014bd6:	2110      	movs	r1, #16
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 f8f3 	bl	8014dc4 <USB_FlushTxFifo>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d001      	beq.n	8014be8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8014be4:	2301      	movs	r3, #1
 8014be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f000 f91f 	bl	8014e2c <USB_FlushRxFifo>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d001      	beq.n	8014bf8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bfe:	461a      	mov	r2, r3
 8014c00:	2300      	movs	r3, #0
 8014c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c16:	461a      	mov	r2, r3
 8014c18:	2300      	movs	r3, #0
 8014c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	613b      	str	r3, [r7, #16]
 8014c20:	e043      	b.n	8014caa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	015a      	lsls	r2, r3, #5
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	4413      	add	r3, r2
 8014c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014c38:	d118      	bne.n	8014c6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d10a      	bne.n	8014c56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	015a      	lsls	r2, r3, #5
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	4413      	add	r3, r2
 8014c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014c52:	6013      	str	r3, [r2, #0]
 8014c54:	e013      	b.n	8014c7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	015a      	lsls	r2, r3, #5
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c62:	461a      	mov	r2, r3
 8014c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014c68:	6013      	str	r3, [r2, #0]
 8014c6a:	e008      	b.n	8014c7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	015a      	lsls	r2, r3, #5
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	4413      	add	r3, r2
 8014c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c78:	461a      	mov	r2, r3
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	015a      	lsls	r2, r3, #5
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	4413      	add	r3, r2
 8014c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	015a      	lsls	r2, r3, #5
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4413      	add	r3, r2
 8014c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	613b      	str	r3, [r7, #16]
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	693a      	ldr	r2, [r7, #16]
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d3b7      	bcc.n	8014c22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	613b      	str	r3, [r7, #16]
 8014cb6:	e043      	b.n	8014d40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	015a      	lsls	r2, r3, #5
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014cce:	d118      	bne.n	8014d02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10a      	bne.n	8014cec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	015a      	lsls	r2, r3, #5
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	4413      	add	r3, r2
 8014cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014ce8:	6013      	str	r3, [r2, #0]
 8014cea:	e013      	b.n	8014d14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	015a      	lsls	r2, r3, #5
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014cfe:	6013      	str	r3, [r2, #0]
 8014d00:	e008      	b.n	8014d14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	015a      	lsls	r2, r3, #5
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	4413      	add	r3, r2
 8014d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d0e:	461a      	mov	r2, r3
 8014d10:	2300      	movs	r3, #0
 8014d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	015a      	lsls	r2, r3, #5
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d20:	461a      	mov	r2, r3
 8014d22:	2300      	movs	r3, #0
 8014d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	015a      	lsls	r2, r3, #5
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d32:	461a      	mov	r2, r3
 8014d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	613b      	str	r3, [r7, #16]
 8014d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d42:	693a      	ldr	r2, [r7, #16]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d3b7      	bcc.n	8014cb8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d4e:	691b      	ldr	r3, [r3, #16]
 8014d50:	68fa      	ldr	r2, [r7, #12]
 8014d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8014d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d105      	bne.n	8014d7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	f043 0210 	orr.w	r2, r3, #16
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	699a      	ldr	r2, [r3, #24]
 8014d80:	4b0e      	ldr	r3, [pc, #56]	; (8014dbc <USB_DevInit+0x2b4>)
 8014d82:	4313      	orrs	r3, r2
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d005      	beq.n	8014d9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	699b      	ldr	r3, [r3, #24]
 8014d92:	f043 0208 	orr.w	r2, r3, #8
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d9c:	2b01      	cmp	r3, #1
 8014d9e:	d105      	bne.n	8014dac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	699a      	ldr	r2, [r3, #24]
 8014da4:	4b06      	ldr	r3, [pc, #24]	; (8014dc0 <USB_DevInit+0x2b8>)
 8014da6:	4313      	orrs	r3, r2
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3718      	adds	r7, #24
 8014db2:	46bd      	mov	sp, r7
 8014db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014db8:	b004      	add	sp, #16
 8014dba:	4770      	bx	lr
 8014dbc:	803c3800 	.word	0x803c3800
 8014dc0:	40000004 	.word	0x40000004

08014dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	3301      	adds	r3, #1
 8014dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	4a13      	ldr	r2, [pc, #76]	; (8014e28 <USB_FlushTxFifo+0x64>)
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d901      	bls.n	8014de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014de0:	2303      	movs	r3, #3
 8014de2:	e01b      	b.n	8014e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	691b      	ldr	r3, [r3, #16]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	daf2      	bge.n	8014dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014dec:	2300      	movs	r3, #0
 8014dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	019b      	lsls	r3, r3, #6
 8014df4:	f043 0220 	orr.w	r2, r3, #32
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	3301      	adds	r3, #1
 8014e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	4a08      	ldr	r2, [pc, #32]	; (8014e28 <USB_FlushTxFifo+0x64>)
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d901      	bls.n	8014e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	e006      	b.n	8014e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	691b      	ldr	r3, [r3, #16]
 8014e12:	f003 0320 	and.w	r3, r3, #32
 8014e16:	2b20      	cmp	r3, #32
 8014e18:	d0f0      	beq.n	8014dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014e1a:	2300      	movs	r3, #0
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3714      	adds	r7, #20
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr
 8014e28:	00030d40 	.word	0x00030d40

08014e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b085      	sub	sp, #20
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014e34:	2300      	movs	r3, #0
 8014e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	4a11      	ldr	r2, [pc, #68]	; (8014e88 <USB_FlushRxFifo+0x5c>)
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d901      	bls.n	8014e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014e46:	2303      	movs	r3, #3
 8014e48:	e018      	b.n	8014e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	691b      	ldr	r3, [r3, #16]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	daf2      	bge.n	8014e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014e52:	2300      	movs	r3, #0
 8014e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2210      	movs	r2, #16
 8014e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	4a08      	ldr	r2, [pc, #32]	; (8014e88 <USB_FlushRxFifo+0x5c>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d901      	bls.n	8014e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014e6a:	2303      	movs	r3, #3
 8014e6c:	e006      	b.n	8014e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	691b      	ldr	r3, [r3, #16]
 8014e72:	f003 0310 	and.w	r3, r3, #16
 8014e76:	2b10      	cmp	r3, #16
 8014e78:	d0f0      	beq.n	8014e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3714      	adds	r7, #20
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr
 8014e88:	00030d40 	.word	0x00030d40

08014e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b085      	sub	sp, #20
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	460b      	mov	r3, r1
 8014e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	78fb      	ldrb	r3, [r7, #3]
 8014ea6:	68f9      	ldr	r1, [r7, #12]
 8014ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014eac:	4313      	orrs	r3, r2
 8014eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3714      	adds	r7, #20
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr

08014ebe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014ebe:	b480      	push	{r7}
 8014ec0:	b087      	sub	sp, #28
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ed0:	689b      	ldr	r3, [r3, #8]
 8014ed2:	f003 0306 	and.w	r3, r3, #6
 8014ed6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d102      	bne.n	8014ee4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	75fb      	strb	r3, [r7, #23]
 8014ee2:	e00a      	b.n	8014efa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2b02      	cmp	r3, #2
 8014ee8:	d002      	beq.n	8014ef0 <USB_GetDevSpeed+0x32>
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2b06      	cmp	r3, #6
 8014eee:	d102      	bne.n	8014ef6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014ef0:	2302      	movs	r3, #2
 8014ef2:	75fb      	strb	r3, [r7, #23]
 8014ef4:	e001      	b.n	8014efa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014ef6:	230f      	movs	r3, #15
 8014ef8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	371c      	adds	r7, #28
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	785b      	ldrb	r3, [r3, #1]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d139      	bne.n	8014f98 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f2a:	69da      	ldr	r2, [r3, #28]
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	f003 030f 	and.w	r3, r3, #15
 8014f34:	2101      	movs	r1, #1
 8014f36:	fa01 f303 	lsl.w	r3, r1, r3
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	68f9      	ldr	r1, [r7, #12]
 8014f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014f42:	4313      	orrs	r3, r2
 8014f44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	015a      	lsls	r2, r3, #5
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d153      	bne.n	8015004 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	015a      	lsls	r2, r3, #5
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	4413      	add	r3, r2
 8014f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	68db      	ldr	r3, [r3, #12]
 8014f6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	791b      	ldrb	r3, [r3, #4]
 8014f76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014f78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	059b      	lsls	r3, r3, #22
 8014f7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014f80:	431a      	orrs	r2, r3
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	0159      	lsls	r1, r3, #5
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	440b      	add	r3, r1
 8014f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f8e:	4619      	mov	r1, r3
 8014f90:	4b20      	ldr	r3, [pc, #128]	; (8015014 <USB_ActivateEndpoint+0x10c>)
 8014f92:	4313      	orrs	r3, r2
 8014f94:	600b      	str	r3, [r1, #0]
 8014f96:	e035      	b.n	8015004 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f9e:	69da      	ldr	r2, [r3, #28]
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	f003 030f 	and.w	r3, r3, #15
 8014fa8:	2101      	movs	r1, #1
 8014faa:	fa01 f303 	lsl.w	r3, r1, r3
 8014fae:	041b      	lsls	r3, r3, #16
 8014fb0:	68f9      	ldr	r1, [r7, #12]
 8014fb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014fb6:	4313      	orrs	r3, r2
 8014fb8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	015a      	lsls	r2, r3, #5
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d119      	bne.n	8015004 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	015a      	lsls	r2, r3, #5
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	4413      	add	r3, r2
 8014fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	68db      	ldr	r3, [r3, #12]
 8014fe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	791b      	ldrb	r3, [r3, #4]
 8014fea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014fec:	430b      	orrs	r3, r1
 8014fee:	431a      	orrs	r2, r3
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	0159      	lsls	r1, r3, #5
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	440b      	add	r3, r1
 8014ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	4b05      	ldr	r3, [pc, #20]	; (8015014 <USB_ActivateEndpoint+0x10c>)
 8015000:	4313      	orrs	r3, r2
 8015002:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015004:	2300      	movs	r3, #0
}
 8015006:	4618      	mov	r0, r3
 8015008:	3714      	adds	r7, #20
 801500a:	46bd      	mov	sp, r7
 801500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop
 8015014:	10008000 	.word	0x10008000

08015018 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015018:	b480      	push	{r7}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	785b      	ldrb	r3, [r3, #1]
 8015030:	2b01      	cmp	r3, #1
 8015032:	d161      	bne.n	80150f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	015a      	lsls	r2, r3, #5
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	4413      	add	r3, r2
 801503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801504a:	d11f      	bne.n	801508c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	015a      	lsls	r2, r3, #5
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	4413      	add	r3, r2
 8015054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	68ba      	ldr	r2, [r7, #8]
 801505c:	0151      	lsls	r1, r2, #5
 801505e:	68fa      	ldr	r2, [r7, #12]
 8015060:	440a      	add	r2, r1
 8015062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801506a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	015a      	lsls	r2, r3, #5
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	4413      	add	r3, r2
 8015074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	68ba      	ldr	r2, [r7, #8]
 801507c:	0151      	lsls	r1, r2, #5
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	440a      	add	r2, r1
 8015082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801508a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	f003 030f 	and.w	r3, r3, #15
 801509c:	2101      	movs	r1, #1
 801509e:	fa01 f303 	lsl.w	r3, r1, r3
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	43db      	mvns	r3, r3
 80150a6:	68f9      	ldr	r1, [r7, #12]
 80150a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80150ac:	4013      	ands	r3, r2
 80150ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150b6:	69da      	ldr	r2, [r3, #28]
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	781b      	ldrb	r3, [r3, #0]
 80150bc:	f003 030f 	and.w	r3, r3, #15
 80150c0:	2101      	movs	r1, #1
 80150c2:	fa01 f303 	lsl.w	r3, r1, r3
 80150c6:	b29b      	uxth	r3, r3
 80150c8:	43db      	mvns	r3, r3
 80150ca:	68f9      	ldr	r1, [r7, #12]
 80150cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80150d0:	4013      	ands	r3, r2
 80150d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80150d4:	68bb      	ldr	r3, [r7, #8]
 80150d6:	015a      	lsls	r2, r3, #5
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	4413      	add	r3, r2
 80150dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	0159      	lsls	r1, r3, #5
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	440b      	add	r3, r1
 80150ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150ee:	4619      	mov	r1, r3
 80150f0:	4b35      	ldr	r3, [pc, #212]	; (80151c8 <USB_DeactivateEndpoint+0x1b0>)
 80150f2:	4013      	ands	r3, r2
 80150f4:	600b      	str	r3, [r1, #0]
 80150f6:	e060      	b.n	80151ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	015a      	lsls	r2, r3, #5
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	4413      	add	r3, r2
 8015100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801510a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801510e:	d11f      	bne.n	8015150 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	015a      	lsls	r2, r3, #5
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	4413      	add	r3, r2
 8015118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	68ba      	ldr	r2, [r7, #8]
 8015120:	0151      	lsls	r1, r2, #5
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	440a      	add	r2, r1
 8015126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801512a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801512e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	015a      	lsls	r2, r3, #5
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	4413      	add	r3, r2
 8015138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	68ba      	ldr	r2, [r7, #8]
 8015140:	0151      	lsls	r1, r2, #5
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	440a      	add	r2, r1
 8015146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801514a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801514e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	f003 030f 	and.w	r3, r3, #15
 8015160:	2101      	movs	r1, #1
 8015162:	fa01 f303 	lsl.w	r3, r1, r3
 8015166:	041b      	lsls	r3, r3, #16
 8015168:	43db      	mvns	r3, r3
 801516a:	68f9      	ldr	r1, [r7, #12]
 801516c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015170:	4013      	ands	r3, r2
 8015172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801517a:	69da      	ldr	r2, [r3, #28]
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	781b      	ldrb	r3, [r3, #0]
 8015180:	f003 030f 	and.w	r3, r3, #15
 8015184:	2101      	movs	r1, #1
 8015186:	fa01 f303 	lsl.w	r3, r1, r3
 801518a:	041b      	lsls	r3, r3, #16
 801518c:	43db      	mvns	r3, r3
 801518e:	68f9      	ldr	r1, [r7, #12]
 8015190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015194:	4013      	ands	r3, r2
 8015196:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	015a      	lsls	r2, r3, #5
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	4413      	add	r3, r2
 80151a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	0159      	lsls	r1, r3, #5
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	440b      	add	r3, r1
 80151ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80151b2:	4619      	mov	r1, r3
 80151b4:	4b05      	ldr	r3, [pc, #20]	; (80151cc <USB_DeactivateEndpoint+0x1b4>)
 80151b6:	4013      	ands	r3, r2
 80151b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80151ba:	2300      	movs	r3, #0
}
 80151bc:	4618      	mov	r0, r3
 80151be:	3714      	adds	r7, #20
 80151c0:	46bd      	mov	sp, r7
 80151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c6:	4770      	bx	lr
 80151c8:	ec337800 	.word	0xec337800
 80151cc:	eff37800 	.word	0xeff37800

080151d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b08a      	sub	sp, #40	; 0x28
 80151d4:	af02      	add	r7, sp, #8
 80151d6:	60f8      	str	r0, [r7, #12]
 80151d8:	60b9      	str	r1, [r7, #8]
 80151da:	4613      	mov	r3, r2
 80151dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	781b      	ldrb	r3, [r3, #0]
 80151e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	785b      	ldrb	r3, [r3, #1]
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	f040 8163 	bne.w	80154b8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	699b      	ldr	r3, [r3, #24]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d132      	bne.n	8015260 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	015a      	lsls	r2, r3, #5
 80151fe:	69fb      	ldr	r3, [r7, #28]
 8015200:	4413      	add	r3, r2
 8015202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015206:	691a      	ldr	r2, [r3, #16]
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	0159      	lsls	r1, r3, #5
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	440b      	add	r3, r1
 8015210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015214:	4619      	mov	r1, r3
 8015216:	4ba5      	ldr	r3, [pc, #660]	; (80154ac <USB_EPStartXfer+0x2dc>)
 8015218:	4013      	ands	r3, r2
 801521a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	015a      	lsls	r2, r3, #5
 8015220:	69fb      	ldr	r3, [r7, #28]
 8015222:	4413      	add	r3, r2
 8015224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015228:	691b      	ldr	r3, [r3, #16]
 801522a:	69ba      	ldr	r2, [r7, #24]
 801522c:	0151      	lsls	r1, r2, #5
 801522e:	69fa      	ldr	r2, [r7, #28]
 8015230:	440a      	add	r2, r1
 8015232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801523a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	015a      	lsls	r2, r3, #5
 8015240:	69fb      	ldr	r3, [r7, #28]
 8015242:	4413      	add	r3, r2
 8015244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015248:	691a      	ldr	r2, [r3, #16]
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	0159      	lsls	r1, r3, #5
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	440b      	add	r3, r1
 8015252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015256:	4619      	mov	r1, r3
 8015258:	4b95      	ldr	r3, [pc, #596]	; (80154b0 <USB_EPStartXfer+0x2e0>)
 801525a:	4013      	ands	r3, r2
 801525c:	610b      	str	r3, [r1, #16]
 801525e:	e074      	b.n	801534a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015260:	69bb      	ldr	r3, [r7, #24]
 8015262:	015a      	lsls	r2, r3, #5
 8015264:	69fb      	ldr	r3, [r7, #28]
 8015266:	4413      	add	r3, r2
 8015268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801526c:	691a      	ldr	r2, [r3, #16]
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	0159      	lsls	r1, r3, #5
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	440b      	add	r3, r1
 8015276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801527a:	4619      	mov	r1, r3
 801527c:	4b8c      	ldr	r3, [pc, #560]	; (80154b0 <USB_EPStartXfer+0x2e0>)
 801527e:	4013      	ands	r3, r2
 8015280:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	015a      	lsls	r2, r3, #5
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	4413      	add	r3, r2
 801528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801528e:	691a      	ldr	r2, [r3, #16]
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	0159      	lsls	r1, r3, #5
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	440b      	add	r3, r1
 8015298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801529c:	4619      	mov	r1, r3
 801529e:	4b83      	ldr	r3, [pc, #524]	; (80154ac <USB_EPStartXfer+0x2dc>)
 80152a0:	4013      	ands	r3, r2
 80152a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	015a      	lsls	r2, r3, #5
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	4413      	add	r3, r2
 80152ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	6999      	ldr	r1, [r3, #24]
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	440b      	add	r3, r1
 80152bc:	1e59      	subs	r1, r3, #1
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80152c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80152c8:	4b7a      	ldr	r3, [pc, #488]	; (80154b4 <USB_EPStartXfer+0x2e4>)
 80152ca:	400b      	ands	r3, r1
 80152cc:	69b9      	ldr	r1, [r7, #24]
 80152ce:	0148      	lsls	r0, r1, #5
 80152d0:	69f9      	ldr	r1, [r7, #28]
 80152d2:	4401      	add	r1, r0
 80152d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80152d8:	4313      	orrs	r3, r2
 80152da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	015a      	lsls	r2, r3, #5
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	4413      	add	r3, r2
 80152e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152e8:	691a      	ldr	r2, [r3, #16]
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	699b      	ldr	r3, [r3, #24]
 80152ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80152f2:	69b9      	ldr	r1, [r7, #24]
 80152f4:	0148      	lsls	r0, r1, #5
 80152f6:	69f9      	ldr	r1, [r7, #28]
 80152f8:	4401      	add	r1, r0
 80152fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80152fe:	4313      	orrs	r3, r2
 8015300:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	791b      	ldrb	r3, [r3, #4]
 8015306:	2b01      	cmp	r3, #1
 8015308:	d11f      	bne.n	801534a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	015a      	lsls	r2, r3, #5
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	4413      	add	r3, r2
 8015312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015316:	691b      	ldr	r3, [r3, #16]
 8015318:	69ba      	ldr	r2, [r7, #24]
 801531a:	0151      	lsls	r1, r2, #5
 801531c:	69fa      	ldr	r2, [r7, #28]
 801531e:	440a      	add	r2, r1
 8015320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015324:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8015328:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	015a      	lsls	r2, r3, #5
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	4413      	add	r3, r2
 8015332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	69ba      	ldr	r2, [r7, #24]
 801533a:	0151      	lsls	r1, r2, #5
 801533c:	69fa      	ldr	r2, [r7, #28]
 801533e:	440a      	add	r2, r1
 8015340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015348:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801534a:	79fb      	ldrb	r3, [r7, #7]
 801534c:	2b01      	cmp	r3, #1
 801534e:	d14b      	bne.n	80153e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	695b      	ldr	r3, [r3, #20]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d009      	beq.n	801536c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015358:	69bb      	ldr	r3, [r7, #24]
 801535a:	015a      	lsls	r2, r3, #5
 801535c:	69fb      	ldr	r3, [r7, #28]
 801535e:	4413      	add	r3, r2
 8015360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015364:	461a      	mov	r2, r3
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	695b      	ldr	r3, [r3, #20]
 801536a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	791b      	ldrb	r3, [r3, #4]
 8015370:	2b01      	cmp	r3, #1
 8015372:	d128      	bne.n	80153c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801537a:	689b      	ldr	r3, [r3, #8]
 801537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015380:	2b00      	cmp	r3, #0
 8015382:	d110      	bne.n	80153a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	015a      	lsls	r2, r3, #5
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	4413      	add	r3, r2
 801538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	69ba      	ldr	r2, [r7, #24]
 8015394:	0151      	lsls	r1, r2, #5
 8015396:	69fa      	ldr	r2, [r7, #28]
 8015398:	440a      	add	r2, r1
 801539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801539e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80153a2:	6013      	str	r3, [r2, #0]
 80153a4:	e00f      	b.n	80153c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80153a6:	69bb      	ldr	r3, [r7, #24]
 80153a8:	015a      	lsls	r2, r3, #5
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	4413      	add	r3, r2
 80153ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	69ba      	ldr	r2, [r7, #24]
 80153b6:	0151      	lsls	r1, r2, #5
 80153b8:	69fa      	ldr	r2, [r7, #28]
 80153ba:	440a      	add	r2, r1
 80153bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80153c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80153c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80153c6:	69bb      	ldr	r3, [r7, #24]
 80153c8:	015a      	lsls	r2, r3, #5
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	4413      	add	r3, r2
 80153ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	69ba      	ldr	r2, [r7, #24]
 80153d6:	0151      	lsls	r1, r2, #5
 80153d8:	69fa      	ldr	r2, [r7, #28]
 80153da:	440a      	add	r2, r1
 80153dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80153e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80153e4:	6013      	str	r3, [r2, #0]
 80153e6:	e137      	b.n	8015658 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80153e8:	69bb      	ldr	r3, [r7, #24]
 80153ea:	015a      	lsls	r2, r3, #5
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	4413      	add	r3, r2
 80153f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	69ba      	ldr	r2, [r7, #24]
 80153f8:	0151      	lsls	r1, r2, #5
 80153fa:	69fa      	ldr	r2, [r7, #28]
 80153fc:	440a      	add	r2, r1
 80153fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015406:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	791b      	ldrb	r3, [r3, #4]
 801540c:	2b01      	cmp	r3, #1
 801540e:	d015      	beq.n	801543c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	699b      	ldr	r3, [r3, #24]
 8015414:	2b00      	cmp	r3, #0
 8015416:	f000 811f 	beq.w	8015658 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	f003 030f 	and.w	r3, r3, #15
 801542a:	2101      	movs	r1, #1
 801542c:	fa01 f303 	lsl.w	r3, r1, r3
 8015430:	69f9      	ldr	r1, [r7, #28]
 8015432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015436:	4313      	orrs	r3, r2
 8015438:	634b      	str	r3, [r1, #52]	; 0x34
 801543a:	e10d      	b.n	8015658 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015442:	689b      	ldr	r3, [r3, #8]
 8015444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015448:	2b00      	cmp	r3, #0
 801544a:	d110      	bne.n	801546e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	015a      	lsls	r2, r3, #5
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	4413      	add	r3, r2
 8015454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	69ba      	ldr	r2, [r7, #24]
 801545c:	0151      	lsls	r1, r2, #5
 801545e:	69fa      	ldr	r2, [r7, #28]
 8015460:	440a      	add	r2, r1
 8015462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801546a:	6013      	str	r3, [r2, #0]
 801546c:	e00f      	b.n	801548e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	015a      	lsls	r2, r3, #5
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	4413      	add	r3, r2
 8015476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	69ba      	ldr	r2, [r7, #24]
 801547e:	0151      	lsls	r1, r2, #5
 8015480:	69fa      	ldr	r2, [r7, #28]
 8015482:	440a      	add	r2, r1
 8015484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801548c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	6919      	ldr	r1, [r3, #16]
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	781a      	ldrb	r2, [r3, #0]
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	699b      	ldr	r3, [r3, #24]
 801549a:	b298      	uxth	r0, r3
 801549c:	79fb      	ldrb	r3, [r7, #7]
 801549e:	9300      	str	r3, [sp, #0]
 80154a0:	4603      	mov	r3, r0
 80154a2:	68f8      	ldr	r0, [r7, #12]
 80154a4:	f000 faea 	bl	8015a7c <USB_WritePacket>
 80154a8:	e0d6      	b.n	8015658 <USB_EPStartXfer+0x488>
 80154aa:	bf00      	nop
 80154ac:	e007ffff 	.word	0xe007ffff
 80154b0:	fff80000 	.word	0xfff80000
 80154b4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	015a      	lsls	r2, r3, #5
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	4413      	add	r3, r2
 80154c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154c4:	691a      	ldr	r2, [r3, #16]
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	0159      	lsls	r1, r3, #5
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	440b      	add	r3, r1
 80154ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154d2:	4619      	mov	r1, r3
 80154d4:	4b63      	ldr	r3, [pc, #396]	; (8015664 <USB_EPStartXfer+0x494>)
 80154d6:	4013      	ands	r3, r2
 80154d8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	015a      	lsls	r2, r3, #5
 80154de:	69fb      	ldr	r3, [r7, #28]
 80154e0:	4413      	add	r3, r2
 80154e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154e6:	691a      	ldr	r2, [r3, #16]
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	0159      	lsls	r1, r3, #5
 80154ec:	69fb      	ldr	r3, [r7, #28]
 80154ee:	440b      	add	r3, r1
 80154f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154f4:	4619      	mov	r1, r3
 80154f6:	4b5c      	ldr	r3, [pc, #368]	; (8015668 <USB_EPStartXfer+0x498>)
 80154f8:	4013      	ands	r3, r2
 80154fa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	699b      	ldr	r3, [r3, #24]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d123      	bne.n	801554c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015504:	69bb      	ldr	r3, [r7, #24]
 8015506:	015a      	lsls	r2, r3, #5
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	4413      	add	r3, r2
 801550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015510:	691a      	ldr	r2, [r3, #16]
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801551a:	69b9      	ldr	r1, [r7, #24]
 801551c:	0148      	lsls	r0, r1, #5
 801551e:	69f9      	ldr	r1, [r7, #28]
 8015520:	4401      	add	r1, r0
 8015522:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015526:	4313      	orrs	r3, r2
 8015528:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	015a      	lsls	r2, r3, #5
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	4413      	add	r3, r2
 8015532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015536:	691b      	ldr	r3, [r3, #16]
 8015538:	69ba      	ldr	r2, [r7, #24]
 801553a:	0151      	lsls	r1, r2, #5
 801553c:	69fa      	ldr	r2, [r7, #28]
 801553e:	440a      	add	r2, r1
 8015540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015548:	6113      	str	r3, [r2, #16]
 801554a:	e037      	b.n	80155bc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	699a      	ldr	r2, [r3, #24]
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	68db      	ldr	r3, [r3, #12]
 8015554:	4413      	add	r3, r2
 8015556:	1e5a      	subs	r2, r3, #1
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015560:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	68db      	ldr	r3, [r3, #12]
 8015566:	8afa      	ldrh	r2, [r7, #22]
 8015568:	fb03 f202 	mul.w	r2, r3, r2
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015570:	69bb      	ldr	r3, [r7, #24]
 8015572:	015a      	lsls	r2, r3, #5
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	4413      	add	r3, r2
 8015578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801557c:	691a      	ldr	r2, [r3, #16]
 801557e:	8afb      	ldrh	r3, [r7, #22]
 8015580:	04d9      	lsls	r1, r3, #19
 8015582:	4b3a      	ldr	r3, [pc, #232]	; (801566c <USB_EPStartXfer+0x49c>)
 8015584:	400b      	ands	r3, r1
 8015586:	69b9      	ldr	r1, [r7, #24]
 8015588:	0148      	lsls	r0, r1, #5
 801558a:	69f9      	ldr	r1, [r7, #28]
 801558c:	4401      	add	r1, r0
 801558e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015592:	4313      	orrs	r3, r2
 8015594:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	015a      	lsls	r2, r3, #5
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	4413      	add	r3, r2
 801559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155a2:	691a      	ldr	r2, [r3, #16]
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	69db      	ldr	r3, [r3, #28]
 80155a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80155ac:	69b9      	ldr	r1, [r7, #24]
 80155ae:	0148      	lsls	r0, r1, #5
 80155b0:	69f9      	ldr	r1, [r7, #28]
 80155b2:	4401      	add	r1, r0
 80155b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80155b8:	4313      	orrs	r3, r2
 80155ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80155bc:	79fb      	ldrb	r3, [r7, #7]
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d10d      	bne.n	80155de <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	691b      	ldr	r3, [r3, #16]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d009      	beq.n	80155de <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	6919      	ldr	r1, [r3, #16]
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	015a      	lsls	r2, r3, #5
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	4413      	add	r3, r2
 80155d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155da:	460a      	mov	r2, r1
 80155dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	791b      	ldrb	r3, [r3, #4]
 80155e2:	2b01      	cmp	r3, #1
 80155e4:	d128      	bne.n	8015638 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80155e6:	69fb      	ldr	r3, [r7, #28]
 80155e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d110      	bne.n	8015618 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	015a      	lsls	r2, r3, #5
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	4413      	add	r3, r2
 80155fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	69ba      	ldr	r2, [r7, #24]
 8015606:	0151      	lsls	r1, r2, #5
 8015608:	69fa      	ldr	r2, [r7, #28]
 801560a:	440a      	add	r2, r1
 801560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015614:	6013      	str	r3, [r2, #0]
 8015616:	e00f      	b.n	8015638 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	015a      	lsls	r2, r3, #5
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	4413      	add	r3, r2
 8015620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	69ba      	ldr	r2, [r7, #24]
 8015628:	0151      	lsls	r1, r2, #5
 801562a:	69fa      	ldr	r2, [r7, #28]
 801562c:	440a      	add	r2, r1
 801562e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015636:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	015a      	lsls	r2, r3, #5
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	4413      	add	r3, r2
 8015640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	69ba      	ldr	r2, [r7, #24]
 8015648:	0151      	lsls	r1, r2, #5
 801564a:	69fa      	ldr	r2, [r7, #28]
 801564c:	440a      	add	r2, r1
 801564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015652:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015658:	2300      	movs	r3, #0
}
 801565a:	4618      	mov	r0, r3
 801565c:	3720      	adds	r7, #32
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	fff80000 	.word	0xfff80000
 8015668:	e007ffff 	.word	0xe007ffff
 801566c:	1ff80000 	.word	0x1ff80000

08015670 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015670:	b480      	push	{r7}
 8015672:	b087      	sub	sp, #28
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	4613      	mov	r3, r2
 801567c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	785b      	ldrb	r3, [r3, #1]
 801568c:	2b01      	cmp	r3, #1
 801568e:	f040 80ce 	bne.w	801582e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	699b      	ldr	r3, [r3, #24]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d132      	bne.n	8015700 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	015a      	lsls	r2, r3, #5
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	4413      	add	r3, r2
 80156a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156a6:	691a      	ldr	r2, [r3, #16]
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	0159      	lsls	r1, r3, #5
 80156ac:	697b      	ldr	r3, [r7, #20]
 80156ae:	440b      	add	r3, r1
 80156b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156b4:	4619      	mov	r1, r3
 80156b6:	4b9a      	ldr	r3, [pc, #616]	; (8015920 <USB_EP0StartXfer+0x2b0>)
 80156b8:	4013      	ands	r3, r2
 80156ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	015a      	lsls	r2, r3, #5
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	4413      	add	r3, r2
 80156c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156c8:	691b      	ldr	r3, [r3, #16]
 80156ca:	693a      	ldr	r2, [r7, #16]
 80156cc:	0151      	lsls	r1, r2, #5
 80156ce:	697a      	ldr	r2, [r7, #20]
 80156d0:	440a      	add	r2, r1
 80156d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80156d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80156da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	015a      	lsls	r2, r3, #5
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	4413      	add	r3, r2
 80156e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156e8:	691a      	ldr	r2, [r3, #16]
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	0159      	lsls	r1, r3, #5
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	440b      	add	r3, r1
 80156f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156f6:	4619      	mov	r1, r3
 80156f8:	4b8a      	ldr	r3, [pc, #552]	; (8015924 <USB_EP0StartXfer+0x2b4>)
 80156fa:	4013      	ands	r3, r2
 80156fc:	610b      	str	r3, [r1, #16]
 80156fe:	e04e      	b.n	801579e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	015a      	lsls	r2, r3, #5
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	4413      	add	r3, r2
 8015708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801570c:	691a      	ldr	r2, [r3, #16]
 801570e:	693b      	ldr	r3, [r7, #16]
 8015710:	0159      	lsls	r1, r3, #5
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	440b      	add	r3, r1
 8015716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801571a:	4619      	mov	r1, r3
 801571c:	4b81      	ldr	r3, [pc, #516]	; (8015924 <USB_EP0StartXfer+0x2b4>)
 801571e:	4013      	ands	r3, r2
 8015720:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	015a      	lsls	r2, r3, #5
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	4413      	add	r3, r2
 801572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801572e:	691a      	ldr	r2, [r3, #16]
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	0159      	lsls	r1, r3, #5
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	440b      	add	r3, r1
 8015738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801573c:	4619      	mov	r1, r3
 801573e:	4b78      	ldr	r3, [pc, #480]	; (8015920 <USB_EP0StartXfer+0x2b0>)
 8015740:	4013      	ands	r3, r2
 8015742:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	699a      	ldr	r2, [r3, #24]
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	68db      	ldr	r3, [r3, #12]
 801574c:	429a      	cmp	r2, r3
 801574e:	d903      	bls.n	8015758 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	68da      	ldr	r2, [r3, #12]
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	015a      	lsls	r2, r3, #5
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	4413      	add	r3, r2
 8015760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015764:	691b      	ldr	r3, [r3, #16]
 8015766:	693a      	ldr	r2, [r7, #16]
 8015768:	0151      	lsls	r1, r2, #5
 801576a:	697a      	ldr	r2, [r7, #20]
 801576c:	440a      	add	r2, r1
 801576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	015a      	lsls	r2, r3, #5
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	4413      	add	r3, r2
 8015780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015784:	691a      	ldr	r2, [r3, #16]
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	699b      	ldr	r3, [r3, #24]
 801578a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801578e:	6939      	ldr	r1, [r7, #16]
 8015790:	0148      	lsls	r0, r1, #5
 8015792:	6979      	ldr	r1, [r7, #20]
 8015794:	4401      	add	r1, r0
 8015796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801579a:	4313      	orrs	r3, r2
 801579c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801579e:	79fb      	ldrb	r3, [r7, #7]
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d11e      	bne.n	80157e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	695b      	ldr	r3, [r3, #20]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d009      	beq.n	80157c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	015a      	lsls	r2, r3, #5
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	4413      	add	r3, r2
 80157b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157b8:	461a      	mov	r2, r3
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	695b      	ldr	r3, [r3, #20]
 80157be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	015a      	lsls	r2, r3, #5
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	4413      	add	r3, r2
 80157c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	693a      	ldr	r2, [r7, #16]
 80157d0:	0151      	lsls	r1, r2, #5
 80157d2:	697a      	ldr	r2, [r7, #20]
 80157d4:	440a      	add	r2, r1
 80157d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80157de:	6013      	str	r3, [r2, #0]
 80157e0:	e097      	b.n	8015912 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80157e2:	693b      	ldr	r3, [r7, #16]
 80157e4:	015a      	lsls	r2, r3, #5
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	4413      	add	r3, r2
 80157ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	693a      	ldr	r2, [r7, #16]
 80157f2:	0151      	lsls	r1, r2, #5
 80157f4:	697a      	ldr	r2, [r7, #20]
 80157f6:	440a      	add	r2, r1
 80157f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015800:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	699b      	ldr	r3, [r3, #24]
 8015806:	2b00      	cmp	r3, #0
 8015808:	f000 8083 	beq.w	8015912 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	f003 030f 	and.w	r3, r3, #15
 801581c:	2101      	movs	r1, #1
 801581e:	fa01 f303 	lsl.w	r3, r1, r3
 8015822:	6979      	ldr	r1, [r7, #20]
 8015824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015828:	4313      	orrs	r3, r2
 801582a:	634b      	str	r3, [r1, #52]	; 0x34
 801582c:	e071      	b.n	8015912 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	015a      	lsls	r2, r3, #5
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	4413      	add	r3, r2
 8015836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801583a:	691a      	ldr	r2, [r3, #16]
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	0159      	lsls	r1, r3, #5
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	440b      	add	r3, r1
 8015844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015848:	4619      	mov	r1, r3
 801584a:	4b36      	ldr	r3, [pc, #216]	; (8015924 <USB_EP0StartXfer+0x2b4>)
 801584c:	4013      	ands	r3, r2
 801584e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	015a      	lsls	r2, r3, #5
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	4413      	add	r3, r2
 8015858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801585c:	691a      	ldr	r2, [r3, #16]
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	0159      	lsls	r1, r3, #5
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	440b      	add	r3, r1
 8015866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801586a:	4619      	mov	r1, r3
 801586c:	4b2c      	ldr	r3, [pc, #176]	; (8015920 <USB_EP0StartXfer+0x2b0>)
 801586e:	4013      	ands	r3, r2
 8015870:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	699b      	ldr	r3, [r3, #24]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d003      	beq.n	8015882 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	68da      	ldr	r2, [r3, #12]
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	68da      	ldr	r2, [r3, #12]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801588a:	693b      	ldr	r3, [r7, #16]
 801588c:	015a      	lsls	r2, r3, #5
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	4413      	add	r3, r2
 8015892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015896:	691b      	ldr	r3, [r3, #16]
 8015898:	693a      	ldr	r2, [r7, #16]
 801589a:	0151      	lsls	r1, r2, #5
 801589c:	697a      	ldr	r2, [r7, #20]
 801589e:	440a      	add	r2, r1
 80158a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80158a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80158a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	015a      	lsls	r2, r3, #5
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	4413      	add	r3, r2
 80158b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158b6:	691a      	ldr	r2, [r3, #16]
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	69db      	ldr	r3, [r3, #28]
 80158bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80158c0:	6939      	ldr	r1, [r7, #16]
 80158c2:	0148      	lsls	r0, r1, #5
 80158c4:	6979      	ldr	r1, [r7, #20]
 80158c6:	4401      	add	r1, r0
 80158c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80158cc:	4313      	orrs	r3, r2
 80158ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80158d0:	79fb      	ldrb	r3, [r7, #7]
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d10d      	bne.n	80158f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	691b      	ldr	r3, [r3, #16]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d009      	beq.n	80158f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	6919      	ldr	r1, [r3, #16]
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	015a      	lsls	r2, r3, #5
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	4413      	add	r3, r2
 80158ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158ee:	460a      	mov	r2, r1
 80158f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	015a      	lsls	r2, r3, #5
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	4413      	add	r3, r2
 80158fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	693a      	ldr	r2, [r7, #16]
 8015902:	0151      	lsls	r1, r2, #5
 8015904:	697a      	ldr	r2, [r7, #20]
 8015906:	440a      	add	r2, r1
 8015908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801590c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015910:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015912:	2300      	movs	r3, #0
}
 8015914:	4618      	mov	r0, r3
 8015916:	371c      	adds	r7, #28
 8015918:	46bd      	mov	sp, r7
 801591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591e:	4770      	bx	lr
 8015920:	e007ffff 	.word	0xe007ffff
 8015924:	fff80000 	.word	0xfff80000

08015928 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015928:	b480      	push	{r7}
 801592a:	b087      	sub	sp, #28
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015932:	2300      	movs	r3, #0
 8015934:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015936:	2300      	movs	r3, #0
 8015938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	785b      	ldrb	r3, [r3, #1]
 8015942:	2b01      	cmp	r3, #1
 8015944:	d14a      	bne.n	80159dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	015a      	lsls	r2, r3, #5
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	4413      	add	r3, r2
 8015950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801595a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801595e:	f040 8086 	bne.w	8015a6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	015a      	lsls	r2, r3, #5
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	4413      	add	r3, r2
 801596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	683a      	ldr	r2, [r7, #0]
 8015974:	7812      	ldrb	r2, [r2, #0]
 8015976:	0151      	lsls	r1, r2, #5
 8015978:	693a      	ldr	r2, [r7, #16]
 801597a:	440a      	add	r2, r1
 801597c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015984:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	015a      	lsls	r2, r3, #5
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	4413      	add	r3, r2
 8015990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	683a      	ldr	r2, [r7, #0]
 8015998:	7812      	ldrb	r2, [r2, #0]
 801599a:	0151      	lsls	r1, r2, #5
 801599c:	693a      	ldr	r2, [r7, #16]
 801599e:	440a      	add	r2, r1
 80159a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80159a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80159a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	3301      	adds	r3, #1
 80159ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d902      	bls.n	80159c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80159ba:	2301      	movs	r3, #1
 80159bc:	75fb      	strb	r3, [r7, #23]
          break;
 80159be:	e056      	b.n	8015a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	015a      	lsls	r2, r3, #5
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	4413      	add	r3, r2
 80159ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80159d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80159d8:	d0e7      	beq.n	80159aa <USB_EPStopXfer+0x82>
 80159da:	e048      	b.n	8015a6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	015a      	lsls	r2, r3, #5
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	4413      	add	r3, r2
 80159e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80159f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80159f4:	d13b      	bne.n	8015a6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	015a      	lsls	r2, r3, #5
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	4413      	add	r3, r2
 8015a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	683a      	ldr	r2, [r7, #0]
 8015a08:	7812      	ldrb	r2, [r2, #0]
 8015a0a:	0151      	lsls	r1, r2, #5
 8015a0c:	693a      	ldr	r2, [r7, #16]
 8015a0e:	440a      	add	r2, r1
 8015a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015a18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	015a      	lsls	r2, r3, #5
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	4413      	add	r3, r2
 8015a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	683a      	ldr	r2, [r7, #0]
 8015a2c:	7812      	ldrb	r2, [r2, #0]
 8015a2e:	0151      	lsls	r1, r2, #5
 8015a30:	693a      	ldr	r2, [r7, #16]
 8015a32:	440a      	add	r2, r1
 8015a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3301      	adds	r3, #1
 8015a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	d902      	bls.n	8015a54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015a4e:	2301      	movs	r3, #1
 8015a50:	75fb      	strb	r3, [r7, #23]
          break;
 8015a52:	e00c      	b.n	8015a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	015a      	lsls	r2, r3, #5
 8015a5a:	693b      	ldr	r3, [r7, #16]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a6c:	d0e7      	beq.n	8015a3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	371c      	adds	r7, #28
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr

08015a7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b089      	sub	sp, #36	; 0x24
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	4611      	mov	r1, r2
 8015a88:	461a      	mov	r2, r3
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	71fb      	strb	r3, [r7, #7]
 8015a8e:	4613      	mov	r3, r2
 8015a90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d123      	bne.n	8015aea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015aa2:	88bb      	ldrh	r3, [r7, #4]
 8015aa4:	3303      	adds	r3, #3
 8015aa6:	089b      	lsrs	r3, r3, #2
 8015aa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015aaa:	2300      	movs	r3, #0
 8015aac:	61bb      	str	r3, [r7, #24]
 8015aae:	e018      	b.n	8015ae2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015ab0:	79fb      	ldrb	r3, [r7, #7]
 8015ab2:	031a      	lsls	r2, r3, #12
 8015ab4:	697b      	ldr	r3, [r7, #20]
 8015ab6:	4413      	add	r3, r2
 8015ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015abc:	461a      	mov	r2, r3
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015aca:	69fb      	ldr	r3, [r7, #28]
 8015acc:	3301      	adds	r3, #1
 8015ace:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015ad6:	69fb      	ldr	r3, [r7, #28]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015adc:	69bb      	ldr	r3, [r7, #24]
 8015ade:	3301      	adds	r3, #1
 8015ae0:	61bb      	str	r3, [r7, #24]
 8015ae2:	69ba      	ldr	r2, [r7, #24]
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d3e2      	bcc.n	8015ab0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015aea:	2300      	movs	r3, #0
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3724      	adds	r7, #36	; 0x24
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr

08015af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015af8:	b480      	push	{r7}
 8015afa:	b08b      	sub	sp, #44	; 0x2c
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	4613      	mov	r3, r2
 8015b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015b0e:	88fb      	ldrh	r3, [r7, #6]
 8015b10:	089b      	lsrs	r3, r3, #2
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015b16:	88fb      	ldrh	r3, [r7, #6]
 8015b18:	f003 0303 	and.w	r3, r3, #3
 8015b1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015b1e:	2300      	movs	r3, #0
 8015b20:	623b      	str	r3, [r7, #32]
 8015b22:	e014      	b.n	8015b4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8015b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b32:	3301      	adds	r3, #1
 8015b34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b38:	3301      	adds	r3, #1
 8015b3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3e:	3301      	adds	r3, #1
 8015b40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b44:	3301      	adds	r3, #1
 8015b46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015b48:	6a3b      	ldr	r3, [r7, #32]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	623b      	str	r3, [r7, #32]
 8015b4e:	6a3a      	ldr	r2, [r7, #32]
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d3e6      	bcc.n	8015b24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015b56:	8bfb      	ldrh	r3, [r7, #30]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d01e      	beq.n	8015b9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015b60:	69bb      	ldr	r3, [r7, #24]
 8015b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b66:	461a      	mov	r2, r3
 8015b68:	f107 0310 	add.w	r3, r7, #16
 8015b6c:	6812      	ldr	r2, [r2, #0]
 8015b6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015b70:	693a      	ldr	r2, [r7, #16]
 8015b72:	6a3b      	ldr	r3, [r7, #32]
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	00db      	lsls	r3, r3, #3
 8015b78:	fa22 f303 	lsr.w	r3, r2, r3
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b80:	701a      	strb	r2, [r3, #0]
      i++;
 8015b82:	6a3b      	ldr	r3, [r7, #32]
 8015b84:	3301      	adds	r3, #1
 8015b86:	623b      	str	r3, [r7, #32]
      pDest++;
 8015b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b8a:	3301      	adds	r3, #1
 8015b8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015b8e:	8bfb      	ldrh	r3, [r7, #30]
 8015b90:	3b01      	subs	r3, #1
 8015b92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015b94:	8bfb      	ldrh	r3, [r7, #30]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d1ea      	bne.n	8015b70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	372c      	adds	r7, #44	; 0x2c
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr

08015ba8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015ba8:	b480      	push	{r7}
 8015baa:	b085      	sub	sp, #20
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	785b      	ldrb	r3, [r3, #1]
 8015bc0:	2b01      	cmp	r3, #1
 8015bc2:	d12c      	bne.n	8015c1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	015a      	lsls	r2, r3, #5
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	4413      	add	r3, r2
 8015bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	db12      	blt.n	8015bfc <USB_EPSetStall+0x54>
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d00f      	beq.n	8015bfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	015a      	lsls	r2, r3, #5
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	4413      	add	r3, r2
 8015be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	68ba      	ldr	r2, [r7, #8]
 8015bec:	0151      	lsls	r1, r2, #5
 8015bee:	68fa      	ldr	r2, [r7, #12]
 8015bf0:	440a      	add	r2, r1
 8015bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015bfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	015a      	lsls	r2, r3, #5
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	4413      	add	r3, r2
 8015c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	68ba      	ldr	r2, [r7, #8]
 8015c0c:	0151      	lsls	r1, r2, #5
 8015c0e:	68fa      	ldr	r2, [r7, #12]
 8015c10:	440a      	add	r2, r1
 8015c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015c1a:	6013      	str	r3, [r2, #0]
 8015c1c:	e02b      	b.n	8015c76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015c1e:	68bb      	ldr	r3, [r7, #8]
 8015c20:	015a      	lsls	r2, r3, #5
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	4413      	add	r3, r2
 8015c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	db12      	blt.n	8015c56 <USB_EPSetStall+0xae>
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d00f      	beq.n	8015c56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	015a      	lsls	r2, r3, #5
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	4413      	add	r3, r2
 8015c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	68ba      	ldr	r2, [r7, #8]
 8015c46:	0151      	lsls	r1, r2, #5
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	440a      	add	r2, r1
 8015c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015c50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015c54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	015a      	lsls	r2, r3, #5
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	68ba      	ldr	r2, [r7, #8]
 8015c66:	0151      	lsls	r1, r2, #5
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	440a      	add	r2, r1
 8015c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015c74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015c76:	2300      	movs	r3, #0
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3714      	adds	r7, #20
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015c84:	b480      	push	{r7}
 8015c86:	b085      	sub	sp, #20
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
 8015c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	785b      	ldrb	r3, [r3, #1]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d128      	bne.n	8015cf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	015a      	lsls	r2, r3, #5
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	4413      	add	r3, r2
 8015ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	68ba      	ldr	r2, [r7, #8]
 8015cb0:	0151      	lsls	r1, r2, #5
 8015cb2:	68fa      	ldr	r2, [r7, #12]
 8015cb4:	440a      	add	r2, r1
 8015cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015cbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	791b      	ldrb	r3, [r3, #4]
 8015cc4:	2b03      	cmp	r3, #3
 8015cc6:	d003      	beq.n	8015cd0 <USB_EPClearStall+0x4c>
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	791b      	ldrb	r3, [r3, #4]
 8015ccc:	2b02      	cmp	r3, #2
 8015cce:	d138      	bne.n	8015d42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	015a      	lsls	r2, r3, #5
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	4413      	add	r3, r2
 8015cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	68ba      	ldr	r2, [r7, #8]
 8015ce0:	0151      	lsls	r1, r2, #5
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	440a      	add	r2, r1
 8015ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015cee:	6013      	str	r3, [r2, #0]
 8015cf0:	e027      	b.n	8015d42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	015a      	lsls	r2, r3, #5
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	68ba      	ldr	r2, [r7, #8]
 8015d02:	0151      	lsls	r1, r2, #5
 8015d04:	68fa      	ldr	r2, [r7, #12]
 8015d06:	440a      	add	r2, r1
 8015d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015d10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	791b      	ldrb	r3, [r3, #4]
 8015d16:	2b03      	cmp	r3, #3
 8015d18:	d003      	beq.n	8015d22 <USB_EPClearStall+0x9e>
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	791b      	ldrb	r3, [r3, #4]
 8015d1e:	2b02      	cmp	r3, #2
 8015d20:	d10f      	bne.n	8015d42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	015a      	lsls	r2, r3, #5
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	4413      	add	r3, r2
 8015d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	68ba      	ldr	r2, [r7, #8]
 8015d32:	0151      	lsls	r1, r2, #5
 8015d34:	68fa      	ldr	r2, [r7, #12]
 8015d36:	440a      	add	r2, r1
 8015d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015d40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015d42:	2300      	movs	r3, #0
}
 8015d44:	4618      	mov	r0, r3
 8015d46:	3714      	adds	r7, #20
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4e:	4770      	bx	lr

08015d50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015d50:	b480      	push	{r7}
 8015d52:	b085      	sub	sp, #20
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	460b      	mov	r3, r1
 8015d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	68fa      	ldr	r2, [r7, #12]
 8015d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015d6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8015d72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	78fb      	ldrb	r3, [r7, #3]
 8015d7e:	011b      	lsls	r3, r3, #4
 8015d80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015d84:	68f9      	ldr	r1, [r7, #12]
 8015d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015d8a:	4313      	orrs	r3, r2
 8015d8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015d8e:	2300      	movs	r3, #0
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3714      	adds	r7, #20
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr

08015d9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b085      	sub	sp, #20
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	68fa      	ldr	r2, [r7, #12]
 8015db2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015db6:	f023 0303 	bic.w	r3, r3, #3
 8015dba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	68fa      	ldr	r2, [r7, #12]
 8015dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015dca:	f023 0302 	bic.w	r3, r3, #2
 8015dce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015dd0:	2300      	movs	r3, #0
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	3714      	adds	r7, #20
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ddc:	4770      	bx	lr

08015dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015dde:	b480      	push	{r7}
 8015de0:	b085      	sub	sp, #20
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	68fa      	ldr	r2, [r7, #12]
 8015df4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015df8:	f023 0303 	bic.w	r3, r3, #3
 8015dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e04:	685b      	ldr	r3, [r3, #4]
 8015e06:	68fa      	ldr	r2, [r7, #12]
 8015e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015e0c:	f043 0302 	orr.w	r3, r3, #2
 8015e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015e12:	2300      	movs	r3, #0
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3714      	adds	r7, #20
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1e:	4770      	bx	lr

08015e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b085      	sub	sp, #20
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	695b      	ldr	r3, [r3, #20]
 8015e2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	699b      	ldr	r3, [r3, #24]
 8015e32:	68fa      	ldr	r2, [r7, #12]
 8015e34:	4013      	ands	r3, r2
 8015e36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015e38:	68fb      	ldr	r3, [r7, #12]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3714      	adds	r7, #20
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e44:	4770      	bx	lr

08015e46 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8015e46:	b480      	push	{r7}
 8015e48:	b085      	sub	sp, #20
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	6078      	str	r0, [r7, #4]
 8015e4e:	460b      	mov	r3, r1
 8015e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8015e56:	78fb      	ldrb	r3, [r7, #3]
 8015e58:	015a      	lsls	r2, r3, #5
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015e62:	689b      	ldr	r3, [r3, #8]
 8015e64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8015e66:	78fb      	ldrb	r3, [r7, #3]
 8015e68:	015a      	lsls	r2, r3, #5
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	68ba      	ldr	r2, [r7, #8]
 8015e76:	4013      	ands	r3, r2
 8015e78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015e7a:	68bb      	ldr	r3, [r7, #8]
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3714      	adds	r7, #20
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr

08015e88 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015e88:	b480      	push	{r7}
 8015e8a:	b085      	sub	sp, #20
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e9a:	699b      	ldr	r3, [r3, #24]
 8015e9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ea4:	69db      	ldr	r3, [r3, #28]
 8015ea6:	68ba      	ldr	r2, [r7, #8]
 8015ea8:	4013      	ands	r3, r2
 8015eaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	0c1b      	lsrs	r3, r3, #16
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3714      	adds	r7, #20
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eba:	4770      	bx	lr

08015ebc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b085      	sub	sp, #20
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ece:	699b      	ldr	r3, [r3, #24]
 8015ed0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ed8:	69db      	ldr	r3, [r3, #28]
 8015eda:	68ba      	ldr	r2, [r7, #8]
 8015edc:	4013      	ands	r3, r2
 8015ede:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	b29b      	uxth	r3, r3
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3714      	adds	r7, #20
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr

08015ef0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015ef0:	b480      	push	{r7}
 8015ef2:	b085      	sub	sp, #20
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	460b      	mov	r3, r1
 8015efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015f00:	78fb      	ldrb	r3, [r7, #3]
 8015f02:	015a      	lsls	r2, r3, #5
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	4413      	add	r3, r2
 8015f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f16:	695b      	ldr	r3, [r3, #20]
 8015f18:	68ba      	ldr	r2, [r7, #8]
 8015f1a:	4013      	ands	r3, r2
 8015f1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015f1e:	68bb      	ldr	r3, [r7, #8]
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3714      	adds	r7, #20
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr

08015f2c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b087      	sub	sp, #28
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	460b      	mov	r3, r1
 8015f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f42:	691b      	ldr	r3, [r3, #16]
 8015f44:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f4e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015f50:	78fb      	ldrb	r3, [r7, #3]
 8015f52:	f003 030f 	and.w	r3, r3, #15
 8015f56:	68fa      	ldr	r2, [r7, #12]
 8015f58:	fa22 f303 	lsr.w	r3, r2, r3
 8015f5c:	01db      	lsls	r3, r3, #7
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	693a      	ldr	r2, [r7, #16]
 8015f62:	4313      	orrs	r3, r2
 8015f64:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015f66:	78fb      	ldrb	r3, [r7, #3]
 8015f68:	015a      	lsls	r2, r3, #5
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	4413      	add	r3, r2
 8015f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f72:	689b      	ldr	r3, [r3, #8]
 8015f74:	693a      	ldr	r2, [r7, #16]
 8015f76:	4013      	ands	r3, r2
 8015f78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015f7a:	68bb      	ldr	r3, [r7, #8]
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	371c      	adds	r7, #28
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr

08015f88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	695b      	ldr	r3, [r3, #20]
 8015f94:	f003 0301 	and.w	r3, r3, #1
}
 8015f98:	4618      	mov	r0, r3
 8015f9a:	370c      	adds	r7, #12
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa2:	4770      	bx	lr

08015fa4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b085      	sub	sp, #20
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fb6:	681a      	ldr	r2, [r3, #0]
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	4b09      	ldr	r3, [pc, #36]	; (8015fe8 <USB_ActivateSetup+0x44>)
 8015fc2:	4013      	ands	r3, r2
 8015fc4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015fd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015fda:	2300      	movs	r3, #0
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3714      	adds	r7, #20
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr
 8015fe8:	fffff800 	.word	0xfffff800

08015fec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8015fec:	b480      	push	{r7}
 8015fee:	b087      	sub	sp, #28
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	460b      	mov	r3, r1
 8015ff6:	607a      	str	r2, [r7, #4]
 8015ff8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	333c      	adds	r3, #60	; 0x3c
 8016002:	3304      	adds	r3, #4
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	4a26      	ldr	r2, [pc, #152]	; (80160a4 <USB_EP0_OutStart+0xb8>)
 801600c:	4293      	cmp	r3, r2
 801600e:	d90a      	bls.n	8016026 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801601c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016020:	d101      	bne.n	8016026 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016022:	2300      	movs	r3, #0
 8016024:	e037      	b.n	8016096 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801602c:	461a      	mov	r2, r3
 801602e:	2300      	movs	r3, #0
 8016030:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016038:	691b      	ldr	r3, [r3, #16]
 801603a:	697a      	ldr	r2, [r7, #20]
 801603c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801604c:	691b      	ldr	r3, [r3, #16]
 801604e:	697a      	ldr	r2, [r7, #20]
 8016050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016054:	f043 0318 	orr.w	r3, r3, #24
 8016058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016060:	691b      	ldr	r3, [r3, #16]
 8016062:	697a      	ldr	r2, [r7, #20]
 8016064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016068:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801606c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801606e:	7afb      	ldrb	r3, [r7, #11]
 8016070:	2b01      	cmp	r3, #1
 8016072:	d10f      	bne.n	8016094 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801607a:	461a      	mov	r2, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	697a      	ldr	r2, [r7, #20]
 801608a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801608e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8016092:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016094:	2300      	movs	r3, #0
}
 8016096:	4618      	mov	r0, r3
 8016098:	371c      	adds	r7, #28
 801609a:	46bd      	mov	sp, r7
 801609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a0:	4770      	bx	lr
 80160a2:	bf00      	nop
 80160a4:	4f54300a 	.word	0x4f54300a

080160a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80160b0:	2300      	movs	r3, #0
 80160b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	3301      	adds	r3, #1
 80160b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	4a13      	ldr	r2, [pc, #76]	; (801610c <USB_CoreReset+0x64>)
 80160be:	4293      	cmp	r3, r2
 80160c0:	d901      	bls.n	80160c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80160c2:	2303      	movs	r3, #3
 80160c4:	e01b      	b.n	80160fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	691b      	ldr	r3, [r3, #16]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	daf2      	bge.n	80160b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80160ce:	2300      	movs	r3, #0
 80160d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	691b      	ldr	r3, [r3, #16]
 80160d6:	f043 0201 	orr.w	r2, r3, #1
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	3301      	adds	r3, #1
 80160e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	4a09      	ldr	r2, [pc, #36]	; (801610c <USB_CoreReset+0x64>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	d901      	bls.n	80160f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80160ec:	2303      	movs	r3, #3
 80160ee:	e006      	b.n	80160fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	691b      	ldr	r3, [r3, #16]
 80160f4:	f003 0301 	and.w	r3, r3, #1
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d0f0      	beq.n	80160de <USB_CoreReset+0x36>

  return HAL_OK;
 80160fc:	2300      	movs	r3, #0
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3714      	adds	r7, #20
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop
 801610c:	00030d40 	.word	0x00030d40

08016110 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016110:	b084      	sub	sp, #16
 8016112:	b580      	push	{r7, lr}
 8016114:	b086      	sub	sp, #24
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
 801611a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801611e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8016122:	2300      	movs	r3, #0
 8016124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016130:	461a      	mov	r2, r3
 8016132:	2300      	movs	r3, #0
 8016134:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801613a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801614a:	2b00      	cmp	r3, #0
 801614c:	d018      	beq.n	8016180 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016150:	2b01      	cmp	r3, #1
 8016152:	d10a      	bne.n	801616a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	68fa      	ldr	r2, [r7, #12]
 801615e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016162:	f043 0304 	orr.w	r3, r3, #4
 8016166:	6013      	str	r3, [r2, #0]
 8016168:	e014      	b.n	8016194 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016178:	f023 0304 	bic.w	r3, r3, #4
 801617c:	6013      	str	r3, [r2, #0]
 801617e:	e009      	b.n	8016194 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	68fa      	ldr	r2, [r7, #12]
 801618a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801618e:	f023 0304 	bic.w	r3, r3, #4
 8016192:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016194:	2110      	movs	r1, #16
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f7fe fe14 	bl	8014dc4 <USB_FlushTxFifo>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d001      	beq.n	80161a6 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 80161a2:	2301      	movs	r3, #1
 80161a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f7fe fe40 	bl	8014e2c <USB_FlushRxFifo>
 80161ac:	4603      	mov	r3, r0
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d001      	beq.n	80161b6 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80161b2:	2301      	movs	r3, #1
 80161b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80161b6:	2300      	movs	r3, #0
 80161b8:	613b      	str	r3, [r7, #16]
 80161ba:	e015      	b.n	80161e8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	015a      	lsls	r2, r3, #5
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	4413      	add	r3, r2
 80161c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80161c8:	461a      	mov	r2, r3
 80161ca:	f04f 33ff 	mov.w	r3, #4294967295
 80161ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	015a      	lsls	r2, r3, #5
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	4413      	add	r3, r2
 80161d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80161dc:	461a      	mov	r2, r3
 80161de:	2300      	movs	r3, #0
 80161e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	3301      	adds	r3, #1
 80161e6:	613b      	str	r3, [r7, #16]
 80161e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ea:	693a      	ldr	r2, [r7, #16]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d3e5      	bcc.n	80161bc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2200      	movs	r2, #0
 80161f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f04f 32ff 	mov.w	r2, #4294967295
 80161fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00b      	beq.n	8016222 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016210:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	4a13      	ldr	r2, [pc, #76]	; (8016264 <USB_HostInit+0x154>)
 8016216:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	4a13      	ldr	r2, [pc, #76]	; (8016268 <USB_HostInit+0x158>)
 801621c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8016220:	e009      	b.n	8016236 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2280      	movs	r2, #128	; 0x80
 8016226:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	4a10      	ldr	r2, [pc, #64]	; (801626c <USB_HostInit+0x15c>)
 801622c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	4a0f      	ldr	r2, [pc, #60]	; (8016270 <USB_HostInit+0x160>)
 8016232:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8016236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016238:	2b00      	cmp	r3, #0
 801623a:	d105      	bne.n	8016248 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	699b      	ldr	r3, [r3, #24]
 8016240:	f043 0210 	orr.w	r2, r3, #16
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	699a      	ldr	r2, [r3, #24]
 801624c:	4b09      	ldr	r3, [pc, #36]	; (8016274 <USB_HostInit+0x164>)
 801624e:	4313      	orrs	r3, r2
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8016254:	7dfb      	ldrb	r3, [r7, #23]
}
 8016256:	4618      	mov	r0, r3
 8016258:	3718      	adds	r7, #24
 801625a:	46bd      	mov	sp, r7
 801625c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016260:	b004      	add	sp, #16
 8016262:	4770      	bx	lr
 8016264:	01000200 	.word	0x01000200
 8016268:	00e00300 	.word	0x00e00300
 801626c:	00600080 	.word	0x00600080
 8016270:	004000e0 	.word	0x004000e0
 8016274:	a3200008 	.word	0xa3200008

08016278 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8016278:	b480      	push	{r7}
 801627a:	b085      	sub	sp, #20
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	460b      	mov	r3, r1
 8016282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	68fa      	ldr	r2, [r7, #12]
 8016292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016296:	f023 0303 	bic.w	r3, r3, #3
 801629a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80162a2:	681a      	ldr	r2, [r3, #0]
 80162a4:	78fb      	ldrb	r3, [r7, #3]
 80162a6:	f003 0303 	and.w	r3, r3, #3
 80162aa:	68f9      	ldr	r1, [r7, #12]
 80162ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80162b0:	4313      	orrs	r3, r2
 80162b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80162b4:	78fb      	ldrb	r3, [r7, #3]
 80162b6:	2b01      	cmp	r3, #1
 80162b8:	d107      	bne.n	80162ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80162c0:	461a      	mov	r2, r3
 80162c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80162c6:	6053      	str	r3, [r2, #4]
 80162c8:	e009      	b.n	80162de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80162ca:	78fb      	ldrb	r3, [r7, #3]
 80162cc:	2b02      	cmp	r3, #2
 80162ce:	d106      	bne.n	80162de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80162d6:	461a      	mov	r2, r3
 80162d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80162dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80162de:	2300      	movs	r3, #0
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3714      	adds	r7, #20
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr

080162ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80162f8:	2300      	movs	r3, #0
 80162fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801630c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	68fa      	ldr	r2, [r7, #12]
 8016312:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8016316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801631a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801631c:	2064      	movs	r0, #100	; 0x64
 801631e:	f7f5 fda1 	bl	800be64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	68fa      	ldr	r2, [r7, #12]
 8016326:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801632a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801632e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8016330:	200a      	movs	r0, #10
 8016332:	f7f5 fd97 	bl	800be64 <HAL_Delay>

  return HAL_OK;
 8016336:	2300      	movs	r3, #0
}
 8016338:	4618      	mov	r0, r3
 801633a:	3710      	adds	r7, #16
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8016340:	b480      	push	{r7}
 8016342:	b085      	sub	sp, #20
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	460b      	mov	r3, r1
 801634a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8016350:	2300      	movs	r3, #0
 8016352:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8016364:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801636c:	2b00      	cmp	r3, #0
 801636e:	d109      	bne.n	8016384 <USB_DriveVbus+0x44>
 8016370:	78fb      	ldrb	r3, [r7, #3]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d106      	bne.n	8016384 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	68fa      	ldr	r2, [r7, #12]
 801637a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801637e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016382:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801638e:	d109      	bne.n	80163a4 <USB_DriveVbus+0x64>
 8016390:	78fb      	ldrb	r3, [r7, #3]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d106      	bne.n	80163a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	68fa      	ldr	r2, [r7, #12]
 801639a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801639e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80163a4:	2300      	movs	r3, #0
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3714      	adds	r7, #20
 80163aa:	46bd      	mov	sp, r7
 80163ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b0:	4770      	bx	lr

080163b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80163b2:	b480      	push	{r7}
 80163b4:	b085      	sub	sp, #20
 80163b6:	af00      	add	r7, sp, #0
 80163b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80163be:	2300      	movs	r3, #0
 80163c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	0c5b      	lsrs	r3, r3, #17
 80163d0:	f003 0303 	and.w	r3, r3, #3
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3714      	adds	r7, #20
 80163d8:	46bd      	mov	sp, r7
 80163da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163de:	4770      	bx	lr

080163e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80163e0:	b480      	push	{r7}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80163f2:	689b      	ldr	r3, [r3, #8]
 80163f4:	b29b      	uxth	r3, r3
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3714      	adds	r7, #20
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
	...

08016404 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b088      	sub	sp, #32
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	4608      	mov	r0, r1
 801640e:	4611      	mov	r1, r2
 8016410:	461a      	mov	r2, r3
 8016412:	4603      	mov	r3, r0
 8016414:	70fb      	strb	r3, [r7, #3]
 8016416:	460b      	mov	r3, r1
 8016418:	70bb      	strb	r3, [r7, #2]
 801641a:	4613      	mov	r3, r2
 801641c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801641e:	2300      	movs	r3, #0
 8016420:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8016426:	78fb      	ldrb	r3, [r7, #3]
 8016428:	015a      	lsls	r2, r3, #5
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	4413      	add	r3, r2
 801642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016432:	461a      	mov	r2, r3
 8016434:	f04f 33ff 	mov.w	r3, #4294967295
 8016438:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801643a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801643e:	2b03      	cmp	r3, #3
 8016440:	d87e      	bhi.n	8016540 <USB_HC_Init+0x13c>
 8016442:	a201      	add	r2, pc, #4	; (adr r2, 8016448 <USB_HC_Init+0x44>)
 8016444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016448:	08016459 	.word	0x08016459
 801644c:	08016503 	.word	0x08016503
 8016450:	08016459 	.word	0x08016459
 8016454:	080164c5 	.word	0x080164c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8016458:	78fb      	ldrb	r3, [r7, #3]
 801645a:	015a      	lsls	r2, r3, #5
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	4413      	add	r3, r2
 8016460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016464:	461a      	mov	r2, r3
 8016466:	f240 439d 	movw	r3, #1181	; 0x49d
 801646a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801646c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8016470:	2b00      	cmp	r3, #0
 8016472:	da10      	bge.n	8016496 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8016474:	78fb      	ldrb	r3, [r7, #3]
 8016476:	015a      	lsls	r2, r3, #5
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	4413      	add	r3, r2
 801647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016480:	68db      	ldr	r3, [r3, #12]
 8016482:	78fa      	ldrb	r2, [r7, #3]
 8016484:	0151      	lsls	r1, r2, #5
 8016486:	693a      	ldr	r2, [r7, #16]
 8016488:	440a      	add	r2, r1
 801648a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016492:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8016494:	e057      	b.n	8016546 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d051      	beq.n	8016546 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80164a2:	78fb      	ldrb	r3, [r7, #3]
 80164a4:	015a      	lsls	r2, r3, #5
 80164a6:	693b      	ldr	r3, [r7, #16]
 80164a8:	4413      	add	r3, r2
 80164aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	78fa      	ldrb	r2, [r7, #3]
 80164b2:	0151      	lsls	r1, r2, #5
 80164b4:	693a      	ldr	r2, [r7, #16]
 80164b6:	440a      	add	r2, r1
 80164b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80164bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80164c0:	60d3      	str	r3, [r2, #12]
      break;
 80164c2:	e040      	b.n	8016546 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80164c4:	78fb      	ldrb	r3, [r7, #3]
 80164c6:	015a      	lsls	r2, r3, #5
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	4413      	add	r3, r2
 80164cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80164d0:	461a      	mov	r2, r3
 80164d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80164d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80164d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	da34      	bge.n	801654a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80164e0:	78fb      	ldrb	r3, [r7, #3]
 80164e2:	015a      	lsls	r2, r3, #5
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	4413      	add	r3, r2
 80164e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	78fa      	ldrb	r2, [r7, #3]
 80164f0:	0151      	lsls	r1, r2, #5
 80164f2:	693a      	ldr	r2, [r7, #16]
 80164f4:	440a      	add	r2, r1
 80164f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80164fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80164fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8016500:	e023      	b.n	801654a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8016502:	78fb      	ldrb	r3, [r7, #3]
 8016504:	015a      	lsls	r2, r3, #5
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	4413      	add	r3, r2
 801650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801650e:	461a      	mov	r2, r3
 8016510:	f240 2325 	movw	r3, #549	; 0x225
 8016514:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8016516:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801651a:	2b00      	cmp	r3, #0
 801651c:	da17      	bge.n	801654e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801651e:	78fb      	ldrb	r3, [r7, #3]
 8016520:	015a      	lsls	r2, r3, #5
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	4413      	add	r3, r2
 8016526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	78fa      	ldrb	r2, [r7, #3]
 801652e:	0151      	lsls	r1, r2, #5
 8016530:	693a      	ldr	r2, [r7, #16]
 8016532:	440a      	add	r2, r1
 8016534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016538:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801653c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801653e:	e006      	b.n	801654e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8016540:	2301      	movs	r3, #1
 8016542:	77fb      	strb	r3, [r7, #31]
      break;
 8016544:	e004      	b.n	8016550 <USB_HC_Init+0x14c>
      break;
 8016546:	bf00      	nop
 8016548:	e002      	b.n	8016550 <USB_HC_Init+0x14c>
      break;
 801654a:	bf00      	nop
 801654c:	e000      	b.n	8016550 <USB_HC_Init+0x14c>
      break;
 801654e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8016550:	78fb      	ldrb	r3, [r7, #3]
 8016552:	015a      	lsls	r2, r3, #5
 8016554:	693b      	ldr	r3, [r7, #16]
 8016556:	4413      	add	r3, r2
 8016558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	78fa      	ldrb	r2, [r7, #3]
 8016560:	0151      	lsls	r1, r2, #5
 8016562:	693a      	ldr	r2, [r7, #16]
 8016564:	440a      	add	r2, r1
 8016566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801656a:	f043 0302 	orr.w	r3, r3, #2
 801656e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016576:	699a      	ldr	r2, [r3, #24]
 8016578:	78fb      	ldrb	r3, [r7, #3]
 801657a:	f003 030f 	and.w	r3, r3, #15
 801657e:	2101      	movs	r1, #1
 8016580:	fa01 f303 	lsl.w	r3, r1, r3
 8016584:	6939      	ldr	r1, [r7, #16]
 8016586:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801658a:	4313      	orrs	r3, r2
 801658c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	699b      	ldr	r3, [r3, #24]
 8016592:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801659a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	da03      	bge.n	80165aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80165a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80165a6:	61bb      	str	r3, [r7, #24]
 80165a8:	e001      	b.n	80165ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80165aa:	2300      	movs	r3, #0
 80165ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7ff feff 	bl	80163b2 <USB_GetHostSpeed>
 80165b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80165b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80165ba:	2b02      	cmp	r3, #2
 80165bc:	d106      	bne.n	80165cc <USB_HC_Init+0x1c8>
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	2b02      	cmp	r3, #2
 80165c2:	d003      	beq.n	80165cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80165c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80165c8:	617b      	str	r3, [r7, #20]
 80165ca:	e001      	b.n	80165d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80165cc:	2300      	movs	r3, #0
 80165ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80165d0:	787b      	ldrb	r3, [r7, #1]
 80165d2:	059b      	lsls	r3, r3, #22
 80165d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80165d8:	78bb      	ldrb	r3, [r7, #2]
 80165da:	02db      	lsls	r3, r3, #11
 80165dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80165e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80165e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80165e6:	049b      	lsls	r3, r3, #18
 80165e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80165ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80165ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80165f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80165f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80165fa:	78fb      	ldrb	r3, [r7, #3]
 80165fc:	0159      	lsls	r1, r3, #5
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	440b      	add	r3, r1
 8016602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016606:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801660c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 801660e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016612:	2b03      	cmp	r3, #3
 8016614:	d003      	beq.n	801661e <USB_HC_Init+0x21a>
 8016616:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801661a:	2b01      	cmp	r3, #1
 801661c:	d10f      	bne.n	801663e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 801661e:	78fb      	ldrb	r3, [r7, #3]
 8016620:	015a      	lsls	r2, r3, #5
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	4413      	add	r3, r2
 8016626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	78fa      	ldrb	r2, [r7, #3]
 801662e:	0151      	lsls	r1, r2, #5
 8016630:	693a      	ldr	r2, [r7, #16]
 8016632:	440a      	add	r2, r1
 8016634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801663c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801663e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016640:	4618      	mov	r0, r3
 8016642:	3720      	adds	r7, #32
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}

08016648 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b08c      	sub	sp, #48	; 0x30
 801664c:	af02      	add	r7, sp, #8
 801664e:	60f8      	str	r0, [r7, #12]
 8016650:	60b9      	str	r1, [r7, #8]
 8016652:	4613      	mov	r3, r2
 8016654:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	785b      	ldrb	r3, [r3, #1]
 801665e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8016660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016664:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801666e:	2b00      	cmp	r3, #0
 8016670:	d02d      	beq.n	80166ce <USB_HC_StartXfer+0x86>
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	791b      	ldrb	r3, [r3, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d129      	bne.n	80166ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 801667a:	79fb      	ldrb	r3, [r7, #7]
 801667c:	2b01      	cmp	r3, #1
 801667e:	d117      	bne.n	80166b0 <USB_HC_StartXfer+0x68>
 8016680:	68bb      	ldr	r3, [r7, #8]
 8016682:	79db      	ldrb	r3, [r3, #7]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d003      	beq.n	8016690 <USB_HC_StartXfer+0x48>
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	79db      	ldrb	r3, [r3, #7]
 801668c:	2b02      	cmp	r3, #2
 801668e:	d10f      	bne.n	80166b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	015a      	lsls	r2, r3, #5
 8016694:	6a3b      	ldr	r3, [r7, #32]
 8016696:	4413      	add	r3, r2
 8016698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	69fa      	ldr	r2, [r7, #28]
 80166a0:	0151      	lsls	r1, r2, #5
 80166a2:	6a3a      	ldr	r2, [r7, #32]
 80166a4:	440a      	add	r2, r1
 80166a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80166aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80166ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80166b0:	79fb      	ldrb	r3, [r7, #7]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d10b      	bne.n	80166ce <USB_HC_StartXfer+0x86>
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	795b      	ldrb	r3, [r3, #5]
 80166ba:	2b01      	cmp	r3, #1
 80166bc:	d107      	bne.n	80166ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	785b      	ldrb	r3, [r3, #1]
 80166c2:	4619      	mov	r1, r3
 80166c4:	68f8      	ldr	r0, [r7, #12]
 80166c6:	f000 fa0f 	bl	8016ae8 <USB_DoPing>
      return HAL_OK;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e0f8      	b.n	80168c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	695b      	ldr	r3, [r3, #20]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d018      	beq.n	8016708 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	695b      	ldr	r3, [r3, #20]
 80166da:	68ba      	ldr	r2, [r7, #8]
 80166dc:	8912      	ldrh	r2, [r2, #8]
 80166de:	4413      	add	r3, r2
 80166e0:	3b01      	subs	r3, #1
 80166e2:	68ba      	ldr	r2, [r7, #8]
 80166e4:	8912      	ldrh	r2, [r2, #8]
 80166e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80166ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80166ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80166ee:	8b7b      	ldrh	r3, [r7, #26]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d90b      	bls.n	801670c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80166f4:	8b7b      	ldrh	r3, [r7, #26]
 80166f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80166f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166fa:	68ba      	ldr	r2, [r7, #8]
 80166fc:	8912      	ldrh	r2, [r2, #8]
 80166fe:	fb03 f202 	mul.w	r2, r3, r2
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	611a      	str	r2, [r3, #16]
 8016706:	e001      	b.n	801670c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8016708:	2301      	movs	r3, #1
 801670a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	78db      	ldrb	r3, [r3, #3]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d007      	beq.n	8016724 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8016714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016716:	68ba      	ldr	r2, [r7, #8]
 8016718:	8912      	ldrh	r2, [r2, #8]
 801671a:	fb03 f202 	mul.w	r2, r3, r2
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	611a      	str	r2, [r3, #16]
 8016722:	e003      	b.n	801672c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	695a      	ldr	r2, [r3, #20]
 8016728:	68bb      	ldr	r3, [r7, #8]
 801672a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	691b      	ldr	r3, [r3, #16]
 8016730:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8016734:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016736:	04d9      	lsls	r1, r3, #19
 8016738:	4b63      	ldr	r3, [pc, #396]	; (80168c8 <USB_HC_StartXfer+0x280>)
 801673a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801673c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	7a9b      	ldrb	r3, [r3, #10]
 8016742:	075b      	lsls	r3, r3, #29
 8016744:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8016748:	69f9      	ldr	r1, [r7, #28]
 801674a:	0148      	lsls	r0, r1, #5
 801674c:	6a39      	ldr	r1, [r7, #32]
 801674e:	4401      	add	r1, r0
 8016750:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8016754:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8016756:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8016758:	79fb      	ldrb	r3, [r7, #7]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d009      	beq.n	8016772 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	68d9      	ldr	r1, [r3, #12]
 8016762:	69fb      	ldr	r3, [r7, #28]
 8016764:	015a      	lsls	r2, r3, #5
 8016766:	6a3b      	ldr	r3, [r7, #32]
 8016768:	4413      	add	r3, r2
 801676a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801676e:	460a      	mov	r2, r1
 8016770:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8016772:	6a3b      	ldr	r3, [r7, #32]
 8016774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016778:	689b      	ldr	r3, [r3, #8]
 801677a:	f003 0301 	and.w	r3, r3, #1
 801677e:	2b00      	cmp	r3, #0
 8016780:	bf0c      	ite	eq
 8016782:	2301      	moveq	r3, #1
 8016784:	2300      	movne	r3, #0
 8016786:	b2db      	uxtb	r3, r3
 8016788:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801678a:	69fb      	ldr	r3, [r7, #28]
 801678c:	015a      	lsls	r2, r3, #5
 801678e:	6a3b      	ldr	r3, [r7, #32]
 8016790:	4413      	add	r3, r2
 8016792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	69fa      	ldr	r2, [r7, #28]
 801679a:	0151      	lsls	r1, r2, #5
 801679c:	6a3a      	ldr	r2, [r7, #32]
 801679e:	440a      	add	r2, r1
 80167a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80167a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80167a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	015a      	lsls	r2, r3, #5
 80167ae:	6a3b      	ldr	r3, [r7, #32]
 80167b0:	4413      	add	r3, r2
 80167b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	7e7b      	ldrb	r3, [r7, #25]
 80167ba:	075b      	lsls	r3, r3, #29
 80167bc:	69f9      	ldr	r1, [r7, #28]
 80167be:	0148      	lsls	r0, r1, #5
 80167c0:	6a39      	ldr	r1, [r7, #32]
 80167c2:	4401      	add	r1, r0
 80167c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80167c8:	4313      	orrs	r3, r2
 80167ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80167cc:	69fb      	ldr	r3, [r7, #28]
 80167ce:	015a      	lsls	r2, r3, #5
 80167d0:	6a3b      	ldr	r3, [r7, #32]
 80167d2:	4413      	add	r3, r2
 80167d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80167e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	78db      	ldrb	r3, [r3, #3]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d004      	beq.n	80167f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80167f2:	613b      	str	r3, [r7, #16]
 80167f4:	e003      	b.n	80167fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80167fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016804:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	015a      	lsls	r2, r3, #5
 801680a:	6a3b      	ldr	r3, [r7, #32]
 801680c:	4413      	add	r3, r2
 801680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016812:	461a      	mov	r2, r3
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8016818:	79fb      	ldrb	r3, [r7, #7]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d001      	beq.n	8016822 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 801681e:	2300      	movs	r3, #0
 8016820:	e04e      	b.n	80168c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	78db      	ldrb	r3, [r3, #3]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d149      	bne.n	80168be <USB_HC_StartXfer+0x276>
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	695b      	ldr	r3, [r3, #20]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d045      	beq.n	80168be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	79db      	ldrb	r3, [r3, #7]
 8016836:	2b03      	cmp	r3, #3
 8016838:	d830      	bhi.n	801689c <USB_HC_StartXfer+0x254>
 801683a:	a201      	add	r2, pc, #4	; (adr r2, 8016840 <USB_HC_StartXfer+0x1f8>)
 801683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016840:	08016851 	.word	0x08016851
 8016844:	08016875 	.word	0x08016875
 8016848:	08016851 	.word	0x08016851
 801684c:	08016875 	.word	0x08016875
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	695b      	ldr	r3, [r3, #20]
 8016854:	3303      	adds	r3, #3
 8016856:	089b      	lsrs	r3, r3, #2
 8016858:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801685a:	8afa      	ldrh	r2, [r7, #22]
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016860:	b29b      	uxth	r3, r3
 8016862:	429a      	cmp	r2, r3
 8016864:	d91c      	bls.n	80168a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	699b      	ldr	r3, [r3, #24]
 801686a:	f043 0220 	orr.w	r2, r3, #32
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	619a      	str	r2, [r3, #24]
        }
        break;
 8016872:	e015      	b.n	80168a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	695b      	ldr	r3, [r3, #20]
 8016878:	3303      	adds	r3, #3
 801687a:	089b      	lsrs	r3, r3, #2
 801687c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801687e:	8afa      	ldrh	r2, [r7, #22]
 8016880:	6a3b      	ldr	r3, [r7, #32]
 8016882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016886:	691b      	ldr	r3, [r3, #16]
 8016888:	b29b      	uxth	r3, r3
 801688a:	429a      	cmp	r2, r3
 801688c:	d90a      	bls.n	80168a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	699b      	ldr	r3, [r3, #24]
 8016892:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	619a      	str	r2, [r3, #24]
        }
        break;
 801689a:	e003      	b.n	80168a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 801689c:	bf00      	nop
 801689e:	e002      	b.n	80168a6 <USB_HC_StartXfer+0x25e>
        break;
 80168a0:	bf00      	nop
 80168a2:	e000      	b.n	80168a6 <USB_HC_StartXfer+0x25e>
        break;
 80168a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	68d9      	ldr	r1, [r3, #12]
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	785a      	ldrb	r2, [r3, #1]
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	695b      	ldr	r3, [r3, #20]
 80168b2:	b29b      	uxth	r3, r3
 80168b4:	2000      	movs	r0, #0
 80168b6:	9000      	str	r0, [sp, #0]
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f7ff f8df 	bl	8015a7c <USB_WritePacket>
  }

  return HAL_OK;
 80168be:	2300      	movs	r3, #0
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3728      	adds	r7, #40	; 0x28
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	1ff80000 	.word	0x1ff80000

080168cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80168cc:	b480      	push	{r7}
 80168ce:	b085      	sub	sp, #20
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80168de:	695b      	ldr	r3, [r3, #20]
 80168e0:	b29b      	uxth	r3, r3
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3714      	adds	r7, #20
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80168ee:	b480      	push	{r7}
 80168f0:	b089      	sub	sp, #36	; 0x24
 80168f2:	af00      	add	r7, sp, #0
 80168f4:	6078      	str	r0, [r7, #4]
 80168f6:	460b      	mov	r3, r1
 80168f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80168fe:	78fb      	ldrb	r3, [r7, #3]
 8016900:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8016902:	2300      	movs	r3, #0
 8016904:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8016906:	69bb      	ldr	r3, [r7, #24]
 8016908:	015a      	lsls	r2, r3, #5
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	4413      	add	r3, r2
 801690e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	0c9b      	lsrs	r3, r3, #18
 8016916:	f003 0303 	and.w	r3, r3, #3
 801691a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801691c:	69bb      	ldr	r3, [r7, #24]
 801691e:	015a      	lsls	r2, r3, #5
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	4413      	add	r3, r2
 8016924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	0fdb      	lsrs	r3, r3, #31
 801692c:	f003 0301 	and.w	r3, r3, #1
 8016930:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	689b      	ldr	r3, [r3, #8]
 8016936:	f003 0320 	and.w	r3, r3, #32
 801693a:	2b20      	cmp	r3, #32
 801693c:	d104      	bne.n	8016948 <USB_HC_Halt+0x5a>
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d101      	bne.n	8016948 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8016944:	2300      	movs	r3, #0
 8016946:	e0c8      	b.n	8016ada <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d002      	beq.n	8016954 <USB_HC_Halt+0x66>
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	2b02      	cmp	r3, #2
 8016952:	d163      	bne.n	8016a1c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	015a      	lsls	r2, r3, #5
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	4413      	add	r3, r2
 801695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	69ba      	ldr	r2, [r7, #24]
 8016964:	0151      	lsls	r1, r2, #5
 8016966:	69fa      	ldr	r2, [r7, #28]
 8016968:	440a      	add	r2, r1
 801696a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801696e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016972:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	689b      	ldr	r3, [r3, #8]
 8016978:	f003 0320 	and.w	r3, r3, #32
 801697c:	2b00      	cmp	r3, #0
 801697e:	f040 80ab 	bne.w	8016ad8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016986:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801698a:	2b00      	cmp	r3, #0
 801698c:	d133      	bne.n	80169f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801698e:	69bb      	ldr	r3, [r7, #24]
 8016990:	015a      	lsls	r2, r3, #5
 8016992:	69fb      	ldr	r3, [r7, #28]
 8016994:	4413      	add	r3, r2
 8016996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	69ba      	ldr	r2, [r7, #24]
 801699e:	0151      	lsls	r1, r2, #5
 80169a0:	69fa      	ldr	r2, [r7, #28]
 80169a2:	440a      	add	r2, r1
 80169a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80169a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80169ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	015a      	lsls	r2, r3, #5
 80169b2:	69fb      	ldr	r3, [r7, #28]
 80169b4:	4413      	add	r3, r2
 80169b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	69ba      	ldr	r2, [r7, #24]
 80169be:	0151      	lsls	r1, r2, #5
 80169c0:	69fa      	ldr	r2, [r7, #28]
 80169c2:	440a      	add	r2, r1
 80169c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80169c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80169cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	3301      	adds	r3, #1
 80169d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80169da:	d81d      	bhi.n	8016a18 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80169dc:	69bb      	ldr	r3, [r7, #24]
 80169de:	015a      	lsls	r2, r3, #5
 80169e0:	69fb      	ldr	r3, [r7, #28]
 80169e2:	4413      	add	r3, r2
 80169e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80169ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80169f2:	d0ec      	beq.n	80169ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80169f4:	e070      	b.n	8016ad8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	015a      	lsls	r2, r3, #5
 80169fa:	69fb      	ldr	r3, [r7, #28]
 80169fc:	4413      	add	r3, r2
 80169fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	69ba      	ldr	r2, [r7, #24]
 8016a06:	0151      	lsls	r1, r2, #5
 8016a08:	69fa      	ldr	r2, [r7, #28]
 8016a0a:	440a      	add	r2, r1
 8016a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016a14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8016a16:	e05f      	b.n	8016ad8 <USB_HC_Halt+0x1ea>
            break;
 8016a18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8016a1a:	e05d      	b.n	8016ad8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8016a1c:	69bb      	ldr	r3, [r7, #24]
 8016a1e:	015a      	lsls	r2, r3, #5
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	4413      	add	r3, r2
 8016a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	69ba      	ldr	r2, [r7, #24]
 8016a2c:	0151      	lsls	r1, r2, #5
 8016a2e:	69fa      	ldr	r2, [r7, #28]
 8016a30:	440a      	add	r2, r1
 8016a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016a3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016a42:	691b      	ldr	r3, [r3, #16]
 8016a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d133      	bne.n	8016ab4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8016a4c:	69bb      	ldr	r3, [r7, #24]
 8016a4e:	015a      	lsls	r2, r3, #5
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	4413      	add	r3, r2
 8016a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	69ba      	ldr	r2, [r7, #24]
 8016a5c:	0151      	lsls	r1, r2, #5
 8016a5e:	69fa      	ldr	r2, [r7, #28]
 8016a60:	440a      	add	r2, r1
 8016a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	015a      	lsls	r2, r3, #5
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	4413      	add	r3, r2
 8016a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	69ba      	ldr	r2, [r7, #24]
 8016a7c:	0151      	lsls	r1, r2, #5
 8016a7e:	69fa      	ldr	r2, [r7, #28]
 8016a80:	440a      	add	r2, r1
 8016a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016a8a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	3301      	adds	r3, #1
 8016a90:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016a98:	d81d      	bhi.n	8016ad6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	015a      	lsls	r2, r3, #5
 8016a9e:	69fb      	ldr	r3, [r7, #28]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016ab0:	d0ec      	beq.n	8016a8c <USB_HC_Halt+0x19e>
 8016ab2:	e011      	b.n	8016ad8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8016ab4:	69bb      	ldr	r3, [r7, #24]
 8016ab6:	015a      	lsls	r2, r3, #5
 8016ab8:	69fb      	ldr	r3, [r7, #28]
 8016aba:	4413      	add	r3, r2
 8016abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	69ba      	ldr	r2, [r7, #24]
 8016ac4:	0151      	lsls	r1, r2, #5
 8016ac6:	69fa      	ldr	r2, [r7, #28]
 8016ac8:	440a      	add	r2, r1
 8016aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016ad2:	6013      	str	r3, [r2, #0]
 8016ad4:	e000      	b.n	8016ad8 <USB_HC_Halt+0x1ea>
          break;
 8016ad6:	bf00      	nop
    }
  }

  return HAL_OK;
 8016ad8:	2300      	movs	r3, #0
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3724      	adds	r7, #36	; 0x24
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae4:	4770      	bx	lr
	...

08016ae8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8016ae8:	b480      	push	{r7}
 8016aea:	b087      	sub	sp, #28
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	460b      	mov	r3, r1
 8016af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8016af8:	78fb      	ldrb	r3, [r7, #3]
 8016afa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8016afc:	2301      	movs	r3, #1
 8016afe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	04da      	lsls	r2, r3, #19
 8016b04:	4b15      	ldr	r3, [pc, #84]	; (8016b5c <USB_DoPing+0x74>)
 8016b06:	4013      	ands	r3, r2
 8016b08:	693a      	ldr	r2, [r7, #16]
 8016b0a:	0151      	lsls	r1, r2, #5
 8016b0c:	697a      	ldr	r2, [r7, #20]
 8016b0e:	440a      	add	r2, r1
 8016b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8016b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016b18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	015a      	lsls	r2, r3, #5
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	4413      	add	r3, r2
 8016b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8016b2a:	68bb      	ldr	r3, [r7, #8]
 8016b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016b30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016b38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	015a      	lsls	r2, r3, #5
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	4413      	add	r3, r2
 8016b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016b46:	461a      	mov	r2, r3
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8016b4c:	2300      	movs	r3, #0
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	371c      	adds	r7, #28
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr
 8016b5a:	bf00      	nop
 8016b5c:	1ff80000 	.word	0x1ff80000

08016b60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b088      	sub	sp, #32
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8016b70:	2300      	movs	r3, #0
 8016b72:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f7fd ff6a 	bl	8014a4e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016b7a:	2110      	movs	r1, #16
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7fe f921 	bl	8014dc4 <USB_FlushTxFifo>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d001      	beq.n	8016b8c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8016b88:	2301      	movs	r3, #1
 8016b8a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f7fe f94d 	bl	8014e2c <USB_FlushRxFifo>
 8016b92:	4603      	mov	r3, r0
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d001      	beq.n	8016b9c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8016b98:	2301      	movs	r3, #1
 8016b9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	61bb      	str	r3, [r7, #24]
 8016ba0:	e01f      	b.n	8016be2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	015a      	lsls	r2, r3, #5
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	4413      	add	r3, r2
 8016baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016bb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016bc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8016bc2:	693b      	ldr	r3, [r7, #16]
 8016bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016bc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8016bca:	69bb      	ldr	r3, [r7, #24]
 8016bcc:	015a      	lsls	r2, r3, #5
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8016bdc:	69bb      	ldr	r3, [r7, #24]
 8016bde:	3301      	adds	r3, #1
 8016be0:	61bb      	str	r3, [r7, #24]
 8016be2:	69bb      	ldr	r3, [r7, #24]
 8016be4:	2b0f      	cmp	r3, #15
 8016be6:	d9dc      	bls.n	8016ba2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8016be8:	2300      	movs	r3, #0
 8016bea:	61bb      	str	r3, [r7, #24]
 8016bec:	e034      	b.n	8016c58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	015a      	lsls	r2, r3, #5
 8016bf2:	697b      	ldr	r3, [r7, #20]
 8016bf4:	4413      	add	r3, r2
 8016bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016c04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016c0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016c14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	015a      	lsls	r2, r3, #5
 8016c1a:	697b      	ldr	r3, [r7, #20]
 8016c1c:	4413      	add	r3, r2
 8016c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016c22:	461a      	mov	r2, r3
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016c34:	d80c      	bhi.n	8016c50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8016c36:	69bb      	ldr	r3, [r7, #24]
 8016c38:	015a      	lsls	r2, r3, #5
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c4c:	d0ec      	beq.n	8016c28 <USB_StopHost+0xc8>
 8016c4e:	e000      	b.n	8016c52 <USB_StopHost+0xf2>
        break;
 8016c50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	3301      	adds	r3, #1
 8016c56:	61bb      	str	r3, [r7, #24]
 8016c58:	69bb      	ldr	r3, [r7, #24]
 8016c5a:	2b0f      	cmp	r3, #15
 8016c5c:	d9c7      	bls.n	8016bee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016c64:	461a      	mov	r2, r3
 8016c66:	f04f 33ff 	mov.w	r3, #4294967295
 8016c6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8016c72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f7fd fed9 	bl	8014a2c <USB_EnableGlobalInt>

  return ret;
 8016c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3720      	adds	r7, #32
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8016c88:	4904      	ldr	r1, [pc, #16]	; (8016c9c <MX_FATFS_Init+0x18>)
 8016c8a:	4805      	ldr	r0, [pc, #20]	; (8016ca0 <MX_FATFS_Init+0x1c>)
 8016c8c:	f006 ffc2 	bl	801dc14 <FATFS_LinkDriver>
 8016c90:	4603      	mov	r3, r0
 8016c92:	461a      	mov	r2, r3
 8016c94:	4b03      	ldr	r3, [pc, #12]	; (8016ca4 <MX_FATFS_Init+0x20>)
 8016c96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8016c98:	bf00      	nop
 8016c9a:	bd80      	pop	{r7, pc}
 8016c9c:	20001764 	.word	0x20001764
 8016ca0:	08025cc4 	.word	0x08025cc4
 8016ca4:	20001760 	.word	0x20001760

08016ca8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8016ca8:	b480      	push	{r7}
 8016caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8016cac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr

08016cb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8016cc2:	f000 f888 	bl	8016dd6 <BSP_SD_IsDetected>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b01      	cmp	r3, #1
 8016cca:	d001      	beq.n	8016cd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8016ccc:	2302      	movs	r3, #2
 8016cce:	e005      	b.n	8016cdc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8016cd0:	4804      	ldr	r0, [pc, #16]	; (8016ce4 <BSP_SD_Init+0x2c>)
 8016cd2:	f7fa fae9 	bl	80112a8 <HAL_SD_Init>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8016cda:	79fb      	ldrb	r3, [r7, #7]
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	20000bd0 	.word	0x20000bd0

08016ce8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	68ba      	ldr	r2, [r7, #8]
 8016cfc:	68f9      	ldr	r1, [r7, #12]
 8016cfe:	4806      	ldr	r0, [pc, #24]	; (8016d18 <BSP_SD_ReadBlocks_DMA+0x30>)
 8016d00:	f7fa fb8a 	bl	8011418 <HAL_SD_ReadBlocks_DMA>
 8016d04:	4603      	mov	r3, r0
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d001      	beq.n	8016d0e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8016d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3718      	adds	r7, #24
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	20000bd0 	.word	0x20000bd0

08016d1c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b086      	sub	sp, #24
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	68ba      	ldr	r2, [r7, #8]
 8016d30:	68f9      	ldr	r1, [r7, #12]
 8016d32:	4806      	ldr	r0, [pc, #24]	; (8016d4c <BSP_SD_WriteBlocks_DMA+0x30>)
 8016d34:	f7fa fc52 	bl	80115dc <HAL_SD_WriteBlocks_DMA>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d001      	beq.n	8016d42 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8016d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	3718      	adds	r7, #24
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}
 8016d4c:	20000bd0 	.word	0x20000bd0

08016d50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8016d54:	4805      	ldr	r0, [pc, #20]	; (8016d6c <BSP_SD_GetCardState+0x1c>)
 8016d56:	f7fb f877 	bl	8011e48 <HAL_SD_GetCardState>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2b04      	cmp	r3, #4
 8016d5e:	bf14      	ite	ne
 8016d60:	2301      	movne	r3, #1
 8016d62:	2300      	moveq	r3, #0
 8016d64:	b2db      	uxtb	r3, r3
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	20000bd0 	.word	0x20000bd0

08016d70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b082      	sub	sp, #8
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016d78:	6879      	ldr	r1, [r7, #4]
 8016d7a:	4803      	ldr	r0, [pc, #12]	; (8016d88 <BSP_SD_GetCardInfo+0x18>)
 8016d7c:	f7fb f838 	bl	8011df0 <HAL_SD_GetCardInfo>
}
 8016d80:	bf00      	nop
 8016d82:	3708      	adds	r7, #8
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	20000bd0 	.word	0x20000bd0

08016d8c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8016d94:	f000 f818 	bl	8016dc8 <BSP_SD_AbortCallback>
}
 8016d98:	bf00      	nop
 8016d9a:	3708      	adds	r7, #8
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	bd80      	pop	{r7, pc}

08016da0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8016da8:	f000 f98c 	bl	80170c4 <BSP_SD_WriteCpltCallback>
}
 8016dac:	bf00      	nop
 8016dae:	3708      	adds	r7, #8
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8016dbc:	f000 f98e 	bl	80170dc <BSP_SD_ReadCpltCallback>
}
 8016dc0:	bf00      	nop
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	af00      	add	r7, sp, #0

}
 8016dcc:	bf00      	nop
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8016dd6:	b480      	push	{r7}
 8016dd8:	b083      	sub	sp, #12
 8016dda:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8016ddc:	2301      	movs	r3, #1
 8016dde:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8016de0:	79fb      	ldrb	r3, [r7, #7]
 8016de2:	b2db      	uxtb	r3, r3
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	370c      	adds	r7, #12
 8016de8:	46bd      	mov	sp, r7
 8016dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dee:	4770      	bx	lr

08016df0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8016df8:	f7f5 f828 	bl	800be4c <HAL_GetTick>
 8016dfc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8016dfe:	e006      	b.n	8016e0e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016e00:	f7ff ffa6 	bl	8016d50 <BSP_SD_GetCardState>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d101      	bne.n	8016e0e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	e009      	b.n	8016e22 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8016e0e:	f7f5 f81d 	bl	800be4c <HAL_GetTick>
 8016e12:	4602      	mov	r2, r0
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	1ad3      	subs	r3, r2, r3
 8016e18:	687a      	ldr	r2, [r7, #4]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d8f0      	bhi.n	8016e00 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8016e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3710      	adds	r7, #16
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
	...

08016e2c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b082      	sub	sp, #8
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	4603      	mov	r3, r0
 8016e34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016e36:	4b0b      	ldr	r3, [pc, #44]	; (8016e64 <SD_CheckStatus+0x38>)
 8016e38:	2201      	movs	r2, #1
 8016e3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8016e3c:	f7ff ff88 	bl	8016d50 <BSP_SD_GetCardState>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d107      	bne.n	8016e56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016e46:	4b07      	ldr	r3, [pc, #28]	; (8016e64 <SD_CheckStatus+0x38>)
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	f023 0301 	bic.w	r3, r3, #1
 8016e50:	b2da      	uxtb	r2, r3
 8016e52:	4b04      	ldr	r3, [pc, #16]	; (8016e64 <SD_CheckStatus+0x38>)
 8016e54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8016e56:	4b03      	ldr	r3, [pc, #12]	; (8016e64 <SD_CheckStatus+0x38>)
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	b2db      	uxtb	r3, r3
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	20000021 	.word	0x20000021

08016e68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	4603      	mov	r3, r0
 8016e70:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8016e72:	f7ff ff21 	bl	8016cb8 <BSP_SD_Init>
 8016e76:	4603      	mov	r3, r0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d107      	bne.n	8016e8c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8016e7c:	79fb      	ldrb	r3, [r7, #7]
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f7ff ffd4 	bl	8016e2c <SD_CheckStatus>
 8016e84:	4603      	mov	r3, r0
 8016e86:	461a      	mov	r2, r3
 8016e88:	4b04      	ldr	r3, [pc, #16]	; (8016e9c <SD_initialize+0x34>)
 8016e8a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8016e8c:	4b03      	ldr	r3, [pc, #12]	; (8016e9c <SD_initialize+0x34>)
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	b2db      	uxtb	r3, r3
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3708      	adds	r7, #8
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	20000021 	.word	0x20000021

08016ea0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8016eaa:	79fb      	ldrb	r3, [r7, #7]
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7ff ffbd 	bl	8016e2c <SD_CheckStatus>
 8016eb2:	4603      	mov	r3, r0
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3708      	adds	r7, #8
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60b9      	str	r1, [r7, #8]
 8016ec4:	607a      	str	r2, [r7, #4]
 8016ec6:	603b      	str	r3, [r7, #0]
 8016ec8:	4603      	mov	r3, r0
 8016eca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016ecc:	2301      	movs	r3, #1
 8016ece:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016ed0:	f247 5030 	movw	r0, #30000	; 0x7530
 8016ed4:	f7ff ff8c 	bl	8016df0 <SD_CheckStatusWithTimeout>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	da01      	bge.n	8016ee2 <SD_read+0x26>
  {
    return res;
 8016ede:	7dfb      	ldrb	r3, [r7, #23]
 8016ee0:	e03b      	b.n	8016f5a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8016ee2:	683a      	ldr	r2, [r7, #0]
 8016ee4:	6879      	ldr	r1, [r7, #4]
 8016ee6:	68b8      	ldr	r0, [r7, #8]
 8016ee8:	f7ff fefe 	bl	8016ce8 <BSP_SD_ReadBlocks_DMA>
 8016eec:	4603      	mov	r3, r0
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d132      	bne.n	8016f58 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8016ef2:	4b1c      	ldr	r3, [pc, #112]	; (8016f64 <SD_read+0xa8>)
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8016ef8:	f7f4 ffa8 	bl	800be4c <HAL_GetTick>
 8016efc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8016efe:	bf00      	nop
 8016f00:	4b18      	ldr	r3, [pc, #96]	; (8016f64 <SD_read+0xa8>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d108      	bne.n	8016f1a <SD_read+0x5e>
 8016f08:	f7f4 ffa0 	bl	800be4c <HAL_GetTick>
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	1ad3      	subs	r3, r2, r3
 8016f12:	f247 522f 	movw	r2, #29999	; 0x752f
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d9f2      	bls.n	8016f00 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8016f1a:	4b12      	ldr	r3, [pc, #72]	; (8016f64 <SD_read+0xa8>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d102      	bne.n	8016f28 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8016f22:	2301      	movs	r3, #1
 8016f24:	75fb      	strb	r3, [r7, #23]
 8016f26:	e017      	b.n	8016f58 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8016f28:	4b0e      	ldr	r3, [pc, #56]	; (8016f64 <SD_read+0xa8>)
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8016f2e:	f7f4 ff8d 	bl	800be4c <HAL_GetTick>
 8016f32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8016f34:	e007      	b.n	8016f46 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016f36:	f7ff ff0b 	bl	8016d50 <BSP_SD_GetCardState>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d102      	bne.n	8016f46 <SD_read+0x8a>
          {
            res = RES_OK;
 8016f40:	2300      	movs	r3, #0
 8016f42:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8016f44:	e008      	b.n	8016f58 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8016f46:	f7f4 ff81 	bl	800be4c <HAL_GetTick>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	f247 522f 	movw	r2, #29999	; 0x752f
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d9ee      	bls.n	8016f36 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8016f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3718      	adds	r7, #24
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}
 8016f62:	bf00      	nop
 8016f64:	2000176c 	.word	0x2000176c

08016f68 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b086      	sub	sp, #24
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60b9      	str	r1, [r7, #8]
 8016f70:	607a      	str	r2, [r7, #4]
 8016f72:	603b      	str	r3, [r7, #0]
 8016f74:	4603      	mov	r3, r0
 8016f76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016f78:	2301      	movs	r3, #1
 8016f7a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8016f7c:	4b24      	ldr	r3, [pc, #144]	; (8017010 <SD_write+0xa8>)
 8016f7e:	2200      	movs	r2, #0
 8016f80:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016f82:	f247 5030 	movw	r0, #30000	; 0x7530
 8016f86:	f7ff ff33 	bl	8016df0 <SD_CheckStatusWithTimeout>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	da01      	bge.n	8016f94 <SD_write+0x2c>
  {
    return res;
 8016f90:	7dfb      	ldrb	r3, [r7, #23]
 8016f92:	e038      	b.n	8017006 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8016f94:	683a      	ldr	r2, [r7, #0]
 8016f96:	6879      	ldr	r1, [r7, #4]
 8016f98:	68b8      	ldr	r0, [r7, #8]
 8016f9a:	f7ff febf 	bl	8016d1c <BSP_SD_WriteBlocks_DMA>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d12f      	bne.n	8017004 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8016fa4:	f7f4 ff52 	bl	800be4c <HAL_GetTick>
 8016fa8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8016faa:	bf00      	nop
 8016fac:	4b18      	ldr	r3, [pc, #96]	; (8017010 <SD_write+0xa8>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d108      	bne.n	8016fc6 <SD_write+0x5e>
 8016fb4:	f7f4 ff4a 	bl	800be4c <HAL_GetTick>
 8016fb8:	4602      	mov	r2, r0
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	1ad3      	subs	r3, r2, r3
 8016fbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8016fc2:	4293      	cmp	r3, r2
 8016fc4:	d9f2      	bls.n	8016fac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8016fc6:	4b12      	ldr	r3, [pc, #72]	; (8017010 <SD_write+0xa8>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d102      	bne.n	8016fd4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8016fce:	2301      	movs	r3, #1
 8016fd0:	75fb      	strb	r3, [r7, #23]
 8016fd2:	e017      	b.n	8017004 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8016fd4:	4b0e      	ldr	r3, [pc, #56]	; (8017010 <SD_write+0xa8>)
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8016fda:	f7f4 ff37 	bl	800be4c <HAL_GetTick>
 8016fde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8016fe0:	e007      	b.n	8016ff2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016fe2:	f7ff feb5 	bl	8016d50 <BSP_SD_GetCardState>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d102      	bne.n	8016ff2 <SD_write+0x8a>
          {
            res = RES_OK;
 8016fec:	2300      	movs	r3, #0
 8016fee:	75fb      	strb	r3, [r7, #23]
            break;
 8016ff0:	e008      	b.n	8017004 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8016ff2:	f7f4 ff2b 	bl	800be4c <HAL_GetTick>
 8016ff6:	4602      	mov	r2, r0
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	1ad3      	subs	r3, r2, r3
 8016ffc:	f247 522f 	movw	r2, #29999	; 0x752f
 8017000:	4293      	cmp	r3, r2
 8017002:	d9ee      	bls.n	8016fe2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8017004:	7dfb      	ldrb	r3, [r7, #23]
}
 8017006:	4618      	mov	r0, r3
 8017008:	3718      	adds	r7, #24
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	20001768 	.word	0x20001768

08017014 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b08c      	sub	sp, #48	; 0x30
 8017018:	af00      	add	r7, sp, #0
 801701a:	4603      	mov	r3, r0
 801701c:	603a      	str	r2, [r7, #0]
 801701e:	71fb      	strb	r3, [r7, #7]
 8017020:	460b      	mov	r3, r1
 8017022:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8017024:	2301      	movs	r3, #1
 8017026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801702a:	4b25      	ldr	r3, [pc, #148]	; (80170c0 <SD_ioctl+0xac>)
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	b2db      	uxtb	r3, r3
 8017030:	f003 0301 	and.w	r3, r3, #1
 8017034:	2b00      	cmp	r3, #0
 8017036:	d001      	beq.n	801703c <SD_ioctl+0x28>
 8017038:	2303      	movs	r3, #3
 801703a:	e03c      	b.n	80170b6 <SD_ioctl+0xa2>

  switch (cmd)
 801703c:	79bb      	ldrb	r3, [r7, #6]
 801703e:	2b03      	cmp	r3, #3
 8017040:	d834      	bhi.n	80170ac <SD_ioctl+0x98>
 8017042:	a201      	add	r2, pc, #4	; (adr r2, 8017048 <SD_ioctl+0x34>)
 8017044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017048:	08017059 	.word	0x08017059
 801704c:	08017061 	.word	0x08017061
 8017050:	08017079 	.word	0x08017079
 8017054:	08017093 	.word	0x08017093
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8017058:	2300      	movs	r3, #0
 801705a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801705e:	e028      	b.n	80170b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8017060:	f107 030c 	add.w	r3, r7, #12
 8017064:	4618      	mov	r0, r3
 8017066:	f7ff fe83 	bl	8016d70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801706a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017070:	2300      	movs	r3, #0
 8017072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017076:	e01c      	b.n	80170b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8017078:	f107 030c 	add.w	r3, r7, #12
 801707c:	4618      	mov	r0, r3
 801707e:	f7ff fe77 	bl	8016d70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8017082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017084:	b29a      	uxth	r2, r3
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801708a:	2300      	movs	r3, #0
 801708c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017090:	e00f      	b.n	80170b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8017092:	f107 030c 	add.w	r3, r7, #12
 8017096:	4618      	mov	r0, r3
 8017098:	f7ff fe6a 	bl	8016d70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801709e:	0a5a      	lsrs	r2, r3, #9
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80170a4:	2300      	movs	r3, #0
 80170a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80170aa:	e002      	b.n	80170b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80170ac:	2304      	movs	r3, #4
 80170ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80170b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3730      	adds	r7, #48	; 0x30
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	20000021 	.word	0x20000021

080170c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80170c4:	b480      	push	{r7}
 80170c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80170c8:	4b03      	ldr	r3, [pc, #12]	; (80170d8 <BSP_SD_WriteCpltCallback+0x14>)
 80170ca:	2201      	movs	r2, #1
 80170cc:	601a      	str	r2, [r3, #0]
}
 80170ce:	bf00      	nop
 80170d0:	46bd      	mov	sp, r7
 80170d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d6:	4770      	bx	lr
 80170d8:	20001768 	.word	0x20001768

080170dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80170dc:	b480      	push	{r7}
 80170de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80170e0:	4b03      	ldr	r3, [pc, #12]	; (80170f0 <BSP_SD_ReadCpltCallback+0x14>)
 80170e2:	2201      	movs	r2, #1
 80170e4:	601a      	str	r2, [r3, #0]
}
 80170e6:	bf00      	nop
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr
 80170f0:	2000176c 	.word	0x2000176c

080170f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	460b      	mov	r3, r1
 80170fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017100:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017104:	f007 fe92 	bl	801ee2c <malloc>
 8017108:	4603      	mov	r3, r0
 801710a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d109      	bne.n	8017126 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	32b0      	adds	r2, #176	; 0xb0
 801711c:	2100      	movs	r1, #0
 801711e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8017122:	2302      	movs	r3, #2
 8017124:	e0d4      	b.n	80172d0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8017126:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801712a:	2100      	movs	r1, #0
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	f008 f8e7 	bl	801f300 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	32b0      	adds	r2, #176	; 0xb0
 801713c:	68f9      	ldr	r1, [r7, #12]
 801713e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	32b0      	adds	r2, #176	; 0xb0
 801714c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	7c1b      	ldrb	r3, [r3, #16]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d138      	bne.n	80171d0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801715e:	4b5e      	ldr	r3, [pc, #376]	; (80172d8 <USBD_CDC_Init+0x1e4>)
 8017160:	7819      	ldrb	r1, [r3, #0]
 8017162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017166:	2202      	movs	r2, #2
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f007 f96e 	bl	801e44a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801716e:	4b5a      	ldr	r3, [pc, #360]	; (80172d8 <USBD_CDC_Init+0x1e4>)
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	f003 020f 	and.w	r2, r3, #15
 8017176:	6879      	ldr	r1, [r7, #4]
 8017178:	4613      	mov	r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4413      	add	r3, r2
 801717e:	009b      	lsls	r3, r3, #2
 8017180:	440b      	add	r3, r1
 8017182:	3324      	adds	r3, #36	; 0x24
 8017184:	2201      	movs	r2, #1
 8017186:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017188:	4b54      	ldr	r3, [pc, #336]	; (80172dc <USBD_CDC_Init+0x1e8>)
 801718a:	7819      	ldrb	r1, [r3, #0]
 801718c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017190:	2202      	movs	r2, #2
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f007 f959 	bl	801e44a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017198:	4b50      	ldr	r3, [pc, #320]	; (80172dc <USBD_CDC_Init+0x1e8>)
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	f003 020f 	and.w	r2, r3, #15
 80171a0:	6879      	ldr	r1, [r7, #4]
 80171a2:	4613      	mov	r3, r2
 80171a4:	009b      	lsls	r3, r3, #2
 80171a6:	4413      	add	r3, r2
 80171a8:	009b      	lsls	r3, r3, #2
 80171aa:	440b      	add	r3, r1
 80171ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80171b0:	2201      	movs	r2, #1
 80171b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80171b4:	4b4a      	ldr	r3, [pc, #296]	; (80172e0 <USBD_CDC_Init+0x1ec>)
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	f003 020f 	and.w	r2, r3, #15
 80171bc:	6879      	ldr	r1, [r7, #4]
 80171be:	4613      	mov	r3, r2
 80171c0:	009b      	lsls	r3, r3, #2
 80171c2:	4413      	add	r3, r2
 80171c4:	009b      	lsls	r3, r3, #2
 80171c6:	440b      	add	r3, r1
 80171c8:	3326      	adds	r3, #38	; 0x26
 80171ca:	2210      	movs	r2, #16
 80171cc:	801a      	strh	r2, [r3, #0]
 80171ce:	e035      	b.n	801723c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80171d0:	4b41      	ldr	r3, [pc, #260]	; (80172d8 <USBD_CDC_Init+0x1e4>)
 80171d2:	7819      	ldrb	r1, [r3, #0]
 80171d4:	2340      	movs	r3, #64	; 0x40
 80171d6:	2202      	movs	r2, #2
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f007 f936 	bl	801e44a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80171de:	4b3e      	ldr	r3, [pc, #248]	; (80172d8 <USBD_CDC_Init+0x1e4>)
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	f003 020f 	and.w	r2, r3, #15
 80171e6:	6879      	ldr	r1, [r7, #4]
 80171e8:	4613      	mov	r3, r2
 80171ea:	009b      	lsls	r3, r3, #2
 80171ec:	4413      	add	r3, r2
 80171ee:	009b      	lsls	r3, r3, #2
 80171f0:	440b      	add	r3, r1
 80171f2:	3324      	adds	r3, #36	; 0x24
 80171f4:	2201      	movs	r2, #1
 80171f6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80171f8:	4b38      	ldr	r3, [pc, #224]	; (80172dc <USBD_CDC_Init+0x1e8>)
 80171fa:	7819      	ldrb	r1, [r3, #0]
 80171fc:	2340      	movs	r3, #64	; 0x40
 80171fe:	2202      	movs	r2, #2
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f007 f922 	bl	801e44a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017206:	4b35      	ldr	r3, [pc, #212]	; (80172dc <USBD_CDC_Init+0x1e8>)
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	f003 020f 	and.w	r2, r3, #15
 801720e:	6879      	ldr	r1, [r7, #4]
 8017210:	4613      	mov	r3, r2
 8017212:	009b      	lsls	r3, r3, #2
 8017214:	4413      	add	r3, r2
 8017216:	009b      	lsls	r3, r3, #2
 8017218:	440b      	add	r3, r1
 801721a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801721e:	2201      	movs	r2, #1
 8017220:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017222:	4b2f      	ldr	r3, [pc, #188]	; (80172e0 <USBD_CDC_Init+0x1ec>)
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	f003 020f 	and.w	r2, r3, #15
 801722a:	6879      	ldr	r1, [r7, #4]
 801722c:	4613      	mov	r3, r2
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	4413      	add	r3, r2
 8017232:	009b      	lsls	r3, r3, #2
 8017234:	440b      	add	r3, r1
 8017236:	3326      	adds	r3, #38	; 0x26
 8017238:	2210      	movs	r2, #16
 801723a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801723c:	4b28      	ldr	r3, [pc, #160]	; (80172e0 <USBD_CDC_Init+0x1ec>)
 801723e:	7819      	ldrb	r1, [r3, #0]
 8017240:	2308      	movs	r3, #8
 8017242:	2203      	movs	r2, #3
 8017244:	6878      	ldr	r0, [r7, #4]
 8017246:	f007 f900 	bl	801e44a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801724a:	4b25      	ldr	r3, [pc, #148]	; (80172e0 <USBD_CDC_Init+0x1ec>)
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	f003 020f 	and.w	r2, r3, #15
 8017252:	6879      	ldr	r1, [r7, #4]
 8017254:	4613      	mov	r3, r2
 8017256:	009b      	lsls	r3, r3, #2
 8017258:	4413      	add	r3, r2
 801725a:	009b      	lsls	r3, r3, #2
 801725c:	440b      	add	r3, r1
 801725e:	3324      	adds	r3, #36	; 0x24
 8017260:	2201      	movs	r2, #1
 8017262:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2200      	movs	r2, #0
 8017268:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017272:	687a      	ldr	r2, [r7, #4]
 8017274:	33b0      	adds	r3, #176	; 0xb0
 8017276:	009b      	lsls	r3, r3, #2
 8017278:	4413      	add	r3, r2
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2200      	movs	r2, #0
 8017284:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	2200      	movs	r2, #0
 801728c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017296:	2b00      	cmp	r3, #0
 8017298:	d101      	bne.n	801729e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 801729a:	2302      	movs	r3, #2
 801729c:	e018      	b.n	80172d0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	7c1b      	ldrb	r3, [r3, #16]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d10a      	bne.n	80172bc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80172a6:	4b0d      	ldr	r3, [pc, #52]	; (80172dc <USBD_CDC_Init+0x1e8>)
 80172a8:	7819      	ldrb	r1, [r3, #0]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80172b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f007 f9b7 	bl	801e628 <USBD_LL_PrepareReceive>
 80172ba:	e008      	b.n	80172ce <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80172bc:	4b07      	ldr	r3, [pc, #28]	; (80172dc <USBD_CDC_Init+0x1e8>)
 80172be:	7819      	ldrb	r1, [r3, #0]
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80172c6:	2340      	movs	r3, #64	; 0x40
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f007 f9ad 	bl	801e628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80172ce:	2300      	movs	r3, #0
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	3710      	adds	r7, #16
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	200000ab 	.word	0x200000ab
 80172dc:	200000ac 	.word	0x200000ac
 80172e0:	200000ad 	.word	0x200000ad

080172e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
 80172ec:	460b      	mov	r3, r1
 80172ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80172f0:	4b3a      	ldr	r3, [pc, #232]	; (80173dc <USBD_CDC_DeInit+0xf8>)
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	4619      	mov	r1, r3
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f007 f8cd 	bl	801e496 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80172fc:	4b37      	ldr	r3, [pc, #220]	; (80173dc <USBD_CDC_DeInit+0xf8>)
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	f003 020f 	and.w	r2, r3, #15
 8017304:	6879      	ldr	r1, [r7, #4]
 8017306:	4613      	mov	r3, r2
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	4413      	add	r3, r2
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	440b      	add	r3, r1
 8017310:	3324      	adds	r3, #36	; 0x24
 8017312:	2200      	movs	r2, #0
 8017314:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017316:	4b32      	ldr	r3, [pc, #200]	; (80173e0 <USBD_CDC_DeInit+0xfc>)
 8017318:	781b      	ldrb	r3, [r3, #0]
 801731a:	4619      	mov	r1, r3
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f007 f8ba 	bl	801e496 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8017322:	4b2f      	ldr	r3, [pc, #188]	; (80173e0 <USBD_CDC_DeInit+0xfc>)
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	f003 020f 	and.w	r2, r3, #15
 801732a:	6879      	ldr	r1, [r7, #4]
 801732c:	4613      	mov	r3, r2
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	4413      	add	r3, r2
 8017332:	009b      	lsls	r3, r3, #2
 8017334:	440b      	add	r3, r1
 8017336:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801733a:	2200      	movs	r2, #0
 801733c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801733e:	4b29      	ldr	r3, [pc, #164]	; (80173e4 <USBD_CDC_DeInit+0x100>)
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	4619      	mov	r1, r3
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f007 f8a6 	bl	801e496 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801734a:	4b26      	ldr	r3, [pc, #152]	; (80173e4 <USBD_CDC_DeInit+0x100>)
 801734c:	781b      	ldrb	r3, [r3, #0]
 801734e:	f003 020f 	and.w	r2, r3, #15
 8017352:	6879      	ldr	r1, [r7, #4]
 8017354:	4613      	mov	r3, r2
 8017356:	009b      	lsls	r3, r3, #2
 8017358:	4413      	add	r3, r2
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	440b      	add	r3, r1
 801735e:	3324      	adds	r3, #36	; 0x24
 8017360:	2200      	movs	r2, #0
 8017362:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017364:	4b1f      	ldr	r3, [pc, #124]	; (80173e4 <USBD_CDC_DeInit+0x100>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	f003 020f 	and.w	r2, r3, #15
 801736c:	6879      	ldr	r1, [r7, #4]
 801736e:	4613      	mov	r3, r2
 8017370:	009b      	lsls	r3, r3, #2
 8017372:	4413      	add	r3, r2
 8017374:	009b      	lsls	r3, r3, #2
 8017376:	440b      	add	r3, r1
 8017378:	3326      	adds	r3, #38	; 0x26
 801737a:	2200      	movs	r2, #0
 801737c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	32b0      	adds	r2, #176	; 0xb0
 8017388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d01f      	beq.n	80173d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017396:	687a      	ldr	r2, [r7, #4]
 8017398:	33b0      	adds	r3, #176	; 0xb0
 801739a:	009b      	lsls	r3, r3, #2
 801739c:	4413      	add	r3, r2
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	32b0      	adds	r2, #176	; 0xb0
 80173ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173b2:	4618      	mov	r0, r3
 80173b4:	f007 fd42 	bl	801ee3c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	32b0      	adds	r2, #176	; 0xb0
 80173c2:	2100      	movs	r1, #0
 80173c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2200      	movs	r2, #0
 80173cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80173d0:	2300      	movs	r3, #0
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3708      	adds	r7, #8
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
 80173da:	bf00      	nop
 80173dc:	200000ab 	.word	0x200000ab
 80173e0:	200000ac 	.word	0x200000ac
 80173e4:	200000ad 	.word	0x200000ad

080173e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b086      	sub	sp, #24
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	32b0      	adds	r2, #176	; 0xb0
 80173fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017400:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017402:	2300      	movs	r3, #0
 8017404:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017406:	2300      	movs	r3, #0
 8017408:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801740a:	2300      	movs	r3, #0
 801740c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801740e:	693b      	ldr	r3, [r7, #16]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d101      	bne.n	8017418 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8017414:	2303      	movs	r3, #3
 8017416:	e0bf      	b.n	8017598 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017420:	2b00      	cmp	r3, #0
 8017422:	d050      	beq.n	80174c6 <USBD_CDC_Setup+0xde>
 8017424:	2b20      	cmp	r3, #32
 8017426:	f040 80af 	bne.w	8017588 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	88db      	ldrh	r3, [r3, #6]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d03a      	beq.n	80174a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	b25b      	sxtb	r3, r3
 8017438:	2b00      	cmp	r3, #0
 801743a:	da1b      	bge.n	8017474 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	33b0      	adds	r3, #176	; 0xb0
 8017446:	009b      	lsls	r3, r3, #2
 8017448:	4413      	add	r3, r2
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	689b      	ldr	r3, [r3, #8]
 801744e:	683a      	ldr	r2, [r7, #0]
 8017450:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8017452:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017454:	683a      	ldr	r2, [r7, #0]
 8017456:	88d2      	ldrh	r2, [r2, #6]
 8017458:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	88db      	ldrh	r3, [r3, #6]
 801745e:	2b07      	cmp	r3, #7
 8017460:	bf28      	it	cs
 8017462:	2307      	movcs	r3, #7
 8017464:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	89fa      	ldrh	r2, [r7, #14]
 801746a:	4619      	mov	r1, r3
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f001 fdad 	bl	8018fcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8017472:	e090      	b.n	8017596 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	785a      	ldrb	r2, [r3, #1]
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	88db      	ldrh	r3, [r3, #6]
 8017482:	2b3f      	cmp	r3, #63	; 0x3f
 8017484:	d803      	bhi.n	801748e <USBD_CDC_Setup+0xa6>
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	88db      	ldrh	r3, [r3, #6]
 801748a:	b2da      	uxtb	r2, r3
 801748c:	e000      	b.n	8017490 <USBD_CDC_Setup+0xa8>
 801748e:	2240      	movs	r2, #64	; 0x40
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8017496:	6939      	ldr	r1, [r7, #16]
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801749e:	461a      	mov	r2, r3
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f001 fdbf 	bl	8019024 <USBD_CtlPrepareRx>
      break;
 80174a6:	e076      	b.n	8017596 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80174ae:	687a      	ldr	r2, [r7, #4]
 80174b0:	33b0      	adds	r3, #176	; 0xb0
 80174b2:	009b      	lsls	r3, r3, #2
 80174b4:	4413      	add	r3, r2
 80174b6:	685b      	ldr	r3, [r3, #4]
 80174b8:	689b      	ldr	r3, [r3, #8]
 80174ba:	683a      	ldr	r2, [r7, #0]
 80174bc:	7850      	ldrb	r0, [r2, #1]
 80174be:	2200      	movs	r2, #0
 80174c0:	6839      	ldr	r1, [r7, #0]
 80174c2:	4798      	blx	r3
      break;
 80174c4:	e067      	b.n	8017596 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	785b      	ldrb	r3, [r3, #1]
 80174ca:	2b0b      	cmp	r3, #11
 80174cc:	d851      	bhi.n	8017572 <USBD_CDC_Setup+0x18a>
 80174ce:	a201      	add	r2, pc, #4	; (adr r2, 80174d4 <USBD_CDC_Setup+0xec>)
 80174d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174d4:	08017505 	.word	0x08017505
 80174d8:	08017581 	.word	0x08017581
 80174dc:	08017573 	.word	0x08017573
 80174e0:	08017573 	.word	0x08017573
 80174e4:	08017573 	.word	0x08017573
 80174e8:	08017573 	.word	0x08017573
 80174ec:	08017573 	.word	0x08017573
 80174f0:	08017573 	.word	0x08017573
 80174f4:	08017573 	.word	0x08017573
 80174f8:	08017573 	.word	0x08017573
 80174fc:	0801752f 	.word	0x0801752f
 8017500:	08017559 	.word	0x08017559
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801750a:	b2db      	uxtb	r3, r3
 801750c:	2b03      	cmp	r3, #3
 801750e:	d107      	bne.n	8017520 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017510:	f107 030a 	add.w	r3, r7, #10
 8017514:	2202      	movs	r2, #2
 8017516:	4619      	mov	r1, r3
 8017518:	6878      	ldr	r0, [r7, #4]
 801751a:	f001 fd57 	bl	8018fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801751e:	e032      	b.n	8017586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8017520:	6839      	ldr	r1, [r7, #0]
 8017522:	6878      	ldr	r0, [r7, #4]
 8017524:	f001 fce1 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8017528:	2303      	movs	r3, #3
 801752a:	75fb      	strb	r3, [r7, #23]
          break;
 801752c:	e02b      	b.n	8017586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017534:	b2db      	uxtb	r3, r3
 8017536:	2b03      	cmp	r3, #3
 8017538:	d107      	bne.n	801754a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801753a:	f107 030d 	add.w	r3, r7, #13
 801753e:	2201      	movs	r2, #1
 8017540:	4619      	mov	r1, r3
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	f001 fd42 	bl	8018fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017548:	e01d      	b.n	8017586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801754a:	6839      	ldr	r1, [r7, #0]
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f001 fccc 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 8017552:	2303      	movs	r3, #3
 8017554:	75fb      	strb	r3, [r7, #23]
          break;
 8017556:	e016      	b.n	8017586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801755e:	b2db      	uxtb	r3, r3
 8017560:	2b03      	cmp	r3, #3
 8017562:	d00f      	beq.n	8017584 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8017564:	6839      	ldr	r1, [r7, #0]
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f001 fcbf 	bl	8018eea <USBD_CtlError>
            ret = USBD_FAIL;
 801756c:	2303      	movs	r3, #3
 801756e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017570:	e008      	b.n	8017584 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017572:	6839      	ldr	r1, [r7, #0]
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f001 fcb8 	bl	8018eea <USBD_CtlError>
          ret = USBD_FAIL;
 801757a:	2303      	movs	r3, #3
 801757c:	75fb      	strb	r3, [r7, #23]
          break;
 801757e:	e002      	b.n	8017586 <USBD_CDC_Setup+0x19e>
          break;
 8017580:	bf00      	nop
 8017582:	e008      	b.n	8017596 <USBD_CDC_Setup+0x1ae>
          break;
 8017584:	bf00      	nop
      }
      break;
 8017586:	e006      	b.n	8017596 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8017588:	6839      	ldr	r1, [r7, #0]
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f001 fcad 	bl	8018eea <USBD_CtlError>
      ret = USBD_FAIL;
 8017590:	2303      	movs	r3, #3
 8017592:	75fb      	strb	r3, [r7, #23]
      break;
 8017594:	bf00      	nop
  }

  return (uint8_t)ret;
 8017596:	7dfb      	ldrb	r3, [r7, #23]
}
 8017598:	4618      	mov	r0, r3
 801759a:	3718      	adds	r7, #24
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	460b      	mov	r3, r1
 80175aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80175b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	32b0      	adds	r2, #176	; 0xb0
 80175be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d101      	bne.n	80175ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80175c6:	2303      	movs	r3, #3
 80175c8:	e065      	b.n	8017696 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	32b0      	adds	r2, #176	; 0xb0
 80175d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80175da:	78fb      	ldrb	r3, [r7, #3]
 80175dc:	f003 020f 	and.w	r2, r3, #15
 80175e0:	6879      	ldr	r1, [r7, #4]
 80175e2:	4613      	mov	r3, r2
 80175e4:	009b      	lsls	r3, r3, #2
 80175e6:	4413      	add	r3, r2
 80175e8:	009b      	lsls	r3, r3, #2
 80175ea:	440b      	add	r3, r1
 80175ec:	3318      	adds	r3, #24
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d02f      	beq.n	8017654 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80175f4:	78fb      	ldrb	r3, [r7, #3]
 80175f6:	f003 020f 	and.w	r2, r3, #15
 80175fa:	6879      	ldr	r1, [r7, #4]
 80175fc:	4613      	mov	r3, r2
 80175fe:	009b      	lsls	r3, r3, #2
 8017600:	4413      	add	r3, r2
 8017602:	009b      	lsls	r3, r3, #2
 8017604:	440b      	add	r3, r1
 8017606:	3318      	adds	r3, #24
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	78fb      	ldrb	r3, [r7, #3]
 801760c:	f003 010f 	and.w	r1, r3, #15
 8017610:	68f8      	ldr	r0, [r7, #12]
 8017612:	460b      	mov	r3, r1
 8017614:	00db      	lsls	r3, r3, #3
 8017616:	440b      	add	r3, r1
 8017618:	009b      	lsls	r3, r3, #2
 801761a:	4403      	add	r3, r0
 801761c:	3348      	adds	r3, #72	; 0x48
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	fbb2 f1f3 	udiv	r1, r2, r3
 8017624:	fb01 f303 	mul.w	r3, r1, r3
 8017628:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801762a:	2b00      	cmp	r3, #0
 801762c:	d112      	bne.n	8017654 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801762e:	78fb      	ldrb	r3, [r7, #3]
 8017630:	f003 020f 	and.w	r2, r3, #15
 8017634:	6879      	ldr	r1, [r7, #4]
 8017636:	4613      	mov	r3, r2
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	4413      	add	r3, r2
 801763c:	009b      	lsls	r3, r3, #2
 801763e:	440b      	add	r3, r1
 8017640:	3318      	adds	r3, #24
 8017642:	2200      	movs	r2, #0
 8017644:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017646:	78f9      	ldrb	r1, [r7, #3]
 8017648:	2300      	movs	r3, #0
 801764a:	2200      	movs	r2, #0
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f006 ffca 	bl	801e5e6 <USBD_LL_Transmit>
 8017652:	e01f      	b.n	8017694 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	2200      	movs	r2, #0
 8017658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017662:	687a      	ldr	r2, [r7, #4]
 8017664:	33b0      	adds	r3, #176	; 0xb0
 8017666:	009b      	lsls	r3, r3, #2
 8017668:	4413      	add	r3, r2
 801766a:	685b      	ldr	r3, [r3, #4]
 801766c:	691b      	ldr	r3, [r3, #16]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d010      	beq.n	8017694 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017678:	687a      	ldr	r2, [r7, #4]
 801767a:	33b0      	adds	r3, #176	; 0xb0
 801767c:	009b      	lsls	r3, r3, #2
 801767e:	4413      	add	r3, r2
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	691b      	ldr	r3, [r3, #16]
 8017684:	68ba      	ldr	r2, [r7, #8]
 8017686:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801768a:	68ba      	ldr	r2, [r7, #8]
 801768c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8017690:	78fa      	ldrb	r2, [r7, #3]
 8017692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017694:	2300      	movs	r3, #0
}
 8017696:	4618      	mov	r0, r3
 8017698:	3710      	adds	r7, #16
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}

0801769e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801769e:	b580      	push	{r7, lr}
 80176a0:	b084      	sub	sp, #16
 80176a2:	af00      	add	r7, sp, #0
 80176a4:	6078      	str	r0, [r7, #4]
 80176a6:	460b      	mov	r3, r1
 80176a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	32b0      	adds	r2, #176	; 0xb0
 80176b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	32b0      	adds	r2, #176	; 0xb0
 80176c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d101      	bne.n	80176d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80176cc:	2303      	movs	r3, #3
 80176ce:	e01a      	b.n	8017706 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80176d0:	78fb      	ldrb	r3, [r7, #3]
 80176d2:	4619      	mov	r1, r3
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f006 ffc8 	bl	801e66a <USBD_LL_GetRxDataSize>
 80176da:	4602      	mov	r2, r0
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80176e8:	687a      	ldr	r2, [r7, #4]
 80176ea:	33b0      	adds	r3, #176	; 0xb0
 80176ec:	009b      	lsls	r3, r3, #2
 80176ee:	4413      	add	r3, r2
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	68db      	ldr	r3, [r3, #12]
 80176f4:	68fa      	ldr	r2, [r7, #12]
 80176f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80176fa:	68fa      	ldr	r2, [r7, #12]
 80176fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8017700:	4611      	mov	r1, r2
 8017702:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8017704:	2300      	movs	r3, #0
}
 8017706:	4618      	mov	r0, r3
 8017708:	3710      	adds	r7, #16
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}

0801770e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801770e:	b580      	push	{r7, lr}
 8017710:	b084      	sub	sp, #16
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	32b0      	adds	r2, #176	; 0xb0
 8017720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d101      	bne.n	8017730 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801772c:	2303      	movs	r3, #3
 801772e:	e025      	b.n	801777c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	33b0      	adds	r3, #176	; 0xb0
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	4413      	add	r3, r2
 801773e:	685b      	ldr	r3, [r3, #4]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d01a      	beq.n	801777a <USBD_CDC_EP0_RxReady+0x6c>
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801774a:	2bff      	cmp	r3, #255	; 0xff
 801774c:	d015      	beq.n	801777a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	33b0      	adds	r3, #176	; 0xb0
 8017758:	009b      	lsls	r3, r3, #2
 801775a:	4413      	add	r3, r2
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	689b      	ldr	r3, [r3, #8]
 8017760:	68fa      	ldr	r2, [r7, #12]
 8017762:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8017766:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8017768:	68fa      	ldr	r2, [r7, #12]
 801776a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801776e:	b292      	uxth	r2, r2
 8017770:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	22ff      	movs	r2, #255	; 0xff
 8017776:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801777a:	2300      	movs	r3, #0
}
 801777c:	4618      	mov	r0, r3
 801777e:	3710      	adds	r7, #16
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b086      	sub	sp, #24
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801778c:	2182      	movs	r1, #130	; 0x82
 801778e:	4818      	ldr	r0, [pc, #96]	; (80177f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8017790:	f000 fd49 	bl	8018226 <USBD_GetEpDesc>
 8017794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017796:	2101      	movs	r1, #1
 8017798:	4815      	ldr	r0, [pc, #84]	; (80177f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801779a:	f000 fd44 	bl	8018226 <USBD_GetEpDesc>
 801779e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80177a0:	2181      	movs	r1, #129	; 0x81
 80177a2:	4813      	ldr	r0, [pc, #76]	; (80177f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80177a4:	f000 fd3f 	bl	8018226 <USBD_GetEpDesc>
 80177a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80177aa:	697b      	ldr	r3, [r7, #20]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d002      	beq.n	80177b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	2210      	movs	r2, #16
 80177b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d006      	beq.n	80177ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80177bc:	693b      	ldr	r3, [r7, #16]
 80177be:	2200      	movs	r2, #0
 80177c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80177c4:	711a      	strb	r2, [r3, #4]
 80177c6:	2200      	movs	r2, #0
 80177c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d006      	beq.n	80177de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2200      	movs	r2, #0
 80177d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80177d8:	711a      	strb	r2, [r3, #4]
 80177da:	2200      	movs	r2, #0
 80177dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2243      	movs	r2, #67	; 0x43
 80177e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80177e4:	4b02      	ldr	r3, [pc, #8]	; (80177f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3718      	adds	r7, #24
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	20000068 	.word	0x20000068

080177f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b086      	sub	sp, #24
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80177fc:	2182      	movs	r1, #130	; 0x82
 80177fe:	4818      	ldr	r0, [pc, #96]	; (8017860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8017800:	f000 fd11 	bl	8018226 <USBD_GetEpDesc>
 8017804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017806:	2101      	movs	r1, #1
 8017808:	4815      	ldr	r0, [pc, #84]	; (8017860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801780a:	f000 fd0c 	bl	8018226 <USBD_GetEpDesc>
 801780e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8017810:	2181      	movs	r1, #129	; 0x81
 8017812:	4813      	ldr	r0, [pc, #76]	; (8017860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8017814:	f000 fd07 	bl	8018226 <USBD_GetEpDesc>
 8017818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d002      	beq.n	8017826 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	2210      	movs	r2, #16
 8017824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d006      	beq.n	801783a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801782c:	693b      	ldr	r3, [r7, #16]
 801782e:	2200      	movs	r2, #0
 8017830:	711a      	strb	r2, [r3, #4]
 8017832:	2200      	movs	r2, #0
 8017834:	f042 0202 	orr.w	r2, r2, #2
 8017838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d006      	beq.n	801784e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	2200      	movs	r2, #0
 8017844:	711a      	strb	r2, [r3, #4]
 8017846:	2200      	movs	r2, #0
 8017848:	f042 0202 	orr.w	r2, r2, #2
 801784c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2243      	movs	r2, #67	; 0x43
 8017852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8017854:	4b02      	ldr	r3, [pc, #8]	; (8017860 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8017856:	4618      	mov	r0, r3
 8017858:	3718      	adds	r7, #24
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
 801785e:	bf00      	nop
 8017860:	20000068 	.word	0x20000068

08017864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b086      	sub	sp, #24
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801786c:	2182      	movs	r1, #130	; 0x82
 801786e:	4818      	ldr	r0, [pc, #96]	; (80178d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8017870:	f000 fcd9 	bl	8018226 <USBD_GetEpDesc>
 8017874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017876:	2101      	movs	r1, #1
 8017878:	4815      	ldr	r0, [pc, #84]	; (80178d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801787a:	f000 fcd4 	bl	8018226 <USBD_GetEpDesc>
 801787e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8017880:	2181      	movs	r1, #129	; 0x81
 8017882:	4813      	ldr	r0, [pc, #76]	; (80178d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8017884:	f000 fccf 	bl	8018226 <USBD_GetEpDesc>
 8017888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d002      	beq.n	8017896 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	2210      	movs	r2, #16
 8017894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8017896:	693b      	ldr	r3, [r7, #16]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d006      	beq.n	80178aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	2200      	movs	r2, #0
 80178a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80178a4:	711a      	strb	r2, [r3, #4]
 80178a6:	2200      	movs	r2, #0
 80178a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d006      	beq.n	80178be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	2200      	movs	r2, #0
 80178b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80178b8:	711a      	strb	r2, [r3, #4]
 80178ba:	2200      	movs	r2, #0
 80178bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2243      	movs	r2, #67	; 0x43
 80178c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80178c4:	4b02      	ldr	r3, [pc, #8]	; (80178d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	3718      	adds	r7, #24
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}
 80178ce:	bf00      	nop
 80178d0:	20000068 	.word	0x20000068

080178d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b083      	sub	sp, #12
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	220a      	movs	r2, #10
 80178e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80178e2:	4b03      	ldr	r3, [pc, #12]	; (80178f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	370c      	adds	r7, #12
 80178e8:	46bd      	mov	sp, r7
 80178ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ee:	4770      	bx	lr
 80178f0:	20000024 	.word	0x20000024

080178f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80178f4:	b480      	push	{r7}
 80178f6:	b083      	sub	sp, #12
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d101      	bne.n	8017908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8017904:	2303      	movs	r3, #3
 8017906:	e009      	b.n	801791c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801790e:	687a      	ldr	r2, [r7, #4]
 8017910:	33b0      	adds	r3, #176	; 0xb0
 8017912:	009b      	lsls	r3, r3, #2
 8017914:	4413      	add	r3, r2
 8017916:	683a      	ldr	r2, [r7, #0]
 8017918:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801791a:	2300      	movs	r3, #0
}
 801791c:	4618      	mov	r0, r3
 801791e:	370c      	adds	r7, #12
 8017920:	46bd      	mov	sp, r7
 8017922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017926:	4770      	bx	lr

08017928 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8017928:	b480      	push	{r7}
 801792a:	b087      	sub	sp, #28
 801792c:	af00      	add	r7, sp, #0
 801792e:	60f8      	str	r0, [r7, #12]
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	32b0      	adds	r2, #176	; 0xb0
 801793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017942:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d101      	bne.n	801794e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801794a:	2303      	movs	r3, #3
 801794c:	e008      	b.n	8017960 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	68ba      	ldr	r2, [r7, #8]
 8017952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	687a      	ldr	r2, [r7, #4]
 801795a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801795e:	2300      	movs	r3, #0
}
 8017960:	4618      	mov	r0, r3
 8017962:	371c      	adds	r7, #28
 8017964:	46bd      	mov	sp, r7
 8017966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796a:	4770      	bx	lr

0801796c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801796c:	b480      	push	{r7}
 801796e:	b085      	sub	sp, #20
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	32b0      	adds	r2, #176	; 0xb0
 8017980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017984:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d101      	bne.n	8017990 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801798c:	2303      	movs	r3, #3
 801798e:	e004      	b.n	801799a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	683a      	ldr	r2, [r7, #0]
 8017994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8017998:	2300      	movs	r3, #0
}
 801799a:	4618      	mov	r0, r3
 801799c:	3714      	adds	r7, #20
 801799e:	46bd      	mov	sp, r7
 80179a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a4:	4770      	bx	lr
	...

080179a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	32b0      	adds	r2, #176	; 0xb0
 80179ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80179c0:	2301      	movs	r3, #1
 80179c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d101      	bne.n	80179ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80179ca:	2303      	movs	r3, #3
 80179cc:	e025      	b.n	8017a1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d11f      	bne.n	8017a18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	2201      	movs	r2, #1
 80179dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80179e0:	4b10      	ldr	r3, [pc, #64]	; (8017a24 <USBD_CDC_TransmitPacket+0x7c>)
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	f003 020f 	and.w	r2, r3, #15
 80179e8:	68bb      	ldr	r3, [r7, #8]
 80179ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	4613      	mov	r3, r2
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	4413      	add	r3, r2
 80179f6:	009b      	lsls	r3, r3, #2
 80179f8:	4403      	add	r3, r0
 80179fa:	3318      	adds	r3, #24
 80179fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80179fe:	4b09      	ldr	r3, [pc, #36]	; (8017a24 <USBD_CDC_TransmitPacket+0x7c>)
 8017a00:	7819      	ldrb	r1, [r3, #0]
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f006 fde9 	bl	801e5e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8017a14:	2300      	movs	r3, #0
 8017a16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8017a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3710      	adds	r7, #16
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	200000ab 	.word	0x200000ab

08017a28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	32b0      	adds	r2, #176	; 0xb0
 8017a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	32b0      	adds	r2, #176	; 0xb0
 8017a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d101      	bne.n	8017a56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8017a52:	2303      	movs	r3, #3
 8017a54:	e018      	b.n	8017a88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	7c1b      	ldrb	r3, [r3, #16]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d10a      	bne.n	8017a74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017a5e:	4b0c      	ldr	r3, [pc, #48]	; (8017a90 <USBD_CDC_ReceivePacket+0x68>)
 8017a60:	7819      	ldrb	r1, [r3, #0]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f006 fddb 	bl	801e628 <USBD_LL_PrepareReceive>
 8017a72:	e008      	b.n	8017a86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017a74:	4b06      	ldr	r3, [pc, #24]	; (8017a90 <USBD_CDC_ReceivePacket+0x68>)
 8017a76:	7819      	ldrb	r1, [r3, #0]
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017a7e:	2340      	movs	r3, #64	; 0x40
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f006 fdd1 	bl	801e628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017a86:	2300      	movs	r3, #0
}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	3710      	adds	r7, #16
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	200000ac 	.word	0x200000ac

08017a94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b086      	sub	sp, #24
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	60f8      	str	r0, [r7, #12]
 8017a9c:	60b9      	str	r1, [r7, #8]
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d101      	bne.n	8017aac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017aa8:	2303      	movs	r3, #3
 8017aaa:	e01f      	b.n	8017aec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	2200      	movs	r2, #0
 8017ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	2200      	movs	r2, #0
 8017ac0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d003      	beq.n	8017ad2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	68ba      	ldr	r2, [r7, #8]
 8017ace:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	2201      	movs	r2, #1
 8017ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	79fa      	ldrb	r2, [r7, #7]
 8017ade:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017ae0:	68f8      	ldr	r0, [r7, #12]
 8017ae2:	f006 fc45 	bl	801e370 <USBD_LL_Init>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3718      	adds	r7, #24
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b084      	sub	sp, #16
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017afe:	2300      	movs	r3, #0
 8017b00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d101      	bne.n	8017b0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017b08:	2303      	movs	r3, #3
 8017b0a:	e025      	b.n	8017b58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	683a      	ldr	r2, [r7, #0]
 8017b10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	32ae      	adds	r2, #174	; 0xae
 8017b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d00f      	beq.n	8017b48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	32ae      	adds	r2, #174	; 0xae
 8017b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b38:	f107 020e 	add.w	r2, r7, #14
 8017b3c:	4610      	mov	r0, r2
 8017b3e:	4798      	blx	r3
 8017b40:	4602      	mov	r2, r0
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8017b4e:	1c5a      	adds	r2, r3, #1
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8017b56:	2300      	movs	r3, #0
}
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3710      	adds	r7, #16
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}

08017b60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b082      	sub	sp, #8
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f006 fc53 	bl	801e414 <USBD_LL_Start>
 8017b6e:	4603      	mov	r3, r0
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}

08017b78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017b78:	b480      	push	{r7}
 8017b7a:	b083      	sub	sp, #12
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017b80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	370c      	adds	r7, #12
 8017b86:	46bd      	mov	sp, r7
 8017b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8c:	4770      	bx	lr

08017b8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017b8e:	b580      	push	{r7, lr}
 8017b90:	b084      	sub	sp, #16
 8017b92:	af00      	add	r7, sp, #0
 8017b94:	6078      	str	r0, [r7, #4]
 8017b96:	460b      	mov	r3, r1
 8017b98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d009      	beq.n	8017bbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	78fa      	ldrb	r2, [r7, #3]
 8017bb2:	4611      	mov	r1, r2
 8017bb4:	6878      	ldr	r0, [r7, #4]
 8017bb6:	4798      	blx	r3
 8017bb8:	4603      	mov	r3, r0
 8017bba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}

08017bc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017bc6:	b580      	push	{r7, lr}
 8017bc8:	b084      	sub	sp, #16
 8017bca:	af00      	add	r7, sp, #0
 8017bcc:	6078      	str	r0, [r7, #4]
 8017bce:	460b      	mov	r3, r1
 8017bd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	78fa      	ldrb	r2, [r7, #3]
 8017be0:	4611      	mov	r1, r2
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	4798      	blx	r3
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d001      	beq.n	8017bf0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017bec:	2303      	movs	r3, #3
 8017bee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3710      	adds	r7, #16
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}

08017bfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017bfa:	b580      	push	{r7, lr}
 8017bfc:	b084      	sub	sp, #16
 8017bfe:	af00      	add	r7, sp, #0
 8017c00:	6078      	str	r0, [r7, #4]
 8017c02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017c0a:	6839      	ldr	r1, [r7, #0]
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f001 f932 	bl	8018e76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2201      	movs	r2, #1
 8017c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8017c20:	461a      	mov	r2, r3
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017c2e:	f003 031f 	and.w	r3, r3, #31
 8017c32:	2b02      	cmp	r3, #2
 8017c34:	d01a      	beq.n	8017c6c <USBD_LL_SetupStage+0x72>
 8017c36:	2b02      	cmp	r3, #2
 8017c38:	d822      	bhi.n	8017c80 <USBD_LL_SetupStage+0x86>
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d002      	beq.n	8017c44 <USBD_LL_SetupStage+0x4a>
 8017c3e:	2b01      	cmp	r3, #1
 8017c40:	d00a      	beq.n	8017c58 <USBD_LL_SetupStage+0x5e>
 8017c42:	e01d      	b.n	8017c80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f000 fb5f 	bl	8018310 <USBD_StdDevReq>
 8017c52:	4603      	mov	r3, r0
 8017c54:	73fb      	strb	r3, [r7, #15]
      break;
 8017c56:	e020      	b.n	8017c9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017c5e:	4619      	mov	r1, r3
 8017c60:	6878      	ldr	r0, [r7, #4]
 8017c62:	f000 fbc7 	bl	80183f4 <USBD_StdItfReq>
 8017c66:	4603      	mov	r3, r0
 8017c68:	73fb      	strb	r3, [r7, #15]
      break;
 8017c6a:	e016      	b.n	8017c9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017c72:	4619      	mov	r1, r3
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f000 fc29 	bl	80184cc <USBD_StdEPReq>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8017c7e:	e00c      	b.n	8017c9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017c86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f006 fc20 	bl	801e4d4 <USBD_LL_StallEP>
 8017c94:	4603      	mov	r3, r0
 8017c96:	73fb      	strb	r3, [r7, #15]
      break;
 8017c98:	bf00      	nop
  }

  return ret;
 8017c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	3710      	adds	r7, #16
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b086      	sub	sp, #24
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	60f8      	str	r0, [r7, #12]
 8017cac:	460b      	mov	r3, r1
 8017cae:	607a      	str	r2, [r7, #4]
 8017cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017cb6:	7afb      	ldrb	r3, [r7, #11]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d16e      	bne.n	8017d9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017cca:	2b03      	cmp	r3, #3
 8017ccc:	f040 8098 	bne.w	8017e00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017cd0:	693b      	ldr	r3, [r7, #16]
 8017cd2:	689a      	ldr	r2, [r3, #8]
 8017cd4:	693b      	ldr	r3, [r7, #16]
 8017cd6:	68db      	ldr	r3, [r3, #12]
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	d913      	bls.n	8017d04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017cdc:	693b      	ldr	r3, [r7, #16]
 8017cde:	689a      	ldr	r2, [r3, #8]
 8017ce0:	693b      	ldr	r3, [r7, #16]
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	1ad2      	subs	r2, r2, r3
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	68da      	ldr	r2, [r3, #12]
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	689b      	ldr	r3, [r3, #8]
 8017cf2:	4293      	cmp	r3, r2
 8017cf4:	bf28      	it	cs
 8017cf6:	4613      	movcs	r3, r2
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	6879      	ldr	r1, [r7, #4]
 8017cfc:	68f8      	ldr	r0, [r7, #12]
 8017cfe:	f001 f9ae 	bl	801905e <USBD_CtlContinueRx>
 8017d02:	e07d      	b.n	8017e00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017d0a:	f003 031f 	and.w	r3, r3, #31
 8017d0e:	2b02      	cmp	r3, #2
 8017d10:	d014      	beq.n	8017d3c <USBD_LL_DataOutStage+0x98>
 8017d12:	2b02      	cmp	r3, #2
 8017d14:	d81d      	bhi.n	8017d52 <USBD_LL_DataOutStage+0xae>
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d002      	beq.n	8017d20 <USBD_LL_DataOutStage+0x7c>
 8017d1a:	2b01      	cmp	r3, #1
 8017d1c:	d003      	beq.n	8017d26 <USBD_LL_DataOutStage+0x82>
 8017d1e:	e018      	b.n	8017d52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017d20:	2300      	movs	r3, #0
 8017d22:	75bb      	strb	r3, [r7, #22]
            break;
 8017d24:	e018      	b.n	8017d58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	4619      	mov	r1, r3
 8017d30:	68f8      	ldr	r0, [r7, #12]
 8017d32:	f000 fa5e 	bl	80181f2 <USBD_CoreFindIF>
 8017d36:	4603      	mov	r3, r0
 8017d38:	75bb      	strb	r3, [r7, #22]
            break;
 8017d3a:	e00d      	b.n	8017d58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8017d42:	b2db      	uxtb	r3, r3
 8017d44:	4619      	mov	r1, r3
 8017d46:	68f8      	ldr	r0, [r7, #12]
 8017d48:	f000 fa60 	bl	801820c <USBD_CoreFindEP>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	75bb      	strb	r3, [r7, #22]
            break;
 8017d50:	e002      	b.n	8017d58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017d52:	2300      	movs	r3, #0
 8017d54:	75bb      	strb	r3, [r7, #22]
            break;
 8017d56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017d58:	7dbb      	ldrb	r3, [r7, #22]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d119      	bne.n	8017d92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	2b03      	cmp	r3, #3
 8017d68:	d113      	bne.n	8017d92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017d6a:	7dba      	ldrb	r2, [r7, #22]
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	32ae      	adds	r2, #174	; 0xae
 8017d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d74:	691b      	ldr	r3, [r3, #16]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d00b      	beq.n	8017d92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017d7a:	7dba      	ldrb	r2, [r7, #22]
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017d82:	7dba      	ldrb	r2, [r7, #22]
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	32ae      	adds	r2, #174	; 0xae
 8017d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d8c:	691b      	ldr	r3, [r3, #16]
 8017d8e:	68f8      	ldr	r0, [r7, #12]
 8017d90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017d92:	68f8      	ldr	r0, [r7, #12]
 8017d94:	f001 f974 	bl	8019080 <USBD_CtlSendStatus>
 8017d98:	e032      	b.n	8017e00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017d9a:	7afb      	ldrb	r3, [r7, #11]
 8017d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017da0:	b2db      	uxtb	r3, r3
 8017da2:	4619      	mov	r1, r3
 8017da4:	68f8      	ldr	r0, [r7, #12]
 8017da6:	f000 fa31 	bl	801820c <USBD_CoreFindEP>
 8017daa:	4603      	mov	r3, r0
 8017dac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017dae:	7dbb      	ldrb	r3, [r7, #22]
 8017db0:	2bff      	cmp	r3, #255	; 0xff
 8017db2:	d025      	beq.n	8017e00 <USBD_LL_DataOutStage+0x15c>
 8017db4:	7dbb      	ldrb	r3, [r7, #22]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d122      	bne.n	8017e00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dc0:	b2db      	uxtb	r3, r3
 8017dc2:	2b03      	cmp	r3, #3
 8017dc4:	d117      	bne.n	8017df6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017dc6:	7dba      	ldrb	r2, [r7, #22]
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	32ae      	adds	r2, #174	; 0xae
 8017dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dd0:	699b      	ldr	r3, [r3, #24]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d00f      	beq.n	8017df6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017dd6:	7dba      	ldrb	r2, [r7, #22]
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017dde:	7dba      	ldrb	r2, [r7, #22]
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	32ae      	adds	r2, #174	; 0xae
 8017de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017de8:	699b      	ldr	r3, [r3, #24]
 8017dea:	7afa      	ldrb	r2, [r7, #11]
 8017dec:	4611      	mov	r1, r2
 8017dee:	68f8      	ldr	r0, [r7, #12]
 8017df0:	4798      	blx	r3
 8017df2:	4603      	mov	r3, r0
 8017df4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017df6:	7dfb      	ldrb	r3, [r7, #23]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d001      	beq.n	8017e00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017dfc:	7dfb      	ldrb	r3, [r7, #23]
 8017dfe:	e000      	b.n	8017e02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017e00:	2300      	movs	r3, #0
}
 8017e02:	4618      	mov	r0, r3
 8017e04:	3718      	adds	r7, #24
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}

08017e0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017e0a:	b580      	push	{r7, lr}
 8017e0c:	b086      	sub	sp, #24
 8017e0e:	af00      	add	r7, sp, #0
 8017e10:	60f8      	str	r0, [r7, #12]
 8017e12:	460b      	mov	r3, r1
 8017e14:	607a      	str	r2, [r7, #4]
 8017e16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017e18:	7afb      	ldrb	r3, [r7, #11]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d16f      	bne.n	8017efe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	3314      	adds	r3, #20
 8017e22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017e2a:	2b02      	cmp	r3, #2
 8017e2c:	d15a      	bne.n	8017ee4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017e2e:	693b      	ldr	r3, [r7, #16]
 8017e30:	689a      	ldr	r2, [r3, #8]
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	68db      	ldr	r3, [r3, #12]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d914      	bls.n	8017e64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	689a      	ldr	r2, [r3, #8]
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	68db      	ldr	r3, [r3, #12]
 8017e42:	1ad2      	subs	r2, r2, r3
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017e48:	693b      	ldr	r3, [r7, #16]
 8017e4a:	689b      	ldr	r3, [r3, #8]
 8017e4c:	461a      	mov	r2, r3
 8017e4e:	6879      	ldr	r1, [r7, #4]
 8017e50:	68f8      	ldr	r0, [r7, #12]
 8017e52:	f001 f8d6 	bl	8019002 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017e56:	2300      	movs	r3, #0
 8017e58:	2200      	movs	r2, #0
 8017e5a:	2100      	movs	r1, #0
 8017e5c:	68f8      	ldr	r0, [r7, #12]
 8017e5e:	f006 fbe3 	bl	801e628 <USBD_LL_PrepareReceive>
 8017e62:	e03f      	b.n	8017ee4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	68da      	ldr	r2, [r3, #12]
 8017e68:	693b      	ldr	r3, [r7, #16]
 8017e6a:	689b      	ldr	r3, [r3, #8]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d11c      	bne.n	8017eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017e70:	693b      	ldr	r3, [r7, #16]
 8017e72:	685a      	ldr	r2, [r3, #4]
 8017e74:	693b      	ldr	r3, [r7, #16]
 8017e76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d316      	bcc.n	8017eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	685a      	ldr	r2, [r3, #4]
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d20f      	bcs.n	8017eaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	68f8      	ldr	r0, [r7, #12]
 8017e90:	f001 f8b7 	bl	8019002 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	2200      	movs	r2, #0
 8017e98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	2100      	movs	r1, #0
 8017ea2:	68f8      	ldr	r0, [r7, #12]
 8017ea4:	f006 fbc0 	bl	801e628 <USBD_LL_PrepareReceive>
 8017ea8:	e01c      	b.n	8017ee4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017eb0:	b2db      	uxtb	r3, r3
 8017eb2:	2b03      	cmp	r3, #3
 8017eb4:	d10f      	bne.n	8017ed6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ebc:	68db      	ldr	r3, [r3, #12]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d009      	beq.n	8017ed6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	68f8      	ldr	r0, [r7, #12]
 8017ed4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017ed6:	2180      	movs	r1, #128	; 0x80
 8017ed8:	68f8      	ldr	r0, [r7, #12]
 8017eda:	f006 fafb 	bl	801e4d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017ede:	68f8      	ldr	r0, [r7, #12]
 8017ee0:	f001 f8e1 	bl	80190a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d03a      	beq.n	8017f64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017eee:	68f8      	ldr	r0, [r7, #12]
 8017ef0:	f7ff fe42 	bl	8017b78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8017efc:	e032      	b.n	8017f64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017efe:	7afb      	ldrb	r3, [r7, #11]
 8017f00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	4619      	mov	r1, r3
 8017f08:	68f8      	ldr	r0, [r7, #12]
 8017f0a:	f000 f97f 	bl	801820c <USBD_CoreFindEP>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017f12:	7dfb      	ldrb	r3, [r7, #23]
 8017f14:	2bff      	cmp	r3, #255	; 0xff
 8017f16:	d025      	beq.n	8017f64 <USBD_LL_DataInStage+0x15a>
 8017f18:	7dfb      	ldrb	r3, [r7, #23]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d122      	bne.n	8017f64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	2b03      	cmp	r3, #3
 8017f28:	d11c      	bne.n	8017f64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8017f2a:	7dfa      	ldrb	r2, [r7, #23]
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	32ae      	adds	r2, #174	; 0xae
 8017f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f34:	695b      	ldr	r3, [r3, #20]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d014      	beq.n	8017f64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8017f3a:	7dfa      	ldrb	r2, [r7, #23]
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8017f42:	7dfa      	ldrb	r2, [r7, #23]
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	32ae      	adds	r2, #174	; 0xae
 8017f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f4c:	695b      	ldr	r3, [r3, #20]
 8017f4e:	7afa      	ldrb	r2, [r7, #11]
 8017f50:	4611      	mov	r1, r2
 8017f52:	68f8      	ldr	r0, [r7, #12]
 8017f54:	4798      	blx	r3
 8017f56:	4603      	mov	r3, r0
 8017f58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8017f5a:	7dbb      	ldrb	r3, [r7, #22]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d001      	beq.n	8017f64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8017f60:	7dbb      	ldrb	r3, [r7, #22]
 8017f62:	e000      	b.n	8017f66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017f64:	2300      	movs	r3, #0
}
 8017f66:	4618      	mov	r0, r3
 8017f68:	3718      	adds	r7, #24
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}

08017f6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017f6e:	b580      	push	{r7, lr}
 8017f70:	b084      	sub	sp, #16
 8017f72:	af00      	add	r7, sp, #0
 8017f74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8017f76:	2300      	movs	r3, #0
 8017f78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	2201      	movs	r2, #1
 8017f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	2200      	movs	r2, #0
 8017f86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	2200      	movs	r2, #0
 8017f94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d014      	beq.n	8017fd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d00e      	beq.n	8017fd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	687a      	ldr	r2, [r7, #4]
 8017fc0:	6852      	ldr	r2, [r2, #4]
 8017fc2:	b2d2      	uxtb	r2, r2
 8017fc4:	4611      	mov	r1, r2
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	4798      	blx	r3
 8017fca:	4603      	mov	r3, r0
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d001      	beq.n	8017fd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8017fd0:	2303      	movs	r3, #3
 8017fd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017fd4:	2340      	movs	r3, #64	; 0x40
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	2100      	movs	r1, #0
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f006 fa35 	bl	801e44a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2201      	movs	r2, #1
 8017fe4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	2240      	movs	r2, #64	; 0x40
 8017fec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017ff0:	2340      	movs	r3, #64	; 0x40
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	2180      	movs	r1, #128	; 0x80
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f006 fa27 	bl	801e44a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2201      	movs	r2, #1
 8018000:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2240      	movs	r2, #64	; 0x40
 8018006:	621a      	str	r2, [r3, #32]

  return ret;
 8018008:	7bfb      	ldrb	r3, [r7, #15]
}
 801800a:	4618      	mov	r0, r3
 801800c:	3710      	adds	r7, #16
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}

08018012 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018012:	b480      	push	{r7}
 8018014:	b083      	sub	sp, #12
 8018016:	af00      	add	r7, sp, #0
 8018018:	6078      	str	r0, [r7, #4]
 801801a:	460b      	mov	r3, r1
 801801c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	78fa      	ldrb	r2, [r7, #3]
 8018022:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018024:	2300      	movs	r3, #0
}
 8018026:	4618      	mov	r0, r3
 8018028:	370c      	adds	r7, #12
 801802a:	46bd      	mov	sp, r7
 801802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018030:	4770      	bx	lr

08018032 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018032:	b480      	push	{r7}
 8018034:	b083      	sub	sp, #12
 8018036:	af00      	add	r7, sp, #0
 8018038:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018040:	b2da      	uxtb	r2, r3
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2204      	movs	r2, #4
 801804c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8018050:	2300      	movs	r3, #0
}
 8018052:	4618      	mov	r0, r3
 8018054:	370c      	adds	r7, #12
 8018056:	46bd      	mov	sp, r7
 8018058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805c:	4770      	bx	lr

0801805e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801805e:	b480      	push	{r7}
 8018060:	b083      	sub	sp, #12
 8018062:	af00      	add	r7, sp, #0
 8018064:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801806c:	b2db      	uxtb	r3, r3
 801806e:	2b04      	cmp	r3, #4
 8018070:	d106      	bne.n	8018080 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018078:	b2da      	uxtb	r2, r3
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018080:	2300      	movs	r3, #0
}
 8018082:	4618      	mov	r0, r3
 8018084:	370c      	adds	r7, #12
 8018086:	46bd      	mov	sp, r7
 8018088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808c:	4770      	bx	lr

0801808e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801808e:	b580      	push	{r7, lr}
 8018090:	b082      	sub	sp, #8
 8018092:	af00      	add	r7, sp, #0
 8018094:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801809c:	b2db      	uxtb	r3, r3
 801809e:	2b03      	cmp	r3, #3
 80180a0:	d110      	bne.n	80180c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d00b      	beq.n	80180c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80180b2:	69db      	ldr	r3, [r3, #28]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d005      	beq.n	80180c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80180be:	69db      	ldr	r3, [r3, #28]
 80180c0:	6878      	ldr	r0, [r7, #4]
 80180c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80180c4:	2300      	movs	r3, #0
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3708      	adds	r7, #8
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd80      	pop	{r7, pc}

080180ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80180ce:	b580      	push	{r7, lr}
 80180d0:	b082      	sub	sp, #8
 80180d2:	af00      	add	r7, sp, #0
 80180d4:	6078      	str	r0, [r7, #4]
 80180d6:	460b      	mov	r3, r1
 80180d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	32ae      	adds	r2, #174	; 0xae
 80180e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d101      	bne.n	80180f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80180ec:	2303      	movs	r3, #3
 80180ee:	e01c      	b.n	801812a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	2b03      	cmp	r3, #3
 80180fa:	d115      	bne.n	8018128 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	32ae      	adds	r2, #174	; 0xae
 8018106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801810a:	6a1b      	ldr	r3, [r3, #32]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d00b      	beq.n	8018128 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	32ae      	adds	r2, #174	; 0xae
 801811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801811e:	6a1b      	ldr	r3, [r3, #32]
 8018120:	78fa      	ldrb	r2, [r7, #3]
 8018122:	4611      	mov	r1, r2
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018128:	2300      	movs	r3, #0
}
 801812a:	4618      	mov	r0, r3
 801812c:	3708      	adds	r7, #8
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}

08018132 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018132:	b580      	push	{r7, lr}
 8018134:	b082      	sub	sp, #8
 8018136:	af00      	add	r7, sp, #0
 8018138:	6078      	str	r0, [r7, #4]
 801813a:	460b      	mov	r3, r1
 801813c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	32ae      	adds	r2, #174	; 0xae
 8018148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d101      	bne.n	8018154 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018150:	2303      	movs	r3, #3
 8018152:	e01c      	b.n	801818e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801815a:	b2db      	uxtb	r3, r3
 801815c:	2b03      	cmp	r3, #3
 801815e:	d115      	bne.n	801818c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	32ae      	adds	r2, #174	; 0xae
 801816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018170:	2b00      	cmp	r3, #0
 8018172:	d00b      	beq.n	801818c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	32ae      	adds	r2, #174	; 0xae
 801817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018184:	78fa      	ldrb	r2, [r7, #3]
 8018186:	4611      	mov	r1, r2
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801818c:	2300      	movs	r3, #0
}
 801818e:	4618      	mov	r0, r3
 8018190:	3708      	adds	r7, #8
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}

08018196 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018196:	b480      	push	{r7}
 8018198:	b083      	sub	sp, #12
 801819a:	af00      	add	r7, sp, #0
 801819c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801819e:	2300      	movs	r3, #0
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	370c      	adds	r7, #12
 80181a4:	46bd      	mov	sp, r7
 80181a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181aa:	4770      	bx	lr

080181ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b084      	sub	sp, #16
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80181b4:	2300      	movs	r3, #0
 80181b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2201      	movs	r2, #1
 80181bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00e      	beq.n	80181e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181d0:	685b      	ldr	r3, [r3, #4]
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	6852      	ldr	r2, [r2, #4]
 80181d6:	b2d2      	uxtb	r2, r2
 80181d8:	4611      	mov	r1, r2
 80181da:	6878      	ldr	r0, [r7, #4]
 80181dc:	4798      	blx	r3
 80181de:	4603      	mov	r3, r0
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d001      	beq.n	80181e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80181e4:	2303      	movs	r3, #3
 80181e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80181e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3710      	adds	r7, #16
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}

080181f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80181f2:	b480      	push	{r7}
 80181f4:	b083      	sub	sp, #12
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	6078      	str	r0, [r7, #4]
 80181fa:	460b      	mov	r3, r1
 80181fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80181fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018200:	4618      	mov	r0, r3
 8018202:	370c      	adds	r7, #12
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801820c:	b480      	push	{r7}
 801820e:	b083      	sub	sp, #12
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	460b      	mov	r3, r1
 8018216:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018218:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801821a:	4618      	mov	r0, r3
 801821c:	370c      	adds	r7, #12
 801821e:	46bd      	mov	sp, r7
 8018220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018224:	4770      	bx	lr

08018226 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018226:	b580      	push	{r7, lr}
 8018228:	b086      	sub	sp, #24
 801822a:	af00      	add	r7, sp, #0
 801822c:	6078      	str	r0, [r7, #4]
 801822e:	460b      	mov	r3, r1
 8018230:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801823a:	2300      	movs	r3, #0
 801823c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	885b      	ldrh	r3, [r3, #2]
 8018242:	b29a      	uxth	r2, r3
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	b29b      	uxth	r3, r3
 801824a:	429a      	cmp	r2, r3
 801824c:	d920      	bls.n	8018290 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	b29b      	uxth	r3, r3
 8018254:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018256:	e013      	b.n	8018280 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018258:	f107 030a 	add.w	r3, r7, #10
 801825c:	4619      	mov	r1, r3
 801825e:	6978      	ldr	r0, [r7, #20]
 8018260:	f000 f81b 	bl	801829a <USBD_GetNextDesc>
 8018264:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018266:	697b      	ldr	r3, [r7, #20]
 8018268:	785b      	ldrb	r3, [r3, #1]
 801826a:	2b05      	cmp	r3, #5
 801826c:	d108      	bne.n	8018280 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	789b      	ldrb	r3, [r3, #2]
 8018276:	78fa      	ldrb	r2, [r7, #3]
 8018278:	429a      	cmp	r2, r3
 801827a:	d008      	beq.n	801828e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801827c:	2300      	movs	r3, #0
 801827e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	885b      	ldrh	r3, [r3, #2]
 8018284:	b29a      	uxth	r2, r3
 8018286:	897b      	ldrh	r3, [r7, #10]
 8018288:	429a      	cmp	r2, r3
 801828a:	d8e5      	bhi.n	8018258 <USBD_GetEpDesc+0x32>
 801828c:	e000      	b.n	8018290 <USBD_GetEpDesc+0x6a>
          break;
 801828e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018290:	693b      	ldr	r3, [r7, #16]
}
 8018292:	4618      	mov	r0, r3
 8018294:	3718      	adds	r7, #24
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}

0801829a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801829a:	b480      	push	{r7}
 801829c:	b085      	sub	sp, #20
 801829e:	af00      	add	r7, sp, #0
 80182a0:	6078      	str	r0, [r7, #4]
 80182a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	881a      	ldrh	r2, [r3, #0]
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	781b      	ldrb	r3, [r3, #0]
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	4413      	add	r3, r2
 80182b4:	b29a      	uxth	r2, r3
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	781b      	ldrb	r3, [r3, #0]
 80182be:	461a      	mov	r2, r3
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	4413      	add	r3, r2
 80182c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80182c6:	68fb      	ldr	r3, [r7, #12]
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3714      	adds	r7, #20
 80182cc:	46bd      	mov	sp, r7
 80182ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d2:	4770      	bx	lr

080182d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80182d4:	b480      	push	{r7}
 80182d6:	b087      	sub	sp, #28
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80182e0:	697b      	ldr	r3, [r7, #20]
 80182e2:	781b      	ldrb	r3, [r3, #0]
 80182e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80182e6:	697b      	ldr	r3, [r7, #20]
 80182e8:	3301      	adds	r3, #1
 80182ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80182ec:	697b      	ldr	r3, [r7, #20]
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80182f2:	8a3b      	ldrh	r3, [r7, #16]
 80182f4:	021b      	lsls	r3, r3, #8
 80182f6:	b21a      	sxth	r2, r3
 80182f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80182fc:	4313      	orrs	r3, r2
 80182fe:	b21b      	sxth	r3, r3
 8018300:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018302:	89fb      	ldrh	r3, [r7, #14]
}
 8018304:	4618      	mov	r0, r3
 8018306:	371c      	adds	r7, #28
 8018308:	46bd      	mov	sp, r7
 801830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830e:	4770      	bx	lr

08018310 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b084      	sub	sp, #16
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801831a:	2300      	movs	r3, #0
 801831c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	781b      	ldrb	r3, [r3, #0]
 8018322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018326:	2b40      	cmp	r3, #64	; 0x40
 8018328:	d005      	beq.n	8018336 <USBD_StdDevReq+0x26>
 801832a:	2b40      	cmp	r3, #64	; 0x40
 801832c:	d857      	bhi.n	80183de <USBD_StdDevReq+0xce>
 801832e:	2b00      	cmp	r3, #0
 8018330:	d00f      	beq.n	8018352 <USBD_StdDevReq+0x42>
 8018332:	2b20      	cmp	r3, #32
 8018334:	d153      	bne.n	80183de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	32ae      	adds	r2, #174	; 0xae
 8018340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018344:	689b      	ldr	r3, [r3, #8]
 8018346:	6839      	ldr	r1, [r7, #0]
 8018348:	6878      	ldr	r0, [r7, #4]
 801834a:	4798      	blx	r3
 801834c:	4603      	mov	r3, r0
 801834e:	73fb      	strb	r3, [r7, #15]
      break;
 8018350:	e04a      	b.n	80183e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	785b      	ldrb	r3, [r3, #1]
 8018356:	2b09      	cmp	r3, #9
 8018358:	d83b      	bhi.n	80183d2 <USBD_StdDevReq+0xc2>
 801835a:	a201      	add	r2, pc, #4	; (adr r2, 8018360 <USBD_StdDevReq+0x50>)
 801835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018360:	080183b5 	.word	0x080183b5
 8018364:	080183c9 	.word	0x080183c9
 8018368:	080183d3 	.word	0x080183d3
 801836c:	080183bf 	.word	0x080183bf
 8018370:	080183d3 	.word	0x080183d3
 8018374:	08018393 	.word	0x08018393
 8018378:	08018389 	.word	0x08018389
 801837c:	080183d3 	.word	0x080183d3
 8018380:	080183ab 	.word	0x080183ab
 8018384:	0801839d 	.word	0x0801839d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018388:	6839      	ldr	r1, [r7, #0]
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	f000 fa3c 	bl	8018808 <USBD_GetDescriptor>
          break;
 8018390:	e024      	b.n	80183dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018392:	6839      	ldr	r1, [r7, #0]
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	f000 fbcb 	bl	8018b30 <USBD_SetAddress>
          break;
 801839a:	e01f      	b.n	80183dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801839c:	6839      	ldr	r1, [r7, #0]
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f000 fc0a 	bl	8018bb8 <USBD_SetConfig>
 80183a4:	4603      	mov	r3, r0
 80183a6:	73fb      	strb	r3, [r7, #15]
          break;
 80183a8:	e018      	b.n	80183dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80183aa:	6839      	ldr	r1, [r7, #0]
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	f000 fcad 	bl	8018d0c <USBD_GetConfig>
          break;
 80183b2:	e013      	b.n	80183dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80183b4:	6839      	ldr	r1, [r7, #0]
 80183b6:	6878      	ldr	r0, [r7, #4]
 80183b8:	f000 fcde 	bl	8018d78 <USBD_GetStatus>
          break;
 80183bc:	e00e      	b.n	80183dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80183be:	6839      	ldr	r1, [r7, #0]
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f000 fd0d 	bl	8018de0 <USBD_SetFeature>
          break;
 80183c6:	e009      	b.n	80183dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80183c8:	6839      	ldr	r1, [r7, #0]
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f000 fd31 	bl	8018e32 <USBD_ClrFeature>
          break;
 80183d0:	e004      	b.n	80183dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80183d2:	6839      	ldr	r1, [r7, #0]
 80183d4:	6878      	ldr	r0, [r7, #4]
 80183d6:	f000 fd88 	bl	8018eea <USBD_CtlError>
          break;
 80183da:	bf00      	nop
      }
      break;
 80183dc:	e004      	b.n	80183e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80183de:	6839      	ldr	r1, [r7, #0]
 80183e0:	6878      	ldr	r0, [r7, #4]
 80183e2:	f000 fd82 	bl	8018eea <USBD_CtlError>
      break;
 80183e6:	bf00      	nop
  }

  return ret;
 80183e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3710      	adds	r7, #16
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop

080183f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b084      	sub	sp, #16
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
 80183fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80183fe:	2300      	movs	r3, #0
 8018400:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018402:	683b      	ldr	r3, [r7, #0]
 8018404:	781b      	ldrb	r3, [r3, #0]
 8018406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801840a:	2b40      	cmp	r3, #64	; 0x40
 801840c:	d005      	beq.n	801841a <USBD_StdItfReq+0x26>
 801840e:	2b40      	cmp	r3, #64	; 0x40
 8018410:	d852      	bhi.n	80184b8 <USBD_StdItfReq+0xc4>
 8018412:	2b00      	cmp	r3, #0
 8018414:	d001      	beq.n	801841a <USBD_StdItfReq+0x26>
 8018416:	2b20      	cmp	r3, #32
 8018418:	d14e      	bne.n	80184b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018420:	b2db      	uxtb	r3, r3
 8018422:	3b01      	subs	r3, #1
 8018424:	2b02      	cmp	r3, #2
 8018426:	d840      	bhi.n	80184aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	889b      	ldrh	r3, [r3, #4]
 801842c:	b2db      	uxtb	r3, r3
 801842e:	2b01      	cmp	r3, #1
 8018430:	d836      	bhi.n	80184a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	889b      	ldrh	r3, [r3, #4]
 8018436:	b2db      	uxtb	r3, r3
 8018438:	4619      	mov	r1, r3
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	f7ff fed9 	bl	80181f2 <USBD_CoreFindIF>
 8018440:	4603      	mov	r3, r0
 8018442:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018444:	7bbb      	ldrb	r3, [r7, #14]
 8018446:	2bff      	cmp	r3, #255	; 0xff
 8018448:	d01d      	beq.n	8018486 <USBD_StdItfReq+0x92>
 801844a:	7bbb      	ldrb	r3, [r7, #14]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d11a      	bne.n	8018486 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018450:	7bba      	ldrb	r2, [r7, #14]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	32ae      	adds	r2, #174	; 0xae
 8018456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801845a:	689b      	ldr	r3, [r3, #8]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d00f      	beq.n	8018480 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018460:	7bba      	ldrb	r2, [r7, #14]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018468:	7bba      	ldrb	r2, [r7, #14]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	32ae      	adds	r2, #174	; 0xae
 801846e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018472:	689b      	ldr	r3, [r3, #8]
 8018474:	6839      	ldr	r1, [r7, #0]
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	4798      	blx	r3
 801847a:	4603      	mov	r3, r0
 801847c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801847e:	e004      	b.n	801848a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8018480:	2303      	movs	r3, #3
 8018482:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018484:	e001      	b.n	801848a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8018486:	2303      	movs	r3, #3
 8018488:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801848a:	683b      	ldr	r3, [r7, #0]
 801848c:	88db      	ldrh	r3, [r3, #6]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d110      	bne.n	80184b4 <USBD_StdItfReq+0xc0>
 8018492:	7bfb      	ldrb	r3, [r7, #15]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d10d      	bne.n	80184b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f000 fdf1 	bl	8019080 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801849e:	e009      	b.n	80184b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80184a0:	6839      	ldr	r1, [r7, #0]
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f000 fd21 	bl	8018eea <USBD_CtlError>
          break;
 80184a8:	e004      	b.n	80184b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80184aa:	6839      	ldr	r1, [r7, #0]
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f000 fd1c 	bl	8018eea <USBD_CtlError>
          break;
 80184b2:	e000      	b.n	80184b6 <USBD_StdItfReq+0xc2>
          break;
 80184b4:	bf00      	nop
      }
      break;
 80184b6:	e004      	b.n	80184c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80184b8:	6839      	ldr	r1, [r7, #0]
 80184ba:	6878      	ldr	r0, [r7, #4]
 80184bc:	f000 fd15 	bl	8018eea <USBD_CtlError>
      break;
 80184c0:	bf00      	nop
  }

  return ret;
 80184c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	3710      	adds	r7, #16
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}

080184cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80184d6:	2300      	movs	r3, #0
 80184d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	889b      	ldrh	r3, [r3, #4]
 80184de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	781b      	ldrb	r3, [r3, #0]
 80184e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80184e8:	2b40      	cmp	r3, #64	; 0x40
 80184ea:	d007      	beq.n	80184fc <USBD_StdEPReq+0x30>
 80184ec:	2b40      	cmp	r3, #64	; 0x40
 80184ee:	f200 817f 	bhi.w	80187f0 <USBD_StdEPReq+0x324>
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d02a      	beq.n	801854c <USBD_StdEPReq+0x80>
 80184f6:	2b20      	cmp	r3, #32
 80184f8:	f040 817a 	bne.w	80187f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80184fc:	7bbb      	ldrb	r3, [r7, #14]
 80184fe:	4619      	mov	r1, r3
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f7ff fe83 	bl	801820c <USBD_CoreFindEP>
 8018506:	4603      	mov	r3, r0
 8018508:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801850a:	7b7b      	ldrb	r3, [r7, #13]
 801850c:	2bff      	cmp	r3, #255	; 0xff
 801850e:	f000 8174 	beq.w	80187fa <USBD_StdEPReq+0x32e>
 8018512:	7b7b      	ldrb	r3, [r7, #13]
 8018514:	2b00      	cmp	r3, #0
 8018516:	f040 8170 	bne.w	80187fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801851a:	7b7a      	ldrb	r2, [r7, #13]
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8018522:	7b7a      	ldrb	r2, [r7, #13]
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	32ae      	adds	r2, #174	; 0xae
 8018528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801852c:	689b      	ldr	r3, [r3, #8]
 801852e:	2b00      	cmp	r3, #0
 8018530:	f000 8163 	beq.w	80187fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018534:	7b7a      	ldrb	r2, [r7, #13]
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	32ae      	adds	r2, #174	; 0xae
 801853a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801853e:	689b      	ldr	r3, [r3, #8]
 8018540:	6839      	ldr	r1, [r7, #0]
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	4798      	blx	r3
 8018546:	4603      	mov	r3, r0
 8018548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801854a:	e156      	b.n	80187fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	785b      	ldrb	r3, [r3, #1]
 8018550:	2b03      	cmp	r3, #3
 8018552:	d008      	beq.n	8018566 <USBD_StdEPReq+0x9a>
 8018554:	2b03      	cmp	r3, #3
 8018556:	f300 8145 	bgt.w	80187e4 <USBD_StdEPReq+0x318>
 801855a:	2b00      	cmp	r3, #0
 801855c:	f000 809b 	beq.w	8018696 <USBD_StdEPReq+0x1ca>
 8018560:	2b01      	cmp	r3, #1
 8018562:	d03c      	beq.n	80185de <USBD_StdEPReq+0x112>
 8018564:	e13e      	b.n	80187e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801856c:	b2db      	uxtb	r3, r3
 801856e:	2b02      	cmp	r3, #2
 8018570:	d002      	beq.n	8018578 <USBD_StdEPReq+0xac>
 8018572:	2b03      	cmp	r3, #3
 8018574:	d016      	beq.n	80185a4 <USBD_StdEPReq+0xd8>
 8018576:	e02c      	b.n	80185d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018578:	7bbb      	ldrb	r3, [r7, #14]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d00d      	beq.n	801859a <USBD_StdEPReq+0xce>
 801857e:	7bbb      	ldrb	r3, [r7, #14]
 8018580:	2b80      	cmp	r3, #128	; 0x80
 8018582:	d00a      	beq.n	801859a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018584:	7bbb      	ldrb	r3, [r7, #14]
 8018586:	4619      	mov	r1, r3
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f005 ffa3 	bl	801e4d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801858e:	2180      	movs	r1, #128	; 0x80
 8018590:	6878      	ldr	r0, [r7, #4]
 8018592:	f005 ff9f 	bl	801e4d4 <USBD_LL_StallEP>
 8018596:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018598:	e020      	b.n	80185dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801859a:	6839      	ldr	r1, [r7, #0]
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f000 fca4 	bl	8018eea <USBD_CtlError>
              break;
 80185a2:	e01b      	b.n	80185dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	885b      	ldrh	r3, [r3, #2]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d10e      	bne.n	80185ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80185ac:	7bbb      	ldrb	r3, [r7, #14]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d00b      	beq.n	80185ca <USBD_StdEPReq+0xfe>
 80185b2:	7bbb      	ldrb	r3, [r7, #14]
 80185b4:	2b80      	cmp	r3, #128	; 0x80
 80185b6:	d008      	beq.n	80185ca <USBD_StdEPReq+0xfe>
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	88db      	ldrh	r3, [r3, #6]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d104      	bne.n	80185ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80185c0:	7bbb      	ldrb	r3, [r7, #14]
 80185c2:	4619      	mov	r1, r3
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f005 ff85 	bl	801e4d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f000 fd58 	bl	8019080 <USBD_CtlSendStatus>

              break;
 80185d0:	e004      	b.n	80185dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80185d2:	6839      	ldr	r1, [r7, #0]
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f000 fc88 	bl	8018eea <USBD_CtlError>
              break;
 80185da:	bf00      	nop
          }
          break;
 80185dc:	e107      	b.n	80187ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	2b02      	cmp	r3, #2
 80185e8:	d002      	beq.n	80185f0 <USBD_StdEPReq+0x124>
 80185ea:	2b03      	cmp	r3, #3
 80185ec:	d016      	beq.n	801861c <USBD_StdEPReq+0x150>
 80185ee:	e04b      	b.n	8018688 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80185f0:	7bbb      	ldrb	r3, [r7, #14]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d00d      	beq.n	8018612 <USBD_StdEPReq+0x146>
 80185f6:	7bbb      	ldrb	r3, [r7, #14]
 80185f8:	2b80      	cmp	r3, #128	; 0x80
 80185fa:	d00a      	beq.n	8018612 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80185fc:	7bbb      	ldrb	r3, [r7, #14]
 80185fe:	4619      	mov	r1, r3
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f005 ff67 	bl	801e4d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018606:	2180      	movs	r1, #128	; 0x80
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f005 ff63 	bl	801e4d4 <USBD_LL_StallEP>
 801860e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018610:	e040      	b.n	8018694 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8018612:	6839      	ldr	r1, [r7, #0]
 8018614:	6878      	ldr	r0, [r7, #4]
 8018616:	f000 fc68 	bl	8018eea <USBD_CtlError>
              break;
 801861a:	e03b      	b.n	8018694 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	885b      	ldrh	r3, [r3, #2]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d136      	bne.n	8018692 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018624:	7bbb      	ldrb	r3, [r7, #14]
 8018626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801862a:	2b00      	cmp	r3, #0
 801862c:	d004      	beq.n	8018638 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801862e:	7bbb      	ldrb	r3, [r7, #14]
 8018630:	4619      	mov	r1, r3
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f005 ff6d 	bl	801e512 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f000 fd21 	bl	8019080 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801863e:	7bbb      	ldrb	r3, [r7, #14]
 8018640:	4619      	mov	r1, r3
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f7ff fde2 	bl	801820c <USBD_CoreFindEP>
 8018648:	4603      	mov	r3, r0
 801864a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801864c:	7b7b      	ldrb	r3, [r7, #13]
 801864e:	2bff      	cmp	r3, #255	; 0xff
 8018650:	d01f      	beq.n	8018692 <USBD_StdEPReq+0x1c6>
 8018652:	7b7b      	ldrb	r3, [r7, #13]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d11c      	bne.n	8018692 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8018658:	7b7a      	ldrb	r2, [r7, #13]
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8018660:	7b7a      	ldrb	r2, [r7, #13]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	32ae      	adds	r2, #174	; 0xae
 8018666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801866a:	689b      	ldr	r3, [r3, #8]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d010      	beq.n	8018692 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018670:	7b7a      	ldrb	r2, [r7, #13]
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	32ae      	adds	r2, #174	; 0xae
 8018676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801867a:	689b      	ldr	r3, [r3, #8]
 801867c:	6839      	ldr	r1, [r7, #0]
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	4798      	blx	r3
 8018682:	4603      	mov	r3, r0
 8018684:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8018686:	e004      	b.n	8018692 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8018688:	6839      	ldr	r1, [r7, #0]
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	f000 fc2d 	bl	8018eea <USBD_CtlError>
              break;
 8018690:	e000      	b.n	8018694 <USBD_StdEPReq+0x1c8>
              break;
 8018692:	bf00      	nop
          }
          break;
 8018694:	e0ab      	b.n	80187ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801869c:	b2db      	uxtb	r3, r3
 801869e:	2b02      	cmp	r3, #2
 80186a0:	d002      	beq.n	80186a8 <USBD_StdEPReq+0x1dc>
 80186a2:	2b03      	cmp	r3, #3
 80186a4:	d032      	beq.n	801870c <USBD_StdEPReq+0x240>
 80186a6:	e097      	b.n	80187d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80186a8:	7bbb      	ldrb	r3, [r7, #14]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d007      	beq.n	80186be <USBD_StdEPReq+0x1f2>
 80186ae:	7bbb      	ldrb	r3, [r7, #14]
 80186b0:	2b80      	cmp	r3, #128	; 0x80
 80186b2:	d004      	beq.n	80186be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80186b4:	6839      	ldr	r1, [r7, #0]
 80186b6:	6878      	ldr	r0, [r7, #4]
 80186b8:	f000 fc17 	bl	8018eea <USBD_CtlError>
                break;
 80186bc:	e091      	b.n	80187e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80186be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	da0b      	bge.n	80186de <USBD_StdEPReq+0x212>
 80186c6:	7bbb      	ldrb	r3, [r7, #14]
 80186c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80186cc:	4613      	mov	r3, r2
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	4413      	add	r3, r2
 80186d2:	009b      	lsls	r3, r3, #2
 80186d4:	3310      	adds	r3, #16
 80186d6:	687a      	ldr	r2, [r7, #4]
 80186d8:	4413      	add	r3, r2
 80186da:	3304      	adds	r3, #4
 80186dc:	e00b      	b.n	80186f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80186de:	7bbb      	ldrb	r3, [r7, #14]
 80186e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80186e4:	4613      	mov	r3, r2
 80186e6:	009b      	lsls	r3, r3, #2
 80186e8:	4413      	add	r3, r2
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80186f0:	687a      	ldr	r2, [r7, #4]
 80186f2:	4413      	add	r3, r2
 80186f4:	3304      	adds	r3, #4
 80186f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	2200      	movs	r2, #0
 80186fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	2202      	movs	r2, #2
 8018702:	4619      	mov	r1, r3
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f000 fc61 	bl	8018fcc <USBD_CtlSendData>
              break;
 801870a:	e06a      	b.n	80187e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801870c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018710:	2b00      	cmp	r3, #0
 8018712:	da11      	bge.n	8018738 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018714:	7bbb      	ldrb	r3, [r7, #14]
 8018716:	f003 020f 	and.w	r2, r3, #15
 801871a:	6879      	ldr	r1, [r7, #4]
 801871c:	4613      	mov	r3, r2
 801871e:	009b      	lsls	r3, r3, #2
 8018720:	4413      	add	r3, r2
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	440b      	add	r3, r1
 8018726:	3324      	adds	r3, #36	; 0x24
 8018728:	881b      	ldrh	r3, [r3, #0]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d117      	bne.n	801875e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801872e:	6839      	ldr	r1, [r7, #0]
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f000 fbda 	bl	8018eea <USBD_CtlError>
                  break;
 8018736:	e054      	b.n	80187e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018738:	7bbb      	ldrb	r3, [r7, #14]
 801873a:	f003 020f 	and.w	r2, r3, #15
 801873e:	6879      	ldr	r1, [r7, #4]
 8018740:	4613      	mov	r3, r2
 8018742:	009b      	lsls	r3, r3, #2
 8018744:	4413      	add	r3, r2
 8018746:	009b      	lsls	r3, r3, #2
 8018748:	440b      	add	r3, r1
 801874a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801874e:	881b      	ldrh	r3, [r3, #0]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d104      	bne.n	801875e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018754:	6839      	ldr	r1, [r7, #0]
 8018756:	6878      	ldr	r0, [r7, #4]
 8018758:	f000 fbc7 	bl	8018eea <USBD_CtlError>
                  break;
 801875c:	e041      	b.n	80187e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801875e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018762:	2b00      	cmp	r3, #0
 8018764:	da0b      	bge.n	801877e <USBD_StdEPReq+0x2b2>
 8018766:	7bbb      	ldrb	r3, [r7, #14]
 8018768:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801876c:	4613      	mov	r3, r2
 801876e:	009b      	lsls	r3, r3, #2
 8018770:	4413      	add	r3, r2
 8018772:	009b      	lsls	r3, r3, #2
 8018774:	3310      	adds	r3, #16
 8018776:	687a      	ldr	r2, [r7, #4]
 8018778:	4413      	add	r3, r2
 801877a:	3304      	adds	r3, #4
 801877c:	e00b      	b.n	8018796 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801877e:	7bbb      	ldrb	r3, [r7, #14]
 8018780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018784:	4613      	mov	r3, r2
 8018786:	009b      	lsls	r3, r3, #2
 8018788:	4413      	add	r3, r2
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018790:	687a      	ldr	r2, [r7, #4]
 8018792:	4413      	add	r3, r2
 8018794:	3304      	adds	r3, #4
 8018796:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018798:	7bbb      	ldrb	r3, [r7, #14]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d002      	beq.n	80187a4 <USBD_StdEPReq+0x2d8>
 801879e:	7bbb      	ldrb	r3, [r7, #14]
 80187a0:	2b80      	cmp	r3, #128	; 0x80
 80187a2:	d103      	bne.n	80187ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	2200      	movs	r2, #0
 80187a8:	601a      	str	r2, [r3, #0]
 80187aa:	e00e      	b.n	80187ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80187ac:	7bbb      	ldrb	r3, [r7, #14]
 80187ae:	4619      	mov	r1, r3
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	f005 fecd 	bl	801e550 <USBD_LL_IsStallEP>
 80187b6:	4603      	mov	r3, r0
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d003      	beq.n	80187c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	2201      	movs	r2, #1
 80187c0:	601a      	str	r2, [r3, #0]
 80187c2:	e002      	b.n	80187ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80187c4:	68bb      	ldr	r3, [r7, #8]
 80187c6:	2200      	movs	r2, #0
 80187c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80187ca:	68bb      	ldr	r3, [r7, #8]
 80187cc:	2202      	movs	r2, #2
 80187ce:	4619      	mov	r1, r3
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f000 fbfb 	bl	8018fcc <USBD_CtlSendData>
              break;
 80187d6:	e004      	b.n	80187e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80187d8:	6839      	ldr	r1, [r7, #0]
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f000 fb85 	bl	8018eea <USBD_CtlError>
              break;
 80187e0:	bf00      	nop
          }
          break;
 80187e2:	e004      	b.n	80187ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80187e4:	6839      	ldr	r1, [r7, #0]
 80187e6:	6878      	ldr	r0, [r7, #4]
 80187e8:	f000 fb7f 	bl	8018eea <USBD_CtlError>
          break;
 80187ec:	bf00      	nop
      }
      break;
 80187ee:	e005      	b.n	80187fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80187f0:	6839      	ldr	r1, [r7, #0]
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f000 fb79 	bl	8018eea <USBD_CtlError>
      break;
 80187f8:	e000      	b.n	80187fc <USBD_StdEPReq+0x330>
      break;
 80187fa:	bf00      	nop
  }

  return ret;
 80187fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80187fe:	4618      	mov	r0, r3
 8018800:	3710      	adds	r7, #16
 8018802:	46bd      	mov	sp, r7
 8018804:	bd80      	pop	{r7, pc}
	...

08018808 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b084      	sub	sp, #16
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018812:	2300      	movs	r3, #0
 8018814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018816:	2300      	movs	r3, #0
 8018818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801881a:	2300      	movs	r3, #0
 801881c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	885b      	ldrh	r3, [r3, #2]
 8018822:	0a1b      	lsrs	r3, r3, #8
 8018824:	b29b      	uxth	r3, r3
 8018826:	3b01      	subs	r3, #1
 8018828:	2b0e      	cmp	r3, #14
 801882a:	f200 8152 	bhi.w	8018ad2 <USBD_GetDescriptor+0x2ca>
 801882e:	a201      	add	r2, pc, #4	; (adr r2, 8018834 <USBD_GetDescriptor+0x2c>)
 8018830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018834:	080188a5 	.word	0x080188a5
 8018838:	080188bd 	.word	0x080188bd
 801883c:	080188fd 	.word	0x080188fd
 8018840:	08018ad3 	.word	0x08018ad3
 8018844:	08018ad3 	.word	0x08018ad3
 8018848:	08018a73 	.word	0x08018a73
 801884c:	08018a9f 	.word	0x08018a9f
 8018850:	08018ad3 	.word	0x08018ad3
 8018854:	08018ad3 	.word	0x08018ad3
 8018858:	08018ad3 	.word	0x08018ad3
 801885c:	08018ad3 	.word	0x08018ad3
 8018860:	08018ad3 	.word	0x08018ad3
 8018864:	08018ad3 	.word	0x08018ad3
 8018868:	08018ad3 	.word	0x08018ad3
 801886c:	08018871 	.word	0x08018871
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018876:	69db      	ldr	r3, [r3, #28]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d00b      	beq.n	8018894 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018882:	69db      	ldr	r3, [r3, #28]
 8018884:	687a      	ldr	r2, [r7, #4]
 8018886:	7c12      	ldrb	r2, [r2, #16]
 8018888:	f107 0108 	add.w	r1, r7, #8
 801888c:	4610      	mov	r0, r2
 801888e:	4798      	blx	r3
 8018890:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018892:	e126      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018894:	6839      	ldr	r1, [r7, #0]
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	f000 fb27 	bl	8018eea <USBD_CtlError>
        err++;
 801889c:	7afb      	ldrb	r3, [r7, #11]
 801889e:	3301      	adds	r3, #1
 80188a0:	72fb      	strb	r3, [r7, #11]
      break;
 80188a2:	e11e      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	687a      	ldr	r2, [r7, #4]
 80188ae:	7c12      	ldrb	r2, [r2, #16]
 80188b0:	f107 0108 	add.w	r1, r7, #8
 80188b4:	4610      	mov	r0, r2
 80188b6:	4798      	blx	r3
 80188b8:	60f8      	str	r0, [r7, #12]
      break;
 80188ba:	e112      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	7c1b      	ldrb	r3, [r3, #16]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d10d      	bne.n	80188e0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188cc:	f107 0208 	add.w	r2, r7, #8
 80188d0:	4610      	mov	r0, r2
 80188d2:	4798      	blx	r3
 80188d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	3301      	adds	r3, #1
 80188da:	2202      	movs	r2, #2
 80188dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80188de:	e100      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188e8:	f107 0208 	add.w	r2, r7, #8
 80188ec:	4610      	mov	r0, r2
 80188ee:	4798      	blx	r3
 80188f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	3301      	adds	r3, #1
 80188f6:	2202      	movs	r2, #2
 80188f8:	701a      	strb	r2, [r3, #0]
      break;
 80188fa:	e0f2      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	885b      	ldrh	r3, [r3, #2]
 8018900:	b2db      	uxtb	r3, r3
 8018902:	2b05      	cmp	r3, #5
 8018904:	f200 80ac 	bhi.w	8018a60 <USBD_GetDescriptor+0x258>
 8018908:	a201      	add	r2, pc, #4	; (adr r2, 8018910 <USBD_GetDescriptor+0x108>)
 801890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801890e:	bf00      	nop
 8018910:	08018929 	.word	0x08018929
 8018914:	0801895d 	.word	0x0801895d
 8018918:	08018991 	.word	0x08018991
 801891c:	080189c5 	.word	0x080189c5
 8018920:	080189f9 	.word	0x080189f9
 8018924:	08018a2d 	.word	0x08018a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d00b      	beq.n	801894c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	687a      	ldr	r2, [r7, #4]
 801893e:	7c12      	ldrb	r2, [r2, #16]
 8018940:	f107 0108 	add.w	r1, r7, #8
 8018944:	4610      	mov	r0, r2
 8018946:	4798      	blx	r3
 8018948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801894a:	e091      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801894c:	6839      	ldr	r1, [r7, #0]
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f000 facb 	bl	8018eea <USBD_CtlError>
            err++;
 8018954:	7afb      	ldrb	r3, [r7, #11]
 8018956:	3301      	adds	r3, #1
 8018958:	72fb      	strb	r3, [r7, #11]
          break;
 801895a:	e089      	b.n	8018a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018962:	689b      	ldr	r3, [r3, #8]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d00b      	beq.n	8018980 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801896e:	689b      	ldr	r3, [r3, #8]
 8018970:	687a      	ldr	r2, [r7, #4]
 8018972:	7c12      	ldrb	r2, [r2, #16]
 8018974:	f107 0108 	add.w	r1, r7, #8
 8018978:	4610      	mov	r0, r2
 801897a:	4798      	blx	r3
 801897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801897e:	e077      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018980:	6839      	ldr	r1, [r7, #0]
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f000 fab1 	bl	8018eea <USBD_CtlError>
            err++;
 8018988:	7afb      	ldrb	r3, [r7, #11]
 801898a:	3301      	adds	r3, #1
 801898c:	72fb      	strb	r3, [r7, #11]
          break;
 801898e:	e06f      	b.n	8018a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018996:	68db      	ldr	r3, [r3, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d00b      	beq.n	80189b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80189a2:	68db      	ldr	r3, [r3, #12]
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	7c12      	ldrb	r2, [r2, #16]
 80189a8:	f107 0108 	add.w	r1, r7, #8
 80189ac:	4610      	mov	r0, r2
 80189ae:	4798      	blx	r3
 80189b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189b2:	e05d      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80189b4:	6839      	ldr	r1, [r7, #0]
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f000 fa97 	bl	8018eea <USBD_CtlError>
            err++;
 80189bc:	7afb      	ldrb	r3, [r7, #11]
 80189be:	3301      	adds	r3, #1
 80189c0:	72fb      	strb	r3, [r7, #11]
          break;
 80189c2:	e055      	b.n	8018a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80189ca:	691b      	ldr	r3, [r3, #16]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00b      	beq.n	80189e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80189d6:	691b      	ldr	r3, [r3, #16]
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	7c12      	ldrb	r2, [r2, #16]
 80189dc:	f107 0108 	add.w	r1, r7, #8
 80189e0:	4610      	mov	r0, r2
 80189e2:	4798      	blx	r3
 80189e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189e6:	e043      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80189e8:	6839      	ldr	r1, [r7, #0]
 80189ea:	6878      	ldr	r0, [r7, #4]
 80189ec:	f000 fa7d 	bl	8018eea <USBD_CtlError>
            err++;
 80189f0:	7afb      	ldrb	r3, [r7, #11]
 80189f2:	3301      	adds	r3, #1
 80189f4:	72fb      	strb	r3, [r7, #11]
          break;
 80189f6:	e03b      	b.n	8018a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80189fe:	695b      	ldr	r3, [r3, #20]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d00b      	beq.n	8018a1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018a0a:	695b      	ldr	r3, [r3, #20]
 8018a0c:	687a      	ldr	r2, [r7, #4]
 8018a0e:	7c12      	ldrb	r2, [r2, #16]
 8018a10:	f107 0108 	add.w	r1, r7, #8
 8018a14:	4610      	mov	r0, r2
 8018a16:	4798      	blx	r3
 8018a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a1a:	e029      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018a1c:	6839      	ldr	r1, [r7, #0]
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f000 fa63 	bl	8018eea <USBD_CtlError>
            err++;
 8018a24:	7afb      	ldrb	r3, [r7, #11]
 8018a26:	3301      	adds	r3, #1
 8018a28:	72fb      	strb	r3, [r7, #11]
          break;
 8018a2a:	e021      	b.n	8018a70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018a32:	699b      	ldr	r3, [r3, #24]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d00b      	beq.n	8018a50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018a3e:	699b      	ldr	r3, [r3, #24]
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	7c12      	ldrb	r2, [r2, #16]
 8018a44:	f107 0108 	add.w	r1, r7, #8
 8018a48:	4610      	mov	r0, r2
 8018a4a:	4798      	blx	r3
 8018a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a4e:	e00f      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018a50:	6839      	ldr	r1, [r7, #0]
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f000 fa49 	bl	8018eea <USBD_CtlError>
            err++;
 8018a58:	7afb      	ldrb	r3, [r7, #11]
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a5e:	e007      	b.n	8018a70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018a60:	6839      	ldr	r1, [r7, #0]
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f000 fa41 	bl	8018eea <USBD_CtlError>
          err++;
 8018a68:	7afb      	ldrb	r3, [r7, #11]
 8018a6a:	3301      	adds	r3, #1
 8018a6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018a6e:	bf00      	nop
      }
      break;
 8018a70:	e037      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	7c1b      	ldrb	r3, [r3, #16]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d109      	bne.n	8018a8e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a82:	f107 0208 	add.w	r2, r7, #8
 8018a86:	4610      	mov	r0, r2
 8018a88:	4798      	blx	r3
 8018a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018a8c:	e029      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018a8e:	6839      	ldr	r1, [r7, #0]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f000 fa2a 	bl	8018eea <USBD_CtlError>
        err++;
 8018a96:	7afb      	ldrb	r3, [r7, #11]
 8018a98:	3301      	adds	r3, #1
 8018a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8018a9c:	e021      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	7c1b      	ldrb	r3, [r3, #16]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d10d      	bne.n	8018ac2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aae:	f107 0208 	add.w	r2, r7, #8
 8018ab2:	4610      	mov	r0, r2
 8018ab4:	4798      	blx	r3
 8018ab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	3301      	adds	r3, #1
 8018abc:	2207      	movs	r2, #7
 8018abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018ac0:	e00f      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018ac2:	6839      	ldr	r1, [r7, #0]
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f000 fa10 	bl	8018eea <USBD_CtlError>
        err++;
 8018aca:	7afb      	ldrb	r3, [r7, #11]
 8018acc:	3301      	adds	r3, #1
 8018ace:	72fb      	strb	r3, [r7, #11]
      break;
 8018ad0:	e007      	b.n	8018ae2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8018ad2:	6839      	ldr	r1, [r7, #0]
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f000 fa08 	bl	8018eea <USBD_CtlError>
      err++;
 8018ada:	7afb      	ldrb	r3, [r7, #11]
 8018adc:	3301      	adds	r3, #1
 8018ade:	72fb      	strb	r3, [r7, #11]
      break;
 8018ae0:	bf00      	nop
  }

  if (err != 0U)
 8018ae2:	7afb      	ldrb	r3, [r7, #11]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d11e      	bne.n	8018b26 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	88db      	ldrh	r3, [r3, #6]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d016      	beq.n	8018b1e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8018af0:	893b      	ldrh	r3, [r7, #8]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d00e      	beq.n	8018b14 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	88da      	ldrh	r2, [r3, #6]
 8018afa:	893b      	ldrh	r3, [r7, #8]
 8018afc:	4293      	cmp	r3, r2
 8018afe:	bf28      	it	cs
 8018b00:	4613      	movcs	r3, r2
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018b06:	893b      	ldrh	r3, [r7, #8]
 8018b08:	461a      	mov	r2, r3
 8018b0a:	68f9      	ldr	r1, [r7, #12]
 8018b0c:	6878      	ldr	r0, [r7, #4]
 8018b0e:	f000 fa5d 	bl	8018fcc <USBD_CtlSendData>
 8018b12:	e009      	b.n	8018b28 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018b14:	6839      	ldr	r1, [r7, #0]
 8018b16:	6878      	ldr	r0, [r7, #4]
 8018b18:	f000 f9e7 	bl	8018eea <USBD_CtlError>
 8018b1c:	e004      	b.n	8018b28 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f000 faae 	bl	8019080 <USBD_CtlSendStatus>
 8018b24:	e000      	b.n	8018b28 <USBD_GetDescriptor+0x320>
    return;
 8018b26:	bf00      	nop
  }
}
 8018b28:	3710      	adds	r7, #16
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	bf00      	nop

08018b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	889b      	ldrh	r3, [r3, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d131      	bne.n	8018ba6 <USBD_SetAddress+0x76>
 8018b42:	683b      	ldr	r3, [r7, #0]
 8018b44:	88db      	ldrh	r3, [r3, #6]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d12d      	bne.n	8018ba6 <USBD_SetAddress+0x76>
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	885b      	ldrh	r3, [r3, #2]
 8018b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8018b50:	d829      	bhi.n	8018ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	885b      	ldrh	r3, [r3, #2]
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b03      	cmp	r3, #3
 8018b68:	d104      	bne.n	8018b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018b6a:	6839      	ldr	r1, [r7, #0]
 8018b6c:	6878      	ldr	r0, [r7, #4]
 8018b6e:	f000 f9bc 	bl	8018eea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b72:	e01d      	b.n	8018bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	7bfa      	ldrb	r2, [r7, #15]
 8018b78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018b7c:	7bfb      	ldrb	r3, [r7, #15]
 8018b7e:	4619      	mov	r1, r3
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f005 fd11 	bl	801e5a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018b86:	6878      	ldr	r0, [r7, #4]
 8018b88:	f000 fa7a 	bl	8019080 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018b8c:	7bfb      	ldrb	r3, [r7, #15]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d004      	beq.n	8018b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	2202      	movs	r2, #2
 8018b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b9a:	e009      	b.n	8018bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ba4:	e004      	b.n	8018bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018ba6:	6839      	ldr	r1, [r7, #0]
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f000 f99e 	bl	8018eea <USBD_CtlError>
  }
}
 8018bae:	bf00      	nop
 8018bb0:	bf00      	nop
 8018bb2:	3710      	adds	r7, #16
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	885b      	ldrh	r3, [r3, #2]
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	4b4e      	ldr	r3, [pc, #312]	; (8018d08 <USBD_SetConfig+0x150>)
 8018bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018bd0:	4b4d      	ldr	r3, [pc, #308]	; (8018d08 <USBD_SetConfig+0x150>)
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d905      	bls.n	8018be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018bd8:	6839      	ldr	r1, [r7, #0]
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	f000 f985 	bl	8018eea <USBD_CtlError>
    return USBD_FAIL;
 8018be0:	2303      	movs	r3, #3
 8018be2:	e08c      	b.n	8018cfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018bea:	b2db      	uxtb	r3, r3
 8018bec:	2b02      	cmp	r3, #2
 8018bee:	d002      	beq.n	8018bf6 <USBD_SetConfig+0x3e>
 8018bf0:	2b03      	cmp	r3, #3
 8018bf2:	d029      	beq.n	8018c48 <USBD_SetConfig+0x90>
 8018bf4:	e075      	b.n	8018ce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018bf6:	4b44      	ldr	r3, [pc, #272]	; (8018d08 <USBD_SetConfig+0x150>)
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d020      	beq.n	8018c40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018bfe:	4b42      	ldr	r3, [pc, #264]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	461a      	mov	r2, r3
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018c08:	4b3f      	ldr	r3, [pc, #252]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	4619      	mov	r1, r3
 8018c0e:	6878      	ldr	r0, [r7, #4]
 8018c10:	f7fe ffbd 	bl	8017b8e <USBD_SetClassConfig>
 8018c14:	4603      	mov	r3, r0
 8018c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018c18:	7bfb      	ldrb	r3, [r7, #15]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d008      	beq.n	8018c30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018c1e:	6839      	ldr	r1, [r7, #0]
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	f000 f962 	bl	8018eea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	2202      	movs	r2, #2
 8018c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018c2e:	e065      	b.n	8018cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f000 fa25 	bl	8019080 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2203      	movs	r2, #3
 8018c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018c3e:	e05d      	b.n	8018cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018c40:	6878      	ldr	r0, [r7, #4]
 8018c42:	f000 fa1d 	bl	8019080 <USBD_CtlSendStatus>
      break;
 8018c46:	e059      	b.n	8018cfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018c48:	4b2f      	ldr	r3, [pc, #188]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d112      	bne.n	8018c76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2202      	movs	r2, #2
 8018c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8018c58:	4b2b      	ldr	r3, [pc, #172]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c5a:	781b      	ldrb	r3, [r3, #0]
 8018c5c:	461a      	mov	r2, r3
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018c62:	4b29      	ldr	r3, [pc, #164]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	4619      	mov	r1, r3
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f7fe ffac 	bl	8017bc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f000 fa06 	bl	8019080 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018c74:	e042      	b.n	8018cfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018c76:	4b24      	ldr	r3, [pc, #144]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d02a      	beq.n	8018cda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	685b      	ldr	r3, [r3, #4]
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f7fe ff9a 	bl	8017bc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018c92:	4b1d      	ldr	r3, [pc, #116]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	461a      	mov	r2, r3
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018c9c:	4b1a      	ldr	r3, [pc, #104]	; (8018d08 <USBD_SetConfig+0x150>)
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	6878      	ldr	r0, [r7, #4]
 8018ca4:	f7fe ff73 	bl	8017b8e <USBD_SetClassConfig>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018cac:	7bfb      	ldrb	r3, [r7, #15]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d00f      	beq.n	8018cd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018cb2:	6839      	ldr	r1, [r7, #0]
 8018cb4:	6878      	ldr	r0, [r7, #4]
 8018cb6:	f000 f918 	bl	8018eea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	6878      	ldr	r0, [r7, #4]
 8018cc4:	f7fe ff7f 	bl	8017bc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2202      	movs	r2, #2
 8018ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018cd0:	e014      	b.n	8018cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f000 f9d4 	bl	8019080 <USBD_CtlSendStatus>
      break;
 8018cd8:	e010      	b.n	8018cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f000 f9d0 	bl	8019080 <USBD_CtlSendStatus>
      break;
 8018ce0:	e00c      	b.n	8018cfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018ce2:	6839      	ldr	r1, [r7, #0]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f000 f900 	bl	8018eea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018cea:	4b07      	ldr	r3, [pc, #28]	; (8018d08 <USBD_SetConfig+0x150>)
 8018cec:	781b      	ldrb	r3, [r3, #0]
 8018cee:	4619      	mov	r1, r3
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f7fe ff68 	bl	8017bc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018cf6:	2303      	movs	r3, #3
 8018cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8018cfa:	bf00      	nop
  }

  return ret;
 8018cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3710      	adds	r7, #16
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	20001770 	.word	0x20001770

08018d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b082      	sub	sp, #8
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
 8018d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	88db      	ldrh	r3, [r3, #6]
 8018d1a:	2b01      	cmp	r3, #1
 8018d1c:	d004      	beq.n	8018d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018d1e:	6839      	ldr	r1, [r7, #0]
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f000 f8e2 	bl	8018eea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018d26:	e023      	b.n	8018d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	2b02      	cmp	r3, #2
 8018d32:	dc02      	bgt.n	8018d3a <USBD_GetConfig+0x2e>
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	dc03      	bgt.n	8018d40 <USBD_GetConfig+0x34>
 8018d38:	e015      	b.n	8018d66 <USBD_GetConfig+0x5a>
 8018d3a:	2b03      	cmp	r3, #3
 8018d3c:	d00b      	beq.n	8018d56 <USBD_GetConfig+0x4a>
 8018d3e:	e012      	b.n	8018d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2200      	movs	r2, #0
 8018d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	3308      	adds	r3, #8
 8018d4a:	2201      	movs	r2, #1
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f000 f93c 	bl	8018fcc <USBD_CtlSendData>
        break;
 8018d54:	e00c      	b.n	8018d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	3304      	adds	r3, #4
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	6878      	ldr	r0, [r7, #4]
 8018d60:	f000 f934 	bl	8018fcc <USBD_CtlSendData>
        break;
 8018d64:	e004      	b.n	8018d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018d66:	6839      	ldr	r1, [r7, #0]
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f000 f8be 	bl	8018eea <USBD_CtlError>
        break;
 8018d6e:	bf00      	nop
}
 8018d70:	bf00      	nop
 8018d72:	3708      	adds	r7, #8
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	3b01      	subs	r3, #1
 8018d8c:	2b02      	cmp	r3, #2
 8018d8e:	d81e      	bhi.n	8018dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	88db      	ldrh	r3, [r3, #6]
 8018d94:	2b02      	cmp	r3, #2
 8018d96:	d004      	beq.n	8018da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018d98:	6839      	ldr	r1, [r7, #0]
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f000 f8a5 	bl	8018eea <USBD_CtlError>
        break;
 8018da0:	e01a      	b.n	8018dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2201      	movs	r2, #1
 8018da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d005      	beq.n	8018dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	68db      	ldr	r3, [r3, #12]
 8018db6:	f043 0202 	orr.w	r2, r3, #2
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	330c      	adds	r3, #12
 8018dc2:	2202      	movs	r2, #2
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f000 f900 	bl	8018fcc <USBD_CtlSendData>
      break;
 8018dcc:	e004      	b.n	8018dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018dce:	6839      	ldr	r1, [r7, #0]
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f000 f88a 	bl	8018eea <USBD_CtlError>
      break;
 8018dd6:	bf00      	nop
  }
}
 8018dd8:	bf00      	nop
 8018dda:	3708      	adds	r7, #8
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}

08018de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b082      	sub	sp, #8
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	885b      	ldrh	r3, [r3, #2]
 8018dee:	2b01      	cmp	r3, #1
 8018df0:	d107      	bne.n	8018e02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	2201      	movs	r2, #1
 8018df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f000 f940 	bl	8019080 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018e00:	e013      	b.n	8018e2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	885b      	ldrh	r3, [r3, #2]
 8018e06:	2b02      	cmp	r3, #2
 8018e08:	d10b      	bne.n	8018e22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018e0a:	683b      	ldr	r3, [r7, #0]
 8018e0c:	889b      	ldrh	r3, [r3, #4]
 8018e0e:	0a1b      	lsrs	r3, r3, #8
 8018e10:	b29b      	uxth	r3, r3
 8018e12:	b2da      	uxtb	r2, r3
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 f930 	bl	8019080 <USBD_CtlSendStatus>
}
 8018e20:	e003      	b.n	8018e2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018e22:	6839      	ldr	r1, [r7, #0]
 8018e24:	6878      	ldr	r0, [r7, #4]
 8018e26:	f000 f860 	bl	8018eea <USBD_CtlError>
}
 8018e2a:	bf00      	nop
 8018e2c:	3708      	adds	r7, #8
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}

08018e32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e32:	b580      	push	{r7, lr}
 8018e34:	b082      	sub	sp, #8
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	6078      	str	r0, [r7, #4]
 8018e3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018e42:	b2db      	uxtb	r3, r3
 8018e44:	3b01      	subs	r3, #1
 8018e46:	2b02      	cmp	r3, #2
 8018e48:	d80b      	bhi.n	8018e62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	885b      	ldrh	r3, [r3, #2]
 8018e4e:	2b01      	cmp	r3, #1
 8018e50:	d10c      	bne.n	8018e6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	2200      	movs	r2, #0
 8018e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f000 f910 	bl	8019080 <USBD_CtlSendStatus>
      }
      break;
 8018e60:	e004      	b.n	8018e6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018e62:	6839      	ldr	r1, [r7, #0]
 8018e64:	6878      	ldr	r0, [r7, #4]
 8018e66:	f000 f840 	bl	8018eea <USBD_CtlError>
      break;
 8018e6a:	e000      	b.n	8018e6e <USBD_ClrFeature+0x3c>
      break;
 8018e6c:	bf00      	nop
  }
}
 8018e6e:	bf00      	nop
 8018e70:	3708      	adds	r7, #8
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd80      	pop	{r7, pc}

08018e76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018e76:	b580      	push	{r7, lr}
 8018e78:	b084      	sub	sp, #16
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
 8018e7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	781a      	ldrb	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	3301      	adds	r3, #1
 8018e90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	781a      	ldrb	r2, [r3, #0]
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	3301      	adds	r3, #1
 8018e9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018ea0:	68f8      	ldr	r0, [r7, #12]
 8018ea2:	f7ff fa17 	bl	80182d4 <SWAPBYTE>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	461a      	mov	r2, r3
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	3301      	adds	r3, #1
 8018eb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018eba:	68f8      	ldr	r0, [r7, #12]
 8018ebc:	f7ff fa0a 	bl	80182d4 <SWAPBYTE>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	3301      	adds	r3, #1
 8018ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018ed4:	68f8      	ldr	r0, [r7, #12]
 8018ed6:	f7ff f9fd 	bl	80182d4 <SWAPBYTE>
 8018eda:	4603      	mov	r3, r0
 8018edc:	461a      	mov	r2, r3
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	80da      	strh	r2, [r3, #6]
}
 8018ee2:	bf00      	nop
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}

08018eea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eea:	b580      	push	{r7, lr}
 8018eec:	b082      	sub	sp, #8
 8018eee:	af00      	add	r7, sp, #0
 8018ef0:	6078      	str	r0, [r7, #4]
 8018ef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018ef4:	2180      	movs	r1, #128	; 0x80
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f005 faec 	bl	801e4d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018efc:	2100      	movs	r1, #0
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f005 fae8 	bl	801e4d4 <USBD_LL_StallEP>
}
 8018f04:	bf00      	nop
 8018f06:	3708      	adds	r7, #8
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bd80      	pop	{r7, pc}

08018f0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b086      	sub	sp, #24
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	60f8      	str	r0, [r7, #12]
 8018f14:	60b9      	str	r1, [r7, #8]
 8018f16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018f18:	2300      	movs	r3, #0
 8018f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d036      	beq.n	8018f90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018f26:	6938      	ldr	r0, [r7, #16]
 8018f28:	f000 f836 	bl	8018f98 <USBD_GetLen>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	3301      	adds	r3, #1
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	005b      	lsls	r3, r3, #1
 8018f34:	b29a      	uxth	r2, r3
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018f3a:	7dfb      	ldrb	r3, [r7, #23]
 8018f3c:	68ba      	ldr	r2, [r7, #8]
 8018f3e:	4413      	add	r3, r2
 8018f40:	687a      	ldr	r2, [r7, #4]
 8018f42:	7812      	ldrb	r2, [r2, #0]
 8018f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8018f46:	7dfb      	ldrb	r3, [r7, #23]
 8018f48:	3301      	adds	r3, #1
 8018f4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018f4c:	7dfb      	ldrb	r3, [r7, #23]
 8018f4e:	68ba      	ldr	r2, [r7, #8]
 8018f50:	4413      	add	r3, r2
 8018f52:	2203      	movs	r2, #3
 8018f54:	701a      	strb	r2, [r3, #0]
  idx++;
 8018f56:	7dfb      	ldrb	r3, [r7, #23]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018f5c:	e013      	b.n	8018f86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018f5e:	7dfb      	ldrb	r3, [r7, #23]
 8018f60:	68ba      	ldr	r2, [r7, #8]
 8018f62:	4413      	add	r3, r2
 8018f64:	693a      	ldr	r2, [r7, #16]
 8018f66:	7812      	ldrb	r2, [r2, #0]
 8018f68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	3301      	adds	r3, #1
 8018f6e:	613b      	str	r3, [r7, #16]
    idx++;
 8018f70:	7dfb      	ldrb	r3, [r7, #23]
 8018f72:	3301      	adds	r3, #1
 8018f74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018f76:	7dfb      	ldrb	r3, [r7, #23]
 8018f78:	68ba      	ldr	r2, [r7, #8]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8018f80:	7dfb      	ldrb	r3, [r7, #23]
 8018f82:	3301      	adds	r3, #1
 8018f84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d1e7      	bne.n	8018f5e <USBD_GetString+0x52>
 8018f8e:	e000      	b.n	8018f92 <USBD_GetString+0x86>
    return;
 8018f90:	bf00      	nop
  }
}
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}

08018f98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018f98:	b480      	push	{r7}
 8018f9a:	b085      	sub	sp, #20
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018fa8:	e005      	b.n	8018fb6 <USBD_GetLen+0x1e>
  {
    len++;
 8018faa:	7bfb      	ldrb	r3, [r7, #15]
 8018fac:	3301      	adds	r3, #1
 8018fae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d1f5      	bne.n	8018faa <USBD_GetLen+0x12>
  }

  return len;
 8018fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3714      	adds	r7, #20
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fca:	4770      	bx	lr

08018fcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	60f8      	str	r0, [r7, #12]
 8018fd4:	60b9      	str	r1, [r7, #8]
 8018fd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	2202      	movs	r2, #2
 8018fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	687a      	ldr	r2, [r7, #4]
 8018fe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	68ba      	ldr	r2, [r7, #8]
 8018ff0:	2100      	movs	r1, #0
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f005 faf7 	bl	801e5e6 <USBD_LL_Transmit>

  return USBD_OK;
 8018ff8:	2300      	movs	r3, #0
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	3710      	adds	r7, #16
 8018ffe:	46bd      	mov	sp, r7
 8019000:	bd80      	pop	{r7, pc}

08019002 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019002:	b580      	push	{r7, lr}
 8019004:	b084      	sub	sp, #16
 8019006:	af00      	add	r7, sp, #0
 8019008:	60f8      	str	r0, [r7, #12]
 801900a:	60b9      	str	r1, [r7, #8]
 801900c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	68ba      	ldr	r2, [r7, #8]
 8019012:	2100      	movs	r1, #0
 8019014:	68f8      	ldr	r0, [r7, #12]
 8019016:	f005 fae6 	bl	801e5e6 <USBD_LL_Transmit>

  return USBD_OK;
 801901a:	2300      	movs	r3, #0
}
 801901c:	4618      	mov	r0, r3
 801901e:	3710      	adds	r7, #16
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}

08019024 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b084      	sub	sp, #16
 8019028:	af00      	add	r7, sp, #0
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	2203      	movs	r2, #3
 8019034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	687a      	ldr	r2, [r7, #4]
 801903c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	687a      	ldr	r2, [r7, #4]
 8019044:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	68ba      	ldr	r2, [r7, #8]
 801904c:	2100      	movs	r1, #0
 801904e:	68f8      	ldr	r0, [r7, #12]
 8019050:	f005 faea 	bl	801e628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019054:	2300      	movs	r3, #0
}
 8019056:	4618      	mov	r0, r3
 8019058:	3710      	adds	r7, #16
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}

0801905e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801905e:	b580      	push	{r7, lr}
 8019060:	b084      	sub	sp, #16
 8019062:	af00      	add	r7, sp, #0
 8019064:	60f8      	str	r0, [r7, #12]
 8019066:	60b9      	str	r1, [r7, #8]
 8019068:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	68ba      	ldr	r2, [r7, #8]
 801906e:	2100      	movs	r1, #0
 8019070:	68f8      	ldr	r0, [r7, #12]
 8019072:	f005 fad9 	bl	801e628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019076:	2300      	movs	r3, #0
}
 8019078:	4618      	mov	r0, r3
 801907a:	3710      	adds	r7, #16
 801907c:	46bd      	mov	sp, r7
 801907e:	bd80      	pop	{r7, pc}

08019080 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b082      	sub	sp, #8
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	2204      	movs	r2, #4
 801908c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019090:	2300      	movs	r3, #0
 8019092:	2200      	movs	r2, #0
 8019094:	2100      	movs	r1, #0
 8019096:	6878      	ldr	r0, [r7, #4]
 8019098:	f005 faa5 	bl	801e5e6 <USBD_LL_Transmit>

  return USBD_OK;
 801909c:	2300      	movs	r3, #0
}
 801909e:	4618      	mov	r0, r3
 80190a0:	3708      	adds	r7, #8
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd80      	pop	{r7, pc}

080190a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80190a6:	b580      	push	{r7, lr}
 80190a8:	b082      	sub	sp, #8
 80190aa:	af00      	add	r7, sp, #0
 80190ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	2205      	movs	r2, #5
 80190b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80190b6:	2300      	movs	r3, #0
 80190b8:	2200      	movs	r2, #0
 80190ba:	2100      	movs	r1, #0
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f005 fab3 	bl	801e628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80190c2:	2300      	movs	r3, #0
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3708      	adds	r7, #8
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}

080190cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80190cc:	b590      	push	{r4, r7, lr}
 80190ce:	b089      	sub	sp, #36	; 0x24
 80190d0:	af04      	add	r7, sp, #16
 80190d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80190d4:	2301      	movs	r3, #1
 80190d6:	2202      	movs	r2, #2
 80190d8:	2102      	movs	r1, #2
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f000 fc85 	bl	80199ea <USBH_FindInterface>
 80190e0:	4603      	mov	r3, r0
 80190e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80190e4:	7bfb      	ldrb	r3, [r7, #15]
 80190e6:	2bff      	cmp	r3, #255	; 0xff
 80190e8:	d002      	beq.n	80190f0 <USBH_CDC_InterfaceInit+0x24>
 80190ea:	7bfb      	ldrb	r3, [r7, #15]
 80190ec:	2b01      	cmp	r3, #1
 80190ee:	d901      	bls.n	80190f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80190f0:	2302      	movs	r3, #2
 80190f2:	e13d      	b.n	8019370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80190f4:	7bfb      	ldrb	r3, [r7, #15]
 80190f6:	4619      	mov	r1, r3
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f000 fc5a 	bl	80199b2 <USBH_SelectInterface>
 80190fe:	4603      	mov	r3, r0
 8019100:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8019102:	7bbb      	ldrb	r3, [r7, #14]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d001      	beq.n	801910c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8019108:	2302      	movs	r3, #2
 801910a:	e131      	b.n	8019370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8019112:	2050      	movs	r0, #80	; 0x50
 8019114:	f005 fe8a 	bl	801ee2c <malloc>
 8019118:	4603      	mov	r3, r0
 801911a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019122:	69db      	ldr	r3, [r3, #28]
 8019124:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8019126:	68bb      	ldr	r3, [r7, #8]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d101      	bne.n	8019130 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 801912c:	2302      	movs	r3, #2
 801912e:	e11f      	b.n	8019370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8019130:	2250      	movs	r2, #80	; 0x50
 8019132:	2100      	movs	r1, #0
 8019134:	68b8      	ldr	r0, [r7, #8]
 8019136:	f006 f8e3 	bl	801f300 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801913a:	7bfb      	ldrb	r3, [r7, #15]
 801913c:	687a      	ldr	r2, [r7, #4]
 801913e:	211a      	movs	r1, #26
 8019140:	fb01 f303 	mul.w	r3, r1, r3
 8019144:	4413      	add	r3, r2
 8019146:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801914a:	781b      	ldrb	r3, [r3, #0]
 801914c:	b25b      	sxtb	r3, r3
 801914e:	2b00      	cmp	r3, #0
 8019150:	da15      	bge.n	801917e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8019152:	7bfb      	ldrb	r3, [r7, #15]
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	211a      	movs	r1, #26
 8019158:	fb01 f303 	mul.w	r3, r1, r3
 801915c:	4413      	add	r3, r2
 801915e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8019162:	781a      	ldrb	r2, [r3, #0]
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8019168:	7bfb      	ldrb	r3, [r7, #15]
 801916a:	687a      	ldr	r2, [r7, #4]
 801916c:	211a      	movs	r1, #26
 801916e:	fb01 f303 	mul.w	r3, r1, r3
 8019172:	4413      	add	r3, r2
 8019174:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8019178:	881a      	ldrh	r2, [r3, #0]
 801917a:	68bb      	ldr	r3, [r7, #8]
 801917c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801917e:	68bb      	ldr	r3, [r7, #8]
 8019180:	785b      	ldrb	r3, [r3, #1]
 8019182:	4619      	mov	r1, r3
 8019184:	6878      	ldr	r0, [r7, #4]
 8019186:	f001 ff26 	bl	801afd6 <USBH_AllocPipe>
 801918a:	4603      	mov	r3, r0
 801918c:	461a      	mov	r2, r3
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	7819      	ldrb	r1, [r3, #0]
 8019196:	68bb      	ldr	r3, [r7, #8]
 8019198:	7858      	ldrb	r0, [r3, #1]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80191a6:	68ba      	ldr	r2, [r7, #8]
 80191a8:	8952      	ldrh	r2, [r2, #10]
 80191aa:	9202      	str	r2, [sp, #8]
 80191ac:	2203      	movs	r2, #3
 80191ae:	9201      	str	r2, [sp, #4]
 80191b0:	9300      	str	r3, [sp, #0]
 80191b2:	4623      	mov	r3, r4
 80191b4:	4602      	mov	r2, r0
 80191b6:	6878      	ldr	r0, [r7, #4]
 80191b8:	f001 fede 	bl	801af78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80191bc:	68bb      	ldr	r3, [r7, #8]
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	2200      	movs	r2, #0
 80191c2:	4619      	mov	r1, r3
 80191c4:	6878      	ldr	r0, [r7, #4]
 80191c6:	f005 fd77 	bl	801ecb8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80191ca:	2300      	movs	r3, #0
 80191cc:	2200      	movs	r2, #0
 80191ce:	210a      	movs	r1, #10
 80191d0:	6878      	ldr	r0, [r7, #4]
 80191d2:	f000 fc0a 	bl	80199ea <USBH_FindInterface>
 80191d6:	4603      	mov	r3, r0
 80191d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80191da:	7bfb      	ldrb	r3, [r7, #15]
 80191dc:	2bff      	cmp	r3, #255	; 0xff
 80191de:	d002      	beq.n	80191e6 <USBH_CDC_InterfaceInit+0x11a>
 80191e0:	7bfb      	ldrb	r3, [r7, #15]
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	d901      	bls.n	80191ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80191e6:	2302      	movs	r3, #2
 80191e8:	e0c2      	b.n	8019370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80191ea:	7bfb      	ldrb	r3, [r7, #15]
 80191ec:	687a      	ldr	r2, [r7, #4]
 80191ee:	211a      	movs	r1, #26
 80191f0:	fb01 f303 	mul.w	r3, r1, r3
 80191f4:	4413      	add	r3, r2
 80191f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	b25b      	sxtb	r3, r3
 80191fe:	2b00      	cmp	r3, #0
 8019200:	da16      	bge.n	8019230 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8019202:	7bfb      	ldrb	r3, [r7, #15]
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	211a      	movs	r1, #26
 8019208:	fb01 f303 	mul.w	r3, r1, r3
 801920c:	4413      	add	r3, r2
 801920e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8019212:	781a      	ldrb	r2, [r3, #0]
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8019218:	7bfb      	ldrb	r3, [r7, #15]
 801921a:	687a      	ldr	r2, [r7, #4]
 801921c:	211a      	movs	r1, #26
 801921e:	fb01 f303 	mul.w	r3, r1, r3
 8019222:	4413      	add	r3, r2
 8019224:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8019228:	881a      	ldrh	r2, [r3, #0]
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	835a      	strh	r2, [r3, #26]
 801922e:	e015      	b.n	801925c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8019230:	7bfb      	ldrb	r3, [r7, #15]
 8019232:	687a      	ldr	r2, [r7, #4]
 8019234:	211a      	movs	r1, #26
 8019236:	fb01 f303 	mul.w	r3, r1, r3
 801923a:	4413      	add	r3, r2
 801923c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8019240:	781a      	ldrb	r2, [r3, #0]
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8019246:	7bfb      	ldrb	r3, [r7, #15]
 8019248:	687a      	ldr	r2, [r7, #4]
 801924a:	211a      	movs	r1, #26
 801924c:	fb01 f303 	mul.w	r3, r1, r3
 8019250:	4413      	add	r3, r2
 8019252:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8019256:	881a      	ldrh	r2, [r3, #0]
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 801925c:	7bfb      	ldrb	r3, [r7, #15]
 801925e:	687a      	ldr	r2, [r7, #4]
 8019260:	211a      	movs	r1, #26
 8019262:	fb01 f303 	mul.w	r3, r1, r3
 8019266:	4413      	add	r3, r2
 8019268:	f203 3356 	addw	r3, r3, #854	; 0x356
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	b25b      	sxtb	r3, r3
 8019270:	2b00      	cmp	r3, #0
 8019272:	da16      	bge.n	80192a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8019274:	7bfb      	ldrb	r3, [r7, #15]
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	211a      	movs	r1, #26
 801927a:	fb01 f303 	mul.w	r3, r1, r3
 801927e:	4413      	add	r3, r2
 8019280:	f203 3356 	addw	r3, r3, #854	; 0x356
 8019284:	781a      	ldrb	r2, [r3, #0]
 8019286:	68bb      	ldr	r3, [r7, #8]
 8019288:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801928a:	7bfb      	ldrb	r3, [r7, #15]
 801928c:	687a      	ldr	r2, [r7, #4]
 801928e:	211a      	movs	r1, #26
 8019290:	fb01 f303 	mul.w	r3, r1, r3
 8019294:	4413      	add	r3, r2
 8019296:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801929a:	881a      	ldrh	r2, [r3, #0]
 801929c:	68bb      	ldr	r3, [r7, #8]
 801929e:	835a      	strh	r2, [r3, #26]
 80192a0:	e015      	b.n	80192ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80192a2:	7bfb      	ldrb	r3, [r7, #15]
 80192a4:	687a      	ldr	r2, [r7, #4]
 80192a6:	211a      	movs	r1, #26
 80192a8:	fb01 f303 	mul.w	r3, r1, r3
 80192ac:	4413      	add	r3, r2
 80192ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80192b2:	781a      	ldrb	r2, [r3, #0]
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80192b8:	7bfb      	ldrb	r3, [r7, #15]
 80192ba:	687a      	ldr	r2, [r7, #4]
 80192bc:	211a      	movs	r1, #26
 80192be:	fb01 f303 	mul.w	r3, r1, r3
 80192c2:	4413      	add	r3, r2
 80192c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80192c8:	881a      	ldrh	r2, [r3, #0]
 80192ca:	68bb      	ldr	r3, [r7, #8]
 80192cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80192ce:	68bb      	ldr	r3, [r7, #8]
 80192d0:	7b9b      	ldrb	r3, [r3, #14]
 80192d2:	4619      	mov	r1, r3
 80192d4:	6878      	ldr	r0, [r7, #4]
 80192d6:	f001 fe7e 	bl	801afd6 <USBH_AllocPipe>
 80192da:	4603      	mov	r3, r0
 80192dc:	461a      	mov	r2, r3
 80192de:	68bb      	ldr	r3, [r7, #8]
 80192e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	7bdb      	ldrb	r3, [r3, #15]
 80192e6:	4619      	mov	r1, r3
 80192e8:	6878      	ldr	r0, [r7, #4]
 80192ea:	f001 fe74 	bl	801afd6 <USBH_AllocPipe>
 80192ee:	4603      	mov	r3, r0
 80192f0:	461a      	mov	r2, r3
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80192f6:	68bb      	ldr	r3, [r7, #8]
 80192f8:	7b59      	ldrb	r1, [r3, #13]
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	7b98      	ldrb	r0, [r3, #14]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801930a:	68ba      	ldr	r2, [r7, #8]
 801930c:	8b12      	ldrh	r2, [r2, #24]
 801930e:	9202      	str	r2, [sp, #8]
 8019310:	2202      	movs	r2, #2
 8019312:	9201      	str	r2, [sp, #4]
 8019314:	9300      	str	r3, [sp, #0]
 8019316:	4623      	mov	r3, r4
 8019318:	4602      	mov	r2, r0
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f001 fe2c 	bl	801af78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8019320:	68bb      	ldr	r3, [r7, #8]
 8019322:	7b19      	ldrb	r1, [r3, #12]
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	7bd8      	ldrb	r0, [r3, #15]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019334:	68ba      	ldr	r2, [r7, #8]
 8019336:	8b52      	ldrh	r2, [r2, #26]
 8019338:	9202      	str	r2, [sp, #8]
 801933a:	2202      	movs	r2, #2
 801933c:	9201      	str	r2, [sp, #4]
 801933e:	9300      	str	r3, [sp, #0]
 8019340:	4623      	mov	r3, r4
 8019342:	4602      	mov	r2, r0
 8019344:	6878      	ldr	r0, [r7, #4]
 8019346:	f001 fe17 	bl	801af78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	2200      	movs	r2, #0
 801934e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8019352:	68bb      	ldr	r3, [r7, #8]
 8019354:	7b5b      	ldrb	r3, [r3, #13]
 8019356:	2200      	movs	r2, #0
 8019358:	4619      	mov	r1, r3
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	f005 fcac 	bl	801ecb8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	7b1b      	ldrb	r3, [r3, #12]
 8019364:	2200      	movs	r2, #0
 8019366:	4619      	mov	r1, r3
 8019368:	6878      	ldr	r0, [r7, #4]
 801936a:	f005 fca5 	bl	801ecb8 <USBH_LL_SetToggle>

  return USBH_OK;
 801936e:	2300      	movs	r3, #0
}
 8019370:	4618      	mov	r0, r3
 8019372:	3714      	adds	r7, #20
 8019374:	46bd      	mov	sp, r7
 8019376:	bd90      	pop	{r4, r7, pc}

08019378 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b084      	sub	sp, #16
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019386:	69db      	ldr	r3, [r3, #28]
 8019388:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d00e      	beq.n	80193b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	781b      	ldrb	r3, [r3, #0]
 8019396:	4619      	mov	r1, r3
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f001 fe0c 	bl	801afb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	781b      	ldrb	r3, [r3, #0]
 80193a2:	4619      	mov	r1, r3
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f001 fe37 	bl	801b018 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	2200      	movs	r2, #0
 80193ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	7b1b      	ldrb	r3, [r3, #12]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d00e      	beq.n	80193d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	7b1b      	ldrb	r3, [r3, #12]
 80193bc:	4619      	mov	r1, r3
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f001 fdf9 	bl	801afb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	7b1b      	ldrb	r3, [r3, #12]
 80193c8:	4619      	mov	r1, r3
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f001 fe24 	bl	801b018 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	2200      	movs	r2, #0
 80193d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	7b5b      	ldrb	r3, [r3, #13]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d00e      	beq.n	80193fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	7b5b      	ldrb	r3, [r3, #13]
 80193e2:	4619      	mov	r1, r3
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f001 fde6 	bl	801afb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	7b5b      	ldrb	r3, [r3, #13]
 80193ee:	4619      	mov	r1, r3
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f001 fe11 	bl	801b018 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	2200      	movs	r2, #0
 80193fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019402:	69db      	ldr	r3, [r3, #28]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d00b      	beq.n	8019420 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801940e:	69db      	ldr	r3, [r3, #28]
 8019410:	4618      	mov	r0, r3
 8019412:	f005 fd13 	bl	801ee3c <free>
    phost->pActiveClass->pData = 0U;
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801941c:	2200      	movs	r2, #0
 801941e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8019420:	2300      	movs	r3, #0
}
 8019422:	4618      	mov	r0, r3
 8019424:	3710      	adds	r7, #16
 8019426:	46bd      	mov	sp, r7
 8019428:	bd80      	pop	{r7, pc}

0801942a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801942a:	b580      	push	{r7, lr}
 801942c:	b084      	sub	sp, #16
 801942e:	af00      	add	r7, sp, #0
 8019430:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019438:	69db      	ldr	r3, [r3, #28]
 801943a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	3340      	adds	r3, #64	; 0x40
 8019440:	4619      	mov	r1, r3
 8019442:	6878      	ldr	r0, [r7, #4]
 8019444:	f000 f8b1 	bl	80195aa <GetLineCoding>
 8019448:	4603      	mov	r3, r0
 801944a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 801944c:	7afb      	ldrb	r3, [r7, #11]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d105      	bne.n	801945e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019458:	2102      	movs	r1, #2
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801945e:	7afb      	ldrb	r3, [r7, #11]
}
 8019460:	4618      	mov	r0, r3
 8019462:	3710      	adds	r7, #16
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}

08019468 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b084      	sub	sp, #16
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8019470:	2301      	movs	r3, #1
 8019472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8019474:	2300      	movs	r3, #0
 8019476:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801947e:	69db      	ldr	r3, [r3, #28]
 8019480:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8019488:	2b04      	cmp	r3, #4
 801948a:	d877      	bhi.n	801957c <USBH_CDC_Process+0x114>
 801948c:	a201      	add	r2, pc, #4	; (adr r2, 8019494 <USBH_CDC_Process+0x2c>)
 801948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019492:	bf00      	nop
 8019494:	080194a9 	.word	0x080194a9
 8019498:	080194af 	.word	0x080194af
 801949c:	080194df 	.word	0x080194df
 80194a0:	08019553 	.word	0x08019553
 80194a4:	08019561 	.word	0x08019561
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80194a8:	2300      	movs	r3, #0
 80194aa:	73fb      	strb	r3, [r7, #15]
      break;
 80194ac:	e06d      	b.n	801958a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80194ae:	68bb      	ldr	r3, [r7, #8]
 80194b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80194b2:	4619      	mov	r1, r3
 80194b4:	6878      	ldr	r0, [r7, #4]
 80194b6:	f000 f897 	bl	80195e8 <SetLineCoding>
 80194ba:	4603      	mov	r3, r0
 80194bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80194be:	7bbb      	ldrb	r3, [r7, #14]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d104      	bne.n	80194ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	2202      	movs	r2, #2
 80194c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80194cc:	e058      	b.n	8019580 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80194ce:	7bbb      	ldrb	r3, [r7, #14]
 80194d0:	2b01      	cmp	r3, #1
 80194d2:	d055      	beq.n	8019580 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	2204      	movs	r2, #4
 80194d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80194dc:	e050      	b.n	8019580 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80194de:	68bb      	ldr	r3, [r7, #8]
 80194e0:	3340      	adds	r3, #64	; 0x40
 80194e2:	4619      	mov	r1, r3
 80194e4:	6878      	ldr	r0, [r7, #4]
 80194e6:	f000 f860 	bl	80195aa <GetLineCoding>
 80194ea:	4603      	mov	r3, r0
 80194ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80194ee:	7bbb      	ldrb	r3, [r7, #14]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d126      	bne.n	8019542 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80194f4:	68bb      	ldr	r3, [r7, #8]
 80194f6:	2200      	movs	r2, #0
 80194f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8019502:	68bb      	ldr	r3, [r7, #8]
 8019504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019506:	791b      	ldrb	r3, [r3, #4]
 8019508:	429a      	cmp	r2, r3
 801950a:	d13b      	bne.n	8019584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019516:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8019518:	429a      	cmp	r2, r3
 801951a:	d133      	bne.n	8019584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019526:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8019528:	429a      	cmp	r2, r3
 801952a:	d12b      	bne.n	8019584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019534:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8019536:	429a      	cmp	r2, r3
 8019538:	d124      	bne.n	8019584 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801953a:	6878      	ldr	r0, [r7, #4]
 801953c:	f000 f958 	bl	80197f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8019540:	e020      	b.n	8019584 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8019542:	7bbb      	ldrb	r3, [r7, #14]
 8019544:	2b01      	cmp	r3, #1
 8019546:	d01d      	beq.n	8019584 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	2204      	movs	r2, #4
 801954c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8019550:	e018      	b.n	8019584 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f000 f867 	bl	8019626 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8019558:	6878      	ldr	r0, [r7, #4]
 801955a:	f000 f8da 	bl	8019712 <CDC_ProcessReception>
      break;
 801955e:	e014      	b.n	801958a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8019560:	2100      	movs	r1, #0
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	f001 f80f 	bl	801a586 <USBH_ClrFeature>
 8019568:	4603      	mov	r3, r0
 801956a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801956c:	7bbb      	ldrb	r3, [r7, #14]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d10a      	bne.n	8019588 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8019572:	68bb      	ldr	r3, [r7, #8]
 8019574:	2200      	movs	r2, #0
 8019576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 801957a:	e005      	b.n	8019588 <USBH_CDC_Process+0x120>

    default:
      break;
 801957c:	bf00      	nop
 801957e:	e004      	b.n	801958a <USBH_CDC_Process+0x122>
      break;
 8019580:	bf00      	nop
 8019582:	e002      	b.n	801958a <USBH_CDC_Process+0x122>
      break;
 8019584:	bf00      	nop
 8019586:	e000      	b.n	801958a <USBH_CDC_Process+0x122>
      break;
 8019588:	bf00      	nop

  }

  return status;
 801958a:	7bfb      	ldrb	r3, [r7, #15]
}
 801958c:	4618      	mov	r0, r3
 801958e:	3710      	adds	r7, #16
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}

08019594 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8019594:	b480      	push	{r7}
 8019596:	b083      	sub	sp, #12
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 801959c:	2300      	movs	r3, #0
}
 801959e:	4618      	mov	r0, r3
 80195a0:	370c      	adds	r7, #12
 80195a2:	46bd      	mov	sp, r7
 80195a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a8:	4770      	bx	lr

080195aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80195aa:	b580      	push	{r7, lr}
 80195ac:	b082      	sub	sp, #8
 80195ae:	af00      	add	r7, sp, #0
 80195b0:	6078      	str	r0, [r7, #4]
 80195b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	22a1      	movs	r2, #161	; 0xa1
 80195b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2221      	movs	r2, #33	; 0x21
 80195be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	2200      	movs	r2, #0
 80195c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	2200      	movs	r2, #0
 80195ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	2207      	movs	r2, #7
 80195d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	2207      	movs	r2, #7
 80195d6:	4619      	mov	r1, r3
 80195d8:	6878      	ldr	r0, [r7, #4]
 80195da:	f001 fa7b 	bl	801aad4 <USBH_CtlReq>
 80195de:	4603      	mov	r3, r0
}
 80195e0:	4618      	mov	r0, r3
 80195e2:	3708      	adds	r7, #8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}

080195e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b082      	sub	sp, #8
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	6078      	str	r0, [r7, #4]
 80195f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2221      	movs	r2, #33	; 0x21
 80195f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	2220      	movs	r2, #32
 80195fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	2200      	movs	r2, #0
 8019602:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2200      	movs	r2, #0
 8019608:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	2207      	movs	r2, #7
 801960e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	2207      	movs	r2, #7
 8019614:	4619      	mov	r1, r3
 8019616:	6878      	ldr	r0, [r7, #4]
 8019618:	f001 fa5c 	bl	801aad4 <USBH_CtlReq>
 801961c:	4603      	mov	r3, r0
}
 801961e:	4618      	mov	r0, r3
 8019620:	3708      	adds	r7, #8
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}

08019626 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8019626:	b580      	push	{r7, lr}
 8019628:	b086      	sub	sp, #24
 801962a:	af02      	add	r7, sp, #8
 801962c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019634:	69db      	ldr	r3, [r3, #28]
 8019636:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8019638:	2300      	movs	r3, #0
 801963a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8019642:	2b01      	cmp	r3, #1
 8019644:	d002      	beq.n	801964c <CDC_ProcessTransmission+0x26>
 8019646:	2b02      	cmp	r3, #2
 8019648:	d023      	beq.n	8019692 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 801964a:	e05e      	b.n	801970a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019650:	68fa      	ldr	r2, [r7, #12]
 8019652:	8b12      	ldrh	r2, [r2, #24]
 8019654:	4293      	cmp	r3, r2
 8019656:	d90b      	bls.n	8019670 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	69d9      	ldr	r1, [r3, #28]
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	8b1a      	ldrh	r2, [r3, #24]
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	7b5b      	ldrb	r3, [r3, #13]
 8019664:	2001      	movs	r0, #1
 8019666:	9000      	str	r0, [sp, #0]
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f001 fc42 	bl	801aef2 <USBH_BulkSendData>
 801966e:	e00b      	b.n	8019688 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8019678:	b29a      	uxth	r2, r3
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	7b5b      	ldrb	r3, [r3, #13]
 801967e:	2001      	movs	r0, #1
 8019680:	9000      	str	r0, [sp, #0]
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	f001 fc35 	bl	801aef2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	2202      	movs	r2, #2
 801968c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8019690:	e03b      	b.n	801970a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	7b5b      	ldrb	r3, [r3, #13]
 8019696:	4619      	mov	r1, r3
 8019698:	6878      	ldr	r0, [r7, #4]
 801969a:	f005 fae3 	bl	801ec64 <USBH_LL_GetURBState>
 801969e:	4603      	mov	r3, r0
 80196a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80196a2:	7afb      	ldrb	r3, [r7, #11]
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d128      	bne.n	80196fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ac:	68fa      	ldr	r2, [r7, #12]
 80196ae:	8b12      	ldrh	r2, [r2, #24]
 80196b0:	4293      	cmp	r3, r2
 80196b2:	d90e      	bls.n	80196d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196b8:	68fa      	ldr	r2, [r7, #12]
 80196ba:	8b12      	ldrh	r2, [r2, #24]
 80196bc:	1a9a      	subs	r2, r3, r2
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	69db      	ldr	r3, [r3, #28]
 80196c6:	68fa      	ldr	r2, [r7, #12]
 80196c8:	8b12      	ldrh	r2, [r2, #24]
 80196ca:	441a      	add	r2, r3
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	61da      	str	r2, [r3, #28]
 80196d0:	e002      	b.n	80196d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	2200      	movs	r2, #0
 80196d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d004      	beq.n	80196ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	2201      	movs	r2, #1
 80196e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80196e8:	e00e      	b.n	8019708 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	2200      	movs	r2, #0
 80196ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80196f2:	6878      	ldr	r0, [r7, #4]
 80196f4:	f000 f868 	bl	80197c8 <USBH_CDC_TransmitCallback>
      break;
 80196f8:	e006      	b.n	8019708 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80196fa:	7afb      	ldrb	r3, [r7, #11]
 80196fc:	2b02      	cmp	r3, #2
 80196fe:	d103      	bne.n	8019708 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	2201      	movs	r2, #1
 8019704:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8019708:	bf00      	nop
  }
}
 801970a:	bf00      	nop
 801970c:	3710      	adds	r7, #16
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}

08019712 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8019712:	b580      	push	{r7, lr}
 8019714:	b086      	sub	sp, #24
 8019716:	af00      	add	r7, sp, #0
 8019718:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019720:	69db      	ldr	r3, [r3, #28]
 8019722:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8019724:	2300      	movs	r3, #0
 8019726:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8019728:	697b      	ldr	r3, [r7, #20]
 801972a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801972e:	2b03      	cmp	r3, #3
 8019730:	d002      	beq.n	8019738 <CDC_ProcessReception+0x26>
 8019732:	2b04      	cmp	r3, #4
 8019734:	d00e      	beq.n	8019754 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8019736:	e043      	b.n	80197c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	6a19      	ldr	r1, [r3, #32]
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	8b5a      	ldrh	r2, [r3, #26]
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	7b1b      	ldrb	r3, [r3, #12]
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f001 fbf9 	bl	801af3c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	2204      	movs	r2, #4
 801974e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8019752:	e035      	b.n	80197c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	7b1b      	ldrb	r3, [r3, #12]
 8019758:	4619      	mov	r1, r3
 801975a:	6878      	ldr	r0, [r7, #4]
 801975c:	f005 fa82 	bl	801ec64 <USBH_LL_GetURBState>
 8019760:	4603      	mov	r3, r0
 8019762:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8019764:	7cfb      	ldrb	r3, [r7, #19]
 8019766:	2b01      	cmp	r3, #1
 8019768:	d129      	bne.n	80197be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801976a:	697b      	ldr	r3, [r7, #20]
 801976c:	7b1b      	ldrb	r3, [r3, #12]
 801976e:	4619      	mov	r1, r3
 8019770:	6878      	ldr	r0, [r7, #4]
 8019772:	f005 f9e5 	bl	801eb40 <USBH_LL_GetLastXferSize>
 8019776:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801977c:	68fa      	ldr	r2, [r7, #12]
 801977e:	429a      	cmp	r2, r3
 8019780:	d016      	beq.n	80197b0 <CDC_ProcessReception+0x9e>
 8019782:	697b      	ldr	r3, [r7, #20]
 8019784:	8b5b      	ldrh	r3, [r3, #26]
 8019786:	461a      	mov	r2, r3
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	4293      	cmp	r3, r2
 801978c:	d910      	bls.n	80197b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801978e:	697b      	ldr	r3, [r7, #20]
 8019790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	1ad2      	subs	r2, r2, r3
 8019796:	697b      	ldr	r3, [r7, #20]
 8019798:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801979a:	697b      	ldr	r3, [r7, #20]
 801979c:	6a1a      	ldr	r2, [r3, #32]
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	441a      	add	r2, r3
 80197a2:	697b      	ldr	r3, [r7, #20]
 80197a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	2203      	movs	r2, #3
 80197aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80197ae:	e006      	b.n	80197be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80197b0:	697b      	ldr	r3, [r7, #20]
 80197b2:	2200      	movs	r2, #0
 80197b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f000 f80f 	bl	80197dc <USBH_CDC_ReceiveCallback>
      break;
 80197be:	bf00      	nop
  }
}
 80197c0:	bf00      	nop
 80197c2:	3718      	adds	r7, #24
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}

080197c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80197c8:	b480      	push	{r7}
 80197ca:	b083      	sub	sp, #12
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80197d0:	bf00      	nop
 80197d2:	370c      	adds	r7, #12
 80197d4:	46bd      	mov	sp, r7
 80197d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197da:	4770      	bx	lr

080197dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80197dc:	b480      	push	{r7}
 80197de:	b083      	sub	sp, #12
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80197e4:	bf00      	nop
 80197e6:	370c      	adds	r7, #12
 80197e8:	46bd      	mov	sp, r7
 80197ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ee:	4770      	bx	lr

080197f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80197f0:	b480      	push	{r7}
 80197f2:	b083      	sub	sp, #12
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80197f8:	bf00      	nop
 80197fa:	370c      	adds	r7, #12
 80197fc:	46bd      	mov	sp, r7
 80197fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019802:	4770      	bx	lr

08019804 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b084      	sub	sp, #16
 8019808:	af00      	add	r7, sp, #0
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	4613      	mov	r3, r2
 8019810:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d101      	bne.n	801981c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8019818:	2302      	movs	r3, #2
 801981a:	e029      	b.n	8019870 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	79fa      	ldrb	r2, [r7, #7]
 8019820:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2200      	movs	r2, #0
 8019828:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	2200      	movs	r2, #0
 8019830:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8019834:	68f8      	ldr	r0, [r7, #12]
 8019836:	f000 f81f 	bl	8019878 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	2200      	movs	r2, #0
 801983e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	2200      	movs	r2, #0
 8019846:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	2200      	movs	r2, #0
 801984e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	2200      	movs	r2, #0
 8019856:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801985a:	68bb      	ldr	r3, [r7, #8]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d003      	beq.n	8019868 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	68ba      	ldr	r2, [r7, #8]
 8019864:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8019868:	68f8      	ldr	r0, [r7, #12]
 801986a:	f005 f8b5 	bl	801e9d8 <USBH_LL_Init>

  return USBH_OK;
 801986e:	2300      	movs	r3, #0
}
 8019870:	4618      	mov	r0, r3
 8019872:	3710      	adds	r7, #16
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}

08019878 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b084      	sub	sp, #16
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8019880:	2300      	movs	r3, #0
 8019882:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8019884:	2300      	movs	r3, #0
 8019886:	60fb      	str	r3, [r7, #12]
 8019888:	e009      	b.n	801989e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801988a:	687a      	ldr	r2, [r7, #4]
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	33e0      	adds	r3, #224	; 0xe0
 8019890:	009b      	lsls	r3, r3, #2
 8019892:	4413      	add	r3, r2
 8019894:	2200      	movs	r2, #0
 8019896:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	3301      	adds	r3, #1
 801989c:	60fb      	str	r3, [r7, #12]
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	2b0f      	cmp	r3, #15
 80198a2:	d9f2      	bls.n	801988a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80198a4:	2300      	movs	r3, #0
 80198a6:	60fb      	str	r3, [r7, #12]
 80198a8:	e009      	b.n	80198be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80198aa:	687a      	ldr	r2, [r7, #4]
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	4413      	add	r3, r2
 80198b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80198b4:	2200      	movs	r2, #0
 80198b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	3301      	adds	r3, #1
 80198bc:	60fb      	str	r3, [r7, #12]
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198c4:	d3f1      	bcc.n	80198aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	2200      	movs	r2, #0
 80198ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2200      	movs	r2, #0
 80198d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2201      	movs	r2, #1
 80198d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2200      	movs	r2, #0
 80198dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2201      	movs	r2, #1
 80198e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2240      	movs	r2, #64	; 0x40
 80198ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	2200      	movs	r2, #0
 80198f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2200      	movs	r2, #0
 80198f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	2201      	movs	r2, #1
 80198fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	2200      	movs	r2, #0
 8019906:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	2200      	movs	r2, #0
 801990e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	331c      	adds	r3, #28
 8019916:	f44f 7280 	mov.w	r2, #256	; 0x100
 801991a:	2100      	movs	r1, #0
 801991c:	4618      	mov	r0, r3
 801991e:	f005 fcef 	bl	801f300 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8019928:	f44f 7200 	mov.w	r2, #512	; 0x200
 801992c:	2100      	movs	r1, #0
 801992e:	4618      	mov	r0, r3
 8019930:	f005 fce6 	bl	801f300 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	f203 3326 	addw	r3, r3, #806	; 0x326
 801993a:	2212      	movs	r2, #18
 801993c:	2100      	movs	r1, #0
 801993e:	4618      	mov	r0, r3
 8019940:	f005 fcde 	bl	801f300 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801994a:	223e      	movs	r2, #62	; 0x3e
 801994c:	2100      	movs	r1, #0
 801994e:	4618      	mov	r0, r3
 8019950:	f005 fcd6 	bl	801f300 <memset>

  return USBH_OK;
 8019954:	2300      	movs	r3, #0
}
 8019956:	4618      	mov	r0, r3
 8019958:	3710      	adds	r7, #16
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}

0801995e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801995e:	b480      	push	{r7}
 8019960:	b085      	sub	sp, #20
 8019962:	af00      	add	r7, sp, #0
 8019964:	6078      	str	r0, [r7, #4]
 8019966:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8019968:	2300      	movs	r3, #0
 801996a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801996c:	683b      	ldr	r3, [r7, #0]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d016      	beq.n	80199a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8019978:	2b00      	cmp	r3, #0
 801997a:	d10e      	bne.n	801999a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8019982:	1c59      	adds	r1, r3, #1
 8019984:	687a      	ldr	r2, [r7, #4]
 8019986:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 801998a:	687a      	ldr	r2, [r7, #4]
 801998c:	33de      	adds	r3, #222	; 0xde
 801998e:	6839      	ldr	r1, [r7, #0]
 8019990:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8019994:	2300      	movs	r3, #0
 8019996:	73fb      	strb	r3, [r7, #15]
 8019998:	e004      	b.n	80199a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801999a:	2302      	movs	r3, #2
 801999c:	73fb      	strb	r3, [r7, #15]
 801999e:	e001      	b.n	80199a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80199a0:	2302      	movs	r3, #2
 80199a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80199a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80199a6:	4618      	mov	r0, r3
 80199a8:	3714      	adds	r7, #20
 80199aa:	46bd      	mov	sp, r7
 80199ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b0:	4770      	bx	lr

080199b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80199b2:	b480      	push	{r7}
 80199b4:	b085      	sub	sp, #20
 80199b6:	af00      	add	r7, sp, #0
 80199b8:	6078      	str	r0, [r7, #4]
 80199ba:	460b      	mov	r3, r1
 80199bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80199be:	2300      	movs	r3, #0
 80199c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80199c8:	78fa      	ldrb	r2, [r7, #3]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	d204      	bcs.n	80199d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	78fa      	ldrb	r2, [r7, #3]
 80199d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80199d6:	e001      	b.n	80199dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80199d8:	2302      	movs	r3, #2
 80199da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80199dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3714      	adds	r7, #20
 80199e2:	46bd      	mov	sp, r7
 80199e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e8:	4770      	bx	lr

080199ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80199ea:	b480      	push	{r7}
 80199ec:	b087      	sub	sp, #28
 80199ee:	af00      	add	r7, sp, #0
 80199f0:	6078      	str	r0, [r7, #4]
 80199f2:	4608      	mov	r0, r1
 80199f4:	4611      	mov	r1, r2
 80199f6:	461a      	mov	r2, r3
 80199f8:	4603      	mov	r3, r0
 80199fa:	70fb      	strb	r3, [r7, #3]
 80199fc:	460b      	mov	r3, r1
 80199fe:	70bb      	strb	r3, [r7, #2]
 8019a00:	4613      	mov	r3, r2
 8019a02:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8019a04:	2300      	movs	r3, #0
 8019a06:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8019a08:	2300      	movs	r3, #0
 8019a0a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8019a12:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8019a14:	e025      	b.n	8019a62 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8019a16:	7dfb      	ldrb	r3, [r7, #23]
 8019a18:	221a      	movs	r2, #26
 8019a1a:	fb02 f303 	mul.w	r3, r2, r3
 8019a1e:	3308      	adds	r3, #8
 8019a20:	68fa      	ldr	r2, [r7, #12]
 8019a22:	4413      	add	r3, r2
 8019a24:	3302      	adds	r3, #2
 8019a26:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8019a28:	693b      	ldr	r3, [r7, #16]
 8019a2a:	795b      	ldrb	r3, [r3, #5]
 8019a2c:	78fa      	ldrb	r2, [r7, #3]
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d002      	beq.n	8019a38 <USBH_FindInterface+0x4e>
 8019a32:	78fb      	ldrb	r3, [r7, #3]
 8019a34:	2bff      	cmp	r3, #255	; 0xff
 8019a36:	d111      	bne.n	8019a5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8019a38:	693b      	ldr	r3, [r7, #16]
 8019a3a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8019a3c:	78ba      	ldrb	r2, [r7, #2]
 8019a3e:	429a      	cmp	r2, r3
 8019a40:	d002      	beq.n	8019a48 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8019a42:	78bb      	ldrb	r3, [r7, #2]
 8019a44:	2bff      	cmp	r3, #255	; 0xff
 8019a46:	d109      	bne.n	8019a5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8019a4c:	787a      	ldrb	r2, [r7, #1]
 8019a4e:	429a      	cmp	r2, r3
 8019a50:	d002      	beq.n	8019a58 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8019a52:	787b      	ldrb	r3, [r7, #1]
 8019a54:	2bff      	cmp	r3, #255	; 0xff
 8019a56:	d101      	bne.n	8019a5c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8019a58:	7dfb      	ldrb	r3, [r7, #23]
 8019a5a:	e006      	b.n	8019a6a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8019a5c:	7dfb      	ldrb	r3, [r7, #23]
 8019a5e:	3301      	adds	r3, #1
 8019a60:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8019a62:	7dfb      	ldrb	r3, [r7, #23]
 8019a64:	2b01      	cmp	r3, #1
 8019a66:	d9d6      	bls.n	8019a16 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8019a68:	23ff      	movs	r3, #255	; 0xff
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	371c      	adds	r7, #28
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a74:	4770      	bx	lr

08019a76 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8019a76:	b580      	push	{r7, lr}
 8019a78:	b082      	sub	sp, #8
 8019a7a:	af00      	add	r7, sp, #0
 8019a7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f004 ffe6 	bl	801ea50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8019a84:	2101      	movs	r1, #1
 8019a86:	6878      	ldr	r0, [r7, #4]
 8019a88:	f005 f8ff 	bl	801ec8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8019a8c:	2300      	movs	r3, #0
}
 8019a8e:	4618      	mov	r0, r3
 8019a90:	3708      	adds	r7, #8
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd80      	pop	{r7, pc}
	...

08019a98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b088      	sub	sp, #32
 8019a9c:	af04      	add	r7, sp, #16
 8019a9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8019aa0:	2302      	movs	r3, #2
 8019aa2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8019aae:	b2db      	uxtb	r3, r3
 8019ab0:	2b01      	cmp	r3, #1
 8019ab2:	d102      	bne.n	8019aba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2203      	movs	r2, #3
 8019ab8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	2b0b      	cmp	r3, #11
 8019ac2:	f200 81be 	bhi.w	8019e42 <USBH_Process+0x3aa>
 8019ac6:	a201      	add	r2, pc, #4	; (adr r2, 8019acc <USBH_Process+0x34>)
 8019ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019acc:	08019afd 	.word	0x08019afd
 8019ad0:	08019b2f 	.word	0x08019b2f
 8019ad4:	08019b97 	.word	0x08019b97
 8019ad8:	08019ddd 	.word	0x08019ddd
 8019adc:	08019e43 	.word	0x08019e43
 8019ae0:	08019c3b 	.word	0x08019c3b
 8019ae4:	08019d83 	.word	0x08019d83
 8019ae8:	08019c71 	.word	0x08019c71
 8019aec:	08019c91 	.word	0x08019c91
 8019af0:	08019cb1 	.word	0x08019cb1
 8019af4:	08019cf5 	.word	0x08019cf5
 8019af8:	08019dc5 	.word	0x08019dc5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8019b02:	b2db      	uxtb	r3, r3
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	f000 819e 	beq.w	8019e46 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	2201      	movs	r2, #1
 8019b0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8019b10:	20c8      	movs	r0, #200	; 0xc8
 8019b12:	f005 f901 	bl	801ed18 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8019b16:	6878      	ldr	r0, [r7, #4]
 8019b18:	f004 fff7 	bl	801eb0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	2200      	movs	r2, #0
 8019b20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	2200      	movs	r2, #0
 8019b28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8019b2c:	e18b      	b.n	8019e46 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	d107      	bne.n	8019b48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2202      	movs	r2, #2
 8019b44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019b46:	e18d      	b.n	8019e64 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8019b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019b52:	d914      	bls.n	8019b7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8019b5a:	3301      	adds	r3, #1
 8019b5c:	b2da      	uxtb	r2, r3
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8019b6a:	2b03      	cmp	r3, #3
 8019b6c:	d903      	bls.n	8019b76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	220d      	movs	r2, #13
 8019b72:	701a      	strb	r2, [r3, #0]
      break;
 8019b74:	e176      	b.n	8019e64 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	701a      	strb	r2, [r3, #0]
      break;
 8019b7c:	e172      	b.n	8019e64 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8019b84:	f103 020a 	add.w	r2, r3, #10
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8019b8e:	200a      	movs	r0, #10
 8019b90:	f005 f8c2 	bl	801ed18 <USBH_Delay>
      break;
 8019b94:	e166      	b.n	8019e64 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d005      	beq.n	8019bac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019ba6:	2104      	movs	r1, #4
 8019ba8:	6878      	ldr	r0, [r7, #4]
 8019baa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8019bac:	2064      	movs	r0, #100	; 0x64
 8019bae:	f005 f8b3 	bl	801ed18 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	f004 ff82 	bl	801eabc <USBH_LL_GetSpeed>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	461a      	mov	r2, r3
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	2205      	movs	r2, #5
 8019bc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8019bc8:	2100      	movs	r1, #0
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	f001 fa03 	bl	801afd6 <USBH_AllocPipe>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8019bd8:	2180      	movs	r1, #128	; 0x80
 8019bda:	6878      	ldr	r0, [r7, #4]
 8019bdc:	f001 f9fb 	bl	801afd6 <USBH_AllocPipe>
 8019be0:	4603      	mov	r3, r0
 8019be2:	461a      	mov	r2, r3
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	7919      	ldrb	r1, [r3, #4]
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8019bf8:	687a      	ldr	r2, [r7, #4]
 8019bfa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8019bfc:	b292      	uxth	r2, r2
 8019bfe:	9202      	str	r2, [sp, #8]
 8019c00:	2200      	movs	r2, #0
 8019c02:	9201      	str	r2, [sp, #4]
 8019c04:	9300      	str	r3, [sp, #0]
 8019c06:	4603      	mov	r3, r0
 8019c08:	2280      	movs	r2, #128	; 0x80
 8019c0a:	6878      	ldr	r0, [r7, #4]
 8019c0c:	f001 f9b4 	bl	801af78 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	7959      	ldrb	r1, [r3, #5]
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8019c20:	687a      	ldr	r2, [r7, #4]
 8019c22:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8019c24:	b292      	uxth	r2, r2
 8019c26:	9202      	str	r2, [sp, #8]
 8019c28:	2200      	movs	r2, #0
 8019c2a:	9201      	str	r2, [sp, #4]
 8019c2c:	9300      	str	r3, [sp, #0]
 8019c2e:	4603      	mov	r3, r0
 8019c30:	2200      	movs	r2, #0
 8019c32:	6878      	ldr	r0, [r7, #4]
 8019c34:	f001 f9a0 	bl	801af78 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019c38:	e114      	b.n	8019e64 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8019c3a:	6878      	ldr	r0, [r7, #4]
 8019c3c:	f000 f918 	bl	8019e70 <USBH_HandleEnum>
 8019c40:	4603      	mov	r3, r0
 8019c42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8019c44:	7bbb      	ldrb	r3, [r7, #14]
 8019c46:	b2db      	uxtb	r3, r3
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	f040 80fe 	bne.w	8019e4a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	2200      	movs	r2, #0
 8019c52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8019c5c:	2b01      	cmp	r3, #1
 8019c5e:	d103      	bne.n	8019c68 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	2208      	movs	r2, #8
 8019c64:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8019c66:	e0f0      	b.n	8019e4a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2207      	movs	r2, #7
 8019c6c:	701a      	strb	r2, [r3, #0]
      break;
 8019c6e:	e0ec      	b.n	8019e4a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	f000 80e9 	beq.w	8019e4e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019c82:	2101      	movs	r1, #1
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	2208      	movs	r2, #8
 8019c8c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8019c8e:	e0de      	b.n	8019e4e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	4619      	mov	r1, r3
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f000 fc2c 	bl	801a4f8 <USBH_SetCfg>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	f040 80d5 	bne.w	8019e52 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	2209      	movs	r2, #9
 8019cac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019cae:	e0d0      	b.n	8019e52 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8019cb6:	f003 0320 	and.w	r3, r3, #32
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d016      	beq.n	8019cec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8019cbe:	2101      	movs	r1, #1
 8019cc0:	6878      	ldr	r0, [r7, #4]
 8019cc2:	f000 fc3c 	bl	801a53e <USBH_SetFeature>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8019cca:	7bbb      	ldrb	r3, [r7, #14]
 8019ccc:	b2db      	uxtb	r3, r3
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d103      	bne.n	8019cda <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	220a      	movs	r2, #10
 8019cd6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019cd8:	e0bd      	b.n	8019e56 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8019cda:	7bbb      	ldrb	r3, [r7, #14]
 8019cdc:	b2db      	uxtb	r3, r3
 8019cde:	2b03      	cmp	r3, #3
 8019ce0:	f040 80b9 	bne.w	8019e56 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	220a      	movs	r2, #10
 8019ce8:	701a      	strb	r2, [r3, #0]
      break;
 8019cea:	e0b4      	b.n	8019e56 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	220a      	movs	r2, #10
 8019cf0:	701a      	strb	r2, [r3, #0]
      break;
 8019cf2:	e0b0      	b.n	8019e56 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	f000 80ad 	beq.w	8019e5a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2200      	movs	r2, #0
 8019d04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8019d08:	2300      	movs	r3, #0
 8019d0a:	73fb      	strb	r3, [r7, #15]
 8019d0c:	e016      	b.n	8019d3c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8019d0e:	7bfa      	ldrb	r2, [r7, #15]
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	32de      	adds	r2, #222	; 0xde
 8019d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d18:	791a      	ldrb	r2, [r3, #4]
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8019d20:	429a      	cmp	r2, r3
 8019d22:	d108      	bne.n	8019d36 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8019d24:	7bfa      	ldrb	r2, [r7, #15]
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	32de      	adds	r2, #222	; 0xde
 8019d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8019d34:	e005      	b.n	8019d42 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8019d36:	7bfb      	ldrb	r3, [r7, #15]
 8019d38:	3301      	adds	r3, #1
 8019d3a:	73fb      	strb	r3, [r7, #15]
 8019d3c:	7bfb      	ldrb	r3, [r7, #15]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d0e5      	beq.n	8019d0e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d016      	beq.n	8019d7a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019d52:	689b      	ldr	r3, [r3, #8]
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	4798      	blx	r3
 8019d58:	4603      	mov	r3, r0
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d109      	bne.n	8019d72 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2206      	movs	r2, #6
 8019d62:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019d6a:	2103      	movs	r1, #3
 8019d6c:	6878      	ldr	r0, [r7, #4]
 8019d6e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019d70:	e073      	b.n	8019e5a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	220d      	movs	r2, #13
 8019d76:	701a      	strb	r2, [r3, #0]
      break;
 8019d78:	e06f      	b.n	8019e5a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	220d      	movs	r2, #13
 8019d7e:	701a      	strb	r2, [r3, #0]
      break;
 8019d80:	e06b      	b.n	8019e5a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d017      	beq.n	8019dbc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019d92:	691b      	ldr	r3, [r3, #16]
 8019d94:	6878      	ldr	r0, [r7, #4]
 8019d96:	4798      	blx	r3
 8019d98:	4603      	mov	r3, r0
 8019d9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8019d9c:	7bbb      	ldrb	r3, [r7, #14]
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d103      	bne.n	8019dac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	220b      	movs	r2, #11
 8019da8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019daa:	e058      	b.n	8019e5e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8019dac:	7bbb      	ldrb	r3, [r7, #14]
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	2b02      	cmp	r3, #2
 8019db2:	d154      	bne.n	8019e5e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	220d      	movs	r2, #13
 8019db8:	701a      	strb	r2, [r3, #0]
      break;
 8019dba:	e050      	b.n	8019e5e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	220d      	movs	r2, #13
 8019dc0:	701a      	strb	r2, [r3, #0]
      break;
 8019dc2:	e04c      	b.n	8019e5e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d049      	beq.n	8019e62 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019dd4:	695b      	ldr	r3, [r3, #20]
 8019dd6:	6878      	ldr	r0, [r7, #4]
 8019dd8:	4798      	blx	r3
      }
      break;
 8019dda:	e042      	b.n	8019e62 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2200      	movs	r2, #0
 8019de0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8019de4:	6878      	ldr	r0, [r7, #4]
 8019de6:	f7ff fd47 	bl	8019878 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d009      	beq.n	8019e08 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	2200      	movs	r2, #0
 8019e04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d005      	beq.n	8019e1e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019e18:	2105      	movs	r1, #5
 8019e1a:	6878      	ldr	r0, [r7, #4]
 8019e1c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8019e24:	b2db      	uxtb	r3, r3
 8019e26:	2b01      	cmp	r3, #1
 8019e28:	d107      	bne.n	8019e3a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f7ff fe1f 	bl	8019a76 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8019e38:	e014      	b.n	8019e64 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8019e3a:	6878      	ldr	r0, [r7, #4]
 8019e3c:	f004 fe08 	bl	801ea50 <USBH_LL_Start>
      break;
 8019e40:	e010      	b.n	8019e64 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8019e42:	bf00      	nop
 8019e44:	e00e      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e46:	bf00      	nop
 8019e48:	e00c      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e4a:	bf00      	nop
 8019e4c:	e00a      	b.n	8019e64 <USBH_Process+0x3cc>
    break;
 8019e4e:	bf00      	nop
 8019e50:	e008      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e52:	bf00      	nop
 8019e54:	e006      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e56:	bf00      	nop
 8019e58:	e004      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e5a:	bf00      	nop
 8019e5c:	e002      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e5e:	bf00      	nop
 8019e60:	e000      	b.n	8019e64 <USBH_Process+0x3cc>
      break;
 8019e62:	bf00      	nop
  }
  return USBH_OK;
 8019e64:	2300      	movs	r3, #0
}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3710      	adds	r7, #16
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}
 8019e6e:	bf00      	nop

08019e70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b088      	sub	sp, #32
 8019e74:	af04      	add	r7, sp, #16
 8019e76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8019e78:	2301      	movs	r3, #1
 8019e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	785b      	ldrb	r3, [r3, #1]
 8019e84:	2b07      	cmp	r3, #7
 8019e86:	f200 81c1 	bhi.w	801a20c <USBH_HandleEnum+0x39c>
 8019e8a:	a201      	add	r2, pc, #4	; (adr r2, 8019e90 <USBH_HandleEnum+0x20>)
 8019e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e90:	08019eb1 	.word	0x08019eb1
 8019e94:	08019f6f 	.word	0x08019f6f
 8019e98:	08019fd9 	.word	0x08019fd9
 8019e9c:	0801a067 	.word	0x0801a067
 8019ea0:	0801a0d1 	.word	0x0801a0d1
 8019ea4:	0801a141 	.word	0x0801a141
 8019ea8:	0801a187 	.word	0x0801a187
 8019eac:	0801a1cd 	.word	0x0801a1cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8019eb0:	2108      	movs	r1, #8
 8019eb2:	6878      	ldr	r0, [r7, #4]
 8019eb4:	f000 fa50 	bl	801a358 <USBH_Get_DevDesc>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8019ebc:	7bbb      	ldrb	r3, [r7, #14]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d130      	bne.n	8019f24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2201      	movs	r2, #1
 8019ed0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	7919      	ldrb	r1, [r3, #4]
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8019ee2:	687a      	ldr	r2, [r7, #4]
 8019ee4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8019ee6:	b292      	uxth	r2, r2
 8019ee8:	9202      	str	r2, [sp, #8]
 8019eea:	2200      	movs	r2, #0
 8019eec:	9201      	str	r2, [sp, #4]
 8019eee:	9300      	str	r3, [sp, #0]
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	2280      	movs	r2, #128	; 0x80
 8019ef4:	6878      	ldr	r0, [r7, #4]
 8019ef6:	f001 f83f 	bl	801af78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	7959      	ldrb	r1, [r3, #5]
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8019f0a:	687a      	ldr	r2, [r7, #4]
 8019f0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8019f0e:	b292      	uxth	r2, r2
 8019f10:	9202      	str	r2, [sp, #8]
 8019f12:	2200      	movs	r2, #0
 8019f14:	9201      	str	r2, [sp, #4]
 8019f16:	9300      	str	r3, [sp, #0]
 8019f18:	4603      	mov	r3, r0
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	6878      	ldr	r0, [r7, #4]
 8019f1e:	f001 f82b 	bl	801af78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8019f22:	e175      	b.n	801a210 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8019f24:	7bbb      	ldrb	r3, [r7, #14]
 8019f26:	2b03      	cmp	r3, #3
 8019f28:	f040 8172 	bne.w	801a210 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8019f32:	3301      	adds	r3, #1
 8019f34:	b2da      	uxtb	r2, r3
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8019f42:	2b03      	cmp	r3, #3
 8019f44:	d903      	bls.n	8019f4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	220d      	movs	r2, #13
 8019f4a:	701a      	strb	r2, [r3, #0]
      break;
 8019f4c:	e160      	b.n	801a210 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	795b      	ldrb	r3, [r3, #5]
 8019f52:	4619      	mov	r1, r3
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f001 f85f 	bl	801b018 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	791b      	ldrb	r3, [r3, #4]
 8019f5e:	4619      	mov	r1, r3
 8019f60:	6878      	ldr	r0, [r7, #4]
 8019f62:	f001 f859 	bl	801b018 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	701a      	strb	r2, [r3, #0]
      break;
 8019f6c:	e150      	b.n	801a210 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8019f6e:	2112      	movs	r1, #18
 8019f70:	6878      	ldr	r0, [r7, #4]
 8019f72:	f000 f9f1 	bl	801a358 <USBH_Get_DevDesc>
 8019f76:	4603      	mov	r3, r0
 8019f78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8019f7a:	7bbb      	ldrb	r3, [r7, #14]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d103      	bne.n	8019f88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2202      	movs	r2, #2
 8019f84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8019f86:	e145      	b.n	801a214 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8019f88:	7bbb      	ldrb	r3, [r7, #14]
 8019f8a:	2b03      	cmp	r3, #3
 8019f8c:	f040 8142 	bne.w	801a214 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8019f96:	3301      	adds	r3, #1
 8019f98:	b2da      	uxtb	r2, r3
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8019fa6:	2b03      	cmp	r3, #3
 8019fa8:	d903      	bls.n	8019fb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	220d      	movs	r2, #13
 8019fae:	701a      	strb	r2, [r3, #0]
      break;
 8019fb0:	e130      	b.n	801a214 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	795b      	ldrb	r3, [r3, #5]
 8019fb6:	4619      	mov	r1, r3
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	f001 f82d 	bl	801b018 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	791b      	ldrb	r3, [r3, #4]
 8019fc2:	4619      	mov	r1, r3
 8019fc4:	6878      	ldr	r0, [r7, #4]
 8019fc6:	f001 f827 	bl	801b018 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2200      	movs	r2, #0
 8019fce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	701a      	strb	r2, [r3, #0]
      break;
 8019fd6:	e11d      	b.n	801a214 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8019fd8:	2101      	movs	r1, #1
 8019fda:	6878      	ldr	r0, [r7, #4]
 8019fdc:	f000 fa68 	bl	801a4b0 <USBH_SetAddress>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8019fe4:	7bbb      	ldrb	r3, [r7, #14]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d132      	bne.n	801a050 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8019fea:	2002      	movs	r0, #2
 8019fec:	f004 fe94 	bl	801ed18 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	2203      	movs	r2, #3
 8019ffc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	7919      	ldrb	r1, [r3, #4]
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801a00e:	687a      	ldr	r2, [r7, #4]
 801a010:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801a012:	b292      	uxth	r2, r2
 801a014:	9202      	str	r2, [sp, #8]
 801a016:	2200      	movs	r2, #0
 801a018:	9201      	str	r2, [sp, #4]
 801a01a:	9300      	str	r3, [sp, #0]
 801a01c:	4603      	mov	r3, r0
 801a01e:	2280      	movs	r2, #128	; 0x80
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	f000 ffa9 	bl	801af78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	7959      	ldrb	r1, [r3, #5]
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801a036:	687a      	ldr	r2, [r7, #4]
 801a038:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801a03a:	b292      	uxth	r2, r2
 801a03c:	9202      	str	r2, [sp, #8]
 801a03e:	2200      	movs	r2, #0
 801a040:	9201      	str	r2, [sp, #4]
 801a042:	9300      	str	r3, [sp, #0]
 801a044:	4603      	mov	r3, r0
 801a046:	2200      	movs	r2, #0
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f000 ff95 	bl	801af78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801a04e:	e0e3      	b.n	801a218 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801a050:	7bbb      	ldrb	r3, [r7, #14]
 801a052:	2b03      	cmp	r3, #3
 801a054:	f040 80e0 	bne.w	801a218 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	220d      	movs	r2, #13
 801a05c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2200      	movs	r2, #0
 801a062:	705a      	strb	r2, [r3, #1]
      break;
 801a064:	e0d8      	b.n	801a218 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801a066:	2109      	movs	r1, #9
 801a068:	6878      	ldr	r0, [r7, #4]
 801a06a:	f000 f99d 	bl	801a3a8 <USBH_Get_CfgDesc>
 801a06e:	4603      	mov	r3, r0
 801a070:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801a072:	7bbb      	ldrb	r3, [r7, #14]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d103      	bne.n	801a080 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2204      	movs	r2, #4
 801a07c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801a07e:	e0cd      	b.n	801a21c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801a080:	7bbb      	ldrb	r3, [r7, #14]
 801a082:	2b03      	cmp	r3, #3
 801a084:	f040 80ca 	bne.w	801a21c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801a08e:	3301      	adds	r3, #1
 801a090:	b2da      	uxtb	r2, r3
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801a09e:	2b03      	cmp	r3, #3
 801a0a0:	d903      	bls.n	801a0aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	220d      	movs	r2, #13
 801a0a6:	701a      	strb	r2, [r3, #0]
      break;
 801a0a8:	e0b8      	b.n	801a21c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	795b      	ldrb	r3, [r3, #5]
 801a0ae:	4619      	mov	r1, r3
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	f000 ffb1 	bl	801b018 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	791b      	ldrb	r3, [r3, #4]
 801a0ba:	4619      	mov	r1, r3
 801a0bc:	6878      	ldr	r0, [r7, #4]
 801a0be:	f000 ffab 	bl	801b018 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	701a      	strb	r2, [r3, #0]
      break;
 801a0ce:	e0a5      	b.n	801a21c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801a0d6:	4619      	mov	r1, r3
 801a0d8:	6878      	ldr	r0, [r7, #4]
 801a0da:	f000 f965 	bl	801a3a8 <USBH_Get_CfgDesc>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801a0e2:	7bbb      	ldrb	r3, [r7, #14]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d103      	bne.n	801a0f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	2205      	movs	r2, #5
 801a0ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801a0ee:	e097      	b.n	801a220 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801a0f0:	7bbb      	ldrb	r3, [r7, #14]
 801a0f2:	2b03      	cmp	r3, #3
 801a0f4:	f040 8094 	bne.w	801a220 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801a0fe:	3301      	adds	r3, #1
 801a100:	b2da      	uxtb	r2, r3
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801a10e:	2b03      	cmp	r3, #3
 801a110:	d903      	bls.n	801a11a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	220d      	movs	r2, #13
 801a116:	701a      	strb	r2, [r3, #0]
      break;
 801a118:	e082      	b.n	801a220 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	795b      	ldrb	r3, [r3, #5]
 801a11e:	4619      	mov	r1, r3
 801a120:	6878      	ldr	r0, [r7, #4]
 801a122:	f000 ff79 	bl	801b018 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	791b      	ldrb	r3, [r3, #4]
 801a12a:	4619      	mov	r1, r3
 801a12c:	6878      	ldr	r0, [r7, #4]
 801a12e:	f000 ff73 	bl	801b018 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	2200      	movs	r2, #0
 801a136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	2200      	movs	r2, #0
 801a13c:	701a      	strb	r2, [r3, #0]
      break;
 801a13e:	e06f      	b.n	801a220 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801a146:	2b00      	cmp	r3, #0
 801a148:	d019      	beq.n	801a17e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801a156:	23ff      	movs	r3, #255	; 0xff
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f000 f949 	bl	801a3f0 <USBH_Get_StringDesc>
 801a15e:	4603      	mov	r3, r0
 801a160:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801a162:	7bbb      	ldrb	r3, [r7, #14]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d103      	bne.n	801a170 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	2206      	movs	r2, #6
 801a16c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801a16e:	e059      	b.n	801a224 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801a170:	7bbb      	ldrb	r3, [r7, #14]
 801a172:	2b03      	cmp	r3, #3
 801a174:	d156      	bne.n	801a224 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2206      	movs	r2, #6
 801a17a:	705a      	strb	r2, [r3, #1]
      break;
 801a17c:	e052      	b.n	801a224 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2206      	movs	r2, #6
 801a182:	705a      	strb	r2, [r3, #1]
      break;
 801a184:	e04e      	b.n	801a224 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d019      	beq.n	801a1c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801a19c:	23ff      	movs	r3, #255	; 0xff
 801a19e:	6878      	ldr	r0, [r7, #4]
 801a1a0:	f000 f926 	bl	801a3f0 <USBH_Get_StringDesc>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801a1a8:	7bbb      	ldrb	r3, [r7, #14]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d103      	bne.n	801a1b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2207      	movs	r2, #7
 801a1b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801a1b4:	e038      	b.n	801a228 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801a1b6:	7bbb      	ldrb	r3, [r7, #14]
 801a1b8:	2b03      	cmp	r3, #3
 801a1ba:	d135      	bne.n	801a228 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2207      	movs	r2, #7
 801a1c0:	705a      	strb	r2, [r3, #1]
      break;
 801a1c2:	e031      	b.n	801a228 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	2207      	movs	r2, #7
 801a1c8:	705a      	strb	r2, [r3, #1]
      break;
 801a1ca:	e02d      	b.n	801a228 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d017      	beq.n	801a206 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801a1e2:	23ff      	movs	r3, #255	; 0xff
 801a1e4:	6878      	ldr	r0, [r7, #4]
 801a1e6:	f000 f903 	bl	801a3f0 <USBH_Get_StringDesc>
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801a1ee:	7bbb      	ldrb	r3, [r7, #14]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d102      	bne.n	801a1fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801a1f8:	e018      	b.n	801a22c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801a1fa:	7bbb      	ldrb	r3, [r7, #14]
 801a1fc:	2b03      	cmp	r3, #3
 801a1fe:	d115      	bne.n	801a22c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 801a200:	2300      	movs	r3, #0
 801a202:	73fb      	strb	r3, [r7, #15]
      break;
 801a204:	e012      	b.n	801a22c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 801a206:	2300      	movs	r3, #0
 801a208:	73fb      	strb	r3, [r7, #15]
      break;
 801a20a:	e00f      	b.n	801a22c <USBH_HandleEnum+0x3bc>

    default:
      break;
 801a20c:	bf00      	nop
 801a20e:	e00e      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a210:	bf00      	nop
 801a212:	e00c      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a214:	bf00      	nop
 801a216:	e00a      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a218:	bf00      	nop
 801a21a:	e008      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a21c:	bf00      	nop
 801a21e:	e006      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a220:	bf00      	nop
 801a222:	e004      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a224:	bf00      	nop
 801a226:	e002      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a228:	bf00      	nop
 801a22a:	e000      	b.n	801a22e <USBH_HandleEnum+0x3be>
      break;
 801a22c:	bf00      	nop
  }
  return Status;
 801a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a230:	4618      	mov	r0, r3
 801a232:	3710      	adds	r7, #16
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}

0801a238 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801a238:	b480      	push	{r7}
 801a23a:	b083      	sub	sp, #12
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
 801a240:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	683a      	ldr	r2, [r7, #0]
 801a246:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801a24a:	bf00      	nop
 801a24c:	370c      	adds	r7, #12
 801a24e:	46bd      	mov	sp, r7
 801a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a254:	4770      	bx	lr

0801a256 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801a256:	b580      	push	{r7, lr}
 801a258:	b082      	sub	sp, #8
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801a264:	1c5a      	adds	r2, r3, #1
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801a26c:	6878      	ldr	r0, [r7, #4]
 801a26e:	f000 f804 	bl	801a27a <USBH_HandleSof>
}
 801a272:	bf00      	nop
 801a274:	3708      	adds	r7, #8
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}

0801a27a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801a27a:	b580      	push	{r7, lr}
 801a27c:	b082      	sub	sp, #8
 801a27e:	af00      	add	r7, sp, #0
 801a280:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	b2db      	uxtb	r3, r3
 801a288:	2b0b      	cmp	r3, #11
 801a28a:	d10a      	bne.n	801a2a2 <USBH_HandleSof+0x28>
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801a292:	2b00      	cmp	r3, #0
 801a294:	d005      	beq.n	801a2a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801a29c:	699b      	ldr	r3, [r3, #24]
 801a29e:	6878      	ldr	r0, [r7, #4]
 801a2a0:	4798      	blx	r3
  }
}
 801a2a2:	bf00      	nop
 801a2a4:	3708      	adds	r7, #8
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd80      	pop	{r7, pc}

0801a2aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801a2aa:	b480      	push	{r7}
 801a2ac:	b083      	sub	sp, #12
 801a2ae:	af00      	add	r7, sp, #0
 801a2b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	2201      	movs	r2, #1
 801a2b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801a2ba:	bf00      	nop
}
 801a2bc:	370c      	adds	r7, #12
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c4:	4770      	bx	lr

0801a2c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801a2c6:	b480      	push	{r7}
 801a2c8:	b083      	sub	sp, #12
 801a2ca:	af00      	add	r7, sp, #0
 801a2cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801a2d6:	bf00      	nop
}
 801a2d8:	370c      	adds	r7, #12
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e0:	4770      	bx	lr

0801a2e2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801a2e2:	b480      	push	{r7}
 801a2e4:	b083      	sub	sp, #12
 801a2e6:	af00      	add	r7, sp, #0
 801a2e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	2201      	movs	r2, #1
 801a2ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801a302:	2300      	movs	r3, #0
}
 801a304:	4618      	mov	r0, r3
 801a306:	370c      	adds	r7, #12
 801a308:	46bd      	mov	sp, r7
 801a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a30e:	4770      	bx	lr

0801a310 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b082      	sub	sp, #8
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2201      	movs	r2, #1
 801a31c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2200      	movs	r2, #0
 801a324:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	2200      	movs	r2, #0
 801a32c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801a330:	6878      	ldr	r0, [r7, #4]
 801a332:	f004 fba8 	bl	801ea86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	791b      	ldrb	r3, [r3, #4]
 801a33a:	4619      	mov	r1, r3
 801a33c:	6878      	ldr	r0, [r7, #4]
 801a33e:	f000 fe6b 	bl	801b018 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	795b      	ldrb	r3, [r3, #5]
 801a346:	4619      	mov	r1, r3
 801a348:	6878      	ldr	r0, [r7, #4]
 801a34a:	f000 fe65 	bl	801b018 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801a34e:	2300      	movs	r3, #0
}
 801a350:	4618      	mov	r0, r3
 801a352:	3708      	adds	r7, #8
 801a354:	46bd      	mov	sp, r7
 801a356:	bd80      	pop	{r7, pc}

0801a358 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b086      	sub	sp, #24
 801a35c:	af02      	add	r7, sp, #8
 801a35e:	6078      	str	r0, [r7, #4]
 801a360:	460b      	mov	r3, r1
 801a362:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801a36a:	78fb      	ldrb	r3, [r7, #3]
 801a36c:	b29b      	uxth	r3, r3
 801a36e:	9300      	str	r3, [sp, #0]
 801a370:	4613      	mov	r3, r2
 801a372:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a376:	2100      	movs	r1, #0
 801a378:	6878      	ldr	r0, [r7, #4]
 801a37a:	f000 f864 	bl	801a446 <USBH_GetDescriptor>
 801a37e:	4603      	mov	r3, r0
 801a380:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 801a382:	7bfb      	ldrb	r3, [r7, #15]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d10a      	bne.n	801a39e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801a394:	78fa      	ldrb	r2, [r7, #3]
 801a396:	b292      	uxth	r2, r2
 801a398:	4619      	mov	r1, r3
 801a39a:	f000 f919 	bl	801a5d0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3710      	adds	r7, #16
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}

0801a3a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b086      	sub	sp, #24
 801a3ac:	af02      	add	r7, sp, #8
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	460b      	mov	r3, r1
 801a3b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	331c      	adds	r3, #28
 801a3b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801a3ba:	887b      	ldrh	r3, [r7, #2]
 801a3bc:	9300      	str	r3, [sp, #0]
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a3c4:	2100      	movs	r1, #0
 801a3c6:	6878      	ldr	r0, [r7, #4]
 801a3c8:	f000 f83d 	bl	801a446 <USBH_GetDescriptor>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801a3d0:	7bfb      	ldrb	r3, [r7, #15]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d107      	bne.n	801a3e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 801a3d6:	887b      	ldrh	r3, [r7, #2]
 801a3d8:	461a      	mov	r2, r3
 801a3da:	68b9      	ldr	r1, [r7, #8]
 801a3dc:	6878      	ldr	r0, [r7, #4]
 801a3de:	f000 f987 	bl	801a6f0 <USBH_ParseCfgDesc>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801a3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	3710      	adds	r7, #16
 801a3ec:	46bd      	mov	sp, r7
 801a3ee:	bd80      	pop	{r7, pc}

0801a3f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b088      	sub	sp, #32
 801a3f4:	af02      	add	r7, sp, #8
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	607a      	str	r2, [r7, #4]
 801a3fa:	461a      	mov	r2, r3
 801a3fc:	460b      	mov	r3, r1
 801a3fe:	72fb      	strb	r3, [r7, #11]
 801a400:	4613      	mov	r3, r2
 801a402:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 801a404:	7afb      	ldrb	r3, [r7, #11]
 801a406:	b29b      	uxth	r3, r3
 801a408:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801a40c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801a414:	893b      	ldrh	r3, [r7, #8]
 801a416:	9300      	str	r3, [sp, #0]
 801a418:	460b      	mov	r3, r1
 801a41a:	2100      	movs	r1, #0
 801a41c:	68f8      	ldr	r0, [r7, #12]
 801a41e:	f000 f812 	bl	801a446 <USBH_GetDescriptor>
 801a422:	4603      	mov	r3, r0
 801a424:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801a426:	7dfb      	ldrb	r3, [r7, #23]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d107      	bne.n	801a43c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801a432:	893a      	ldrh	r2, [r7, #8]
 801a434:	6879      	ldr	r1, [r7, #4]
 801a436:	4618      	mov	r0, r3
 801a438:	f000 fafe 	bl	801aa38 <USBH_ParseStringDesc>
  }

  return status;
 801a43c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a43e:	4618      	mov	r0, r3
 801a440:	3718      	adds	r7, #24
 801a442:	46bd      	mov	sp, r7
 801a444:	bd80      	pop	{r7, pc}

0801a446 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801a446:	b580      	push	{r7, lr}
 801a448:	b084      	sub	sp, #16
 801a44a:	af00      	add	r7, sp, #0
 801a44c:	60f8      	str	r0, [r7, #12]
 801a44e:	607b      	str	r3, [r7, #4]
 801a450:	460b      	mov	r3, r1
 801a452:	72fb      	strb	r3, [r7, #11]
 801a454:	4613      	mov	r3, r2
 801a456:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	789b      	ldrb	r3, [r3, #2]
 801a45c:	2b01      	cmp	r3, #1
 801a45e:	d11c      	bne.n	801a49a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801a460:	7afb      	ldrb	r3, [r7, #11]
 801a462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a466:	b2da      	uxtb	r2, r3
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	2206      	movs	r2, #6
 801a470:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	893a      	ldrh	r2, [r7, #8]
 801a476:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801a478:	893b      	ldrh	r3, [r7, #8]
 801a47a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a482:	d104      	bne.n	801a48e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	f240 4209 	movw	r2, #1033	; 0x409
 801a48a:	829a      	strh	r2, [r3, #20]
 801a48c:	e002      	b.n	801a494 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	2200      	movs	r2, #0
 801a492:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	8b3a      	ldrh	r2, [r7, #24]
 801a498:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801a49a:	8b3b      	ldrh	r3, [r7, #24]
 801a49c:	461a      	mov	r2, r3
 801a49e:	6879      	ldr	r1, [r7, #4]
 801a4a0:	68f8      	ldr	r0, [r7, #12]
 801a4a2:	f000 fb17 	bl	801aad4 <USBH_CtlReq>
 801a4a6:	4603      	mov	r3, r0
}
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	3710      	adds	r7, #16
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}

0801a4b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b082      	sub	sp, #8
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
 801a4b8:	460b      	mov	r3, r1
 801a4ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	789b      	ldrb	r3, [r3, #2]
 801a4c0:	2b01      	cmp	r3, #1
 801a4c2:	d10f      	bne.n	801a4e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	2205      	movs	r2, #5
 801a4ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801a4d0:	78fb      	ldrb	r3, [r7, #3]
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	2200      	movs	r2, #0
 801a4dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	2100      	movs	r1, #0
 801a4e8:	6878      	ldr	r0, [r7, #4]
 801a4ea:	f000 faf3 	bl	801aad4 <USBH_CtlReq>
 801a4ee:	4603      	mov	r3, r0
}
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	3708      	adds	r7, #8
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	bd80      	pop	{r7, pc}

0801a4f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b082      	sub	sp, #8
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	460b      	mov	r3, r1
 801a502:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	789b      	ldrb	r3, [r3, #2]
 801a508:	2b01      	cmp	r3, #1
 801a50a:	d10e      	bne.n	801a52a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	2200      	movs	r2, #0
 801a510:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	2209      	movs	r2, #9
 801a516:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	887a      	ldrh	r2, [r7, #2]
 801a51c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	2200      	movs	r2, #0
 801a522:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2200      	movs	r2, #0
 801a528:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801a52a:	2200      	movs	r2, #0
 801a52c:	2100      	movs	r1, #0
 801a52e:	6878      	ldr	r0, [r7, #4]
 801a530:	f000 fad0 	bl	801aad4 <USBH_CtlReq>
 801a534:	4603      	mov	r3, r0
}
 801a536:	4618      	mov	r0, r3
 801a538:	3708      	adds	r7, #8
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}

0801a53e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801a53e:	b580      	push	{r7, lr}
 801a540:	b082      	sub	sp, #8
 801a542:	af00      	add	r7, sp, #0
 801a544:	6078      	str	r0, [r7, #4]
 801a546:	460b      	mov	r3, r1
 801a548:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	789b      	ldrb	r3, [r3, #2]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d10f      	bne.n	801a572 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2200      	movs	r2, #0
 801a556:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2203      	movs	r2, #3
 801a55c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801a55e:	78fb      	ldrb	r3, [r7, #3]
 801a560:	b29a      	uxth	r2, r3
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	2200      	movs	r2, #0
 801a56a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2200      	movs	r2, #0
 801a570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801a572:	2200      	movs	r2, #0
 801a574:	2100      	movs	r1, #0
 801a576:	6878      	ldr	r0, [r7, #4]
 801a578:	f000 faac 	bl	801aad4 <USBH_CtlReq>
 801a57c:	4603      	mov	r3, r0
}
 801a57e:	4618      	mov	r0, r3
 801a580:	3708      	adds	r7, #8
 801a582:	46bd      	mov	sp, r7
 801a584:	bd80      	pop	{r7, pc}

0801a586 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801a586:	b580      	push	{r7, lr}
 801a588:	b082      	sub	sp, #8
 801a58a:	af00      	add	r7, sp, #0
 801a58c:	6078      	str	r0, [r7, #4]
 801a58e:	460b      	mov	r3, r1
 801a590:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	789b      	ldrb	r3, [r3, #2]
 801a596:	2b01      	cmp	r3, #1
 801a598:	d10f      	bne.n	801a5ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	2202      	movs	r2, #2
 801a59e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2201      	movs	r2, #1
 801a5a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801a5ac:	78fb      	ldrb	r3, [r7, #3]
 801a5ae:	b29a      	uxth	r2, r3
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	2100      	movs	r1, #0
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f000 fa88 	bl	801aad4 <USBH_CtlReq>
 801a5c4:	4603      	mov	r3, r0
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	3708      	adds	r7, #8
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	bd80      	pop	{r7, pc}
	...

0801a5d0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 801a5d0:	b480      	push	{r7}
 801a5d2:	b085      	sub	sp, #20
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	60f8      	str	r0, [r7, #12]
 801a5d8:	60b9      	str	r1, [r7, #8]
 801a5da:	4613      	mov	r3, r2
 801a5dc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	781a      	ldrb	r2, [r3, #0]
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 801a5e6:	68bb      	ldr	r3, [r7, #8]
 801a5e8:	785a      	ldrb	r2, [r3, #1]
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 801a5ee:	68bb      	ldr	r3, [r7, #8]
 801a5f0:	3302      	adds	r3, #2
 801a5f2:	781b      	ldrb	r3, [r3, #0]
 801a5f4:	b29a      	uxth	r2, r3
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	3303      	adds	r3, #3
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	b29b      	uxth	r3, r3
 801a5fe:	021b      	lsls	r3, r3, #8
 801a600:	b29b      	uxth	r3, r3
 801a602:	4313      	orrs	r3, r2
 801a604:	b29a      	uxth	r2, r3
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801a60a:	68bb      	ldr	r3, [r7, #8]
 801a60c:	791a      	ldrb	r2, [r3, #4]
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801a612:	68bb      	ldr	r3, [r7, #8]
 801a614:	795a      	ldrb	r2, [r3, #5]
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	799a      	ldrb	r2, [r3, #6]
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	79da      	ldrb	r2, [r3, #7]
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	79db      	ldrb	r3, [r3, #7]
 801a62e:	2b20      	cmp	r3, #32
 801a630:	dc0e      	bgt.n	801a650 <USBH_ParseDevDesc+0x80>
 801a632:	2b08      	cmp	r3, #8
 801a634:	db13      	blt.n	801a65e <USBH_ParseDevDesc+0x8e>
 801a636:	3b08      	subs	r3, #8
 801a638:	2201      	movs	r2, #1
 801a63a:	409a      	lsls	r2, r3
 801a63c:	4b2b      	ldr	r3, [pc, #172]	; (801a6ec <USBH_ParseDevDesc+0x11c>)
 801a63e:	4013      	ands	r3, r2
 801a640:	2b00      	cmp	r3, #0
 801a642:	bf14      	ite	ne
 801a644:	2301      	movne	r3, #1
 801a646:	2300      	moveq	r3, #0
 801a648:	b2db      	uxtb	r3, r3
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d102      	bne.n	801a654 <USBH_ParseDevDesc+0x84>
 801a64e:	e006      	b.n	801a65e <USBH_ParseDevDesc+0x8e>
 801a650:	2b40      	cmp	r3, #64	; 0x40
 801a652:	d104      	bne.n	801a65e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	79da      	ldrb	r2, [r3, #7]
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	71da      	strb	r2, [r3, #7]
      break;
 801a65c:	e003      	b.n	801a666 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	2240      	movs	r2, #64	; 0x40
 801a662:	71da      	strb	r2, [r3, #7]
      break;
 801a664:	bf00      	nop
  }

  if (length > 8U)
 801a666:	88fb      	ldrh	r3, [r7, #6]
 801a668:	2b08      	cmp	r3, #8
 801a66a:	d939      	bls.n	801a6e0 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	3308      	adds	r3, #8
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	b29a      	uxth	r2, r3
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	3309      	adds	r3, #9
 801a678:	781b      	ldrb	r3, [r3, #0]
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	021b      	lsls	r3, r3, #8
 801a67e:	b29b      	uxth	r3, r3
 801a680:	4313      	orrs	r3, r2
 801a682:	b29a      	uxth	r2, r3
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	330a      	adds	r3, #10
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	b29a      	uxth	r2, r3
 801a690:	68bb      	ldr	r3, [r7, #8]
 801a692:	330b      	adds	r3, #11
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	b29b      	uxth	r3, r3
 801a698:	021b      	lsls	r3, r3, #8
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	4313      	orrs	r3, r2
 801a69e:	b29a      	uxth	r2, r3
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	330c      	adds	r3, #12
 801a6a8:	781b      	ldrb	r3, [r3, #0]
 801a6aa:	b29a      	uxth	r2, r3
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	330d      	adds	r3, #13
 801a6b0:	781b      	ldrb	r3, [r3, #0]
 801a6b2:	b29b      	uxth	r3, r3
 801a6b4:	021b      	lsls	r3, r3, #8
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	4313      	orrs	r3, r2
 801a6ba:	b29a      	uxth	r2, r3
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	7b9a      	ldrb	r2, [r3, #14]
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	7bda      	ldrb	r2, [r3, #15]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	7c1a      	ldrb	r2, [r3, #16]
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	7c5a      	ldrb	r2, [r3, #17]
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	745a      	strb	r2, [r3, #17]
  }
}
 801a6e0:	bf00      	nop
 801a6e2:	3714      	adds	r7, #20
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ea:	4770      	bx	lr
 801a6ec:	01000101 	.word	0x01000101

0801a6f0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b08c      	sub	sp, #48	; 0x30
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	60f8      	str	r0, [r7, #12]
 801a6f8:	60b9      	str	r1, [r7, #8]
 801a6fa:	4613      	mov	r3, r2
 801a6fc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801a704:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801a706:	2300      	movs	r3, #0
 801a708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 801a70c:	68bb      	ldr	r3, [r7, #8]
 801a70e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801a710:	2300      	movs	r3, #0
 801a712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801a716:	2300      	movs	r3, #0
 801a718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801a71c:	68bb      	ldr	r3, [r7, #8]
 801a71e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801a720:	68bb      	ldr	r3, [r7, #8]
 801a722:	781a      	ldrb	r2, [r3, #0]
 801a724:	6a3b      	ldr	r3, [r7, #32]
 801a726:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	785a      	ldrb	r2, [r3, #1]
 801a72c:	6a3b      	ldr	r3, [r7, #32]
 801a72e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 801a730:	68bb      	ldr	r3, [r7, #8]
 801a732:	3302      	adds	r3, #2
 801a734:	781b      	ldrb	r3, [r3, #0]
 801a736:	b29a      	uxth	r2, r3
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	3303      	adds	r3, #3
 801a73c:	781b      	ldrb	r3, [r3, #0]
 801a73e:	b29b      	uxth	r3, r3
 801a740:	021b      	lsls	r3, r3, #8
 801a742:	b29b      	uxth	r3, r3
 801a744:	4313      	orrs	r3, r2
 801a746:	b29b      	uxth	r3, r3
 801a748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a74c:	bf28      	it	cs
 801a74e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 801a752:	b29a      	uxth	r2, r3
 801a754:	6a3b      	ldr	r3, [r7, #32]
 801a756:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	791a      	ldrb	r2, [r3, #4]
 801a75c:	6a3b      	ldr	r3, [r7, #32]
 801a75e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801a760:	68bb      	ldr	r3, [r7, #8]
 801a762:	795a      	ldrb	r2, [r3, #5]
 801a764:	6a3b      	ldr	r3, [r7, #32]
 801a766:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801a768:	68bb      	ldr	r3, [r7, #8]
 801a76a:	799a      	ldrb	r2, [r3, #6]
 801a76c:	6a3b      	ldr	r3, [r7, #32]
 801a76e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	79da      	ldrb	r2, [r3, #7]
 801a774:	6a3b      	ldr	r3, [r7, #32]
 801a776:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	7a1a      	ldrb	r2, [r3, #8]
 801a77c:	6a3b      	ldr	r3, [r7, #32]
 801a77e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 801a780:	6a3b      	ldr	r3, [r7, #32]
 801a782:	781b      	ldrb	r3, [r3, #0]
 801a784:	2b09      	cmp	r3, #9
 801a786:	d002      	beq.n	801a78e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801a788:	6a3b      	ldr	r3, [r7, #32]
 801a78a:	2209      	movs	r2, #9
 801a78c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801a78e:	88fb      	ldrh	r3, [r7, #6]
 801a790:	2b09      	cmp	r3, #9
 801a792:	f240 8099 	bls.w	801a8c8 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 801a796:	2309      	movs	r3, #9
 801a798:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801a79a:	2300      	movs	r3, #0
 801a79c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801a79e:	e07d      	b.n	801a89c <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801a7a0:	f107 0316 	add.w	r3, r7, #22
 801a7a4:	4619      	mov	r1, r3
 801a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a7a8:	f000 f979 	bl	801aa9e <USBH_GetNextDesc>
 801a7ac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b0:	785b      	ldrb	r3, [r3, #1]
 801a7b2:	2b04      	cmp	r3, #4
 801a7b4:	d172      	bne.n	801a89c <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	2b09      	cmp	r3, #9
 801a7bc:	d002      	beq.n	801a7c4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c0:	2209      	movs	r2, #9
 801a7c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801a7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7c8:	221a      	movs	r2, #26
 801a7ca:	fb02 f303 	mul.w	r3, r2, r3
 801a7ce:	3308      	adds	r3, #8
 801a7d0:	6a3a      	ldr	r2, [r7, #32]
 801a7d2:	4413      	add	r3, r2
 801a7d4:	3302      	adds	r3, #2
 801a7d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801a7d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a7da:	69f8      	ldr	r0, [r7, #28]
 801a7dc:	f000 f87a 	bl	801a8d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801a7ea:	e03f      	b.n	801a86c <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801a7ec:	f107 0316 	add.w	r3, r7, #22
 801a7f0:	4619      	mov	r1, r3
 801a7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a7f4:	f000 f953 	bl	801aa9e <USBH_GetNextDesc>
 801a7f8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7fc:	785b      	ldrb	r3, [r3, #1]
 801a7fe:	2b05      	cmp	r3, #5
 801a800:	d134      	bne.n	801a86c <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 801a802:	69fb      	ldr	r3, [r7, #28]
 801a804:	795b      	ldrb	r3, [r3, #5]
 801a806:	2b01      	cmp	r3, #1
 801a808:	d10f      	bne.n	801a82a <USBH_ParseCfgDesc+0x13a>
 801a80a:	69fb      	ldr	r3, [r7, #28]
 801a80c:	799b      	ldrb	r3, [r3, #6]
 801a80e:	2b02      	cmp	r3, #2
 801a810:	d10b      	bne.n	801a82a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801a812:	69fb      	ldr	r3, [r7, #28]
 801a814:	79db      	ldrb	r3, [r3, #7]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d10b      	bne.n	801a832 <USBH_ParseCfgDesc+0x142>
 801a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	2b09      	cmp	r3, #9
 801a820:	d007      	beq.n	801a832 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 801a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a824:	2209      	movs	r2, #9
 801a826:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801a828:	e003      	b.n	801a832 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a82c:	2207      	movs	r2, #7
 801a82e:	701a      	strb	r2, [r3, #0]
 801a830:	e000      	b.n	801a834 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801a832:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801a834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a838:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a83c:	3201      	adds	r2, #1
 801a83e:	00d2      	lsls	r2, r2, #3
 801a840:	211a      	movs	r1, #26
 801a842:	fb01 f303 	mul.w	r3, r1, r3
 801a846:	4413      	add	r3, r2
 801a848:	3308      	adds	r3, #8
 801a84a:	6a3a      	ldr	r2, [r7, #32]
 801a84c:	4413      	add	r3, r2
 801a84e:	3304      	adds	r3, #4
 801a850:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801a852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a854:	69b9      	ldr	r1, [r7, #24]
 801a856:	68f8      	ldr	r0, [r7, #12]
 801a858:	f000 f86c 	bl	801a934 <USBH_ParseEPDesc>
 801a85c:	4603      	mov	r3, r0
 801a85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801a862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a866:	3301      	adds	r3, #1
 801a868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801a86c:	69fb      	ldr	r3, [r7, #28]
 801a86e:	791b      	ldrb	r3, [r3, #4]
 801a870:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a874:	429a      	cmp	r2, r3
 801a876:	d204      	bcs.n	801a882 <USBH_ParseCfgDesc+0x192>
 801a878:	6a3b      	ldr	r3, [r7, #32]
 801a87a:	885a      	ldrh	r2, [r3, #2]
 801a87c:	8afb      	ldrh	r3, [r7, #22]
 801a87e:	429a      	cmp	r2, r3
 801a880:	d8b4      	bhi.n	801a7ec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801a882:	69fb      	ldr	r3, [r7, #28]
 801a884:	791b      	ldrb	r3, [r3, #4]
 801a886:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a88a:	429a      	cmp	r2, r3
 801a88c:	d201      	bcs.n	801a892 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 801a88e:	2303      	movs	r3, #3
 801a890:	e01c      	b.n	801a8cc <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 801a892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a896:	3301      	adds	r3, #1
 801a898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801a89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8a0:	2b01      	cmp	r3, #1
 801a8a2:	d805      	bhi.n	801a8b0 <USBH_ParseCfgDesc+0x1c0>
 801a8a4:	6a3b      	ldr	r3, [r7, #32]
 801a8a6:	885a      	ldrh	r2, [r3, #2]
 801a8a8:	8afb      	ldrh	r3, [r7, #22]
 801a8aa:	429a      	cmp	r2, r3
 801a8ac:	f63f af78 	bhi.w	801a7a0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801a8b0:	6a3b      	ldr	r3, [r7, #32]
 801a8b2:	791b      	ldrb	r3, [r3, #4]
 801a8b4:	2b02      	cmp	r3, #2
 801a8b6:	bf28      	it	cs
 801a8b8:	2302      	movcs	r3, #2
 801a8ba:	b2db      	uxtb	r3, r3
 801a8bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a8c0:	429a      	cmp	r2, r3
 801a8c2:	d201      	bcs.n	801a8c8 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 801a8c4:	2303      	movs	r3, #3
 801a8c6:	e001      	b.n	801a8cc <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 801a8c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	3730      	adds	r7, #48	; 0x30
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	bd80      	pop	{r7, pc}

0801a8d4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 801a8d4:	b480      	push	{r7}
 801a8d6:	b083      	sub	sp, #12
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
 801a8dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	781a      	ldrb	r2, [r3, #0]
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	785a      	ldrb	r2, [r3, #1]
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	789a      	ldrb	r2, [r3, #2]
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	78da      	ldrb	r2, [r3, #3]
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	791a      	ldrb	r2, [r3, #4]
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	795a      	ldrb	r2, [r3, #5]
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	799a      	ldrb	r2, [r3, #6]
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801a916:	683b      	ldr	r3, [r7, #0]
 801a918:	79da      	ldrb	r2, [r3, #7]
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801a91e:	683b      	ldr	r3, [r7, #0]
 801a920:	7a1a      	ldrb	r2, [r3, #8]
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	721a      	strb	r2, [r3, #8]
}
 801a926:	bf00      	nop
 801a928:	370c      	adds	r7, #12
 801a92a:	46bd      	mov	sp, r7
 801a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a930:	4770      	bx	lr
	...

0801a934 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 801a934:	b480      	push	{r7}
 801a936:	b087      	sub	sp, #28
 801a938:	af00      	add	r7, sp, #0
 801a93a:	60f8      	str	r0, [r7, #12]
 801a93c:	60b9      	str	r1, [r7, #8]
 801a93e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801a940:	2300      	movs	r3, #0
 801a942:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	781a      	ldrb	r2, [r3, #0]
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	785a      	ldrb	r2, [r3, #1]
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	789a      	ldrb	r2, [r3, #2]
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	78da      	ldrb	r2, [r3, #3]
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	3304      	adds	r3, #4
 801a968:	781b      	ldrb	r3, [r3, #0]
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	3305      	adds	r3, #5
 801a970:	781b      	ldrb	r3, [r3, #0]
 801a972:	b29b      	uxth	r3, r3
 801a974:	021b      	lsls	r3, r3, #8
 801a976:	b29b      	uxth	r3, r3
 801a978:	4313      	orrs	r3, r2
 801a97a:	b29a      	uxth	r2, r3
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	799a      	ldrb	r2, [r3, #6]
 801a984:	68bb      	ldr	r3, [r7, #8]
 801a986:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	889b      	ldrh	r3, [r3, #4]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d102      	bne.n	801a996 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 801a990:	2303      	movs	r3, #3
 801a992:	75fb      	strb	r3, [r7, #23]
 801a994:	e00d      	b.n	801a9b2 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 801a996:	68bb      	ldr	r3, [r7, #8]
 801a998:	889a      	ldrh	r2, [r3, #4]
 801a99a:	4b26      	ldr	r3, [pc, #152]	; (801aa34 <USBH_ParseEPDesc+0x100>)
 801a99c:	4013      	ands	r3, r2
 801a99e:	b29a      	uxth	r2, r3
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	889b      	ldrh	r3, [r3, #4]
 801a9a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a9ac:	b29a      	uxth	r2, r3
 801a9ae:	68bb      	ldr	r3, [r7, #8]
 801a9b0:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d116      	bne.n	801a9ea <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801a9bc:	68bb      	ldr	r3, [r7, #8]
 801a9be:	78db      	ldrb	r3, [r3, #3]
 801a9c0:	f003 0303 	and.w	r3, r3, #3
 801a9c4:	2b01      	cmp	r3, #1
 801a9c6:	d005      	beq.n	801a9d4 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801a9c8:	68bb      	ldr	r3, [r7, #8]
 801a9ca:	78db      	ldrb	r3, [r3, #3]
 801a9cc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801a9d0:	2b03      	cmp	r3, #3
 801a9d2:	d127      	bne.n	801aa24 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	799b      	ldrb	r3, [r3, #6]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d003      	beq.n	801a9e4 <USBH_ParseEPDesc+0xb0>
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	799b      	ldrb	r3, [r3, #6]
 801a9e0:	2b10      	cmp	r3, #16
 801a9e2:	d91f      	bls.n	801aa24 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801a9e4:	2303      	movs	r3, #3
 801a9e6:	75fb      	strb	r3, [r7, #23]
 801a9e8:	e01c      	b.n	801aa24 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	78db      	ldrb	r3, [r3, #3]
 801a9ee:	f003 0303 	and.w	r3, r3, #3
 801a9f2:	2b01      	cmp	r3, #1
 801a9f4:	d10a      	bne.n	801aa0c <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801a9f6:	68bb      	ldr	r3, [r7, #8]
 801a9f8:	799b      	ldrb	r3, [r3, #6]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d003      	beq.n	801aa06 <USBH_ParseEPDesc+0xd2>
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	799b      	ldrb	r3, [r3, #6]
 801aa02:	2b10      	cmp	r3, #16
 801aa04:	d90e      	bls.n	801aa24 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801aa06:	2303      	movs	r3, #3
 801aa08:	75fb      	strb	r3, [r7, #23]
 801aa0a:	e00b      	b.n	801aa24 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801aa0c:	68bb      	ldr	r3, [r7, #8]
 801aa0e:	78db      	ldrb	r3, [r3, #3]
 801aa10:	f003 0303 	and.w	r3, r3, #3
 801aa14:	2b03      	cmp	r3, #3
 801aa16:	d105      	bne.n	801aa24 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	799b      	ldrb	r3, [r3, #6]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d101      	bne.n	801aa24 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801aa20:	2303      	movs	r3, #3
 801aa22:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 801aa24:	7dfb      	ldrb	r3, [r7, #23]
}
 801aa26:	4618      	mov	r0, r3
 801aa28:	371c      	adds	r7, #28
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa30:	4770      	bx	lr
 801aa32:	bf00      	nop
 801aa34:	fffff800 	.word	0xfffff800

0801aa38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801aa38:	b480      	push	{r7}
 801aa3a:	b087      	sub	sp, #28
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	60f8      	str	r0, [r7, #12]
 801aa40:	60b9      	str	r1, [r7, #8]
 801aa42:	4613      	mov	r3, r2
 801aa44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	3301      	adds	r3, #1
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	2b03      	cmp	r3, #3
 801aa4e:	d120      	bne.n	801aa92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	1e9a      	subs	r2, r3, #2
 801aa56:	88fb      	ldrh	r3, [r7, #6]
 801aa58:	4293      	cmp	r3, r2
 801aa5a:	bf28      	it	cs
 801aa5c:	4613      	movcs	r3, r2
 801aa5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	3302      	adds	r3, #2
 801aa64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801aa66:	2300      	movs	r3, #0
 801aa68:	82fb      	strh	r3, [r7, #22]
 801aa6a:	e00b      	b.n	801aa84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801aa6c:	8afb      	ldrh	r3, [r7, #22]
 801aa6e:	68fa      	ldr	r2, [r7, #12]
 801aa70:	4413      	add	r3, r2
 801aa72:	781a      	ldrb	r2, [r3, #0]
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	701a      	strb	r2, [r3, #0]
      pdest++;
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	3301      	adds	r3, #1
 801aa7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801aa7e:	8afb      	ldrh	r3, [r7, #22]
 801aa80:	3302      	adds	r3, #2
 801aa82:	82fb      	strh	r3, [r7, #22]
 801aa84:	8afa      	ldrh	r2, [r7, #22]
 801aa86:	8abb      	ldrh	r3, [r7, #20]
 801aa88:	429a      	cmp	r2, r3
 801aa8a:	d3ef      	bcc.n	801aa6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	2200      	movs	r2, #0
 801aa90:	701a      	strb	r2, [r3, #0]
  }
}
 801aa92:	bf00      	nop
 801aa94:	371c      	adds	r7, #28
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr

0801aa9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801aa9e:	b480      	push	{r7}
 801aaa0:	b085      	sub	sp, #20
 801aaa2:	af00      	add	r7, sp, #0
 801aaa4:	6078      	str	r0, [r7, #4]
 801aaa6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801aaa8:	683b      	ldr	r3, [r7, #0]
 801aaaa:	881a      	ldrh	r2, [r3, #0]
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	781b      	ldrb	r3, [r3, #0]
 801aab0:	b29b      	uxth	r3, r3
 801aab2:	4413      	add	r3, r2
 801aab4:	b29a      	uxth	r2, r3
 801aab6:	683b      	ldr	r3, [r7, #0]
 801aab8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	781b      	ldrb	r3, [r3, #0]
 801aabe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	4413      	add	r3, r2
 801aac4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801aac6:	68fb      	ldr	r3, [r7, #12]
}
 801aac8:	4618      	mov	r0, r3
 801aaca:	3714      	adds	r7, #20
 801aacc:	46bd      	mov	sp, r7
 801aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad2:	4770      	bx	lr

0801aad4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b086      	sub	sp, #24
 801aad8:	af00      	add	r7, sp, #0
 801aada:	60f8      	str	r0, [r7, #12]
 801aadc:	60b9      	str	r1, [r7, #8]
 801aade:	4613      	mov	r3, r2
 801aae0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801aae2:	2301      	movs	r3, #1
 801aae4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	789b      	ldrb	r3, [r3, #2]
 801aaea:	2b01      	cmp	r3, #1
 801aaec:	d002      	beq.n	801aaf4 <USBH_CtlReq+0x20>
 801aaee:	2b02      	cmp	r3, #2
 801aaf0:	d00f      	beq.n	801ab12 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801aaf2:	e027      	b.n	801ab44 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	68ba      	ldr	r2, [r7, #8]
 801aaf8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	88fa      	ldrh	r2, [r7, #6]
 801aafe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	2201      	movs	r2, #1
 801ab04:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	2202      	movs	r2, #2
 801ab0a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	75fb      	strb	r3, [r7, #23]
      break;
 801ab10:	e018      	b.n	801ab44 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801ab12:	68f8      	ldr	r0, [r7, #12]
 801ab14:	f000 f81c 	bl	801ab50 <USBH_HandleControl>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801ab1c:	7dfb      	ldrb	r3, [r7, #23]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d002      	beq.n	801ab28 <USBH_CtlReq+0x54>
 801ab22:	7dfb      	ldrb	r3, [r7, #23]
 801ab24:	2b03      	cmp	r3, #3
 801ab26:	d106      	bne.n	801ab36 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	2201      	movs	r2, #1
 801ab2c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	2200      	movs	r2, #0
 801ab32:	761a      	strb	r2, [r3, #24]
      break;
 801ab34:	e005      	b.n	801ab42 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801ab36:	7dfb      	ldrb	r3, [r7, #23]
 801ab38:	2b02      	cmp	r3, #2
 801ab3a:	d102      	bne.n	801ab42 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	2201      	movs	r2, #1
 801ab40:	709a      	strb	r2, [r3, #2]
      break;
 801ab42:	bf00      	nop
  }
  return status;
 801ab44:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab46:	4618      	mov	r0, r3
 801ab48:	3718      	adds	r7, #24
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd80      	pop	{r7, pc}
	...

0801ab50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b086      	sub	sp, #24
 801ab54:	af02      	add	r7, sp, #8
 801ab56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801ab58:	2301      	movs	r3, #1
 801ab5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	7e1b      	ldrb	r3, [r3, #24]
 801ab64:	3b01      	subs	r3, #1
 801ab66:	2b0a      	cmp	r3, #10
 801ab68:	f200 8156 	bhi.w	801ae18 <USBH_HandleControl+0x2c8>
 801ab6c:	a201      	add	r2, pc, #4	; (adr r2, 801ab74 <USBH_HandleControl+0x24>)
 801ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab72:	bf00      	nop
 801ab74:	0801aba1 	.word	0x0801aba1
 801ab78:	0801abbb 	.word	0x0801abbb
 801ab7c:	0801ac25 	.word	0x0801ac25
 801ab80:	0801ac4b 	.word	0x0801ac4b
 801ab84:	0801ac83 	.word	0x0801ac83
 801ab88:	0801acad 	.word	0x0801acad
 801ab8c:	0801acff 	.word	0x0801acff
 801ab90:	0801ad21 	.word	0x0801ad21
 801ab94:	0801ad5d 	.word	0x0801ad5d
 801ab98:	0801ad83 	.word	0x0801ad83
 801ab9c:	0801adc1 	.word	0x0801adc1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f103 0110 	add.w	r1, r3, #16
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	795b      	ldrb	r3, [r3, #5]
 801abaa:	461a      	mov	r2, r3
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	f000 f943 	bl	801ae38 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	2202      	movs	r2, #2
 801abb6:	761a      	strb	r2, [r3, #24]
      break;
 801abb8:	e139      	b.n	801ae2e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	795b      	ldrb	r3, [r3, #5]
 801abbe:	4619      	mov	r1, r3
 801abc0:	6878      	ldr	r0, [r7, #4]
 801abc2:	f004 f84f 	bl	801ec64 <USBH_LL_GetURBState>
 801abc6:	4603      	mov	r3, r0
 801abc8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801abca:	7bbb      	ldrb	r3, [r7, #14]
 801abcc:	2b01      	cmp	r3, #1
 801abce:	d11e      	bne.n	801ac0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	7c1b      	ldrb	r3, [r3, #16]
 801abd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801abd8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	8adb      	ldrh	r3, [r3, #22]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d00a      	beq.n	801abf8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801abe2:	7b7b      	ldrb	r3, [r7, #13]
 801abe4:	2b80      	cmp	r3, #128	; 0x80
 801abe6:	d103      	bne.n	801abf0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2203      	movs	r2, #3
 801abec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801abee:	e115      	b.n	801ae1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	2205      	movs	r2, #5
 801abf4:	761a      	strb	r2, [r3, #24]
      break;
 801abf6:	e111      	b.n	801ae1c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 801abf8:	7b7b      	ldrb	r3, [r7, #13]
 801abfa:	2b80      	cmp	r3, #128	; 0x80
 801abfc:	d103      	bne.n	801ac06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2209      	movs	r2, #9
 801ac02:	761a      	strb	r2, [r3, #24]
      break;
 801ac04:	e10a      	b.n	801ae1c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	2207      	movs	r2, #7
 801ac0a:	761a      	strb	r2, [r3, #24]
      break;
 801ac0c:	e106      	b.n	801ae1c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801ac0e:	7bbb      	ldrb	r3, [r7, #14]
 801ac10:	2b04      	cmp	r3, #4
 801ac12:	d003      	beq.n	801ac1c <USBH_HandleControl+0xcc>
 801ac14:	7bbb      	ldrb	r3, [r7, #14]
 801ac16:	2b02      	cmp	r3, #2
 801ac18:	f040 8100 	bne.w	801ae1c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	220b      	movs	r2, #11
 801ac20:	761a      	strb	r2, [r3, #24]
      break;
 801ac22:	e0fb      	b.n	801ae1c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ac2a:	b29a      	uxth	r2, r3
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	6899      	ldr	r1, [r3, #8]
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	899a      	ldrh	r2, [r3, #12]
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	791b      	ldrb	r3, [r3, #4]
 801ac3c:	6878      	ldr	r0, [r7, #4]
 801ac3e:	f000 f93a 	bl	801aeb6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	2204      	movs	r2, #4
 801ac46:	761a      	strb	r2, [r3, #24]
      break;
 801ac48:	e0f1      	b.n	801ae2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	791b      	ldrb	r3, [r3, #4]
 801ac4e:	4619      	mov	r1, r3
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	f004 f807 	bl	801ec64 <USBH_LL_GetURBState>
 801ac56:	4603      	mov	r3, r0
 801ac58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801ac5a:	7bbb      	ldrb	r3, [r7, #14]
 801ac5c:	2b01      	cmp	r3, #1
 801ac5e:	d102      	bne.n	801ac66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	2209      	movs	r2, #9
 801ac64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801ac66:	7bbb      	ldrb	r3, [r7, #14]
 801ac68:	2b05      	cmp	r3, #5
 801ac6a:	d102      	bne.n	801ac72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801ac6c:	2303      	movs	r3, #3
 801ac6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801ac70:	e0d6      	b.n	801ae20 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801ac72:	7bbb      	ldrb	r3, [r7, #14]
 801ac74:	2b04      	cmp	r3, #4
 801ac76:	f040 80d3 	bne.w	801ae20 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	220b      	movs	r2, #11
 801ac7e:	761a      	strb	r2, [r3, #24]
      break;
 801ac80:	e0ce      	b.n	801ae20 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	6899      	ldr	r1, [r3, #8]
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	899a      	ldrh	r2, [r3, #12]
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	795b      	ldrb	r3, [r3, #5]
 801ac8e:	2001      	movs	r0, #1
 801ac90:	9000      	str	r0, [sp, #0]
 801ac92:	6878      	ldr	r0, [r7, #4]
 801ac94:	f000 f8ea 	bl	801ae6c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ac9e:	b29a      	uxth	r2, r3
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2206      	movs	r2, #6
 801aca8:	761a      	strb	r2, [r3, #24]
      break;
 801acaa:	e0c0      	b.n	801ae2e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	795b      	ldrb	r3, [r3, #5]
 801acb0:	4619      	mov	r1, r3
 801acb2:	6878      	ldr	r0, [r7, #4]
 801acb4:	f003 ffd6 	bl	801ec64 <USBH_LL_GetURBState>
 801acb8:	4603      	mov	r3, r0
 801acba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801acbc:	7bbb      	ldrb	r3, [r7, #14]
 801acbe:	2b01      	cmp	r3, #1
 801acc0:	d103      	bne.n	801acca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2207      	movs	r2, #7
 801acc6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801acc8:	e0ac      	b.n	801ae24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 801acca:	7bbb      	ldrb	r3, [r7, #14]
 801accc:	2b05      	cmp	r3, #5
 801acce:	d105      	bne.n	801acdc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	220c      	movs	r2, #12
 801acd4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801acd6:	2303      	movs	r3, #3
 801acd8:	73fb      	strb	r3, [r7, #15]
      break;
 801acda:	e0a3      	b.n	801ae24 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 801acdc:	7bbb      	ldrb	r3, [r7, #14]
 801acde:	2b02      	cmp	r3, #2
 801ace0:	d103      	bne.n	801acea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	2205      	movs	r2, #5
 801ace6:	761a      	strb	r2, [r3, #24]
      break;
 801ace8:	e09c      	b.n	801ae24 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801acea:	7bbb      	ldrb	r3, [r7, #14]
 801acec:	2b04      	cmp	r3, #4
 801acee:	f040 8099 	bne.w	801ae24 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	220b      	movs	r2, #11
 801acf6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801acf8:	2302      	movs	r3, #2
 801acfa:	73fb      	strb	r3, [r7, #15]
      break;
 801acfc:	e092      	b.n	801ae24 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	791b      	ldrb	r3, [r3, #4]
 801ad02:	2200      	movs	r2, #0
 801ad04:	2100      	movs	r1, #0
 801ad06:	6878      	ldr	r0, [r7, #4]
 801ad08:	f000 f8d5 	bl	801aeb6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ad12:	b29a      	uxth	r2, r3
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	2208      	movs	r2, #8
 801ad1c:	761a      	strb	r2, [r3, #24]

      break;
 801ad1e:	e086      	b.n	801ae2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	791b      	ldrb	r3, [r3, #4]
 801ad24:	4619      	mov	r1, r3
 801ad26:	6878      	ldr	r0, [r7, #4]
 801ad28:	f003 ff9c 	bl	801ec64 <USBH_LL_GetURBState>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801ad30:	7bbb      	ldrb	r3, [r7, #14]
 801ad32:	2b01      	cmp	r3, #1
 801ad34:	d105      	bne.n	801ad42 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	220d      	movs	r2, #13
 801ad3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801ad40:	e072      	b.n	801ae28 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801ad42:	7bbb      	ldrb	r3, [r7, #14]
 801ad44:	2b04      	cmp	r3, #4
 801ad46:	d103      	bne.n	801ad50 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	220b      	movs	r2, #11
 801ad4c:	761a      	strb	r2, [r3, #24]
      break;
 801ad4e:	e06b      	b.n	801ae28 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 801ad50:	7bbb      	ldrb	r3, [r7, #14]
 801ad52:	2b05      	cmp	r3, #5
 801ad54:	d168      	bne.n	801ae28 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 801ad56:	2303      	movs	r3, #3
 801ad58:	73fb      	strb	r3, [r7, #15]
      break;
 801ad5a:	e065      	b.n	801ae28 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	795b      	ldrb	r3, [r3, #5]
 801ad60:	2201      	movs	r2, #1
 801ad62:	9200      	str	r2, [sp, #0]
 801ad64:	2200      	movs	r2, #0
 801ad66:	2100      	movs	r1, #0
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f000 f87f 	bl	801ae6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	220a      	movs	r2, #10
 801ad7e:	761a      	strb	r2, [r3, #24]
      break;
 801ad80:	e055      	b.n	801ae2e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	795b      	ldrb	r3, [r3, #5]
 801ad86:	4619      	mov	r1, r3
 801ad88:	6878      	ldr	r0, [r7, #4]
 801ad8a:	f003 ff6b 	bl	801ec64 <USBH_LL_GetURBState>
 801ad8e:	4603      	mov	r3, r0
 801ad90:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801ad92:	7bbb      	ldrb	r3, [r7, #14]
 801ad94:	2b01      	cmp	r3, #1
 801ad96:	d105      	bne.n	801ada4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 801ad98:	2300      	movs	r3, #0
 801ad9a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	220d      	movs	r2, #13
 801ada0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801ada2:	e043      	b.n	801ae2c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801ada4:	7bbb      	ldrb	r3, [r7, #14]
 801ada6:	2b02      	cmp	r3, #2
 801ada8:	d103      	bne.n	801adb2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2209      	movs	r2, #9
 801adae:	761a      	strb	r2, [r3, #24]
      break;
 801adb0:	e03c      	b.n	801ae2c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801adb2:	7bbb      	ldrb	r3, [r7, #14]
 801adb4:	2b04      	cmp	r3, #4
 801adb6:	d139      	bne.n	801ae2c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	220b      	movs	r2, #11
 801adbc:	761a      	strb	r2, [r3, #24]
      break;
 801adbe:	e035      	b.n	801ae2c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	7e5b      	ldrb	r3, [r3, #25]
 801adc4:	3301      	adds	r3, #1
 801adc6:	b2da      	uxtb	r2, r3
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	765a      	strb	r2, [r3, #25]
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	7e5b      	ldrb	r3, [r3, #25]
 801add0:	2b02      	cmp	r3, #2
 801add2:	d806      	bhi.n	801ade2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2201      	movs	r2, #1
 801add8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	2201      	movs	r2, #1
 801adde:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801ade0:	e025      	b.n	801ae2e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801ade8:	2106      	movs	r1, #6
 801adea:	6878      	ldr	r0, [r7, #4]
 801adec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	2200      	movs	r2, #0
 801adf2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	795b      	ldrb	r3, [r3, #5]
 801adf8:	4619      	mov	r1, r3
 801adfa:	6878      	ldr	r0, [r7, #4]
 801adfc:	f000 f90c 	bl	801b018 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	791b      	ldrb	r3, [r3, #4]
 801ae04:	4619      	mov	r1, r3
 801ae06:	6878      	ldr	r0, [r7, #4]
 801ae08:	f000 f906 	bl	801b018 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	2200      	movs	r2, #0
 801ae10:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801ae12:	2302      	movs	r3, #2
 801ae14:	73fb      	strb	r3, [r7, #15]
      break;
 801ae16:	e00a      	b.n	801ae2e <USBH_HandleControl+0x2de>

    default:
      break;
 801ae18:	bf00      	nop
 801ae1a:	e008      	b.n	801ae2e <USBH_HandleControl+0x2de>
      break;
 801ae1c:	bf00      	nop
 801ae1e:	e006      	b.n	801ae2e <USBH_HandleControl+0x2de>
      break;
 801ae20:	bf00      	nop
 801ae22:	e004      	b.n	801ae2e <USBH_HandleControl+0x2de>
      break;
 801ae24:	bf00      	nop
 801ae26:	e002      	b.n	801ae2e <USBH_HandleControl+0x2de>
      break;
 801ae28:	bf00      	nop
 801ae2a:	e000      	b.n	801ae2e <USBH_HandleControl+0x2de>
      break;
 801ae2c:	bf00      	nop
  }

  return status;
 801ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	3710      	adds	r7, #16
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}

0801ae38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b088      	sub	sp, #32
 801ae3c:	af04      	add	r7, sp, #16
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	4613      	mov	r3, r2
 801ae44:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801ae46:	79f9      	ldrb	r1, [r7, #7]
 801ae48:	2300      	movs	r3, #0
 801ae4a:	9303      	str	r3, [sp, #12]
 801ae4c:	2308      	movs	r3, #8
 801ae4e:	9302      	str	r3, [sp, #8]
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	9301      	str	r3, [sp, #4]
 801ae54:	2300      	movs	r3, #0
 801ae56:	9300      	str	r3, [sp, #0]
 801ae58:	2300      	movs	r3, #0
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	68f8      	ldr	r0, [r7, #12]
 801ae5e:	f003 fed0 	bl	801ec02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801ae62:	2300      	movs	r3, #0
}
 801ae64:	4618      	mov	r0, r3
 801ae66:	3710      	adds	r7, #16
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}

0801ae6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b088      	sub	sp, #32
 801ae70:	af04      	add	r7, sp, #16
 801ae72:	60f8      	str	r0, [r7, #12]
 801ae74:	60b9      	str	r1, [r7, #8]
 801ae76:	4611      	mov	r1, r2
 801ae78:	461a      	mov	r2, r3
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	80fb      	strh	r3, [r7, #6]
 801ae7e:	4613      	mov	r3, r2
 801ae80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d001      	beq.n	801ae90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801ae90:	7979      	ldrb	r1, [r7, #5]
 801ae92:	7e3b      	ldrb	r3, [r7, #24]
 801ae94:	9303      	str	r3, [sp, #12]
 801ae96:	88fb      	ldrh	r3, [r7, #6]
 801ae98:	9302      	str	r3, [sp, #8]
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	9301      	str	r3, [sp, #4]
 801ae9e:	2301      	movs	r3, #1
 801aea0:	9300      	str	r3, [sp, #0]
 801aea2:	2300      	movs	r3, #0
 801aea4:	2200      	movs	r2, #0
 801aea6:	68f8      	ldr	r0, [r7, #12]
 801aea8:	f003 feab 	bl	801ec02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801aeac:	2300      	movs	r3, #0
}
 801aeae:	4618      	mov	r0, r3
 801aeb0:	3710      	adds	r7, #16
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}

0801aeb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801aeb6:	b580      	push	{r7, lr}
 801aeb8:	b088      	sub	sp, #32
 801aeba:	af04      	add	r7, sp, #16
 801aebc:	60f8      	str	r0, [r7, #12]
 801aebe:	60b9      	str	r1, [r7, #8]
 801aec0:	4611      	mov	r1, r2
 801aec2:	461a      	mov	r2, r3
 801aec4:	460b      	mov	r3, r1
 801aec6:	80fb      	strh	r3, [r7, #6]
 801aec8:	4613      	mov	r3, r2
 801aeca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801aecc:	7979      	ldrb	r1, [r7, #5]
 801aece:	2300      	movs	r3, #0
 801aed0:	9303      	str	r3, [sp, #12]
 801aed2:	88fb      	ldrh	r3, [r7, #6]
 801aed4:	9302      	str	r3, [sp, #8]
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	9301      	str	r3, [sp, #4]
 801aeda:	2301      	movs	r3, #1
 801aedc:	9300      	str	r3, [sp, #0]
 801aede:	2300      	movs	r3, #0
 801aee0:	2201      	movs	r2, #1
 801aee2:	68f8      	ldr	r0, [r7, #12]
 801aee4:	f003 fe8d 	bl	801ec02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801aee8:	2300      	movs	r3, #0

}
 801aeea:	4618      	mov	r0, r3
 801aeec:	3710      	adds	r7, #16
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd80      	pop	{r7, pc}

0801aef2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801aef2:	b580      	push	{r7, lr}
 801aef4:	b088      	sub	sp, #32
 801aef6:	af04      	add	r7, sp, #16
 801aef8:	60f8      	str	r0, [r7, #12]
 801aefa:	60b9      	str	r1, [r7, #8]
 801aefc:	4611      	mov	r1, r2
 801aefe:	461a      	mov	r2, r3
 801af00:	460b      	mov	r3, r1
 801af02:	80fb      	strh	r3, [r7, #6]
 801af04:	4613      	mov	r3, r2
 801af06:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d001      	beq.n	801af16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801af12:	2300      	movs	r3, #0
 801af14:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801af16:	7979      	ldrb	r1, [r7, #5]
 801af18:	7e3b      	ldrb	r3, [r7, #24]
 801af1a:	9303      	str	r3, [sp, #12]
 801af1c:	88fb      	ldrh	r3, [r7, #6]
 801af1e:	9302      	str	r3, [sp, #8]
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	9301      	str	r3, [sp, #4]
 801af24:	2301      	movs	r3, #1
 801af26:	9300      	str	r3, [sp, #0]
 801af28:	2302      	movs	r3, #2
 801af2a:	2200      	movs	r2, #0
 801af2c:	68f8      	ldr	r0, [r7, #12]
 801af2e:	f003 fe68 	bl	801ec02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801af32:	2300      	movs	r3, #0
}
 801af34:	4618      	mov	r0, r3
 801af36:	3710      	adds	r7, #16
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}

0801af3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b088      	sub	sp, #32
 801af40:	af04      	add	r7, sp, #16
 801af42:	60f8      	str	r0, [r7, #12]
 801af44:	60b9      	str	r1, [r7, #8]
 801af46:	4611      	mov	r1, r2
 801af48:	461a      	mov	r2, r3
 801af4a:	460b      	mov	r3, r1
 801af4c:	80fb      	strh	r3, [r7, #6]
 801af4e:	4613      	mov	r3, r2
 801af50:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801af52:	7979      	ldrb	r1, [r7, #5]
 801af54:	2300      	movs	r3, #0
 801af56:	9303      	str	r3, [sp, #12]
 801af58:	88fb      	ldrh	r3, [r7, #6]
 801af5a:	9302      	str	r3, [sp, #8]
 801af5c:	68bb      	ldr	r3, [r7, #8]
 801af5e:	9301      	str	r3, [sp, #4]
 801af60:	2301      	movs	r3, #1
 801af62:	9300      	str	r3, [sp, #0]
 801af64:	2302      	movs	r3, #2
 801af66:	2201      	movs	r2, #1
 801af68:	68f8      	ldr	r0, [r7, #12]
 801af6a:	f003 fe4a 	bl	801ec02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801af6e:	2300      	movs	r3, #0
}
 801af70:	4618      	mov	r0, r3
 801af72:	3710      	adds	r7, #16
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}

0801af78 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b086      	sub	sp, #24
 801af7c:	af04      	add	r7, sp, #16
 801af7e:	6078      	str	r0, [r7, #4]
 801af80:	4608      	mov	r0, r1
 801af82:	4611      	mov	r1, r2
 801af84:	461a      	mov	r2, r3
 801af86:	4603      	mov	r3, r0
 801af88:	70fb      	strb	r3, [r7, #3]
 801af8a:	460b      	mov	r3, r1
 801af8c:	70bb      	strb	r3, [r7, #2]
 801af8e:	4613      	mov	r3, r2
 801af90:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801af92:	7878      	ldrb	r0, [r7, #1]
 801af94:	78ba      	ldrb	r2, [r7, #2]
 801af96:	78f9      	ldrb	r1, [r7, #3]
 801af98:	8b3b      	ldrh	r3, [r7, #24]
 801af9a:	9302      	str	r3, [sp, #8]
 801af9c:	7d3b      	ldrb	r3, [r7, #20]
 801af9e:	9301      	str	r3, [sp, #4]
 801afa0:	7c3b      	ldrb	r3, [r7, #16]
 801afa2:	9300      	str	r3, [sp, #0]
 801afa4:	4603      	mov	r3, r0
 801afa6:	6878      	ldr	r0, [r7, #4]
 801afa8:	f003 fddd 	bl	801eb66 <USBH_LL_OpenPipe>

  return USBH_OK;
 801afac:	2300      	movs	r3, #0
}
 801afae:	4618      	mov	r0, r3
 801afb0:	3708      	adds	r7, #8
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bd80      	pop	{r7, pc}

0801afb6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801afb6:	b580      	push	{r7, lr}
 801afb8:	b082      	sub	sp, #8
 801afba:	af00      	add	r7, sp, #0
 801afbc:	6078      	str	r0, [r7, #4]
 801afbe:	460b      	mov	r3, r1
 801afc0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801afc2:	78fb      	ldrb	r3, [r7, #3]
 801afc4:	4619      	mov	r1, r3
 801afc6:	6878      	ldr	r0, [r7, #4]
 801afc8:	f003 fdfc 	bl	801ebc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 801afcc:	2300      	movs	r3, #0
}
 801afce:	4618      	mov	r0, r3
 801afd0:	3708      	adds	r7, #8
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}

0801afd6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801afd6:	b580      	push	{r7, lr}
 801afd8:	b084      	sub	sp, #16
 801afda:	af00      	add	r7, sp, #0
 801afdc:	6078      	str	r0, [r7, #4]
 801afde:	460b      	mov	r3, r1
 801afe0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	f000 f836 	bl	801b054 <USBH_GetFreePipe>
 801afe8:	4603      	mov	r3, r0
 801afea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801afec:	89fb      	ldrh	r3, [r7, #14]
 801afee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aff2:	4293      	cmp	r3, r2
 801aff4:	d00a      	beq.n	801b00c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801aff6:	78fa      	ldrb	r2, [r7, #3]
 801aff8:	89fb      	ldrh	r3, [r7, #14]
 801affa:	f003 030f 	and.w	r3, r3, #15
 801affe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b002:	6879      	ldr	r1, [r7, #4]
 801b004:	33e0      	adds	r3, #224	; 0xe0
 801b006:	009b      	lsls	r3, r3, #2
 801b008:	440b      	add	r3, r1
 801b00a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801b00c:	89fb      	ldrh	r3, [r7, #14]
 801b00e:	b2db      	uxtb	r3, r3
}
 801b010:	4618      	mov	r0, r3
 801b012:	3710      	adds	r7, #16
 801b014:	46bd      	mov	sp, r7
 801b016:	bd80      	pop	{r7, pc}

0801b018 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801b018:	b480      	push	{r7}
 801b01a:	b083      	sub	sp, #12
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
 801b020:	460b      	mov	r3, r1
 801b022:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801b024:	78fb      	ldrb	r3, [r7, #3]
 801b026:	2b0f      	cmp	r3, #15
 801b028:	d80d      	bhi.n	801b046 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801b02a:	78fb      	ldrb	r3, [r7, #3]
 801b02c:	687a      	ldr	r2, [r7, #4]
 801b02e:	33e0      	adds	r3, #224	; 0xe0
 801b030:	009b      	lsls	r3, r3, #2
 801b032:	4413      	add	r3, r2
 801b034:	685a      	ldr	r2, [r3, #4]
 801b036:	78fb      	ldrb	r3, [r7, #3]
 801b038:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801b03c:	6879      	ldr	r1, [r7, #4]
 801b03e:	33e0      	adds	r3, #224	; 0xe0
 801b040:	009b      	lsls	r3, r3, #2
 801b042:	440b      	add	r3, r1
 801b044:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801b046:	2300      	movs	r3, #0
}
 801b048:	4618      	mov	r0, r3
 801b04a:	370c      	adds	r7, #12
 801b04c:	46bd      	mov	sp, r7
 801b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b052:	4770      	bx	lr

0801b054 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801b054:	b480      	push	{r7}
 801b056:	b085      	sub	sp, #20
 801b058:	af00      	add	r7, sp, #0
 801b05a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801b05c:	2300      	movs	r3, #0
 801b05e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801b060:	2300      	movs	r3, #0
 801b062:	73fb      	strb	r3, [r7, #15]
 801b064:	e00f      	b.n	801b086 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801b066:	7bfb      	ldrb	r3, [r7, #15]
 801b068:	687a      	ldr	r2, [r7, #4]
 801b06a:	33e0      	adds	r3, #224	; 0xe0
 801b06c:	009b      	lsls	r3, r3, #2
 801b06e:	4413      	add	r3, r2
 801b070:	685b      	ldr	r3, [r3, #4]
 801b072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b076:	2b00      	cmp	r3, #0
 801b078:	d102      	bne.n	801b080 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801b07a:	7bfb      	ldrb	r3, [r7, #15]
 801b07c:	b29b      	uxth	r3, r3
 801b07e:	e007      	b.n	801b090 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801b080:	7bfb      	ldrb	r3, [r7, #15]
 801b082:	3301      	adds	r3, #1
 801b084:	73fb      	strb	r3, [r7, #15]
 801b086:	7bfb      	ldrb	r3, [r7, #15]
 801b088:	2b0f      	cmp	r3, #15
 801b08a:	d9ec      	bls.n	801b066 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801b08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801b090:	4618      	mov	r0, r3
 801b092:	3714      	adds	r7, #20
 801b094:	46bd      	mov	sp, r7
 801b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09a:	4770      	bx	lr

0801b09c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b084      	sub	sp, #16
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801b0a6:	79fb      	ldrb	r3, [r7, #7]
 801b0a8:	4a08      	ldr	r2, [pc, #32]	; (801b0cc <disk_status+0x30>)
 801b0aa:	009b      	lsls	r3, r3, #2
 801b0ac:	4413      	add	r3, r2
 801b0ae:	685b      	ldr	r3, [r3, #4]
 801b0b0:	685b      	ldr	r3, [r3, #4]
 801b0b2:	79fa      	ldrb	r2, [r7, #7]
 801b0b4:	4905      	ldr	r1, [pc, #20]	; (801b0cc <disk_status+0x30>)
 801b0b6:	440a      	add	r2, r1
 801b0b8:	7a12      	ldrb	r2, [r2, #8]
 801b0ba:	4610      	mov	r0, r2
 801b0bc:	4798      	blx	r3
 801b0be:	4603      	mov	r3, r0
 801b0c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	3710      	adds	r7, #16
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}
 801b0cc:	2000179c 	.word	0x2000179c

0801b0d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b084      	sub	sp, #16
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801b0da:	2300      	movs	r3, #0
 801b0dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801b0de:	79fb      	ldrb	r3, [r7, #7]
 801b0e0:	4a0d      	ldr	r2, [pc, #52]	; (801b118 <disk_initialize+0x48>)
 801b0e2:	5cd3      	ldrb	r3, [r2, r3]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d111      	bne.n	801b10c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801b0e8:	79fb      	ldrb	r3, [r7, #7]
 801b0ea:	4a0b      	ldr	r2, [pc, #44]	; (801b118 <disk_initialize+0x48>)
 801b0ec:	2101      	movs	r1, #1
 801b0ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801b0f0:	79fb      	ldrb	r3, [r7, #7]
 801b0f2:	4a09      	ldr	r2, [pc, #36]	; (801b118 <disk_initialize+0x48>)
 801b0f4:	009b      	lsls	r3, r3, #2
 801b0f6:	4413      	add	r3, r2
 801b0f8:	685b      	ldr	r3, [r3, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	79fa      	ldrb	r2, [r7, #7]
 801b0fe:	4906      	ldr	r1, [pc, #24]	; (801b118 <disk_initialize+0x48>)
 801b100:	440a      	add	r2, r1
 801b102:	7a12      	ldrb	r2, [r2, #8]
 801b104:	4610      	mov	r0, r2
 801b106:	4798      	blx	r3
 801b108:	4603      	mov	r3, r0
 801b10a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801b10c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b10e:	4618      	mov	r0, r3
 801b110:	3710      	adds	r7, #16
 801b112:	46bd      	mov	sp, r7
 801b114:	bd80      	pop	{r7, pc}
 801b116:	bf00      	nop
 801b118:	2000179c 	.word	0x2000179c

0801b11c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801b11c:	b590      	push	{r4, r7, lr}
 801b11e:	b087      	sub	sp, #28
 801b120:	af00      	add	r7, sp, #0
 801b122:	60b9      	str	r1, [r7, #8]
 801b124:	607a      	str	r2, [r7, #4]
 801b126:	603b      	str	r3, [r7, #0]
 801b128:	4603      	mov	r3, r0
 801b12a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801b12c:	7bfb      	ldrb	r3, [r7, #15]
 801b12e:	4a0a      	ldr	r2, [pc, #40]	; (801b158 <disk_read+0x3c>)
 801b130:	009b      	lsls	r3, r3, #2
 801b132:	4413      	add	r3, r2
 801b134:	685b      	ldr	r3, [r3, #4]
 801b136:	689c      	ldr	r4, [r3, #8]
 801b138:	7bfb      	ldrb	r3, [r7, #15]
 801b13a:	4a07      	ldr	r2, [pc, #28]	; (801b158 <disk_read+0x3c>)
 801b13c:	4413      	add	r3, r2
 801b13e:	7a18      	ldrb	r0, [r3, #8]
 801b140:	683b      	ldr	r3, [r7, #0]
 801b142:	687a      	ldr	r2, [r7, #4]
 801b144:	68b9      	ldr	r1, [r7, #8]
 801b146:	47a0      	blx	r4
 801b148:	4603      	mov	r3, r0
 801b14a:	75fb      	strb	r3, [r7, #23]
  return res;
 801b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b14e:	4618      	mov	r0, r3
 801b150:	371c      	adds	r7, #28
 801b152:	46bd      	mov	sp, r7
 801b154:	bd90      	pop	{r4, r7, pc}
 801b156:	bf00      	nop
 801b158:	2000179c 	.word	0x2000179c

0801b15c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801b15c:	b590      	push	{r4, r7, lr}
 801b15e:	b087      	sub	sp, #28
 801b160:	af00      	add	r7, sp, #0
 801b162:	60b9      	str	r1, [r7, #8]
 801b164:	607a      	str	r2, [r7, #4]
 801b166:	603b      	str	r3, [r7, #0]
 801b168:	4603      	mov	r3, r0
 801b16a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801b16c:	7bfb      	ldrb	r3, [r7, #15]
 801b16e:	4a0a      	ldr	r2, [pc, #40]	; (801b198 <disk_write+0x3c>)
 801b170:	009b      	lsls	r3, r3, #2
 801b172:	4413      	add	r3, r2
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	68dc      	ldr	r4, [r3, #12]
 801b178:	7bfb      	ldrb	r3, [r7, #15]
 801b17a:	4a07      	ldr	r2, [pc, #28]	; (801b198 <disk_write+0x3c>)
 801b17c:	4413      	add	r3, r2
 801b17e:	7a18      	ldrb	r0, [r3, #8]
 801b180:	683b      	ldr	r3, [r7, #0]
 801b182:	687a      	ldr	r2, [r7, #4]
 801b184:	68b9      	ldr	r1, [r7, #8]
 801b186:	47a0      	blx	r4
 801b188:	4603      	mov	r3, r0
 801b18a:	75fb      	strb	r3, [r7, #23]
  return res;
 801b18c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b18e:	4618      	mov	r0, r3
 801b190:	371c      	adds	r7, #28
 801b192:	46bd      	mov	sp, r7
 801b194:	bd90      	pop	{r4, r7, pc}
 801b196:	bf00      	nop
 801b198:	2000179c 	.word	0x2000179c

0801b19c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b084      	sub	sp, #16
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	603a      	str	r2, [r7, #0]
 801b1a6:	71fb      	strb	r3, [r7, #7]
 801b1a8:	460b      	mov	r3, r1
 801b1aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801b1ac:	79fb      	ldrb	r3, [r7, #7]
 801b1ae:	4a09      	ldr	r2, [pc, #36]	; (801b1d4 <disk_ioctl+0x38>)
 801b1b0:	009b      	lsls	r3, r3, #2
 801b1b2:	4413      	add	r3, r2
 801b1b4:	685b      	ldr	r3, [r3, #4]
 801b1b6:	691b      	ldr	r3, [r3, #16]
 801b1b8:	79fa      	ldrb	r2, [r7, #7]
 801b1ba:	4906      	ldr	r1, [pc, #24]	; (801b1d4 <disk_ioctl+0x38>)
 801b1bc:	440a      	add	r2, r1
 801b1be:	7a10      	ldrb	r0, [r2, #8]
 801b1c0:	79b9      	ldrb	r1, [r7, #6]
 801b1c2:	683a      	ldr	r2, [r7, #0]
 801b1c4:	4798      	blx	r3
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	73fb      	strb	r3, [r7, #15]
  return res;
 801b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3710      	adds	r7, #16
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bd80      	pop	{r7, pc}
 801b1d4:	2000179c 	.word	0x2000179c

0801b1d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801b1d8:	b480      	push	{r7}
 801b1da:	b085      	sub	sp, #20
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	781b      	ldrb	r3, [r3, #0]
 801b1e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801b1e8:	89fb      	ldrh	r3, [r7, #14]
 801b1ea:	021b      	lsls	r3, r3, #8
 801b1ec:	b21a      	sxth	r2, r3
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	781b      	ldrb	r3, [r3, #0]
 801b1f2:	b21b      	sxth	r3, r3
 801b1f4:	4313      	orrs	r3, r2
 801b1f6:	b21b      	sxth	r3, r3
 801b1f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 801b1fa:	89fb      	ldrh	r3, [r7, #14]
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3714      	adds	r7, #20
 801b200:	46bd      	mov	sp, r7
 801b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b206:	4770      	bx	lr

0801b208 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b208:	b480      	push	{r7}
 801b20a:	b085      	sub	sp, #20
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	3303      	adds	r3, #3
 801b214:	781b      	ldrb	r3, [r3, #0]
 801b216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	021b      	lsls	r3, r3, #8
 801b21c:	687a      	ldr	r2, [r7, #4]
 801b21e:	3202      	adds	r2, #2
 801b220:	7812      	ldrb	r2, [r2, #0]
 801b222:	4313      	orrs	r3, r2
 801b224:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	021b      	lsls	r3, r3, #8
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	3201      	adds	r2, #1
 801b22e:	7812      	ldrb	r2, [r2, #0]
 801b230:	4313      	orrs	r3, r2
 801b232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	021b      	lsls	r3, r3, #8
 801b238:	687a      	ldr	r2, [r7, #4]
 801b23a:	7812      	ldrb	r2, [r2, #0]
 801b23c:	4313      	orrs	r3, r2
 801b23e:	60fb      	str	r3, [r7, #12]
	return rv;
 801b240:	68fb      	ldr	r3, [r7, #12]
}
 801b242:	4618      	mov	r0, r3
 801b244:	3714      	adds	r7, #20
 801b246:	46bd      	mov	sp, r7
 801b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24c:	4770      	bx	lr

0801b24e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b24e:	b480      	push	{r7}
 801b250:	b083      	sub	sp, #12
 801b252:	af00      	add	r7, sp, #0
 801b254:	6078      	str	r0, [r7, #4]
 801b256:	460b      	mov	r3, r1
 801b258:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	1c5a      	adds	r2, r3, #1
 801b25e:	607a      	str	r2, [r7, #4]
 801b260:	887a      	ldrh	r2, [r7, #2]
 801b262:	b2d2      	uxtb	r2, r2
 801b264:	701a      	strb	r2, [r3, #0]
 801b266:	887b      	ldrh	r3, [r7, #2]
 801b268:	0a1b      	lsrs	r3, r3, #8
 801b26a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	1c5a      	adds	r2, r3, #1
 801b270:	607a      	str	r2, [r7, #4]
 801b272:	887a      	ldrh	r2, [r7, #2]
 801b274:	b2d2      	uxtb	r2, r2
 801b276:	701a      	strb	r2, [r3, #0]
}
 801b278:	bf00      	nop
 801b27a:	370c      	adds	r7, #12
 801b27c:	46bd      	mov	sp, r7
 801b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b282:	4770      	bx	lr

0801b284 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
 801b28c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	1c5a      	adds	r2, r3, #1
 801b292:	607a      	str	r2, [r7, #4]
 801b294:	683a      	ldr	r2, [r7, #0]
 801b296:	b2d2      	uxtb	r2, r2
 801b298:	701a      	strb	r2, [r3, #0]
 801b29a:	683b      	ldr	r3, [r7, #0]
 801b29c:	0a1b      	lsrs	r3, r3, #8
 801b29e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	1c5a      	adds	r2, r3, #1
 801b2a4:	607a      	str	r2, [r7, #4]
 801b2a6:	683a      	ldr	r2, [r7, #0]
 801b2a8:	b2d2      	uxtb	r2, r2
 801b2aa:	701a      	strb	r2, [r3, #0]
 801b2ac:	683b      	ldr	r3, [r7, #0]
 801b2ae:	0a1b      	lsrs	r3, r3, #8
 801b2b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	1c5a      	adds	r2, r3, #1
 801b2b6:	607a      	str	r2, [r7, #4]
 801b2b8:	683a      	ldr	r2, [r7, #0]
 801b2ba:	b2d2      	uxtb	r2, r2
 801b2bc:	701a      	strb	r2, [r3, #0]
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	0a1b      	lsrs	r3, r3, #8
 801b2c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	1c5a      	adds	r2, r3, #1
 801b2c8:	607a      	str	r2, [r7, #4]
 801b2ca:	683a      	ldr	r2, [r7, #0]
 801b2cc:	b2d2      	uxtb	r2, r2
 801b2ce:	701a      	strb	r2, [r3, #0]
}
 801b2d0:	bf00      	nop
 801b2d2:	370c      	adds	r7, #12
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2da:	4770      	bx	lr

0801b2dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b2dc:	b480      	push	{r7}
 801b2de:	b087      	sub	sp, #28
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	60f8      	str	r0, [r7, #12]
 801b2e4:	60b9      	str	r1, [r7, #8]
 801b2e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b2ec:	68bb      	ldr	r3, [r7, #8]
 801b2ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d00d      	beq.n	801b312 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b2f6:	693a      	ldr	r2, [r7, #16]
 801b2f8:	1c53      	adds	r3, r2, #1
 801b2fa:	613b      	str	r3, [r7, #16]
 801b2fc:	697b      	ldr	r3, [r7, #20]
 801b2fe:	1c59      	adds	r1, r3, #1
 801b300:	6179      	str	r1, [r7, #20]
 801b302:	7812      	ldrb	r2, [r2, #0]
 801b304:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	3b01      	subs	r3, #1
 801b30a:	607b      	str	r3, [r7, #4]
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d1f1      	bne.n	801b2f6 <mem_cpy+0x1a>
	}
}
 801b312:	bf00      	nop
 801b314:	371c      	adds	r7, #28
 801b316:	46bd      	mov	sp, r7
 801b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b31c:	4770      	bx	lr

0801b31e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b31e:	b480      	push	{r7}
 801b320:	b087      	sub	sp, #28
 801b322:	af00      	add	r7, sp, #0
 801b324:	60f8      	str	r0, [r7, #12]
 801b326:	60b9      	str	r1, [r7, #8]
 801b328:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b32e:	697b      	ldr	r3, [r7, #20]
 801b330:	1c5a      	adds	r2, r3, #1
 801b332:	617a      	str	r2, [r7, #20]
 801b334:	68ba      	ldr	r2, [r7, #8]
 801b336:	b2d2      	uxtb	r2, r2
 801b338:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	3b01      	subs	r3, #1
 801b33e:	607b      	str	r3, [r7, #4]
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d1f3      	bne.n	801b32e <mem_set+0x10>
}
 801b346:	bf00      	nop
 801b348:	bf00      	nop
 801b34a:	371c      	adds	r7, #28
 801b34c:	46bd      	mov	sp, r7
 801b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b352:	4770      	bx	lr

0801b354 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b354:	b480      	push	{r7}
 801b356:	b089      	sub	sp, #36	; 0x24
 801b358:	af00      	add	r7, sp, #0
 801b35a:	60f8      	str	r0, [r7, #12]
 801b35c:	60b9      	str	r1, [r7, #8]
 801b35e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	61fb      	str	r3, [r7, #28]
 801b364:	68bb      	ldr	r3, [r7, #8]
 801b366:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b368:	2300      	movs	r3, #0
 801b36a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b36c:	69fb      	ldr	r3, [r7, #28]
 801b36e:	1c5a      	adds	r2, r3, #1
 801b370:	61fa      	str	r2, [r7, #28]
 801b372:	781b      	ldrb	r3, [r3, #0]
 801b374:	4619      	mov	r1, r3
 801b376:	69bb      	ldr	r3, [r7, #24]
 801b378:	1c5a      	adds	r2, r3, #1
 801b37a:	61ba      	str	r2, [r7, #24]
 801b37c:	781b      	ldrb	r3, [r3, #0]
 801b37e:	1acb      	subs	r3, r1, r3
 801b380:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	3b01      	subs	r3, #1
 801b386:	607b      	str	r3, [r7, #4]
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d002      	beq.n	801b394 <mem_cmp+0x40>
 801b38e:	697b      	ldr	r3, [r7, #20]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d0eb      	beq.n	801b36c <mem_cmp+0x18>

	return r;
 801b394:	697b      	ldr	r3, [r7, #20]
}
 801b396:	4618      	mov	r0, r3
 801b398:	3724      	adds	r7, #36	; 0x24
 801b39a:	46bd      	mov	sp, r7
 801b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a0:	4770      	bx	lr

0801b3a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b3a2:	b480      	push	{r7}
 801b3a4:	b083      	sub	sp, #12
 801b3a6:	af00      	add	r7, sp, #0
 801b3a8:	6078      	str	r0, [r7, #4]
 801b3aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b3ac:	e002      	b.n	801b3b4 <chk_chr+0x12>
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	3301      	adds	r3, #1
 801b3b2:	607b      	str	r3, [r7, #4]
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d005      	beq.n	801b3c8 <chk_chr+0x26>
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	781b      	ldrb	r3, [r3, #0]
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	683b      	ldr	r3, [r7, #0]
 801b3c4:	4293      	cmp	r3, r2
 801b3c6:	d1f2      	bne.n	801b3ae <chk_chr+0xc>
	return *str;
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	781b      	ldrb	r3, [r3, #0]
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	370c      	adds	r7, #12
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d6:	4770      	bx	lr

0801b3d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b3d8:	b480      	push	{r7}
 801b3da:	b085      	sub	sp, #20
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
 801b3e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	60bb      	str	r3, [r7, #8]
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	60fb      	str	r3, [r7, #12]
 801b3ea:	e029      	b.n	801b440 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b3ec:	4a27      	ldr	r2, [pc, #156]	; (801b48c <chk_lock+0xb4>)
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	011b      	lsls	r3, r3, #4
 801b3f2:	4413      	add	r3, r2
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d01d      	beq.n	801b436 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b3fa:	4a24      	ldr	r2, [pc, #144]	; (801b48c <chk_lock+0xb4>)
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	011b      	lsls	r3, r3, #4
 801b400:	4413      	add	r3, r2
 801b402:	681a      	ldr	r2, [r3, #0]
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	429a      	cmp	r2, r3
 801b40a:	d116      	bne.n	801b43a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b40c:	4a1f      	ldr	r2, [pc, #124]	; (801b48c <chk_lock+0xb4>)
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	011b      	lsls	r3, r3, #4
 801b412:	4413      	add	r3, r2
 801b414:	3304      	adds	r3, #4
 801b416:	681a      	ldr	r2, [r3, #0]
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b41c:	429a      	cmp	r2, r3
 801b41e:	d10c      	bne.n	801b43a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b420:	4a1a      	ldr	r2, [pc, #104]	; (801b48c <chk_lock+0xb4>)
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	011b      	lsls	r3, r3, #4
 801b426:	4413      	add	r3, r2
 801b428:	3308      	adds	r3, #8
 801b42a:	681a      	ldr	r2, [r3, #0]
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b430:	429a      	cmp	r2, r3
 801b432:	d102      	bne.n	801b43a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b434:	e007      	b.n	801b446 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b436:	2301      	movs	r3, #1
 801b438:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	3301      	adds	r3, #1
 801b43e:	60fb      	str	r3, [r7, #12]
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	2b01      	cmp	r3, #1
 801b444:	d9d2      	bls.n	801b3ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	2b02      	cmp	r3, #2
 801b44a:	d109      	bne.n	801b460 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b44c:	68bb      	ldr	r3, [r7, #8]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d102      	bne.n	801b458 <chk_lock+0x80>
 801b452:	683b      	ldr	r3, [r7, #0]
 801b454:	2b02      	cmp	r3, #2
 801b456:	d101      	bne.n	801b45c <chk_lock+0x84>
 801b458:	2300      	movs	r3, #0
 801b45a:	e010      	b.n	801b47e <chk_lock+0xa6>
 801b45c:	2312      	movs	r3, #18
 801b45e:	e00e      	b.n	801b47e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d108      	bne.n	801b478 <chk_lock+0xa0>
 801b466:	4a09      	ldr	r2, [pc, #36]	; (801b48c <chk_lock+0xb4>)
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	011b      	lsls	r3, r3, #4
 801b46c:	4413      	add	r3, r2
 801b46e:	330c      	adds	r3, #12
 801b470:	881b      	ldrh	r3, [r3, #0]
 801b472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b476:	d101      	bne.n	801b47c <chk_lock+0xa4>
 801b478:	2310      	movs	r3, #16
 801b47a:	e000      	b.n	801b47e <chk_lock+0xa6>
 801b47c:	2300      	movs	r3, #0
}
 801b47e:	4618      	mov	r0, r3
 801b480:	3714      	adds	r7, #20
 801b482:	46bd      	mov	sp, r7
 801b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b488:	4770      	bx	lr
 801b48a:	bf00      	nop
 801b48c:	2000177c 	.word	0x2000177c

0801b490 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b490:	b480      	push	{r7}
 801b492:	b083      	sub	sp, #12
 801b494:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b496:	2300      	movs	r3, #0
 801b498:	607b      	str	r3, [r7, #4]
 801b49a:	e002      	b.n	801b4a2 <enq_lock+0x12>
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	3301      	adds	r3, #1
 801b4a0:	607b      	str	r3, [r7, #4]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2b01      	cmp	r3, #1
 801b4a6:	d806      	bhi.n	801b4b6 <enq_lock+0x26>
 801b4a8:	4a09      	ldr	r2, [pc, #36]	; (801b4d0 <enq_lock+0x40>)
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	011b      	lsls	r3, r3, #4
 801b4ae:	4413      	add	r3, r2
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d1f2      	bne.n	801b49c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	2b02      	cmp	r3, #2
 801b4ba:	bf14      	ite	ne
 801b4bc:	2301      	movne	r3, #1
 801b4be:	2300      	moveq	r3, #0
 801b4c0:	b2db      	uxtb	r3, r3
}
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	370c      	adds	r7, #12
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	2000177c 	.word	0x2000177c

0801b4d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b4d4:	b480      	push	{r7}
 801b4d6:	b085      	sub	sp, #20
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	6078      	str	r0, [r7, #4]
 801b4dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b4de:	2300      	movs	r3, #0
 801b4e0:	60fb      	str	r3, [r7, #12]
 801b4e2:	e01f      	b.n	801b524 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b4e4:	4a41      	ldr	r2, [pc, #260]	; (801b5ec <inc_lock+0x118>)
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	011b      	lsls	r3, r3, #4
 801b4ea:	4413      	add	r3, r2
 801b4ec:	681a      	ldr	r2, [r3, #0]
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	d113      	bne.n	801b51e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b4f6:	4a3d      	ldr	r2, [pc, #244]	; (801b5ec <inc_lock+0x118>)
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	011b      	lsls	r3, r3, #4
 801b4fc:	4413      	add	r3, r2
 801b4fe:	3304      	adds	r3, #4
 801b500:	681a      	ldr	r2, [r3, #0]
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b506:	429a      	cmp	r2, r3
 801b508:	d109      	bne.n	801b51e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b50a:	4a38      	ldr	r2, [pc, #224]	; (801b5ec <inc_lock+0x118>)
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	011b      	lsls	r3, r3, #4
 801b510:	4413      	add	r3, r2
 801b512:	3308      	adds	r3, #8
 801b514:	681a      	ldr	r2, [r3, #0]
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b51a:	429a      	cmp	r2, r3
 801b51c:	d006      	beq.n	801b52c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	3301      	adds	r3, #1
 801b522:	60fb      	str	r3, [r7, #12]
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	2b01      	cmp	r3, #1
 801b528:	d9dc      	bls.n	801b4e4 <inc_lock+0x10>
 801b52a:	e000      	b.n	801b52e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b52c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	2b02      	cmp	r3, #2
 801b532:	d132      	bne.n	801b59a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b534:	2300      	movs	r3, #0
 801b536:	60fb      	str	r3, [r7, #12]
 801b538:	e002      	b.n	801b540 <inc_lock+0x6c>
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	3301      	adds	r3, #1
 801b53e:	60fb      	str	r3, [r7, #12]
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	2b01      	cmp	r3, #1
 801b544:	d806      	bhi.n	801b554 <inc_lock+0x80>
 801b546:	4a29      	ldr	r2, [pc, #164]	; (801b5ec <inc_lock+0x118>)
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	011b      	lsls	r3, r3, #4
 801b54c:	4413      	add	r3, r2
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d1f2      	bne.n	801b53a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	2b02      	cmp	r3, #2
 801b558:	d101      	bne.n	801b55e <inc_lock+0x8a>
 801b55a:	2300      	movs	r3, #0
 801b55c:	e040      	b.n	801b5e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	681a      	ldr	r2, [r3, #0]
 801b562:	4922      	ldr	r1, [pc, #136]	; (801b5ec <inc_lock+0x118>)
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	011b      	lsls	r3, r3, #4
 801b568:	440b      	add	r3, r1
 801b56a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	689a      	ldr	r2, [r3, #8]
 801b570:	491e      	ldr	r1, [pc, #120]	; (801b5ec <inc_lock+0x118>)
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	011b      	lsls	r3, r3, #4
 801b576:	440b      	add	r3, r1
 801b578:	3304      	adds	r3, #4
 801b57a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	695a      	ldr	r2, [r3, #20]
 801b580:	491a      	ldr	r1, [pc, #104]	; (801b5ec <inc_lock+0x118>)
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	011b      	lsls	r3, r3, #4
 801b586:	440b      	add	r3, r1
 801b588:	3308      	adds	r3, #8
 801b58a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b58c:	4a17      	ldr	r2, [pc, #92]	; (801b5ec <inc_lock+0x118>)
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	011b      	lsls	r3, r3, #4
 801b592:	4413      	add	r3, r2
 801b594:	330c      	adds	r3, #12
 801b596:	2200      	movs	r2, #0
 801b598:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b59a:	683b      	ldr	r3, [r7, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d009      	beq.n	801b5b4 <inc_lock+0xe0>
 801b5a0:	4a12      	ldr	r2, [pc, #72]	; (801b5ec <inc_lock+0x118>)
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	011b      	lsls	r3, r3, #4
 801b5a6:	4413      	add	r3, r2
 801b5a8:	330c      	adds	r3, #12
 801b5aa:	881b      	ldrh	r3, [r3, #0]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d001      	beq.n	801b5b4 <inc_lock+0xe0>
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	e015      	b.n	801b5e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b5b4:	683b      	ldr	r3, [r7, #0]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d108      	bne.n	801b5cc <inc_lock+0xf8>
 801b5ba:	4a0c      	ldr	r2, [pc, #48]	; (801b5ec <inc_lock+0x118>)
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	011b      	lsls	r3, r3, #4
 801b5c0:	4413      	add	r3, r2
 801b5c2:	330c      	adds	r3, #12
 801b5c4:	881b      	ldrh	r3, [r3, #0]
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	b29a      	uxth	r2, r3
 801b5ca:	e001      	b.n	801b5d0 <inc_lock+0xfc>
 801b5cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b5d0:	4906      	ldr	r1, [pc, #24]	; (801b5ec <inc_lock+0x118>)
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	011b      	lsls	r3, r3, #4
 801b5d6:	440b      	add	r3, r1
 801b5d8:	330c      	adds	r3, #12
 801b5da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	3301      	adds	r3, #1
}
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	3714      	adds	r7, #20
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ea:	4770      	bx	lr
 801b5ec:	2000177c 	.word	0x2000177c

0801b5f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b5f0:	b480      	push	{r7}
 801b5f2:	b085      	sub	sp, #20
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	3b01      	subs	r3, #1
 801b5fc:	607b      	str	r3, [r7, #4]
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	2b01      	cmp	r3, #1
 801b602:	d825      	bhi.n	801b650 <dec_lock+0x60>
		n = Files[i].ctr;
 801b604:	4a17      	ldr	r2, [pc, #92]	; (801b664 <dec_lock+0x74>)
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	011b      	lsls	r3, r3, #4
 801b60a:	4413      	add	r3, r2
 801b60c:	330c      	adds	r3, #12
 801b60e:	881b      	ldrh	r3, [r3, #0]
 801b610:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b612:	89fb      	ldrh	r3, [r7, #14]
 801b614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b618:	d101      	bne.n	801b61e <dec_lock+0x2e>
 801b61a:	2300      	movs	r3, #0
 801b61c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b61e:	89fb      	ldrh	r3, [r7, #14]
 801b620:	2b00      	cmp	r3, #0
 801b622:	d002      	beq.n	801b62a <dec_lock+0x3a>
 801b624:	89fb      	ldrh	r3, [r7, #14]
 801b626:	3b01      	subs	r3, #1
 801b628:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b62a:	4a0e      	ldr	r2, [pc, #56]	; (801b664 <dec_lock+0x74>)
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	011b      	lsls	r3, r3, #4
 801b630:	4413      	add	r3, r2
 801b632:	330c      	adds	r3, #12
 801b634:	89fa      	ldrh	r2, [r7, #14]
 801b636:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b638:	89fb      	ldrh	r3, [r7, #14]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d105      	bne.n	801b64a <dec_lock+0x5a>
 801b63e:	4a09      	ldr	r2, [pc, #36]	; (801b664 <dec_lock+0x74>)
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	011b      	lsls	r3, r3, #4
 801b644:	4413      	add	r3, r2
 801b646:	2200      	movs	r2, #0
 801b648:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b64a:	2300      	movs	r3, #0
 801b64c:	737b      	strb	r3, [r7, #13]
 801b64e:	e001      	b.n	801b654 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b650:	2302      	movs	r3, #2
 801b652:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b654:	7b7b      	ldrb	r3, [r7, #13]
}
 801b656:	4618      	mov	r0, r3
 801b658:	3714      	adds	r7, #20
 801b65a:	46bd      	mov	sp, r7
 801b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b660:	4770      	bx	lr
 801b662:	bf00      	nop
 801b664:	2000177c 	.word	0x2000177c

0801b668 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b668:	b480      	push	{r7}
 801b66a:	b085      	sub	sp, #20
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b670:	2300      	movs	r3, #0
 801b672:	60fb      	str	r3, [r7, #12]
 801b674:	e010      	b.n	801b698 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b676:	4a0d      	ldr	r2, [pc, #52]	; (801b6ac <clear_lock+0x44>)
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	011b      	lsls	r3, r3, #4
 801b67c:	4413      	add	r3, r2
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	687a      	ldr	r2, [r7, #4]
 801b682:	429a      	cmp	r2, r3
 801b684:	d105      	bne.n	801b692 <clear_lock+0x2a>
 801b686:	4a09      	ldr	r2, [pc, #36]	; (801b6ac <clear_lock+0x44>)
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	011b      	lsls	r3, r3, #4
 801b68c:	4413      	add	r3, r2
 801b68e:	2200      	movs	r2, #0
 801b690:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	3301      	adds	r3, #1
 801b696:	60fb      	str	r3, [r7, #12]
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	2b01      	cmp	r3, #1
 801b69c:	d9eb      	bls.n	801b676 <clear_lock+0xe>
	}
}
 801b69e:	bf00      	nop
 801b6a0:	bf00      	nop
 801b6a2:	3714      	adds	r7, #20
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6aa:	4770      	bx	lr
 801b6ac:	2000177c 	.word	0x2000177c

0801b6b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b6b0:	b580      	push	{r7, lr}
 801b6b2:	b086      	sub	sp, #24
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	78db      	ldrb	r3, [r3, #3]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d034      	beq.n	801b72e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	7858      	ldrb	r0, [r3, #1]
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b6d4:	2301      	movs	r3, #1
 801b6d6:	697a      	ldr	r2, [r7, #20]
 801b6d8:	f7ff fd40 	bl	801b15c <disk_write>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d002      	beq.n	801b6e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 801b6e2:	2301      	movs	r3, #1
 801b6e4:	73fb      	strb	r3, [r7, #15]
 801b6e6:	e022      	b.n	801b72e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	6a1b      	ldr	r3, [r3, #32]
 801b6f2:	697a      	ldr	r2, [r7, #20]
 801b6f4:	1ad2      	subs	r2, r2, r3
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	699b      	ldr	r3, [r3, #24]
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	d217      	bcs.n	801b72e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	789b      	ldrb	r3, [r3, #2]
 801b702:	613b      	str	r3, [r7, #16]
 801b704:	e010      	b.n	801b728 <sync_window+0x78>
					wsect += fs->fsize;
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	699b      	ldr	r3, [r3, #24]
 801b70a:	697a      	ldr	r2, [r7, #20]
 801b70c:	4413      	add	r3, r2
 801b70e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	7858      	ldrb	r0, [r3, #1]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b71a:	2301      	movs	r3, #1
 801b71c:	697a      	ldr	r2, [r7, #20]
 801b71e:	f7ff fd1d 	bl	801b15c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b722:	693b      	ldr	r3, [r7, #16]
 801b724:	3b01      	subs	r3, #1
 801b726:	613b      	str	r3, [r7, #16]
 801b728:	693b      	ldr	r3, [r7, #16]
 801b72a:	2b01      	cmp	r3, #1
 801b72c:	d8eb      	bhi.n	801b706 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b72e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b730:	4618      	mov	r0, r3
 801b732:	3718      	adds	r7, #24
 801b734:	46bd      	mov	sp, r7
 801b736:	bd80      	pop	{r7, pc}

0801b738 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b084      	sub	sp, #16
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
 801b740:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b742:	2300      	movs	r3, #0
 801b744:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b74a:	683a      	ldr	r2, [r7, #0]
 801b74c:	429a      	cmp	r2, r3
 801b74e:	d01b      	beq.n	801b788 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b750:	6878      	ldr	r0, [r7, #4]
 801b752:	f7ff ffad 	bl	801b6b0 <sync_window>
 801b756:	4603      	mov	r3, r0
 801b758:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b75a:	7bfb      	ldrb	r3, [r7, #15]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d113      	bne.n	801b788 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	7858      	ldrb	r0, [r3, #1]
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b76a:	2301      	movs	r3, #1
 801b76c:	683a      	ldr	r2, [r7, #0]
 801b76e:	f7ff fcd5 	bl	801b11c <disk_read>
 801b772:	4603      	mov	r3, r0
 801b774:	2b00      	cmp	r3, #0
 801b776:	d004      	beq.n	801b782 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b778:	f04f 33ff 	mov.w	r3, #4294967295
 801b77c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b77e:	2301      	movs	r3, #1
 801b780:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	683a      	ldr	r2, [r7, #0]
 801b786:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801b788:	7bfb      	ldrb	r3, [r7, #15]
}
 801b78a:	4618      	mov	r0, r3
 801b78c:	3710      	adds	r7, #16
 801b78e:	46bd      	mov	sp, r7
 801b790:	bd80      	pop	{r7, pc}
	...

0801b794 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b79c:	6878      	ldr	r0, [r7, #4]
 801b79e:	f7ff ff87 	bl	801b6b0 <sync_window>
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b7a6:	7bfb      	ldrb	r3, [r7, #15]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d158      	bne.n	801b85e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	781b      	ldrb	r3, [r3, #0]
 801b7b0:	2b03      	cmp	r3, #3
 801b7b2:	d148      	bne.n	801b846 <sync_fs+0xb2>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	791b      	ldrb	r3, [r3, #4]
 801b7b8:	2b01      	cmp	r3, #1
 801b7ba:	d144      	bne.n	801b846 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	3330      	adds	r3, #48	; 0x30
 801b7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b7c4:	2100      	movs	r1, #0
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7ff fda9 	bl	801b31e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	3330      	adds	r3, #48	; 0x30
 801b7d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801b7d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801b7d8:	4618      	mov	r0, r3
 801b7da:	f7ff fd38 	bl	801b24e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	3330      	adds	r3, #48	; 0x30
 801b7e2:	4921      	ldr	r1, [pc, #132]	; (801b868 <sync_fs+0xd4>)
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7ff fd4d 	bl	801b284 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	3330      	adds	r3, #48	; 0x30
 801b7ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801b7f2:	491e      	ldr	r1, [pc, #120]	; (801b86c <sync_fs+0xd8>)
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f7ff fd45 	bl	801b284 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	3330      	adds	r3, #48	; 0x30
 801b7fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	691b      	ldr	r3, [r3, #16]
 801b806:	4619      	mov	r1, r3
 801b808:	4610      	mov	r0, r2
 801b80a:	f7ff fd3b 	bl	801b284 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	3330      	adds	r3, #48	; 0x30
 801b812:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	68db      	ldr	r3, [r3, #12]
 801b81a:	4619      	mov	r1, r3
 801b81c:	4610      	mov	r0, r2
 801b81e:	f7ff fd31 	bl	801b284 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	69db      	ldr	r3, [r3, #28]
 801b826:	1c5a      	adds	r2, r3, #1
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	7858      	ldrb	r0, [r3, #1]
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b83a:	2301      	movs	r3, #1
 801b83c:	f7ff fc8e 	bl	801b15c <disk_write>
			fs->fsi_flag = 0;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	2200      	movs	r2, #0
 801b844:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	785b      	ldrb	r3, [r3, #1]
 801b84a:	2200      	movs	r2, #0
 801b84c:	2100      	movs	r1, #0
 801b84e:	4618      	mov	r0, r3
 801b850:	f7ff fca4 	bl	801b19c <disk_ioctl>
 801b854:	4603      	mov	r3, r0
 801b856:	2b00      	cmp	r3, #0
 801b858:	d001      	beq.n	801b85e <sync_fs+0xca>
 801b85a:	2301      	movs	r3, #1
 801b85c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b85e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b860:	4618      	mov	r0, r3
 801b862:	3710      	adds	r7, #16
 801b864:	46bd      	mov	sp, r7
 801b866:	bd80      	pop	{r7, pc}
 801b868:	41615252 	.word	0x41615252
 801b86c:	61417272 	.word	0x61417272

0801b870 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b870:	b480      	push	{r7}
 801b872:	b083      	sub	sp, #12
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
 801b878:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	3b02      	subs	r3, #2
 801b87e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	695b      	ldr	r3, [r3, #20]
 801b884:	3b02      	subs	r3, #2
 801b886:	683a      	ldr	r2, [r7, #0]
 801b888:	429a      	cmp	r2, r3
 801b88a:	d301      	bcc.n	801b890 <clust2sect+0x20>
 801b88c:	2300      	movs	r3, #0
 801b88e:	e008      	b.n	801b8a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	895b      	ldrh	r3, [r3, #10]
 801b894:	461a      	mov	r2, r3
 801b896:	683b      	ldr	r3, [r7, #0]
 801b898:	fb03 f202 	mul.w	r2, r3, r2
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8a0:	4413      	add	r3, r2
}
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	370c      	adds	r7, #12
 801b8a6:	46bd      	mov	sp, r7
 801b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ac:	4770      	bx	lr

0801b8ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b8ae:	b580      	push	{r7, lr}
 801b8b0:	b086      	sub	sp, #24
 801b8b2:	af00      	add	r7, sp, #0
 801b8b4:	6078      	str	r0, [r7, #4]
 801b8b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b8be:	683b      	ldr	r3, [r7, #0]
 801b8c0:	2b01      	cmp	r3, #1
 801b8c2:	d904      	bls.n	801b8ce <get_fat+0x20>
 801b8c4:	693b      	ldr	r3, [r7, #16]
 801b8c6:	695b      	ldr	r3, [r3, #20]
 801b8c8:	683a      	ldr	r2, [r7, #0]
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d302      	bcc.n	801b8d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	617b      	str	r3, [r7, #20]
 801b8d2:	e08f      	b.n	801b9f4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b8d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b8d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b8da:	693b      	ldr	r3, [r7, #16]
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	2b03      	cmp	r3, #3
 801b8e0:	d062      	beq.n	801b9a8 <get_fat+0xfa>
 801b8e2:	2b03      	cmp	r3, #3
 801b8e4:	dc7c      	bgt.n	801b9e0 <get_fat+0x132>
 801b8e6:	2b01      	cmp	r3, #1
 801b8e8:	d002      	beq.n	801b8f0 <get_fat+0x42>
 801b8ea:	2b02      	cmp	r3, #2
 801b8ec:	d042      	beq.n	801b974 <get_fat+0xc6>
 801b8ee:	e077      	b.n	801b9e0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b8f0:	683b      	ldr	r3, [r7, #0]
 801b8f2:	60fb      	str	r3, [r7, #12]
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	085b      	lsrs	r3, r3, #1
 801b8f8:	68fa      	ldr	r2, [r7, #12]
 801b8fa:	4413      	add	r3, r2
 801b8fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b8fe:	693b      	ldr	r3, [r7, #16]
 801b900:	6a1a      	ldr	r2, [r3, #32]
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	0a5b      	lsrs	r3, r3, #9
 801b906:	4413      	add	r3, r2
 801b908:	4619      	mov	r1, r3
 801b90a:	6938      	ldr	r0, [r7, #16]
 801b90c:	f7ff ff14 	bl	801b738 <move_window>
 801b910:	4603      	mov	r3, r0
 801b912:	2b00      	cmp	r3, #0
 801b914:	d167      	bne.n	801b9e6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	1c5a      	adds	r2, r3, #1
 801b91a:	60fa      	str	r2, [r7, #12]
 801b91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b920:	693a      	ldr	r2, [r7, #16]
 801b922:	4413      	add	r3, r2
 801b924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b928:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b92a:	693b      	ldr	r3, [r7, #16]
 801b92c:	6a1a      	ldr	r2, [r3, #32]
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	0a5b      	lsrs	r3, r3, #9
 801b932:	4413      	add	r3, r2
 801b934:	4619      	mov	r1, r3
 801b936:	6938      	ldr	r0, [r7, #16]
 801b938:	f7ff fefe 	bl	801b738 <move_window>
 801b93c:	4603      	mov	r3, r0
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d153      	bne.n	801b9ea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b948:	693a      	ldr	r2, [r7, #16]
 801b94a:	4413      	add	r3, r2
 801b94c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b950:	021b      	lsls	r3, r3, #8
 801b952:	461a      	mov	r2, r3
 801b954:	68bb      	ldr	r3, [r7, #8]
 801b956:	4313      	orrs	r3, r2
 801b958:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	f003 0301 	and.w	r3, r3, #1
 801b960:	2b00      	cmp	r3, #0
 801b962:	d002      	beq.n	801b96a <get_fat+0xbc>
 801b964:	68bb      	ldr	r3, [r7, #8]
 801b966:	091b      	lsrs	r3, r3, #4
 801b968:	e002      	b.n	801b970 <get_fat+0xc2>
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b970:	617b      	str	r3, [r7, #20]
			break;
 801b972:	e03f      	b.n	801b9f4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b974:	693b      	ldr	r3, [r7, #16]
 801b976:	6a1a      	ldr	r2, [r3, #32]
 801b978:	683b      	ldr	r3, [r7, #0]
 801b97a:	0a1b      	lsrs	r3, r3, #8
 801b97c:	4413      	add	r3, r2
 801b97e:	4619      	mov	r1, r3
 801b980:	6938      	ldr	r0, [r7, #16]
 801b982:	f7ff fed9 	bl	801b738 <move_window>
 801b986:	4603      	mov	r3, r0
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d130      	bne.n	801b9ee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b98c:	693b      	ldr	r3, [r7, #16]
 801b98e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b992:	683b      	ldr	r3, [r7, #0]
 801b994:	005b      	lsls	r3, r3, #1
 801b996:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801b99a:	4413      	add	r3, r2
 801b99c:	4618      	mov	r0, r3
 801b99e:	f7ff fc1b 	bl	801b1d8 <ld_word>
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	617b      	str	r3, [r7, #20]
			break;
 801b9a6:	e025      	b.n	801b9f4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b9a8:	693b      	ldr	r3, [r7, #16]
 801b9aa:	6a1a      	ldr	r2, [r3, #32]
 801b9ac:	683b      	ldr	r3, [r7, #0]
 801b9ae:	09db      	lsrs	r3, r3, #7
 801b9b0:	4413      	add	r3, r2
 801b9b2:	4619      	mov	r1, r3
 801b9b4:	6938      	ldr	r0, [r7, #16]
 801b9b6:	f7ff febf 	bl	801b738 <move_window>
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d118      	bne.n	801b9f2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b9c6:	683b      	ldr	r3, [r7, #0]
 801b9c8:	009b      	lsls	r3, r3, #2
 801b9ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801b9ce:	4413      	add	r3, r2
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	f7ff fc19 	bl	801b208 <ld_dword>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b9dc:	617b      	str	r3, [r7, #20]
			break;
 801b9de:	e009      	b.n	801b9f4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b9e0:	2301      	movs	r3, #1
 801b9e2:	617b      	str	r3, [r7, #20]
 801b9e4:	e006      	b.n	801b9f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b9e6:	bf00      	nop
 801b9e8:	e004      	b.n	801b9f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b9ea:	bf00      	nop
 801b9ec:	e002      	b.n	801b9f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b9ee:	bf00      	nop
 801b9f0:	e000      	b.n	801b9f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b9f2:	bf00      	nop
		}
	}

	return val;
 801b9f4:	697b      	ldr	r3, [r7, #20]
}
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	3718      	adds	r7, #24
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	bd80      	pop	{r7, pc}

0801b9fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b9fe:	b590      	push	{r4, r7, lr}
 801ba00:	b089      	sub	sp, #36	; 0x24
 801ba02:	af00      	add	r7, sp, #0
 801ba04:	60f8      	str	r0, [r7, #12]
 801ba06:	60b9      	str	r1, [r7, #8]
 801ba08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801ba0a:	2302      	movs	r3, #2
 801ba0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801ba0e:	68bb      	ldr	r3, [r7, #8]
 801ba10:	2b01      	cmp	r3, #1
 801ba12:	f240 80d2 	bls.w	801bbba <put_fat+0x1bc>
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	695b      	ldr	r3, [r3, #20]
 801ba1a:	68ba      	ldr	r2, [r7, #8]
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	f080 80cc 	bcs.w	801bbba <put_fat+0x1bc>
		switch (fs->fs_type) {
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	781b      	ldrb	r3, [r3, #0]
 801ba26:	2b03      	cmp	r3, #3
 801ba28:	f000 8096 	beq.w	801bb58 <put_fat+0x15a>
 801ba2c:	2b03      	cmp	r3, #3
 801ba2e:	f300 80cd 	bgt.w	801bbcc <put_fat+0x1ce>
 801ba32:	2b01      	cmp	r3, #1
 801ba34:	d002      	beq.n	801ba3c <put_fat+0x3e>
 801ba36:	2b02      	cmp	r3, #2
 801ba38:	d06e      	beq.n	801bb18 <put_fat+0x11a>
 801ba3a:	e0c7      	b.n	801bbcc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801ba3c:	68bb      	ldr	r3, [r7, #8]
 801ba3e:	61bb      	str	r3, [r7, #24]
 801ba40:	69bb      	ldr	r3, [r7, #24]
 801ba42:	085b      	lsrs	r3, r3, #1
 801ba44:	69ba      	ldr	r2, [r7, #24]
 801ba46:	4413      	add	r3, r2
 801ba48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	6a1a      	ldr	r2, [r3, #32]
 801ba4e:	69bb      	ldr	r3, [r7, #24]
 801ba50:	0a5b      	lsrs	r3, r3, #9
 801ba52:	4413      	add	r3, r2
 801ba54:	4619      	mov	r1, r3
 801ba56:	68f8      	ldr	r0, [r7, #12]
 801ba58:	f7ff fe6e 	bl	801b738 <move_window>
 801ba5c:	4603      	mov	r3, r0
 801ba5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ba60:	7ffb      	ldrb	r3, [r7, #31]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	f040 80ab 	bne.w	801bbbe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801ba6e:	69bb      	ldr	r3, [r7, #24]
 801ba70:	1c59      	adds	r1, r3, #1
 801ba72:	61b9      	str	r1, [r7, #24]
 801ba74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba78:	4413      	add	r3, r2
 801ba7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	f003 0301 	and.w	r3, r3, #1
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d00d      	beq.n	801baa2 <put_fat+0xa4>
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	781b      	ldrb	r3, [r3, #0]
 801ba8a:	b25b      	sxtb	r3, r3
 801ba8c:	f003 030f 	and.w	r3, r3, #15
 801ba90:	b25a      	sxtb	r2, r3
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	b2db      	uxtb	r3, r3
 801ba96:	011b      	lsls	r3, r3, #4
 801ba98:	b25b      	sxtb	r3, r3
 801ba9a:	4313      	orrs	r3, r2
 801ba9c:	b25b      	sxtb	r3, r3
 801ba9e:	b2db      	uxtb	r3, r3
 801baa0:	e001      	b.n	801baa6 <put_fat+0xa8>
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	b2db      	uxtb	r3, r3
 801baa6:	697a      	ldr	r2, [r7, #20]
 801baa8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	2201      	movs	r2, #1
 801baae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	6a1a      	ldr	r2, [r3, #32]
 801bab4:	69bb      	ldr	r3, [r7, #24]
 801bab6:	0a5b      	lsrs	r3, r3, #9
 801bab8:	4413      	add	r3, r2
 801baba:	4619      	mov	r1, r3
 801babc:	68f8      	ldr	r0, [r7, #12]
 801babe:	f7ff fe3b 	bl	801b738 <move_window>
 801bac2:	4603      	mov	r3, r0
 801bac4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bac6:	7ffb      	ldrb	r3, [r7, #31]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d17a      	bne.n	801bbc2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bad2:	69bb      	ldr	r3, [r7, #24]
 801bad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bad8:	4413      	add	r3, r2
 801bada:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801badc:	68bb      	ldr	r3, [r7, #8]
 801bade:	f003 0301 	and.w	r3, r3, #1
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d003      	beq.n	801baee <put_fat+0xf0>
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	091b      	lsrs	r3, r3, #4
 801baea:	b2db      	uxtb	r3, r3
 801baec:	e00e      	b.n	801bb0c <put_fat+0x10e>
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	781b      	ldrb	r3, [r3, #0]
 801baf2:	b25b      	sxtb	r3, r3
 801baf4:	f023 030f 	bic.w	r3, r3, #15
 801baf8:	b25a      	sxtb	r2, r3
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	0a1b      	lsrs	r3, r3, #8
 801bafe:	b25b      	sxtb	r3, r3
 801bb00:	f003 030f 	and.w	r3, r3, #15
 801bb04:	b25b      	sxtb	r3, r3
 801bb06:	4313      	orrs	r3, r2
 801bb08:	b25b      	sxtb	r3, r3
 801bb0a:	b2db      	uxtb	r3, r3
 801bb0c:	697a      	ldr	r2, [r7, #20]
 801bb0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	2201      	movs	r2, #1
 801bb14:	70da      	strb	r2, [r3, #3]
			break;
 801bb16:	e059      	b.n	801bbcc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	6a1a      	ldr	r2, [r3, #32]
 801bb1c:	68bb      	ldr	r3, [r7, #8]
 801bb1e:	0a1b      	lsrs	r3, r3, #8
 801bb20:	4413      	add	r3, r2
 801bb22:	4619      	mov	r1, r3
 801bb24:	68f8      	ldr	r0, [r7, #12]
 801bb26:	f7ff fe07 	bl	801b738 <move_window>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bb2e:	7ffb      	ldrb	r3, [r7, #31]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d148      	bne.n	801bbc6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	005b      	lsls	r3, r3, #1
 801bb3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801bb42:	4413      	add	r3, r2
 801bb44:	687a      	ldr	r2, [r7, #4]
 801bb46:	b292      	uxth	r2, r2
 801bb48:	4611      	mov	r1, r2
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	f7ff fb7f 	bl	801b24e <st_word>
			fs->wflag = 1;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	2201      	movs	r2, #1
 801bb54:	70da      	strb	r2, [r3, #3]
			break;
 801bb56:	e039      	b.n	801bbcc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	6a1a      	ldr	r2, [r3, #32]
 801bb5c:	68bb      	ldr	r3, [r7, #8]
 801bb5e:	09db      	lsrs	r3, r3, #7
 801bb60:	4413      	add	r3, r2
 801bb62:	4619      	mov	r1, r3
 801bb64:	68f8      	ldr	r0, [r7, #12]
 801bb66:	f7ff fde7 	bl	801b738 <move_window>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bb6e:	7ffb      	ldrb	r3, [r7, #31]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d12a      	bne.n	801bbca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	009b      	lsls	r3, r3, #2
 801bb84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801bb88:	4413      	add	r3, r2
 801bb8a:	4618      	mov	r0, r3
 801bb8c:	f7ff fb3c 	bl	801b208 <ld_dword>
 801bb90:	4603      	mov	r3, r0
 801bb92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801bb96:	4323      	orrs	r3, r4
 801bb98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	009b      	lsls	r3, r3, #2
 801bba4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801bba8:	4413      	add	r3, r2
 801bbaa:	6879      	ldr	r1, [r7, #4]
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7ff fb69 	bl	801b284 <st_dword>
			fs->wflag = 1;
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	2201      	movs	r2, #1
 801bbb6:	70da      	strb	r2, [r3, #3]
			break;
 801bbb8:	e008      	b.n	801bbcc <put_fat+0x1ce>
		}
	}
 801bbba:	bf00      	nop
 801bbbc:	e006      	b.n	801bbcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 801bbbe:	bf00      	nop
 801bbc0:	e004      	b.n	801bbcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 801bbc2:	bf00      	nop
 801bbc4:	e002      	b.n	801bbcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 801bbc6:	bf00      	nop
 801bbc8:	e000      	b.n	801bbcc <put_fat+0x1ce>
			if (res != FR_OK) break;
 801bbca:	bf00      	nop
	return res;
 801bbcc:	7ffb      	ldrb	r3, [r7, #31]
}
 801bbce:	4618      	mov	r0, r3
 801bbd0:	3724      	adds	r7, #36	; 0x24
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bd90      	pop	{r4, r7, pc}

0801bbd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801bbd6:	b580      	push	{r7, lr}
 801bbd8:	b088      	sub	sp, #32
 801bbda:	af00      	add	r7, sp, #0
 801bbdc:	60f8      	str	r0, [r7, #12]
 801bbde:	60b9      	str	r1, [r7, #8]
 801bbe0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801bbec:	68bb      	ldr	r3, [r7, #8]
 801bbee:	2b01      	cmp	r3, #1
 801bbf0:	d904      	bls.n	801bbfc <remove_chain+0x26>
 801bbf2:	69bb      	ldr	r3, [r7, #24]
 801bbf4:	695b      	ldr	r3, [r3, #20]
 801bbf6:	68ba      	ldr	r2, [r7, #8]
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	d301      	bcc.n	801bc00 <remove_chain+0x2a>
 801bbfc:	2302      	movs	r3, #2
 801bbfe:	e04b      	b.n	801bc98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d00c      	beq.n	801bc20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bc06:	f04f 32ff 	mov.w	r2, #4294967295
 801bc0a:	6879      	ldr	r1, [r7, #4]
 801bc0c:	69b8      	ldr	r0, [r7, #24]
 801bc0e:	f7ff fef6 	bl	801b9fe <put_fat>
 801bc12:	4603      	mov	r3, r0
 801bc14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801bc16:	7ffb      	ldrb	r3, [r7, #31]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d001      	beq.n	801bc20 <remove_chain+0x4a>
 801bc1c:	7ffb      	ldrb	r3, [r7, #31]
 801bc1e:	e03b      	b.n	801bc98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801bc20:	68b9      	ldr	r1, [r7, #8]
 801bc22:	68f8      	ldr	r0, [r7, #12]
 801bc24:	f7ff fe43 	bl	801b8ae <get_fat>
 801bc28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801bc2a:	697b      	ldr	r3, [r7, #20]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d031      	beq.n	801bc94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	2b01      	cmp	r3, #1
 801bc34:	d101      	bne.n	801bc3a <remove_chain+0x64>
 801bc36:	2302      	movs	r3, #2
 801bc38:	e02e      	b.n	801bc98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801bc3a:	697b      	ldr	r3, [r7, #20]
 801bc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc40:	d101      	bne.n	801bc46 <remove_chain+0x70>
 801bc42:	2301      	movs	r3, #1
 801bc44:	e028      	b.n	801bc98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801bc46:	2200      	movs	r2, #0
 801bc48:	68b9      	ldr	r1, [r7, #8]
 801bc4a:	69b8      	ldr	r0, [r7, #24]
 801bc4c:	f7ff fed7 	bl	801b9fe <put_fat>
 801bc50:	4603      	mov	r3, r0
 801bc52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bc54:	7ffb      	ldrb	r3, [r7, #31]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d001      	beq.n	801bc5e <remove_chain+0x88>
 801bc5a:	7ffb      	ldrb	r3, [r7, #31]
 801bc5c:	e01c      	b.n	801bc98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bc5e:	69bb      	ldr	r3, [r7, #24]
 801bc60:	691a      	ldr	r2, [r3, #16]
 801bc62:	69bb      	ldr	r3, [r7, #24]
 801bc64:	695b      	ldr	r3, [r3, #20]
 801bc66:	3b02      	subs	r3, #2
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	d20b      	bcs.n	801bc84 <remove_chain+0xae>
			fs->free_clst++;
 801bc6c:	69bb      	ldr	r3, [r7, #24]
 801bc6e:	691b      	ldr	r3, [r3, #16]
 801bc70:	1c5a      	adds	r2, r3, #1
 801bc72:	69bb      	ldr	r3, [r7, #24]
 801bc74:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801bc76:	69bb      	ldr	r3, [r7, #24]
 801bc78:	791b      	ldrb	r3, [r3, #4]
 801bc7a:	f043 0301 	orr.w	r3, r3, #1
 801bc7e:	b2da      	uxtb	r2, r3
 801bc80:	69bb      	ldr	r3, [r7, #24]
 801bc82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bc84:	697b      	ldr	r3, [r7, #20]
 801bc86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bc88:	69bb      	ldr	r3, [r7, #24]
 801bc8a:	695b      	ldr	r3, [r3, #20]
 801bc8c:	68ba      	ldr	r2, [r7, #8]
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	d3c6      	bcc.n	801bc20 <remove_chain+0x4a>
 801bc92:	e000      	b.n	801bc96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bc94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bc96:	2300      	movs	r3, #0
}
 801bc98:	4618      	mov	r0, r3
 801bc9a:	3720      	adds	r7, #32
 801bc9c:	46bd      	mov	sp, r7
 801bc9e:	bd80      	pop	{r7, pc}

0801bca0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b088      	sub	sp, #32
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
 801bca8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d10d      	bne.n	801bcd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bcb6:	693b      	ldr	r3, [r7, #16]
 801bcb8:	68db      	ldr	r3, [r3, #12]
 801bcba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bcbc:	69bb      	ldr	r3, [r7, #24]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d004      	beq.n	801bccc <create_chain+0x2c>
 801bcc2:	693b      	ldr	r3, [r7, #16]
 801bcc4:	695b      	ldr	r3, [r3, #20]
 801bcc6:	69ba      	ldr	r2, [r7, #24]
 801bcc8:	429a      	cmp	r2, r3
 801bcca:	d31b      	bcc.n	801bd04 <create_chain+0x64>
 801bccc:	2301      	movs	r3, #1
 801bcce:	61bb      	str	r3, [r7, #24]
 801bcd0:	e018      	b.n	801bd04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bcd2:	6839      	ldr	r1, [r7, #0]
 801bcd4:	6878      	ldr	r0, [r7, #4]
 801bcd6:	f7ff fdea 	bl	801b8ae <get_fat>
 801bcda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bcdc:	68fb      	ldr	r3, [r7, #12]
 801bcde:	2b01      	cmp	r3, #1
 801bce0:	d801      	bhi.n	801bce6 <create_chain+0x46>
 801bce2:	2301      	movs	r3, #1
 801bce4:	e070      	b.n	801bdc8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcec:	d101      	bne.n	801bcf2 <create_chain+0x52>
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	e06a      	b.n	801bdc8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bcf2:	693b      	ldr	r3, [r7, #16]
 801bcf4:	695b      	ldr	r3, [r3, #20]
 801bcf6:	68fa      	ldr	r2, [r7, #12]
 801bcf8:	429a      	cmp	r2, r3
 801bcfa:	d201      	bcs.n	801bd00 <create_chain+0x60>
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	e063      	b.n	801bdc8 <create_chain+0x128>
		scl = clst;
 801bd00:	683b      	ldr	r3, [r7, #0]
 801bd02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bd04:	69bb      	ldr	r3, [r7, #24]
 801bd06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bd08:	69fb      	ldr	r3, [r7, #28]
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bd0e:	693b      	ldr	r3, [r7, #16]
 801bd10:	695b      	ldr	r3, [r3, #20]
 801bd12:	69fa      	ldr	r2, [r7, #28]
 801bd14:	429a      	cmp	r2, r3
 801bd16:	d307      	bcc.n	801bd28 <create_chain+0x88>
				ncl = 2;
 801bd18:	2302      	movs	r3, #2
 801bd1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bd1c:	69fa      	ldr	r2, [r7, #28]
 801bd1e:	69bb      	ldr	r3, [r7, #24]
 801bd20:	429a      	cmp	r2, r3
 801bd22:	d901      	bls.n	801bd28 <create_chain+0x88>
 801bd24:	2300      	movs	r3, #0
 801bd26:	e04f      	b.n	801bdc8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bd28:	69f9      	ldr	r1, [r7, #28]
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f7ff fdbf 	bl	801b8ae <get_fat>
 801bd30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d00e      	beq.n	801bd56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	2b01      	cmp	r3, #1
 801bd3c:	d003      	beq.n	801bd46 <create_chain+0xa6>
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd44:	d101      	bne.n	801bd4a <create_chain+0xaa>
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	e03e      	b.n	801bdc8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bd4a:	69fa      	ldr	r2, [r7, #28]
 801bd4c:	69bb      	ldr	r3, [r7, #24]
 801bd4e:	429a      	cmp	r2, r3
 801bd50:	d1da      	bne.n	801bd08 <create_chain+0x68>
 801bd52:	2300      	movs	r3, #0
 801bd54:	e038      	b.n	801bdc8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bd56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bd58:	f04f 32ff 	mov.w	r2, #4294967295
 801bd5c:	69f9      	ldr	r1, [r7, #28]
 801bd5e:	6938      	ldr	r0, [r7, #16]
 801bd60:	f7ff fe4d 	bl	801b9fe <put_fat>
 801bd64:	4603      	mov	r3, r0
 801bd66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bd68:	7dfb      	ldrb	r3, [r7, #23]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d109      	bne.n	801bd82 <create_chain+0xe2>
 801bd6e:	683b      	ldr	r3, [r7, #0]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d006      	beq.n	801bd82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bd74:	69fa      	ldr	r2, [r7, #28]
 801bd76:	6839      	ldr	r1, [r7, #0]
 801bd78:	6938      	ldr	r0, [r7, #16]
 801bd7a:	f7ff fe40 	bl	801b9fe <put_fat>
 801bd7e:	4603      	mov	r3, r0
 801bd80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bd82:	7dfb      	ldrb	r3, [r7, #23]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d116      	bne.n	801bdb6 <create_chain+0x116>
		fs->last_clst = ncl;
 801bd88:	693b      	ldr	r3, [r7, #16]
 801bd8a:	69fa      	ldr	r2, [r7, #28]
 801bd8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bd8e:	693b      	ldr	r3, [r7, #16]
 801bd90:	691a      	ldr	r2, [r3, #16]
 801bd92:	693b      	ldr	r3, [r7, #16]
 801bd94:	695b      	ldr	r3, [r3, #20]
 801bd96:	3b02      	subs	r3, #2
 801bd98:	429a      	cmp	r2, r3
 801bd9a:	d804      	bhi.n	801bda6 <create_chain+0x106>
 801bd9c:	693b      	ldr	r3, [r7, #16]
 801bd9e:	691b      	ldr	r3, [r3, #16]
 801bda0:	1e5a      	subs	r2, r3, #1
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801bda6:	693b      	ldr	r3, [r7, #16]
 801bda8:	791b      	ldrb	r3, [r3, #4]
 801bdaa:	f043 0301 	orr.w	r3, r3, #1
 801bdae:	b2da      	uxtb	r2, r3
 801bdb0:	693b      	ldr	r3, [r7, #16]
 801bdb2:	711a      	strb	r2, [r3, #4]
 801bdb4:	e007      	b.n	801bdc6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bdb6:	7dfb      	ldrb	r3, [r7, #23]
 801bdb8:	2b01      	cmp	r3, #1
 801bdba:	d102      	bne.n	801bdc2 <create_chain+0x122>
 801bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 801bdc0:	e000      	b.n	801bdc4 <create_chain+0x124>
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bdc6:	69fb      	ldr	r3, [r7, #28]
}
 801bdc8:	4618      	mov	r0, r3
 801bdca:	3720      	adds	r7, #32
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}

0801bdd0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bdd0:	b480      	push	{r7}
 801bdd2:	b087      	sub	sp, #28
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
 801bdd8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bde4:	3304      	adds	r3, #4
 801bde6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bde8:	683b      	ldr	r3, [r7, #0]
 801bdea:	0a5b      	lsrs	r3, r3, #9
 801bdec:	68fa      	ldr	r2, [r7, #12]
 801bdee:	8952      	ldrh	r2, [r2, #10]
 801bdf0:	fbb3 f3f2 	udiv	r3, r3, r2
 801bdf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bdf6:	693b      	ldr	r3, [r7, #16]
 801bdf8:	1d1a      	adds	r2, r3, #4
 801bdfa:	613a      	str	r2, [r7, #16]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801be00:	68bb      	ldr	r3, [r7, #8]
 801be02:	2b00      	cmp	r3, #0
 801be04:	d101      	bne.n	801be0a <clmt_clust+0x3a>
 801be06:	2300      	movs	r3, #0
 801be08:	e010      	b.n	801be2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801be0a:	697a      	ldr	r2, [r7, #20]
 801be0c:	68bb      	ldr	r3, [r7, #8]
 801be0e:	429a      	cmp	r2, r3
 801be10:	d307      	bcc.n	801be22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801be12:	697a      	ldr	r2, [r7, #20]
 801be14:	68bb      	ldr	r3, [r7, #8]
 801be16:	1ad3      	subs	r3, r2, r3
 801be18:	617b      	str	r3, [r7, #20]
 801be1a:	693b      	ldr	r3, [r7, #16]
 801be1c:	3304      	adds	r3, #4
 801be1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801be20:	e7e9      	b.n	801bdf6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801be22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801be24:	693b      	ldr	r3, [r7, #16]
 801be26:	681a      	ldr	r2, [r3, #0]
 801be28:	697b      	ldr	r3, [r7, #20]
 801be2a:	4413      	add	r3, r2
}
 801be2c:	4618      	mov	r0, r3
 801be2e:	371c      	adds	r7, #28
 801be30:	46bd      	mov	sp, r7
 801be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be36:	4770      	bx	lr

0801be38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	b086      	sub	sp, #24
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
 801be40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801be48:	683b      	ldr	r3, [r7, #0]
 801be4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be4e:	d204      	bcs.n	801be5a <dir_sdi+0x22>
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	f003 031f 	and.w	r3, r3, #31
 801be56:	2b00      	cmp	r3, #0
 801be58:	d001      	beq.n	801be5e <dir_sdi+0x26>
		return FR_INT_ERR;
 801be5a:	2302      	movs	r3, #2
 801be5c:	e063      	b.n	801bf26 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	683a      	ldr	r2, [r7, #0]
 801be62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	689b      	ldr	r3, [r3, #8]
 801be68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d106      	bne.n	801be7e <dir_sdi+0x46>
 801be70:	693b      	ldr	r3, [r7, #16]
 801be72:	781b      	ldrb	r3, [r3, #0]
 801be74:	2b02      	cmp	r3, #2
 801be76:	d902      	bls.n	801be7e <dir_sdi+0x46>
		clst = fs->dirbase;
 801be78:	693b      	ldr	r3, [r7, #16]
 801be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801be7e:	697b      	ldr	r3, [r7, #20]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d10c      	bne.n	801be9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	095b      	lsrs	r3, r3, #5
 801be88:	693a      	ldr	r2, [r7, #16]
 801be8a:	8912      	ldrh	r2, [r2, #8]
 801be8c:	4293      	cmp	r3, r2
 801be8e:	d301      	bcc.n	801be94 <dir_sdi+0x5c>
 801be90:	2302      	movs	r3, #2
 801be92:	e048      	b.n	801bf26 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801be94:	693b      	ldr	r3, [r7, #16]
 801be96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	61da      	str	r2, [r3, #28]
 801be9c:	e029      	b.n	801bef2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	895b      	ldrh	r3, [r3, #10]
 801bea2:	025b      	lsls	r3, r3, #9
 801bea4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bea6:	e019      	b.n	801bedc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	6979      	ldr	r1, [r7, #20]
 801beac:	4618      	mov	r0, r3
 801beae:	f7ff fcfe 	bl	801b8ae <get_fat>
 801beb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beba:	d101      	bne.n	801bec0 <dir_sdi+0x88>
 801bebc:	2301      	movs	r3, #1
 801bebe:	e032      	b.n	801bf26 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bec0:	697b      	ldr	r3, [r7, #20]
 801bec2:	2b01      	cmp	r3, #1
 801bec4:	d904      	bls.n	801bed0 <dir_sdi+0x98>
 801bec6:	693b      	ldr	r3, [r7, #16]
 801bec8:	695b      	ldr	r3, [r3, #20]
 801beca:	697a      	ldr	r2, [r7, #20]
 801becc:	429a      	cmp	r2, r3
 801bece:	d301      	bcc.n	801bed4 <dir_sdi+0x9c>
 801bed0:	2302      	movs	r3, #2
 801bed2:	e028      	b.n	801bf26 <dir_sdi+0xee>
			ofs -= csz;
 801bed4:	683a      	ldr	r2, [r7, #0]
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bedc:	683a      	ldr	r2, [r7, #0]
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	429a      	cmp	r2, r3
 801bee2:	d2e1      	bcs.n	801bea8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801bee4:	6979      	ldr	r1, [r7, #20]
 801bee6:	6938      	ldr	r0, [r7, #16]
 801bee8:	f7ff fcc2 	bl	801b870 <clust2sect>
 801beec:	4602      	mov	r2, r0
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	697a      	ldr	r2, [r7, #20]
 801bef6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	69db      	ldr	r3, [r3, #28]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d101      	bne.n	801bf04 <dir_sdi+0xcc>
 801bf00:	2302      	movs	r3, #2
 801bf02:	e010      	b.n	801bf26 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	69da      	ldr	r2, [r3, #28]
 801bf08:	683b      	ldr	r3, [r7, #0]
 801bf0a:	0a5b      	lsrs	r3, r3, #9
 801bf0c:	441a      	add	r2, r3
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bf12:	693b      	ldr	r3, [r7, #16]
 801bf14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bf18:	683b      	ldr	r3, [r7, #0]
 801bf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bf1e:	441a      	add	r2, r3
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bf24:	2300      	movs	r3, #0
}
 801bf26:	4618      	mov	r0, r3
 801bf28:	3718      	adds	r7, #24
 801bf2a:	46bd      	mov	sp, r7
 801bf2c:	bd80      	pop	{r7, pc}

0801bf2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bf2e:	b580      	push	{r7, lr}
 801bf30:	b086      	sub	sp, #24
 801bf32:	af00      	add	r7, sp, #0
 801bf34:	6078      	str	r0, [r7, #4]
 801bf36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	695b      	ldr	r3, [r3, #20]
 801bf42:	3320      	adds	r3, #32
 801bf44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	69db      	ldr	r3, [r3, #28]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d003      	beq.n	801bf56 <dir_next+0x28>
 801bf4e:	68bb      	ldr	r3, [r7, #8]
 801bf50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bf54:	d301      	bcc.n	801bf5a <dir_next+0x2c>
 801bf56:	2304      	movs	r3, #4
 801bf58:	e0aa      	b.n	801c0b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801bf5a:	68bb      	ldr	r3, [r7, #8]
 801bf5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	f040 8098 	bne.w	801c096 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	69db      	ldr	r3, [r3, #28]
 801bf6a:	1c5a      	adds	r2, r3, #1
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	699b      	ldr	r3, [r3, #24]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d10b      	bne.n	801bf90 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	095b      	lsrs	r3, r3, #5
 801bf7c:	68fa      	ldr	r2, [r7, #12]
 801bf7e:	8912      	ldrh	r2, [r2, #8]
 801bf80:	4293      	cmp	r3, r2
 801bf82:	f0c0 8088 	bcc.w	801c096 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	2200      	movs	r2, #0
 801bf8a:	61da      	str	r2, [r3, #28]
 801bf8c:	2304      	movs	r3, #4
 801bf8e:	e08f      	b.n	801c0b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801bf90:	68bb      	ldr	r3, [r7, #8]
 801bf92:	0a5b      	lsrs	r3, r3, #9
 801bf94:	68fa      	ldr	r2, [r7, #12]
 801bf96:	8952      	ldrh	r2, [r2, #10]
 801bf98:	3a01      	subs	r2, #1
 801bf9a:	4013      	ands	r3, r2
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d17a      	bne.n	801c096 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801bfa0:	687a      	ldr	r2, [r7, #4]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	699b      	ldr	r3, [r3, #24]
 801bfa6:	4619      	mov	r1, r3
 801bfa8:	4610      	mov	r0, r2
 801bfaa:	f7ff fc80 	bl	801b8ae <get_fat>
 801bfae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801bfb0:	697b      	ldr	r3, [r7, #20]
 801bfb2:	2b01      	cmp	r3, #1
 801bfb4:	d801      	bhi.n	801bfba <dir_next+0x8c>
 801bfb6:	2302      	movs	r3, #2
 801bfb8:	e07a      	b.n	801c0b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801bfba:	697b      	ldr	r3, [r7, #20]
 801bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfc0:	d101      	bne.n	801bfc6 <dir_next+0x98>
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	e074      	b.n	801c0b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	695b      	ldr	r3, [r3, #20]
 801bfca:	697a      	ldr	r2, [r7, #20]
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	d358      	bcc.n	801c082 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801bfd0:	683b      	ldr	r3, [r7, #0]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d104      	bne.n	801bfe0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	2200      	movs	r2, #0
 801bfda:	61da      	str	r2, [r3, #28]
 801bfdc:	2304      	movs	r3, #4
 801bfde:	e067      	b.n	801c0b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bfe0:	687a      	ldr	r2, [r7, #4]
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	699b      	ldr	r3, [r3, #24]
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	4610      	mov	r0, r2
 801bfea:	f7ff fe59 	bl	801bca0 <create_chain>
 801bfee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bff0:	697b      	ldr	r3, [r7, #20]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d101      	bne.n	801bffa <dir_next+0xcc>
 801bff6:	2307      	movs	r3, #7
 801bff8:	e05a      	b.n	801c0b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bffa:	697b      	ldr	r3, [r7, #20]
 801bffc:	2b01      	cmp	r3, #1
 801bffe:	d101      	bne.n	801c004 <dir_next+0xd6>
 801c000:	2302      	movs	r3, #2
 801c002:	e055      	b.n	801c0b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c004:	697b      	ldr	r3, [r7, #20]
 801c006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c00a:	d101      	bne.n	801c010 <dir_next+0xe2>
 801c00c:	2301      	movs	r3, #1
 801c00e:	e04f      	b.n	801c0b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801c010:	68f8      	ldr	r0, [r7, #12]
 801c012:	f7ff fb4d 	bl	801b6b0 <sync_window>
 801c016:	4603      	mov	r3, r0
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d001      	beq.n	801c020 <dir_next+0xf2>
 801c01c:	2301      	movs	r3, #1
 801c01e:	e047      	b.n	801c0b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	3330      	adds	r3, #48	; 0x30
 801c024:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c028:	2100      	movs	r1, #0
 801c02a:	4618      	mov	r0, r3
 801c02c:	f7ff f977 	bl	801b31e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c030:	2300      	movs	r3, #0
 801c032:	613b      	str	r3, [r7, #16]
 801c034:	6979      	ldr	r1, [r7, #20]
 801c036:	68f8      	ldr	r0, [r7, #12]
 801c038:	f7ff fc1a 	bl	801b870 <clust2sect>
 801c03c:	4602      	mov	r2, r0
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	62da      	str	r2, [r3, #44]	; 0x2c
 801c042:	e012      	b.n	801c06a <dir_next+0x13c>
						fs->wflag = 1;
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	2201      	movs	r2, #1
 801c048:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801c04a:	68f8      	ldr	r0, [r7, #12]
 801c04c:	f7ff fb30 	bl	801b6b0 <sync_window>
 801c050:	4603      	mov	r3, r0
 801c052:	2b00      	cmp	r3, #0
 801c054:	d001      	beq.n	801c05a <dir_next+0x12c>
 801c056:	2301      	movs	r3, #1
 801c058:	e02a      	b.n	801c0b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c05a:	693b      	ldr	r3, [r7, #16]
 801c05c:	3301      	adds	r3, #1
 801c05e:	613b      	str	r3, [r7, #16]
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c064:	1c5a      	adds	r2, r3, #1
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	62da      	str	r2, [r3, #44]	; 0x2c
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	895b      	ldrh	r3, [r3, #10]
 801c06e:	461a      	mov	r2, r3
 801c070:	693b      	ldr	r3, [r7, #16]
 801c072:	4293      	cmp	r3, r2
 801c074:	d3e6      	bcc.n	801c044 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c07a:	693b      	ldr	r3, [r7, #16]
 801c07c:	1ad2      	subs	r2, r2, r3
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	697a      	ldr	r2, [r7, #20]
 801c086:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801c088:	6979      	ldr	r1, [r7, #20]
 801c08a:	68f8      	ldr	r0, [r7, #12]
 801c08c:	f7ff fbf0 	bl	801b870 <clust2sect>
 801c090:	4602      	mov	r2, r0
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	68ba      	ldr	r2, [r7, #8]
 801c09a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c0a2:	68bb      	ldr	r3, [r7, #8]
 801c0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c0a8:	441a      	add	r2, r3
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801c0ae:	2300      	movs	r3, #0
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	3718      	adds	r7, #24
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	bd80      	pop	{r7, pc}

0801c0b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b086      	sub	sp, #24
 801c0bc:	af00      	add	r7, sp, #0
 801c0be:	6078      	str	r0, [r7, #4]
 801c0c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801c0c8:	2100      	movs	r1, #0
 801c0ca:	6878      	ldr	r0, [r7, #4]
 801c0cc:	f7ff feb4 	bl	801be38 <dir_sdi>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c0d4:	7dfb      	ldrb	r3, [r7, #23]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d12b      	bne.n	801c132 <dir_alloc+0x7a>
		n = 0;
 801c0da:	2300      	movs	r3, #0
 801c0dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	69db      	ldr	r3, [r3, #28]
 801c0e2:	4619      	mov	r1, r3
 801c0e4:	68f8      	ldr	r0, [r7, #12]
 801c0e6:	f7ff fb27 	bl	801b738 <move_window>
 801c0ea:	4603      	mov	r3, r0
 801c0ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c0ee:	7dfb      	ldrb	r3, [r7, #23]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d11d      	bne.n	801c130 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	6a1b      	ldr	r3, [r3, #32]
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	2be5      	cmp	r3, #229	; 0xe5
 801c0fc:	d004      	beq.n	801c108 <dir_alloc+0x50>
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	6a1b      	ldr	r3, [r3, #32]
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d107      	bne.n	801c118 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c108:	693b      	ldr	r3, [r7, #16]
 801c10a:	3301      	adds	r3, #1
 801c10c:	613b      	str	r3, [r7, #16]
 801c10e:	693a      	ldr	r2, [r7, #16]
 801c110:	683b      	ldr	r3, [r7, #0]
 801c112:	429a      	cmp	r2, r3
 801c114:	d102      	bne.n	801c11c <dir_alloc+0x64>
 801c116:	e00c      	b.n	801c132 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c118:	2300      	movs	r3, #0
 801c11a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c11c:	2101      	movs	r1, #1
 801c11e:	6878      	ldr	r0, [r7, #4]
 801c120:	f7ff ff05 	bl	801bf2e <dir_next>
 801c124:	4603      	mov	r3, r0
 801c126:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c128:	7dfb      	ldrb	r3, [r7, #23]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d0d7      	beq.n	801c0de <dir_alloc+0x26>
 801c12e:	e000      	b.n	801c132 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c130:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c132:	7dfb      	ldrb	r3, [r7, #23]
 801c134:	2b04      	cmp	r3, #4
 801c136:	d101      	bne.n	801c13c <dir_alloc+0x84>
 801c138:	2307      	movs	r3, #7
 801c13a:	75fb      	strb	r3, [r7, #23]
	return res;
 801c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c13e:	4618      	mov	r0, r3
 801c140:	3718      	adds	r7, #24
 801c142:	46bd      	mov	sp, r7
 801c144:	bd80      	pop	{r7, pc}

0801c146 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c146:	b580      	push	{r7, lr}
 801c148:	b084      	sub	sp, #16
 801c14a:	af00      	add	r7, sp, #0
 801c14c:	6078      	str	r0, [r7, #4]
 801c14e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c150:	683b      	ldr	r3, [r7, #0]
 801c152:	331a      	adds	r3, #26
 801c154:	4618      	mov	r0, r3
 801c156:	f7ff f83f 	bl	801b1d8 <ld_word>
 801c15a:	4603      	mov	r3, r0
 801c15c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	781b      	ldrb	r3, [r3, #0]
 801c162:	2b03      	cmp	r3, #3
 801c164:	d109      	bne.n	801c17a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	3314      	adds	r3, #20
 801c16a:	4618      	mov	r0, r3
 801c16c:	f7ff f834 	bl	801b1d8 <ld_word>
 801c170:	4603      	mov	r3, r0
 801c172:	041b      	lsls	r3, r3, #16
 801c174:	68fa      	ldr	r2, [r7, #12]
 801c176:	4313      	orrs	r3, r2
 801c178:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c17a:	68fb      	ldr	r3, [r7, #12]
}
 801c17c:	4618      	mov	r0, r3
 801c17e:	3710      	adds	r7, #16
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}

0801c184 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b084      	sub	sp, #16
 801c188:	af00      	add	r7, sp, #0
 801c18a:	60f8      	str	r0, [r7, #12]
 801c18c:	60b9      	str	r1, [r7, #8]
 801c18e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c190:	68bb      	ldr	r3, [r7, #8]
 801c192:	331a      	adds	r3, #26
 801c194:	687a      	ldr	r2, [r7, #4]
 801c196:	b292      	uxth	r2, r2
 801c198:	4611      	mov	r1, r2
 801c19a:	4618      	mov	r0, r3
 801c19c:	f7ff f857 	bl	801b24e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	781b      	ldrb	r3, [r3, #0]
 801c1a4:	2b03      	cmp	r3, #3
 801c1a6:	d109      	bne.n	801c1bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c1a8:	68bb      	ldr	r3, [r7, #8]
 801c1aa:	f103 0214 	add.w	r2, r3, #20
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	0c1b      	lsrs	r3, r3, #16
 801c1b2:	b29b      	uxth	r3, r3
 801c1b4:	4619      	mov	r1, r3
 801c1b6:	4610      	mov	r0, r2
 801c1b8:	f7ff f849 	bl	801b24e <st_word>
	}
}
 801c1bc:	bf00      	nop
 801c1be:	3710      	adds	r7, #16
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	bd80      	pop	{r7, pc}

0801c1c4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b086      	sub	sp, #24
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
 801c1cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c1ce:	2304      	movs	r3, #4
 801c1d0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801c1d8:	e03c      	b.n	801c254 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	69db      	ldr	r3, [r3, #28]
 801c1de:	4619      	mov	r1, r3
 801c1e0:	6938      	ldr	r0, [r7, #16]
 801c1e2:	f7ff faa9 	bl	801b738 <move_window>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c1ea:	7dfb      	ldrb	r3, [r7, #23]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d136      	bne.n	801c25e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	6a1b      	ldr	r3, [r3, #32]
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801c1f8:	7bfb      	ldrb	r3, [r7, #15]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d102      	bne.n	801c204 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c1fe:	2304      	movs	r3, #4
 801c200:	75fb      	strb	r3, [r7, #23]
 801c202:	e031      	b.n	801c268 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	6a1b      	ldr	r3, [r3, #32]
 801c208:	330b      	adds	r3, #11
 801c20a:	781b      	ldrb	r3, [r3, #0]
 801c20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c210:	73bb      	strb	r3, [r7, #14]
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	7bba      	ldrb	r2, [r7, #14]
 801c216:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801c218:	7bfb      	ldrb	r3, [r7, #15]
 801c21a:	2be5      	cmp	r3, #229	; 0xe5
 801c21c:	d011      	beq.n	801c242 <dir_read+0x7e>
 801c21e:	7bfb      	ldrb	r3, [r7, #15]
 801c220:	2b2e      	cmp	r3, #46	; 0x2e
 801c222:	d00e      	beq.n	801c242 <dir_read+0x7e>
 801c224:	7bbb      	ldrb	r3, [r7, #14]
 801c226:	2b0f      	cmp	r3, #15
 801c228:	d00b      	beq.n	801c242 <dir_read+0x7e>
 801c22a:	7bbb      	ldrb	r3, [r7, #14]
 801c22c:	f023 0320 	bic.w	r3, r3, #32
 801c230:	2b08      	cmp	r3, #8
 801c232:	bf0c      	ite	eq
 801c234:	2301      	moveq	r3, #1
 801c236:	2300      	movne	r3, #0
 801c238:	b2db      	uxtb	r3, r3
 801c23a:	461a      	mov	r2, r3
 801c23c:	683b      	ldr	r3, [r7, #0]
 801c23e:	4293      	cmp	r3, r2
 801c240:	d00f      	beq.n	801c262 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c242:	2100      	movs	r1, #0
 801c244:	6878      	ldr	r0, [r7, #4]
 801c246:	f7ff fe72 	bl	801bf2e <dir_next>
 801c24a:	4603      	mov	r3, r0
 801c24c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c24e:	7dfb      	ldrb	r3, [r7, #23]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d108      	bne.n	801c266 <dir_read+0xa2>
	while (dp->sect) {
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	69db      	ldr	r3, [r3, #28]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d1be      	bne.n	801c1da <dir_read+0x16>
 801c25c:	e004      	b.n	801c268 <dir_read+0xa4>
		if (res != FR_OK) break;
 801c25e:	bf00      	nop
 801c260:	e002      	b.n	801c268 <dir_read+0xa4>
				break;
 801c262:	bf00      	nop
 801c264:	e000      	b.n	801c268 <dir_read+0xa4>
		if (res != FR_OK) break;
 801c266:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c268:	7dfb      	ldrb	r3, [r7, #23]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d002      	beq.n	801c274 <dir_read+0xb0>
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	2200      	movs	r2, #0
 801c272:	61da      	str	r2, [r3, #28]
	return res;
 801c274:	7dfb      	ldrb	r3, [r7, #23]
}
 801c276:	4618      	mov	r0, r3
 801c278:	3718      	adds	r7, #24
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}

0801c27e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c27e:	b580      	push	{r7, lr}
 801c280:	b086      	sub	sp, #24
 801c282:	af00      	add	r7, sp, #0
 801c284:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c28c:	2100      	movs	r1, #0
 801c28e:	6878      	ldr	r0, [r7, #4]
 801c290:	f7ff fdd2 	bl	801be38 <dir_sdi>
 801c294:	4603      	mov	r3, r0
 801c296:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c298:	7dfb      	ldrb	r3, [r7, #23]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d001      	beq.n	801c2a2 <dir_find+0x24>
 801c29e:	7dfb      	ldrb	r3, [r7, #23]
 801c2a0:	e03e      	b.n	801c320 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	69db      	ldr	r3, [r3, #28]
 801c2a6:	4619      	mov	r1, r3
 801c2a8:	6938      	ldr	r0, [r7, #16]
 801c2aa:	f7ff fa45 	bl	801b738 <move_window>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c2b2:	7dfb      	ldrb	r3, [r7, #23]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d12f      	bne.n	801c318 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	6a1b      	ldr	r3, [r3, #32]
 801c2bc:	781b      	ldrb	r3, [r3, #0]
 801c2be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c2c0:	7bfb      	ldrb	r3, [r7, #15]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d102      	bne.n	801c2cc <dir_find+0x4e>
 801c2c6:	2304      	movs	r3, #4
 801c2c8:	75fb      	strb	r3, [r7, #23]
 801c2ca:	e028      	b.n	801c31e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	6a1b      	ldr	r3, [r3, #32]
 801c2d0:	330b      	adds	r3, #11
 801c2d2:	781b      	ldrb	r3, [r3, #0]
 801c2d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c2d8:	b2da      	uxtb	r2, r3
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	6a1b      	ldr	r3, [r3, #32]
 801c2e2:	330b      	adds	r3, #11
 801c2e4:	781b      	ldrb	r3, [r3, #0]
 801c2e6:	f003 0308 	and.w	r3, r3, #8
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d10a      	bne.n	801c304 <dir_find+0x86>
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6a18      	ldr	r0, [r3, #32]
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	3324      	adds	r3, #36	; 0x24
 801c2f6:	220b      	movs	r2, #11
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	f7ff f82b 	bl	801b354 <mem_cmp>
 801c2fe:	4603      	mov	r3, r0
 801c300:	2b00      	cmp	r3, #0
 801c302:	d00b      	beq.n	801c31c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c304:	2100      	movs	r1, #0
 801c306:	6878      	ldr	r0, [r7, #4]
 801c308:	f7ff fe11 	bl	801bf2e <dir_next>
 801c30c:	4603      	mov	r3, r0
 801c30e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c310:	7dfb      	ldrb	r3, [r7, #23]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d0c5      	beq.n	801c2a2 <dir_find+0x24>
 801c316:	e002      	b.n	801c31e <dir_find+0xa0>
		if (res != FR_OK) break;
 801c318:	bf00      	nop
 801c31a:	e000      	b.n	801c31e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801c31c:	bf00      	nop

	return res;
 801c31e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c320:	4618      	mov	r0, r3
 801c322:	3718      	adds	r7, #24
 801c324:	46bd      	mov	sp, r7
 801c326:	bd80      	pop	{r7, pc}

0801c328 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	b084      	sub	sp, #16
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801c336:	2101      	movs	r1, #1
 801c338:	6878      	ldr	r0, [r7, #4]
 801c33a:	f7ff febd 	bl	801c0b8 <dir_alloc>
 801c33e:	4603      	mov	r3, r0
 801c340:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c342:	7bfb      	ldrb	r3, [r7, #15]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d11c      	bne.n	801c382 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	69db      	ldr	r3, [r3, #28]
 801c34c:	4619      	mov	r1, r3
 801c34e:	68b8      	ldr	r0, [r7, #8]
 801c350:	f7ff f9f2 	bl	801b738 <move_window>
 801c354:	4603      	mov	r3, r0
 801c356:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c358:	7bfb      	ldrb	r3, [r7, #15]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d111      	bne.n	801c382 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	6a1b      	ldr	r3, [r3, #32]
 801c362:	2220      	movs	r2, #32
 801c364:	2100      	movs	r1, #0
 801c366:	4618      	mov	r0, r3
 801c368:	f7fe ffd9 	bl	801b31e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	6a18      	ldr	r0, [r3, #32]
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	3324      	adds	r3, #36	; 0x24
 801c374:	220b      	movs	r2, #11
 801c376:	4619      	mov	r1, r3
 801c378:	f7fe ffb0 	bl	801b2dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801c37c:	68bb      	ldr	r3, [r7, #8]
 801c37e:	2201      	movs	r2, #1
 801c380:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c382:	7bfb      	ldrb	r3, [r7, #15]
}
 801c384:	4618      	mov	r0, r3
 801c386:	3710      	adds	r7, #16
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}

0801c38c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b084      	sub	sp, #16
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	69db      	ldr	r3, [r3, #28]
 801c39e:	4619      	mov	r1, r3
 801c3a0:	68f8      	ldr	r0, [r7, #12]
 801c3a2:	f7ff f9c9 	bl	801b738 <move_window>
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801c3aa:	7afb      	ldrb	r3, [r7, #11]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d106      	bne.n	801c3be <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6a1b      	ldr	r3, [r3, #32]
 801c3b4:	22e5      	movs	r2, #229	; 0xe5
 801c3b6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	2201      	movs	r2, #1
 801c3bc:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801c3be:	7afb      	ldrb	r3, [r7, #11]
}
 801c3c0:	4618      	mov	r0, r3
 801c3c2:	3710      	adds	r7, #16
 801c3c4:	46bd      	mov	sp, r7
 801c3c6:	bd80      	pop	{r7, pc}

0801c3c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b086      	sub	sp, #24
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
 801c3d0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801c3d2:	683b      	ldr	r3, [r7, #0]
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	69db      	ldr	r3, [r3, #28]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d04e      	beq.n	801c47e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	613b      	str	r3, [r7, #16]
 801c3e4:	693b      	ldr	r3, [r7, #16]
 801c3e6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801c3e8:	e021      	b.n	801c42e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	6a1a      	ldr	r2, [r3, #32]
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	1c59      	adds	r1, r3, #1
 801c3f2:	6179      	str	r1, [r7, #20]
 801c3f4:	4413      	add	r3, r2
 801c3f6:	781b      	ldrb	r3, [r3, #0]
 801c3f8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801c3fa:	7bfb      	ldrb	r3, [r7, #15]
 801c3fc:	2b20      	cmp	r3, #32
 801c3fe:	d100      	bne.n	801c402 <get_fileinfo+0x3a>
 801c400:	e015      	b.n	801c42e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801c402:	7bfb      	ldrb	r3, [r7, #15]
 801c404:	2b05      	cmp	r3, #5
 801c406:	d101      	bne.n	801c40c <get_fileinfo+0x44>
 801c408:	23e5      	movs	r3, #229	; 0xe5
 801c40a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801c40c:	697b      	ldr	r3, [r7, #20]
 801c40e:	2b09      	cmp	r3, #9
 801c410:	d106      	bne.n	801c420 <get_fileinfo+0x58>
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	1c5a      	adds	r2, r3, #1
 801c416:	613a      	str	r2, [r7, #16]
 801c418:	683a      	ldr	r2, [r7, #0]
 801c41a:	4413      	add	r3, r2
 801c41c:	222e      	movs	r2, #46	; 0x2e
 801c41e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801c420:	693b      	ldr	r3, [r7, #16]
 801c422:	1c5a      	adds	r2, r3, #1
 801c424:	613a      	str	r2, [r7, #16]
 801c426:	683a      	ldr	r2, [r7, #0]
 801c428:	4413      	add	r3, r2
 801c42a:	7bfa      	ldrb	r2, [r7, #15]
 801c42c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801c42e:	697b      	ldr	r3, [r7, #20]
 801c430:	2b0a      	cmp	r3, #10
 801c432:	d9da      	bls.n	801c3ea <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801c434:	683a      	ldr	r2, [r7, #0]
 801c436:	693b      	ldr	r3, [r7, #16]
 801c438:	4413      	add	r3, r2
 801c43a:	3309      	adds	r3, #9
 801c43c:	2200      	movs	r2, #0
 801c43e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	6a1b      	ldr	r3, [r3, #32]
 801c444:	7ada      	ldrb	r2, [r3, #11]
 801c446:	683b      	ldr	r3, [r7, #0]
 801c448:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	6a1b      	ldr	r3, [r3, #32]
 801c44e:	331c      	adds	r3, #28
 801c450:	4618      	mov	r0, r3
 801c452:	f7fe fed9 	bl	801b208 <ld_dword>
 801c456:	4602      	mov	r2, r0
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	6a1b      	ldr	r3, [r3, #32]
 801c460:	3316      	adds	r3, #22
 801c462:	4618      	mov	r0, r3
 801c464:	f7fe fed0 	bl	801b208 <ld_dword>
 801c468:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801c46a:	68bb      	ldr	r3, [r7, #8]
 801c46c:	b29a      	uxth	r2, r3
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	80da      	strh	r2, [r3, #6]
 801c472:	68bb      	ldr	r3, [r7, #8]
 801c474:	0c1b      	lsrs	r3, r3, #16
 801c476:	b29a      	uxth	r2, r3
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	809a      	strh	r2, [r3, #4]
 801c47c:	e000      	b.n	801c480 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801c47e:	bf00      	nop
}
 801c480:	3718      	adds	r7, #24
 801c482:	46bd      	mov	sp, r7
 801c484:	bd80      	pop	{r7, pc}
	...

0801c488 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	b088      	sub	sp, #32
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
 801c490:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801c492:	683b      	ldr	r3, [r7, #0]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	60fb      	str	r3, [r7, #12]
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	3324      	adds	r3, #36	; 0x24
 801c49c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801c49e:	220b      	movs	r2, #11
 801c4a0:	2120      	movs	r1, #32
 801c4a2:	68b8      	ldr	r0, [r7, #8]
 801c4a4:	f7fe ff3b 	bl	801b31e <mem_set>
	si = i = 0; ni = 8;
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	613b      	str	r3, [r7, #16]
 801c4ac:	693b      	ldr	r3, [r7, #16]
 801c4ae:	61fb      	str	r3, [r7, #28]
 801c4b0:	2308      	movs	r3, #8
 801c4b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801c4b4:	69fb      	ldr	r3, [r7, #28]
 801c4b6:	1c5a      	adds	r2, r3, #1
 801c4b8:	61fa      	str	r2, [r7, #28]
 801c4ba:	68fa      	ldr	r2, [r7, #12]
 801c4bc:	4413      	add	r3, r2
 801c4be:	781b      	ldrb	r3, [r3, #0]
 801c4c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801c4c2:	7efb      	ldrb	r3, [r7, #27]
 801c4c4:	2b20      	cmp	r3, #32
 801c4c6:	d94e      	bls.n	801c566 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801c4c8:	7efb      	ldrb	r3, [r7, #27]
 801c4ca:	2b2f      	cmp	r3, #47	; 0x2f
 801c4cc:	d006      	beq.n	801c4dc <create_name+0x54>
 801c4ce:	7efb      	ldrb	r3, [r7, #27]
 801c4d0:	2b5c      	cmp	r3, #92	; 0x5c
 801c4d2:	d110      	bne.n	801c4f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c4d4:	e002      	b.n	801c4dc <create_name+0x54>
 801c4d6:	69fb      	ldr	r3, [r7, #28]
 801c4d8:	3301      	adds	r3, #1
 801c4da:	61fb      	str	r3, [r7, #28]
 801c4dc:	68fa      	ldr	r2, [r7, #12]
 801c4de:	69fb      	ldr	r3, [r7, #28]
 801c4e0:	4413      	add	r3, r2
 801c4e2:	781b      	ldrb	r3, [r3, #0]
 801c4e4:	2b2f      	cmp	r3, #47	; 0x2f
 801c4e6:	d0f6      	beq.n	801c4d6 <create_name+0x4e>
 801c4e8:	68fa      	ldr	r2, [r7, #12]
 801c4ea:	69fb      	ldr	r3, [r7, #28]
 801c4ec:	4413      	add	r3, r2
 801c4ee:	781b      	ldrb	r3, [r3, #0]
 801c4f0:	2b5c      	cmp	r3, #92	; 0x5c
 801c4f2:	d0f0      	beq.n	801c4d6 <create_name+0x4e>
			break;
 801c4f4:	e038      	b.n	801c568 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801c4f6:	7efb      	ldrb	r3, [r7, #27]
 801c4f8:	2b2e      	cmp	r3, #46	; 0x2e
 801c4fa:	d003      	beq.n	801c504 <create_name+0x7c>
 801c4fc:	693a      	ldr	r2, [r7, #16]
 801c4fe:	697b      	ldr	r3, [r7, #20]
 801c500:	429a      	cmp	r2, r3
 801c502:	d30c      	bcc.n	801c51e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801c504:	697b      	ldr	r3, [r7, #20]
 801c506:	2b0b      	cmp	r3, #11
 801c508:	d002      	beq.n	801c510 <create_name+0x88>
 801c50a:	7efb      	ldrb	r3, [r7, #27]
 801c50c:	2b2e      	cmp	r3, #46	; 0x2e
 801c50e:	d001      	beq.n	801c514 <create_name+0x8c>
 801c510:	2306      	movs	r3, #6
 801c512:	e044      	b.n	801c59e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801c514:	2308      	movs	r3, #8
 801c516:	613b      	str	r3, [r7, #16]
 801c518:	230b      	movs	r3, #11
 801c51a:	617b      	str	r3, [r7, #20]
			continue;
 801c51c:	e022      	b.n	801c564 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801c51e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c522:	2b00      	cmp	r3, #0
 801c524:	da04      	bge.n	801c530 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801c526:	7efb      	ldrb	r3, [r7, #27]
 801c528:	3b80      	subs	r3, #128	; 0x80
 801c52a:	4a1f      	ldr	r2, [pc, #124]	; (801c5a8 <create_name+0x120>)
 801c52c:	5cd3      	ldrb	r3, [r2, r3]
 801c52e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801c530:	7efb      	ldrb	r3, [r7, #27]
 801c532:	4619      	mov	r1, r3
 801c534:	481d      	ldr	r0, [pc, #116]	; (801c5ac <create_name+0x124>)
 801c536:	f7fe ff34 	bl	801b3a2 <chk_chr>
 801c53a:	4603      	mov	r3, r0
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d001      	beq.n	801c544 <create_name+0xbc>
 801c540:	2306      	movs	r3, #6
 801c542:	e02c      	b.n	801c59e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801c544:	7efb      	ldrb	r3, [r7, #27]
 801c546:	2b60      	cmp	r3, #96	; 0x60
 801c548:	d905      	bls.n	801c556 <create_name+0xce>
 801c54a:	7efb      	ldrb	r3, [r7, #27]
 801c54c:	2b7a      	cmp	r3, #122	; 0x7a
 801c54e:	d802      	bhi.n	801c556 <create_name+0xce>
 801c550:	7efb      	ldrb	r3, [r7, #27]
 801c552:	3b20      	subs	r3, #32
 801c554:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801c556:	693b      	ldr	r3, [r7, #16]
 801c558:	1c5a      	adds	r2, r3, #1
 801c55a:	613a      	str	r2, [r7, #16]
 801c55c:	68ba      	ldr	r2, [r7, #8]
 801c55e:	4413      	add	r3, r2
 801c560:	7efa      	ldrb	r2, [r7, #27]
 801c562:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801c564:	e7a6      	b.n	801c4b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801c566:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801c568:	68fa      	ldr	r2, [r7, #12]
 801c56a:	69fb      	ldr	r3, [r7, #28]
 801c56c:	441a      	add	r2, r3
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801c572:	693b      	ldr	r3, [r7, #16]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d101      	bne.n	801c57c <create_name+0xf4>
 801c578:	2306      	movs	r3, #6
 801c57a:	e010      	b.n	801c59e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	781b      	ldrb	r3, [r3, #0]
 801c580:	2be5      	cmp	r3, #229	; 0xe5
 801c582:	d102      	bne.n	801c58a <create_name+0x102>
 801c584:	68bb      	ldr	r3, [r7, #8]
 801c586:	2205      	movs	r2, #5
 801c588:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c58a:	7efb      	ldrb	r3, [r7, #27]
 801c58c:	2b20      	cmp	r3, #32
 801c58e:	d801      	bhi.n	801c594 <create_name+0x10c>
 801c590:	2204      	movs	r2, #4
 801c592:	e000      	b.n	801c596 <create_name+0x10e>
 801c594:	2200      	movs	r2, #0
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	330b      	adds	r3, #11
 801c59a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801c59c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801c59e:	4618      	mov	r0, r3
 801c5a0:	3720      	adds	r7, #32
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	bd80      	pop	{r7, pc}
 801c5a6:	bf00      	nop
 801c5a8:	08025cd8 	.word	0x08025cd8
 801c5ac:	08025c18 	.word	0x08025c18

0801c5b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b086      	sub	sp, #24
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	6078      	str	r0, [r7, #4]
 801c5b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c5be:	693b      	ldr	r3, [r7, #16]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c5c4:	e002      	b.n	801c5cc <follow_path+0x1c>
 801c5c6:	683b      	ldr	r3, [r7, #0]
 801c5c8:	3301      	adds	r3, #1
 801c5ca:	603b      	str	r3, [r7, #0]
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	781b      	ldrb	r3, [r3, #0]
 801c5d0:	2b2f      	cmp	r3, #47	; 0x2f
 801c5d2:	d0f8      	beq.n	801c5c6 <follow_path+0x16>
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	2b5c      	cmp	r3, #92	; 0x5c
 801c5da:	d0f4      	beq.n	801c5c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c5dc:	693b      	ldr	r3, [r7, #16]
 801c5de:	2200      	movs	r2, #0
 801c5e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c5e2:	683b      	ldr	r3, [r7, #0]
 801c5e4:	781b      	ldrb	r3, [r3, #0]
 801c5e6:	2b1f      	cmp	r3, #31
 801c5e8:	d80a      	bhi.n	801c600 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	2280      	movs	r2, #128	; 0x80
 801c5ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801c5f2:	2100      	movs	r1, #0
 801c5f4:	6878      	ldr	r0, [r7, #4]
 801c5f6:	f7ff fc1f 	bl	801be38 <dir_sdi>
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	75fb      	strb	r3, [r7, #23]
 801c5fe:	e043      	b.n	801c688 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c600:	463b      	mov	r3, r7
 801c602:	4619      	mov	r1, r3
 801c604:	6878      	ldr	r0, [r7, #4]
 801c606:	f7ff ff3f 	bl	801c488 <create_name>
 801c60a:	4603      	mov	r3, r0
 801c60c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c60e:	7dfb      	ldrb	r3, [r7, #23]
 801c610:	2b00      	cmp	r3, #0
 801c612:	d134      	bne.n	801c67e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c614:	6878      	ldr	r0, [r7, #4]
 801c616:	f7ff fe32 	bl	801c27e <dir_find>
 801c61a:	4603      	mov	r3, r0
 801c61c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801c624:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c626:	7dfb      	ldrb	r3, [r7, #23]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d00a      	beq.n	801c642 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c62c:	7dfb      	ldrb	r3, [r7, #23]
 801c62e:	2b04      	cmp	r3, #4
 801c630:	d127      	bne.n	801c682 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c632:	7afb      	ldrb	r3, [r7, #11]
 801c634:	f003 0304 	and.w	r3, r3, #4
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d122      	bne.n	801c682 <follow_path+0xd2>
 801c63c:	2305      	movs	r3, #5
 801c63e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c640:	e01f      	b.n	801c682 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c642:	7afb      	ldrb	r3, [r7, #11]
 801c644:	f003 0304 	and.w	r3, r3, #4
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d11c      	bne.n	801c686 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c64c:	693b      	ldr	r3, [r7, #16]
 801c64e:	799b      	ldrb	r3, [r3, #6]
 801c650:	f003 0310 	and.w	r3, r3, #16
 801c654:	2b00      	cmp	r3, #0
 801c656:	d102      	bne.n	801c65e <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c658:	2305      	movs	r3, #5
 801c65a:	75fb      	strb	r3, [r7, #23]
 801c65c:	e014      	b.n	801c688 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	695b      	ldr	r3, [r3, #20]
 801c668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c66c:	4413      	add	r3, r2
 801c66e:	4619      	mov	r1, r3
 801c670:	68f8      	ldr	r0, [r7, #12]
 801c672:	f7ff fd68 	bl	801c146 <ld_clust>
 801c676:	4602      	mov	r2, r0
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c67c:	e7c0      	b.n	801c600 <follow_path+0x50>
			if (res != FR_OK) break;
 801c67e:	bf00      	nop
 801c680:	e002      	b.n	801c688 <follow_path+0xd8>
				break;
 801c682:	bf00      	nop
 801c684:	e000      	b.n	801c688 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c686:	bf00      	nop
			}
		}
	}

	return res;
 801c688:	7dfb      	ldrb	r3, [r7, #23]
}
 801c68a:	4618      	mov	r0, r3
 801c68c:	3718      	adds	r7, #24
 801c68e:	46bd      	mov	sp, r7
 801c690:	bd80      	pop	{r7, pc}

0801c692 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c692:	b480      	push	{r7}
 801c694:	b087      	sub	sp, #28
 801c696:	af00      	add	r7, sp, #0
 801c698:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c69a:	f04f 33ff 	mov.w	r3, #4294967295
 801c69e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d031      	beq.n	801c70c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	617b      	str	r3, [r7, #20]
 801c6ae:	e002      	b.n	801c6b6 <get_ldnumber+0x24>
 801c6b0:	697b      	ldr	r3, [r7, #20]
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	617b      	str	r3, [r7, #20]
 801c6b6:	697b      	ldr	r3, [r7, #20]
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	2b20      	cmp	r3, #32
 801c6bc:	d903      	bls.n	801c6c6 <get_ldnumber+0x34>
 801c6be:	697b      	ldr	r3, [r7, #20]
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	2b3a      	cmp	r3, #58	; 0x3a
 801c6c4:	d1f4      	bne.n	801c6b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c6c6:	697b      	ldr	r3, [r7, #20]
 801c6c8:	781b      	ldrb	r3, [r3, #0]
 801c6ca:	2b3a      	cmp	r3, #58	; 0x3a
 801c6cc:	d11c      	bne.n	801c708 <get_ldnumber+0x76>
			tp = *path;
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	1c5a      	adds	r2, r3, #1
 801c6d8:	60fa      	str	r2, [r7, #12]
 801c6da:	781b      	ldrb	r3, [r3, #0]
 801c6dc:	3b30      	subs	r3, #48	; 0x30
 801c6de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c6e0:	68bb      	ldr	r3, [r7, #8]
 801c6e2:	2b09      	cmp	r3, #9
 801c6e4:	d80e      	bhi.n	801c704 <get_ldnumber+0x72>
 801c6e6:	68fa      	ldr	r2, [r7, #12]
 801c6e8:	697b      	ldr	r3, [r7, #20]
 801c6ea:	429a      	cmp	r2, r3
 801c6ec:	d10a      	bne.n	801c704 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c6ee:	68bb      	ldr	r3, [r7, #8]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d107      	bne.n	801c704 <get_ldnumber+0x72>
					vol = (int)i;
 801c6f4:	68bb      	ldr	r3, [r7, #8]
 801c6f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	3301      	adds	r3, #1
 801c6fc:	617b      	str	r3, [r7, #20]
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	697a      	ldr	r2, [r7, #20]
 801c702:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c704:	693b      	ldr	r3, [r7, #16]
 801c706:	e002      	b.n	801c70e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c708:	2300      	movs	r3, #0
 801c70a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c70c:	693b      	ldr	r3, [r7, #16]
}
 801c70e:	4618      	mov	r0, r3
 801c710:	371c      	adds	r7, #28
 801c712:	46bd      	mov	sp, r7
 801c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c718:	4770      	bx	lr
	...

0801c71c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c71c:	b580      	push	{r7, lr}
 801c71e:	b082      	sub	sp, #8
 801c720:	af00      	add	r7, sp, #0
 801c722:	6078      	str	r0, [r7, #4]
 801c724:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	2200      	movs	r2, #0
 801c72a:	70da      	strb	r2, [r3, #3]
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	f04f 32ff 	mov.w	r2, #4294967295
 801c732:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c734:	6839      	ldr	r1, [r7, #0]
 801c736:	6878      	ldr	r0, [r7, #4]
 801c738:	f7fe fffe 	bl	801b738 <move_window>
 801c73c:	4603      	mov	r3, r0
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d001      	beq.n	801c746 <check_fs+0x2a>
 801c742:	2304      	movs	r3, #4
 801c744:	e038      	b.n	801c7b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	3330      	adds	r3, #48	; 0x30
 801c74a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c74e:	4618      	mov	r0, r3
 801c750:	f7fe fd42 	bl	801b1d8 <ld_word>
 801c754:	4603      	mov	r3, r0
 801c756:	461a      	mov	r2, r3
 801c758:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c75c:	429a      	cmp	r2, r3
 801c75e:	d001      	beq.n	801c764 <check_fs+0x48>
 801c760:	2303      	movs	r3, #3
 801c762:	e029      	b.n	801c7b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c76a:	2be9      	cmp	r3, #233	; 0xe9
 801c76c:	d009      	beq.n	801c782 <check_fs+0x66>
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c774:	2beb      	cmp	r3, #235	; 0xeb
 801c776:	d11e      	bne.n	801c7b6 <check_fs+0x9a>
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801c77e:	2b90      	cmp	r3, #144	; 0x90
 801c780:	d119      	bne.n	801c7b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	3330      	adds	r3, #48	; 0x30
 801c786:	3336      	adds	r3, #54	; 0x36
 801c788:	4618      	mov	r0, r3
 801c78a:	f7fe fd3d 	bl	801b208 <ld_dword>
 801c78e:	4603      	mov	r3, r0
 801c790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801c794:	4a0a      	ldr	r2, [pc, #40]	; (801c7c0 <check_fs+0xa4>)
 801c796:	4293      	cmp	r3, r2
 801c798:	d101      	bne.n	801c79e <check_fs+0x82>
 801c79a:	2300      	movs	r3, #0
 801c79c:	e00c      	b.n	801c7b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	3330      	adds	r3, #48	; 0x30
 801c7a2:	3352      	adds	r3, #82	; 0x52
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7fe fd2f 	bl	801b208 <ld_dword>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	4a05      	ldr	r2, [pc, #20]	; (801c7c4 <check_fs+0xa8>)
 801c7ae:	4293      	cmp	r3, r2
 801c7b0:	d101      	bne.n	801c7b6 <check_fs+0x9a>
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	e000      	b.n	801c7b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c7b6:	2302      	movs	r3, #2
}
 801c7b8:	4618      	mov	r0, r3
 801c7ba:	3708      	adds	r7, #8
 801c7bc:	46bd      	mov	sp, r7
 801c7be:	bd80      	pop	{r7, pc}
 801c7c0:	00544146 	.word	0x00544146
 801c7c4:	33544146 	.word	0x33544146

0801c7c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b096      	sub	sp, #88	; 0x58
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	60f8      	str	r0, [r7, #12]
 801c7d0:	60b9      	str	r1, [r7, #8]
 801c7d2:	4613      	mov	r3, r2
 801c7d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c7d6:	68bb      	ldr	r3, [r7, #8]
 801c7d8:	2200      	movs	r2, #0
 801c7da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c7dc:	68f8      	ldr	r0, [r7, #12]
 801c7de:	f7ff ff58 	bl	801c692 <get_ldnumber>
 801c7e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	da01      	bge.n	801c7ee <find_volume+0x26>
 801c7ea:	230b      	movs	r3, #11
 801c7ec:	e22d      	b.n	801cc4a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c7ee:	4aa1      	ldr	r2, [pc, #644]	; (801ca74 <find_volume+0x2ac>)
 801c7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c7f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d101      	bne.n	801c802 <find_volume+0x3a>
 801c7fe:	230c      	movs	r3, #12
 801c800:	e223      	b.n	801cc4a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c806:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c808:	79fb      	ldrb	r3, [r7, #7]
 801c80a:	f023 0301 	bic.w	r3, r3, #1
 801c80e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c812:	781b      	ldrb	r3, [r3, #0]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d01a      	beq.n	801c84e <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c81a:	785b      	ldrb	r3, [r3, #1]
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7fe fc3d 	bl	801b09c <disk_status>
 801c822:	4603      	mov	r3, r0
 801c824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c82c:	f003 0301 	and.w	r3, r3, #1
 801c830:	2b00      	cmp	r3, #0
 801c832:	d10c      	bne.n	801c84e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c834:	79fb      	ldrb	r3, [r7, #7]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d007      	beq.n	801c84a <find_volume+0x82>
 801c83a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c83e:	f003 0304 	and.w	r3, r3, #4
 801c842:	2b00      	cmp	r3, #0
 801c844:	d001      	beq.n	801c84a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c846:	230a      	movs	r3, #10
 801c848:	e1ff      	b.n	801cc4a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801c84a:	2300      	movs	r3, #0
 801c84c:	e1fd      	b.n	801cc4a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c850:	2200      	movs	r2, #0
 801c852:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c856:	b2da      	uxtb	r2, r3
 801c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c85a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c85e:	785b      	ldrb	r3, [r3, #1]
 801c860:	4618      	mov	r0, r3
 801c862:	f7fe fc35 	bl	801b0d0 <disk_initialize>
 801c866:	4603      	mov	r3, r0
 801c868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c86c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c870:	f003 0301 	and.w	r3, r3, #1
 801c874:	2b00      	cmp	r3, #0
 801c876:	d001      	beq.n	801c87c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c878:	2303      	movs	r3, #3
 801c87a:	e1e6      	b.n	801cc4a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c87c:	79fb      	ldrb	r3, [r7, #7]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d007      	beq.n	801c892 <find_volume+0xca>
 801c882:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c886:	f003 0304 	and.w	r3, r3, #4
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d001      	beq.n	801c892 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c88e:	230a      	movs	r3, #10
 801c890:	e1db      	b.n	801cc4a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c892:	2300      	movs	r3, #0
 801c894:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c89a:	f7ff ff3f 	bl	801c71c <check_fs>
 801c89e:	4603      	mov	r3, r0
 801c8a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c8a8:	2b02      	cmp	r3, #2
 801c8aa:	d149      	bne.n	801c940 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c8ac:	2300      	movs	r3, #0
 801c8ae:	643b      	str	r3, [r7, #64]	; 0x40
 801c8b0:	e01e      	b.n	801c8f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8ba:	011b      	lsls	r3, r3, #4
 801c8bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801c8c0:	4413      	add	r3, r2
 801c8c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8c6:	3304      	adds	r3, #4
 801c8c8:	781b      	ldrb	r3, [r3, #0]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d006      	beq.n	801c8dc <find_volume+0x114>
 801c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8d0:	3308      	adds	r3, #8
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f7fe fc98 	bl	801b208 <ld_dword>
 801c8d8:	4602      	mov	r2, r0
 801c8da:	e000      	b.n	801c8de <find_volume+0x116>
 801c8dc:	2200      	movs	r2, #0
 801c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8e0:	009b      	lsls	r3, r3, #2
 801c8e2:	3358      	adds	r3, #88	; 0x58
 801c8e4:	443b      	add	r3, r7
 801c8e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8ec:	3301      	adds	r3, #1
 801c8ee:	643b      	str	r3, [r7, #64]	; 0x40
 801c8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8f2:	2b03      	cmp	r3, #3
 801c8f4:	d9dd      	bls.n	801c8b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801c8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d002      	beq.n	801c906 <find_volume+0x13e>
 801c900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c902:	3b01      	subs	r3, #1
 801c904:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c908:	009b      	lsls	r3, r3, #2
 801c90a:	3358      	adds	r3, #88	; 0x58
 801c90c:	443b      	add	r3, r7
 801c90e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c912:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c916:	2b00      	cmp	r3, #0
 801c918:	d005      	beq.n	801c926 <find_volume+0x15e>
 801c91a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c91c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c91e:	f7ff fefd 	bl	801c71c <check_fs>
 801c922:	4603      	mov	r3, r0
 801c924:	e000      	b.n	801c928 <find_volume+0x160>
 801c926:	2303      	movs	r3, #3
 801c928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c92c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c930:	2b01      	cmp	r3, #1
 801c932:	d905      	bls.n	801c940 <find_volume+0x178>
 801c934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c936:	3301      	adds	r3, #1
 801c938:	643b      	str	r3, [r7, #64]	; 0x40
 801c93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c93c:	2b03      	cmp	r3, #3
 801c93e:	d9e2      	bls.n	801c906 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c944:	2b04      	cmp	r3, #4
 801c946:	d101      	bne.n	801c94c <find_volume+0x184>
 801c948:	2301      	movs	r3, #1
 801c94a:	e17e      	b.n	801cc4a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c94c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c950:	2b01      	cmp	r3, #1
 801c952:	d901      	bls.n	801c958 <find_volume+0x190>
 801c954:	230d      	movs	r3, #13
 801c956:	e178      	b.n	801cc4a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c95a:	3330      	adds	r3, #48	; 0x30
 801c95c:	330b      	adds	r3, #11
 801c95e:	4618      	mov	r0, r3
 801c960:	f7fe fc3a 	bl	801b1d8 <ld_word>
 801c964:	4603      	mov	r3, r0
 801c966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c96a:	d001      	beq.n	801c970 <find_volume+0x1a8>
 801c96c:	230d      	movs	r3, #13
 801c96e:	e16c      	b.n	801cc4a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c972:	3330      	adds	r3, #48	; 0x30
 801c974:	3316      	adds	r3, #22
 801c976:	4618      	mov	r0, r3
 801c978:	f7fe fc2e 	bl	801b1d8 <ld_word>
 801c97c:	4603      	mov	r3, r0
 801c97e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c982:	2b00      	cmp	r3, #0
 801c984:	d106      	bne.n	801c994 <find_volume+0x1cc>
 801c986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c988:	3330      	adds	r3, #48	; 0x30
 801c98a:	3324      	adds	r3, #36	; 0x24
 801c98c:	4618      	mov	r0, r3
 801c98e:	f7fe fc3b 	bl	801b208 <ld_dword>
 801c992:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c998:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c99c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9a6:	789b      	ldrb	r3, [r3, #2]
 801c9a8:	2b01      	cmp	r3, #1
 801c9aa:	d005      	beq.n	801c9b8 <find_volume+0x1f0>
 801c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9ae:	789b      	ldrb	r3, [r3, #2]
 801c9b0:	2b02      	cmp	r3, #2
 801c9b2:	d001      	beq.n	801c9b8 <find_volume+0x1f0>
 801c9b4:	230d      	movs	r3, #13
 801c9b6:	e148      	b.n	801cc4a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9ba:	789b      	ldrb	r3, [r3, #2]
 801c9bc:	461a      	mov	r2, r3
 801c9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c9c0:	fb02 f303 	mul.w	r3, r2, r3
 801c9c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9d4:	895b      	ldrh	r3, [r3, #10]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d008      	beq.n	801c9ec <find_volume+0x224>
 801c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9dc:	895b      	ldrh	r3, [r3, #10]
 801c9de:	461a      	mov	r2, r3
 801c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9e2:	895b      	ldrh	r3, [r3, #10]
 801c9e4:	3b01      	subs	r3, #1
 801c9e6:	4013      	ands	r3, r2
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d001      	beq.n	801c9f0 <find_volume+0x228>
 801c9ec:	230d      	movs	r3, #13
 801c9ee:	e12c      	b.n	801cc4a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9f2:	3330      	adds	r3, #48	; 0x30
 801c9f4:	3311      	adds	r3, #17
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f7fe fbee 	bl	801b1d8 <ld_word>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	461a      	mov	r2, r3
 801ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca06:	891b      	ldrh	r3, [r3, #8]
 801ca08:	f003 030f 	and.w	r3, r3, #15
 801ca0c:	b29b      	uxth	r3, r3
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d001      	beq.n	801ca16 <find_volume+0x24e>
 801ca12:	230d      	movs	r3, #13
 801ca14:	e119      	b.n	801cc4a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca18:	3330      	adds	r3, #48	; 0x30
 801ca1a:	3313      	adds	r3, #19
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	f7fe fbdb 	bl	801b1d8 <ld_word>
 801ca22:	4603      	mov	r3, r0
 801ca24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801ca26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d106      	bne.n	801ca3a <find_volume+0x272>
 801ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca2e:	3330      	adds	r3, #48	; 0x30
 801ca30:	3320      	adds	r3, #32
 801ca32:	4618      	mov	r0, r3
 801ca34:	f7fe fbe8 	bl	801b208 <ld_dword>
 801ca38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca3c:	3330      	adds	r3, #48	; 0x30
 801ca3e:	330e      	adds	r3, #14
 801ca40:	4618      	mov	r0, r3
 801ca42:	f7fe fbc9 	bl	801b1d8 <ld_word>
 801ca46:	4603      	mov	r3, r0
 801ca48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801ca4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d101      	bne.n	801ca54 <find_volume+0x28c>
 801ca50:	230d      	movs	r3, #13
 801ca52:	e0fa      	b.n	801cc4a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801ca54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca58:	4413      	add	r3, r2
 801ca5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca5c:	8912      	ldrh	r2, [r2, #8]
 801ca5e:	0912      	lsrs	r2, r2, #4
 801ca60:	b292      	uxth	r2, r2
 801ca62:	4413      	add	r3, r2
 801ca64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801ca66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca6a:	429a      	cmp	r2, r3
 801ca6c:	d204      	bcs.n	801ca78 <find_volume+0x2b0>
 801ca6e:	230d      	movs	r3, #13
 801ca70:	e0eb      	b.n	801cc4a <find_volume+0x482>
 801ca72:	bf00      	nop
 801ca74:	20001774 	.word	0x20001774
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801ca78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca7c:	1ad3      	subs	r3, r2, r3
 801ca7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ca80:	8952      	ldrh	r2, [r2, #10]
 801ca82:	fbb3 f3f2 	udiv	r3, r3, r2
 801ca86:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d101      	bne.n	801ca92 <find_volume+0x2ca>
 801ca8e:	230d      	movs	r3, #13
 801ca90:	e0db      	b.n	801cc4a <find_volume+0x482>
		fmt = FS_FAT32;
 801ca92:	2303      	movs	r3, #3
 801ca94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca9a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801ca9e:	4293      	cmp	r3, r2
 801caa0:	d802      	bhi.n	801caa8 <find_volume+0x2e0>
 801caa2:	2302      	movs	r3, #2
 801caa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caaa:	f640 72f5 	movw	r2, #4085	; 0xff5
 801caae:	4293      	cmp	r3, r2
 801cab0:	d802      	bhi.n	801cab8 <find_volume+0x2f0>
 801cab2:	2301      	movs	r3, #1
 801cab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caba:	1c9a      	adds	r2, r3, #2
 801cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cabe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801cac4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801cac6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801caca:	441a      	add	r2, r3
 801cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cace:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801cad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cad4:	441a      	add	r2, r3
 801cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cad8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801cada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801cade:	2b03      	cmp	r3, #3
 801cae0:	d11e      	bne.n	801cb20 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cae4:	3330      	adds	r3, #48	; 0x30
 801cae6:	332a      	adds	r3, #42	; 0x2a
 801cae8:	4618      	mov	r0, r3
 801caea:	f7fe fb75 	bl	801b1d8 <ld_word>
 801caee:	4603      	mov	r3, r0
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d001      	beq.n	801caf8 <find_volume+0x330>
 801caf4:	230d      	movs	r3, #13
 801caf6:	e0a8      	b.n	801cc4a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cafa:	891b      	ldrh	r3, [r3, #8]
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d001      	beq.n	801cb04 <find_volume+0x33c>
 801cb00:	230d      	movs	r3, #13
 801cb02:	e0a2      	b.n	801cc4a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb06:	3330      	adds	r3, #48	; 0x30
 801cb08:	332c      	adds	r3, #44	; 0x2c
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7fe fb7c 	bl	801b208 <ld_dword>
 801cb10:	4602      	mov	r2, r0
 801cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb14:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb18:	695b      	ldr	r3, [r3, #20]
 801cb1a:	009b      	lsls	r3, r3, #2
 801cb1c:	647b      	str	r3, [r7, #68]	; 0x44
 801cb1e:	e01f      	b.n	801cb60 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb22:	891b      	ldrh	r3, [r3, #8]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d101      	bne.n	801cb2c <find_volume+0x364>
 801cb28:	230d      	movs	r3, #13
 801cb2a:	e08e      	b.n	801cc4a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb2e:	6a1a      	ldr	r2, [r3, #32]
 801cb30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cb32:	441a      	add	r2, r3
 801cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb36:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801cb38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801cb3c:	2b02      	cmp	r3, #2
 801cb3e:	d103      	bne.n	801cb48 <find_volume+0x380>
 801cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb42:	695b      	ldr	r3, [r3, #20]
 801cb44:	005b      	lsls	r3, r3, #1
 801cb46:	e00a      	b.n	801cb5e <find_volume+0x396>
 801cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb4a:	695a      	ldr	r2, [r3, #20]
 801cb4c:	4613      	mov	r3, r2
 801cb4e:	005b      	lsls	r3, r3, #1
 801cb50:	4413      	add	r3, r2
 801cb52:	085a      	lsrs	r2, r3, #1
 801cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb56:	695b      	ldr	r3, [r3, #20]
 801cb58:	f003 0301 	and.w	r3, r3, #1
 801cb5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801cb5e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb62:	699a      	ldr	r2, [r3, #24]
 801cb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801cb6a:	0a5b      	lsrs	r3, r3, #9
 801cb6c:	429a      	cmp	r2, r3
 801cb6e:	d201      	bcs.n	801cb74 <find_volume+0x3ac>
 801cb70:	230d      	movs	r3, #13
 801cb72:	e06a      	b.n	801cc4a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb76:	f04f 32ff 	mov.w	r2, #4294967295
 801cb7a:	611a      	str	r2, [r3, #16]
 801cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb7e:	691a      	ldr	r2, [r3, #16]
 801cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb82:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb86:	2280      	movs	r2, #128	; 0x80
 801cb88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801cb8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801cb8e:	2b03      	cmp	r3, #3
 801cb90:	d149      	bne.n	801cc26 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb94:	3330      	adds	r3, #48	; 0x30
 801cb96:	3330      	adds	r3, #48	; 0x30
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7fe fb1d 	bl	801b1d8 <ld_word>
 801cb9e:	4603      	mov	r3, r0
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d140      	bne.n	801cc26 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801cba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cba6:	3301      	adds	r3, #1
 801cba8:	4619      	mov	r1, r3
 801cbaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cbac:	f7fe fdc4 	bl	801b738 <move_window>
 801cbb0:	4603      	mov	r3, r0
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d137      	bne.n	801cc26 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801cbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbb8:	2200      	movs	r2, #0
 801cbba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbbe:	3330      	adds	r3, #48	; 0x30
 801cbc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801cbc4:	4618      	mov	r0, r3
 801cbc6:	f7fe fb07 	bl	801b1d8 <ld_word>
 801cbca:	4603      	mov	r3, r0
 801cbcc:	461a      	mov	r2, r3
 801cbce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801cbd2:	429a      	cmp	r2, r3
 801cbd4:	d127      	bne.n	801cc26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbd8:	3330      	adds	r3, #48	; 0x30
 801cbda:	4618      	mov	r0, r3
 801cbdc:	f7fe fb14 	bl	801b208 <ld_dword>
 801cbe0:	4603      	mov	r3, r0
 801cbe2:	4a1c      	ldr	r2, [pc, #112]	; (801cc54 <find_volume+0x48c>)
 801cbe4:	4293      	cmp	r3, r2
 801cbe6:	d11e      	bne.n	801cc26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbea:	3330      	adds	r3, #48	; 0x30
 801cbec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f7fe fb09 	bl	801b208 <ld_dword>
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	4a17      	ldr	r2, [pc, #92]	; (801cc58 <find_volume+0x490>)
 801cbfa:	4293      	cmp	r3, r2
 801cbfc:	d113      	bne.n	801cc26 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc00:	3330      	adds	r3, #48	; 0x30
 801cc02:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801cc06:	4618      	mov	r0, r3
 801cc08:	f7fe fafe 	bl	801b208 <ld_dword>
 801cc0c:	4602      	mov	r2, r0
 801cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc10:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc14:	3330      	adds	r3, #48	; 0x30
 801cc16:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	f7fe faf4 	bl	801b208 <ld_dword>
 801cc20:	4602      	mov	r2, r0
 801cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc24:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc28:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801cc2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cc2e:	4b0b      	ldr	r3, [pc, #44]	; (801cc5c <find_volume+0x494>)
 801cc30:	881b      	ldrh	r3, [r3, #0]
 801cc32:	3301      	adds	r3, #1
 801cc34:	b29a      	uxth	r2, r3
 801cc36:	4b09      	ldr	r3, [pc, #36]	; (801cc5c <find_volume+0x494>)
 801cc38:	801a      	strh	r2, [r3, #0]
 801cc3a:	4b08      	ldr	r3, [pc, #32]	; (801cc5c <find_volume+0x494>)
 801cc3c:	881a      	ldrh	r2, [r3, #0]
 801cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc40:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cc42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cc44:	f7fe fd10 	bl	801b668 <clear_lock>
#endif
	return FR_OK;
 801cc48:	2300      	movs	r3, #0
}
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	3758      	adds	r7, #88	; 0x58
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	bd80      	pop	{r7, pc}
 801cc52:	bf00      	nop
 801cc54:	41615252 	.word	0x41615252
 801cc58:	61417272 	.word	0x61417272
 801cc5c:	20001778 	.word	0x20001778

0801cc60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b084      	sub	sp, #16
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	6078      	str	r0, [r7, #4]
 801cc68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801cc6a:	2309      	movs	r3, #9
 801cc6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d01c      	beq.n	801ccae <validate+0x4e>
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d018      	beq.n	801ccae <validate+0x4e>
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	781b      	ldrb	r3, [r3, #0]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d013      	beq.n	801ccae <validate+0x4e>
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	889a      	ldrh	r2, [r3, #4]
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	88db      	ldrh	r3, [r3, #6]
 801cc90:	429a      	cmp	r2, r3
 801cc92:	d10c      	bne.n	801ccae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	785b      	ldrb	r3, [r3, #1]
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f7fe f9fe 	bl	801b09c <disk_status>
 801cca0:	4603      	mov	r3, r0
 801cca2:	f003 0301 	and.w	r3, r3, #1
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d101      	bne.n	801ccae <validate+0x4e>
			res = FR_OK;
 801ccaa:	2300      	movs	r3, #0
 801ccac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801ccae:	7bfb      	ldrb	r3, [r7, #15]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d102      	bne.n	801ccba <validate+0x5a>
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	e000      	b.n	801ccbc <validate+0x5c>
 801ccba:	2300      	movs	r3, #0
 801ccbc:	683a      	ldr	r2, [r7, #0]
 801ccbe:	6013      	str	r3, [r2, #0]
	return res;
 801ccc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	3710      	adds	r7, #16
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	bd80      	pop	{r7, pc}
	...

0801cccc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b088      	sub	sp, #32
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	60f8      	str	r0, [r7, #12]
 801ccd4:	60b9      	str	r1, [r7, #8]
 801ccd6:	4613      	mov	r3, r2
 801ccd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801ccda:	68bb      	ldr	r3, [r7, #8]
 801ccdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801ccde:	f107 0310 	add.w	r3, r7, #16
 801cce2:	4618      	mov	r0, r3
 801cce4:	f7ff fcd5 	bl	801c692 <get_ldnumber>
 801cce8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801ccea:	69fb      	ldr	r3, [r7, #28]
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	da01      	bge.n	801ccf4 <f_mount+0x28>
 801ccf0:	230b      	movs	r3, #11
 801ccf2:	e02b      	b.n	801cd4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801ccf4:	4a17      	ldr	r2, [pc, #92]	; (801cd54 <f_mount+0x88>)
 801ccf6:	69fb      	ldr	r3, [r7, #28]
 801ccf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801ccfe:	69bb      	ldr	r3, [r7, #24]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d005      	beq.n	801cd10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801cd04:	69b8      	ldr	r0, [r7, #24]
 801cd06:	f7fe fcaf 	bl	801b668 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801cd0a:	69bb      	ldr	r3, [r7, #24]
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d002      	beq.n	801cd1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	2200      	movs	r2, #0
 801cd1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801cd1c:	68fa      	ldr	r2, [r7, #12]
 801cd1e:	490d      	ldr	r1, [pc, #52]	; (801cd54 <f_mount+0x88>)
 801cd20:	69fb      	ldr	r3, [r7, #28]
 801cd22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d002      	beq.n	801cd32 <f_mount+0x66>
 801cd2c:	79fb      	ldrb	r3, [r7, #7]
 801cd2e:	2b01      	cmp	r3, #1
 801cd30:	d001      	beq.n	801cd36 <f_mount+0x6a>
 801cd32:	2300      	movs	r3, #0
 801cd34:	e00a      	b.n	801cd4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801cd36:	f107 010c 	add.w	r1, r7, #12
 801cd3a:	f107 0308 	add.w	r3, r7, #8
 801cd3e:	2200      	movs	r2, #0
 801cd40:	4618      	mov	r0, r3
 801cd42:	f7ff fd41 	bl	801c7c8 <find_volume>
 801cd46:	4603      	mov	r3, r0
 801cd48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	3720      	adds	r7, #32
 801cd50:	46bd      	mov	sp, r7
 801cd52:	bd80      	pop	{r7, pc}
 801cd54:	20001774 	.word	0x20001774

0801cd58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b098      	sub	sp, #96	; 0x60
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	60f8      	str	r0, [r7, #12]
 801cd60:	60b9      	str	r1, [r7, #8]
 801cd62:	4613      	mov	r3, r2
 801cd64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cd66:	68fb      	ldr	r3, [r7, #12]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d101      	bne.n	801cd70 <f_open+0x18>
 801cd6c:	2309      	movs	r3, #9
 801cd6e:	e1ad      	b.n	801d0cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cd70:	79fb      	ldrb	r3, [r7, #7]
 801cd72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cd76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cd78:	79fa      	ldrb	r2, [r7, #7]
 801cd7a:	f107 0110 	add.w	r1, r7, #16
 801cd7e:	f107 0308 	add.w	r3, r7, #8
 801cd82:	4618      	mov	r0, r3
 801cd84:	f7ff fd20 	bl	801c7c8 <find_volume>
 801cd88:	4603      	mov	r3, r0
 801cd8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801cd8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	f040 8191 	bne.w	801d0ba <f_open+0x362>
		dj.obj.fs = fs;
 801cd98:	693b      	ldr	r3, [r7, #16]
 801cd9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801cd9c:	68ba      	ldr	r2, [r7, #8]
 801cd9e:	f107 0314 	add.w	r3, r7, #20
 801cda2:	4611      	mov	r1, r2
 801cda4:	4618      	mov	r0, r3
 801cda6:	f7ff fc03 	bl	801c5b0 <follow_path>
 801cdaa:	4603      	mov	r3, r0
 801cdac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801cdb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d11a      	bne.n	801cdee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801cdb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801cdbc:	b25b      	sxtb	r3, r3
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	da03      	bge.n	801cdca <f_open+0x72>
				res = FR_INVALID_NAME;
 801cdc2:	2306      	movs	r3, #6
 801cdc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801cdc8:	e011      	b.n	801cdee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cdca:	79fb      	ldrb	r3, [r7, #7]
 801cdcc:	f023 0301 	bic.w	r3, r3, #1
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	bf14      	ite	ne
 801cdd4:	2301      	movne	r3, #1
 801cdd6:	2300      	moveq	r3, #0
 801cdd8:	b2db      	uxtb	r3, r3
 801cdda:	461a      	mov	r2, r3
 801cddc:	f107 0314 	add.w	r3, r7, #20
 801cde0:	4611      	mov	r1, r2
 801cde2:	4618      	mov	r0, r3
 801cde4:	f7fe faf8 	bl	801b3d8 <chk_lock>
 801cde8:	4603      	mov	r3, r0
 801cdea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801cdee:	79fb      	ldrb	r3, [r7, #7]
 801cdf0:	f003 031c 	and.w	r3, r3, #28
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d07f      	beq.n	801cef8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801cdf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d017      	beq.n	801ce30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801ce00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ce04:	2b04      	cmp	r3, #4
 801ce06:	d10e      	bne.n	801ce26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801ce08:	f7fe fb42 	bl	801b490 <enq_lock>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d006      	beq.n	801ce20 <f_open+0xc8>
 801ce12:	f107 0314 	add.w	r3, r7, #20
 801ce16:	4618      	mov	r0, r3
 801ce18:	f7ff fa86 	bl	801c328 <dir_register>
 801ce1c:	4603      	mov	r3, r0
 801ce1e:	e000      	b.n	801ce22 <f_open+0xca>
 801ce20:	2312      	movs	r3, #18
 801ce22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801ce26:	79fb      	ldrb	r3, [r7, #7]
 801ce28:	f043 0308 	orr.w	r3, r3, #8
 801ce2c:	71fb      	strb	r3, [r7, #7]
 801ce2e:	e010      	b.n	801ce52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801ce30:	7ebb      	ldrb	r3, [r7, #26]
 801ce32:	f003 0311 	and.w	r3, r3, #17
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d003      	beq.n	801ce42 <f_open+0xea>
					res = FR_DENIED;
 801ce3a:	2307      	movs	r3, #7
 801ce3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801ce40:	e007      	b.n	801ce52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801ce42:	79fb      	ldrb	r3, [r7, #7]
 801ce44:	f003 0304 	and.w	r3, r3, #4
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d002      	beq.n	801ce52 <f_open+0xfa>
 801ce4c:	2308      	movs	r3, #8
 801ce4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ce52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d168      	bne.n	801cf2c <f_open+0x1d4>
 801ce5a:	79fb      	ldrb	r3, [r7, #7]
 801ce5c:	f003 0308 	and.w	r3, r3, #8
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d063      	beq.n	801cf2c <f_open+0x1d4>
				dw = GET_FATTIME();
 801ce64:	f7f9 ff20 	bl	8016ca8 <get_fattime>
 801ce68:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce6c:	330e      	adds	r3, #14
 801ce6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7fe fa07 	bl	801b284 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801ce76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce78:	3316      	adds	r3, #22
 801ce7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	f7fe fa01 	bl	801b284 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce84:	330b      	adds	r3, #11
 801ce86:	2220      	movs	r2, #32
 801ce88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ce8a:	693b      	ldr	r3, [r7, #16]
 801ce8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce8e:	4611      	mov	r1, r2
 801ce90:	4618      	mov	r0, r3
 801ce92:	f7ff f958 	bl	801c146 <ld_clust>
 801ce96:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801ce98:	693b      	ldr	r3, [r7, #16]
 801ce9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7ff f970 	bl	801c184 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cea6:	331c      	adds	r3, #28
 801cea8:	2100      	movs	r1, #0
 801ceaa:	4618      	mov	r0, r3
 801ceac:	f7fe f9ea 	bl	801b284 <st_dword>
					fs->wflag = 1;
 801ceb0:	693b      	ldr	r3, [r7, #16]
 801ceb2:	2201      	movs	r2, #1
 801ceb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801ceb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d037      	beq.n	801cf2c <f_open+0x1d4>
						dw = fs->winsect;
 801cebc:	693b      	ldr	r3, [r7, #16]
 801cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cec0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801cec2:	f107 0314 	add.w	r3, r7, #20
 801cec6:	2200      	movs	r2, #0
 801cec8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ceca:	4618      	mov	r0, r3
 801cecc:	f7fe fe83 	bl	801bbd6 <remove_chain>
 801ced0:	4603      	mov	r3, r0
 801ced2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801ced6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d126      	bne.n	801cf2c <f_open+0x1d4>
							res = move_window(fs, dw);
 801cede:	693b      	ldr	r3, [r7, #16]
 801cee0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cee2:	4618      	mov	r0, r3
 801cee4:	f7fe fc28 	bl	801b738 <move_window>
 801cee8:	4603      	mov	r3, r0
 801ceea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ceee:	693b      	ldr	r3, [r7, #16]
 801cef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801cef2:	3a01      	subs	r2, #1
 801cef4:	60da      	str	r2, [r3, #12]
 801cef6:	e019      	b.n	801cf2c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801cef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d115      	bne.n	801cf2c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801cf00:	7ebb      	ldrb	r3, [r7, #26]
 801cf02:	f003 0310 	and.w	r3, r3, #16
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d003      	beq.n	801cf12 <f_open+0x1ba>
					res = FR_NO_FILE;
 801cf0a:	2304      	movs	r3, #4
 801cf0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801cf10:	e00c      	b.n	801cf2c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801cf12:	79fb      	ldrb	r3, [r7, #7]
 801cf14:	f003 0302 	and.w	r3, r3, #2
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d007      	beq.n	801cf2c <f_open+0x1d4>
 801cf1c:	7ebb      	ldrb	r3, [r7, #26]
 801cf1e:	f003 0301 	and.w	r3, r3, #1
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d002      	beq.n	801cf2c <f_open+0x1d4>
						res = FR_DENIED;
 801cf26:	2307      	movs	r3, #7
 801cf28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801cf2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d128      	bne.n	801cf86 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801cf34:	79fb      	ldrb	r3, [r7, #7]
 801cf36:	f003 0308 	and.w	r3, r3, #8
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d003      	beq.n	801cf46 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801cf3e:	79fb      	ldrb	r3, [r7, #7]
 801cf40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801cf46:	693b      	ldr	r3, [r7, #16]
 801cf48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801cf4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cf54:	79fb      	ldrb	r3, [r7, #7]
 801cf56:	f023 0301 	bic.w	r3, r3, #1
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	bf14      	ite	ne
 801cf5e:	2301      	movne	r3, #1
 801cf60:	2300      	moveq	r3, #0
 801cf62:	b2db      	uxtb	r3, r3
 801cf64:	461a      	mov	r2, r3
 801cf66:	f107 0314 	add.w	r3, r7, #20
 801cf6a:	4611      	mov	r1, r2
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	f7fe fab1 	bl	801b4d4 <inc_lock>
 801cf72:	4602      	mov	r2, r0
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	691b      	ldr	r3, [r3, #16]
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d102      	bne.n	801cf86 <f_open+0x22e>
 801cf80:	2302      	movs	r3, #2
 801cf82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801cf86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	f040 8095 	bne.w	801d0ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801cf90:	693b      	ldr	r3, [r7, #16]
 801cf92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf94:	4611      	mov	r1, r2
 801cf96:	4618      	mov	r0, r3
 801cf98:	f7ff f8d5 	bl	801c146 <ld_clust>
 801cf9c:	4602      	mov	r2, r0
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801cfa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfa4:	331c      	adds	r3, #28
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f7fe f92e 	bl	801b208 <ld_dword>
 801cfac:	4602      	mov	r2, r0
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	2200      	movs	r2, #0
 801cfb6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801cfb8:	693a      	ldr	r2, [r7, #16]
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801cfbe:	693b      	ldr	r3, [r7, #16]
 801cfc0:	88da      	ldrh	r2, [r3, #6]
 801cfc2:	68fb      	ldr	r3, [r7, #12]
 801cfc4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	79fa      	ldrb	r2, [r7, #7]
 801cfca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	2200      	movs	r2, #0
 801cfd0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	2200      	movs	r2, #0
 801cfdc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	3330      	adds	r3, #48	; 0x30
 801cfe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cfe6:	2100      	movs	r1, #0
 801cfe8:	4618      	mov	r0, r3
 801cfea:	f7fe f998 	bl	801b31e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801cfee:	79fb      	ldrb	r3, [r7, #7]
 801cff0:	f003 0320 	and.w	r3, r3, #32
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d060      	beq.n	801d0ba <f_open+0x362>
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	68db      	ldr	r3, [r3, #12]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d05c      	beq.n	801d0ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	68da      	ldr	r2, [r3, #12]
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d008:	693b      	ldr	r3, [r7, #16]
 801d00a:	895b      	ldrh	r3, [r3, #10]
 801d00c:	025b      	lsls	r3, r3, #9
 801d00e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	689b      	ldr	r3, [r3, #8]
 801d014:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	68db      	ldr	r3, [r3, #12]
 801d01a:	657b      	str	r3, [r7, #84]	; 0x54
 801d01c:	e016      	b.n	801d04c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d022:	4618      	mov	r0, r3
 801d024:	f7fe fc43 	bl	801b8ae <get_fat>
 801d028:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801d02a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d02c:	2b01      	cmp	r3, #1
 801d02e:	d802      	bhi.n	801d036 <f_open+0x2de>
 801d030:	2302      	movs	r3, #2
 801d032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d038:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d03c:	d102      	bne.n	801d044 <f_open+0x2ec>
 801d03e:	2301      	movs	r3, #1
 801d040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d048:	1ad3      	subs	r3, r2, r3
 801d04a:	657b      	str	r3, [r7, #84]	; 0x54
 801d04c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d050:	2b00      	cmp	r3, #0
 801d052:	d103      	bne.n	801d05c <f_open+0x304>
 801d054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d058:	429a      	cmp	r2, r3
 801d05a:	d8e0      	bhi.n	801d01e <f_open+0x2c6>
				}
				fp->clust = clst;
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d060:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d066:	2b00      	cmp	r3, #0
 801d068:	d127      	bne.n	801d0ba <f_open+0x362>
 801d06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d070:	2b00      	cmp	r3, #0
 801d072:	d022      	beq.n	801d0ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d074:	693b      	ldr	r3, [r7, #16]
 801d076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d078:	4618      	mov	r0, r3
 801d07a:	f7fe fbf9 	bl	801b870 <clust2sect>
 801d07e:	6478      	str	r0, [r7, #68]	; 0x44
 801d080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d082:	2b00      	cmp	r3, #0
 801d084:	d103      	bne.n	801d08e <f_open+0x336>
						res = FR_INT_ERR;
 801d086:	2302      	movs	r3, #2
 801d088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801d08c:	e015      	b.n	801d0ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d090:	0a5a      	lsrs	r2, r3, #9
 801d092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d094:	441a      	add	r2, r3
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	7858      	ldrb	r0, [r3, #1]
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	6a1a      	ldr	r2, [r3, #32]
 801d0a8:	2301      	movs	r3, #1
 801d0aa:	f7fe f837 	bl	801b11c <disk_read>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d002      	beq.n	801d0ba <f_open+0x362>
 801d0b4:	2301      	movs	r3, #1
 801d0b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d002      	beq.n	801d0c8 <f_open+0x370>
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d0c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	3760      	adds	r7, #96	; 0x60
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}

0801d0d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b08e      	sub	sp, #56	; 0x38
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	60f8      	str	r0, [r7, #12]
 801d0dc:	60b9      	str	r1, [r7, #8]
 801d0de:	607a      	str	r2, [r7, #4]
 801d0e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801d0e2:	68bb      	ldr	r3, [r7, #8]
 801d0e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801d0e6:	683b      	ldr	r3, [r7, #0]
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	f107 0214 	add.w	r2, r7, #20
 801d0f2:	4611      	mov	r1, r2
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	f7ff fdb3 	bl	801cc60 <validate>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d104:	2b00      	cmp	r3, #0
 801d106:	d107      	bne.n	801d118 <f_read+0x44>
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	7d5b      	ldrb	r3, [r3, #21]
 801d10c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801d110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d114:	2b00      	cmp	r3, #0
 801d116:	d002      	beq.n	801d11e <f_read+0x4a>
 801d118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d11c:	e115      	b.n	801d34a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	7d1b      	ldrb	r3, [r3, #20]
 801d122:	f003 0301 	and.w	r3, r3, #1
 801d126:	2b00      	cmp	r3, #0
 801d128:	d101      	bne.n	801d12e <f_read+0x5a>
 801d12a:	2307      	movs	r3, #7
 801d12c:	e10d      	b.n	801d34a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	68da      	ldr	r2, [r3, #12]
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	699b      	ldr	r3, [r3, #24]
 801d136:	1ad3      	subs	r3, r2, r3
 801d138:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801d13a:	687a      	ldr	r2, [r7, #4]
 801d13c:	6a3b      	ldr	r3, [r7, #32]
 801d13e:	429a      	cmp	r2, r3
 801d140:	f240 80fe 	bls.w	801d340 <f_read+0x26c>
 801d144:	6a3b      	ldr	r3, [r7, #32]
 801d146:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801d148:	e0fa      	b.n	801d340 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	699b      	ldr	r3, [r3, #24]
 801d14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d152:	2b00      	cmp	r3, #0
 801d154:	f040 80c6 	bne.w	801d2e4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	699b      	ldr	r3, [r3, #24]
 801d15c:	0a5b      	lsrs	r3, r3, #9
 801d15e:	697a      	ldr	r2, [r7, #20]
 801d160:	8952      	ldrh	r2, [r2, #10]
 801d162:	3a01      	subs	r2, #1
 801d164:	4013      	ands	r3, r2
 801d166:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801d168:	69fb      	ldr	r3, [r7, #28]
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d12f      	bne.n	801d1ce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	699b      	ldr	r3, [r3, #24]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d103      	bne.n	801d17e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	689b      	ldr	r3, [r3, #8]
 801d17a:	633b      	str	r3, [r7, #48]	; 0x30
 801d17c:	e013      	b.n	801d1a6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d17e:	68fb      	ldr	r3, [r7, #12]
 801d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d182:	2b00      	cmp	r3, #0
 801d184:	d007      	beq.n	801d196 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	699b      	ldr	r3, [r3, #24]
 801d18a:	4619      	mov	r1, r3
 801d18c:	68f8      	ldr	r0, [r7, #12]
 801d18e:	f7fe fe1f 	bl	801bdd0 <clmt_clust>
 801d192:	6338      	str	r0, [r7, #48]	; 0x30
 801d194:	e007      	b.n	801d1a6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801d196:	68fa      	ldr	r2, [r7, #12]
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	69db      	ldr	r3, [r3, #28]
 801d19c:	4619      	mov	r1, r3
 801d19e:	4610      	mov	r0, r2
 801d1a0:	f7fe fb85 	bl	801b8ae <get_fat>
 801d1a4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1a8:	2b01      	cmp	r3, #1
 801d1aa:	d804      	bhi.n	801d1b6 <f_read+0xe2>
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	2202      	movs	r2, #2
 801d1b0:	755a      	strb	r2, [r3, #21]
 801d1b2:	2302      	movs	r3, #2
 801d1b4:	e0c9      	b.n	801d34a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1bc:	d104      	bne.n	801d1c8 <f_read+0xf4>
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	2201      	movs	r2, #1
 801d1c2:	755a      	strb	r2, [r3, #21]
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	e0c0      	b.n	801d34a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d1cc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d1ce:	697a      	ldr	r2, [r7, #20]
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	69db      	ldr	r3, [r3, #28]
 801d1d4:	4619      	mov	r1, r3
 801d1d6:	4610      	mov	r0, r2
 801d1d8:	f7fe fb4a 	bl	801b870 <clust2sect>
 801d1dc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d1de:	69bb      	ldr	r3, [r7, #24]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d104      	bne.n	801d1ee <f_read+0x11a>
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	2202      	movs	r2, #2
 801d1e8:	755a      	strb	r2, [r3, #21]
 801d1ea:	2302      	movs	r3, #2
 801d1ec:	e0ad      	b.n	801d34a <f_read+0x276>
			sect += csect;
 801d1ee:	69ba      	ldr	r2, [r7, #24]
 801d1f0:	69fb      	ldr	r3, [r7, #28]
 801d1f2:	4413      	add	r3, r2
 801d1f4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	0a5b      	lsrs	r3, r3, #9
 801d1fa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d039      	beq.n	801d276 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d202:	69fa      	ldr	r2, [r7, #28]
 801d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d206:	4413      	add	r3, r2
 801d208:	697a      	ldr	r2, [r7, #20]
 801d20a:	8952      	ldrh	r2, [r2, #10]
 801d20c:	4293      	cmp	r3, r2
 801d20e:	d905      	bls.n	801d21c <f_read+0x148>
					cc = fs->csize - csect;
 801d210:	697b      	ldr	r3, [r7, #20]
 801d212:	895b      	ldrh	r3, [r3, #10]
 801d214:	461a      	mov	r2, r3
 801d216:	69fb      	ldr	r3, [r7, #28]
 801d218:	1ad3      	subs	r3, r2, r3
 801d21a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d21c:	697b      	ldr	r3, [r7, #20]
 801d21e:	7858      	ldrb	r0, [r3, #1]
 801d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d222:	69ba      	ldr	r2, [r7, #24]
 801d224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d226:	f7fd ff79 	bl	801b11c <disk_read>
 801d22a:	4603      	mov	r3, r0
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d004      	beq.n	801d23a <f_read+0x166>
 801d230:	68fb      	ldr	r3, [r7, #12]
 801d232:	2201      	movs	r2, #1
 801d234:	755a      	strb	r2, [r3, #21]
 801d236:	2301      	movs	r3, #1
 801d238:	e087      	b.n	801d34a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	7d1b      	ldrb	r3, [r3, #20]
 801d23e:	b25b      	sxtb	r3, r3
 801d240:	2b00      	cmp	r3, #0
 801d242:	da14      	bge.n	801d26e <f_read+0x19a>
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	6a1a      	ldr	r2, [r3, #32]
 801d248:	69bb      	ldr	r3, [r7, #24]
 801d24a:	1ad3      	subs	r3, r2, r3
 801d24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d24e:	429a      	cmp	r2, r3
 801d250:	d90d      	bls.n	801d26e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	6a1a      	ldr	r2, [r3, #32]
 801d256:	69bb      	ldr	r3, [r7, #24]
 801d258:	1ad3      	subs	r3, r2, r3
 801d25a:	025b      	lsls	r3, r3, #9
 801d25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d25e:	18d0      	adds	r0, r2, r3
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	3330      	adds	r3, #48	; 0x30
 801d264:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d268:	4619      	mov	r1, r3
 801d26a:	f7fe f837 	bl	801b2dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d270:	025b      	lsls	r3, r3, #9
 801d272:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801d274:	e050      	b.n	801d318 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	6a1b      	ldr	r3, [r3, #32]
 801d27a:	69ba      	ldr	r2, [r7, #24]
 801d27c:	429a      	cmp	r2, r3
 801d27e:	d02e      	beq.n	801d2de <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	7d1b      	ldrb	r3, [r3, #20]
 801d284:	b25b      	sxtb	r3, r3
 801d286:	2b00      	cmp	r3, #0
 801d288:	da18      	bge.n	801d2bc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d28a:	697b      	ldr	r3, [r7, #20]
 801d28c:	7858      	ldrb	r0, [r3, #1]
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	6a1a      	ldr	r2, [r3, #32]
 801d298:	2301      	movs	r3, #1
 801d29a:	f7fd ff5f 	bl	801b15c <disk_write>
 801d29e:	4603      	mov	r3, r0
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d004      	beq.n	801d2ae <f_read+0x1da>
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	2201      	movs	r2, #1
 801d2a8:	755a      	strb	r2, [r3, #21]
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	e04d      	b.n	801d34a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	7d1b      	ldrb	r3, [r3, #20]
 801d2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d2b6:	b2da      	uxtb	r2, r3
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801d2bc:	697b      	ldr	r3, [r7, #20]
 801d2be:	7858      	ldrb	r0, [r3, #1]
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d2c6:	2301      	movs	r3, #1
 801d2c8:	69ba      	ldr	r2, [r7, #24]
 801d2ca:	f7fd ff27 	bl	801b11c <disk_read>
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d004      	beq.n	801d2de <f_read+0x20a>
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	2201      	movs	r2, #1
 801d2d8:	755a      	strb	r2, [r3, #21]
 801d2da:	2301      	movs	r3, #1
 801d2dc:	e035      	b.n	801d34a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	69ba      	ldr	r2, [r7, #24]
 801d2e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	699b      	ldr	r3, [r3, #24]
 801d2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801d2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801d2f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	429a      	cmp	r2, r3
 801d2f8:	d901      	bls.n	801d2fe <f_read+0x22a>
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	699b      	ldr	r3, [r3, #24]
 801d308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d30c:	4413      	add	r3, r2
 801d30e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d310:	4619      	mov	r1, r3
 801d312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d314:	f7fd ffe2 	bl	801b2dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801d318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d31c:	4413      	add	r3, r2
 801d31e:	627b      	str	r3, [r7, #36]	; 0x24
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	699a      	ldr	r2, [r3, #24]
 801d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d326:	441a      	add	r2, r3
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	619a      	str	r2, [r3, #24]
 801d32c:	683b      	ldr	r3, [r7, #0]
 801d32e:	681a      	ldr	r2, [r3, #0]
 801d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d332:	441a      	add	r2, r3
 801d334:	683b      	ldr	r3, [r7, #0]
 801d336:	601a      	str	r2, [r3, #0]
 801d338:	687a      	ldr	r2, [r7, #4]
 801d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d33c:	1ad3      	subs	r3, r2, r3
 801d33e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	2b00      	cmp	r3, #0
 801d344:	f47f af01 	bne.w	801d14a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801d348:	2300      	movs	r3, #0
}
 801d34a:	4618      	mov	r0, r3
 801d34c:	3738      	adds	r7, #56	; 0x38
 801d34e:	46bd      	mov	sp, r7
 801d350:	bd80      	pop	{r7, pc}

0801d352 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d352:	b580      	push	{r7, lr}
 801d354:	b08c      	sub	sp, #48	; 0x30
 801d356:	af00      	add	r7, sp, #0
 801d358:	60f8      	str	r0, [r7, #12]
 801d35a:	60b9      	str	r1, [r7, #8]
 801d35c:	607a      	str	r2, [r7, #4]
 801d35e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d364:	683b      	ldr	r3, [r7, #0]
 801d366:	2200      	movs	r2, #0
 801d368:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	f107 0210 	add.w	r2, r7, #16
 801d370:	4611      	mov	r1, r2
 801d372:	4618      	mov	r0, r3
 801d374:	f7ff fc74 	bl	801cc60 <validate>
 801d378:	4603      	mov	r3, r0
 801d37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d37e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d382:	2b00      	cmp	r3, #0
 801d384:	d107      	bne.n	801d396 <f_write+0x44>
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	7d5b      	ldrb	r3, [r3, #21]
 801d38a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d38e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d392:	2b00      	cmp	r3, #0
 801d394:	d002      	beq.n	801d39c <f_write+0x4a>
 801d396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d39a:	e14b      	b.n	801d634 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	7d1b      	ldrb	r3, [r3, #20]
 801d3a0:	f003 0302 	and.w	r3, r3, #2
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d101      	bne.n	801d3ac <f_write+0x5a>
 801d3a8:	2307      	movs	r3, #7
 801d3aa:	e143      	b.n	801d634 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	699a      	ldr	r2, [r3, #24]
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	441a      	add	r2, r3
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	699b      	ldr	r3, [r3, #24]
 801d3b8:	429a      	cmp	r2, r3
 801d3ba:	f080 812d 	bcs.w	801d618 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	699b      	ldr	r3, [r3, #24]
 801d3c2:	43db      	mvns	r3, r3
 801d3c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d3c6:	e127      	b.n	801d618 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	699b      	ldr	r3, [r3, #24]
 801d3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	f040 80e3 	bne.w	801d59c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	699b      	ldr	r3, [r3, #24]
 801d3da:	0a5b      	lsrs	r3, r3, #9
 801d3dc:	693a      	ldr	r2, [r7, #16]
 801d3de:	8952      	ldrh	r2, [r2, #10]
 801d3e0:	3a01      	subs	r2, #1
 801d3e2:	4013      	ands	r3, r2
 801d3e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d3e6:	69bb      	ldr	r3, [r7, #24]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d143      	bne.n	801d474 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	699b      	ldr	r3, [r3, #24]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d10c      	bne.n	801d40e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	689b      	ldr	r3, [r3, #8]
 801d3f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d11a      	bne.n	801d436 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	2100      	movs	r1, #0
 801d404:	4618      	mov	r0, r3
 801d406:	f7fe fc4b 	bl	801bca0 <create_chain>
 801d40a:	62b8      	str	r0, [r7, #40]	; 0x28
 801d40c:	e013      	b.n	801d436 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d412:	2b00      	cmp	r3, #0
 801d414:	d007      	beq.n	801d426 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	699b      	ldr	r3, [r3, #24]
 801d41a:	4619      	mov	r1, r3
 801d41c:	68f8      	ldr	r0, [r7, #12]
 801d41e:	f7fe fcd7 	bl	801bdd0 <clmt_clust>
 801d422:	62b8      	str	r0, [r7, #40]	; 0x28
 801d424:	e007      	b.n	801d436 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d426:	68fa      	ldr	r2, [r7, #12]
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	69db      	ldr	r3, [r3, #28]
 801d42c:	4619      	mov	r1, r3
 801d42e:	4610      	mov	r0, r2
 801d430:	f7fe fc36 	bl	801bca0 <create_chain>
 801d434:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d438:	2b00      	cmp	r3, #0
 801d43a:	f000 80f2 	beq.w	801d622 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d440:	2b01      	cmp	r3, #1
 801d442:	d104      	bne.n	801d44e <f_write+0xfc>
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	2202      	movs	r2, #2
 801d448:	755a      	strb	r2, [r3, #21]
 801d44a:	2302      	movs	r3, #2
 801d44c:	e0f2      	b.n	801d634 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d450:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d454:	d104      	bne.n	801d460 <f_write+0x10e>
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	2201      	movs	r2, #1
 801d45a:	755a      	strb	r2, [r3, #21]
 801d45c:	2301      	movs	r3, #1
 801d45e:	e0e9      	b.n	801d634 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d464:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	689b      	ldr	r3, [r3, #8]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d102      	bne.n	801d474 <f_write+0x122>
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d472:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	7d1b      	ldrb	r3, [r3, #20]
 801d478:	b25b      	sxtb	r3, r3
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	da18      	bge.n	801d4b0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d47e:	693b      	ldr	r3, [r7, #16]
 801d480:	7858      	ldrb	r0, [r3, #1]
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	6a1a      	ldr	r2, [r3, #32]
 801d48c:	2301      	movs	r3, #1
 801d48e:	f7fd fe65 	bl	801b15c <disk_write>
 801d492:	4603      	mov	r3, r0
 801d494:	2b00      	cmp	r3, #0
 801d496:	d004      	beq.n	801d4a2 <f_write+0x150>
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	2201      	movs	r2, #1
 801d49c:	755a      	strb	r2, [r3, #21]
 801d49e:	2301      	movs	r3, #1
 801d4a0:	e0c8      	b.n	801d634 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	7d1b      	ldrb	r3, [r3, #20]
 801d4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d4aa:	b2da      	uxtb	r2, r3
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d4b0:	693a      	ldr	r2, [r7, #16]
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	69db      	ldr	r3, [r3, #28]
 801d4b6:	4619      	mov	r1, r3
 801d4b8:	4610      	mov	r0, r2
 801d4ba:	f7fe f9d9 	bl	801b870 <clust2sect>
 801d4be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d104      	bne.n	801d4d0 <f_write+0x17e>
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	2202      	movs	r2, #2
 801d4ca:	755a      	strb	r2, [r3, #21]
 801d4cc:	2302      	movs	r3, #2
 801d4ce:	e0b1      	b.n	801d634 <f_write+0x2e2>
			sect += csect;
 801d4d0:	697a      	ldr	r2, [r7, #20]
 801d4d2:	69bb      	ldr	r3, [r7, #24]
 801d4d4:	4413      	add	r3, r2
 801d4d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	0a5b      	lsrs	r3, r3, #9
 801d4dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d4de:	6a3b      	ldr	r3, [r7, #32]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d03c      	beq.n	801d55e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d4e4:	69ba      	ldr	r2, [r7, #24]
 801d4e6:	6a3b      	ldr	r3, [r7, #32]
 801d4e8:	4413      	add	r3, r2
 801d4ea:	693a      	ldr	r2, [r7, #16]
 801d4ec:	8952      	ldrh	r2, [r2, #10]
 801d4ee:	4293      	cmp	r3, r2
 801d4f0:	d905      	bls.n	801d4fe <f_write+0x1ac>
					cc = fs->csize - csect;
 801d4f2:	693b      	ldr	r3, [r7, #16]
 801d4f4:	895b      	ldrh	r3, [r3, #10]
 801d4f6:	461a      	mov	r2, r3
 801d4f8:	69bb      	ldr	r3, [r7, #24]
 801d4fa:	1ad3      	subs	r3, r2, r3
 801d4fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d4fe:	693b      	ldr	r3, [r7, #16]
 801d500:	7858      	ldrb	r0, [r3, #1]
 801d502:	6a3b      	ldr	r3, [r7, #32]
 801d504:	697a      	ldr	r2, [r7, #20]
 801d506:	69f9      	ldr	r1, [r7, #28]
 801d508:	f7fd fe28 	bl	801b15c <disk_write>
 801d50c:	4603      	mov	r3, r0
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d004      	beq.n	801d51c <f_write+0x1ca>
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	2201      	movs	r2, #1
 801d516:	755a      	strb	r2, [r3, #21]
 801d518:	2301      	movs	r3, #1
 801d51a:	e08b      	b.n	801d634 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	6a1a      	ldr	r2, [r3, #32]
 801d520:	697b      	ldr	r3, [r7, #20]
 801d522:	1ad3      	subs	r3, r2, r3
 801d524:	6a3a      	ldr	r2, [r7, #32]
 801d526:	429a      	cmp	r2, r3
 801d528:	d915      	bls.n	801d556 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	6a1a      	ldr	r2, [r3, #32]
 801d534:	697b      	ldr	r3, [r7, #20]
 801d536:	1ad3      	subs	r3, r2, r3
 801d538:	025b      	lsls	r3, r3, #9
 801d53a:	69fa      	ldr	r2, [r7, #28]
 801d53c:	4413      	add	r3, r2
 801d53e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d542:	4619      	mov	r1, r3
 801d544:	f7fd feca 	bl	801b2dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	7d1b      	ldrb	r3, [r3, #20]
 801d54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d550:	b2da      	uxtb	r2, r3
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d556:	6a3b      	ldr	r3, [r7, #32]
 801d558:	025b      	lsls	r3, r3, #9
 801d55a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801d55c:	e03f      	b.n	801d5de <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	6a1b      	ldr	r3, [r3, #32]
 801d562:	697a      	ldr	r2, [r7, #20]
 801d564:	429a      	cmp	r2, r3
 801d566:	d016      	beq.n	801d596 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	699a      	ldr	r2, [r3, #24]
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d570:	429a      	cmp	r2, r3
 801d572:	d210      	bcs.n	801d596 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d574:	693b      	ldr	r3, [r7, #16]
 801d576:	7858      	ldrb	r0, [r3, #1]
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d57e:	2301      	movs	r3, #1
 801d580:	697a      	ldr	r2, [r7, #20]
 801d582:	f7fd fdcb 	bl	801b11c <disk_read>
 801d586:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d004      	beq.n	801d596 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	2201      	movs	r2, #1
 801d590:	755a      	strb	r2, [r3, #21]
 801d592:	2301      	movs	r3, #1
 801d594:	e04e      	b.n	801d634 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	697a      	ldr	r2, [r7, #20]
 801d59a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	699b      	ldr	r3, [r3, #24]
 801d5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d5a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801d5a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	429a      	cmp	r2, r3
 801d5b0:	d901      	bls.n	801d5b6 <f_write+0x264>
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	699b      	ldr	r3, [r3, #24]
 801d5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d5c4:	4413      	add	r3, r2
 801d5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d5c8:	69f9      	ldr	r1, [r7, #28]
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	f7fd fe86 	bl	801b2dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	7d1b      	ldrb	r3, [r3, #20]
 801d5d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d5d8:	b2da      	uxtb	r2, r3
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d5de:	69fa      	ldr	r2, [r7, #28]
 801d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5e2:	4413      	add	r3, r2
 801d5e4:	61fb      	str	r3, [r7, #28]
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	699a      	ldr	r2, [r3, #24]
 801d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ec:	441a      	add	r2, r3
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	619a      	str	r2, [r3, #24]
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	68da      	ldr	r2, [r3, #12]
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	699b      	ldr	r3, [r3, #24]
 801d5fa:	429a      	cmp	r2, r3
 801d5fc:	bf38      	it	cc
 801d5fe:	461a      	movcc	r2, r3
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	60da      	str	r2, [r3, #12]
 801d604:	683b      	ldr	r3, [r7, #0]
 801d606:	681a      	ldr	r2, [r3, #0]
 801d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d60a:	441a      	add	r2, r3
 801d60c:	683b      	ldr	r3, [r7, #0]
 801d60e:	601a      	str	r2, [r3, #0]
 801d610:	687a      	ldr	r2, [r7, #4]
 801d612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d614:	1ad3      	subs	r3, r2, r3
 801d616:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	f47f aed4 	bne.w	801d3c8 <f_write+0x76>
 801d620:	e000      	b.n	801d624 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d622:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	7d1b      	ldrb	r3, [r3, #20]
 801d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d62c:	b2da      	uxtb	r2, r3
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d632:	2300      	movs	r3, #0
}
 801d634:	4618      	mov	r0, r3
 801d636:	3730      	adds	r7, #48	; 0x30
 801d638:	46bd      	mov	sp, r7
 801d63a:	bd80      	pop	{r7, pc}

0801d63c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b086      	sub	sp, #24
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	f107 0208 	add.w	r2, r7, #8
 801d64a:	4611      	mov	r1, r2
 801d64c:	4618      	mov	r0, r3
 801d64e:	f7ff fb07 	bl	801cc60 <validate>
 801d652:	4603      	mov	r3, r0
 801d654:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d656:	7dfb      	ldrb	r3, [r7, #23]
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d168      	bne.n	801d72e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	7d1b      	ldrb	r3, [r3, #20]
 801d660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d664:	2b00      	cmp	r3, #0
 801d666:	d062      	beq.n	801d72e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	7d1b      	ldrb	r3, [r3, #20]
 801d66c:	b25b      	sxtb	r3, r3
 801d66e:	2b00      	cmp	r3, #0
 801d670:	da15      	bge.n	801d69e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	7858      	ldrb	r0, [r3, #1]
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	6a1a      	ldr	r2, [r3, #32]
 801d680:	2301      	movs	r3, #1
 801d682:	f7fd fd6b 	bl	801b15c <disk_write>
 801d686:	4603      	mov	r3, r0
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d001      	beq.n	801d690 <f_sync+0x54>
 801d68c:	2301      	movs	r3, #1
 801d68e:	e04f      	b.n	801d730 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	7d1b      	ldrb	r3, [r3, #20]
 801d694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d698:	b2da      	uxtb	r2, r3
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d69e:	f7f9 fb03 	bl	8016ca8 <get_fattime>
 801d6a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d6a4:	68ba      	ldr	r2, [r7, #8]
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6aa:	4619      	mov	r1, r3
 801d6ac:	4610      	mov	r0, r2
 801d6ae:	f7fe f843 	bl	801b738 <move_window>
 801d6b2:	4603      	mov	r3, r0
 801d6b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d6b6:	7dfb      	ldrb	r3, [r7, #23]
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d138      	bne.n	801d72e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	330b      	adds	r3, #11
 801d6c6:	781a      	ldrb	r2, [r3, #0]
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	330b      	adds	r3, #11
 801d6cc:	f042 0220 	orr.w	r2, r2, #32
 801d6d0:	b2d2      	uxtb	r2, r2
 801d6d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	6818      	ldr	r0, [r3, #0]
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	689b      	ldr	r3, [r3, #8]
 801d6dc:	461a      	mov	r2, r3
 801d6de:	68f9      	ldr	r1, [r7, #12]
 801d6e0:	f7fe fd50 	bl	801c184 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	f103 021c 	add.w	r2, r3, #28
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	68db      	ldr	r3, [r3, #12]
 801d6ee:	4619      	mov	r1, r3
 801d6f0:	4610      	mov	r0, r2
 801d6f2:	f7fd fdc7 	bl	801b284 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	3316      	adds	r3, #22
 801d6fa:	6939      	ldr	r1, [r7, #16]
 801d6fc:	4618      	mov	r0, r3
 801d6fe:	f7fd fdc1 	bl	801b284 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	3312      	adds	r3, #18
 801d706:	2100      	movs	r1, #0
 801d708:	4618      	mov	r0, r3
 801d70a:	f7fd fda0 	bl	801b24e <st_word>
					fs->wflag = 1;
 801d70e:	68bb      	ldr	r3, [r7, #8]
 801d710:	2201      	movs	r2, #1
 801d712:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d714:	68bb      	ldr	r3, [r7, #8]
 801d716:	4618      	mov	r0, r3
 801d718:	f7fe f83c 	bl	801b794 <sync_fs>
 801d71c:	4603      	mov	r3, r0
 801d71e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	7d1b      	ldrb	r3, [r3, #20]
 801d724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d728:	b2da      	uxtb	r2, r3
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d72e:	7dfb      	ldrb	r3, [r7, #23]
}
 801d730:	4618      	mov	r0, r3
 801d732:	3718      	adds	r7, #24
 801d734:	46bd      	mov	sp, r7
 801d736:	bd80      	pop	{r7, pc}

0801d738 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b084      	sub	sp, #16
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d740:	6878      	ldr	r0, [r7, #4]
 801d742:	f7ff ff7b 	bl	801d63c <f_sync>
 801d746:	4603      	mov	r3, r0
 801d748:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d74a:	7bfb      	ldrb	r3, [r7, #15]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d118      	bne.n	801d782 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	f107 0208 	add.w	r2, r7, #8
 801d756:	4611      	mov	r1, r2
 801d758:	4618      	mov	r0, r3
 801d75a:	f7ff fa81 	bl	801cc60 <validate>
 801d75e:	4603      	mov	r3, r0
 801d760:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d762:	7bfb      	ldrb	r3, [r7, #15]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d10c      	bne.n	801d782 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	691b      	ldr	r3, [r3, #16]
 801d76c:	4618      	mov	r0, r3
 801d76e:	f7fd ff3f 	bl	801b5f0 <dec_lock>
 801d772:	4603      	mov	r3, r0
 801d774:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d776:	7bfb      	ldrb	r3, [r7, #15]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d102      	bne.n	801d782 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	2200      	movs	r2, #0
 801d780:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d782:	7bfb      	ldrb	r3, [r7, #15]
}
 801d784:	4618      	mov	r0, r3
 801d786:	3710      	adds	r7, #16
 801d788:	46bd      	mov	sp, r7
 801d78a:	bd80      	pop	{r7, pc}

0801d78c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801d78c:	b580      	push	{r7, lr}
 801d78e:	b086      	sub	sp, #24
 801d790:	af00      	add	r7, sp, #0
 801d792:	6078      	str	r0, [r7, #4]
 801d794:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d101      	bne.n	801d7a0 <f_opendir+0x14>
 801d79c:	2309      	movs	r3, #9
 801d79e:	e064      	b.n	801d86a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801d7a4:	f107 010c 	add.w	r1, r7, #12
 801d7a8:	463b      	mov	r3, r7
 801d7aa:	2200      	movs	r2, #0
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f7ff f80b 	bl	801c7c8 <find_volume>
 801d7b2:	4603      	mov	r3, r0
 801d7b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d7b6:	7dfb      	ldrb	r3, [r7, #23]
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d14f      	bne.n	801d85c <f_opendir+0xd0>
		obj->fs = fs;
 801d7bc:	68fa      	ldr	r2, [r7, #12]
 801d7be:	693b      	ldr	r3, [r7, #16]
 801d7c0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d7c2:	683b      	ldr	r3, [r7, #0]
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	6878      	ldr	r0, [r7, #4]
 801d7c8:	f7fe fef2 	bl	801c5b0 <follow_path>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801d7d0:	7dfb      	ldrb	r3, [r7, #23]
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d13d      	bne.n	801d852 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d7dc:	b25b      	sxtb	r3, r3
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	db12      	blt.n	801d808 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d7e2:	693b      	ldr	r3, [r7, #16]
 801d7e4:	799b      	ldrb	r3, [r3, #6]
 801d7e6:	f003 0310 	and.w	r3, r3, #16
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d00a      	beq.n	801d804 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d7ee:	68fa      	ldr	r2, [r7, #12]
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	6a1b      	ldr	r3, [r3, #32]
 801d7f4:	4619      	mov	r1, r3
 801d7f6:	4610      	mov	r0, r2
 801d7f8:	f7fe fca5 	bl	801c146 <ld_clust>
 801d7fc:	4602      	mov	r2, r0
 801d7fe:	693b      	ldr	r3, [r7, #16]
 801d800:	609a      	str	r2, [r3, #8]
 801d802:	e001      	b.n	801d808 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801d804:	2305      	movs	r3, #5
 801d806:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801d808:	7dfb      	ldrb	r3, [r7, #23]
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d121      	bne.n	801d852 <f_opendir+0xc6>
				obj->id = fs->id;
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	88da      	ldrh	r2, [r3, #6]
 801d812:	693b      	ldr	r3, [r7, #16]
 801d814:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d816:	2100      	movs	r1, #0
 801d818:	6878      	ldr	r0, [r7, #4]
 801d81a:	f7fe fb0d 	bl	801be38 <dir_sdi>
 801d81e:	4603      	mov	r3, r0
 801d820:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801d822:	7dfb      	ldrb	r3, [r7, #23]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d114      	bne.n	801d852 <f_opendir+0xc6>
					if (obj->sclust) {
 801d828:	693b      	ldr	r3, [r7, #16]
 801d82a:	689b      	ldr	r3, [r3, #8]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d00d      	beq.n	801d84c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d830:	2100      	movs	r1, #0
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7fd fe4e 	bl	801b4d4 <inc_lock>
 801d838:	4602      	mov	r2, r0
 801d83a:	693b      	ldr	r3, [r7, #16]
 801d83c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d83e:	693b      	ldr	r3, [r7, #16]
 801d840:	691b      	ldr	r3, [r3, #16]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d105      	bne.n	801d852 <f_opendir+0xc6>
 801d846:	2312      	movs	r3, #18
 801d848:	75fb      	strb	r3, [r7, #23]
 801d84a:	e002      	b.n	801d852 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d84c:	693b      	ldr	r3, [r7, #16]
 801d84e:	2200      	movs	r2, #0
 801d850:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d852:	7dfb      	ldrb	r3, [r7, #23]
 801d854:	2b04      	cmp	r3, #4
 801d856:	d101      	bne.n	801d85c <f_opendir+0xd0>
 801d858:	2305      	movs	r3, #5
 801d85a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d85c:	7dfb      	ldrb	r3, [r7, #23]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d002      	beq.n	801d868 <f_opendir+0xdc>
 801d862:	693b      	ldr	r3, [r7, #16]
 801d864:	2200      	movs	r2, #0
 801d866:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d868:	7dfb      	ldrb	r3, [r7, #23]
}
 801d86a:	4618      	mov	r0, r3
 801d86c:	3718      	adds	r7, #24
 801d86e:	46bd      	mov	sp, r7
 801d870:	bd80      	pop	{r7, pc}

0801d872 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801d872:	b580      	push	{r7, lr}
 801d874:	b084      	sub	sp, #16
 801d876:	af00      	add	r7, sp, #0
 801d878:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	f107 0208 	add.w	r2, r7, #8
 801d880:	4611      	mov	r1, r2
 801d882:	4618      	mov	r0, r3
 801d884:	f7ff f9ec 	bl	801cc60 <validate>
 801d888:	4603      	mov	r3, r0
 801d88a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d88c:	7bfb      	ldrb	r3, [r7, #15]
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d110      	bne.n	801d8b4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	691b      	ldr	r3, [r3, #16]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d006      	beq.n	801d8a8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	691b      	ldr	r3, [r3, #16]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7fd fea6 	bl	801b5f0 <dec_lock>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801d8a8:	7bfb      	ldrb	r3, [r7, #15]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d102      	bne.n	801d8b4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	2200      	movs	r2, #0
 801d8b2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801d8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	3710      	adds	r7, #16
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	bd80      	pop	{r7, pc}

0801d8be <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d8be:	b580      	push	{r7, lr}
 801d8c0:	b084      	sub	sp, #16
 801d8c2:	af00      	add	r7, sp, #0
 801d8c4:	6078      	str	r0, [r7, #4]
 801d8c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	f107 0208 	add.w	r2, r7, #8
 801d8ce:	4611      	mov	r1, r2
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	f7ff f9c5 	bl	801cc60 <validate>
 801d8d6:	4603      	mov	r3, r0
 801d8d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d8da:	7bfb      	ldrb	r3, [r7, #15]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d126      	bne.n	801d92e <f_readdir+0x70>
		if (!fno) {
 801d8e0:	683b      	ldr	r3, [r7, #0]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d106      	bne.n	801d8f4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801d8e6:	2100      	movs	r1, #0
 801d8e8:	6878      	ldr	r0, [r7, #4]
 801d8ea:	f7fe faa5 	bl	801be38 <dir_sdi>
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	73fb      	strb	r3, [r7, #15]
 801d8f2:	e01c      	b.n	801d92e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801d8f4:	2100      	movs	r1, #0
 801d8f6:	6878      	ldr	r0, [r7, #4]
 801d8f8:	f7fe fc64 	bl	801c1c4 <dir_read>
 801d8fc:	4603      	mov	r3, r0
 801d8fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801d900:	7bfb      	ldrb	r3, [r7, #15]
 801d902:	2b04      	cmp	r3, #4
 801d904:	d101      	bne.n	801d90a <f_readdir+0x4c>
 801d906:	2300      	movs	r3, #0
 801d908:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801d90a:	7bfb      	ldrb	r3, [r7, #15]
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d10e      	bne.n	801d92e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801d910:	6839      	ldr	r1, [r7, #0]
 801d912:	6878      	ldr	r0, [r7, #4]
 801d914:	f7fe fd58 	bl	801c3c8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801d918:	2100      	movs	r1, #0
 801d91a:	6878      	ldr	r0, [r7, #4]
 801d91c:	f7fe fb07 	bl	801bf2e <dir_next>
 801d920:	4603      	mov	r3, r0
 801d922:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801d924:	7bfb      	ldrb	r3, [r7, #15]
 801d926:	2b04      	cmp	r3, #4
 801d928:	d101      	bne.n	801d92e <f_readdir+0x70>
 801d92a:	2300      	movs	r3, #0
 801d92c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801d92e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d930:	4618      	mov	r0, r3
 801d932:	3710      	adds	r7, #16
 801d934:	46bd      	mov	sp, r7
 801d936:	bd80      	pop	{r7, pc}

0801d938 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b090      	sub	sp, #64	; 0x40
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]
 801d940:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801d942:	f107 010c 	add.w	r1, r7, #12
 801d946:	1d3b      	adds	r3, r7, #4
 801d948:	2200      	movs	r2, #0
 801d94a:	4618      	mov	r0, r3
 801d94c:	f7fe ff3c 	bl	801c7c8 <find_volume>
 801d950:	4603      	mov	r3, r0
 801d952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801d956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d11f      	bne.n	801d99e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d95e:	687a      	ldr	r2, [r7, #4]
 801d960:	f107 030c 	add.w	r3, r7, #12
 801d964:	4611      	mov	r1, r2
 801d966:	4618      	mov	r0, r3
 801d968:	f7fe fe22 	bl	801c5b0 <follow_path>
 801d96c:	4603      	mov	r3, r0
 801d96e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801d972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d976:	2b00      	cmp	r3, #0
 801d978:	d111      	bne.n	801d99e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801d97a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801d97e:	b25b      	sxtb	r3, r3
 801d980:	2b00      	cmp	r3, #0
 801d982:	da03      	bge.n	801d98c <f_stat+0x54>
				res = FR_INVALID_NAME;
 801d984:	2306      	movs	r3, #6
 801d986:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d98a:	e008      	b.n	801d99e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801d98c:	683b      	ldr	r3, [r7, #0]
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d005      	beq.n	801d99e <f_stat+0x66>
 801d992:	f107 030c 	add.w	r3, r7, #12
 801d996:	6839      	ldr	r1, [r7, #0]
 801d998:	4618      	mov	r0, r3
 801d99a:	f7fe fd15 	bl	801c3c8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801d99e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801d9a2:	4618      	mov	r0, r3
 801d9a4:	3740      	adds	r7, #64	; 0x40
 801d9a6:	46bd      	mov	sp, r7
 801d9a8:	bd80      	pop	{r7, pc}

0801d9aa <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d9aa:	b580      	push	{r7, lr}
 801d9ac:	b09e      	sub	sp, #120	; 0x78
 801d9ae:	af00      	add	r7, sp, #0
 801d9b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d9b6:	f107 010c 	add.w	r1, r7, #12
 801d9ba:	1d3b      	adds	r3, r7, #4
 801d9bc:	2202      	movs	r2, #2
 801d9be:	4618      	mov	r0, r3
 801d9c0:	f7fe ff02 	bl	801c7c8 <find_volume>
 801d9c4:	4603      	mov	r3, r0
 801d9c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801d9ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	f040 808e 	bne.w	801daf4 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d9d8:	687a      	ldr	r2, [r7, #4]
 801d9da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d9de:	4611      	mov	r1, r2
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f7fe fde5 	bl	801c5b0 <follow_path>
 801d9e6:	4603      	mov	r3, r0
 801d9e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d9ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d108      	bne.n	801da06 <f_unlink+0x5c>
 801d9f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d9f8:	2102      	movs	r1, #2
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7fd fcec 	bl	801b3d8 <chk_lock>
 801da00:	4603      	mov	r3, r0
 801da02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801da06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d172      	bne.n	801daf4 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801da0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801da12:	b25b      	sxtb	r3, r3
 801da14:	2b00      	cmp	r3, #0
 801da16:	da03      	bge.n	801da20 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801da18:	2306      	movs	r3, #6
 801da1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801da1e:	e008      	b.n	801da32 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801da20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801da24:	f003 0301 	and.w	r3, r3, #1
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d002      	beq.n	801da32 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801da2c:	2307      	movs	r3, #7
 801da2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801da32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801da36:	2b00      	cmp	r3, #0
 801da38:	d134      	bne.n	801daa4 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801da3e:	4611      	mov	r1, r2
 801da40:	4618      	mov	r0, r3
 801da42:	f7fe fb80 	bl	801c146 <ld_clust>
 801da46:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801da48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801da4c:	f003 0310 	and.w	r3, r3, #16
 801da50:	2b00      	cmp	r3, #0
 801da52:	d027      	beq.n	801daa4 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801da58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da5a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801da5c:	f107 0310 	add.w	r3, r7, #16
 801da60:	2100      	movs	r1, #0
 801da62:	4618      	mov	r0, r3
 801da64:	f7fe f9e8 	bl	801be38 <dir_sdi>
 801da68:	4603      	mov	r3, r0
 801da6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801da6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801da72:	2b00      	cmp	r3, #0
 801da74:	d116      	bne.n	801daa4 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801da76:	f107 0310 	add.w	r3, r7, #16
 801da7a:	2100      	movs	r1, #0
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7fe fba1 	bl	801c1c4 <dir_read>
 801da82:	4603      	mov	r3, r0
 801da84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801da88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d102      	bne.n	801da96 <f_unlink+0xec>
 801da90:	2307      	movs	r3, #7
 801da92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801da96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801da9a:	2b04      	cmp	r3, #4
 801da9c:	d102      	bne.n	801daa4 <f_unlink+0xfa>
 801da9e:	2300      	movs	r3, #0
 801daa0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801daa4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d123      	bne.n	801daf4 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801daac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dab0:	4618      	mov	r0, r3
 801dab2:	f7fe fc6b 	bl	801c38c <dir_remove>
 801dab6:	4603      	mov	r3, r0
 801dab8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801dabc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d10c      	bne.n	801dade <f_unlink+0x134>
 801dac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d009      	beq.n	801dade <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801daca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dace:	2200      	movs	r2, #0
 801dad0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801dad2:	4618      	mov	r0, r3
 801dad4:	f7fe f87f 	bl	801bbd6 <remove_chain>
 801dad8:	4603      	mov	r3, r0
 801dada:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801dade:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d106      	bne.n	801daf4 <f_unlink+0x14a>
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	4618      	mov	r0, r3
 801daea:	f7fd fe53 	bl	801b794 <sync_fs>
 801daee:	4603      	mov	r3, r0
 801daf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801daf4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801daf8:	4618      	mov	r0, r3
 801dafa:	3778      	adds	r7, #120	; 0x78
 801dafc:	46bd      	mov	sp, r7
 801dafe:	bd80      	pop	{r7, pc}

0801db00 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801db00:	b580      	push	{r7, lr}
 801db02:	b088      	sub	sp, #32
 801db04:	af00      	add	r7, sp, #0
 801db06:	60f8      	str	r0, [r7, #12]
 801db08:	60b9      	str	r1, [r7, #8]
 801db0a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801db0c:	2300      	movs	r3, #0
 801db0e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801db14:	e01b      	b.n	801db4e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801db16:	f107 0310 	add.w	r3, r7, #16
 801db1a:	f107 0114 	add.w	r1, r7, #20
 801db1e:	2201      	movs	r2, #1
 801db20:	6878      	ldr	r0, [r7, #4]
 801db22:	f7ff fad7 	bl	801d0d4 <f_read>
		if (rc != 1) break;
 801db26:	693b      	ldr	r3, [r7, #16]
 801db28:	2b01      	cmp	r3, #1
 801db2a:	d116      	bne.n	801db5a <f_gets+0x5a>
		c = s[0];
 801db2c:	7d3b      	ldrb	r3, [r7, #20]
 801db2e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 801db30:	7dfb      	ldrb	r3, [r7, #23]
 801db32:	2b0d      	cmp	r3, #13
 801db34:	d100      	bne.n	801db38 <f_gets+0x38>
 801db36:	e00a      	b.n	801db4e <f_gets+0x4e>
		*p++ = c;
 801db38:	69bb      	ldr	r3, [r7, #24]
 801db3a:	1c5a      	adds	r2, r3, #1
 801db3c:	61ba      	str	r2, [r7, #24]
 801db3e:	7dfa      	ldrb	r2, [r7, #23]
 801db40:	701a      	strb	r2, [r3, #0]
		n++;
 801db42:	69fb      	ldr	r3, [r7, #28]
 801db44:	3301      	adds	r3, #1
 801db46:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801db48:	7dfb      	ldrb	r3, [r7, #23]
 801db4a:	2b0a      	cmp	r3, #10
 801db4c:	d007      	beq.n	801db5e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801db4e:	68bb      	ldr	r3, [r7, #8]
 801db50:	3b01      	subs	r3, #1
 801db52:	69fa      	ldr	r2, [r7, #28]
 801db54:	429a      	cmp	r2, r3
 801db56:	dbde      	blt.n	801db16 <f_gets+0x16>
 801db58:	e002      	b.n	801db60 <f_gets+0x60>
		if (rc != 1) break;
 801db5a:	bf00      	nop
 801db5c:	e000      	b.n	801db60 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801db5e:	bf00      	nop
	}
	*p = 0;
 801db60:	69bb      	ldr	r3, [r7, #24]
 801db62:	2200      	movs	r2, #0
 801db64:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801db66:	69fb      	ldr	r3, [r7, #28]
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d001      	beq.n	801db70 <f_gets+0x70>
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	e000      	b.n	801db72 <f_gets+0x72>
 801db70:	2300      	movs	r3, #0
}
 801db72:	4618      	mov	r0, r3
 801db74:	3720      	adds	r7, #32
 801db76:	46bd      	mov	sp, r7
 801db78:	bd80      	pop	{r7, pc}
	...

0801db7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801db7c:	b480      	push	{r7}
 801db7e:	b087      	sub	sp, #28
 801db80:	af00      	add	r7, sp, #0
 801db82:	60f8      	str	r0, [r7, #12]
 801db84:	60b9      	str	r1, [r7, #8]
 801db86:	4613      	mov	r3, r2
 801db88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801db8a:	2301      	movs	r3, #1
 801db8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801db8e:	2300      	movs	r3, #0
 801db90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801db92:	4b1f      	ldr	r3, [pc, #124]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801db94:	7a5b      	ldrb	r3, [r3, #9]
 801db96:	b2db      	uxtb	r3, r3
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d131      	bne.n	801dc00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801db9c:	4b1c      	ldr	r3, [pc, #112]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801db9e:	7a5b      	ldrb	r3, [r3, #9]
 801dba0:	b2db      	uxtb	r3, r3
 801dba2:	461a      	mov	r2, r3
 801dba4:	4b1a      	ldr	r3, [pc, #104]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dba6:	2100      	movs	r1, #0
 801dba8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801dbaa:	4b19      	ldr	r3, [pc, #100]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dbac:	7a5b      	ldrb	r3, [r3, #9]
 801dbae:	b2db      	uxtb	r3, r3
 801dbb0:	4a17      	ldr	r2, [pc, #92]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dbb2:	009b      	lsls	r3, r3, #2
 801dbb4:	4413      	add	r3, r2
 801dbb6:	68fa      	ldr	r2, [r7, #12]
 801dbb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801dbba:	4b15      	ldr	r3, [pc, #84]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dbbc:	7a5b      	ldrb	r3, [r3, #9]
 801dbbe:	b2db      	uxtb	r3, r3
 801dbc0:	461a      	mov	r2, r3
 801dbc2:	4b13      	ldr	r3, [pc, #76]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dbc4:	4413      	add	r3, r2
 801dbc6:	79fa      	ldrb	r2, [r7, #7]
 801dbc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801dbca:	4b11      	ldr	r3, [pc, #68]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dbcc:	7a5b      	ldrb	r3, [r3, #9]
 801dbce:	b2db      	uxtb	r3, r3
 801dbd0:	1c5a      	adds	r2, r3, #1
 801dbd2:	b2d1      	uxtb	r1, r2
 801dbd4:	4a0e      	ldr	r2, [pc, #56]	; (801dc10 <FATFS_LinkDriverEx+0x94>)
 801dbd6:	7251      	strb	r1, [r2, #9]
 801dbd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801dbda:	7dbb      	ldrb	r3, [r7, #22]
 801dbdc:	3330      	adds	r3, #48	; 0x30
 801dbde:	b2da      	uxtb	r2, r3
 801dbe0:	68bb      	ldr	r3, [r7, #8]
 801dbe2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dbe4:	68bb      	ldr	r3, [r7, #8]
 801dbe6:	3301      	adds	r3, #1
 801dbe8:	223a      	movs	r2, #58	; 0x3a
 801dbea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dbec:	68bb      	ldr	r3, [r7, #8]
 801dbee:	3302      	adds	r3, #2
 801dbf0:	222f      	movs	r2, #47	; 0x2f
 801dbf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dbf4:	68bb      	ldr	r3, [r7, #8]
 801dbf6:	3303      	adds	r3, #3
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dc00:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc02:	4618      	mov	r0, r3
 801dc04:	371c      	adds	r7, #28
 801dc06:	46bd      	mov	sp, r7
 801dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc0c:	4770      	bx	lr
 801dc0e:	bf00      	nop
 801dc10:	2000179c 	.word	0x2000179c

0801dc14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dc14:	b580      	push	{r7, lr}
 801dc16:	b082      	sub	sp, #8
 801dc18:	af00      	add	r7, sp, #0
 801dc1a:	6078      	str	r0, [r7, #4]
 801dc1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dc1e:	2200      	movs	r2, #0
 801dc20:	6839      	ldr	r1, [r7, #0]
 801dc22:	6878      	ldr	r0, [r7, #4]
 801dc24:	f7ff ffaa 	bl	801db7c <FATFS_LinkDriverEx>
 801dc28:	4603      	mov	r3, r0
}
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	3708      	adds	r7, #8
 801dc2e:	46bd      	mov	sp, r7
 801dc30:	bd80      	pop	{r7, pc}
	...

0801dc34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801dc34:	b580      	push	{r7, lr}
 801dc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801dc38:	2201      	movs	r2, #1
 801dc3a:	4912      	ldr	r1, [pc, #72]	; (801dc84 <MX_USB_DEVICE_Init+0x50>)
 801dc3c:	4812      	ldr	r0, [pc, #72]	; (801dc88 <MX_USB_DEVICE_Init+0x54>)
 801dc3e:	f7f9 ff29 	bl	8017a94 <USBD_Init>
 801dc42:	4603      	mov	r3, r0
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d001      	beq.n	801dc4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801dc48:	f7ed fc18 	bl	800b47c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801dc4c:	490f      	ldr	r1, [pc, #60]	; (801dc8c <MX_USB_DEVICE_Init+0x58>)
 801dc4e:	480e      	ldr	r0, [pc, #56]	; (801dc88 <MX_USB_DEVICE_Init+0x54>)
 801dc50:	f7f9 ff50 	bl	8017af4 <USBD_RegisterClass>
 801dc54:	4603      	mov	r3, r0
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d001      	beq.n	801dc5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801dc5a:	f7ed fc0f 	bl	800b47c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801dc5e:	490c      	ldr	r1, [pc, #48]	; (801dc90 <MX_USB_DEVICE_Init+0x5c>)
 801dc60:	4809      	ldr	r0, [pc, #36]	; (801dc88 <MX_USB_DEVICE_Init+0x54>)
 801dc62:	f7f9 fe47 	bl	80178f4 <USBD_CDC_RegisterInterface>
 801dc66:	4603      	mov	r3, r0
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d001      	beq.n	801dc70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801dc6c:	f7ed fc06 	bl	800b47c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801dc70:	4805      	ldr	r0, [pc, #20]	; (801dc88 <MX_USB_DEVICE_Init+0x54>)
 801dc72:	f7f9 ff75 	bl	8017b60 <USBD_Start>
 801dc76:	4603      	mov	r3, r0
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d001      	beq.n	801dc80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801dc7c:	f7ed fbfe 	bl	800b47c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801dc80:	bf00      	nop
 801dc82:	bd80      	pop	{r7, pc}
 801dc84:	200000e4 	.word	0x200000e4
 801dc88:	200017a8 	.word	0x200017a8
 801dc8c:	20000030 	.word	0x20000030
 801dc90:	200000d0 	.word	0x200000d0

0801dc94 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801dc94:	b580      	push	{r7, lr}
 801dc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801dc98:	2200      	movs	r2, #0
 801dc9a:	4905      	ldr	r1, [pc, #20]	; (801dcb0 <CDC_Init_HS+0x1c>)
 801dc9c:	4805      	ldr	r0, [pc, #20]	; (801dcb4 <CDC_Init_HS+0x20>)
 801dc9e:	f7f9 fe43 	bl	8017928 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801dca2:	4905      	ldr	r1, [pc, #20]	; (801dcb8 <CDC_Init_HS+0x24>)
 801dca4:	4803      	ldr	r0, [pc, #12]	; (801dcb4 <CDC_Init_HS+0x20>)
 801dca6:	f7f9 fe61 	bl	801796c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801dcaa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801dcac:	4618      	mov	r0, r3
 801dcae:	bd80      	pop	{r7, pc}
 801dcb0:	20002284 	.word	0x20002284
 801dcb4:	200017a8 	.word	0x200017a8
 801dcb8:	20001a84 	.word	0x20001a84

0801dcbc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801dcbc:	b480      	push	{r7}
 801dcbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 801dcc0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcca:	4770      	bx	lr

0801dccc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801dccc:	b480      	push	{r7}
 801dcce:	b085      	sub	sp, #20
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	6039      	str	r1, [r7, #0]
 801dcd6:	71fb      	strb	r3, [r7, #7]
 801dcd8:	4613      	mov	r3, r2
 801dcda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*)pbuf;
 801dcdc:	683b      	ldr	r3, [r7, #0]
 801dcde:	60fb      	str	r3, [r7, #12]
	switch(cmd)
 801dce0:	79fb      	ldrb	r3, [r7, #7]
 801dce2:	2b23      	cmp	r3, #35	; 0x23
 801dce4:	d858      	bhi.n	801dd98 <CDC_Control_HS+0xcc>
 801dce6:	a201      	add	r2, pc, #4	; (adr r2, 801dcec <CDC_Control_HS+0x20>)
 801dce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcec:	0801dd99 	.word	0x0801dd99
 801dcf0:	0801dd99 	.word	0x0801dd99
 801dcf4:	0801dd99 	.word	0x0801dd99
 801dcf8:	0801dd99 	.word	0x0801dd99
 801dcfc:	0801dd99 	.word	0x0801dd99
 801dd00:	0801dd99 	.word	0x0801dd99
 801dd04:	0801dd99 	.word	0x0801dd99
 801dd08:	0801dd99 	.word	0x0801dd99
 801dd0c:	0801dd99 	.word	0x0801dd99
 801dd10:	0801dd99 	.word	0x0801dd99
 801dd14:	0801dd99 	.word	0x0801dd99
 801dd18:	0801dd99 	.word	0x0801dd99
 801dd1c:	0801dd99 	.word	0x0801dd99
 801dd20:	0801dd99 	.word	0x0801dd99
 801dd24:	0801dd99 	.word	0x0801dd99
 801dd28:	0801dd99 	.word	0x0801dd99
 801dd2c:	0801dd99 	.word	0x0801dd99
 801dd30:	0801dd99 	.word	0x0801dd99
 801dd34:	0801dd99 	.word	0x0801dd99
 801dd38:	0801dd99 	.word	0x0801dd99
 801dd3c:	0801dd99 	.word	0x0801dd99
 801dd40:	0801dd99 	.word	0x0801dd99
 801dd44:	0801dd99 	.word	0x0801dd99
 801dd48:	0801dd99 	.word	0x0801dd99
 801dd4c:	0801dd99 	.word	0x0801dd99
 801dd50:	0801dd99 	.word	0x0801dd99
 801dd54:	0801dd99 	.word	0x0801dd99
 801dd58:	0801dd99 	.word	0x0801dd99
 801dd5c:	0801dd99 	.word	0x0801dd99
 801dd60:	0801dd99 	.word	0x0801dd99
 801dd64:	0801dd99 	.word	0x0801dd99
 801dd68:	0801dd99 	.word	0x0801dd99
 801dd6c:	0801dd99 	.word	0x0801dd99
 801dd70:	0801dd99 	.word	0x0801dd99
 801dd74:	0801dd7d 	.word	0x0801dd7d
 801dd78:	0801dd99 	.word	0x0801dd99
	case CDC_GET_LINE_CODING:

		break;

	case CDC_SET_CONTROL_LINE_STATE:
		if((req->wValue & 0x0001) != 0)
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	885b      	ldrh	r3, [r3, #2]
 801dd80:	f003 0301 	and.w	r3, r3, #1
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d003      	beq.n	801dd90 <CDC_Control_HS+0xc4>
			usb_connected = 1;
 801dd88:	4b07      	ldr	r3, [pc, #28]	; (801dda8 <CDC_Control_HS+0xdc>)
 801dd8a:	2201      	movs	r2, #1
 801dd8c:	701a      	strb	r2, [r3, #0]
		else
			usb_connected = 0;
		break;
 801dd8e:	e004      	b.n	801dd9a <CDC_Control_HS+0xce>
			usb_connected = 0;
 801dd90:	4b05      	ldr	r3, [pc, #20]	; (801dda8 <CDC_Control_HS+0xdc>)
 801dd92:	2200      	movs	r2, #0
 801dd94:	701a      	strb	r2, [r3, #0]
		break;
 801dd96:	e000      	b.n	801dd9a <CDC_Control_HS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 801dd98:	bf00      	nop
	}

	return (USBD_OK);
 801dd9a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	3714      	adds	r7, #20
 801dda0:	46bd      	mov	sp, r7
 801dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dda6:	4770      	bx	lr
 801dda8:	200016ef 	.word	0x200016ef

0801ddac <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801ddac:	b580      	push	{r7, lr}
 801ddae:	b082      	sub	sp, #8
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
 801ddb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	memset(usb_rx_buffer, 0x00, 1024);
 801ddb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ddba:	2100      	movs	r1, #0
 801ddbc:	480e      	ldr	r0, [pc, #56]	; (801ddf8 <CDC_Receive_HS+0x4c>)
 801ddbe:	f001 fa9f 	bl	801f300 <memset>
	memcpy(usb_rx_buffer, Buf, *Len);
 801ddc2:	683b      	ldr	r3, [r7, #0]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	461a      	mov	r2, r3
 801ddc8:	6879      	ldr	r1, [r7, #4]
 801ddca:	480b      	ldr	r0, [pc, #44]	; (801ddf8 <CDC_Receive_HS+0x4c>)
 801ddcc:	f001 fa8a 	bl	801f2e4 <memcpy>
	usb_rx_length = *Len;
 801ddd0:	683b      	ldr	r3, [r7, #0]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	b29a      	uxth	r2, r3
 801ddd6:	4b09      	ldr	r3, [pc, #36]	; (801ddfc <CDC_Receive_HS+0x50>)
 801ddd8:	801a      	strh	r2, [r3, #0]
	usb_rx_ready = 1;
 801ddda:	4b09      	ldr	r3, [pc, #36]	; (801de00 <CDC_Receive_HS+0x54>)
 801dddc:	2201      	movs	r2, #1
 801ddde:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801dde0:	6879      	ldr	r1, [r7, #4]
 801dde2:	4808      	ldr	r0, [pc, #32]	; (801de04 <CDC_Receive_HS+0x58>)
 801dde4:	f7f9 fdc2 	bl	801796c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801dde8:	4806      	ldr	r0, [pc, #24]	; (801de04 <CDC_Receive_HS+0x58>)
 801ddea:	f7f9 fe1d 	bl	8017a28 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 801ddee:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	3708      	adds	r7, #8
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bd80      	pop	{r7, pc}
 801ddf8:	200012ec 	.word	0x200012ec
 801ddfc:	200016ec 	.word	0x200016ec
 801de00:	200016ee 	.word	0x200016ee
 801de04:	200017a8 	.word	0x200017a8

0801de08 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b084      	sub	sp, #16
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
 801de10:	460b      	mov	r3, r1
 801de12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801de14:	2300      	movs	r3, #0
 801de16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801de18:	4b0d      	ldr	r3, [pc, #52]	; (801de50 <CDC_Transmit_HS+0x48>)
 801de1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801de1e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 801de20:	68bb      	ldr	r3, [r7, #8]
 801de22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801de26:	2b00      	cmp	r3, #0
 801de28:	d001      	beq.n	801de2e <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 801de2a:	2301      	movs	r3, #1
 801de2c:	e00b      	b.n	801de46 <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801de2e:	887b      	ldrh	r3, [r7, #2]
 801de30:	461a      	mov	r2, r3
 801de32:	6879      	ldr	r1, [r7, #4]
 801de34:	4806      	ldr	r0, [pc, #24]	; (801de50 <CDC_Transmit_HS+0x48>)
 801de36:	f7f9 fd77 	bl	8017928 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801de3a:	4805      	ldr	r0, [pc, #20]	; (801de50 <CDC_Transmit_HS+0x48>)
 801de3c:	f7f9 fdb4 	bl	80179a8 <USBD_CDC_TransmitPacket>
 801de40:	4603      	mov	r3, r0
 801de42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801de44:	7bfb      	ldrb	r3, [r7, #15]
}
 801de46:	4618      	mov	r0, r3
 801de48:	3710      	adds	r7, #16
 801de4a:	46bd      	mov	sp, r7
 801de4c:	bd80      	pop	{r7, pc}
 801de4e:	bf00      	nop
 801de50:	200017a8 	.word	0x200017a8

0801de54 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801de54:	b480      	push	{r7}
 801de56:	b087      	sub	sp, #28
 801de58:	af00      	add	r7, sp, #0
 801de5a:	60f8      	str	r0, [r7, #12]
 801de5c:	60b9      	str	r1, [r7, #8]
 801de5e:	4613      	mov	r3, r2
 801de60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801de62:	2300      	movs	r3, #0
 801de64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801de66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801de6a:	4618      	mov	r0, r3
 801de6c:	371c      	adds	r7, #28
 801de6e:	46bd      	mov	sp, r7
 801de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de74:	4770      	bx	lr
	...

0801de78 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de78:	b480      	push	{r7}
 801de7a:	b083      	sub	sp, #12
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	4603      	mov	r3, r0
 801de80:	6039      	str	r1, [r7, #0]
 801de82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801de84:	683b      	ldr	r3, [r7, #0]
 801de86:	2212      	movs	r2, #18
 801de88:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801de8a:	4b03      	ldr	r3, [pc, #12]	; (801de98 <USBD_HS_DeviceDescriptor+0x20>)
}
 801de8c:	4618      	mov	r0, r3
 801de8e:	370c      	adds	r7, #12
 801de90:	46bd      	mov	sp, r7
 801de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de96:	4770      	bx	lr
 801de98:	20000104 	.word	0x20000104

0801de9c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de9c:	b480      	push	{r7}
 801de9e:	b083      	sub	sp, #12
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	4603      	mov	r3, r0
 801dea4:	6039      	str	r1, [r7, #0]
 801dea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801dea8:	683b      	ldr	r3, [r7, #0]
 801deaa:	2204      	movs	r2, #4
 801deac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801deae:	4b03      	ldr	r3, [pc, #12]	; (801debc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801deb0:	4618      	mov	r0, r3
 801deb2:	370c      	adds	r7, #12
 801deb4:	46bd      	mov	sp, r7
 801deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deba:	4770      	bx	lr
 801debc:	20000124 	.word	0x20000124

0801dec0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dec0:	b580      	push	{r7, lr}
 801dec2:	b082      	sub	sp, #8
 801dec4:	af00      	add	r7, sp, #0
 801dec6:	4603      	mov	r3, r0
 801dec8:	6039      	str	r1, [r7, #0]
 801deca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801decc:	79fb      	ldrb	r3, [r7, #7]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d105      	bne.n	801dede <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801ded2:	683a      	ldr	r2, [r7, #0]
 801ded4:	4907      	ldr	r1, [pc, #28]	; (801def4 <USBD_HS_ProductStrDescriptor+0x34>)
 801ded6:	4808      	ldr	r0, [pc, #32]	; (801def8 <USBD_HS_ProductStrDescriptor+0x38>)
 801ded8:	f7fb f818 	bl	8018f0c <USBD_GetString>
 801dedc:	e004      	b.n	801dee8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801dede:	683a      	ldr	r2, [r7, #0]
 801dee0:	4904      	ldr	r1, [pc, #16]	; (801def4 <USBD_HS_ProductStrDescriptor+0x34>)
 801dee2:	4805      	ldr	r0, [pc, #20]	; (801def8 <USBD_HS_ProductStrDescriptor+0x38>)
 801dee4:	f7fb f812 	bl	8018f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801dee8:	4b02      	ldr	r3, [pc, #8]	; (801def4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801deea:	4618      	mov	r0, r3
 801deec:	3708      	adds	r7, #8
 801deee:	46bd      	mov	sp, r7
 801def0:	bd80      	pop	{r7, pc}
 801def2:	bf00      	nop
 801def4:	20002a84 	.word	0x20002a84
 801def8:	08025c5c 	.word	0x08025c5c

0801defc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b082      	sub	sp, #8
 801df00:	af00      	add	r7, sp, #0
 801df02:	4603      	mov	r3, r0
 801df04:	6039      	str	r1, [r7, #0]
 801df06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801df08:	683a      	ldr	r2, [r7, #0]
 801df0a:	4904      	ldr	r1, [pc, #16]	; (801df1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801df0c:	4804      	ldr	r0, [pc, #16]	; (801df20 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801df0e:	f7fa fffd 	bl	8018f0c <USBD_GetString>
  return USBD_StrDesc;
 801df12:	4b02      	ldr	r3, [pc, #8]	; (801df1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801df14:	4618      	mov	r0, r3
 801df16:	3708      	adds	r7, #8
 801df18:	46bd      	mov	sp, r7
 801df1a:	bd80      	pop	{r7, pc}
 801df1c:	20002a84 	.word	0x20002a84
 801df20:	08025c74 	.word	0x08025c74

0801df24 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b082      	sub	sp, #8
 801df28:	af00      	add	r7, sp, #0
 801df2a:	4603      	mov	r3, r0
 801df2c:	6039      	str	r1, [r7, #0]
 801df2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801df30:	683b      	ldr	r3, [r7, #0]
 801df32:	221a      	movs	r2, #26
 801df34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801df36:	f000 f855 	bl	801dfe4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801df3a:	4b02      	ldr	r3, [pc, #8]	; (801df44 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801df3c:	4618      	mov	r0, r3
 801df3e:	3708      	adds	r7, #8
 801df40:	46bd      	mov	sp, r7
 801df42:	bd80      	pop	{r7, pc}
 801df44:	20000128 	.word	0x20000128

0801df48 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801df48:	b580      	push	{r7, lr}
 801df4a:	b082      	sub	sp, #8
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	4603      	mov	r3, r0
 801df50:	6039      	str	r1, [r7, #0]
 801df52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801df54:	79fb      	ldrb	r3, [r7, #7]
 801df56:	2b00      	cmp	r3, #0
 801df58:	d105      	bne.n	801df66 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801df5a:	683a      	ldr	r2, [r7, #0]
 801df5c:	4907      	ldr	r1, [pc, #28]	; (801df7c <USBD_HS_ConfigStrDescriptor+0x34>)
 801df5e:	4808      	ldr	r0, [pc, #32]	; (801df80 <USBD_HS_ConfigStrDescriptor+0x38>)
 801df60:	f7fa ffd4 	bl	8018f0c <USBD_GetString>
 801df64:	e004      	b.n	801df70 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801df66:	683a      	ldr	r2, [r7, #0]
 801df68:	4904      	ldr	r1, [pc, #16]	; (801df7c <USBD_HS_ConfigStrDescriptor+0x34>)
 801df6a:	4805      	ldr	r0, [pc, #20]	; (801df80 <USBD_HS_ConfigStrDescriptor+0x38>)
 801df6c:	f7fa ffce 	bl	8018f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801df70:	4b02      	ldr	r3, [pc, #8]	; (801df7c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801df72:	4618      	mov	r0, r3
 801df74:	3708      	adds	r7, #8
 801df76:	46bd      	mov	sp, r7
 801df78:	bd80      	pop	{r7, pc}
 801df7a:	bf00      	nop
 801df7c:	20002a84 	.word	0x20002a84
 801df80:	08025c88 	.word	0x08025c88

0801df84 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801df84:	b580      	push	{r7, lr}
 801df86:	b082      	sub	sp, #8
 801df88:	af00      	add	r7, sp, #0
 801df8a:	4603      	mov	r3, r0
 801df8c:	6039      	str	r1, [r7, #0]
 801df8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801df90:	79fb      	ldrb	r3, [r7, #7]
 801df92:	2b00      	cmp	r3, #0
 801df94:	d105      	bne.n	801dfa2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801df96:	683a      	ldr	r2, [r7, #0]
 801df98:	4907      	ldr	r1, [pc, #28]	; (801dfb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801df9a:	4808      	ldr	r0, [pc, #32]	; (801dfbc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801df9c:	f7fa ffb6 	bl	8018f0c <USBD_GetString>
 801dfa0:	e004      	b.n	801dfac <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801dfa2:	683a      	ldr	r2, [r7, #0]
 801dfa4:	4904      	ldr	r1, [pc, #16]	; (801dfb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801dfa6:	4805      	ldr	r0, [pc, #20]	; (801dfbc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801dfa8:	f7fa ffb0 	bl	8018f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801dfac:	4b02      	ldr	r3, [pc, #8]	; (801dfb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801dfae:	4618      	mov	r0, r3
 801dfb0:	3708      	adds	r7, #8
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	bd80      	pop	{r7, pc}
 801dfb6:	bf00      	nop
 801dfb8:	20002a84 	.word	0x20002a84
 801dfbc:	08025c94 	.word	0x08025c94

0801dfc0 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dfc0:	b480      	push	{r7}
 801dfc2:	b083      	sub	sp, #12
 801dfc4:	af00      	add	r7, sp, #0
 801dfc6:	4603      	mov	r3, r0
 801dfc8:	6039      	str	r1, [r7, #0]
 801dfca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 801dfcc:	683b      	ldr	r3, [r7, #0]
 801dfce:	220c      	movs	r2, #12
 801dfd0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 801dfd2:	4b03      	ldr	r3, [pc, #12]	; (801dfe0 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	370c      	adds	r7, #12
 801dfd8:	46bd      	mov	sp, r7
 801dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfde:	4770      	bx	lr
 801dfe0:	20000118 	.word	0x20000118

0801dfe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801dfe4:	b580      	push	{r7, lr}
 801dfe6:	b084      	sub	sp, #16
 801dfe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801dfea:	4b0f      	ldr	r3, [pc, #60]	; (801e028 <Get_SerialNum+0x44>)
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801dff0:	4b0e      	ldr	r3, [pc, #56]	; (801e02c <Get_SerialNum+0x48>)
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dff6:	4b0e      	ldr	r3, [pc, #56]	; (801e030 <Get_SerialNum+0x4c>)
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dffc:	68fa      	ldr	r2, [r7, #12]
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	4413      	add	r3, r2
 801e002:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d009      	beq.n	801e01e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801e00a:	2208      	movs	r2, #8
 801e00c:	4909      	ldr	r1, [pc, #36]	; (801e034 <Get_SerialNum+0x50>)
 801e00e:	68f8      	ldr	r0, [r7, #12]
 801e010:	f000 f814 	bl	801e03c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801e014:	2204      	movs	r2, #4
 801e016:	4908      	ldr	r1, [pc, #32]	; (801e038 <Get_SerialNum+0x54>)
 801e018:	68b8      	ldr	r0, [r7, #8]
 801e01a:	f000 f80f 	bl	801e03c <IntToUnicode>
  }
}
 801e01e:	bf00      	nop
 801e020:	3710      	adds	r7, #16
 801e022:	46bd      	mov	sp, r7
 801e024:	bd80      	pop	{r7, pc}
 801e026:	bf00      	nop
 801e028:	1ff0f420 	.word	0x1ff0f420
 801e02c:	1ff0f424 	.word	0x1ff0f424
 801e030:	1ff0f428 	.word	0x1ff0f428
 801e034:	2000012a 	.word	0x2000012a
 801e038:	2000013a 	.word	0x2000013a

0801e03c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801e03c:	b480      	push	{r7}
 801e03e:	b087      	sub	sp, #28
 801e040:	af00      	add	r7, sp, #0
 801e042:	60f8      	str	r0, [r7, #12]
 801e044:	60b9      	str	r1, [r7, #8]
 801e046:	4613      	mov	r3, r2
 801e048:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801e04a:	2300      	movs	r3, #0
 801e04c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801e04e:	2300      	movs	r3, #0
 801e050:	75fb      	strb	r3, [r7, #23]
 801e052:	e027      	b.n	801e0a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	0f1b      	lsrs	r3, r3, #28
 801e058:	2b09      	cmp	r3, #9
 801e05a:	d80b      	bhi.n	801e074 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	0f1b      	lsrs	r3, r3, #28
 801e060:	b2da      	uxtb	r2, r3
 801e062:	7dfb      	ldrb	r3, [r7, #23]
 801e064:	005b      	lsls	r3, r3, #1
 801e066:	4619      	mov	r1, r3
 801e068:	68bb      	ldr	r3, [r7, #8]
 801e06a:	440b      	add	r3, r1
 801e06c:	3230      	adds	r2, #48	; 0x30
 801e06e:	b2d2      	uxtb	r2, r2
 801e070:	701a      	strb	r2, [r3, #0]
 801e072:	e00a      	b.n	801e08a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	0f1b      	lsrs	r3, r3, #28
 801e078:	b2da      	uxtb	r2, r3
 801e07a:	7dfb      	ldrb	r3, [r7, #23]
 801e07c:	005b      	lsls	r3, r3, #1
 801e07e:	4619      	mov	r1, r3
 801e080:	68bb      	ldr	r3, [r7, #8]
 801e082:	440b      	add	r3, r1
 801e084:	3237      	adds	r2, #55	; 0x37
 801e086:	b2d2      	uxtb	r2, r2
 801e088:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	011b      	lsls	r3, r3, #4
 801e08e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801e090:	7dfb      	ldrb	r3, [r7, #23]
 801e092:	005b      	lsls	r3, r3, #1
 801e094:	3301      	adds	r3, #1
 801e096:	68ba      	ldr	r2, [r7, #8]
 801e098:	4413      	add	r3, r2
 801e09a:	2200      	movs	r2, #0
 801e09c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801e09e:	7dfb      	ldrb	r3, [r7, #23]
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	75fb      	strb	r3, [r7, #23]
 801e0a4:	7dfa      	ldrb	r2, [r7, #23]
 801e0a6:	79fb      	ldrb	r3, [r7, #7]
 801e0a8:	429a      	cmp	r2, r3
 801e0aa:	d3d3      	bcc.n	801e054 <IntToUnicode+0x18>
  }
}
 801e0ac:	bf00      	nop
 801e0ae:	bf00      	nop
 801e0b0:	371c      	adds	r7, #28
 801e0b2:	46bd      	mov	sp, r7
 801e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b8:	4770      	bx	lr
	...

0801e0bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801e0bc:	b580      	push	{r7, lr}
 801e0be:	b0aa      	sub	sp, #168	; 0xa8
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e0c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801e0c8:	2200      	movs	r2, #0
 801e0ca:	601a      	str	r2, [r3, #0]
 801e0cc:	605a      	str	r2, [r3, #4]
 801e0ce:	609a      	str	r2, [r3, #8]
 801e0d0:	60da      	str	r2, [r3, #12]
 801e0d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801e0d4:	f107 0310 	add.w	r3, r7, #16
 801e0d8:	2284      	movs	r2, #132	; 0x84
 801e0da:	2100      	movs	r1, #0
 801e0dc:	4618      	mov	r0, r3
 801e0de:	f001 f90f 	bl	801f300 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	4a26      	ldr	r2, [pc, #152]	; (801e180 <HAL_PCD_MspInit+0xc4>)
 801e0e8:	4293      	cmp	r3, r2
 801e0ea:	d145      	bne.n	801e178 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801e0ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801e0f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e0f8:	f107 0310 	add.w	r3, r7, #16
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	f7f2 fd1b 	bl	8010b38 <HAL_RCCEx_PeriphCLKConfig>
 801e102:	4603      	mov	r3, r0
 801e104:	2b00      	cmp	r3, #0
 801e106:	d001      	beq.n	801e10c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801e108:	f7ed f9b8 	bl	800b47c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801e10c:	4b1d      	ldr	r3, [pc, #116]	; (801e184 <HAL_PCD_MspInit+0xc8>)
 801e10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e110:	4a1c      	ldr	r2, [pc, #112]	; (801e184 <HAL_PCD_MspInit+0xc8>)
 801e112:	f043 0302 	orr.w	r3, r3, #2
 801e116:	6313      	str	r3, [r2, #48]	; 0x30
 801e118:	4b1a      	ldr	r3, [pc, #104]	; (801e184 <HAL_PCD_MspInit+0xc8>)
 801e11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e11c:	f003 0302 	and.w	r3, r3, #2
 801e120:	60fb      	str	r3, [r7, #12]
 801e122:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801e124:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801e128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e12c:	2302      	movs	r3, #2
 801e12e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e132:	2300      	movs	r3, #0
 801e134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e138:	2303      	movs	r3, #3
 801e13a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801e13e:	230c      	movs	r3, #12
 801e140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801e144:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801e148:	4619      	mov	r1, r3
 801e14a:	480f      	ldr	r0, [pc, #60]	; (801e188 <HAL_PCD_MspInit+0xcc>)
 801e14c:	f7ee fdfa 	bl	800cd44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801e150:	4b0c      	ldr	r3, [pc, #48]	; (801e184 <HAL_PCD_MspInit+0xc8>)
 801e152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e154:	4a0b      	ldr	r2, [pc, #44]	; (801e184 <HAL_PCD_MspInit+0xc8>)
 801e156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e15a:	6313      	str	r3, [r2, #48]	; 0x30
 801e15c:	4b09      	ldr	r3, [pc, #36]	; (801e184 <HAL_PCD_MspInit+0xc8>)
 801e15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e164:	60bb      	str	r3, [r7, #8]
 801e166:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801e168:	2200      	movs	r2, #0
 801e16a:	2100      	movs	r1, #0
 801e16c:	204d      	movs	r0, #77	; 0x4d
 801e16e:	f7ee fa0c 	bl	800c58a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801e172:	204d      	movs	r0, #77	; 0x4d
 801e174:	f7ee fa25 	bl	800c5c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801e178:	bf00      	nop
 801e17a:	37a8      	adds	r7, #168	; 0xa8
 801e17c:	46bd      	mov	sp, r7
 801e17e:	bd80      	pop	{r7, pc}
 801e180:	40040000 	.word	0x40040000
 801e184:	40023800 	.word	0x40023800
 801e188:	40020400 	.word	0x40020400

0801e18c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e18c:	b580      	push	{r7, lr}
 801e18e:	b082      	sub	sp, #8
 801e190:	af00      	add	r7, sp, #0
 801e192:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801e1a0:	4619      	mov	r1, r3
 801e1a2:	4610      	mov	r0, r2
 801e1a4:	f7f9 fd29 	bl	8017bfa <USBD_LL_SetupStage>
}
 801e1a8:	bf00      	nop
 801e1aa:	3708      	adds	r7, #8
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	bd80      	pop	{r7, pc}

0801e1b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1b0:	b580      	push	{r7, lr}
 801e1b2:	b082      	sub	sp, #8
 801e1b4:	af00      	add	r7, sp, #0
 801e1b6:	6078      	str	r0, [r7, #4]
 801e1b8:	460b      	mov	r3, r1
 801e1ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801e1c2:	78fa      	ldrb	r2, [r7, #3]
 801e1c4:	6879      	ldr	r1, [r7, #4]
 801e1c6:	4613      	mov	r3, r2
 801e1c8:	00db      	lsls	r3, r3, #3
 801e1ca:	4413      	add	r3, r2
 801e1cc:	009b      	lsls	r3, r3, #2
 801e1ce:	440b      	add	r3, r1
 801e1d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801e1d4:	681a      	ldr	r2, [r3, #0]
 801e1d6:	78fb      	ldrb	r3, [r7, #3]
 801e1d8:	4619      	mov	r1, r3
 801e1da:	f7f9 fd63 	bl	8017ca4 <USBD_LL_DataOutStage>
}
 801e1de:	bf00      	nop
 801e1e0:	3708      	adds	r7, #8
 801e1e2:	46bd      	mov	sp, r7
 801e1e4:	bd80      	pop	{r7, pc}

0801e1e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1e6:	b580      	push	{r7, lr}
 801e1e8:	b082      	sub	sp, #8
 801e1ea:	af00      	add	r7, sp, #0
 801e1ec:	6078      	str	r0, [r7, #4]
 801e1ee:	460b      	mov	r3, r1
 801e1f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801e1f8:	78fa      	ldrb	r2, [r7, #3]
 801e1fa:	6879      	ldr	r1, [r7, #4]
 801e1fc:	4613      	mov	r3, r2
 801e1fe:	00db      	lsls	r3, r3, #3
 801e200:	4413      	add	r3, r2
 801e202:	009b      	lsls	r3, r3, #2
 801e204:	440b      	add	r3, r1
 801e206:	334c      	adds	r3, #76	; 0x4c
 801e208:	681a      	ldr	r2, [r3, #0]
 801e20a:	78fb      	ldrb	r3, [r7, #3]
 801e20c:	4619      	mov	r1, r3
 801e20e:	f7f9 fdfc 	bl	8017e0a <USBD_LL_DataInStage>
}
 801e212:	bf00      	nop
 801e214:	3708      	adds	r7, #8
 801e216:	46bd      	mov	sp, r7
 801e218:	bd80      	pop	{r7, pc}

0801e21a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e21a:	b580      	push	{r7, lr}
 801e21c:	b082      	sub	sp, #8
 801e21e:	af00      	add	r7, sp, #0
 801e220:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e228:	4618      	mov	r0, r3
 801e22a:	f7f9 ff30 	bl	801808e <USBD_LL_SOF>
}
 801e22e:	bf00      	nop
 801e230:	3708      	adds	r7, #8
 801e232:	46bd      	mov	sp, r7
 801e234:	bd80      	pop	{r7, pc}

0801e236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e236:	b580      	push	{r7, lr}
 801e238:	b084      	sub	sp, #16
 801e23a:	af00      	add	r7, sp, #0
 801e23c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e23e:	2301      	movs	r3, #1
 801e240:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	68db      	ldr	r3, [r3, #12]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d102      	bne.n	801e250 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801e24a:	2300      	movs	r3, #0
 801e24c:	73fb      	strb	r3, [r7, #15]
 801e24e:	e008      	b.n	801e262 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	68db      	ldr	r3, [r3, #12]
 801e254:	2b02      	cmp	r3, #2
 801e256:	d102      	bne.n	801e25e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801e258:	2301      	movs	r3, #1
 801e25a:	73fb      	strb	r3, [r7, #15]
 801e25c:	e001      	b.n	801e262 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801e25e:	f7ed f90d 	bl	800b47c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e268:	7bfa      	ldrb	r2, [r7, #15]
 801e26a:	4611      	mov	r1, r2
 801e26c:	4618      	mov	r0, r3
 801e26e:	f7f9 fed0 	bl	8018012 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e278:	4618      	mov	r0, r3
 801e27a:	f7f9 fe78 	bl	8017f6e <USBD_LL_Reset>
}
 801e27e:	bf00      	nop
 801e280:	3710      	adds	r7, #16
 801e282:	46bd      	mov	sp, r7
 801e284:	bd80      	pop	{r7, pc}
	...

0801e288 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e288:	b580      	push	{r7, lr}
 801e28a:	b082      	sub	sp, #8
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e296:	4618      	mov	r0, r3
 801e298:	f7f9 fecb 	bl	8018032 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	687a      	ldr	r2, [r7, #4]
 801e2a8:	6812      	ldr	r2, [r2, #0]
 801e2aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801e2ae:	f043 0301 	orr.w	r3, r3, #1
 801e2b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	6a1b      	ldr	r3, [r3, #32]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d005      	beq.n	801e2c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e2bc:	4b04      	ldr	r3, [pc, #16]	; (801e2d0 <HAL_PCD_SuspendCallback+0x48>)
 801e2be:	691b      	ldr	r3, [r3, #16]
 801e2c0:	4a03      	ldr	r2, [pc, #12]	; (801e2d0 <HAL_PCD_SuspendCallback+0x48>)
 801e2c2:	f043 0306 	orr.w	r3, r3, #6
 801e2c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e2c8:	bf00      	nop
 801e2ca:	3708      	adds	r7, #8
 801e2cc:	46bd      	mov	sp, r7
 801e2ce:	bd80      	pop	{r7, pc}
 801e2d0:	e000ed00 	.word	0xe000ed00

0801e2d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e2d4:	b580      	push	{r7, lr}
 801e2d6:	b082      	sub	sp, #8
 801e2d8:	af00      	add	r7, sp, #0
 801e2da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e2e2:	4618      	mov	r0, r3
 801e2e4:	f7f9 febb 	bl	801805e <USBD_LL_Resume>
}
 801e2e8:	bf00      	nop
 801e2ea:	3708      	adds	r7, #8
 801e2ec:	46bd      	mov	sp, r7
 801e2ee:	bd80      	pop	{r7, pc}

0801e2f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e2f0:	b580      	push	{r7, lr}
 801e2f2:	b082      	sub	sp, #8
 801e2f4:	af00      	add	r7, sp, #0
 801e2f6:	6078      	str	r0, [r7, #4]
 801e2f8:	460b      	mov	r3, r1
 801e2fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e302:	78fa      	ldrb	r2, [r7, #3]
 801e304:	4611      	mov	r1, r2
 801e306:	4618      	mov	r0, r3
 801e308:	f7f9 ff13 	bl	8018132 <USBD_LL_IsoOUTIncomplete>
}
 801e30c:	bf00      	nop
 801e30e:	3708      	adds	r7, #8
 801e310:	46bd      	mov	sp, r7
 801e312:	bd80      	pop	{r7, pc}

0801e314 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e314:	b580      	push	{r7, lr}
 801e316:	b082      	sub	sp, #8
 801e318:	af00      	add	r7, sp, #0
 801e31a:	6078      	str	r0, [r7, #4]
 801e31c:	460b      	mov	r3, r1
 801e31e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e326:	78fa      	ldrb	r2, [r7, #3]
 801e328:	4611      	mov	r1, r2
 801e32a:	4618      	mov	r0, r3
 801e32c:	f7f9 fecf 	bl	80180ce <USBD_LL_IsoINIncomplete>
}
 801e330:	bf00      	nop
 801e332:	3708      	adds	r7, #8
 801e334:	46bd      	mov	sp, r7
 801e336:	bd80      	pop	{r7, pc}

0801e338 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e338:	b580      	push	{r7, lr}
 801e33a:	b082      	sub	sp, #8
 801e33c:	af00      	add	r7, sp, #0
 801e33e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e346:	4618      	mov	r0, r3
 801e348:	f7f9 ff25 	bl	8018196 <USBD_LL_DevConnected>
}
 801e34c:	bf00      	nop
 801e34e:	3708      	adds	r7, #8
 801e350:	46bd      	mov	sp, r7
 801e352:	bd80      	pop	{r7, pc}

0801e354 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e354:	b580      	push	{r7, lr}
 801e356:	b082      	sub	sp, #8
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e362:	4618      	mov	r0, r3
 801e364:	f7f9 ff22 	bl	80181ac <USBD_LL_DevDisconnected>
}
 801e368:	bf00      	nop
 801e36a:	3708      	adds	r7, #8
 801e36c:	46bd      	mov	sp, r7
 801e36e:	bd80      	pop	{r7, pc}

0801e370 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b082      	sub	sp, #8
 801e374:	af00      	add	r7, sp, #0
 801e376:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	781b      	ldrb	r3, [r3, #0]
 801e37c:	2b01      	cmp	r3, #1
 801e37e:	d140      	bne.n	801e402 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801e380:	4a22      	ldr	r2, [pc, #136]	; (801e40c <USBD_LL_Init+0x9c>)
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	4a20      	ldr	r2, [pc, #128]	; (801e40c <USBD_LL_Init+0x9c>)
 801e38c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801e390:	4b1e      	ldr	r3, [pc, #120]	; (801e40c <USBD_LL_Init+0x9c>)
 801e392:	4a1f      	ldr	r2, [pc, #124]	; (801e410 <USBD_LL_Init+0xa0>)
 801e394:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 801e396:	4b1d      	ldr	r3, [pc, #116]	; (801e40c <USBD_LL_Init+0x9c>)
 801e398:	2208      	movs	r2, #8
 801e39a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801e39c:	4b1b      	ldr	r3, [pc, #108]	; (801e40c <USBD_LL_Init+0x9c>)
 801e39e:	2202      	movs	r2, #2
 801e3a0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801e3a2:	4b1a      	ldr	r3, [pc, #104]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3a4:	2200      	movs	r2, #0
 801e3a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801e3a8:	4b18      	ldr	r3, [pc, #96]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3aa:	2202      	movs	r2, #2
 801e3ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801e3ae:	4b17      	ldr	r3, [pc, #92]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3b0:	2200      	movs	r2, #0
 801e3b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801e3b4:	4b15      	ldr	r3, [pc, #84]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801e3ba:	4b14      	ldr	r3, [pc, #80]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3bc:	2200      	movs	r2, #0
 801e3be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801e3c0:	4b12      	ldr	r3, [pc, #72]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3c2:	2200      	movs	r2, #0
 801e3c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801e3c6:	4b11      	ldr	r3, [pc, #68]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3c8:	2200      	movs	r2, #0
 801e3ca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801e3cc:	4b0f      	ldr	r3, [pc, #60]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801e3d2:	480e      	ldr	r0, [pc, #56]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3d4:	f7f0 fbd0 	bl	800eb78 <HAL_PCD_Init>
 801e3d8:	4603      	mov	r3, r0
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d001      	beq.n	801e3e2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801e3de:	f7ed f84d 	bl	800b47c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801e3e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e3e6:	4809      	ldr	r0, [pc, #36]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3e8:	f7f1 fe49 	bl	801007e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801e3ec:	2280      	movs	r2, #128	; 0x80
 801e3ee:	2100      	movs	r1, #0
 801e3f0:	4806      	ldr	r0, [pc, #24]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3f2:	f7f1 fdfd 	bl	800fff0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801e3f6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801e3fa:	2101      	movs	r1, #1
 801e3fc:	4803      	ldr	r0, [pc, #12]	; (801e40c <USBD_LL_Init+0x9c>)
 801e3fe:	f7f1 fdf7 	bl	800fff0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e402:	2300      	movs	r3, #0
}
 801e404:	4618      	mov	r0, r3
 801e406:	3708      	adds	r7, #8
 801e408:	46bd      	mov	sp, r7
 801e40a:	bd80      	pop	{r7, pc}
 801e40c:	20002c84 	.word	0x20002c84
 801e410:	40040000 	.word	0x40040000

0801e414 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e414:	b580      	push	{r7, lr}
 801e416:	b084      	sub	sp, #16
 801e418:	af00      	add	r7, sp, #0
 801e41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e41c:	2300      	movs	r3, #0
 801e41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e420:	2300      	movs	r3, #0
 801e422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e42a:	4618      	mov	r0, r3
 801e42c:	f7f0 fcc8 	bl	800edc0 <HAL_PCD_Start>
 801e430:	4603      	mov	r3, r0
 801e432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e434:	7bfb      	ldrb	r3, [r7, #15]
 801e436:	4618      	mov	r0, r3
 801e438:	f000 f97e 	bl	801e738 <USBD_Get_USB_Status>
 801e43c:	4603      	mov	r3, r0
 801e43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e440:	7bbb      	ldrb	r3, [r7, #14]
}
 801e442:	4618      	mov	r0, r3
 801e444:	3710      	adds	r7, #16
 801e446:	46bd      	mov	sp, r7
 801e448:	bd80      	pop	{r7, pc}

0801e44a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e44a:	b580      	push	{r7, lr}
 801e44c:	b084      	sub	sp, #16
 801e44e:	af00      	add	r7, sp, #0
 801e450:	6078      	str	r0, [r7, #4]
 801e452:	4608      	mov	r0, r1
 801e454:	4611      	mov	r1, r2
 801e456:	461a      	mov	r2, r3
 801e458:	4603      	mov	r3, r0
 801e45a:	70fb      	strb	r3, [r7, #3]
 801e45c:	460b      	mov	r3, r1
 801e45e:	70bb      	strb	r3, [r7, #2]
 801e460:	4613      	mov	r3, r2
 801e462:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e464:	2300      	movs	r3, #0
 801e466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e468:	2300      	movs	r3, #0
 801e46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e472:	78bb      	ldrb	r3, [r7, #2]
 801e474:	883a      	ldrh	r2, [r7, #0]
 801e476:	78f9      	ldrb	r1, [r7, #3]
 801e478:	f7f1 f9b5 	bl	800f7e6 <HAL_PCD_EP_Open>
 801e47c:	4603      	mov	r3, r0
 801e47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e480:	7bfb      	ldrb	r3, [r7, #15]
 801e482:	4618      	mov	r0, r3
 801e484:	f000 f958 	bl	801e738 <USBD_Get_USB_Status>
 801e488:	4603      	mov	r3, r0
 801e48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e48c:	7bbb      	ldrb	r3, [r7, #14]
}
 801e48e:	4618      	mov	r0, r3
 801e490:	3710      	adds	r7, #16
 801e492:	46bd      	mov	sp, r7
 801e494:	bd80      	pop	{r7, pc}

0801e496 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e496:	b580      	push	{r7, lr}
 801e498:	b084      	sub	sp, #16
 801e49a:	af00      	add	r7, sp, #0
 801e49c:	6078      	str	r0, [r7, #4]
 801e49e:	460b      	mov	r3, r1
 801e4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e4a6:	2300      	movs	r3, #0
 801e4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e4b0:	78fa      	ldrb	r2, [r7, #3]
 801e4b2:	4611      	mov	r1, r2
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	f7f1 f9fe 	bl	800f8b6 <HAL_PCD_EP_Close>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e4be:	7bfb      	ldrb	r3, [r7, #15]
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	f000 f939 	bl	801e738 <USBD_Get_USB_Status>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 801e4cc:	4618      	mov	r0, r3
 801e4ce:	3710      	adds	r7, #16
 801e4d0:	46bd      	mov	sp, r7
 801e4d2:	bd80      	pop	{r7, pc}

0801e4d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e4d4:	b580      	push	{r7, lr}
 801e4d6:	b084      	sub	sp, #16
 801e4d8:	af00      	add	r7, sp, #0
 801e4da:	6078      	str	r0, [r7, #4]
 801e4dc:	460b      	mov	r3, r1
 801e4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e4e4:	2300      	movs	r3, #0
 801e4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e4ee:	78fa      	ldrb	r2, [r7, #3]
 801e4f0:	4611      	mov	r1, r2
 801e4f2:	4618      	mov	r0, r3
 801e4f4:	f7f1 fad6 	bl	800faa4 <HAL_PCD_EP_SetStall>
 801e4f8:	4603      	mov	r3, r0
 801e4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e4fc:	7bfb      	ldrb	r3, [r7, #15]
 801e4fe:	4618      	mov	r0, r3
 801e500:	f000 f91a 	bl	801e738 <USBD_Get_USB_Status>
 801e504:	4603      	mov	r3, r0
 801e506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e508:	7bbb      	ldrb	r3, [r7, #14]
}
 801e50a:	4618      	mov	r0, r3
 801e50c:	3710      	adds	r7, #16
 801e50e:	46bd      	mov	sp, r7
 801e510:	bd80      	pop	{r7, pc}

0801e512 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e512:	b580      	push	{r7, lr}
 801e514:	b084      	sub	sp, #16
 801e516:	af00      	add	r7, sp, #0
 801e518:	6078      	str	r0, [r7, #4]
 801e51a:	460b      	mov	r3, r1
 801e51c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e51e:	2300      	movs	r3, #0
 801e520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e522:	2300      	movs	r3, #0
 801e524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e52c:	78fa      	ldrb	r2, [r7, #3]
 801e52e:	4611      	mov	r1, r2
 801e530:	4618      	mov	r0, r3
 801e532:	f7f1 fb1b 	bl	800fb6c <HAL_PCD_EP_ClrStall>
 801e536:	4603      	mov	r3, r0
 801e538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e53a:	7bfb      	ldrb	r3, [r7, #15]
 801e53c:	4618      	mov	r0, r3
 801e53e:	f000 f8fb 	bl	801e738 <USBD_Get_USB_Status>
 801e542:	4603      	mov	r3, r0
 801e544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e546:	7bbb      	ldrb	r3, [r7, #14]
}
 801e548:	4618      	mov	r0, r3
 801e54a:	3710      	adds	r7, #16
 801e54c:	46bd      	mov	sp, r7
 801e54e:	bd80      	pop	{r7, pc}

0801e550 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e550:	b480      	push	{r7}
 801e552:	b085      	sub	sp, #20
 801e554:	af00      	add	r7, sp, #0
 801e556:	6078      	str	r0, [r7, #4]
 801e558:	460b      	mov	r3, r1
 801e55a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e562:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e568:	2b00      	cmp	r3, #0
 801e56a:	da0b      	bge.n	801e584 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e56c:	78fb      	ldrb	r3, [r7, #3]
 801e56e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e572:	68f9      	ldr	r1, [r7, #12]
 801e574:	4613      	mov	r3, r2
 801e576:	00db      	lsls	r3, r3, #3
 801e578:	4413      	add	r3, r2
 801e57a:	009b      	lsls	r3, r3, #2
 801e57c:	440b      	add	r3, r1
 801e57e:	333e      	adds	r3, #62	; 0x3e
 801e580:	781b      	ldrb	r3, [r3, #0]
 801e582:	e00b      	b.n	801e59c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e584:	78fb      	ldrb	r3, [r7, #3]
 801e586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e58a:	68f9      	ldr	r1, [r7, #12]
 801e58c:	4613      	mov	r3, r2
 801e58e:	00db      	lsls	r3, r3, #3
 801e590:	4413      	add	r3, r2
 801e592:	009b      	lsls	r3, r3, #2
 801e594:	440b      	add	r3, r1
 801e596:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801e59a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e59c:	4618      	mov	r0, r3
 801e59e:	3714      	adds	r7, #20
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5a6:	4770      	bx	lr

0801e5a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e5a8:	b580      	push	{r7, lr}
 801e5aa:	b084      	sub	sp, #16
 801e5ac:	af00      	add	r7, sp, #0
 801e5ae:	6078      	str	r0, [r7, #4]
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e5c2:	78fa      	ldrb	r2, [r7, #3]
 801e5c4:	4611      	mov	r1, r2
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	f7f1 f8e8 	bl	800f79c <HAL_PCD_SetAddress>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e5d0:	7bfb      	ldrb	r3, [r7, #15]
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f000 f8b0 	bl	801e738 <USBD_Get_USB_Status>
 801e5d8:	4603      	mov	r3, r0
 801e5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 801e5de:	4618      	mov	r0, r3
 801e5e0:	3710      	adds	r7, #16
 801e5e2:	46bd      	mov	sp, r7
 801e5e4:	bd80      	pop	{r7, pc}

0801e5e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e5e6:	b580      	push	{r7, lr}
 801e5e8:	b086      	sub	sp, #24
 801e5ea:	af00      	add	r7, sp, #0
 801e5ec:	60f8      	str	r0, [r7, #12]
 801e5ee:	607a      	str	r2, [r7, #4]
 801e5f0:	603b      	str	r3, [r7, #0]
 801e5f2:	460b      	mov	r3, r1
 801e5f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e5f6:	2300      	movs	r3, #0
 801e5f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e5fa:	2300      	movs	r3, #0
 801e5fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e5fe:	68fb      	ldr	r3, [r7, #12]
 801e600:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e604:	7af9      	ldrb	r1, [r7, #11]
 801e606:	683b      	ldr	r3, [r7, #0]
 801e608:	687a      	ldr	r2, [r7, #4]
 801e60a:	f7f1 fa01 	bl	800fa10 <HAL_PCD_EP_Transmit>
 801e60e:	4603      	mov	r3, r0
 801e610:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e612:	7dfb      	ldrb	r3, [r7, #23]
 801e614:	4618      	mov	r0, r3
 801e616:	f000 f88f 	bl	801e738 <USBD_Get_USB_Status>
 801e61a:	4603      	mov	r3, r0
 801e61c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e61e:	7dbb      	ldrb	r3, [r7, #22]
}
 801e620:	4618      	mov	r0, r3
 801e622:	3718      	adds	r7, #24
 801e624:	46bd      	mov	sp, r7
 801e626:	bd80      	pop	{r7, pc}

0801e628 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e628:	b580      	push	{r7, lr}
 801e62a:	b086      	sub	sp, #24
 801e62c:	af00      	add	r7, sp, #0
 801e62e:	60f8      	str	r0, [r7, #12]
 801e630:	607a      	str	r2, [r7, #4]
 801e632:	603b      	str	r3, [r7, #0]
 801e634:	460b      	mov	r3, r1
 801e636:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e638:	2300      	movs	r3, #0
 801e63a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e63c:	2300      	movs	r3, #0
 801e63e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e646:	7af9      	ldrb	r1, [r7, #11]
 801e648:	683b      	ldr	r3, [r7, #0]
 801e64a:	687a      	ldr	r2, [r7, #4]
 801e64c:	f7f1 f97d 	bl	800f94a <HAL_PCD_EP_Receive>
 801e650:	4603      	mov	r3, r0
 801e652:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e654:	7dfb      	ldrb	r3, [r7, #23]
 801e656:	4618      	mov	r0, r3
 801e658:	f000 f86e 	bl	801e738 <USBD_Get_USB_Status>
 801e65c:	4603      	mov	r3, r0
 801e65e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e660:	7dbb      	ldrb	r3, [r7, #22]
}
 801e662:	4618      	mov	r0, r3
 801e664:	3718      	adds	r7, #24
 801e666:	46bd      	mov	sp, r7
 801e668:	bd80      	pop	{r7, pc}

0801e66a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e66a:	b580      	push	{r7, lr}
 801e66c:	b082      	sub	sp, #8
 801e66e:	af00      	add	r7, sp, #0
 801e670:	6078      	str	r0, [r7, #4]
 801e672:	460b      	mov	r3, r1
 801e674:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e67c:	78fa      	ldrb	r2, [r7, #3]
 801e67e:	4611      	mov	r1, r2
 801e680:	4618      	mov	r0, r3
 801e682:	f7f1 f9ad 	bl	800f9e0 <HAL_PCD_EP_GetRxCount>
 801e686:	4603      	mov	r3, r0
}
 801e688:	4618      	mov	r0, r3
 801e68a:	3708      	adds	r7, #8
 801e68c:	46bd      	mov	sp, r7
 801e68e:	bd80      	pop	{r7, pc}

0801e690 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801e690:	b580      	push	{r7, lr}
 801e692:	b082      	sub	sp, #8
 801e694:	af00      	add	r7, sp, #0
 801e696:	6078      	str	r0, [r7, #4]
 801e698:	460b      	mov	r3, r1
 801e69a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801e69c:	78fb      	ldrb	r3, [r7, #3]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	d002      	beq.n	801e6a8 <HAL_PCDEx_LPM_Callback+0x18>
 801e6a2:	2b01      	cmp	r3, #1
 801e6a4:	d01f      	beq.n	801e6e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801e6a6:	e03b      	b.n	801e720 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	6a1b      	ldr	r3, [r3, #32]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d007      	beq.n	801e6c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801e6b0:	f000 f83c 	bl	801e72c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e6b4:	4b1c      	ldr	r3, [pc, #112]	; (801e728 <HAL_PCDEx_LPM_Callback+0x98>)
 801e6b6:	691b      	ldr	r3, [r3, #16]
 801e6b8:	4a1b      	ldr	r2, [pc, #108]	; (801e728 <HAL_PCDEx_LPM_Callback+0x98>)
 801e6ba:	f023 0306 	bic.w	r3, r3, #6
 801e6be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e6c8:	681b      	ldr	r3, [r3, #0]
 801e6ca:	687a      	ldr	r2, [r7, #4]
 801e6cc:	6812      	ldr	r2, [r2, #0]
 801e6ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801e6d2:	f023 0301 	bic.w	r3, r3, #1
 801e6d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e6de:	4618      	mov	r0, r3
 801e6e0:	f7f9 fcbd 	bl	801805e <USBD_LL_Resume>
    break;
 801e6e4:	e01c      	b.n	801e720 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	687a      	ldr	r2, [r7, #4]
 801e6f2:	6812      	ldr	r2, [r2, #0]
 801e6f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801e6f8:	f043 0301 	orr.w	r3, r3, #1
 801e6fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801e704:	4618      	mov	r0, r3
 801e706:	f7f9 fc94 	bl	8018032 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6a1b      	ldr	r3, [r3, #32]
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d005      	beq.n	801e71e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e712:	4b05      	ldr	r3, [pc, #20]	; (801e728 <HAL_PCDEx_LPM_Callback+0x98>)
 801e714:	691b      	ldr	r3, [r3, #16]
 801e716:	4a04      	ldr	r2, [pc, #16]	; (801e728 <HAL_PCDEx_LPM_Callback+0x98>)
 801e718:	f043 0306 	orr.w	r3, r3, #6
 801e71c:	6113      	str	r3, [r2, #16]
    break;
 801e71e:	bf00      	nop
}
 801e720:	bf00      	nop
 801e722:	3708      	adds	r7, #8
 801e724:	46bd      	mov	sp, r7
 801e726:	bd80      	pop	{r7, pc}
 801e728:	e000ed00 	.word	0xe000ed00

0801e72c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801e72c:	b580      	push	{r7, lr}
 801e72e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801e730:	f7ec fb20 	bl	800ad74 <SystemClock_Config>
}
 801e734:	bf00      	nop
 801e736:	bd80      	pop	{r7, pc}

0801e738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e738:	b480      	push	{r7}
 801e73a:	b085      	sub	sp, #20
 801e73c:	af00      	add	r7, sp, #0
 801e73e:	4603      	mov	r3, r0
 801e740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e742:	2300      	movs	r3, #0
 801e744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e746:	79fb      	ldrb	r3, [r7, #7]
 801e748:	2b03      	cmp	r3, #3
 801e74a:	d817      	bhi.n	801e77c <USBD_Get_USB_Status+0x44>
 801e74c:	a201      	add	r2, pc, #4	; (adr r2, 801e754 <USBD_Get_USB_Status+0x1c>)
 801e74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e752:	bf00      	nop
 801e754:	0801e765 	.word	0x0801e765
 801e758:	0801e76b 	.word	0x0801e76b
 801e75c:	0801e771 	.word	0x0801e771
 801e760:	0801e777 	.word	0x0801e777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e764:	2300      	movs	r3, #0
 801e766:	73fb      	strb	r3, [r7, #15]
    break;
 801e768:	e00b      	b.n	801e782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e76a:	2303      	movs	r3, #3
 801e76c:	73fb      	strb	r3, [r7, #15]
    break;
 801e76e:	e008      	b.n	801e782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e770:	2301      	movs	r3, #1
 801e772:	73fb      	strb	r3, [r7, #15]
    break;
 801e774:	e005      	b.n	801e782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e776:	2303      	movs	r3, #3
 801e778:	73fb      	strb	r3, [r7, #15]
    break;
 801e77a:	e002      	b.n	801e782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e77c:	2303      	movs	r3, #3
 801e77e:	73fb      	strb	r3, [r7, #15]
    break;
 801e780:	bf00      	nop
  }
  return usb_status;
 801e782:	7bfb      	ldrb	r3, [r7, #15]
}
 801e784:	4618      	mov	r0, r3
 801e786:	3714      	adds	r7, #20
 801e788:	46bd      	mov	sp, r7
 801e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e78e:	4770      	bx	lr

0801e790 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801e790:	b580      	push	{r7, lr}
 801e792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801e794:	2201      	movs	r2, #1
 801e796:	490e      	ldr	r1, [pc, #56]	; (801e7d0 <MX_USB_HOST_Init+0x40>)
 801e798:	480e      	ldr	r0, [pc, #56]	; (801e7d4 <MX_USB_HOST_Init+0x44>)
 801e79a:	f7fb f833 	bl	8019804 <USBH_Init>
 801e79e:	4603      	mov	r3, r0
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d001      	beq.n	801e7a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801e7a4:	f7ec fe6a 	bl	800b47c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801e7a8:	490b      	ldr	r1, [pc, #44]	; (801e7d8 <MX_USB_HOST_Init+0x48>)
 801e7aa:	480a      	ldr	r0, [pc, #40]	; (801e7d4 <MX_USB_HOST_Init+0x44>)
 801e7ac:	f7fb f8d7 	bl	801995e <USBH_RegisterClass>
 801e7b0:	4603      	mov	r3, r0
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d001      	beq.n	801e7ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801e7b6:	f7ec fe61 	bl	800b47c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801e7ba:	4806      	ldr	r0, [pc, #24]	; (801e7d4 <MX_USB_HOST_Init+0x44>)
 801e7bc:	f7fb f95b 	bl	8019a76 <USBH_Start>
 801e7c0:	4603      	mov	r3, r0
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d001      	beq.n	801e7ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801e7c6:	f7ec fe59 	bl	800b47c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801e7ca:	bf00      	nop
 801e7cc:	bd80      	pop	{r7, pc}
 801e7ce:	bf00      	nop
 801e7d0:	0801e7f1 	.word	0x0801e7f1
 801e7d4:	2000318c 	.word	0x2000318c
 801e7d8:	200000b0 	.word	0x200000b0

0801e7dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801e7dc:	b580      	push	{r7, lr}
 801e7de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801e7e0:	4802      	ldr	r0, [pc, #8]	; (801e7ec <MX_USB_HOST_Process+0x10>)
 801e7e2:	f7fb f959 	bl	8019a98 <USBH_Process>
}
 801e7e6:	bf00      	nop
 801e7e8:	bd80      	pop	{r7, pc}
 801e7ea:	bf00      	nop
 801e7ec:	2000318c 	.word	0x2000318c

0801e7f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801e7f0:	b480      	push	{r7}
 801e7f2:	b083      	sub	sp, #12
 801e7f4:	af00      	add	r7, sp, #0
 801e7f6:	6078      	str	r0, [r7, #4]
 801e7f8:	460b      	mov	r3, r1
 801e7fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801e7fc:	78fb      	ldrb	r3, [r7, #3]
 801e7fe:	3b01      	subs	r3, #1
 801e800:	2b04      	cmp	r3, #4
 801e802:	d819      	bhi.n	801e838 <USBH_UserProcess+0x48>
 801e804:	a201      	add	r2, pc, #4	; (adr r2, 801e80c <USBH_UserProcess+0x1c>)
 801e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e80a:	bf00      	nop
 801e80c:	0801e839 	.word	0x0801e839
 801e810:	0801e829 	.word	0x0801e829
 801e814:	0801e839 	.word	0x0801e839
 801e818:	0801e831 	.word	0x0801e831
 801e81c:	0801e821 	.word	0x0801e821
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801e820:	4b09      	ldr	r3, [pc, #36]	; (801e848 <USBH_UserProcess+0x58>)
 801e822:	2203      	movs	r2, #3
 801e824:	701a      	strb	r2, [r3, #0]
  break;
 801e826:	e008      	b.n	801e83a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801e828:	4b07      	ldr	r3, [pc, #28]	; (801e848 <USBH_UserProcess+0x58>)
 801e82a:	2202      	movs	r2, #2
 801e82c:	701a      	strb	r2, [r3, #0]
  break;
 801e82e:	e004      	b.n	801e83a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801e830:	4b05      	ldr	r3, [pc, #20]	; (801e848 <USBH_UserProcess+0x58>)
 801e832:	2201      	movs	r2, #1
 801e834:	701a      	strb	r2, [r3, #0]
  break;
 801e836:	e000      	b.n	801e83a <USBH_UserProcess+0x4a>

  default:
  break;
 801e838:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801e83a:	bf00      	nop
 801e83c:	370c      	adds	r7, #12
 801e83e:	46bd      	mov	sp, r7
 801e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e844:	4770      	bx	lr
 801e846:	bf00      	nop
 801e848:	20003564 	.word	0x20003564

0801e84c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801e84c:	b580      	push	{r7, lr}
 801e84e:	b0ac      	sub	sp, #176	; 0xb0
 801e850:	af00      	add	r7, sp, #0
 801e852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801e858:	2200      	movs	r2, #0
 801e85a:	601a      	str	r2, [r3, #0]
 801e85c:	605a      	str	r2, [r3, #4]
 801e85e:	609a      	str	r2, [r3, #8]
 801e860:	60da      	str	r2, [r3, #12]
 801e862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801e864:	f107 0318 	add.w	r3, r7, #24
 801e868:	2284      	movs	r2, #132	; 0x84
 801e86a:	2100      	movs	r1, #0
 801e86c:	4618      	mov	r0, r3
 801e86e:	f000 fd47 	bl	801f300 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801e87a:	d151      	bne.n	801e920 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801e87c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801e880:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801e882:	2300      	movs	r3, #0
 801e884:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801e888:	f107 0318 	add.w	r3, r7, #24
 801e88c:	4618      	mov	r0, r3
 801e88e:	f7f2 f953 	bl	8010b38 <HAL_RCCEx_PeriphCLKConfig>
 801e892:	4603      	mov	r3, r0
 801e894:	2b00      	cmp	r3, #0
 801e896:	d001      	beq.n	801e89c <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 801e898:	f7ec fdf0 	bl	800b47c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e89c:	4b22      	ldr	r3, [pc, #136]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8a0:	4a21      	ldr	r2, [pc, #132]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8a2:	f043 0301 	orr.w	r3, r3, #1
 801e8a6:	6313      	str	r3, [r2, #48]	; 0x30
 801e8a8:	4b1f      	ldr	r3, [pc, #124]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8ac:	f003 0301 	and.w	r3, r3, #1
 801e8b0:	617b      	str	r3, [r7, #20]
 801e8b2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801e8b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801e8b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e8bc:	2302      	movs	r3, #2
 801e8be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e8c8:	2303      	movs	r3, #3
 801e8ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801e8ce:	230a      	movs	r3, #10
 801e8d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e8d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801e8d8:	4619      	mov	r1, r3
 801e8da:	4814      	ldr	r0, [pc, #80]	; (801e92c <HAL_HCD_MspInit+0xe0>)
 801e8dc:	f7ee fa32 	bl	800cd44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e8e0:	4b11      	ldr	r3, [pc, #68]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e8e4:	4a10      	ldr	r2, [pc, #64]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8ea:	6353      	str	r3, [r2, #52]	; 0x34
 801e8ec:	4b0e      	ldr	r3, [pc, #56]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e8f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e8f4:	613b      	str	r3, [r7, #16]
 801e8f6:	693b      	ldr	r3, [r7, #16]
 801e8f8:	4b0b      	ldr	r3, [pc, #44]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e8fc:	4a0a      	ldr	r2, [pc, #40]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e8fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e902:	6453      	str	r3, [r2, #68]	; 0x44
 801e904:	4b08      	ldr	r3, [pc, #32]	; (801e928 <HAL_HCD_MspInit+0xdc>)
 801e906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e90c:	60fb      	str	r3, [r7, #12]
 801e90e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801e910:	2200      	movs	r2, #0
 801e912:	2100      	movs	r1, #0
 801e914:	2043      	movs	r0, #67	; 0x43
 801e916:	f7ed fe38 	bl	800c58a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e91a:	2043      	movs	r0, #67	; 0x43
 801e91c:	f7ed fe51 	bl	800c5c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e920:	bf00      	nop
 801e922:	37b0      	adds	r7, #176	; 0xb0
 801e924:	46bd      	mov	sp, r7
 801e926:	bd80      	pop	{r7, pc}
 801e928:	40023800 	.word	0x40023800
 801e92c:	40020000 	.word	0x40020000

0801e930 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801e930:	b580      	push	{r7, lr}
 801e932:	b082      	sub	sp, #8
 801e934:	af00      	add	r7, sp, #0
 801e936:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801e93e:	4618      	mov	r0, r3
 801e940:	f7fb fc89 	bl	801a256 <USBH_LL_IncTimer>
}
 801e944:	bf00      	nop
 801e946:	3708      	adds	r7, #8
 801e948:	46bd      	mov	sp, r7
 801e94a:	bd80      	pop	{r7, pc}

0801e94c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801e94c:	b580      	push	{r7, lr}
 801e94e:	b082      	sub	sp, #8
 801e950:	af00      	add	r7, sp, #0
 801e952:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801e95a:	4618      	mov	r0, r3
 801e95c:	f7fb fcc1 	bl	801a2e2 <USBH_LL_Connect>
}
 801e960:	bf00      	nop
 801e962:	3708      	adds	r7, #8
 801e964:	46bd      	mov	sp, r7
 801e966:	bd80      	pop	{r7, pc}

0801e968 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801e968:	b580      	push	{r7, lr}
 801e96a:	b082      	sub	sp, #8
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801e976:	4618      	mov	r0, r3
 801e978:	f7fb fcca 	bl	801a310 <USBH_LL_Disconnect>
}
 801e97c:	bf00      	nop
 801e97e:	3708      	adds	r7, #8
 801e980:	46bd      	mov	sp, r7
 801e982:	bd80      	pop	{r7, pc}

0801e984 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801e984:	b480      	push	{r7}
 801e986:	b083      	sub	sp, #12
 801e988:	af00      	add	r7, sp, #0
 801e98a:	6078      	str	r0, [r7, #4]
 801e98c:	460b      	mov	r3, r1
 801e98e:	70fb      	strb	r3, [r7, #3]
 801e990:	4613      	mov	r3, r2
 801e992:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801e994:	bf00      	nop
 801e996:	370c      	adds	r7, #12
 801e998:	46bd      	mov	sp, r7
 801e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99e:	4770      	bx	lr

0801e9a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801e9a0:	b580      	push	{r7, lr}
 801e9a2:	b082      	sub	sp, #8
 801e9a4:	af00      	add	r7, sp, #0
 801e9a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801e9ae:	4618      	mov	r0, r3
 801e9b0:	f7fb fc7b 	bl	801a2aa <USBH_LL_PortEnabled>
}
 801e9b4:	bf00      	nop
 801e9b6:	3708      	adds	r7, #8
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bd80      	pop	{r7, pc}

0801e9bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b082      	sub	sp, #8
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801e9ca:	4618      	mov	r0, r3
 801e9cc:	f7fb fc7b 	bl	801a2c6 <USBH_LL_PortDisabled>
}
 801e9d0:	bf00      	nop
 801e9d2:	3708      	adds	r7, #8
 801e9d4:	46bd      	mov	sp, r7
 801e9d6:	bd80      	pop	{r7, pc}

0801e9d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	b082      	sub	sp, #8
 801e9dc:	af00      	add	r7, sp, #0
 801e9de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801e9e6:	2b01      	cmp	r3, #1
 801e9e8:	d12a      	bne.n	801ea40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801e9ea:	4a18      	ldr	r2, [pc, #96]	; (801ea4c <USBH_LL_Init+0x74>)
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	4a15      	ldr	r2, [pc, #84]	; (801ea4c <USBH_LL_Init+0x74>)
 801e9f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e9fa:	4b14      	ldr	r3, [pc, #80]	; (801ea4c <USBH_LL_Init+0x74>)
 801e9fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801ea00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801ea02:	4b12      	ldr	r3, [pc, #72]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea04:	2208      	movs	r2, #8
 801ea06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801ea08:	4b10      	ldr	r3, [pc, #64]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea0a:	2201      	movs	r2, #1
 801ea0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801ea0e:	4b0f      	ldr	r3, [pc, #60]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea10:	2200      	movs	r2, #0
 801ea12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801ea14:	4b0d      	ldr	r3, [pc, #52]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea16:	2202      	movs	r2, #2
 801ea18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ea1a:	4b0c      	ldr	r3, [pc, #48]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea1c:	2200      	movs	r2, #0
 801ea1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801ea20:	480a      	ldr	r0, [pc, #40]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea22:	f7ee fb6e 	bl	800d102 <HAL_HCD_Init>
 801ea26:	4603      	mov	r3, r0
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d001      	beq.n	801ea30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801ea2c:	f7ec fd26 	bl	800b47c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801ea30:	4806      	ldr	r0, [pc, #24]	; (801ea4c <USBH_LL_Init+0x74>)
 801ea32:	f7ee ff52 	bl	800d8da <HAL_HCD_GetCurrentFrame>
 801ea36:	4603      	mov	r3, r0
 801ea38:	4619      	mov	r1, r3
 801ea3a:	6878      	ldr	r0, [r7, #4]
 801ea3c:	f7fb fbfc 	bl	801a238 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801ea40:	2300      	movs	r3, #0
}
 801ea42:	4618      	mov	r0, r3
 801ea44:	3708      	adds	r7, #8
 801ea46:	46bd      	mov	sp, r7
 801ea48:	bd80      	pop	{r7, pc}
 801ea4a:	bf00      	nop
 801ea4c:	20003568 	.word	0x20003568

0801ea50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801ea50:	b580      	push	{r7, lr}
 801ea52:	b084      	sub	sp, #16
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ea58:	2300      	movs	r3, #0
 801ea5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ea5c:	2300      	movs	r3, #0
 801ea5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ea66:	4618      	mov	r0, r3
 801ea68:	f7ee fec1 	bl	800d7ee <HAL_HCD_Start>
 801ea6c:	4603      	mov	r3, r0
 801ea6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ea70:	7bfb      	ldrb	r3, [r7, #15]
 801ea72:	4618      	mov	r0, r3
 801ea74:	f000 f95c 	bl	801ed30 <USBH_Get_USB_Status>
 801ea78:	4603      	mov	r3, r0
 801ea7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ea7c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ea7e:	4618      	mov	r0, r3
 801ea80:	3710      	adds	r7, #16
 801ea82:	46bd      	mov	sp, r7
 801ea84:	bd80      	pop	{r7, pc}

0801ea86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801ea86:	b580      	push	{r7, lr}
 801ea88:	b084      	sub	sp, #16
 801ea8a:	af00      	add	r7, sp, #0
 801ea8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ea8e:	2300      	movs	r3, #0
 801ea90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ea92:	2300      	movs	r3, #0
 801ea94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7ee fec9 	bl	800d834 <HAL_HCD_Stop>
 801eaa2:	4603      	mov	r3, r0
 801eaa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801eaa6:	7bfb      	ldrb	r3, [r7, #15]
 801eaa8:	4618      	mov	r0, r3
 801eaaa:	f000 f941 	bl	801ed30 <USBH_Get_USB_Status>
 801eaae:	4603      	mov	r3, r0
 801eab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eab2:	7bbb      	ldrb	r3, [r7, #14]
}
 801eab4:	4618      	mov	r0, r3
 801eab6:	3710      	adds	r7, #16
 801eab8:	46bd      	mov	sp, r7
 801eaba:	bd80      	pop	{r7, pc}

0801eabc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801eabc:	b580      	push	{r7, lr}
 801eabe:	b084      	sub	sp, #16
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801eac4:	2301      	movs	r3, #1
 801eac6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801eace:	4618      	mov	r0, r3
 801ead0:	f7ee ff11 	bl	800d8f6 <HAL_HCD_GetCurrentSpeed>
 801ead4:	4603      	mov	r3, r0
 801ead6:	2b02      	cmp	r3, #2
 801ead8:	d00c      	beq.n	801eaf4 <USBH_LL_GetSpeed+0x38>
 801eada:	2b02      	cmp	r3, #2
 801eadc:	d80d      	bhi.n	801eafa <USBH_LL_GetSpeed+0x3e>
 801eade:	2b00      	cmp	r3, #0
 801eae0:	d002      	beq.n	801eae8 <USBH_LL_GetSpeed+0x2c>
 801eae2:	2b01      	cmp	r3, #1
 801eae4:	d003      	beq.n	801eaee <USBH_LL_GetSpeed+0x32>
 801eae6:	e008      	b.n	801eafa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801eae8:	2300      	movs	r3, #0
 801eaea:	73fb      	strb	r3, [r7, #15]
    break;
 801eaec:	e008      	b.n	801eb00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801eaee:	2301      	movs	r3, #1
 801eaf0:	73fb      	strb	r3, [r7, #15]
    break;
 801eaf2:	e005      	b.n	801eb00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801eaf4:	2302      	movs	r3, #2
 801eaf6:	73fb      	strb	r3, [r7, #15]
    break;
 801eaf8:	e002      	b.n	801eb00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801eafa:	2301      	movs	r3, #1
 801eafc:	73fb      	strb	r3, [r7, #15]
    break;
 801eafe:	bf00      	nop
  }
  return  speed;
 801eb00:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb02:	4618      	mov	r0, r3
 801eb04:	3710      	adds	r7, #16
 801eb06:	46bd      	mov	sp, r7
 801eb08:	bd80      	pop	{r7, pc}

0801eb0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801eb0a:	b580      	push	{r7, lr}
 801eb0c:	b084      	sub	sp, #16
 801eb0e:	af00      	add	r7, sp, #0
 801eb10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eb12:	2300      	movs	r3, #0
 801eb14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801eb16:	2300      	movs	r3, #0
 801eb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801eb20:	4618      	mov	r0, r3
 801eb22:	f7ee fea4 	bl	800d86e <HAL_HCD_ResetPort>
 801eb26:	4603      	mov	r3, r0
 801eb28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801eb2a:	7bfb      	ldrb	r3, [r7, #15]
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	f000 f8ff 	bl	801ed30 <USBH_Get_USB_Status>
 801eb32:	4603      	mov	r3, r0
 801eb34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801eb36:	7bbb      	ldrb	r3, [r7, #14]
}
 801eb38:	4618      	mov	r0, r3
 801eb3a:	3710      	adds	r7, #16
 801eb3c:	46bd      	mov	sp, r7
 801eb3e:	bd80      	pop	{r7, pc}

0801eb40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801eb40:	b580      	push	{r7, lr}
 801eb42:	b082      	sub	sp, #8
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
 801eb48:	460b      	mov	r3, r1
 801eb4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801eb52:	78fa      	ldrb	r2, [r7, #3]
 801eb54:	4611      	mov	r1, r2
 801eb56:	4618      	mov	r0, r3
 801eb58:	f7ee feab 	bl	800d8b2 <HAL_HCD_HC_GetXferCount>
 801eb5c:	4603      	mov	r3, r0
}
 801eb5e:	4618      	mov	r0, r3
 801eb60:	3708      	adds	r7, #8
 801eb62:	46bd      	mov	sp, r7
 801eb64:	bd80      	pop	{r7, pc}

0801eb66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801eb66:	b590      	push	{r4, r7, lr}
 801eb68:	b089      	sub	sp, #36	; 0x24
 801eb6a:	af04      	add	r7, sp, #16
 801eb6c:	6078      	str	r0, [r7, #4]
 801eb6e:	4608      	mov	r0, r1
 801eb70:	4611      	mov	r1, r2
 801eb72:	461a      	mov	r2, r3
 801eb74:	4603      	mov	r3, r0
 801eb76:	70fb      	strb	r3, [r7, #3]
 801eb78:	460b      	mov	r3, r1
 801eb7a:	70bb      	strb	r3, [r7, #2]
 801eb7c:	4613      	mov	r3, r2
 801eb7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801eb80:	2300      	movs	r3, #0
 801eb82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801eb84:	2300      	movs	r3, #0
 801eb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801eb8e:	787c      	ldrb	r4, [r7, #1]
 801eb90:	78ba      	ldrb	r2, [r7, #2]
 801eb92:	78f9      	ldrb	r1, [r7, #3]
 801eb94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801eb96:	9302      	str	r3, [sp, #8]
 801eb98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb9c:	9301      	str	r3, [sp, #4]
 801eb9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801eba2:	9300      	str	r3, [sp, #0]
 801eba4:	4623      	mov	r3, r4
 801eba6:	f7ee fb0e 	bl	800d1c6 <HAL_HCD_HC_Init>
 801ebaa:	4603      	mov	r3, r0
 801ebac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801ebae:	7bfb      	ldrb	r3, [r7, #15]
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f000 f8bd 	bl	801ed30 <USBH_Get_USB_Status>
 801ebb6:	4603      	mov	r3, r0
 801ebb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ebba:	7bbb      	ldrb	r3, [r7, #14]
}
 801ebbc:	4618      	mov	r0, r3
 801ebbe:	3714      	adds	r7, #20
 801ebc0:	46bd      	mov	sp, r7
 801ebc2:	bd90      	pop	{r4, r7, pc}

0801ebc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ebc4:	b580      	push	{r7, lr}
 801ebc6:	b084      	sub	sp, #16
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	6078      	str	r0, [r7, #4]
 801ebcc:	460b      	mov	r3, r1
 801ebce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ebde:	78fa      	ldrb	r2, [r7, #3]
 801ebe0:	4611      	mov	r1, r2
 801ebe2:	4618      	mov	r0, r3
 801ebe4:	f7ee fb7e 	bl	800d2e4 <HAL_HCD_HC_Halt>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ebec:	7bfb      	ldrb	r3, [r7, #15]
 801ebee:	4618      	mov	r0, r3
 801ebf0:	f000 f89e 	bl	801ed30 <USBH_Get_USB_Status>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ebf8:	7bbb      	ldrb	r3, [r7, #14]
}
 801ebfa:	4618      	mov	r0, r3
 801ebfc:	3710      	adds	r7, #16
 801ebfe:	46bd      	mov	sp, r7
 801ec00:	bd80      	pop	{r7, pc}

0801ec02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801ec02:	b590      	push	{r4, r7, lr}
 801ec04:	b089      	sub	sp, #36	; 0x24
 801ec06:	af04      	add	r7, sp, #16
 801ec08:	6078      	str	r0, [r7, #4]
 801ec0a:	4608      	mov	r0, r1
 801ec0c:	4611      	mov	r1, r2
 801ec0e:	461a      	mov	r2, r3
 801ec10:	4603      	mov	r3, r0
 801ec12:	70fb      	strb	r3, [r7, #3]
 801ec14:	460b      	mov	r3, r1
 801ec16:	70bb      	strb	r3, [r7, #2]
 801ec18:	4613      	mov	r3, r2
 801ec1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ec1c:	2300      	movs	r3, #0
 801ec1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ec20:	2300      	movs	r3, #0
 801ec22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801ec2a:	787c      	ldrb	r4, [r7, #1]
 801ec2c:	78ba      	ldrb	r2, [r7, #2]
 801ec2e:	78f9      	ldrb	r1, [r7, #3]
 801ec30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ec34:	9303      	str	r3, [sp, #12]
 801ec36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ec38:	9302      	str	r3, [sp, #8]
 801ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec3c:	9301      	str	r3, [sp, #4]
 801ec3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ec42:	9300      	str	r3, [sp, #0]
 801ec44:	4623      	mov	r3, r4
 801ec46:	f7ee fb71 	bl	800d32c <HAL_HCD_HC_SubmitRequest>
 801ec4a:	4603      	mov	r3, r0
 801ec4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801ec4e:	7bfb      	ldrb	r3, [r7, #15]
 801ec50:	4618      	mov	r0, r3
 801ec52:	f000 f86d 	bl	801ed30 <USBH_Get_USB_Status>
 801ec56:	4603      	mov	r3, r0
 801ec58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ec5a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	3714      	adds	r7, #20
 801ec60:	46bd      	mov	sp, r7
 801ec62:	bd90      	pop	{r4, r7, pc}

0801ec64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ec64:	b580      	push	{r7, lr}
 801ec66:	b082      	sub	sp, #8
 801ec68:	af00      	add	r7, sp, #0
 801ec6a:	6078      	str	r0, [r7, #4]
 801ec6c:	460b      	mov	r3, r1
 801ec6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ec76:	78fa      	ldrb	r2, [r7, #3]
 801ec78:	4611      	mov	r1, r2
 801ec7a:	4618      	mov	r0, r3
 801ec7c:	f7ee fe05 	bl	800d88a <HAL_HCD_HC_GetURBState>
 801ec80:	4603      	mov	r3, r0
}
 801ec82:	4618      	mov	r0, r3
 801ec84:	3708      	adds	r7, #8
 801ec86:	46bd      	mov	sp, r7
 801ec88:	bd80      	pop	{r7, pc}

0801ec8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801ec8a:	b580      	push	{r7, lr}
 801ec8c:	b082      	sub	sp, #8
 801ec8e:	af00      	add	r7, sp, #0
 801ec90:	6078      	str	r0, [r7, #4]
 801ec92:	460b      	mov	r3, r1
 801ec94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801ec9c:	2b01      	cmp	r3, #1
 801ec9e:	d103      	bne.n	801eca8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801eca0:	78fb      	ldrb	r3, [r7, #3]
 801eca2:	4618      	mov	r0, r3
 801eca4:	f000 f870 	bl	801ed88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801eca8:	20c8      	movs	r0, #200	; 0xc8
 801ecaa:	f7ed f8db 	bl	800be64 <HAL_Delay>
  return USBH_OK;
 801ecae:	2300      	movs	r3, #0
}
 801ecb0:	4618      	mov	r0, r3
 801ecb2:	3708      	adds	r7, #8
 801ecb4:	46bd      	mov	sp, r7
 801ecb6:	bd80      	pop	{r7, pc}

0801ecb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801ecb8:	b480      	push	{r7}
 801ecba:	b085      	sub	sp, #20
 801ecbc:	af00      	add	r7, sp, #0
 801ecbe:	6078      	str	r0, [r7, #4]
 801ecc0:	460b      	mov	r3, r1
 801ecc2:	70fb      	strb	r3, [r7, #3]
 801ecc4:	4613      	mov	r3, r2
 801ecc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ecce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801ecd0:	78fb      	ldrb	r3, [r7, #3]
 801ecd2:	68fa      	ldr	r2, [r7, #12]
 801ecd4:	212c      	movs	r1, #44	; 0x2c
 801ecd6:	fb01 f303 	mul.w	r3, r1, r3
 801ecda:	4413      	add	r3, r2
 801ecdc:	333b      	adds	r3, #59	; 0x3b
 801ecde:	781b      	ldrb	r3, [r3, #0]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d009      	beq.n	801ecf8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801ece4:	78fb      	ldrb	r3, [r7, #3]
 801ece6:	68fa      	ldr	r2, [r7, #12]
 801ece8:	212c      	movs	r1, #44	; 0x2c
 801ecea:	fb01 f303 	mul.w	r3, r1, r3
 801ecee:	4413      	add	r3, r2
 801ecf0:	3354      	adds	r3, #84	; 0x54
 801ecf2:	78ba      	ldrb	r2, [r7, #2]
 801ecf4:	701a      	strb	r2, [r3, #0]
 801ecf6:	e008      	b.n	801ed0a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801ecf8:	78fb      	ldrb	r3, [r7, #3]
 801ecfa:	68fa      	ldr	r2, [r7, #12]
 801ecfc:	212c      	movs	r1, #44	; 0x2c
 801ecfe:	fb01 f303 	mul.w	r3, r1, r3
 801ed02:	4413      	add	r3, r2
 801ed04:	3355      	adds	r3, #85	; 0x55
 801ed06:	78ba      	ldrb	r2, [r7, #2]
 801ed08:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801ed0a:	2300      	movs	r3, #0
}
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	3714      	adds	r7, #20
 801ed10:	46bd      	mov	sp, r7
 801ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed16:	4770      	bx	lr

0801ed18 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801ed18:	b580      	push	{r7, lr}
 801ed1a:	b082      	sub	sp, #8
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801ed20:	6878      	ldr	r0, [r7, #4]
 801ed22:	f7ed f89f 	bl	800be64 <HAL_Delay>
}
 801ed26:	bf00      	nop
 801ed28:	3708      	adds	r7, #8
 801ed2a:	46bd      	mov	sp, r7
 801ed2c:	bd80      	pop	{r7, pc}
	...

0801ed30 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ed30:	b480      	push	{r7}
 801ed32:	b085      	sub	sp, #20
 801ed34:	af00      	add	r7, sp, #0
 801ed36:	4603      	mov	r3, r0
 801ed38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ed3a:	2300      	movs	r3, #0
 801ed3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ed3e:	79fb      	ldrb	r3, [r7, #7]
 801ed40:	2b03      	cmp	r3, #3
 801ed42:	d817      	bhi.n	801ed74 <USBH_Get_USB_Status+0x44>
 801ed44:	a201      	add	r2, pc, #4	; (adr r2, 801ed4c <USBH_Get_USB_Status+0x1c>)
 801ed46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ed4a:	bf00      	nop
 801ed4c:	0801ed5d 	.word	0x0801ed5d
 801ed50:	0801ed63 	.word	0x0801ed63
 801ed54:	0801ed69 	.word	0x0801ed69
 801ed58:	0801ed6f 	.word	0x0801ed6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801ed5c:	2300      	movs	r3, #0
 801ed5e:	73fb      	strb	r3, [r7, #15]
    break;
 801ed60:	e00b      	b.n	801ed7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801ed62:	2302      	movs	r3, #2
 801ed64:	73fb      	strb	r3, [r7, #15]
    break;
 801ed66:	e008      	b.n	801ed7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801ed68:	2301      	movs	r3, #1
 801ed6a:	73fb      	strb	r3, [r7, #15]
    break;
 801ed6c:	e005      	b.n	801ed7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801ed6e:	2302      	movs	r3, #2
 801ed70:	73fb      	strb	r3, [r7, #15]
    break;
 801ed72:	e002      	b.n	801ed7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801ed74:	2302      	movs	r3, #2
 801ed76:	73fb      	strb	r3, [r7, #15]
    break;
 801ed78:	bf00      	nop
  }
  return usb_status;
 801ed7a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	3714      	adds	r7, #20
 801ed80:	46bd      	mov	sp, r7
 801ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed86:	4770      	bx	lr

0801ed88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b084      	sub	sp, #16
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	4603      	mov	r3, r0
 801ed90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801ed92:	79fb      	ldrb	r3, [r7, #7]
 801ed94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801ed96:	79fb      	ldrb	r3, [r7, #7]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d102      	bne.n	801eda2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	73fb      	strb	r3, [r7, #15]
 801eda0:	e001      	b.n	801eda6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801eda2:	2301      	movs	r3, #1
 801eda4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 801eda6:	7bfb      	ldrb	r3, [r7, #15]
 801eda8:	461a      	mov	r2, r3
 801edaa:	2104      	movs	r1, #4
 801edac:	4803      	ldr	r0, [pc, #12]	; (801edbc <MX_DriverVbusFS+0x34>)
 801edae:	f7ee f975 	bl	800d09c <HAL_GPIO_WritePin>
}
 801edb2:	bf00      	nop
 801edb4:	3710      	adds	r7, #16
 801edb6:	46bd      	mov	sp, r7
 801edb8:	bd80      	pop	{r7, pc}
 801edba:	bf00      	nop
 801edbc:	40022000 	.word	0x40022000

0801edc0 <atoi>:
 801edc0:	220a      	movs	r2, #10
 801edc2:	2100      	movs	r1, #0
 801edc4:	f000 bba2 	b.w	801f50c <strtol>

0801edc8 <atol>:
 801edc8:	220a      	movs	r2, #10
 801edca:	2100      	movs	r1, #0
 801edcc:	f000 bb9e 	b.w	801f50c <strtol>

0801edd0 <atoll>:
 801edd0:	220a      	movs	r2, #10
 801edd2:	2100      	movs	r1, #0
 801edd4:	f000 bc3a 	b.w	801f64c <strtoll>

0801edd8 <__errno>:
 801edd8:	4b01      	ldr	r3, [pc, #4]	; (801ede0 <__errno+0x8>)
 801edda:	6818      	ldr	r0, [r3, #0]
 801eddc:	4770      	bx	lr
 801edde:	bf00      	nop
 801ede0:	20000144 	.word	0x20000144

0801ede4 <__libc_init_array>:
 801ede4:	b570      	push	{r4, r5, r6, lr}
 801ede6:	4d0d      	ldr	r5, [pc, #52]	; (801ee1c <__libc_init_array+0x38>)
 801ede8:	4c0d      	ldr	r4, [pc, #52]	; (801ee20 <__libc_init_array+0x3c>)
 801edea:	1b64      	subs	r4, r4, r5
 801edec:	10a4      	asrs	r4, r4, #2
 801edee:	2600      	movs	r6, #0
 801edf0:	42a6      	cmp	r6, r4
 801edf2:	d109      	bne.n	801ee08 <__libc_init_array+0x24>
 801edf4:	4d0b      	ldr	r5, [pc, #44]	; (801ee24 <__libc_init_array+0x40>)
 801edf6:	4c0c      	ldr	r4, [pc, #48]	; (801ee28 <__libc_init_array+0x44>)
 801edf8:	f005 ff34 	bl	8024c64 <_init>
 801edfc:	1b64      	subs	r4, r4, r5
 801edfe:	10a4      	asrs	r4, r4, #2
 801ee00:	2600      	movs	r6, #0
 801ee02:	42a6      	cmp	r6, r4
 801ee04:	d105      	bne.n	801ee12 <__libc_init_array+0x2e>
 801ee06:	bd70      	pop	{r4, r5, r6, pc}
 801ee08:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee0c:	4798      	blx	r3
 801ee0e:	3601      	adds	r6, #1
 801ee10:	e7ee      	b.n	801edf0 <__libc_init_array+0xc>
 801ee12:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee16:	4798      	blx	r3
 801ee18:	3601      	adds	r6, #1
 801ee1a:	e7f2      	b.n	801ee02 <__libc_init_array+0x1e>
 801ee1c:	08026128 	.word	0x08026128
 801ee20:	08026128 	.word	0x08026128
 801ee24:	08026128 	.word	0x08026128
 801ee28:	08026130 	.word	0x08026130

0801ee2c <malloc>:
 801ee2c:	4b02      	ldr	r3, [pc, #8]	; (801ee38 <malloc+0xc>)
 801ee2e:	4601      	mov	r1, r0
 801ee30:	6818      	ldr	r0, [r3, #0]
 801ee32:	f000 b80b 	b.w	801ee4c <_malloc_r>
 801ee36:	bf00      	nop
 801ee38:	20000144 	.word	0x20000144

0801ee3c <free>:
 801ee3c:	4b02      	ldr	r3, [pc, #8]	; (801ee48 <free+0xc>)
 801ee3e:	4601      	mov	r1, r0
 801ee40:	6818      	ldr	r0, [r3, #0]
 801ee42:	f002 bcdb 	b.w	80217fc <_free_r>
 801ee46:	bf00      	nop
 801ee48:	20000144 	.word	0x20000144

0801ee4c <_malloc_r>:
 801ee4c:	f101 030b 	add.w	r3, r1, #11
 801ee50:	2b16      	cmp	r3, #22
 801ee52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee56:	4605      	mov	r5, r0
 801ee58:	d906      	bls.n	801ee68 <_malloc_r+0x1c>
 801ee5a:	f033 0707 	bics.w	r7, r3, #7
 801ee5e:	d504      	bpl.n	801ee6a <_malloc_r+0x1e>
 801ee60:	230c      	movs	r3, #12
 801ee62:	602b      	str	r3, [r5, #0]
 801ee64:	2400      	movs	r4, #0
 801ee66:	e1a5      	b.n	801f1b4 <_malloc_r+0x368>
 801ee68:	2710      	movs	r7, #16
 801ee6a:	42b9      	cmp	r1, r7
 801ee6c:	d8f8      	bhi.n	801ee60 <_malloc_r+0x14>
 801ee6e:	4628      	mov	r0, r5
 801ee70:	f000 fa4e 	bl	801f310 <__malloc_lock>
 801ee74:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801ee78:	4eb0      	ldr	r6, [pc, #704]	; (801f13c <_malloc_r+0x2f0>)
 801ee7a:	d237      	bcs.n	801eeec <_malloc_r+0xa0>
 801ee7c:	f107 0208 	add.w	r2, r7, #8
 801ee80:	4432      	add	r2, r6
 801ee82:	f1a2 0108 	sub.w	r1, r2, #8
 801ee86:	6854      	ldr	r4, [r2, #4]
 801ee88:	428c      	cmp	r4, r1
 801ee8a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801ee8e:	d102      	bne.n	801ee96 <_malloc_r+0x4a>
 801ee90:	68d4      	ldr	r4, [r2, #12]
 801ee92:	42a2      	cmp	r2, r4
 801ee94:	d010      	beq.n	801eeb8 <_malloc_r+0x6c>
 801ee96:	6863      	ldr	r3, [r4, #4]
 801ee98:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801ee9c:	f023 0303 	bic.w	r3, r3, #3
 801eea0:	60ca      	str	r2, [r1, #12]
 801eea2:	4423      	add	r3, r4
 801eea4:	6091      	str	r1, [r2, #8]
 801eea6:	685a      	ldr	r2, [r3, #4]
 801eea8:	f042 0201 	orr.w	r2, r2, #1
 801eeac:	605a      	str	r2, [r3, #4]
 801eeae:	4628      	mov	r0, r5
 801eeb0:	f000 fa34 	bl	801f31c <__malloc_unlock>
 801eeb4:	3408      	adds	r4, #8
 801eeb6:	e17d      	b.n	801f1b4 <_malloc_r+0x368>
 801eeb8:	3302      	adds	r3, #2
 801eeba:	6934      	ldr	r4, [r6, #16]
 801eebc:	49a0      	ldr	r1, [pc, #640]	; (801f140 <_malloc_r+0x2f4>)
 801eebe:	428c      	cmp	r4, r1
 801eec0:	d077      	beq.n	801efb2 <_malloc_r+0x166>
 801eec2:	6862      	ldr	r2, [r4, #4]
 801eec4:	f022 0c03 	bic.w	ip, r2, #3
 801eec8:	ebac 0007 	sub.w	r0, ip, r7
 801eecc:	280f      	cmp	r0, #15
 801eece:	dd48      	ble.n	801ef62 <_malloc_r+0x116>
 801eed0:	19e2      	adds	r2, r4, r7
 801eed2:	f040 0301 	orr.w	r3, r0, #1
 801eed6:	f047 0701 	orr.w	r7, r7, #1
 801eeda:	6067      	str	r7, [r4, #4]
 801eedc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801eee0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801eee4:	6053      	str	r3, [r2, #4]
 801eee6:	f844 000c 	str.w	r0, [r4, ip]
 801eeea:	e7e0      	b.n	801eeae <_malloc_r+0x62>
 801eeec:	0a7b      	lsrs	r3, r7, #9
 801eeee:	d02a      	beq.n	801ef46 <_malloc_r+0xfa>
 801eef0:	2b04      	cmp	r3, #4
 801eef2:	d812      	bhi.n	801ef1a <_malloc_r+0xce>
 801eef4:	09bb      	lsrs	r3, r7, #6
 801eef6:	3338      	adds	r3, #56	; 0x38
 801eef8:	1c5a      	adds	r2, r3, #1
 801eefa:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801eefe:	f1a2 0c08 	sub.w	ip, r2, #8
 801ef02:	6854      	ldr	r4, [r2, #4]
 801ef04:	4564      	cmp	r4, ip
 801ef06:	d006      	beq.n	801ef16 <_malloc_r+0xca>
 801ef08:	6862      	ldr	r2, [r4, #4]
 801ef0a:	f022 0203 	bic.w	r2, r2, #3
 801ef0e:	1bd0      	subs	r0, r2, r7
 801ef10:	280f      	cmp	r0, #15
 801ef12:	dd1c      	ble.n	801ef4e <_malloc_r+0x102>
 801ef14:	3b01      	subs	r3, #1
 801ef16:	3301      	adds	r3, #1
 801ef18:	e7cf      	b.n	801eeba <_malloc_r+0x6e>
 801ef1a:	2b14      	cmp	r3, #20
 801ef1c:	d801      	bhi.n	801ef22 <_malloc_r+0xd6>
 801ef1e:	335b      	adds	r3, #91	; 0x5b
 801ef20:	e7ea      	b.n	801eef8 <_malloc_r+0xac>
 801ef22:	2b54      	cmp	r3, #84	; 0x54
 801ef24:	d802      	bhi.n	801ef2c <_malloc_r+0xe0>
 801ef26:	0b3b      	lsrs	r3, r7, #12
 801ef28:	336e      	adds	r3, #110	; 0x6e
 801ef2a:	e7e5      	b.n	801eef8 <_malloc_r+0xac>
 801ef2c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801ef30:	d802      	bhi.n	801ef38 <_malloc_r+0xec>
 801ef32:	0bfb      	lsrs	r3, r7, #15
 801ef34:	3377      	adds	r3, #119	; 0x77
 801ef36:	e7df      	b.n	801eef8 <_malloc_r+0xac>
 801ef38:	f240 5254 	movw	r2, #1364	; 0x554
 801ef3c:	4293      	cmp	r3, r2
 801ef3e:	d804      	bhi.n	801ef4a <_malloc_r+0xfe>
 801ef40:	0cbb      	lsrs	r3, r7, #18
 801ef42:	337c      	adds	r3, #124	; 0x7c
 801ef44:	e7d8      	b.n	801eef8 <_malloc_r+0xac>
 801ef46:	233f      	movs	r3, #63	; 0x3f
 801ef48:	e7d6      	b.n	801eef8 <_malloc_r+0xac>
 801ef4a:	237e      	movs	r3, #126	; 0x7e
 801ef4c:	e7d4      	b.n	801eef8 <_malloc_r+0xac>
 801ef4e:	2800      	cmp	r0, #0
 801ef50:	68e1      	ldr	r1, [r4, #12]
 801ef52:	db04      	blt.n	801ef5e <_malloc_r+0x112>
 801ef54:	68a3      	ldr	r3, [r4, #8]
 801ef56:	60d9      	str	r1, [r3, #12]
 801ef58:	608b      	str	r3, [r1, #8]
 801ef5a:	18a3      	adds	r3, r4, r2
 801ef5c:	e7a3      	b.n	801eea6 <_malloc_r+0x5a>
 801ef5e:	460c      	mov	r4, r1
 801ef60:	e7d0      	b.n	801ef04 <_malloc_r+0xb8>
 801ef62:	2800      	cmp	r0, #0
 801ef64:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801ef68:	db07      	blt.n	801ef7a <_malloc_r+0x12e>
 801ef6a:	44a4      	add	ip, r4
 801ef6c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ef70:	f043 0301 	orr.w	r3, r3, #1
 801ef74:	f8cc 3004 	str.w	r3, [ip, #4]
 801ef78:	e799      	b.n	801eeae <_malloc_r+0x62>
 801ef7a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801ef7e:	6870      	ldr	r0, [r6, #4]
 801ef80:	f080 8096 	bcs.w	801f0b0 <_malloc_r+0x264>
 801ef84:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801ef88:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801ef8c:	f04f 0c01 	mov.w	ip, #1
 801ef90:	3201      	adds	r2, #1
 801ef92:	fa0c fc0e 	lsl.w	ip, ip, lr
 801ef96:	ea4c 0000 	orr.w	r0, ip, r0
 801ef9a:	6070      	str	r0, [r6, #4]
 801ef9c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801efa0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801efa4:	3808      	subs	r0, #8
 801efa6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801efaa:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801efae:	f8cc 400c 	str.w	r4, [ip, #12]
 801efb2:	2001      	movs	r0, #1
 801efb4:	109a      	asrs	r2, r3, #2
 801efb6:	fa00 f202 	lsl.w	r2, r0, r2
 801efba:	6870      	ldr	r0, [r6, #4]
 801efbc:	4290      	cmp	r0, r2
 801efbe:	d326      	bcc.n	801f00e <_malloc_r+0x1c2>
 801efc0:	4210      	tst	r0, r2
 801efc2:	d106      	bne.n	801efd2 <_malloc_r+0x186>
 801efc4:	f023 0303 	bic.w	r3, r3, #3
 801efc8:	0052      	lsls	r2, r2, #1
 801efca:	4210      	tst	r0, r2
 801efcc:	f103 0304 	add.w	r3, r3, #4
 801efd0:	d0fa      	beq.n	801efc8 <_malloc_r+0x17c>
 801efd2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801efd6:	46c1      	mov	r9, r8
 801efd8:	469e      	mov	lr, r3
 801efda:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801efde:	454c      	cmp	r4, r9
 801efe0:	f040 80ba 	bne.w	801f158 <_malloc_r+0x30c>
 801efe4:	f10e 0e01 	add.w	lr, lr, #1
 801efe8:	f01e 0f03 	tst.w	lr, #3
 801efec:	f109 0908 	add.w	r9, r9, #8
 801eff0:	d1f3      	bne.n	801efda <_malloc_r+0x18e>
 801eff2:	0798      	lsls	r0, r3, #30
 801eff4:	f040 80e4 	bne.w	801f1c0 <_malloc_r+0x374>
 801eff8:	6873      	ldr	r3, [r6, #4]
 801effa:	ea23 0302 	bic.w	r3, r3, r2
 801effe:	6073      	str	r3, [r6, #4]
 801f000:	6870      	ldr	r0, [r6, #4]
 801f002:	0052      	lsls	r2, r2, #1
 801f004:	4290      	cmp	r0, r2
 801f006:	d302      	bcc.n	801f00e <_malloc_r+0x1c2>
 801f008:	2a00      	cmp	r2, #0
 801f00a:	f040 80e6 	bne.w	801f1da <_malloc_r+0x38e>
 801f00e:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801f012:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f016:	f023 0903 	bic.w	r9, r3, #3
 801f01a:	45b9      	cmp	r9, r7
 801f01c:	d304      	bcc.n	801f028 <_malloc_r+0x1dc>
 801f01e:	eba9 0207 	sub.w	r2, r9, r7
 801f022:	2a0f      	cmp	r2, #15
 801f024:	f300 8142 	bgt.w	801f2ac <_malloc_r+0x460>
 801f028:	4b46      	ldr	r3, [pc, #280]	; (801f144 <_malloc_r+0x2f8>)
 801f02a:	6819      	ldr	r1, [r3, #0]
 801f02c:	3110      	adds	r1, #16
 801f02e:	4439      	add	r1, r7
 801f030:	2008      	movs	r0, #8
 801f032:	9101      	str	r1, [sp, #4]
 801f034:	f001 fcf8 	bl	8020a28 <sysconf>
 801f038:	4a43      	ldr	r2, [pc, #268]	; (801f148 <_malloc_r+0x2fc>)
 801f03a:	9901      	ldr	r1, [sp, #4]
 801f03c:	6813      	ldr	r3, [r2, #0]
 801f03e:	3301      	adds	r3, #1
 801f040:	bf1f      	itttt	ne
 801f042:	f101 31ff 	addne.w	r1, r1, #4294967295
 801f046:	1809      	addne	r1, r1, r0
 801f048:	4243      	negne	r3, r0
 801f04a:	4019      	andne	r1, r3
 801f04c:	4680      	mov	r8, r0
 801f04e:	4628      	mov	r0, r5
 801f050:	9101      	str	r1, [sp, #4]
 801f052:	f000 f969 	bl	801f328 <_sbrk_r>
 801f056:	1c42      	adds	r2, r0, #1
 801f058:	eb0a 0b09 	add.w	fp, sl, r9
 801f05c:	4604      	mov	r4, r0
 801f05e:	f000 80f8 	beq.w	801f252 <_malloc_r+0x406>
 801f062:	4583      	cmp	fp, r0
 801f064:	9901      	ldr	r1, [sp, #4]
 801f066:	4a38      	ldr	r2, [pc, #224]	; (801f148 <_malloc_r+0x2fc>)
 801f068:	d902      	bls.n	801f070 <_malloc_r+0x224>
 801f06a:	45b2      	cmp	sl, r6
 801f06c:	f040 80f1 	bne.w	801f252 <_malloc_r+0x406>
 801f070:	4b36      	ldr	r3, [pc, #216]	; (801f14c <_malloc_r+0x300>)
 801f072:	6818      	ldr	r0, [r3, #0]
 801f074:	45a3      	cmp	fp, r4
 801f076:	eb00 0e01 	add.w	lr, r0, r1
 801f07a:	f8c3 e000 	str.w	lr, [r3]
 801f07e:	f108 3cff 	add.w	ip, r8, #4294967295
 801f082:	f040 80ac 	bne.w	801f1de <_malloc_r+0x392>
 801f086:	ea1b 0f0c 	tst.w	fp, ip
 801f08a:	f040 80a8 	bne.w	801f1de <_malloc_r+0x392>
 801f08e:	68b2      	ldr	r2, [r6, #8]
 801f090:	4449      	add	r1, r9
 801f092:	f041 0101 	orr.w	r1, r1, #1
 801f096:	6051      	str	r1, [r2, #4]
 801f098:	4a2d      	ldr	r2, [pc, #180]	; (801f150 <_malloc_r+0x304>)
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	6811      	ldr	r1, [r2, #0]
 801f09e:	428b      	cmp	r3, r1
 801f0a0:	bf88      	it	hi
 801f0a2:	6013      	strhi	r3, [r2, #0]
 801f0a4:	4a2b      	ldr	r2, [pc, #172]	; (801f154 <_malloc_r+0x308>)
 801f0a6:	6811      	ldr	r1, [r2, #0]
 801f0a8:	428b      	cmp	r3, r1
 801f0aa:	bf88      	it	hi
 801f0ac:	6013      	strhi	r3, [r2, #0]
 801f0ae:	e0d0      	b.n	801f252 <_malloc_r+0x406>
 801f0b0:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801f0b4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801f0b8:	d218      	bcs.n	801f0ec <_malloc_r+0x2a0>
 801f0ba:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801f0be:	3238      	adds	r2, #56	; 0x38
 801f0c0:	f102 0e01 	add.w	lr, r2, #1
 801f0c4:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801f0c8:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801f0cc:	45f0      	cmp	r8, lr
 801f0ce:	d12b      	bne.n	801f128 <_malloc_r+0x2dc>
 801f0d0:	1092      	asrs	r2, r2, #2
 801f0d2:	f04f 0c01 	mov.w	ip, #1
 801f0d6:	fa0c f202 	lsl.w	r2, ip, r2
 801f0da:	4310      	orrs	r0, r2
 801f0dc:	6070      	str	r0, [r6, #4]
 801f0de:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801f0e2:	f8c8 4008 	str.w	r4, [r8, #8]
 801f0e6:	f8ce 400c 	str.w	r4, [lr, #12]
 801f0ea:	e762      	b.n	801efb2 <_malloc_r+0x166>
 801f0ec:	2a14      	cmp	r2, #20
 801f0ee:	d801      	bhi.n	801f0f4 <_malloc_r+0x2a8>
 801f0f0:	325b      	adds	r2, #91	; 0x5b
 801f0f2:	e7e5      	b.n	801f0c0 <_malloc_r+0x274>
 801f0f4:	2a54      	cmp	r2, #84	; 0x54
 801f0f6:	d803      	bhi.n	801f100 <_malloc_r+0x2b4>
 801f0f8:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801f0fc:	326e      	adds	r2, #110	; 0x6e
 801f0fe:	e7df      	b.n	801f0c0 <_malloc_r+0x274>
 801f100:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801f104:	d803      	bhi.n	801f10e <_malloc_r+0x2c2>
 801f106:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801f10a:	3277      	adds	r2, #119	; 0x77
 801f10c:	e7d8      	b.n	801f0c0 <_malloc_r+0x274>
 801f10e:	f240 5e54 	movw	lr, #1364	; 0x554
 801f112:	4572      	cmp	r2, lr
 801f114:	bf9a      	itte	ls
 801f116:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801f11a:	327c      	addls	r2, #124	; 0x7c
 801f11c:	227e      	movhi	r2, #126	; 0x7e
 801f11e:	e7cf      	b.n	801f0c0 <_malloc_r+0x274>
 801f120:	f8de e008 	ldr.w	lr, [lr, #8]
 801f124:	45f0      	cmp	r8, lr
 801f126:	d005      	beq.n	801f134 <_malloc_r+0x2e8>
 801f128:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f12c:	f022 0203 	bic.w	r2, r2, #3
 801f130:	4562      	cmp	r2, ip
 801f132:	d8f5      	bhi.n	801f120 <_malloc_r+0x2d4>
 801f134:	f8de 800c 	ldr.w	r8, [lr, #12]
 801f138:	e7d1      	b.n	801f0de <_malloc_r+0x292>
 801f13a:	bf00      	nop
 801f13c:	20000570 	.word	0x20000570
 801f140:	20000578 	.word	0x20000578
 801f144:	2000389c 	.word	0x2000389c
 801f148:	20000978 	.word	0x20000978
 801f14c:	2000386c 	.word	0x2000386c
 801f150:	20003894 	.word	0x20003894
 801f154:	20003898 	.word	0x20003898
 801f158:	6860      	ldr	r0, [r4, #4]
 801f15a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801f15e:	f020 0003 	bic.w	r0, r0, #3
 801f162:	eba0 0a07 	sub.w	sl, r0, r7
 801f166:	f1ba 0f0f 	cmp.w	sl, #15
 801f16a:	dd12      	ble.n	801f192 <_malloc_r+0x346>
 801f16c:	68a3      	ldr	r3, [r4, #8]
 801f16e:	19e2      	adds	r2, r4, r7
 801f170:	f047 0701 	orr.w	r7, r7, #1
 801f174:	6067      	str	r7, [r4, #4]
 801f176:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f17a:	f8cc 3008 	str.w	r3, [ip, #8]
 801f17e:	f04a 0301 	orr.w	r3, sl, #1
 801f182:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801f186:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801f18a:	6053      	str	r3, [r2, #4]
 801f18c:	f844 a000 	str.w	sl, [r4, r0]
 801f190:	e68d      	b.n	801eeae <_malloc_r+0x62>
 801f192:	f1ba 0f00 	cmp.w	sl, #0
 801f196:	db11      	blt.n	801f1bc <_malloc_r+0x370>
 801f198:	4420      	add	r0, r4
 801f19a:	6843      	ldr	r3, [r0, #4]
 801f19c:	f043 0301 	orr.w	r3, r3, #1
 801f1a0:	6043      	str	r3, [r0, #4]
 801f1a2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801f1a6:	4628      	mov	r0, r5
 801f1a8:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f1ac:	f8cc 3008 	str.w	r3, [ip, #8]
 801f1b0:	f000 f8b4 	bl	801f31c <__malloc_unlock>
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	b003      	add	sp, #12
 801f1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1bc:	4664      	mov	r4, ip
 801f1be:	e70e      	b.n	801efde <_malloc_r+0x192>
 801f1c0:	f858 0908 	ldr.w	r0, [r8], #-8
 801f1c4:	4540      	cmp	r0, r8
 801f1c6:	f103 33ff 	add.w	r3, r3, #4294967295
 801f1ca:	f43f af12 	beq.w	801eff2 <_malloc_r+0x1a6>
 801f1ce:	e717      	b.n	801f000 <_malloc_r+0x1b4>
 801f1d0:	3304      	adds	r3, #4
 801f1d2:	0052      	lsls	r2, r2, #1
 801f1d4:	4210      	tst	r0, r2
 801f1d6:	d0fb      	beq.n	801f1d0 <_malloc_r+0x384>
 801f1d8:	e6fb      	b.n	801efd2 <_malloc_r+0x186>
 801f1da:	4673      	mov	r3, lr
 801f1dc:	e7fa      	b.n	801f1d4 <_malloc_r+0x388>
 801f1de:	6810      	ldr	r0, [r2, #0]
 801f1e0:	3001      	adds	r0, #1
 801f1e2:	bf1b      	ittet	ne
 801f1e4:	eba4 0b0b 	subne.w	fp, r4, fp
 801f1e8:	eb0b 020e 	addne.w	r2, fp, lr
 801f1ec:	6014      	streq	r4, [r2, #0]
 801f1ee:	601a      	strne	r2, [r3, #0]
 801f1f0:	f014 0b07 	ands.w	fp, r4, #7
 801f1f4:	bf1a      	itte	ne
 801f1f6:	f1cb 0008 	rsbne	r0, fp, #8
 801f1fa:	1824      	addne	r4, r4, r0
 801f1fc:	4658      	moveq	r0, fp
 801f1fe:	1862      	adds	r2, r4, r1
 801f200:	ea02 010c 	and.w	r1, r2, ip
 801f204:	4480      	add	r8, r0
 801f206:	eba8 0801 	sub.w	r8, r8, r1
 801f20a:	ea08 080c 	and.w	r8, r8, ip
 801f20e:	4641      	mov	r1, r8
 801f210:	4628      	mov	r0, r5
 801f212:	9201      	str	r2, [sp, #4]
 801f214:	f000 f888 	bl	801f328 <_sbrk_r>
 801f218:	1c43      	adds	r3, r0, #1
 801f21a:	9a01      	ldr	r2, [sp, #4]
 801f21c:	4b28      	ldr	r3, [pc, #160]	; (801f2c0 <_malloc_r+0x474>)
 801f21e:	d107      	bne.n	801f230 <_malloc_r+0x3e4>
 801f220:	f1bb 0f00 	cmp.w	fp, #0
 801f224:	d023      	beq.n	801f26e <_malloc_r+0x422>
 801f226:	f1ab 0008 	sub.w	r0, fp, #8
 801f22a:	4410      	add	r0, r2
 801f22c:	f04f 0800 	mov.w	r8, #0
 801f230:	681a      	ldr	r2, [r3, #0]
 801f232:	60b4      	str	r4, [r6, #8]
 801f234:	1b00      	subs	r0, r0, r4
 801f236:	4440      	add	r0, r8
 801f238:	4442      	add	r2, r8
 801f23a:	f040 0001 	orr.w	r0, r0, #1
 801f23e:	45b2      	cmp	sl, r6
 801f240:	601a      	str	r2, [r3, #0]
 801f242:	6060      	str	r0, [r4, #4]
 801f244:	f43f af28 	beq.w	801f098 <_malloc_r+0x24c>
 801f248:	f1b9 0f0f 	cmp.w	r9, #15
 801f24c:	d812      	bhi.n	801f274 <_malloc_r+0x428>
 801f24e:	2301      	movs	r3, #1
 801f250:	6063      	str	r3, [r4, #4]
 801f252:	68b3      	ldr	r3, [r6, #8]
 801f254:	685b      	ldr	r3, [r3, #4]
 801f256:	f023 0303 	bic.w	r3, r3, #3
 801f25a:	42bb      	cmp	r3, r7
 801f25c:	eba3 0207 	sub.w	r2, r3, r7
 801f260:	d301      	bcc.n	801f266 <_malloc_r+0x41a>
 801f262:	2a0f      	cmp	r2, #15
 801f264:	dc22      	bgt.n	801f2ac <_malloc_r+0x460>
 801f266:	4628      	mov	r0, r5
 801f268:	f000 f858 	bl	801f31c <__malloc_unlock>
 801f26c:	e5fa      	b.n	801ee64 <_malloc_r+0x18>
 801f26e:	4610      	mov	r0, r2
 801f270:	46d8      	mov	r8, fp
 801f272:	e7dd      	b.n	801f230 <_malloc_r+0x3e4>
 801f274:	f8da 2004 	ldr.w	r2, [sl, #4]
 801f278:	f1a9 090c 	sub.w	r9, r9, #12
 801f27c:	f029 0907 	bic.w	r9, r9, #7
 801f280:	f002 0201 	and.w	r2, r2, #1
 801f284:	ea42 0209 	orr.w	r2, r2, r9
 801f288:	f8ca 2004 	str.w	r2, [sl, #4]
 801f28c:	2105      	movs	r1, #5
 801f28e:	eb0a 0209 	add.w	r2, sl, r9
 801f292:	f1b9 0f0f 	cmp.w	r9, #15
 801f296:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801f29a:	f67f aefd 	bls.w	801f098 <_malloc_r+0x24c>
 801f29e:	f10a 0108 	add.w	r1, sl, #8
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	f002 faaa 	bl	80217fc <_free_r>
 801f2a8:	4b05      	ldr	r3, [pc, #20]	; (801f2c0 <_malloc_r+0x474>)
 801f2aa:	e6f5      	b.n	801f098 <_malloc_r+0x24c>
 801f2ac:	68b4      	ldr	r4, [r6, #8]
 801f2ae:	f047 0301 	orr.w	r3, r7, #1
 801f2b2:	4427      	add	r7, r4
 801f2b4:	f042 0201 	orr.w	r2, r2, #1
 801f2b8:	6063      	str	r3, [r4, #4]
 801f2ba:	60b7      	str	r7, [r6, #8]
 801f2bc:	607a      	str	r2, [r7, #4]
 801f2be:	e5f6      	b.n	801eeae <_malloc_r+0x62>
 801f2c0:	2000386c 	.word	0x2000386c

0801f2c4 <memcmp>:
 801f2c4:	b510      	push	{r4, lr}
 801f2c6:	3901      	subs	r1, #1
 801f2c8:	4402      	add	r2, r0
 801f2ca:	4290      	cmp	r0, r2
 801f2cc:	d101      	bne.n	801f2d2 <memcmp+0xe>
 801f2ce:	2000      	movs	r0, #0
 801f2d0:	e005      	b.n	801f2de <memcmp+0x1a>
 801f2d2:	7803      	ldrb	r3, [r0, #0]
 801f2d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f2d8:	42a3      	cmp	r3, r4
 801f2da:	d001      	beq.n	801f2e0 <memcmp+0x1c>
 801f2dc:	1b18      	subs	r0, r3, r4
 801f2de:	bd10      	pop	{r4, pc}
 801f2e0:	3001      	adds	r0, #1
 801f2e2:	e7f2      	b.n	801f2ca <memcmp+0x6>

0801f2e4 <memcpy>:
 801f2e4:	440a      	add	r2, r1
 801f2e6:	4291      	cmp	r1, r2
 801f2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 801f2ec:	d100      	bne.n	801f2f0 <memcpy+0xc>
 801f2ee:	4770      	bx	lr
 801f2f0:	b510      	push	{r4, lr}
 801f2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f2fa:	4291      	cmp	r1, r2
 801f2fc:	d1f9      	bne.n	801f2f2 <memcpy+0xe>
 801f2fe:	bd10      	pop	{r4, pc}

0801f300 <memset>:
 801f300:	4402      	add	r2, r0
 801f302:	4603      	mov	r3, r0
 801f304:	4293      	cmp	r3, r2
 801f306:	d100      	bne.n	801f30a <memset+0xa>
 801f308:	4770      	bx	lr
 801f30a:	f803 1b01 	strb.w	r1, [r3], #1
 801f30e:	e7f9      	b.n	801f304 <memset+0x4>

0801f310 <__malloc_lock>:
 801f310:	4801      	ldr	r0, [pc, #4]	; (801f318 <__malloc_lock+0x8>)
 801f312:	f002 bb39 	b.w	8021988 <__retarget_lock_acquire_recursive>
 801f316:	bf00      	nop
 801f318:	200038a1 	.word	0x200038a1

0801f31c <__malloc_unlock>:
 801f31c:	4801      	ldr	r0, [pc, #4]	; (801f324 <__malloc_unlock+0x8>)
 801f31e:	f002 bb34 	b.w	802198a <__retarget_lock_release_recursive>
 801f322:	bf00      	nop
 801f324:	200038a1 	.word	0x200038a1

0801f328 <_sbrk_r>:
 801f328:	b538      	push	{r3, r4, r5, lr}
 801f32a:	4d06      	ldr	r5, [pc, #24]	; (801f344 <_sbrk_r+0x1c>)
 801f32c:	2300      	movs	r3, #0
 801f32e:	4604      	mov	r4, r0
 801f330:	4608      	mov	r0, r1
 801f332:	602b      	str	r3, [r5, #0]
 801f334:	f7ec fcc8 	bl	800bcc8 <_sbrk>
 801f338:	1c43      	adds	r3, r0, #1
 801f33a:	d102      	bne.n	801f342 <_sbrk_r+0x1a>
 801f33c:	682b      	ldr	r3, [r5, #0]
 801f33e:	b103      	cbz	r3, 801f342 <_sbrk_r+0x1a>
 801f340:	6023      	str	r3, [r4, #0]
 801f342:	bd38      	pop	{r3, r4, r5, pc}
 801f344:	200038a4 	.word	0x200038a4

0801f348 <sprintf>:
 801f348:	b40e      	push	{r1, r2, r3}
 801f34a:	b500      	push	{lr}
 801f34c:	b09c      	sub	sp, #112	; 0x70
 801f34e:	ab1d      	add	r3, sp, #116	; 0x74
 801f350:	9002      	str	r0, [sp, #8]
 801f352:	9006      	str	r0, [sp, #24]
 801f354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f358:	4809      	ldr	r0, [pc, #36]	; (801f380 <sprintf+0x38>)
 801f35a:	9107      	str	r1, [sp, #28]
 801f35c:	9104      	str	r1, [sp, #16]
 801f35e:	4909      	ldr	r1, [pc, #36]	; (801f384 <sprintf+0x3c>)
 801f360:	f853 2b04 	ldr.w	r2, [r3], #4
 801f364:	9105      	str	r1, [sp, #20]
 801f366:	6800      	ldr	r0, [r0, #0]
 801f368:	9301      	str	r3, [sp, #4]
 801f36a:	a902      	add	r1, sp, #8
 801f36c:	f000 f978 	bl	801f660 <_svfprintf_r>
 801f370:	9b02      	ldr	r3, [sp, #8]
 801f372:	2200      	movs	r2, #0
 801f374:	701a      	strb	r2, [r3, #0]
 801f376:	b01c      	add	sp, #112	; 0x70
 801f378:	f85d eb04 	ldr.w	lr, [sp], #4
 801f37c:	b003      	add	sp, #12
 801f37e:	4770      	bx	lr
 801f380:	20000144 	.word	0x20000144
 801f384:	ffff0208 	.word	0xffff0208

0801f388 <strcat>:
 801f388:	b510      	push	{r4, lr}
 801f38a:	4602      	mov	r2, r0
 801f38c:	7814      	ldrb	r4, [r2, #0]
 801f38e:	4613      	mov	r3, r2
 801f390:	3201      	adds	r2, #1
 801f392:	2c00      	cmp	r4, #0
 801f394:	d1fa      	bne.n	801f38c <strcat+0x4>
 801f396:	3b01      	subs	r3, #1
 801f398:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f39c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f3a0:	2a00      	cmp	r2, #0
 801f3a2:	d1f9      	bne.n	801f398 <strcat+0x10>
 801f3a4:	bd10      	pop	{r4, pc}
	...

0801f3a8 <strtok>:
 801f3a8:	4b02      	ldr	r3, [pc, #8]	; (801f3b4 <strtok+0xc>)
 801f3aa:	681a      	ldr	r2, [r3, #0]
 801f3ac:	2301      	movs	r3, #1
 801f3ae:	325c      	adds	r2, #92	; 0x5c
 801f3b0:	f000 b802 	b.w	801f3b8 <__strtok_r>
 801f3b4:	20000144 	.word	0x20000144

0801f3b8 <__strtok_r>:
 801f3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3ba:	b908      	cbnz	r0, 801f3c0 <__strtok_r+0x8>
 801f3bc:	6810      	ldr	r0, [r2, #0]
 801f3be:	b188      	cbz	r0, 801f3e4 <__strtok_r+0x2c>
 801f3c0:	4604      	mov	r4, r0
 801f3c2:	4620      	mov	r0, r4
 801f3c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801f3c8:	460f      	mov	r7, r1
 801f3ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 801f3ce:	b91e      	cbnz	r6, 801f3d8 <__strtok_r+0x20>
 801f3d0:	b965      	cbnz	r5, 801f3ec <__strtok_r+0x34>
 801f3d2:	6015      	str	r5, [r2, #0]
 801f3d4:	4628      	mov	r0, r5
 801f3d6:	e005      	b.n	801f3e4 <__strtok_r+0x2c>
 801f3d8:	42b5      	cmp	r5, r6
 801f3da:	d1f6      	bne.n	801f3ca <__strtok_r+0x12>
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d1f0      	bne.n	801f3c2 <__strtok_r+0xa>
 801f3e0:	6014      	str	r4, [r2, #0]
 801f3e2:	7003      	strb	r3, [r0, #0]
 801f3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3e6:	461c      	mov	r4, r3
 801f3e8:	e00c      	b.n	801f404 <__strtok_r+0x4c>
 801f3ea:	b915      	cbnz	r5, 801f3f2 <__strtok_r+0x3a>
 801f3ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f3f0:	460e      	mov	r6, r1
 801f3f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801f3f6:	42ab      	cmp	r3, r5
 801f3f8:	d1f7      	bne.n	801f3ea <__strtok_r+0x32>
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d0f3      	beq.n	801f3e6 <__strtok_r+0x2e>
 801f3fe:	2300      	movs	r3, #0
 801f400:	f804 3c01 	strb.w	r3, [r4, #-1]
 801f404:	6014      	str	r4, [r2, #0]
 801f406:	e7ed      	b.n	801f3e4 <__strtok_r+0x2c>

0801f408 <_strtol_l.constprop.0>:
 801f408:	2b01      	cmp	r3, #1
 801f40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f40e:	d001      	beq.n	801f414 <_strtol_l.constprop.0+0xc>
 801f410:	2b24      	cmp	r3, #36	; 0x24
 801f412:	d906      	bls.n	801f422 <_strtol_l.constprop.0+0x1a>
 801f414:	f7ff fce0 	bl	801edd8 <__errno>
 801f418:	2316      	movs	r3, #22
 801f41a:	6003      	str	r3, [r0, #0]
 801f41c:	2000      	movs	r0, #0
 801f41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f422:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801f508 <_strtol_l.constprop.0+0x100>
 801f426:	460d      	mov	r5, r1
 801f428:	462e      	mov	r6, r5
 801f42a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f42e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801f432:	f017 0708 	ands.w	r7, r7, #8
 801f436:	d1f7      	bne.n	801f428 <_strtol_l.constprop.0+0x20>
 801f438:	2c2d      	cmp	r4, #45	; 0x2d
 801f43a:	d132      	bne.n	801f4a2 <_strtol_l.constprop.0+0x9a>
 801f43c:	782c      	ldrb	r4, [r5, #0]
 801f43e:	2701      	movs	r7, #1
 801f440:	1cb5      	adds	r5, r6, #2
 801f442:	2b00      	cmp	r3, #0
 801f444:	d05b      	beq.n	801f4fe <_strtol_l.constprop.0+0xf6>
 801f446:	2b10      	cmp	r3, #16
 801f448:	d109      	bne.n	801f45e <_strtol_l.constprop.0+0x56>
 801f44a:	2c30      	cmp	r4, #48	; 0x30
 801f44c:	d107      	bne.n	801f45e <_strtol_l.constprop.0+0x56>
 801f44e:	782c      	ldrb	r4, [r5, #0]
 801f450:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f454:	2c58      	cmp	r4, #88	; 0x58
 801f456:	d14d      	bne.n	801f4f4 <_strtol_l.constprop.0+0xec>
 801f458:	786c      	ldrb	r4, [r5, #1]
 801f45a:	2310      	movs	r3, #16
 801f45c:	3502      	adds	r5, #2
 801f45e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801f462:	f108 38ff 	add.w	r8, r8, #4294967295
 801f466:	f04f 0c00 	mov.w	ip, #0
 801f46a:	fbb8 f9f3 	udiv	r9, r8, r3
 801f46e:	4666      	mov	r6, ip
 801f470:	fb03 8a19 	mls	sl, r3, r9, r8
 801f474:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801f478:	f1be 0f09 	cmp.w	lr, #9
 801f47c:	d816      	bhi.n	801f4ac <_strtol_l.constprop.0+0xa4>
 801f47e:	4674      	mov	r4, lr
 801f480:	42a3      	cmp	r3, r4
 801f482:	dd24      	ble.n	801f4ce <_strtol_l.constprop.0+0xc6>
 801f484:	f1bc 0f00 	cmp.w	ip, #0
 801f488:	db1e      	blt.n	801f4c8 <_strtol_l.constprop.0+0xc0>
 801f48a:	45b1      	cmp	r9, r6
 801f48c:	d31c      	bcc.n	801f4c8 <_strtol_l.constprop.0+0xc0>
 801f48e:	d101      	bne.n	801f494 <_strtol_l.constprop.0+0x8c>
 801f490:	45a2      	cmp	sl, r4
 801f492:	db19      	blt.n	801f4c8 <_strtol_l.constprop.0+0xc0>
 801f494:	fb06 4603 	mla	r6, r6, r3, r4
 801f498:	f04f 0c01 	mov.w	ip, #1
 801f49c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f4a0:	e7e8      	b.n	801f474 <_strtol_l.constprop.0+0x6c>
 801f4a2:	2c2b      	cmp	r4, #43	; 0x2b
 801f4a4:	bf04      	itt	eq
 801f4a6:	782c      	ldrbeq	r4, [r5, #0]
 801f4a8:	1cb5      	addeq	r5, r6, #2
 801f4aa:	e7ca      	b.n	801f442 <_strtol_l.constprop.0+0x3a>
 801f4ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801f4b0:	f1be 0f19 	cmp.w	lr, #25
 801f4b4:	d801      	bhi.n	801f4ba <_strtol_l.constprop.0+0xb2>
 801f4b6:	3c37      	subs	r4, #55	; 0x37
 801f4b8:	e7e2      	b.n	801f480 <_strtol_l.constprop.0+0x78>
 801f4ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801f4be:	f1be 0f19 	cmp.w	lr, #25
 801f4c2:	d804      	bhi.n	801f4ce <_strtol_l.constprop.0+0xc6>
 801f4c4:	3c57      	subs	r4, #87	; 0x57
 801f4c6:	e7db      	b.n	801f480 <_strtol_l.constprop.0+0x78>
 801f4c8:	f04f 3cff 	mov.w	ip, #4294967295
 801f4cc:	e7e6      	b.n	801f49c <_strtol_l.constprop.0+0x94>
 801f4ce:	f1bc 0f00 	cmp.w	ip, #0
 801f4d2:	da05      	bge.n	801f4e0 <_strtol_l.constprop.0+0xd8>
 801f4d4:	2322      	movs	r3, #34	; 0x22
 801f4d6:	6003      	str	r3, [r0, #0]
 801f4d8:	4646      	mov	r6, r8
 801f4da:	b942      	cbnz	r2, 801f4ee <_strtol_l.constprop.0+0xe6>
 801f4dc:	4630      	mov	r0, r6
 801f4de:	e79e      	b.n	801f41e <_strtol_l.constprop.0+0x16>
 801f4e0:	b107      	cbz	r7, 801f4e4 <_strtol_l.constprop.0+0xdc>
 801f4e2:	4276      	negs	r6, r6
 801f4e4:	2a00      	cmp	r2, #0
 801f4e6:	d0f9      	beq.n	801f4dc <_strtol_l.constprop.0+0xd4>
 801f4e8:	f1bc 0f00 	cmp.w	ip, #0
 801f4ec:	d000      	beq.n	801f4f0 <_strtol_l.constprop.0+0xe8>
 801f4ee:	1e69      	subs	r1, r5, #1
 801f4f0:	6011      	str	r1, [r2, #0]
 801f4f2:	e7f3      	b.n	801f4dc <_strtol_l.constprop.0+0xd4>
 801f4f4:	2430      	movs	r4, #48	; 0x30
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d1b1      	bne.n	801f45e <_strtol_l.constprop.0+0x56>
 801f4fa:	2308      	movs	r3, #8
 801f4fc:	e7af      	b.n	801f45e <_strtol_l.constprop.0+0x56>
 801f4fe:	2c30      	cmp	r4, #48	; 0x30
 801f500:	d0a5      	beq.n	801f44e <_strtol_l.constprop.0+0x46>
 801f502:	230a      	movs	r3, #10
 801f504:	e7ab      	b.n	801f45e <_strtol_l.constprop.0+0x56>
 801f506:	bf00      	nop
 801f508:	08025db1 	.word	0x08025db1

0801f50c <strtol>:
 801f50c:	4613      	mov	r3, r2
 801f50e:	460a      	mov	r2, r1
 801f510:	4601      	mov	r1, r0
 801f512:	4802      	ldr	r0, [pc, #8]	; (801f51c <strtol+0x10>)
 801f514:	6800      	ldr	r0, [r0, #0]
 801f516:	f7ff bf77 	b.w	801f408 <_strtol_l.constprop.0>
 801f51a:	bf00      	nop
 801f51c:	20000144 	.word	0x20000144

0801f520 <_strtoll_l.constprop.0>:
 801f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f524:	b085      	sub	sp, #20
 801f526:	4688      	mov	r8, r1
 801f528:	9201      	str	r2, [sp, #4]
 801f52a:	4a47      	ldr	r2, [pc, #284]	; (801f648 <_strtoll_l.constprop.0+0x128>)
 801f52c:	9003      	str	r0, [sp, #12]
 801f52e:	461e      	mov	r6, r3
 801f530:	460d      	mov	r5, r1
 801f532:	462b      	mov	r3, r5
 801f534:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f538:	5ca7      	ldrb	r7, [r4, r2]
 801f53a:	f017 0708 	ands.w	r7, r7, #8
 801f53e:	d1f8      	bne.n	801f532 <_strtoll_l.constprop.0+0x12>
 801f540:	2c2d      	cmp	r4, #45	; 0x2d
 801f542:	d147      	bne.n	801f5d4 <_strtoll_l.constprop.0+0xb4>
 801f544:	782c      	ldrb	r4, [r5, #0]
 801f546:	2701      	movs	r7, #1
 801f548:	1c9d      	adds	r5, r3, #2
 801f54a:	2e00      	cmp	r6, #0
 801f54c:	d077      	beq.n	801f63e <_strtoll_l.constprop.0+0x11e>
 801f54e:	2e10      	cmp	r6, #16
 801f550:	d109      	bne.n	801f566 <_strtoll_l.constprop.0+0x46>
 801f552:	2c30      	cmp	r4, #48	; 0x30
 801f554:	d107      	bne.n	801f566 <_strtoll_l.constprop.0+0x46>
 801f556:	782b      	ldrb	r3, [r5, #0]
 801f558:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f55c:	2b58      	cmp	r3, #88	; 0x58
 801f55e:	d169      	bne.n	801f634 <_strtoll_l.constprop.0+0x114>
 801f560:	786c      	ldrb	r4, [r5, #1]
 801f562:	2610      	movs	r6, #16
 801f564:	3502      	adds	r5, #2
 801f566:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 801f56a:	f107 3bff 	add.w	fp, r7, #4294967295
 801f56e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f572:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801f576:	4632      	mov	r2, r6
 801f578:	464b      	mov	r3, r9
 801f57a:	4658      	mov	r0, fp
 801f57c:	4651      	mov	r1, sl
 801f57e:	f7e1 fc61 	bl	8000e44 <__aeabi_uldivmod>
 801f582:	2300      	movs	r3, #0
 801f584:	9202      	str	r2, [sp, #8]
 801f586:	468c      	mov	ip, r1
 801f588:	4602      	mov	r2, r0
 801f58a:	4619      	mov	r1, r3
 801f58c:	4618      	mov	r0, r3
 801f58e:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801f592:	f1be 0f09 	cmp.w	lr, #9
 801f596:	d822      	bhi.n	801f5de <_strtoll_l.constprop.0+0xbe>
 801f598:	4674      	mov	r4, lr
 801f59a:	42a6      	cmp	r6, r4
 801f59c:	dd30      	ble.n	801f600 <_strtoll_l.constprop.0+0xe0>
 801f59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5a2:	d014      	beq.n	801f5ce <_strtoll_l.constprop.0+0xae>
 801f5a4:	4282      	cmp	r2, r0
 801f5a6:	eb7c 0301 	sbcs.w	r3, ip, r1
 801f5aa:	d326      	bcc.n	801f5fa <_strtoll_l.constprop.0+0xda>
 801f5ac:	458c      	cmp	ip, r1
 801f5ae:	bf08      	it	eq
 801f5b0:	4282      	cmpeq	r2, r0
 801f5b2:	d102      	bne.n	801f5ba <_strtoll_l.constprop.0+0x9a>
 801f5b4:	9b02      	ldr	r3, [sp, #8]
 801f5b6:	42a3      	cmp	r3, r4
 801f5b8:	db1f      	blt.n	801f5fa <_strtoll_l.constprop.0+0xda>
 801f5ba:	4371      	muls	r1, r6
 801f5bc:	fb00 1109 	mla	r1, r0, r9, r1
 801f5c0:	fba6 0300 	umull	r0, r3, r6, r0
 801f5c4:	4419      	add	r1, r3
 801f5c6:	1820      	adds	r0, r4, r0
 801f5c8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801f5cc:	2301      	movs	r3, #1
 801f5ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f5d2:	e7dc      	b.n	801f58e <_strtoll_l.constprop.0+0x6e>
 801f5d4:	2c2b      	cmp	r4, #43	; 0x2b
 801f5d6:	bf04      	itt	eq
 801f5d8:	782c      	ldrbeq	r4, [r5, #0]
 801f5da:	1c9d      	addeq	r5, r3, #2
 801f5dc:	e7b5      	b.n	801f54a <_strtoll_l.constprop.0+0x2a>
 801f5de:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801f5e2:	f1be 0f19 	cmp.w	lr, #25
 801f5e6:	d801      	bhi.n	801f5ec <_strtoll_l.constprop.0+0xcc>
 801f5e8:	3c37      	subs	r4, #55	; 0x37
 801f5ea:	e7d6      	b.n	801f59a <_strtoll_l.constprop.0+0x7a>
 801f5ec:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801f5f0:	f1be 0f19 	cmp.w	lr, #25
 801f5f4:	d804      	bhi.n	801f600 <_strtoll_l.constprop.0+0xe0>
 801f5f6:	3c57      	subs	r4, #87	; 0x57
 801f5f8:	e7cf      	b.n	801f59a <_strtoll_l.constprop.0+0x7a>
 801f5fa:	f04f 33ff 	mov.w	r3, #4294967295
 801f5fe:	e7e6      	b.n	801f5ce <_strtoll_l.constprop.0+0xae>
 801f600:	1c5a      	adds	r2, r3, #1
 801f602:	d109      	bne.n	801f618 <_strtoll_l.constprop.0+0xf8>
 801f604:	9a03      	ldr	r2, [sp, #12]
 801f606:	2322      	movs	r3, #34	; 0x22
 801f608:	6013      	str	r3, [r2, #0]
 801f60a:	9b01      	ldr	r3, [sp, #4]
 801f60c:	4658      	mov	r0, fp
 801f60e:	4651      	mov	r1, sl
 801f610:	b953      	cbnz	r3, 801f628 <_strtoll_l.constprop.0+0x108>
 801f612:	b005      	add	sp, #20
 801f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f618:	b117      	cbz	r7, 801f620 <_strtoll_l.constprop.0+0x100>
 801f61a:	4240      	negs	r0, r0
 801f61c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801f620:	9a01      	ldr	r2, [sp, #4]
 801f622:	2a00      	cmp	r2, #0
 801f624:	d0f5      	beq.n	801f612 <_strtoll_l.constprop.0+0xf2>
 801f626:	b10b      	cbz	r3, 801f62c <_strtoll_l.constprop.0+0x10c>
 801f628:	f105 38ff 	add.w	r8, r5, #4294967295
 801f62c:	9b01      	ldr	r3, [sp, #4]
 801f62e:	f8c3 8000 	str.w	r8, [r3]
 801f632:	e7ee      	b.n	801f612 <_strtoll_l.constprop.0+0xf2>
 801f634:	2430      	movs	r4, #48	; 0x30
 801f636:	2e00      	cmp	r6, #0
 801f638:	d195      	bne.n	801f566 <_strtoll_l.constprop.0+0x46>
 801f63a:	2608      	movs	r6, #8
 801f63c:	e793      	b.n	801f566 <_strtoll_l.constprop.0+0x46>
 801f63e:	2c30      	cmp	r4, #48	; 0x30
 801f640:	d089      	beq.n	801f556 <_strtoll_l.constprop.0+0x36>
 801f642:	260a      	movs	r6, #10
 801f644:	e78f      	b.n	801f566 <_strtoll_l.constprop.0+0x46>
 801f646:	bf00      	nop
 801f648:	08025db1 	.word	0x08025db1

0801f64c <strtoll>:
 801f64c:	4613      	mov	r3, r2
 801f64e:	460a      	mov	r2, r1
 801f650:	4601      	mov	r1, r0
 801f652:	4802      	ldr	r0, [pc, #8]	; (801f65c <strtoll+0x10>)
 801f654:	6800      	ldr	r0, [r0, #0]
 801f656:	f7ff bf63 	b.w	801f520 <_strtoll_l.constprop.0>
 801f65a:	bf00      	nop
 801f65c:	20000144 	.word	0x20000144

0801f660 <_svfprintf_r>:
 801f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f664:	ed2d 8b04 	vpush	{d8-d9}
 801f668:	b0cf      	sub	sp, #316	; 0x13c
 801f66a:	4688      	mov	r8, r1
 801f66c:	4691      	mov	r9, r2
 801f66e:	461e      	mov	r6, r3
 801f670:	4682      	mov	sl, r0
 801f672:	f002 f983 	bl	802197c <_localeconv_r>
 801f676:	6803      	ldr	r3, [r0, #0]
 801f678:	9313      	str	r3, [sp, #76]	; 0x4c
 801f67a:	4618      	mov	r0, r3
 801f67c:	f7e0 fdc8 	bl	8000210 <strlen>
 801f680:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801f684:	900d      	str	r0, [sp, #52]	; 0x34
 801f686:	0618      	lsls	r0, r3, #24
 801f688:	d51a      	bpl.n	801f6c0 <_svfprintf_r+0x60>
 801f68a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f68e:	b9bb      	cbnz	r3, 801f6c0 <_svfprintf_r+0x60>
 801f690:	2140      	movs	r1, #64	; 0x40
 801f692:	4650      	mov	r0, sl
 801f694:	f7ff fbda 	bl	801ee4c <_malloc_r>
 801f698:	f8c8 0000 	str.w	r0, [r8]
 801f69c:	f8c8 0010 	str.w	r0, [r8, #16]
 801f6a0:	b958      	cbnz	r0, 801f6ba <_svfprintf_r+0x5a>
 801f6a2:	230c      	movs	r3, #12
 801f6a4:	f8ca 3000 	str.w	r3, [sl]
 801f6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f6ac:	930c      	str	r3, [sp, #48]	; 0x30
 801f6ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f6b0:	b04f      	add	sp, #316	; 0x13c
 801f6b2:	ecbd 8b04 	vpop	{d8-d9}
 801f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6ba:	2340      	movs	r3, #64	; 0x40
 801f6bc:	f8c8 3014 	str.w	r3, [r8, #20]
 801f6c0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801f910 <_svfprintf_r+0x2b0>
 801f6c4:	2500      	movs	r5, #0
 801f6c6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801f6ca:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801f6ce:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801f6d2:	ac25      	add	r4, sp, #148	; 0x94
 801f6d4:	9422      	str	r4, [sp, #136]	; 0x88
 801f6d6:	9505      	str	r5, [sp, #20]
 801f6d8:	950a      	str	r5, [sp, #40]	; 0x28
 801f6da:	9512      	str	r5, [sp, #72]	; 0x48
 801f6dc:	9514      	str	r5, [sp, #80]	; 0x50
 801f6de:	950c      	str	r5, [sp, #48]	; 0x30
 801f6e0:	464b      	mov	r3, r9
 801f6e2:	461d      	mov	r5, r3
 801f6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f6e8:	b10a      	cbz	r2, 801f6ee <_svfprintf_r+0x8e>
 801f6ea:	2a25      	cmp	r2, #37	; 0x25
 801f6ec:	d1f9      	bne.n	801f6e2 <_svfprintf_r+0x82>
 801f6ee:	ebb5 0709 	subs.w	r7, r5, r9
 801f6f2:	d00d      	beq.n	801f710 <_svfprintf_r+0xb0>
 801f6f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f6f6:	443b      	add	r3, r7
 801f6f8:	9324      	str	r3, [sp, #144]	; 0x90
 801f6fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f6fc:	3301      	adds	r3, #1
 801f6fe:	2b07      	cmp	r3, #7
 801f700:	e9c4 9700 	strd	r9, r7, [r4]
 801f704:	9323      	str	r3, [sp, #140]	; 0x8c
 801f706:	dc79      	bgt.n	801f7fc <_svfprintf_r+0x19c>
 801f708:	3408      	adds	r4, #8
 801f70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f70c:	443b      	add	r3, r7
 801f70e:	930c      	str	r3, [sp, #48]	; 0x30
 801f710:	782b      	ldrb	r3, [r5, #0]
 801f712:	2b00      	cmp	r3, #0
 801f714:	f001 8148 	beq.w	80209a8 <_svfprintf_r+0x1348>
 801f718:	2300      	movs	r3, #0
 801f71a:	f04f 32ff 	mov.w	r2, #4294967295
 801f71e:	9204      	str	r2, [sp, #16]
 801f720:	3501      	adds	r5, #1
 801f722:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f726:	9310      	str	r3, [sp, #64]	; 0x40
 801f728:	469b      	mov	fp, r3
 801f72a:	270a      	movs	r7, #10
 801f72c:	222b      	movs	r2, #43	; 0x2b
 801f72e:	462b      	mov	r3, r5
 801f730:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f734:	9106      	str	r1, [sp, #24]
 801f736:	930b      	str	r3, [sp, #44]	; 0x2c
 801f738:	9b06      	ldr	r3, [sp, #24]
 801f73a:	3b20      	subs	r3, #32
 801f73c:	2b5a      	cmp	r3, #90	; 0x5a
 801f73e:	f200 85bf 	bhi.w	80202c0 <_svfprintf_r+0xc60>
 801f742:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f746:	007e      	.short	0x007e
 801f748:	05bd05bd 	.word	0x05bd05bd
 801f74c:	05bd0086 	.word	0x05bd0086
 801f750:	05bd05bd 	.word	0x05bd05bd
 801f754:	05bd0065 	.word	0x05bd0065
 801f758:	008905bd 	.word	0x008905bd
 801f75c:	05bd0093 	.word	0x05bd0093
 801f760:	00960090 	.word	0x00960090
 801f764:	00b305bd 	.word	0x00b305bd
 801f768:	00b600b6 	.word	0x00b600b6
 801f76c:	00b600b6 	.word	0x00b600b6
 801f770:	00b600b6 	.word	0x00b600b6
 801f774:	00b600b6 	.word	0x00b600b6
 801f778:	05bd00b6 	.word	0x05bd00b6
 801f77c:	05bd05bd 	.word	0x05bd05bd
 801f780:	05bd05bd 	.word	0x05bd05bd
 801f784:	05bd05bd 	.word	0x05bd05bd
 801f788:	05bd012c 	.word	0x05bd012c
 801f78c:	00fc00e9 	.word	0x00fc00e9
 801f790:	012c012c 	.word	0x012c012c
 801f794:	05bd012c 	.word	0x05bd012c
 801f798:	05bd05bd 	.word	0x05bd05bd
 801f79c:	00c605bd 	.word	0x00c605bd
 801f7a0:	05bd05bd 	.word	0x05bd05bd
 801f7a4:	05bd0498 	.word	0x05bd0498
 801f7a8:	05bd05bd 	.word	0x05bd05bd
 801f7ac:	05bd04e2 	.word	0x05bd04e2
 801f7b0:	05bd0503 	.word	0x05bd0503
 801f7b4:	052505bd 	.word	0x052505bd
 801f7b8:	05bd05bd 	.word	0x05bd05bd
 801f7bc:	05bd05bd 	.word	0x05bd05bd
 801f7c0:	05bd05bd 	.word	0x05bd05bd
 801f7c4:	05bd05bd 	.word	0x05bd05bd
 801f7c8:	05bd012c 	.word	0x05bd012c
 801f7cc:	00fe00e9 	.word	0x00fe00e9
 801f7d0:	012c012c 	.word	0x012c012c
 801f7d4:	00c9012c 	.word	0x00c9012c
 801f7d8:	00dd00fe 	.word	0x00dd00fe
 801f7dc:	00d605bd 	.word	0x00d605bd
 801f7e0:	047305bd 	.word	0x047305bd
 801f7e4:	04d0049a 	.word	0x04d0049a
 801f7e8:	05bd00dd 	.word	0x05bd00dd
 801f7ec:	007c04e2 	.word	0x007c04e2
 801f7f0:	05bd0505 	.word	0x05bd0505
 801f7f4:	054405bd 	.word	0x054405bd
 801f7f8:	007c05bd 	.word	0x007c05bd
 801f7fc:	aa22      	add	r2, sp, #136	; 0x88
 801f7fe:	4641      	mov	r1, r8
 801f800:	4650      	mov	r0, sl
 801f802:	f002 fc44 	bl	802208e <__ssprint_r>
 801f806:	2800      	cmp	r0, #0
 801f808:	f040 8137 	bne.w	801fa7a <_svfprintf_r+0x41a>
 801f80c:	ac25      	add	r4, sp, #148	; 0x94
 801f80e:	e77c      	b.n	801f70a <_svfprintf_r+0xaa>
 801f810:	4650      	mov	r0, sl
 801f812:	f002 f8b3 	bl	802197c <_localeconv_r>
 801f816:	6843      	ldr	r3, [r0, #4]
 801f818:	9314      	str	r3, [sp, #80]	; 0x50
 801f81a:	4618      	mov	r0, r3
 801f81c:	f7e0 fcf8 	bl	8000210 <strlen>
 801f820:	9012      	str	r0, [sp, #72]	; 0x48
 801f822:	4650      	mov	r0, sl
 801f824:	f002 f8aa 	bl	802197c <_localeconv_r>
 801f828:	6883      	ldr	r3, [r0, #8]
 801f82a:	930a      	str	r3, [sp, #40]	; 0x28
 801f82c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f82e:	222b      	movs	r2, #43	; 0x2b
 801f830:	b12b      	cbz	r3, 801f83e <_svfprintf_r+0x1de>
 801f832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f834:	b11b      	cbz	r3, 801f83e <_svfprintf_r+0x1de>
 801f836:	781b      	ldrb	r3, [r3, #0]
 801f838:	b10b      	cbz	r3, 801f83e <_svfprintf_r+0x1de>
 801f83a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801f83e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f840:	e775      	b.n	801f72e <_svfprintf_r+0xce>
 801f842:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801f846:	2b00      	cmp	r3, #0
 801f848:	d1f9      	bne.n	801f83e <_svfprintf_r+0x1de>
 801f84a:	2320      	movs	r3, #32
 801f84c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f850:	e7f5      	b.n	801f83e <_svfprintf_r+0x1de>
 801f852:	f04b 0b01 	orr.w	fp, fp, #1
 801f856:	e7f2      	b.n	801f83e <_svfprintf_r+0x1de>
 801f858:	f856 3b04 	ldr.w	r3, [r6], #4
 801f85c:	9310      	str	r3, [sp, #64]	; 0x40
 801f85e:	2b00      	cmp	r3, #0
 801f860:	daed      	bge.n	801f83e <_svfprintf_r+0x1de>
 801f862:	425b      	negs	r3, r3
 801f864:	9310      	str	r3, [sp, #64]	; 0x40
 801f866:	f04b 0b04 	orr.w	fp, fp, #4
 801f86a:	e7e8      	b.n	801f83e <_svfprintf_r+0x1de>
 801f86c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801f870:	e7e5      	b.n	801f83e <_svfprintf_r+0x1de>
 801f872:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f874:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f878:	9306      	str	r3, [sp, #24]
 801f87a:	2b2a      	cmp	r3, #42	; 0x2a
 801f87c:	d113      	bne.n	801f8a6 <_svfprintf_r+0x246>
 801f87e:	f856 0b04 	ldr.w	r0, [r6], #4
 801f882:	950b      	str	r5, [sp, #44]	; 0x2c
 801f884:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801f888:	9304      	str	r3, [sp, #16]
 801f88a:	e7d8      	b.n	801f83e <_svfprintf_r+0x1de>
 801f88c:	9904      	ldr	r1, [sp, #16]
 801f88e:	fb07 3301 	mla	r3, r7, r1, r3
 801f892:	9304      	str	r3, [sp, #16]
 801f894:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f898:	9306      	str	r3, [sp, #24]
 801f89a:	9b06      	ldr	r3, [sp, #24]
 801f89c:	3b30      	subs	r3, #48	; 0x30
 801f89e:	2b09      	cmp	r3, #9
 801f8a0:	d9f4      	bls.n	801f88c <_svfprintf_r+0x22c>
 801f8a2:	950b      	str	r5, [sp, #44]	; 0x2c
 801f8a4:	e748      	b.n	801f738 <_svfprintf_r+0xd8>
 801f8a6:	2300      	movs	r3, #0
 801f8a8:	9304      	str	r3, [sp, #16]
 801f8aa:	e7f6      	b.n	801f89a <_svfprintf_r+0x23a>
 801f8ac:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801f8b0:	e7c5      	b.n	801f83e <_svfprintf_r+0x1de>
 801f8b2:	2300      	movs	r3, #0
 801f8b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f8b6:	9310      	str	r3, [sp, #64]	; 0x40
 801f8b8:	9b06      	ldr	r3, [sp, #24]
 801f8ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f8bc:	3b30      	subs	r3, #48	; 0x30
 801f8be:	fb07 3301 	mla	r3, r7, r1, r3
 801f8c2:	9310      	str	r3, [sp, #64]	; 0x40
 801f8c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f8c8:	9306      	str	r3, [sp, #24]
 801f8ca:	3b30      	subs	r3, #48	; 0x30
 801f8cc:	2b09      	cmp	r3, #9
 801f8ce:	d9f3      	bls.n	801f8b8 <_svfprintf_r+0x258>
 801f8d0:	e7e7      	b.n	801f8a2 <_svfprintf_r+0x242>
 801f8d2:	f04b 0b08 	orr.w	fp, fp, #8
 801f8d6:	e7b2      	b.n	801f83e <_svfprintf_r+0x1de>
 801f8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8da:	781b      	ldrb	r3, [r3, #0]
 801f8dc:	2b68      	cmp	r3, #104	; 0x68
 801f8de:	bf01      	itttt	eq
 801f8e0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801f8e2:	3301      	addeq	r3, #1
 801f8e4:	930b      	streq	r3, [sp, #44]	; 0x2c
 801f8e6:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801f8ea:	bf18      	it	ne
 801f8ec:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801f8f0:	e7a5      	b.n	801f83e <_svfprintf_r+0x1de>
 801f8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8f4:	781b      	ldrb	r3, [r3, #0]
 801f8f6:	2b6c      	cmp	r3, #108	; 0x6c
 801f8f8:	d105      	bne.n	801f906 <_svfprintf_r+0x2a6>
 801f8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8fc:	3301      	adds	r3, #1
 801f8fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801f900:	f04b 0b20 	orr.w	fp, fp, #32
 801f904:	e79b      	b.n	801f83e <_svfprintf_r+0x1de>
 801f906:	f04b 0b10 	orr.w	fp, fp, #16
 801f90a:	e798      	b.n	801f83e <_svfprintf_r+0x1de>
 801f90c:	f3af 8000 	nop.w
	...
 801f918:	4632      	mov	r2, r6
 801f91a:	2000      	movs	r0, #0
 801f91c:	f852 3b04 	ldr.w	r3, [r2], #4
 801f920:	9207      	str	r2, [sp, #28]
 801f922:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801f926:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801f92a:	2301      	movs	r3, #1
 801f92c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801f930:	9003      	str	r0, [sp, #12]
 801f932:	9304      	str	r3, [sp, #16]
 801f934:	4606      	mov	r6, r0
 801f936:	4605      	mov	r5, r0
 801f938:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 801f93c:	e1bc      	b.n	801fcb8 <_svfprintf_r+0x658>
 801f93e:	f04b 0b10 	orr.w	fp, fp, #16
 801f942:	f01b 0f20 	tst.w	fp, #32
 801f946:	d012      	beq.n	801f96e <_svfprintf_r+0x30e>
 801f948:	1df3      	adds	r3, r6, #7
 801f94a:	f023 0307 	bic.w	r3, r3, #7
 801f94e:	461a      	mov	r2, r3
 801f950:	685d      	ldr	r5, [r3, #4]
 801f952:	f852 6b08 	ldr.w	r6, [r2], #8
 801f956:	9207      	str	r2, [sp, #28]
 801f958:	2d00      	cmp	r5, #0
 801f95a:	da06      	bge.n	801f96a <_svfprintf_r+0x30a>
 801f95c:	4276      	negs	r6, r6
 801f95e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801f962:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801f966:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f96a:	2301      	movs	r3, #1
 801f96c:	e396      	b.n	802009c <_svfprintf_r+0xa3c>
 801f96e:	4633      	mov	r3, r6
 801f970:	f01b 0f10 	tst.w	fp, #16
 801f974:	f853 5b04 	ldr.w	r5, [r3], #4
 801f978:	9307      	str	r3, [sp, #28]
 801f97a:	d002      	beq.n	801f982 <_svfprintf_r+0x322>
 801f97c:	462e      	mov	r6, r5
 801f97e:	17ed      	asrs	r5, r5, #31
 801f980:	e7ea      	b.n	801f958 <_svfprintf_r+0x2f8>
 801f982:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801f986:	d003      	beq.n	801f990 <_svfprintf_r+0x330>
 801f988:	b22e      	sxth	r6, r5
 801f98a:	f345 35c0 	sbfx	r5, r5, #15, #1
 801f98e:	e7e3      	b.n	801f958 <_svfprintf_r+0x2f8>
 801f990:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801f994:	d0f2      	beq.n	801f97c <_svfprintf_r+0x31c>
 801f996:	b26e      	sxtb	r6, r5
 801f998:	f345 15c0 	sbfx	r5, r5, #7, #1
 801f99c:	e7dc      	b.n	801f958 <_svfprintf_r+0x2f8>
 801f99e:	3607      	adds	r6, #7
 801f9a0:	f026 0307 	bic.w	r3, r6, #7
 801f9a4:	ecb3 7b02 	vldmia	r3!, {d7}
 801f9a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801f9ac:	9307      	str	r3, [sp, #28]
 801f9ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9b0:	ee09 3a10 	vmov	s18, r3
 801f9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f9ba:	ee09 3a90 	vmov	s19, r3
 801f9be:	f04f 32ff 	mov.w	r2, #4294967295
 801f9c2:	4b3a      	ldr	r3, [pc, #232]	; (801faac <_svfprintf_r+0x44c>)
 801f9c4:	ec51 0b19 	vmov	r0, r1, d9
 801f9c8:	f7e1 f8d0 	bl	8000b6c <__aeabi_dcmpun>
 801f9cc:	bb10      	cbnz	r0, 801fa14 <_svfprintf_r+0x3b4>
 801f9ce:	4b37      	ldr	r3, [pc, #220]	; (801faac <_svfprintf_r+0x44c>)
 801f9d0:	ec51 0b19 	vmov	r0, r1, d9
 801f9d4:	f04f 32ff 	mov.w	r2, #4294967295
 801f9d8:	f7e1 f8aa 	bl	8000b30 <__aeabi_dcmple>
 801f9dc:	b9d0      	cbnz	r0, 801fa14 <_svfprintf_r+0x3b4>
 801f9de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	f7e1 f899 	bl	8000b1c <__aeabi_dcmplt>
 801f9ea:	b110      	cbz	r0, 801f9f2 <_svfprintf_r+0x392>
 801f9ec:	232d      	movs	r3, #45	; 0x2d
 801f9ee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f9f2:	4a2f      	ldr	r2, [pc, #188]	; (801fab0 <_svfprintf_r+0x450>)
 801f9f4:	482f      	ldr	r0, [pc, #188]	; (801fab4 <_svfprintf_r+0x454>)
 801f9f6:	9b06      	ldr	r3, [sp, #24]
 801f9f8:	2100      	movs	r1, #0
 801f9fa:	2b47      	cmp	r3, #71	; 0x47
 801f9fc:	bfd4      	ite	le
 801f9fe:	4691      	movle	r9, r2
 801fa00:	4681      	movgt	r9, r0
 801fa02:	2303      	movs	r3, #3
 801fa04:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801fa08:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801fa0c:	2600      	movs	r6, #0
 801fa0e:	4633      	mov	r3, r6
 801fa10:	f001 b800 	b.w	8020a14 <_svfprintf_r+0x13b4>
 801fa14:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801fa18:	4610      	mov	r0, r2
 801fa1a:	4619      	mov	r1, r3
 801fa1c:	f7e1 f8a6 	bl	8000b6c <__aeabi_dcmpun>
 801fa20:	b140      	cbz	r0, 801fa34 <_svfprintf_r+0x3d4>
 801fa22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa24:	4a24      	ldr	r2, [pc, #144]	; (801fab8 <_svfprintf_r+0x458>)
 801fa26:	4825      	ldr	r0, [pc, #148]	; (801fabc <_svfprintf_r+0x45c>)
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	bfbc      	itt	lt
 801fa2c:	232d      	movlt	r3, #45	; 0x2d
 801fa2e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801fa32:	e7e0      	b.n	801f9f6 <_svfprintf_r+0x396>
 801fa34:	9b06      	ldr	r3, [sp, #24]
 801fa36:	f023 0320 	bic.w	r3, r3, #32
 801fa3a:	2b41      	cmp	r3, #65	; 0x41
 801fa3c:	9308      	str	r3, [sp, #32]
 801fa3e:	d125      	bne.n	801fa8c <_svfprintf_r+0x42c>
 801fa40:	2330      	movs	r3, #48	; 0x30
 801fa42:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801fa46:	9b06      	ldr	r3, [sp, #24]
 801fa48:	2b61      	cmp	r3, #97	; 0x61
 801fa4a:	bf0c      	ite	eq
 801fa4c:	2378      	moveq	r3, #120	; 0x78
 801fa4e:	2358      	movne	r3, #88	; 0x58
 801fa50:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801fa54:	9b04      	ldr	r3, [sp, #16]
 801fa56:	2b63      	cmp	r3, #99	; 0x63
 801fa58:	f04b 0b02 	orr.w	fp, fp, #2
 801fa5c:	dd30      	ble.n	801fac0 <_svfprintf_r+0x460>
 801fa5e:	1c59      	adds	r1, r3, #1
 801fa60:	4650      	mov	r0, sl
 801fa62:	f7ff f9f3 	bl	801ee4c <_malloc_r>
 801fa66:	4681      	mov	r9, r0
 801fa68:	2800      	cmp	r0, #0
 801fa6a:	f040 81fd 	bne.w	801fe68 <_svfprintf_r+0x808>
 801fa6e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801fa72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa76:	f8a8 300c 	strh.w	r3, [r8, #12]
 801fa7a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801fa7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 801fa82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa84:	bf18      	it	ne
 801fa86:	f04f 33ff 	movne.w	r3, #4294967295
 801fa8a:	e60f      	b.n	801f6ac <_svfprintf_r+0x4c>
 801fa8c:	9b04      	ldr	r3, [sp, #16]
 801fa8e:	3301      	adds	r3, #1
 801fa90:	f000 81ec 	beq.w	801fe6c <_svfprintf_r+0x80c>
 801fa94:	9b08      	ldr	r3, [sp, #32]
 801fa96:	2b47      	cmp	r3, #71	; 0x47
 801fa98:	f040 81eb 	bne.w	801fe72 <_svfprintf_r+0x812>
 801fa9c:	9b04      	ldr	r3, [sp, #16]
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	f040 81e7 	bne.w	801fe72 <_svfprintf_r+0x812>
 801faa4:	9303      	str	r3, [sp, #12]
 801faa6:	2301      	movs	r3, #1
 801faa8:	9304      	str	r3, [sp, #16]
 801faaa:	e00c      	b.n	801fac6 <_svfprintf_r+0x466>
 801faac:	7fefffff 	.word	0x7fefffff
 801fab0:	08025d5c 	.word	0x08025d5c
 801fab4:	08025d60 	.word	0x08025d60
 801fab8:	08025d64 	.word	0x08025d64
 801fabc:	08025d68 	.word	0x08025d68
 801fac0:	9003      	str	r0, [sp, #12]
 801fac2:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 801fac6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801faca:	9311      	str	r3, [sp, #68]	; 0x44
 801facc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801face:	2b00      	cmp	r3, #0
 801fad0:	f280 81d1 	bge.w	801fe76 <_svfprintf_r+0x816>
 801fad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fad6:	ee08 3a10 	vmov	s16, r3
 801fada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fadc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fae0:	ee08 3a90 	vmov	s17, r3
 801fae4:	232d      	movs	r3, #45	; 0x2d
 801fae6:	9318      	str	r3, [sp, #96]	; 0x60
 801fae8:	9b08      	ldr	r3, [sp, #32]
 801faea:	2b41      	cmp	r3, #65	; 0x41
 801faec:	f040 81e1 	bne.w	801feb2 <_svfprintf_r+0x852>
 801faf0:	eeb0 0a48 	vmov.f32	s0, s16
 801faf4:	eef0 0a68 	vmov.f32	s1, s17
 801faf8:	a81c      	add	r0, sp, #112	; 0x70
 801fafa:	f002 fa7d 	bl	8021ff8 <frexp>
 801fafe:	2200      	movs	r2, #0
 801fb00:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801fb04:	ec51 0b10 	vmov	r0, r1, d0
 801fb08:	f7e0 fd96 	bl	8000638 <__aeabi_dmul>
 801fb0c:	2200      	movs	r2, #0
 801fb0e:	2300      	movs	r3, #0
 801fb10:	4606      	mov	r6, r0
 801fb12:	460f      	mov	r7, r1
 801fb14:	f7e0 fff8 	bl	8000b08 <__aeabi_dcmpeq>
 801fb18:	b108      	cbz	r0, 801fb1e <_svfprintf_r+0x4be>
 801fb1a:	2301      	movs	r3, #1
 801fb1c:	931c      	str	r3, [sp, #112]	; 0x70
 801fb1e:	4ba7      	ldr	r3, [pc, #668]	; (801fdbc <_svfprintf_r+0x75c>)
 801fb20:	4aa7      	ldr	r2, [pc, #668]	; (801fdc0 <_svfprintf_r+0x760>)
 801fb22:	9906      	ldr	r1, [sp, #24]
 801fb24:	2961      	cmp	r1, #97	; 0x61
 801fb26:	bf18      	it	ne
 801fb28:	461a      	movne	r2, r3
 801fb2a:	9b04      	ldr	r3, [sp, #16]
 801fb2c:	9217      	str	r2, [sp, #92]	; 0x5c
 801fb2e:	3b01      	subs	r3, #1
 801fb30:	9305      	str	r3, [sp, #20]
 801fb32:	464d      	mov	r5, r9
 801fb34:	4ba3      	ldr	r3, [pc, #652]	; (801fdc4 <_svfprintf_r+0x764>)
 801fb36:	2200      	movs	r2, #0
 801fb38:	4630      	mov	r0, r6
 801fb3a:	4639      	mov	r1, r7
 801fb3c:	f7e0 fd7c 	bl	8000638 <__aeabi_dmul>
 801fb40:	460f      	mov	r7, r1
 801fb42:	4606      	mov	r6, r0
 801fb44:	f7e1 f828 	bl	8000b98 <__aeabi_d2iz>
 801fb48:	9019      	str	r0, [sp, #100]	; 0x64
 801fb4a:	f7e0 fd0b 	bl	8000564 <__aeabi_i2d>
 801fb4e:	4602      	mov	r2, r0
 801fb50:	460b      	mov	r3, r1
 801fb52:	4630      	mov	r0, r6
 801fb54:	4639      	mov	r1, r7
 801fb56:	f7e0 fbb7 	bl	80002c8 <__aeabi_dsub>
 801fb5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fb5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fb5e:	5c9b      	ldrb	r3, [r3, r2]
 801fb60:	f805 3b01 	strb.w	r3, [r5], #1
 801fb64:	9b05      	ldr	r3, [sp, #20]
 801fb66:	9309      	str	r3, [sp, #36]	; 0x24
 801fb68:	1c5a      	adds	r2, r3, #1
 801fb6a:	4606      	mov	r6, r0
 801fb6c:	460f      	mov	r7, r1
 801fb6e:	d007      	beq.n	801fb80 <_svfprintf_r+0x520>
 801fb70:	3b01      	subs	r3, #1
 801fb72:	9305      	str	r3, [sp, #20]
 801fb74:	2200      	movs	r2, #0
 801fb76:	2300      	movs	r3, #0
 801fb78:	f7e0 ffc6 	bl	8000b08 <__aeabi_dcmpeq>
 801fb7c:	2800      	cmp	r0, #0
 801fb7e:	d0d9      	beq.n	801fb34 <_svfprintf_r+0x4d4>
 801fb80:	4b91      	ldr	r3, [pc, #580]	; (801fdc8 <_svfprintf_r+0x768>)
 801fb82:	2200      	movs	r2, #0
 801fb84:	4630      	mov	r0, r6
 801fb86:	4639      	mov	r1, r7
 801fb88:	f7e0 ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 801fb8c:	b960      	cbnz	r0, 801fba8 <_svfprintf_r+0x548>
 801fb8e:	4b8e      	ldr	r3, [pc, #568]	; (801fdc8 <_svfprintf_r+0x768>)
 801fb90:	2200      	movs	r2, #0
 801fb92:	4630      	mov	r0, r6
 801fb94:	4639      	mov	r1, r7
 801fb96:	f7e0 ffb7 	bl	8000b08 <__aeabi_dcmpeq>
 801fb9a:	2800      	cmp	r0, #0
 801fb9c:	f000 8184 	beq.w	801fea8 <_svfprintf_r+0x848>
 801fba0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fba2:	07db      	lsls	r3, r3, #31
 801fba4:	f140 8180 	bpl.w	801fea8 <_svfprintf_r+0x848>
 801fba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fbaa:	9520      	str	r5, [sp, #128]	; 0x80
 801fbac:	7bd9      	ldrb	r1, [r3, #15]
 801fbae:	2030      	movs	r0, #48	; 0x30
 801fbb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fbb2:	1e53      	subs	r3, r2, #1
 801fbb4:	9320      	str	r3, [sp, #128]	; 0x80
 801fbb6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801fbba:	428b      	cmp	r3, r1
 801fbbc:	f000 8163 	beq.w	801fe86 <_svfprintf_r+0x826>
 801fbc0:	2b39      	cmp	r3, #57	; 0x39
 801fbc2:	bf0b      	itete	eq
 801fbc4:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801fbc6:	3301      	addne	r3, #1
 801fbc8:	7a9b      	ldrbeq	r3, [r3, #10]
 801fbca:	b2db      	uxtbne	r3, r3
 801fbcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fbd0:	eba5 0309 	sub.w	r3, r5, r9
 801fbd4:	9305      	str	r3, [sp, #20]
 801fbd6:	9b08      	ldr	r3, [sp, #32]
 801fbd8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801fbda:	2b47      	cmp	r3, #71	; 0x47
 801fbdc:	f040 81b1 	bne.w	801ff42 <_svfprintf_r+0x8e2>
 801fbe0:	1cef      	adds	r7, r5, #3
 801fbe2:	db03      	blt.n	801fbec <_svfprintf_r+0x58c>
 801fbe4:	9b04      	ldr	r3, [sp, #16]
 801fbe6:	42ab      	cmp	r3, r5
 801fbe8:	f280 81d6 	bge.w	801ff98 <_svfprintf_r+0x938>
 801fbec:	9b06      	ldr	r3, [sp, #24]
 801fbee:	3b02      	subs	r3, #2
 801fbf0:	9306      	str	r3, [sp, #24]
 801fbf2:	9906      	ldr	r1, [sp, #24]
 801fbf4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801fbf8:	f021 0120 	bic.w	r1, r1, #32
 801fbfc:	2941      	cmp	r1, #65	; 0x41
 801fbfe:	bf08      	it	eq
 801fc00:	320f      	addeq	r2, #15
 801fc02:	f105 33ff 	add.w	r3, r5, #4294967295
 801fc06:	bf06      	itte	eq
 801fc08:	b2d2      	uxtbeq	r2, r2
 801fc0a:	2101      	moveq	r1, #1
 801fc0c:	2100      	movne	r1, #0
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	931c      	str	r3, [sp, #112]	; 0x70
 801fc12:	bfb8      	it	lt
 801fc14:	f1c5 0301 	rsblt	r3, r5, #1
 801fc18:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801fc1c:	bfb4      	ite	lt
 801fc1e:	222d      	movlt	r2, #45	; 0x2d
 801fc20:	222b      	movge	r2, #43	; 0x2b
 801fc22:	2b09      	cmp	r3, #9
 801fc24:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801fc28:	f340 81a4 	ble.w	801ff74 <_svfprintf_r+0x914>
 801fc2c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801fc30:	260a      	movs	r6, #10
 801fc32:	4611      	mov	r1, r2
 801fc34:	fb93 f5f6 	sdiv	r5, r3, r6
 801fc38:	fb06 3015 	mls	r0, r6, r5, r3
 801fc3c:	3030      	adds	r0, #48	; 0x30
 801fc3e:	f801 0c01 	strb.w	r0, [r1, #-1]
 801fc42:	4618      	mov	r0, r3
 801fc44:	2863      	cmp	r0, #99	; 0x63
 801fc46:	f102 32ff 	add.w	r2, r2, #4294967295
 801fc4a:	462b      	mov	r3, r5
 801fc4c:	dcf1      	bgt.n	801fc32 <_svfprintf_r+0x5d2>
 801fc4e:	3330      	adds	r3, #48	; 0x30
 801fc50:	1e88      	subs	r0, r1, #2
 801fc52:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fc56:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801fc5a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801fc5e:	4603      	mov	r3, r0
 801fc60:	42ab      	cmp	r3, r5
 801fc62:	f0c0 8182 	bcc.w	801ff6a <_svfprintf_r+0x90a>
 801fc66:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801fc6a:	1a52      	subs	r2, r2, r1
 801fc6c:	42a8      	cmp	r0, r5
 801fc6e:	bf88      	it	hi
 801fc70:	2200      	movhi	r2, #0
 801fc72:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801fc76:	441a      	add	r2, r3
 801fc78:	ab1e      	add	r3, sp, #120	; 0x78
 801fc7a:	1ad3      	subs	r3, r2, r3
 801fc7c:	9a05      	ldr	r2, [sp, #20]
 801fc7e:	9315      	str	r3, [sp, #84]	; 0x54
 801fc80:	2a01      	cmp	r2, #1
 801fc82:	4413      	add	r3, r2
 801fc84:	9304      	str	r3, [sp, #16]
 801fc86:	dc02      	bgt.n	801fc8e <_svfprintf_r+0x62e>
 801fc88:	f01b 0f01 	tst.w	fp, #1
 801fc8c:	d003      	beq.n	801fc96 <_svfprintf_r+0x636>
 801fc8e:	9b04      	ldr	r3, [sp, #16]
 801fc90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fc92:	4413      	add	r3, r2
 801fc94:	9304      	str	r3, [sp, #16]
 801fc96:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801fc9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fc9e:	9311      	str	r3, [sp, #68]	; 0x44
 801fca0:	2300      	movs	r3, #0
 801fca2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801fca6:	461d      	mov	r5, r3
 801fca8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fcaa:	b113      	cbz	r3, 801fcb2 <_svfprintf_r+0x652>
 801fcac:	232d      	movs	r3, #45	; 0x2d
 801fcae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801fcb2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801fcb6:	2600      	movs	r6, #0
 801fcb8:	9b04      	ldr	r3, [sp, #16]
 801fcba:	42b3      	cmp	r3, r6
 801fcbc:	bfb8      	it	lt
 801fcbe:	4633      	movlt	r3, r6
 801fcc0:	9311      	str	r3, [sp, #68]	; 0x44
 801fcc2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801fcc6:	b113      	cbz	r3, 801fcce <_svfprintf_r+0x66e>
 801fcc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fcca:	3301      	adds	r3, #1
 801fccc:	9311      	str	r3, [sp, #68]	; 0x44
 801fcce:	f01b 0302 	ands.w	r3, fp, #2
 801fcd2:	9317      	str	r3, [sp, #92]	; 0x5c
 801fcd4:	bf1e      	ittt	ne
 801fcd6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801fcd8:	3302      	addne	r3, #2
 801fcda:	9311      	strne	r3, [sp, #68]	; 0x44
 801fcdc:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801fce0:	9318      	str	r3, [sp, #96]	; 0x60
 801fce2:	d11f      	bne.n	801fd24 <_svfprintf_r+0x6c4>
 801fce4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801fce8:	1a9f      	subs	r7, r3, r2
 801fcea:	2f00      	cmp	r7, #0
 801fcec:	dd1a      	ble.n	801fd24 <_svfprintf_r+0x6c4>
 801fcee:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801fcf2:	4836      	ldr	r0, [pc, #216]	; (801fdcc <_svfprintf_r+0x76c>)
 801fcf4:	6020      	str	r0, [r4, #0]
 801fcf6:	2f10      	cmp	r7, #16
 801fcf8:	f103 0301 	add.w	r3, r3, #1
 801fcfc:	f104 0108 	add.w	r1, r4, #8
 801fd00:	f300 82ed 	bgt.w	80202de <_svfprintf_r+0xc7e>
 801fd04:	6067      	str	r7, [r4, #4]
 801fd06:	2b07      	cmp	r3, #7
 801fd08:	4417      	add	r7, r2
 801fd0a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801fd0e:	f340 82f9 	ble.w	8020304 <_svfprintf_r+0xca4>
 801fd12:	aa22      	add	r2, sp, #136	; 0x88
 801fd14:	4641      	mov	r1, r8
 801fd16:	4650      	mov	r0, sl
 801fd18:	f002 f9b9 	bl	802208e <__ssprint_r>
 801fd1c:	2800      	cmp	r0, #0
 801fd1e:	f040 8621 	bne.w	8020964 <_svfprintf_r+0x1304>
 801fd22:	ac25      	add	r4, sp, #148	; 0x94
 801fd24:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801fd28:	b173      	cbz	r3, 801fd48 <_svfprintf_r+0x6e8>
 801fd2a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801fd2e:	6023      	str	r3, [r4, #0]
 801fd30:	2301      	movs	r3, #1
 801fd32:	6063      	str	r3, [r4, #4]
 801fd34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd36:	3301      	adds	r3, #1
 801fd38:	9324      	str	r3, [sp, #144]	; 0x90
 801fd3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fd3c:	3301      	adds	r3, #1
 801fd3e:	2b07      	cmp	r3, #7
 801fd40:	9323      	str	r3, [sp, #140]	; 0x8c
 801fd42:	f300 82e1 	bgt.w	8020308 <_svfprintf_r+0xca8>
 801fd46:	3408      	adds	r4, #8
 801fd48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fd4a:	b16b      	cbz	r3, 801fd68 <_svfprintf_r+0x708>
 801fd4c:	ab1b      	add	r3, sp, #108	; 0x6c
 801fd4e:	6023      	str	r3, [r4, #0]
 801fd50:	2302      	movs	r3, #2
 801fd52:	6063      	str	r3, [r4, #4]
 801fd54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd56:	3302      	adds	r3, #2
 801fd58:	9324      	str	r3, [sp, #144]	; 0x90
 801fd5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fd5c:	3301      	adds	r3, #1
 801fd5e:	2b07      	cmp	r3, #7
 801fd60:	9323      	str	r3, [sp, #140]	; 0x8c
 801fd62:	f300 82db 	bgt.w	802031c <_svfprintf_r+0xcbc>
 801fd66:	3408      	adds	r4, #8
 801fd68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fd6a:	2b80      	cmp	r3, #128	; 0x80
 801fd6c:	d11f      	bne.n	801fdae <_svfprintf_r+0x74e>
 801fd6e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801fd72:	1a9f      	subs	r7, r3, r2
 801fd74:	2f00      	cmp	r7, #0
 801fd76:	dd1a      	ble.n	801fdae <_svfprintf_r+0x74e>
 801fd78:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801fd7c:	4814      	ldr	r0, [pc, #80]	; (801fdd0 <_svfprintf_r+0x770>)
 801fd7e:	6020      	str	r0, [r4, #0]
 801fd80:	2f10      	cmp	r7, #16
 801fd82:	f103 0301 	add.w	r3, r3, #1
 801fd86:	f104 0108 	add.w	r1, r4, #8
 801fd8a:	f300 82d1 	bgt.w	8020330 <_svfprintf_r+0xcd0>
 801fd8e:	6067      	str	r7, [r4, #4]
 801fd90:	2b07      	cmp	r3, #7
 801fd92:	4417      	add	r7, r2
 801fd94:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801fd98:	f340 82dd 	ble.w	8020356 <_svfprintf_r+0xcf6>
 801fd9c:	aa22      	add	r2, sp, #136	; 0x88
 801fd9e:	4641      	mov	r1, r8
 801fda0:	4650      	mov	r0, sl
 801fda2:	f002 f974 	bl	802208e <__ssprint_r>
 801fda6:	2800      	cmp	r0, #0
 801fda8:	f040 85dc 	bne.w	8020964 <_svfprintf_r+0x1304>
 801fdac:	ac25      	add	r4, sp, #148	; 0x94
 801fdae:	9b04      	ldr	r3, [sp, #16]
 801fdb0:	1af6      	subs	r6, r6, r3
 801fdb2:	2e00      	cmp	r6, #0
 801fdb4:	dd28      	ble.n	801fe08 <_svfprintf_r+0x7a8>
 801fdb6:	4f06      	ldr	r7, [pc, #24]	; (801fdd0 <_svfprintf_r+0x770>)
 801fdb8:	e00c      	b.n	801fdd4 <_svfprintf_r+0x774>
 801fdba:	bf00      	nop
 801fdbc:	08025d7d 	.word	0x08025d7d
 801fdc0:	08025d6c 	.word	0x08025d6c
 801fdc4:	40300000 	.word	0x40300000
 801fdc8:	3fe00000 	.word	0x3fe00000
 801fdcc:	08025d90 	.word	0x08025d90
 801fdd0:	08025da0 	.word	0x08025da0
 801fdd4:	6027      	str	r7, [r4, #0]
 801fdd6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801fdda:	2e10      	cmp	r6, #16
 801fddc:	f103 0301 	add.w	r3, r3, #1
 801fde0:	f104 0108 	add.w	r1, r4, #8
 801fde4:	f300 82b9 	bgt.w	802035a <_svfprintf_r+0xcfa>
 801fde8:	6066      	str	r6, [r4, #4]
 801fdea:	2b07      	cmp	r3, #7
 801fdec:	4416      	add	r6, r2
 801fdee:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801fdf2:	f340 82c5 	ble.w	8020380 <_svfprintf_r+0xd20>
 801fdf6:	aa22      	add	r2, sp, #136	; 0x88
 801fdf8:	4641      	mov	r1, r8
 801fdfa:	4650      	mov	r0, sl
 801fdfc:	f002 f947 	bl	802208e <__ssprint_r>
 801fe00:	2800      	cmp	r0, #0
 801fe02:	f040 85af 	bne.w	8020964 <_svfprintf_r+0x1304>
 801fe06:	ac25      	add	r4, sp, #148	; 0x94
 801fe08:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801fe0c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801fe0e:	f040 82bd 	bne.w	802038c <_svfprintf_r+0xd2c>
 801fe12:	9b04      	ldr	r3, [sp, #16]
 801fe14:	f8c4 9000 	str.w	r9, [r4]
 801fe18:	441e      	add	r6, r3
 801fe1a:	6063      	str	r3, [r4, #4]
 801fe1c:	9624      	str	r6, [sp, #144]	; 0x90
 801fe1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fe20:	3301      	adds	r3, #1
 801fe22:	2b07      	cmp	r3, #7
 801fe24:	9323      	str	r3, [sp, #140]	; 0x8c
 801fe26:	f300 82f6 	bgt.w	8020416 <_svfprintf_r+0xdb6>
 801fe2a:	3408      	adds	r4, #8
 801fe2c:	f01b 0f04 	tst.w	fp, #4
 801fe30:	f040 857a 	bne.w	8020928 <_svfprintf_r+0x12c8>
 801fe34:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 801fe38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe3a:	428a      	cmp	r2, r1
 801fe3c:	bfac      	ite	ge
 801fe3e:	189b      	addge	r3, r3, r2
 801fe40:	185b      	addlt	r3, r3, r1
 801fe42:	930c      	str	r3, [sp, #48]	; 0x30
 801fe44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe46:	b13b      	cbz	r3, 801fe58 <_svfprintf_r+0x7f8>
 801fe48:	aa22      	add	r2, sp, #136	; 0x88
 801fe4a:	4641      	mov	r1, r8
 801fe4c:	4650      	mov	r0, sl
 801fe4e:	f002 f91e 	bl	802208e <__ssprint_r>
 801fe52:	2800      	cmp	r0, #0
 801fe54:	f040 8586 	bne.w	8020964 <_svfprintf_r+0x1304>
 801fe58:	2300      	movs	r3, #0
 801fe5a:	9323      	str	r3, [sp, #140]	; 0x8c
 801fe5c:	9b03      	ldr	r3, [sp, #12]
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	f040 859c 	bne.w	802099c <_svfprintf_r+0x133c>
 801fe64:	ac25      	add	r4, sp, #148	; 0x94
 801fe66:	e0ec      	b.n	8020042 <_svfprintf_r+0x9e2>
 801fe68:	9003      	str	r0, [sp, #12]
 801fe6a:	e62c      	b.n	801fac6 <_svfprintf_r+0x466>
 801fe6c:	9003      	str	r0, [sp, #12]
 801fe6e:	2306      	movs	r3, #6
 801fe70:	e61a      	b.n	801faa8 <_svfprintf_r+0x448>
 801fe72:	9003      	str	r0, [sp, #12]
 801fe74:	e627      	b.n	801fac6 <_svfprintf_r+0x466>
 801fe76:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	eeb0 8a47 	vmov.f32	s16, s14
 801fe80:	eef0 8a67 	vmov.f32	s17, s15
 801fe84:	e62f      	b.n	801fae6 <_svfprintf_r+0x486>
 801fe86:	f802 0c01 	strb.w	r0, [r2, #-1]
 801fe8a:	e691      	b.n	801fbb0 <_svfprintf_r+0x550>
 801fe8c:	f803 0b01 	strb.w	r0, [r3], #1
 801fe90:	1aca      	subs	r2, r1, r3
 801fe92:	2a00      	cmp	r2, #0
 801fe94:	dafa      	bge.n	801fe8c <_svfprintf_r+0x82c>
 801fe96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe9a:	3201      	adds	r2, #1
 801fe9c:	f103 0301 	add.w	r3, r3, #1
 801fea0:	bfb8      	it	lt
 801fea2:	2300      	movlt	r3, #0
 801fea4:	441d      	add	r5, r3
 801fea6:	e693      	b.n	801fbd0 <_svfprintf_r+0x570>
 801fea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801feaa:	462b      	mov	r3, r5
 801feac:	18a9      	adds	r1, r5, r2
 801feae:	2030      	movs	r0, #48	; 0x30
 801feb0:	e7ee      	b.n	801fe90 <_svfprintf_r+0x830>
 801feb2:	9b08      	ldr	r3, [sp, #32]
 801feb4:	2b46      	cmp	r3, #70	; 0x46
 801feb6:	d005      	beq.n	801fec4 <_svfprintf_r+0x864>
 801feb8:	2b45      	cmp	r3, #69	; 0x45
 801feba:	d11b      	bne.n	801fef4 <_svfprintf_r+0x894>
 801febc:	9b04      	ldr	r3, [sp, #16]
 801febe:	1c5d      	adds	r5, r3, #1
 801fec0:	2102      	movs	r1, #2
 801fec2:	e001      	b.n	801fec8 <_svfprintf_r+0x868>
 801fec4:	9d04      	ldr	r5, [sp, #16]
 801fec6:	2103      	movs	r1, #3
 801fec8:	ab20      	add	r3, sp, #128	; 0x80
 801feca:	9301      	str	r3, [sp, #4]
 801fecc:	ab1d      	add	r3, sp, #116	; 0x74
 801fece:	9300      	str	r3, [sp, #0]
 801fed0:	462a      	mov	r2, r5
 801fed2:	ab1c      	add	r3, sp, #112	; 0x70
 801fed4:	4650      	mov	r0, sl
 801fed6:	eeb0 0a48 	vmov.f32	s0, s16
 801feda:	eef0 0a68 	vmov.f32	s1, s17
 801fede:	f000 fe4f 	bl	8020b80 <_dtoa_r>
 801fee2:	9b08      	ldr	r3, [sp, #32]
 801fee4:	2b47      	cmp	r3, #71	; 0x47
 801fee6:	4681      	mov	r9, r0
 801fee8:	d106      	bne.n	801fef8 <_svfprintf_r+0x898>
 801feea:	f01b 0f01 	tst.w	fp, #1
 801feee:	d103      	bne.n	801fef8 <_svfprintf_r+0x898>
 801fef0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801fef2:	e66d      	b.n	801fbd0 <_svfprintf_r+0x570>
 801fef4:	9d04      	ldr	r5, [sp, #16]
 801fef6:	e7e3      	b.n	801fec0 <_svfprintf_r+0x860>
 801fef8:	9b08      	ldr	r3, [sp, #32]
 801fefa:	2b46      	cmp	r3, #70	; 0x46
 801fefc:	eb09 0605 	add.w	r6, r9, r5
 801ff00:	d10f      	bne.n	801ff22 <_svfprintf_r+0x8c2>
 801ff02:	f899 3000 	ldrb.w	r3, [r9]
 801ff06:	2b30      	cmp	r3, #48	; 0x30
 801ff08:	d109      	bne.n	801ff1e <_svfprintf_r+0x8be>
 801ff0a:	ec51 0b18 	vmov	r0, r1, d8
 801ff0e:	2200      	movs	r2, #0
 801ff10:	2300      	movs	r3, #0
 801ff12:	f7e0 fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 801ff16:	b910      	cbnz	r0, 801ff1e <_svfprintf_r+0x8be>
 801ff18:	f1c5 0501 	rsb	r5, r5, #1
 801ff1c:	951c      	str	r5, [sp, #112]	; 0x70
 801ff1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff20:	441e      	add	r6, r3
 801ff22:	ec51 0b18 	vmov	r0, r1, d8
 801ff26:	2200      	movs	r2, #0
 801ff28:	2300      	movs	r3, #0
 801ff2a:	f7e0 fded 	bl	8000b08 <__aeabi_dcmpeq>
 801ff2e:	b100      	cbz	r0, 801ff32 <_svfprintf_r+0x8d2>
 801ff30:	9620      	str	r6, [sp, #128]	; 0x80
 801ff32:	2230      	movs	r2, #48	; 0x30
 801ff34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff36:	429e      	cmp	r6, r3
 801ff38:	d9da      	bls.n	801fef0 <_svfprintf_r+0x890>
 801ff3a:	1c59      	adds	r1, r3, #1
 801ff3c:	9120      	str	r1, [sp, #128]	; 0x80
 801ff3e:	701a      	strb	r2, [r3, #0]
 801ff40:	e7f8      	b.n	801ff34 <_svfprintf_r+0x8d4>
 801ff42:	9b08      	ldr	r3, [sp, #32]
 801ff44:	2b46      	cmp	r3, #70	; 0x46
 801ff46:	f47f ae54 	bne.w	801fbf2 <_svfprintf_r+0x592>
 801ff4a:	9a04      	ldr	r2, [sp, #16]
 801ff4c:	f00b 0301 	and.w	r3, fp, #1
 801ff50:	2d00      	cmp	r5, #0
 801ff52:	ea43 0302 	orr.w	r3, r3, r2
 801ff56:	dd1a      	ble.n	801ff8e <_svfprintf_r+0x92e>
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d034      	beq.n	801ffc6 <_svfprintf_r+0x966>
 801ff5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff5e:	18eb      	adds	r3, r5, r3
 801ff60:	441a      	add	r2, r3
 801ff62:	9204      	str	r2, [sp, #16]
 801ff64:	2366      	movs	r3, #102	; 0x66
 801ff66:	9306      	str	r3, [sp, #24]
 801ff68:	e033      	b.n	801ffd2 <_svfprintf_r+0x972>
 801ff6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ff6e:	f802 6b01 	strb.w	r6, [r2], #1
 801ff72:	e675      	b.n	801fc60 <_svfprintf_r+0x600>
 801ff74:	b941      	cbnz	r1, 801ff88 <_svfprintf_r+0x928>
 801ff76:	2230      	movs	r2, #48	; 0x30
 801ff78:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801ff7c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801ff80:	3330      	adds	r3, #48	; 0x30
 801ff82:	f802 3b01 	strb.w	r3, [r2], #1
 801ff86:	e677      	b.n	801fc78 <_svfprintf_r+0x618>
 801ff88:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801ff8c:	e7f8      	b.n	801ff80 <_svfprintf_r+0x920>
 801ff8e:	b1e3      	cbz	r3, 801ffca <_svfprintf_r+0x96a>
 801ff90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff92:	9a04      	ldr	r2, [sp, #16]
 801ff94:	3301      	adds	r3, #1
 801ff96:	e7e3      	b.n	801ff60 <_svfprintf_r+0x900>
 801ff98:	9b05      	ldr	r3, [sp, #20]
 801ff9a:	429d      	cmp	r5, r3
 801ff9c:	db07      	blt.n	801ffae <_svfprintf_r+0x94e>
 801ff9e:	f01b 0f01 	tst.w	fp, #1
 801ffa2:	d02d      	beq.n	8020000 <_svfprintf_r+0x9a0>
 801ffa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ffa6:	18eb      	adds	r3, r5, r3
 801ffa8:	9304      	str	r3, [sp, #16]
 801ffaa:	2367      	movs	r3, #103	; 0x67
 801ffac:	e7db      	b.n	801ff66 <_svfprintf_r+0x906>
 801ffae:	9b05      	ldr	r3, [sp, #20]
 801ffb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ffb2:	2d00      	cmp	r5, #0
 801ffb4:	4413      	add	r3, r2
 801ffb6:	9304      	str	r3, [sp, #16]
 801ffb8:	dcf7      	bgt.n	801ffaa <_svfprintf_r+0x94a>
 801ffba:	9a04      	ldr	r2, [sp, #16]
 801ffbc:	f1c5 0301 	rsb	r3, r5, #1
 801ffc0:	441a      	add	r2, r3
 801ffc2:	9204      	str	r2, [sp, #16]
 801ffc4:	e7f1      	b.n	801ffaa <_svfprintf_r+0x94a>
 801ffc6:	9504      	str	r5, [sp, #16]
 801ffc8:	e7cc      	b.n	801ff64 <_svfprintf_r+0x904>
 801ffca:	2366      	movs	r3, #102	; 0x66
 801ffcc:	9306      	str	r3, [sp, #24]
 801ffce:	2301      	movs	r3, #1
 801ffd0:	9304      	str	r3, [sp, #16]
 801ffd2:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801ffd6:	9309      	str	r3, [sp, #36]	; 0x24
 801ffd8:	d025      	beq.n	8020026 <_svfprintf_r+0x9c6>
 801ffda:	2300      	movs	r3, #0
 801ffdc:	2d00      	cmp	r5, #0
 801ffde:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ffe2:	f77f ae61 	ble.w	801fca8 <_svfprintf_r+0x648>
 801ffe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffe8:	781b      	ldrb	r3, [r3, #0]
 801ffea:	2bff      	cmp	r3, #255	; 0xff
 801ffec:	d10a      	bne.n	8020004 <_svfprintf_r+0x9a4>
 801ffee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fff2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fff4:	4413      	add	r3, r2
 801fff6:	9a04      	ldr	r2, [sp, #16]
 801fff8:	fb01 2303 	mla	r3, r1, r3, r2
 801fffc:	9304      	str	r3, [sp, #16]
 801fffe:	e653      	b.n	801fca8 <_svfprintf_r+0x648>
 8020000:	9504      	str	r5, [sp, #16]
 8020002:	e7d2      	b.n	801ffaa <_svfprintf_r+0x94a>
 8020004:	42ab      	cmp	r3, r5
 8020006:	daf2      	bge.n	801ffee <_svfprintf_r+0x98e>
 8020008:	1aed      	subs	r5, r5, r3
 802000a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802000c:	785b      	ldrb	r3, [r3, #1]
 802000e:	b133      	cbz	r3, 802001e <_svfprintf_r+0x9be>
 8020010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020012:	3301      	adds	r3, #1
 8020014:	9309      	str	r3, [sp, #36]	; 0x24
 8020016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020018:	3301      	adds	r3, #1
 802001a:	930a      	str	r3, [sp, #40]	; 0x28
 802001c:	e7e3      	b.n	801ffe6 <_svfprintf_r+0x986>
 802001e:	9b08      	ldr	r3, [sp, #32]
 8020020:	3301      	adds	r3, #1
 8020022:	9308      	str	r3, [sp, #32]
 8020024:	e7df      	b.n	801ffe6 <_svfprintf_r+0x986>
 8020026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020028:	9308      	str	r3, [sp, #32]
 802002a:	e63d      	b.n	801fca8 <_svfprintf_r+0x648>
 802002c:	1d33      	adds	r3, r6, #4
 802002e:	f01b 0f20 	tst.w	fp, #32
 8020032:	9307      	str	r3, [sp, #28]
 8020034:	d00a      	beq.n	802004c <_svfprintf_r+0x9ec>
 8020036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020038:	6833      	ldr	r3, [r6, #0]
 802003a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802003c:	17d2      	asrs	r2, r2, #31
 802003e:	e9c3 1200 	strd	r1, r2, [r3]
 8020042:	9e07      	ldr	r6, [sp, #28]
 8020044:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8020048:	f7ff bb4a 	b.w	801f6e0 <_svfprintf_r+0x80>
 802004c:	f01b 0f10 	tst.w	fp, #16
 8020050:	d003      	beq.n	802005a <_svfprintf_r+0x9fa>
 8020052:	6833      	ldr	r3, [r6, #0]
 8020054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020056:	601a      	str	r2, [r3, #0]
 8020058:	e7f3      	b.n	8020042 <_svfprintf_r+0x9e2>
 802005a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 802005e:	d003      	beq.n	8020068 <_svfprintf_r+0xa08>
 8020060:	6833      	ldr	r3, [r6, #0]
 8020062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020064:	801a      	strh	r2, [r3, #0]
 8020066:	e7ec      	b.n	8020042 <_svfprintf_r+0x9e2>
 8020068:	f41b 7f00 	tst.w	fp, #512	; 0x200
 802006c:	d0f1      	beq.n	8020052 <_svfprintf_r+0x9f2>
 802006e:	6833      	ldr	r3, [r6, #0]
 8020070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020072:	701a      	strb	r2, [r3, #0]
 8020074:	e7e5      	b.n	8020042 <_svfprintf_r+0x9e2>
 8020076:	f04b 0b10 	orr.w	fp, fp, #16
 802007a:	f01b 0320 	ands.w	r3, fp, #32
 802007e:	d01f      	beq.n	80200c0 <_svfprintf_r+0xa60>
 8020080:	1df3      	adds	r3, r6, #7
 8020082:	f023 0307 	bic.w	r3, r3, #7
 8020086:	461a      	mov	r2, r3
 8020088:	685d      	ldr	r5, [r3, #4]
 802008a:	f852 6b08 	ldr.w	r6, [r2], #8
 802008e:	9207      	str	r2, [sp, #28]
 8020090:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8020094:	2300      	movs	r3, #0
 8020096:	2200      	movs	r2, #0
 8020098:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 802009c:	9a04      	ldr	r2, [sp, #16]
 802009e:	3201      	adds	r2, #1
 80200a0:	f000 848d 	beq.w	80209be <_svfprintf_r+0x135e>
 80200a4:	ea56 0205 	orrs.w	r2, r6, r5
 80200a8:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80200ac:	f040 848c 	bne.w	80209c8 <_svfprintf_r+0x1368>
 80200b0:	9a04      	ldr	r2, [sp, #16]
 80200b2:	2a00      	cmp	r2, #0
 80200b4:	f000 80f9 	beq.w	80202aa <_svfprintf_r+0xc4a>
 80200b8:	2b01      	cmp	r3, #1
 80200ba:	f040 8488 	bne.w	80209ce <_svfprintf_r+0x136e>
 80200be:	e09f      	b.n	8020200 <_svfprintf_r+0xba0>
 80200c0:	4632      	mov	r2, r6
 80200c2:	f01b 0510 	ands.w	r5, fp, #16
 80200c6:	f852 6b04 	ldr.w	r6, [r2], #4
 80200ca:	9207      	str	r2, [sp, #28]
 80200cc:	d001      	beq.n	80200d2 <_svfprintf_r+0xa72>
 80200ce:	461d      	mov	r5, r3
 80200d0:	e7de      	b.n	8020090 <_svfprintf_r+0xa30>
 80200d2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80200d6:	d001      	beq.n	80200dc <_svfprintf_r+0xa7c>
 80200d8:	b2b6      	uxth	r6, r6
 80200da:	e7d9      	b.n	8020090 <_svfprintf_r+0xa30>
 80200dc:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80200e0:	d0d6      	beq.n	8020090 <_svfprintf_r+0xa30>
 80200e2:	b2f6      	uxtb	r6, r6
 80200e4:	e7f3      	b.n	80200ce <_svfprintf_r+0xa6e>
 80200e6:	4633      	mov	r3, r6
 80200e8:	2278      	movs	r2, #120	; 0x78
 80200ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80200ee:	9307      	str	r3, [sp, #28]
 80200f0:	2330      	movs	r3, #48	; 0x30
 80200f2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80200f6:	4ba3      	ldr	r3, [pc, #652]	; (8020384 <_svfprintf_r+0xd24>)
 80200f8:	9316      	str	r3, [sp, #88]	; 0x58
 80200fa:	2500      	movs	r5, #0
 80200fc:	f04b 0b02 	orr.w	fp, fp, #2
 8020100:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8020104:	2302      	movs	r3, #2
 8020106:	9206      	str	r2, [sp, #24]
 8020108:	e7c5      	b.n	8020096 <_svfprintf_r+0xa36>
 802010a:	4633      	mov	r3, r6
 802010c:	2500      	movs	r5, #0
 802010e:	f853 9b04 	ldr.w	r9, [r3], #4
 8020112:	9307      	str	r3, [sp, #28]
 8020114:	9b04      	ldr	r3, [sp, #16]
 8020116:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 802011a:	1c58      	adds	r0, r3, #1
 802011c:	d010      	beq.n	8020140 <_svfprintf_r+0xae0>
 802011e:	461a      	mov	r2, r3
 8020120:	4629      	mov	r1, r5
 8020122:	4648      	mov	r0, r9
 8020124:	f7e0 f87c 	bl	8000220 <memchr>
 8020128:	9003      	str	r0, [sp, #12]
 802012a:	2800      	cmp	r0, #0
 802012c:	f000 80d4 	beq.w	80202d8 <_svfprintf_r+0xc78>
 8020130:	eba0 0309 	sub.w	r3, r0, r9
 8020134:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8020138:	e9cd 5508 	strd	r5, r5, [sp, #32]
 802013c:	462e      	mov	r6, r5
 802013e:	e5bb      	b.n	801fcb8 <_svfprintf_r+0x658>
 8020140:	4648      	mov	r0, r9
 8020142:	f7e0 f865 	bl	8000210 <strlen>
 8020146:	e9cd 5003 	strd	r5, r0, [sp, #12]
 802014a:	e45f      	b.n	801fa0c <_svfprintf_r+0x3ac>
 802014c:	f04b 0b10 	orr.w	fp, fp, #16
 8020150:	f01b 0320 	ands.w	r3, fp, #32
 8020154:	d009      	beq.n	802016a <_svfprintf_r+0xb0a>
 8020156:	1df3      	adds	r3, r6, #7
 8020158:	f023 0307 	bic.w	r3, r3, #7
 802015c:	461a      	mov	r2, r3
 802015e:	685d      	ldr	r5, [r3, #4]
 8020160:	f852 6b08 	ldr.w	r6, [r2], #8
 8020164:	9207      	str	r2, [sp, #28]
 8020166:	2301      	movs	r3, #1
 8020168:	e795      	b.n	8020096 <_svfprintf_r+0xa36>
 802016a:	4632      	mov	r2, r6
 802016c:	f01b 0510 	ands.w	r5, fp, #16
 8020170:	f852 6b04 	ldr.w	r6, [r2], #4
 8020174:	9207      	str	r2, [sp, #28]
 8020176:	d001      	beq.n	802017c <_svfprintf_r+0xb1c>
 8020178:	461d      	mov	r5, r3
 802017a:	e7f4      	b.n	8020166 <_svfprintf_r+0xb06>
 802017c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8020180:	d001      	beq.n	8020186 <_svfprintf_r+0xb26>
 8020182:	b2b6      	uxth	r6, r6
 8020184:	e7ef      	b.n	8020166 <_svfprintf_r+0xb06>
 8020186:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 802018a:	d0ec      	beq.n	8020166 <_svfprintf_r+0xb06>
 802018c:	b2f6      	uxtb	r6, r6
 802018e:	e7f3      	b.n	8020178 <_svfprintf_r+0xb18>
 8020190:	4b7d      	ldr	r3, [pc, #500]	; (8020388 <_svfprintf_r+0xd28>)
 8020192:	9316      	str	r3, [sp, #88]	; 0x58
 8020194:	f01b 0320 	ands.w	r3, fp, #32
 8020198:	d01b      	beq.n	80201d2 <_svfprintf_r+0xb72>
 802019a:	1df3      	adds	r3, r6, #7
 802019c:	f023 0307 	bic.w	r3, r3, #7
 80201a0:	461a      	mov	r2, r3
 80201a2:	685d      	ldr	r5, [r3, #4]
 80201a4:	f852 6b08 	ldr.w	r6, [r2], #8
 80201a8:	9207      	str	r2, [sp, #28]
 80201aa:	f01b 0f01 	tst.w	fp, #1
 80201ae:	d00a      	beq.n	80201c6 <_svfprintf_r+0xb66>
 80201b0:	ea56 0305 	orrs.w	r3, r6, r5
 80201b4:	d007      	beq.n	80201c6 <_svfprintf_r+0xb66>
 80201b6:	2330      	movs	r3, #48	; 0x30
 80201b8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80201bc:	9b06      	ldr	r3, [sp, #24]
 80201be:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80201c2:	f04b 0b02 	orr.w	fp, fp, #2
 80201c6:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80201ca:	2302      	movs	r3, #2
 80201cc:	e763      	b.n	8020096 <_svfprintf_r+0xa36>
 80201ce:	4b6d      	ldr	r3, [pc, #436]	; (8020384 <_svfprintf_r+0xd24>)
 80201d0:	e7df      	b.n	8020192 <_svfprintf_r+0xb32>
 80201d2:	4632      	mov	r2, r6
 80201d4:	f01b 0510 	ands.w	r5, fp, #16
 80201d8:	f852 6b04 	ldr.w	r6, [r2], #4
 80201dc:	9207      	str	r2, [sp, #28]
 80201de:	d001      	beq.n	80201e4 <_svfprintf_r+0xb84>
 80201e0:	461d      	mov	r5, r3
 80201e2:	e7e2      	b.n	80201aa <_svfprintf_r+0xb4a>
 80201e4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80201e8:	d001      	beq.n	80201ee <_svfprintf_r+0xb8e>
 80201ea:	b2b6      	uxth	r6, r6
 80201ec:	e7dd      	b.n	80201aa <_svfprintf_r+0xb4a>
 80201ee:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80201f2:	d0da      	beq.n	80201aa <_svfprintf_r+0xb4a>
 80201f4:	b2f6      	uxtb	r6, r6
 80201f6:	e7f3      	b.n	80201e0 <_svfprintf_r+0xb80>
 80201f8:	2e0a      	cmp	r6, #10
 80201fa:	f175 0300 	sbcs.w	r3, r5, #0
 80201fe:	d205      	bcs.n	802020c <_svfprintf_r+0xbac>
 8020200:	3630      	adds	r6, #48	; 0x30
 8020202:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8020206:	f20d 1937 	addw	r9, sp, #311	; 0x137
 802020a:	e3fb      	b.n	8020a04 <_svfprintf_r+0x13a4>
 802020c:	2300      	movs	r3, #0
 802020e:	9305      	str	r3, [sp, #20]
 8020210:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8020214:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8020218:	9303      	str	r3, [sp, #12]
 802021a:	220a      	movs	r2, #10
 802021c:	2300      	movs	r3, #0
 802021e:	4630      	mov	r0, r6
 8020220:	4629      	mov	r1, r5
 8020222:	f7e0 fe0f 	bl	8000e44 <__aeabi_uldivmod>
 8020226:	9b05      	ldr	r3, [sp, #20]
 8020228:	3301      	adds	r3, #1
 802022a:	9305      	str	r3, [sp, #20]
 802022c:	9b03      	ldr	r3, [sp, #12]
 802022e:	3230      	adds	r2, #48	; 0x30
 8020230:	f10b 39ff 	add.w	r9, fp, #4294967295
 8020234:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8020238:	b1d3      	cbz	r3, 8020270 <_svfprintf_r+0xc10>
 802023a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802023c:	9a05      	ldr	r2, [sp, #20]
 802023e:	781b      	ldrb	r3, [r3, #0]
 8020240:	429a      	cmp	r2, r3
 8020242:	d115      	bne.n	8020270 <_svfprintf_r+0xc10>
 8020244:	2aff      	cmp	r2, #255	; 0xff
 8020246:	d013      	beq.n	8020270 <_svfprintf_r+0xc10>
 8020248:	2e0a      	cmp	r6, #10
 802024a:	f175 0300 	sbcs.w	r3, r5, #0
 802024e:	d30f      	bcc.n	8020270 <_svfprintf_r+0xc10>
 8020250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020252:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020254:	eba9 0903 	sub.w	r9, r9, r3
 8020258:	461a      	mov	r2, r3
 802025a:	4648      	mov	r0, r9
 802025c:	f001 ff04 	bl	8022068 <strncpy>
 8020260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020262:	785b      	ldrb	r3, [r3, #1]
 8020264:	b11b      	cbz	r3, 802026e <_svfprintf_r+0xc0e>
 8020266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020268:	3301      	adds	r3, #1
 802026a:	930a      	str	r3, [sp, #40]	; 0x28
 802026c:	2300      	movs	r3, #0
 802026e:	9305      	str	r3, [sp, #20]
 8020270:	2300      	movs	r3, #0
 8020272:	220a      	movs	r2, #10
 8020274:	4630      	mov	r0, r6
 8020276:	4629      	mov	r1, r5
 8020278:	f7e0 fde4 	bl	8000e44 <__aeabi_uldivmod>
 802027c:	2e0a      	cmp	r6, #10
 802027e:	f175 0300 	sbcs.w	r3, r5, #0
 8020282:	f0c0 83bf 	bcc.w	8020a04 <_svfprintf_r+0x13a4>
 8020286:	4606      	mov	r6, r0
 8020288:	460d      	mov	r5, r1
 802028a:	46cb      	mov	fp, r9
 802028c:	e7c5      	b.n	802021a <_svfprintf_r+0xbba>
 802028e:	f006 030f 	and.w	r3, r6, #15
 8020292:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020294:	0936      	lsrs	r6, r6, #4
 8020296:	5cd3      	ldrb	r3, [r2, r3]
 8020298:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802029c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80202a0:	092d      	lsrs	r5, r5, #4
 80202a2:	ea56 0305 	orrs.w	r3, r6, r5
 80202a6:	d1f2      	bne.n	802028e <_svfprintf_r+0xc2e>
 80202a8:	e3ac      	b.n	8020a04 <_svfprintf_r+0x13a4>
 80202aa:	b933      	cbnz	r3, 80202ba <_svfprintf_r+0xc5a>
 80202ac:	f01b 0f01 	tst.w	fp, #1
 80202b0:	d003      	beq.n	80202ba <_svfprintf_r+0xc5a>
 80202b2:	2330      	movs	r3, #48	; 0x30
 80202b4:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80202b8:	e7a5      	b.n	8020206 <_svfprintf_r+0xba6>
 80202ba:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 80202be:	e3a1      	b.n	8020a04 <_svfprintf_r+0x13a4>
 80202c0:	9b06      	ldr	r3, [sp, #24]
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	f000 8370 	beq.w	80209a8 <_svfprintf_r+0x1348>
 80202c8:	2000      	movs	r0, #0
 80202ca:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80202ce:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80202d2:	9607      	str	r6, [sp, #28]
 80202d4:	f7ff bb29 	b.w	801f92a <_svfprintf_r+0x2ca>
 80202d8:	9e03      	ldr	r6, [sp, #12]
 80202da:	f7ff bb98 	b.w	801fa0e <_svfprintf_r+0x3ae>
 80202de:	2010      	movs	r0, #16
 80202e0:	4402      	add	r2, r0
 80202e2:	2b07      	cmp	r3, #7
 80202e4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80202e8:	6060      	str	r0, [r4, #4]
 80202ea:	dd08      	ble.n	80202fe <_svfprintf_r+0xc9e>
 80202ec:	aa22      	add	r2, sp, #136	; 0x88
 80202ee:	4641      	mov	r1, r8
 80202f0:	4650      	mov	r0, sl
 80202f2:	f001 fecc 	bl	802208e <__ssprint_r>
 80202f6:	2800      	cmp	r0, #0
 80202f8:	f040 8334 	bne.w	8020964 <_svfprintf_r+0x1304>
 80202fc:	a925      	add	r1, sp, #148	; 0x94
 80202fe:	3f10      	subs	r7, #16
 8020300:	460c      	mov	r4, r1
 8020302:	e4f4      	b.n	801fcee <_svfprintf_r+0x68e>
 8020304:	460c      	mov	r4, r1
 8020306:	e50d      	b.n	801fd24 <_svfprintf_r+0x6c4>
 8020308:	aa22      	add	r2, sp, #136	; 0x88
 802030a:	4641      	mov	r1, r8
 802030c:	4650      	mov	r0, sl
 802030e:	f001 febe 	bl	802208e <__ssprint_r>
 8020312:	2800      	cmp	r0, #0
 8020314:	f040 8326 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020318:	ac25      	add	r4, sp, #148	; 0x94
 802031a:	e515      	b.n	801fd48 <_svfprintf_r+0x6e8>
 802031c:	aa22      	add	r2, sp, #136	; 0x88
 802031e:	4641      	mov	r1, r8
 8020320:	4650      	mov	r0, sl
 8020322:	f001 feb4 	bl	802208e <__ssprint_r>
 8020326:	2800      	cmp	r0, #0
 8020328:	f040 831c 	bne.w	8020964 <_svfprintf_r+0x1304>
 802032c:	ac25      	add	r4, sp, #148	; 0x94
 802032e:	e51b      	b.n	801fd68 <_svfprintf_r+0x708>
 8020330:	2010      	movs	r0, #16
 8020332:	4402      	add	r2, r0
 8020334:	2b07      	cmp	r3, #7
 8020336:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802033a:	6060      	str	r0, [r4, #4]
 802033c:	dd08      	ble.n	8020350 <_svfprintf_r+0xcf0>
 802033e:	aa22      	add	r2, sp, #136	; 0x88
 8020340:	4641      	mov	r1, r8
 8020342:	4650      	mov	r0, sl
 8020344:	f001 fea3 	bl	802208e <__ssprint_r>
 8020348:	2800      	cmp	r0, #0
 802034a:	f040 830b 	bne.w	8020964 <_svfprintf_r+0x1304>
 802034e:	a925      	add	r1, sp, #148	; 0x94
 8020350:	3f10      	subs	r7, #16
 8020352:	460c      	mov	r4, r1
 8020354:	e510      	b.n	801fd78 <_svfprintf_r+0x718>
 8020356:	460c      	mov	r4, r1
 8020358:	e529      	b.n	801fdae <_svfprintf_r+0x74e>
 802035a:	2010      	movs	r0, #16
 802035c:	4402      	add	r2, r0
 802035e:	2b07      	cmp	r3, #7
 8020360:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020364:	6060      	str	r0, [r4, #4]
 8020366:	dd08      	ble.n	802037a <_svfprintf_r+0xd1a>
 8020368:	aa22      	add	r2, sp, #136	; 0x88
 802036a:	4641      	mov	r1, r8
 802036c:	4650      	mov	r0, sl
 802036e:	f001 fe8e 	bl	802208e <__ssprint_r>
 8020372:	2800      	cmp	r0, #0
 8020374:	f040 82f6 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020378:	a925      	add	r1, sp, #148	; 0x94
 802037a:	3e10      	subs	r6, #16
 802037c:	460c      	mov	r4, r1
 802037e:	e529      	b.n	801fdd4 <_svfprintf_r+0x774>
 8020380:	460c      	mov	r4, r1
 8020382:	e541      	b.n	801fe08 <_svfprintf_r+0x7a8>
 8020384:	08025d6c 	.word	0x08025d6c
 8020388:	08025d7d 	.word	0x08025d7d
 802038c:	9b06      	ldr	r3, [sp, #24]
 802038e:	2b65      	cmp	r3, #101	; 0x65
 8020390:	f340 8230 	ble.w	80207f4 <_svfprintf_r+0x1194>
 8020394:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020398:	2200      	movs	r2, #0
 802039a:	2300      	movs	r3, #0
 802039c:	f7e0 fbb4 	bl	8000b08 <__aeabi_dcmpeq>
 80203a0:	2800      	cmp	r0, #0
 80203a2:	d068      	beq.n	8020476 <_svfprintf_r+0xe16>
 80203a4:	4b6d      	ldr	r3, [pc, #436]	; (802055c <_svfprintf_r+0xefc>)
 80203a6:	6023      	str	r3, [r4, #0]
 80203a8:	2301      	movs	r3, #1
 80203aa:	441e      	add	r6, r3
 80203ac:	6063      	str	r3, [r4, #4]
 80203ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80203b0:	9624      	str	r6, [sp, #144]	; 0x90
 80203b2:	3301      	adds	r3, #1
 80203b4:	2b07      	cmp	r3, #7
 80203b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80203b8:	dc37      	bgt.n	802042a <_svfprintf_r+0xdca>
 80203ba:	3408      	adds	r4, #8
 80203bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80203be:	9a05      	ldr	r2, [sp, #20]
 80203c0:	4293      	cmp	r3, r2
 80203c2:	db03      	blt.n	80203cc <_svfprintf_r+0xd6c>
 80203c4:	f01b 0f01 	tst.w	fp, #1
 80203c8:	f43f ad30 	beq.w	801fe2c <_svfprintf_r+0x7cc>
 80203cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80203ce:	6023      	str	r3, [r4, #0]
 80203d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80203d4:	6063      	str	r3, [r4, #4]
 80203d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80203d8:	4413      	add	r3, r2
 80203da:	9324      	str	r3, [sp, #144]	; 0x90
 80203dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80203de:	3301      	adds	r3, #1
 80203e0:	2b07      	cmp	r3, #7
 80203e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80203e4:	dc2b      	bgt.n	802043e <_svfprintf_r+0xdde>
 80203e6:	3408      	adds	r4, #8
 80203e8:	9b05      	ldr	r3, [sp, #20]
 80203ea:	1e5d      	subs	r5, r3, #1
 80203ec:	2d00      	cmp	r5, #0
 80203ee:	f77f ad1d 	ble.w	801fe2c <_svfprintf_r+0x7cc>
 80203f2:	4e5b      	ldr	r6, [pc, #364]	; (8020560 <_svfprintf_r+0xf00>)
 80203f4:	2710      	movs	r7, #16
 80203f6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80203fa:	2d10      	cmp	r5, #16
 80203fc:	f103 0301 	add.w	r3, r3, #1
 8020400:	f104 0108 	add.w	r1, r4, #8
 8020404:	6026      	str	r6, [r4, #0]
 8020406:	dc24      	bgt.n	8020452 <_svfprintf_r+0xdf2>
 8020408:	6065      	str	r5, [r4, #4]
 802040a:	2b07      	cmp	r3, #7
 802040c:	4415      	add	r5, r2
 802040e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8020412:	f340 8286 	ble.w	8020922 <_svfprintf_r+0x12c2>
 8020416:	aa22      	add	r2, sp, #136	; 0x88
 8020418:	4641      	mov	r1, r8
 802041a:	4650      	mov	r0, sl
 802041c:	f001 fe37 	bl	802208e <__ssprint_r>
 8020420:	2800      	cmp	r0, #0
 8020422:	f040 829f 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020426:	ac25      	add	r4, sp, #148	; 0x94
 8020428:	e500      	b.n	801fe2c <_svfprintf_r+0x7cc>
 802042a:	aa22      	add	r2, sp, #136	; 0x88
 802042c:	4641      	mov	r1, r8
 802042e:	4650      	mov	r0, sl
 8020430:	f001 fe2d 	bl	802208e <__ssprint_r>
 8020434:	2800      	cmp	r0, #0
 8020436:	f040 8295 	bne.w	8020964 <_svfprintf_r+0x1304>
 802043a:	ac25      	add	r4, sp, #148	; 0x94
 802043c:	e7be      	b.n	80203bc <_svfprintf_r+0xd5c>
 802043e:	aa22      	add	r2, sp, #136	; 0x88
 8020440:	4641      	mov	r1, r8
 8020442:	4650      	mov	r0, sl
 8020444:	f001 fe23 	bl	802208e <__ssprint_r>
 8020448:	2800      	cmp	r0, #0
 802044a:	f040 828b 	bne.w	8020964 <_svfprintf_r+0x1304>
 802044e:	ac25      	add	r4, sp, #148	; 0x94
 8020450:	e7ca      	b.n	80203e8 <_svfprintf_r+0xd88>
 8020452:	3210      	adds	r2, #16
 8020454:	2b07      	cmp	r3, #7
 8020456:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802045a:	6067      	str	r7, [r4, #4]
 802045c:	dd08      	ble.n	8020470 <_svfprintf_r+0xe10>
 802045e:	aa22      	add	r2, sp, #136	; 0x88
 8020460:	4641      	mov	r1, r8
 8020462:	4650      	mov	r0, sl
 8020464:	f001 fe13 	bl	802208e <__ssprint_r>
 8020468:	2800      	cmp	r0, #0
 802046a:	f040 827b 	bne.w	8020964 <_svfprintf_r+0x1304>
 802046e:	a925      	add	r1, sp, #148	; 0x94
 8020470:	3d10      	subs	r5, #16
 8020472:	460c      	mov	r4, r1
 8020474:	e7bf      	b.n	80203f6 <_svfprintf_r+0xd96>
 8020476:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020478:	2b00      	cmp	r3, #0
 802047a:	dc73      	bgt.n	8020564 <_svfprintf_r+0xf04>
 802047c:	4b37      	ldr	r3, [pc, #220]	; (802055c <_svfprintf_r+0xefc>)
 802047e:	6023      	str	r3, [r4, #0]
 8020480:	2301      	movs	r3, #1
 8020482:	441e      	add	r6, r3
 8020484:	6063      	str	r3, [r4, #4]
 8020486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020488:	9624      	str	r6, [sp, #144]	; 0x90
 802048a:	3301      	adds	r3, #1
 802048c:	2b07      	cmp	r3, #7
 802048e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020490:	dc3d      	bgt.n	802050e <_svfprintf_r+0xeae>
 8020492:	3408      	adds	r4, #8
 8020494:	9905      	ldr	r1, [sp, #20]
 8020496:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020498:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802049a:	430a      	orrs	r2, r1
 802049c:	f00b 0101 	and.w	r1, fp, #1
 80204a0:	430a      	orrs	r2, r1
 80204a2:	f43f acc3 	beq.w	801fe2c <_svfprintf_r+0x7cc>
 80204a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80204a8:	6022      	str	r2, [r4, #0]
 80204aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80204ac:	6062      	str	r2, [r4, #4]
 80204ae:	4413      	add	r3, r2
 80204b0:	9324      	str	r3, [sp, #144]	; 0x90
 80204b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80204b4:	3301      	adds	r3, #1
 80204b6:	2b07      	cmp	r3, #7
 80204b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80204ba:	dc32      	bgt.n	8020522 <_svfprintf_r+0xec2>
 80204bc:	3408      	adds	r4, #8
 80204be:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80204c0:	2d00      	cmp	r5, #0
 80204c2:	da1b      	bge.n	80204fc <_svfprintf_r+0xe9c>
 80204c4:	4e26      	ldr	r6, [pc, #152]	; (8020560 <_svfprintf_r+0xf00>)
 80204c6:	426d      	negs	r5, r5
 80204c8:	4623      	mov	r3, r4
 80204ca:	2710      	movs	r7, #16
 80204cc:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80204d0:	2d10      	cmp	r5, #16
 80204d2:	f102 0201 	add.w	r2, r2, #1
 80204d6:	f104 0408 	add.w	r4, r4, #8
 80204da:	601e      	str	r6, [r3, #0]
 80204dc:	dc2b      	bgt.n	8020536 <_svfprintf_r+0xed6>
 80204de:	605d      	str	r5, [r3, #4]
 80204e0:	2a07      	cmp	r2, #7
 80204e2:	440d      	add	r5, r1
 80204e4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80204e8:	dd08      	ble.n	80204fc <_svfprintf_r+0xe9c>
 80204ea:	aa22      	add	r2, sp, #136	; 0x88
 80204ec:	4641      	mov	r1, r8
 80204ee:	4650      	mov	r0, sl
 80204f0:	f001 fdcd 	bl	802208e <__ssprint_r>
 80204f4:	2800      	cmp	r0, #0
 80204f6:	f040 8235 	bne.w	8020964 <_svfprintf_r+0x1304>
 80204fa:	ac25      	add	r4, sp, #148	; 0x94
 80204fc:	9b05      	ldr	r3, [sp, #20]
 80204fe:	9a05      	ldr	r2, [sp, #20]
 8020500:	6063      	str	r3, [r4, #4]
 8020502:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020504:	f8c4 9000 	str.w	r9, [r4]
 8020508:	4413      	add	r3, r2
 802050a:	9324      	str	r3, [sp, #144]	; 0x90
 802050c:	e487      	b.n	801fe1e <_svfprintf_r+0x7be>
 802050e:	aa22      	add	r2, sp, #136	; 0x88
 8020510:	4641      	mov	r1, r8
 8020512:	4650      	mov	r0, sl
 8020514:	f001 fdbb 	bl	802208e <__ssprint_r>
 8020518:	2800      	cmp	r0, #0
 802051a:	f040 8223 	bne.w	8020964 <_svfprintf_r+0x1304>
 802051e:	ac25      	add	r4, sp, #148	; 0x94
 8020520:	e7b8      	b.n	8020494 <_svfprintf_r+0xe34>
 8020522:	aa22      	add	r2, sp, #136	; 0x88
 8020524:	4641      	mov	r1, r8
 8020526:	4650      	mov	r0, sl
 8020528:	f001 fdb1 	bl	802208e <__ssprint_r>
 802052c:	2800      	cmp	r0, #0
 802052e:	f040 8219 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020532:	ac25      	add	r4, sp, #148	; 0x94
 8020534:	e7c3      	b.n	80204be <_svfprintf_r+0xe5e>
 8020536:	3110      	adds	r1, #16
 8020538:	2a07      	cmp	r2, #7
 802053a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 802053e:	605f      	str	r7, [r3, #4]
 8020540:	dd08      	ble.n	8020554 <_svfprintf_r+0xef4>
 8020542:	aa22      	add	r2, sp, #136	; 0x88
 8020544:	4641      	mov	r1, r8
 8020546:	4650      	mov	r0, sl
 8020548:	f001 fda1 	bl	802208e <__ssprint_r>
 802054c:	2800      	cmp	r0, #0
 802054e:	f040 8209 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020552:	ac25      	add	r4, sp, #148	; 0x94
 8020554:	3d10      	subs	r5, #16
 8020556:	4623      	mov	r3, r4
 8020558:	e7b8      	b.n	80204cc <_svfprintf_r+0xe6c>
 802055a:	bf00      	nop
 802055c:	08025d8e 	.word	0x08025d8e
 8020560:	08025da0 	.word	0x08025da0
 8020564:	9f05      	ldr	r7, [sp, #20]
 8020566:	42af      	cmp	r7, r5
 8020568:	bfa8      	it	ge
 802056a:	462f      	movge	r7, r5
 802056c:	2f00      	cmp	r7, #0
 802056e:	dd0a      	ble.n	8020586 <_svfprintf_r+0xf26>
 8020570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020572:	3301      	adds	r3, #1
 8020574:	443e      	add	r6, r7
 8020576:	2b07      	cmp	r3, #7
 8020578:	e9c4 9700 	strd	r9, r7, [r4]
 802057c:	9624      	str	r6, [sp, #144]	; 0x90
 802057e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020580:	f300 8085 	bgt.w	802068e <_svfprintf_r+0x102e>
 8020584:	3408      	adds	r4, #8
 8020586:	2f00      	cmp	r7, #0
 8020588:	bfac      	ite	ge
 802058a:	1bee      	subge	r6, r5, r7
 802058c:	462e      	movlt	r6, r5
 802058e:	2e00      	cmp	r6, #0
 8020590:	dd19      	ble.n	80205c6 <_svfprintf_r+0xf66>
 8020592:	4f97      	ldr	r7, [pc, #604]	; (80207f0 <_svfprintf_r+0x1190>)
 8020594:	6027      	str	r7, [r4, #0]
 8020596:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802059a:	2e10      	cmp	r6, #16
 802059c:	f103 0301 	add.w	r3, r3, #1
 80205a0:	f104 0108 	add.w	r1, r4, #8
 80205a4:	dc7d      	bgt.n	80206a2 <_svfprintf_r+0x1042>
 80205a6:	6066      	str	r6, [r4, #4]
 80205a8:	2b07      	cmp	r3, #7
 80205aa:	4416      	add	r6, r2
 80205ac:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80205b0:	f340 808a 	ble.w	80206c8 <_svfprintf_r+0x1068>
 80205b4:	aa22      	add	r2, sp, #136	; 0x88
 80205b6:	4641      	mov	r1, r8
 80205b8:	4650      	mov	r0, sl
 80205ba:	f001 fd68 	bl	802208e <__ssprint_r>
 80205be:	2800      	cmp	r0, #0
 80205c0:	f040 81d0 	bne.w	8020964 <_svfprintf_r+0x1304>
 80205c4:	ac25      	add	r4, sp, #148	; 0x94
 80205c6:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80205ca:	444d      	add	r5, r9
 80205cc:	d00a      	beq.n	80205e4 <_svfprintf_r+0xf84>
 80205ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d17b      	bne.n	80206cc <_svfprintf_r+0x106c>
 80205d4:	9b08      	ldr	r3, [sp, #32]
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d17b      	bne.n	80206d2 <_svfprintf_r+0x1072>
 80205da:	9b05      	ldr	r3, [sp, #20]
 80205dc:	444b      	add	r3, r9
 80205de:	429d      	cmp	r5, r3
 80205e0:	bf28      	it	cs
 80205e2:	461d      	movcs	r5, r3
 80205e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80205e6:	9a05      	ldr	r2, [sp, #20]
 80205e8:	4293      	cmp	r3, r2
 80205ea:	db02      	blt.n	80205f2 <_svfprintf_r+0xf92>
 80205ec:	f01b 0f01 	tst.w	fp, #1
 80205f0:	d00e      	beq.n	8020610 <_svfprintf_r+0xfb0>
 80205f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80205f4:	6023      	str	r3, [r4, #0]
 80205f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80205fa:	6063      	str	r3, [r4, #4]
 80205fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80205fe:	4413      	add	r3, r2
 8020600:	9324      	str	r3, [sp, #144]	; 0x90
 8020602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020604:	3301      	adds	r3, #1
 8020606:	2b07      	cmp	r3, #7
 8020608:	9323      	str	r3, [sp, #140]	; 0x8c
 802060a:	f300 80dd 	bgt.w	80207c8 <_svfprintf_r+0x1168>
 802060e:	3408      	adds	r4, #8
 8020610:	9b05      	ldr	r3, [sp, #20]
 8020612:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8020614:	eb09 0203 	add.w	r2, r9, r3
 8020618:	1b9e      	subs	r6, r3, r6
 802061a:	1b52      	subs	r2, r2, r5
 802061c:	4296      	cmp	r6, r2
 802061e:	bfa8      	it	ge
 8020620:	4616      	movge	r6, r2
 8020622:	2e00      	cmp	r6, #0
 8020624:	dd0b      	ble.n	802063e <_svfprintf_r+0xfde>
 8020626:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020628:	4433      	add	r3, r6
 802062a:	9324      	str	r3, [sp, #144]	; 0x90
 802062c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802062e:	3301      	adds	r3, #1
 8020630:	2b07      	cmp	r3, #7
 8020632:	e9c4 5600 	strd	r5, r6, [r4]
 8020636:	9323      	str	r3, [sp, #140]	; 0x8c
 8020638:	f300 80d0 	bgt.w	80207dc <_svfprintf_r+0x117c>
 802063c:	3408      	adds	r4, #8
 802063e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020640:	9b05      	ldr	r3, [sp, #20]
 8020642:	2e00      	cmp	r6, #0
 8020644:	eba3 0505 	sub.w	r5, r3, r5
 8020648:	bfa8      	it	ge
 802064a:	1bad      	subge	r5, r5, r6
 802064c:	2d00      	cmp	r5, #0
 802064e:	f77f abed 	ble.w	801fe2c <_svfprintf_r+0x7cc>
 8020652:	4e67      	ldr	r6, [pc, #412]	; (80207f0 <_svfprintf_r+0x1190>)
 8020654:	2710      	movs	r7, #16
 8020656:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802065a:	2d10      	cmp	r5, #16
 802065c:	f103 0301 	add.w	r3, r3, #1
 8020660:	f104 0108 	add.w	r1, r4, #8
 8020664:	6026      	str	r6, [r4, #0]
 8020666:	f77f aecf 	ble.w	8020408 <_svfprintf_r+0xda8>
 802066a:	3210      	adds	r2, #16
 802066c:	2b07      	cmp	r3, #7
 802066e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020672:	6067      	str	r7, [r4, #4]
 8020674:	dd08      	ble.n	8020688 <_svfprintf_r+0x1028>
 8020676:	aa22      	add	r2, sp, #136	; 0x88
 8020678:	4641      	mov	r1, r8
 802067a:	4650      	mov	r0, sl
 802067c:	f001 fd07 	bl	802208e <__ssprint_r>
 8020680:	2800      	cmp	r0, #0
 8020682:	f040 816f 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020686:	a925      	add	r1, sp, #148	; 0x94
 8020688:	3d10      	subs	r5, #16
 802068a:	460c      	mov	r4, r1
 802068c:	e7e3      	b.n	8020656 <_svfprintf_r+0xff6>
 802068e:	aa22      	add	r2, sp, #136	; 0x88
 8020690:	4641      	mov	r1, r8
 8020692:	4650      	mov	r0, sl
 8020694:	f001 fcfb 	bl	802208e <__ssprint_r>
 8020698:	2800      	cmp	r0, #0
 802069a:	f040 8163 	bne.w	8020964 <_svfprintf_r+0x1304>
 802069e:	ac25      	add	r4, sp, #148	; 0x94
 80206a0:	e771      	b.n	8020586 <_svfprintf_r+0xf26>
 80206a2:	2010      	movs	r0, #16
 80206a4:	4402      	add	r2, r0
 80206a6:	2b07      	cmp	r3, #7
 80206a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80206ac:	6060      	str	r0, [r4, #4]
 80206ae:	dd08      	ble.n	80206c2 <_svfprintf_r+0x1062>
 80206b0:	aa22      	add	r2, sp, #136	; 0x88
 80206b2:	4641      	mov	r1, r8
 80206b4:	4650      	mov	r0, sl
 80206b6:	f001 fcea 	bl	802208e <__ssprint_r>
 80206ba:	2800      	cmp	r0, #0
 80206bc:	f040 8152 	bne.w	8020964 <_svfprintf_r+0x1304>
 80206c0:	a925      	add	r1, sp, #148	; 0x94
 80206c2:	3e10      	subs	r6, #16
 80206c4:	460c      	mov	r4, r1
 80206c6:	e765      	b.n	8020594 <_svfprintf_r+0xf34>
 80206c8:	460c      	mov	r4, r1
 80206ca:	e77c      	b.n	80205c6 <_svfprintf_r+0xf66>
 80206cc:	9b08      	ldr	r3, [sp, #32]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	d04a      	beq.n	8020768 <_svfprintf_r+0x1108>
 80206d2:	9b08      	ldr	r3, [sp, #32]
 80206d4:	3b01      	subs	r3, #1
 80206d6:	9308      	str	r3, [sp, #32]
 80206d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80206da:	6023      	str	r3, [r4, #0]
 80206dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80206e0:	6063      	str	r3, [r4, #4]
 80206e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206e4:	4413      	add	r3, r2
 80206e6:	9324      	str	r3, [sp, #144]	; 0x90
 80206e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80206ea:	3301      	adds	r3, #1
 80206ec:	2b07      	cmp	r3, #7
 80206ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80206f0:	dc41      	bgt.n	8020776 <_svfprintf_r+0x1116>
 80206f2:	3408      	adds	r4, #8
 80206f4:	9b05      	ldr	r3, [sp, #20]
 80206f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206f8:	eb09 0703 	add.w	r7, r9, r3
 80206fc:	1b7b      	subs	r3, r7, r5
 80206fe:	7817      	ldrb	r7, [r2, #0]
 8020700:	429f      	cmp	r7, r3
 8020702:	bfa8      	it	ge
 8020704:	461f      	movge	r7, r3
 8020706:	2f00      	cmp	r7, #0
 8020708:	dd0a      	ble.n	8020720 <_svfprintf_r+0x10c0>
 802070a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802070c:	443b      	add	r3, r7
 802070e:	9324      	str	r3, [sp, #144]	; 0x90
 8020710:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020712:	3301      	adds	r3, #1
 8020714:	2b07      	cmp	r3, #7
 8020716:	e9c4 5700 	strd	r5, r7, [r4]
 802071a:	9323      	str	r3, [sp, #140]	; 0x8c
 802071c:	dc35      	bgt.n	802078a <_svfprintf_r+0x112a>
 802071e:	3408      	adds	r4, #8
 8020720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020722:	781e      	ldrb	r6, [r3, #0]
 8020724:	2f00      	cmp	r7, #0
 8020726:	bfa8      	it	ge
 8020728:	1bf6      	subge	r6, r6, r7
 802072a:	2e00      	cmp	r6, #0
 802072c:	dd18      	ble.n	8020760 <_svfprintf_r+0x1100>
 802072e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020732:	482f      	ldr	r0, [pc, #188]	; (80207f0 <_svfprintf_r+0x1190>)
 8020734:	6020      	str	r0, [r4, #0]
 8020736:	2e10      	cmp	r6, #16
 8020738:	f103 0301 	add.w	r3, r3, #1
 802073c:	f104 0108 	add.w	r1, r4, #8
 8020740:	dc2d      	bgt.n	802079e <_svfprintf_r+0x113e>
 8020742:	4432      	add	r2, r6
 8020744:	2b07      	cmp	r3, #7
 8020746:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802074a:	6066      	str	r6, [r4, #4]
 802074c:	dd3a      	ble.n	80207c4 <_svfprintf_r+0x1164>
 802074e:	aa22      	add	r2, sp, #136	; 0x88
 8020750:	4641      	mov	r1, r8
 8020752:	4650      	mov	r0, sl
 8020754:	f001 fc9b 	bl	802208e <__ssprint_r>
 8020758:	2800      	cmp	r0, #0
 802075a:	f040 8103 	bne.w	8020964 <_svfprintf_r+0x1304>
 802075e:	ac25      	add	r4, sp, #148	; 0x94
 8020760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020762:	781b      	ldrb	r3, [r3, #0]
 8020764:	441d      	add	r5, r3
 8020766:	e732      	b.n	80205ce <_svfprintf_r+0xf6e>
 8020768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802076a:	3b01      	subs	r3, #1
 802076c:	930a      	str	r3, [sp, #40]	; 0x28
 802076e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020770:	3b01      	subs	r3, #1
 8020772:	9309      	str	r3, [sp, #36]	; 0x24
 8020774:	e7b0      	b.n	80206d8 <_svfprintf_r+0x1078>
 8020776:	aa22      	add	r2, sp, #136	; 0x88
 8020778:	4641      	mov	r1, r8
 802077a:	4650      	mov	r0, sl
 802077c:	f001 fc87 	bl	802208e <__ssprint_r>
 8020780:	2800      	cmp	r0, #0
 8020782:	f040 80ef 	bne.w	8020964 <_svfprintf_r+0x1304>
 8020786:	ac25      	add	r4, sp, #148	; 0x94
 8020788:	e7b4      	b.n	80206f4 <_svfprintf_r+0x1094>
 802078a:	aa22      	add	r2, sp, #136	; 0x88
 802078c:	4641      	mov	r1, r8
 802078e:	4650      	mov	r0, sl
 8020790:	f001 fc7d 	bl	802208e <__ssprint_r>
 8020794:	2800      	cmp	r0, #0
 8020796:	f040 80e5 	bne.w	8020964 <_svfprintf_r+0x1304>
 802079a:	ac25      	add	r4, sp, #148	; 0x94
 802079c:	e7c0      	b.n	8020720 <_svfprintf_r+0x10c0>
 802079e:	2010      	movs	r0, #16
 80207a0:	4402      	add	r2, r0
 80207a2:	2b07      	cmp	r3, #7
 80207a4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80207a8:	6060      	str	r0, [r4, #4]
 80207aa:	dd08      	ble.n	80207be <_svfprintf_r+0x115e>
 80207ac:	aa22      	add	r2, sp, #136	; 0x88
 80207ae:	4641      	mov	r1, r8
 80207b0:	4650      	mov	r0, sl
 80207b2:	f001 fc6c 	bl	802208e <__ssprint_r>
 80207b6:	2800      	cmp	r0, #0
 80207b8:	f040 80d4 	bne.w	8020964 <_svfprintf_r+0x1304>
 80207bc:	a925      	add	r1, sp, #148	; 0x94
 80207be:	3e10      	subs	r6, #16
 80207c0:	460c      	mov	r4, r1
 80207c2:	e7b4      	b.n	802072e <_svfprintf_r+0x10ce>
 80207c4:	460c      	mov	r4, r1
 80207c6:	e7cb      	b.n	8020760 <_svfprintf_r+0x1100>
 80207c8:	aa22      	add	r2, sp, #136	; 0x88
 80207ca:	4641      	mov	r1, r8
 80207cc:	4650      	mov	r0, sl
 80207ce:	f001 fc5e 	bl	802208e <__ssprint_r>
 80207d2:	2800      	cmp	r0, #0
 80207d4:	f040 80c6 	bne.w	8020964 <_svfprintf_r+0x1304>
 80207d8:	ac25      	add	r4, sp, #148	; 0x94
 80207da:	e719      	b.n	8020610 <_svfprintf_r+0xfb0>
 80207dc:	aa22      	add	r2, sp, #136	; 0x88
 80207de:	4641      	mov	r1, r8
 80207e0:	4650      	mov	r0, sl
 80207e2:	f001 fc54 	bl	802208e <__ssprint_r>
 80207e6:	2800      	cmp	r0, #0
 80207e8:	f040 80bc 	bne.w	8020964 <_svfprintf_r+0x1304>
 80207ec:	ac25      	add	r4, sp, #148	; 0x94
 80207ee:	e726      	b.n	802063e <_svfprintf_r+0xfde>
 80207f0:	08025da0 	.word	0x08025da0
 80207f4:	9a05      	ldr	r2, [sp, #20]
 80207f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80207f8:	2a01      	cmp	r2, #1
 80207fa:	f106 0601 	add.w	r6, r6, #1
 80207fe:	f103 0301 	add.w	r3, r3, #1
 8020802:	f104 0508 	add.w	r5, r4, #8
 8020806:	dc02      	bgt.n	802080e <_svfprintf_r+0x11ae>
 8020808:	f01b 0f01 	tst.w	fp, #1
 802080c:	d07e      	beq.n	802090c <_svfprintf_r+0x12ac>
 802080e:	2201      	movs	r2, #1
 8020810:	2b07      	cmp	r3, #7
 8020812:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020816:	f8c4 9000 	str.w	r9, [r4]
 802081a:	6062      	str	r2, [r4, #4]
 802081c:	dd08      	ble.n	8020830 <_svfprintf_r+0x11d0>
 802081e:	aa22      	add	r2, sp, #136	; 0x88
 8020820:	4641      	mov	r1, r8
 8020822:	4650      	mov	r0, sl
 8020824:	f001 fc33 	bl	802208e <__ssprint_r>
 8020828:	2800      	cmp	r0, #0
 802082a:	f040 809b 	bne.w	8020964 <_svfprintf_r+0x1304>
 802082e:	ad25      	add	r5, sp, #148	; 0x94
 8020830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020832:	602b      	str	r3, [r5, #0]
 8020834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020838:	606b      	str	r3, [r5, #4]
 802083a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802083c:	4413      	add	r3, r2
 802083e:	9324      	str	r3, [sp, #144]	; 0x90
 8020840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020842:	3301      	adds	r3, #1
 8020844:	2b07      	cmp	r3, #7
 8020846:	9323      	str	r3, [sp, #140]	; 0x8c
 8020848:	dc32      	bgt.n	80208b0 <_svfprintf_r+0x1250>
 802084a:	3508      	adds	r5, #8
 802084c:	9b05      	ldr	r3, [sp, #20]
 802084e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020852:	1e5c      	subs	r4, r3, #1
 8020854:	2200      	movs	r2, #0
 8020856:	2300      	movs	r3, #0
 8020858:	f7e0 f956 	bl	8000b08 <__aeabi_dcmpeq>
 802085c:	2800      	cmp	r0, #0
 802085e:	d130      	bne.n	80208c2 <_svfprintf_r+0x1262>
 8020860:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8020862:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020864:	9a05      	ldr	r2, [sp, #20]
 8020866:	3101      	adds	r1, #1
 8020868:	3b01      	subs	r3, #1
 802086a:	f109 0001 	add.w	r0, r9, #1
 802086e:	4413      	add	r3, r2
 8020870:	2907      	cmp	r1, #7
 8020872:	e9c5 0400 	strd	r0, r4, [r5]
 8020876:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 802087a:	dd50      	ble.n	802091e <_svfprintf_r+0x12be>
 802087c:	aa22      	add	r2, sp, #136	; 0x88
 802087e:	4641      	mov	r1, r8
 8020880:	4650      	mov	r0, sl
 8020882:	f001 fc04 	bl	802208e <__ssprint_r>
 8020886:	2800      	cmp	r0, #0
 8020888:	d16c      	bne.n	8020964 <_svfprintf_r+0x1304>
 802088a:	ad25      	add	r5, sp, #148	; 0x94
 802088c:	ab1e      	add	r3, sp, #120	; 0x78
 802088e:	602b      	str	r3, [r5, #0]
 8020890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020892:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020894:	606b      	str	r3, [r5, #4]
 8020896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020898:	4413      	add	r3, r2
 802089a:	9324      	str	r3, [sp, #144]	; 0x90
 802089c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802089e:	3301      	adds	r3, #1
 80208a0:	2b07      	cmp	r3, #7
 80208a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80208a4:	f73f adb7 	bgt.w	8020416 <_svfprintf_r+0xdb6>
 80208a8:	f105 0408 	add.w	r4, r5, #8
 80208ac:	f7ff babe 	b.w	801fe2c <_svfprintf_r+0x7cc>
 80208b0:	aa22      	add	r2, sp, #136	; 0x88
 80208b2:	4641      	mov	r1, r8
 80208b4:	4650      	mov	r0, sl
 80208b6:	f001 fbea 	bl	802208e <__ssprint_r>
 80208ba:	2800      	cmp	r0, #0
 80208bc:	d152      	bne.n	8020964 <_svfprintf_r+0x1304>
 80208be:	ad25      	add	r5, sp, #148	; 0x94
 80208c0:	e7c4      	b.n	802084c <_svfprintf_r+0x11ec>
 80208c2:	2c00      	cmp	r4, #0
 80208c4:	dde2      	ble.n	802088c <_svfprintf_r+0x122c>
 80208c6:	4e56      	ldr	r6, [pc, #344]	; (8020a20 <_svfprintf_r+0x13c0>)
 80208c8:	2710      	movs	r7, #16
 80208ca:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80208ce:	2c10      	cmp	r4, #16
 80208d0:	f103 0301 	add.w	r3, r3, #1
 80208d4:	f105 0108 	add.w	r1, r5, #8
 80208d8:	602e      	str	r6, [r5, #0]
 80208da:	dc07      	bgt.n	80208ec <_svfprintf_r+0x128c>
 80208dc:	606c      	str	r4, [r5, #4]
 80208de:	2b07      	cmp	r3, #7
 80208e0:	4414      	add	r4, r2
 80208e2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80208e6:	dcc9      	bgt.n	802087c <_svfprintf_r+0x121c>
 80208e8:	460d      	mov	r5, r1
 80208ea:	e7cf      	b.n	802088c <_svfprintf_r+0x122c>
 80208ec:	3210      	adds	r2, #16
 80208ee:	2b07      	cmp	r3, #7
 80208f0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80208f4:	606f      	str	r7, [r5, #4]
 80208f6:	dd06      	ble.n	8020906 <_svfprintf_r+0x12a6>
 80208f8:	aa22      	add	r2, sp, #136	; 0x88
 80208fa:	4641      	mov	r1, r8
 80208fc:	4650      	mov	r0, sl
 80208fe:	f001 fbc6 	bl	802208e <__ssprint_r>
 8020902:	bb78      	cbnz	r0, 8020964 <_svfprintf_r+0x1304>
 8020904:	a925      	add	r1, sp, #148	; 0x94
 8020906:	3c10      	subs	r4, #16
 8020908:	460d      	mov	r5, r1
 802090a:	e7de      	b.n	80208ca <_svfprintf_r+0x126a>
 802090c:	2201      	movs	r2, #1
 802090e:	2b07      	cmp	r3, #7
 8020910:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020914:	f8c4 9000 	str.w	r9, [r4]
 8020918:	6062      	str	r2, [r4, #4]
 802091a:	ddb7      	ble.n	802088c <_svfprintf_r+0x122c>
 802091c:	e7ae      	b.n	802087c <_svfprintf_r+0x121c>
 802091e:	3508      	adds	r5, #8
 8020920:	e7b4      	b.n	802088c <_svfprintf_r+0x122c>
 8020922:	460c      	mov	r4, r1
 8020924:	f7ff ba82 	b.w	801fe2c <_svfprintf_r+0x7cc>
 8020928:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 802092c:	1a9d      	subs	r5, r3, r2
 802092e:	2d00      	cmp	r5, #0
 8020930:	f77f aa80 	ble.w	801fe34 <_svfprintf_r+0x7d4>
 8020934:	4e3b      	ldr	r6, [pc, #236]	; (8020a24 <_svfprintf_r+0x13c4>)
 8020936:	2710      	movs	r7, #16
 8020938:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802093c:	2d10      	cmp	r5, #16
 802093e:	f103 0301 	add.w	r3, r3, #1
 8020942:	6026      	str	r6, [r4, #0]
 8020944:	dc18      	bgt.n	8020978 <_svfprintf_r+0x1318>
 8020946:	6065      	str	r5, [r4, #4]
 8020948:	2b07      	cmp	r3, #7
 802094a:	4415      	add	r5, r2
 802094c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8020950:	f77f aa70 	ble.w	801fe34 <_svfprintf_r+0x7d4>
 8020954:	aa22      	add	r2, sp, #136	; 0x88
 8020956:	4641      	mov	r1, r8
 8020958:	4650      	mov	r0, sl
 802095a:	f001 fb98 	bl	802208e <__ssprint_r>
 802095e:	2800      	cmp	r0, #0
 8020960:	f43f aa68 	beq.w	801fe34 <_svfprintf_r+0x7d4>
 8020964:	9b03      	ldr	r3, [sp, #12]
 8020966:	2b00      	cmp	r3, #0
 8020968:	f43f a887 	beq.w	801fa7a <_svfprintf_r+0x41a>
 802096c:	4619      	mov	r1, r3
 802096e:	4650      	mov	r0, sl
 8020970:	f000 ff44 	bl	80217fc <_free_r>
 8020974:	f7ff b881 	b.w	801fa7a <_svfprintf_r+0x41a>
 8020978:	3210      	adds	r2, #16
 802097a:	2b07      	cmp	r3, #7
 802097c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020980:	6067      	str	r7, [r4, #4]
 8020982:	dc02      	bgt.n	802098a <_svfprintf_r+0x132a>
 8020984:	3408      	adds	r4, #8
 8020986:	3d10      	subs	r5, #16
 8020988:	e7d6      	b.n	8020938 <_svfprintf_r+0x12d8>
 802098a:	aa22      	add	r2, sp, #136	; 0x88
 802098c:	4641      	mov	r1, r8
 802098e:	4650      	mov	r0, sl
 8020990:	f001 fb7d 	bl	802208e <__ssprint_r>
 8020994:	2800      	cmp	r0, #0
 8020996:	d1e5      	bne.n	8020964 <_svfprintf_r+0x1304>
 8020998:	ac25      	add	r4, sp, #148	; 0x94
 802099a:	e7f4      	b.n	8020986 <_svfprintf_r+0x1326>
 802099c:	9903      	ldr	r1, [sp, #12]
 802099e:	4650      	mov	r0, sl
 80209a0:	f000 ff2c 	bl	80217fc <_free_r>
 80209a4:	f7ff ba5e 	b.w	801fe64 <_svfprintf_r+0x804>
 80209a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	f43f a865 	beq.w	801fa7a <_svfprintf_r+0x41a>
 80209b0:	aa22      	add	r2, sp, #136	; 0x88
 80209b2:	4641      	mov	r1, r8
 80209b4:	4650      	mov	r0, sl
 80209b6:	f001 fb6a 	bl	802208e <__ssprint_r>
 80209ba:	f7ff b85e 	b.w	801fa7a <_svfprintf_r+0x41a>
 80209be:	ea56 0205 	orrs.w	r2, r6, r5
 80209c2:	465f      	mov	r7, fp
 80209c4:	f43f ab78 	beq.w	80200b8 <_svfprintf_r+0xa58>
 80209c8:	2b01      	cmp	r3, #1
 80209ca:	f43f ac15 	beq.w	80201f8 <_svfprintf_r+0xb98>
 80209ce:	2b02      	cmp	r3, #2
 80209d0:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 80209d4:	f43f ac5b 	beq.w	802028e <_svfprintf_r+0xc2e>
 80209d8:	f006 0307 	and.w	r3, r6, #7
 80209dc:	08f6      	lsrs	r6, r6, #3
 80209de:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 80209e2:	08ed      	lsrs	r5, r5, #3
 80209e4:	3330      	adds	r3, #48	; 0x30
 80209e6:	ea56 0105 	orrs.w	r1, r6, r5
 80209ea:	464a      	mov	r2, r9
 80209ec:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80209f0:	d1f2      	bne.n	80209d8 <_svfprintf_r+0x1378>
 80209f2:	07f9      	lsls	r1, r7, #31
 80209f4:	d506      	bpl.n	8020a04 <_svfprintf_r+0x13a4>
 80209f6:	2b30      	cmp	r3, #48	; 0x30
 80209f8:	d004      	beq.n	8020a04 <_svfprintf_r+0x13a4>
 80209fa:	2330      	movs	r3, #48	; 0x30
 80209fc:	f809 3c01 	strb.w	r3, [r9, #-1]
 8020a00:	f1a2 0902 	sub.w	r9, r2, #2
 8020a04:	ab4e      	add	r3, sp, #312	; 0x138
 8020a06:	eba3 0309 	sub.w	r3, r3, r9
 8020a0a:	9e04      	ldr	r6, [sp, #16]
 8020a0c:	9304      	str	r3, [sp, #16]
 8020a0e:	2300      	movs	r3, #0
 8020a10:	46bb      	mov	fp, r7
 8020a12:	9303      	str	r3, [sp, #12]
 8020a14:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8020a18:	461d      	mov	r5, r3
 8020a1a:	f7ff b94d 	b.w	801fcb8 <_svfprintf_r+0x658>
 8020a1e:	bf00      	nop
 8020a20:	08025da0 	.word	0x08025da0
 8020a24:	08025d90 	.word	0x08025d90

08020a28 <sysconf>:
 8020a28:	2808      	cmp	r0, #8
 8020a2a:	b508      	push	{r3, lr}
 8020a2c:	d006      	beq.n	8020a3c <sysconf+0x14>
 8020a2e:	f7fe f9d3 	bl	801edd8 <__errno>
 8020a32:	2316      	movs	r3, #22
 8020a34:	6003      	str	r3, [r0, #0]
 8020a36:	f04f 30ff 	mov.w	r0, #4294967295
 8020a3a:	bd08      	pop	{r3, pc}
 8020a3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8020a40:	e7fb      	b.n	8020a3a <sysconf+0x12>
	...

08020a44 <register_fini>:
 8020a44:	4b02      	ldr	r3, [pc, #8]	; (8020a50 <register_fini+0xc>)
 8020a46:	b113      	cbz	r3, 8020a4e <register_fini+0xa>
 8020a48:	4802      	ldr	r0, [pc, #8]	; (8020a54 <register_fini+0x10>)
 8020a4a:	f000 b805 	b.w	8020a58 <atexit>
 8020a4e:	4770      	bx	lr
 8020a50:	00000000 	.word	0x00000000
 8020a54:	0802172d 	.word	0x0802172d

08020a58 <atexit>:
 8020a58:	2300      	movs	r3, #0
 8020a5a:	4601      	mov	r1, r0
 8020a5c:	461a      	mov	r2, r3
 8020a5e:	4618      	mov	r0, r3
 8020a60:	f001 bb90 	b.w	8022184 <__register_exitproc>

08020a64 <quorem>:
 8020a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a68:	6903      	ldr	r3, [r0, #16]
 8020a6a:	690c      	ldr	r4, [r1, #16]
 8020a6c:	42a3      	cmp	r3, r4
 8020a6e:	4607      	mov	r7, r0
 8020a70:	f2c0 8081 	blt.w	8020b76 <quorem+0x112>
 8020a74:	3c01      	subs	r4, #1
 8020a76:	f101 0814 	add.w	r8, r1, #20
 8020a7a:	f100 0514 	add.w	r5, r0, #20
 8020a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020a82:	9301      	str	r3, [sp, #4]
 8020a84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020a8c:	3301      	adds	r3, #1
 8020a8e:	429a      	cmp	r2, r3
 8020a90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020a94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020a98:	fbb2 f6f3 	udiv	r6, r2, r3
 8020a9c:	d331      	bcc.n	8020b02 <quorem+0x9e>
 8020a9e:	f04f 0e00 	mov.w	lr, #0
 8020aa2:	4640      	mov	r0, r8
 8020aa4:	46ac      	mov	ip, r5
 8020aa6:	46f2      	mov	sl, lr
 8020aa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8020aac:	b293      	uxth	r3, r2
 8020aae:	fb06 e303 	mla	r3, r6, r3, lr
 8020ab2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020ab6:	b29b      	uxth	r3, r3
 8020ab8:	ebaa 0303 	sub.w	r3, sl, r3
 8020abc:	f8dc a000 	ldr.w	sl, [ip]
 8020ac0:	0c12      	lsrs	r2, r2, #16
 8020ac2:	fa13 f38a 	uxtah	r3, r3, sl
 8020ac6:	fb06 e202 	mla	r2, r6, r2, lr
 8020aca:	9300      	str	r3, [sp, #0]
 8020acc:	9b00      	ldr	r3, [sp, #0]
 8020ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020ad2:	b292      	uxth	r2, r2
 8020ad4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020adc:	f8bd 3000 	ldrh.w	r3, [sp]
 8020ae0:	4581      	cmp	r9, r0
 8020ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020ae6:	f84c 3b04 	str.w	r3, [ip], #4
 8020aea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020aee:	d2db      	bcs.n	8020aa8 <quorem+0x44>
 8020af0:	f855 300b 	ldr.w	r3, [r5, fp]
 8020af4:	b92b      	cbnz	r3, 8020b02 <quorem+0x9e>
 8020af6:	9b01      	ldr	r3, [sp, #4]
 8020af8:	3b04      	subs	r3, #4
 8020afa:	429d      	cmp	r5, r3
 8020afc:	461a      	mov	r2, r3
 8020afe:	d32e      	bcc.n	8020b5e <quorem+0xfa>
 8020b00:	613c      	str	r4, [r7, #16]
 8020b02:	4638      	mov	r0, r7
 8020b04:	f001 f976 	bl	8021df4 <__mcmp>
 8020b08:	2800      	cmp	r0, #0
 8020b0a:	db24      	blt.n	8020b56 <quorem+0xf2>
 8020b0c:	3601      	adds	r6, #1
 8020b0e:	4628      	mov	r0, r5
 8020b10:	f04f 0c00 	mov.w	ip, #0
 8020b14:	f858 2b04 	ldr.w	r2, [r8], #4
 8020b18:	f8d0 e000 	ldr.w	lr, [r0]
 8020b1c:	b293      	uxth	r3, r2
 8020b1e:	ebac 0303 	sub.w	r3, ip, r3
 8020b22:	0c12      	lsrs	r2, r2, #16
 8020b24:	fa13 f38e 	uxtah	r3, r3, lr
 8020b28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020b30:	b29b      	uxth	r3, r3
 8020b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020b36:	45c1      	cmp	r9, r8
 8020b38:	f840 3b04 	str.w	r3, [r0], #4
 8020b3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020b40:	d2e8      	bcs.n	8020b14 <quorem+0xb0>
 8020b42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020b4a:	b922      	cbnz	r2, 8020b56 <quorem+0xf2>
 8020b4c:	3b04      	subs	r3, #4
 8020b4e:	429d      	cmp	r5, r3
 8020b50:	461a      	mov	r2, r3
 8020b52:	d30a      	bcc.n	8020b6a <quorem+0x106>
 8020b54:	613c      	str	r4, [r7, #16]
 8020b56:	4630      	mov	r0, r6
 8020b58:	b003      	add	sp, #12
 8020b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b5e:	6812      	ldr	r2, [r2, #0]
 8020b60:	3b04      	subs	r3, #4
 8020b62:	2a00      	cmp	r2, #0
 8020b64:	d1cc      	bne.n	8020b00 <quorem+0x9c>
 8020b66:	3c01      	subs	r4, #1
 8020b68:	e7c7      	b.n	8020afa <quorem+0x96>
 8020b6a:	6812      	ldr	r2, [r2, #0]
 8020b6c:	3b04      	subs	r3, #4
 8020b6e:	2a00      	cmp	r2, #0
 8020b70:	d1f0      	bne.n	8020b54 <quorem+0xf0>
 8020b72:	3c01      	subs	r4, #1
 8020b74:	e7eb      	b.n	8020b4e <quorem+0xea>
 8020b76:	2000      	movs	r0, #0
 8020b78:	e7ee      	b.n	8020b58 <quorem+0xf4>
 8020b7a:	0000      	movs	r0, r0
 8020b7c:	0000      	movs	r0, r0
	...

08020b80 <_dtoa_r>:
 8020b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b84:	ed2d 8b04 	vpush	{d8-d9}
 8020b88:	b093      	sub	sp, #76	; 0x4c
 8020b8a:	ec57 6b10 	vmov	r6, r7, d0
 8020b8e:	9106      	str	r1, [sp, #24]
 8020b90:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020b92:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020b94:	9209      	str	r2, [sp, #36]	; 0x24
 8020b96:	ee10 aa10 	vmov	sl, s0
 8020b9a:	4604      	mov	r4, r0
 8020b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8020b9e:	46bb      	mov	fp, r7
 8020ba0:	b141      	cbz	r1, 8020bb4 <_dtoa_r+0x34>
 8020ba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020ba4:	604a      	str	r2, [r1, #4]
 8020ba6:	2301      	movs	r3, #1
 8020ba8:	4093      	lsls	r3, r2
 8020baa:	608b      	str	r3, [r1, #8]
 8020bac:	f000 ff13 	bl	80219d6 <_Bfree>
 8020bb0:	2300      	movs	r3, #0
 8020bb2:	6423      	str	r3, [r4, #64]	; 0x40
 8020bb4:	1e3b      	subs	r3, r7, #0
 8020bb6:	bfaa      	itet	ge
 8020bb8:	2300      	movge	r3, #0
 8020bba:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020bbe:	602b      	strge	r3, [r5, #0]
 8020bc0:	4ba3      	ldr	r3, [pc, #652]	; (8020e50 <_dtoa_r+0x2d0>)
 8020bc2:	bfbc      	itt	lt
 8020bc4:	2201      	movlt	r2, #1
 8020bc6:	602a      	strlt	r2, [r5, #0]
 8020bc8:	ea33 030b 	bics.w	r3, r3, fp
 8020bcc:	d11b      	bne.n	8020c06 <_dtoa_r+0x86>
 8020bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020bd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8020bd4:	6013      	str	r3, [r2, #0]
 8020bd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020bda:	4333      	orrs	r3, r6
 8020bdc:	f000 8590 	beq.w	8021700 <_dtoa_r+0xb80>
 8020be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020be2:	b90b      	cbnz	r3, 8020be8 <_dtoa_r+0x68>
 8020be4:	4b9b      	ldr	r3, [pc, #620]	; (8020e54 <_dtoa_r+0x2d4>)
 8020be6:	e022      	b.n	8020c2e <_dtoa_r+0xae>
 8020be8:	4b9a      	ldr	r3, [pc, #616]	; (8020e54 <_dtoa_r+0x2d4>)
 8020bea:	9301      	str	r3, [sp, #4]
 8020bec:	3303      	adds	r3, #3
 8020bee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020bf0:	6013      	str	r3, [r2, #0]
 8020bf2:	9801      	ldr	r0, [sp, #4]
 8020bf4:	b013      	add	sp, #76	; 0x4c
 8020bf6:	ecbd 8b04 	vpop	{d8-d9}
 8020bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bfe:	4b96      	ldr	r3, [pc, #600]	; (8020e58 <_dtoa_r+0x2d8>)
 8020c00:	9301      	str	r3, [sp, #4]
 8020c02:	3308      	adds	r3, #8
 8020c04:	e7f3      	b.n	8020bee <_dtoa_r+0x6e>
 8020c06:	2200      	movs	r2, #0
 8020c08:	2300      	movs	r3, #0
 8020c0a:	4650      	mov	r0, sl
 8020c0c:	4659      	mov	r1, fp
 8020c0e:	f7df ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 8020c12:	ec4b ab19 	vmov	d9, sl, fp
 8020c16:	4680      	mov	r8, r0
 8020c18:	b158      	cbz	r0, 8020c32 <_dtoa_r+0xb2>
 8020c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c1c:	2301      	movs	r3, #1
 8020c1e:	6013      	str	r3, [r2, #0]
 8020c20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	f000 8569 	beq.w	80216fa <_dtoa_r+0xb7a>
 8020c28:	488c      	ldr	r0, [pc, #560]	; (8020e5c <_dtoa_r+0x2dc>)
 8020c2a:	6018      	str	r0, [r3, #0]
 8020c2c:	1e43      	subs	r3, r0, #1
 8020c2e:	9301      	str	r3, [sp, #4]
 8020c30:	e7df      	b.n	8020bf2 <_dtoa_r+0x72>
 8020c32:	ec4b ab10 	vmov	d0, sl, fp
 8020c36:	aa10      	add	r2, sp, #64	; 0x40
 8020c38:	a911      	add	r1, sp, #68	; 0x44
 8020c3a:	4620      	mov	r0, r4
 8020c3c:	f001 f980 	bl	8021f40 <__d2b>
 8020c40:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8020c44:	ee08 0a10 	vmov	s16, r0
 8020c48:	2d00      	cmp	r5, #0
 8020c4a:	f000 8082 	beq.w	8020d52 <_dtoa_r+0x1d2>
 8020c4e:	ee19 3a90 	vmov	r3, s19
 8020c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020c56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020c5a:	4656      	mov	r6, sl
 8020c5c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020c60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020c64:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020c68:	4b7d      	ldr	r3, [pc, #500]	; (8020e60 <_dtoa_r+0x2e0>)
 8020c6a:	2200      	movs	r2, #0
 8020c6c:	4630      	mov	r0, r6
 8020c6e:	4639      	mov	r1, r7
 8020c70:	f7df fb2a 	bl	80002c8 <__aeabi_dsub>
 8020c74:	a370      	add	r3, pc, #448	; (adr r3, 8020e38 <_dtoa_r+0x2b8>)
 8020c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c7a:	f7df fcdd 	bl	8000638 <__aeabi_dmul>
 8020c7e:	a370      	add	r3, pc, #448	; (adr r3, 8020e40 <_dtoa_r+0x2c0>)
 8020c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c84:	f7df fb22 	bl	80002cc <__adddf3>
 8020c88:	4606      	mov	r6, r0
 8020c8a:	4628      	mov	r0, r5
 8020c8c:	460f      	mov	r7, r1
 8020c8e:	f7df fc69 	bl	8000564 <__aeabi_i2d>
 8020c92:	a36d      	add	r3, pc, #436	; (adr r3, 8020e48 <_dtoa_r+0x2c8>)
 8020c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c98:	f7df fcce 	bl	8000638 <__aeabi_dmul>
 8020c9c:	4602      	mov	r2, r0
 8020c9e:	460b      	mov	r3, r1
 8020ca0:	4630      	mov	r0, r6
 8020ca2:	4639      	mov	r1, r7
 8020ca4:	f7df fb12 	bl	80002cc <__adddf3>
 8020ca8:	4606      	mov	r6, r0
 8020caa:	460f      	mov	r7, r1
 8020cac:	f7df ff74 	bl	8000b98 <__aeabi_d2iz>
 8020cb0:	2200      	movs	r2, #0
 8020cb2:	9000      	str	r0, [sp, #0]
 8020cb4:	2300      	movs	r3, #0
 8020cb6:	4630      	mov	r0, r6
 8020cb8:	4639      	mov	r1, r7
 8020cba:	f7df ff2f 	bl	8000b1c <__aeabi_dcmplt>
 8020cbe:	b150      	cbz	r0, 8020cd6 <_dtoa_r+0x156>
 8020cc0:	9800      	ldr	r0, [sp, #0]
 8020cc2:	f7df fc4f 	bl	8000564 <__aeabi_i2d>
 8020cc6:	4632      	mov	r2, r6
 8020cc8:	463b      	mov	r3, r7
 8020cca:	f7df ff1d 	bl	8000b08 <__aeabi_dcmpeq>
 8020cce:	b910      	cbnz	r0, 8020cd6 <_dtoa_r+0x156>
 8020cd0:	9b00      	ldr	r3, [sp, #0]
 8020cd2:	3b01      	subs	r3, #1
 8020cd4:	9300      	str	r3, [sp, #0]
 8020cd6:	9b00      	ldr	r3, [sp, #0]
 8020cd8:	2b16      	cmp	r3, #22
 8020cda:	d858      	bhi.n	8020d8e <_dtoa_r+0x20e>
 8020cdc:	9a00      	ldr	r2, [sp, #0]
 8020cde:	4b61      	ldr	r3, [pc, #388]	; (8020e64 <_dtoa_r+0x2e4>)
 8020ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce8:	ec51 0b19 	vmov	r0, r1, d9
 8020cec:	f7df ff16 	bl	8000b1c <__aeabi_dcmplt>
 8020cf0:	2800      	cmp	r0, #0
 8020cf2:	d04e      	beq.n	8020d92 <_dtoa_r+0x212>
 8020cf4:	9b00      	ldr	r3, [sp, #0]
 8020cf6:	3b01      	subs	r3, #1
 8020cf8:	9300      	str	r3, [sp, #0]
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8020cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d00:	1b5d      	subs	r5, r3, r5
 8020d02:	1e6b      	subs	r3, r5, #1
 8020d04:	9305      	str	r3, [sp, #20]
 8020d06:	bf45      	ittet	mi
 8020d08:	f1c5 0301 	rsbmi	r3, r5, #1
 8020d0c:	9304      	strmi	r3, [sp, #16]
 8020d0e:	2300      	movpl	r3, #0
 8020d10:	2300      	movmi	r3, #0
 8020d12:	bf4c      	ite	mi
 8020d14:	9305      	strmi	r3, [sp, #20]
 8020d16:	9304      	strpl	r3, [sp, #16]
 8020d18:	9b00      	ldr	r3, [sp, #0]
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	db3b      	blt.n	8020d96 <_dtoa_r+0x216>
 8020d1e:	9b05      	ldr	r3, [sp, #20]
 8020d20:	9a00      	ldr	r2, [sp, #0]
 8020d22:	920a      	str	r2, [sp, #40]	; 0x28
 8020d24:	4413      	add	r3, r2
 8020d26:	9305      	str	r3, [sp, #20]
 8020d28:	2300      	movs	r3, #0
 8020d2a:	9307      	str	r3, [sp, #28]
 8020d2c:	9b06      	ldr	r3, [sp, #24]
 8020d2e:	2b09      	cmp	r3, #9
 8020d30:	d869      	bhi.n	8020e06 <_dtoa_r+0x286>
 8020d32:	2b05      	cmp	r3, #5
 8020d34:	bfc4      	itt	gt
 8020d36:	3b04      	subgt	r3, #4
 8020d38:	9306      	strgt	r3, [sp, #24]
 8020d3a:	9b06      	ldr	r3, [sp, #24]
 8020d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8020d40:	bfcc      	ite	gt
 8020d42:	2500      	movgt	r5, #0
 8020d44:	2501      	movle	r5, #1
 8020d46:	2b03      	cmp	r3, #3
 8020d48:	d868      	bhi.n	8020e1c <_dtoa_r+0x29c>
 8020d4a:	e8df f003 	tbb	[pc, r3]
 8020d4e:	3a2d      	.short	0x3a2d
 8020d50:	5a38      	.short	0x5a38
 8020d52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020d56:	441d      	add	r5, r3
 8020d58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020d5c:	2b20      	cmp	r3, #32
 8020d5e:	bfc1      	itttt	gt
 8020d60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020d64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020d68:	fa0b f303 	lslgt.w	r3, fp, r3
 8020d6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020d70:	bfda      	itte	le
 8020d72:	f1c3 0320 	rsble	r3, r3, #32
 8020d76:	fa06 f003 	lslle.w	r0, r6, r3
 8020d7a:	4318      	orrgt	r0, r3
 8020d7c:	f7df fbe2 	bl	8000544 <__aeabi_ui2d>
 8020d80:	2301      	movs	r3, #1
 8020d82:	4606      	mov	r6, r0
 8020d84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020d88:	3d01      	subs	r5, #1
 8020d8a:	930e      	str	r3, [sp, #56]	; 0x38
 8020d8c:	e76c      	b.n	8020c68 <_dtoa_r+0xe8>
 8020d8e:	2301      	movs	r3, #1
 8020d90:	e7b4      	b.n	8020cfc <_dtoa_r+0x17c>
 8020d92:	900b      	str	r0, [sp, #44]	; 0x2c
 8020d94:	e7b3      	b.n	8020cfe <_dtoa_r+0x17e>
 8020d96:	9b04      	ldr	r3, [sp, #16]
 8020d98:	9a00      	ldr	r2, [sp, #0]
 8020d9a:	1a9b      	subs	r3, r3, r2
 8020d9c:	9304      	str	r3, [sp, #16]
 8020d9e:	4253      	negs	r3, r2
 8020da0:	9307      	str	r3, [sp, #28]
 8020da2:	2300      	movs	r3, #0
 8020da4:	930a      	str	r3, [sp, #40]	; 0x28
 8020da6:	e7c1      	b.n	8020d2c <_dtoa_r+0x1ac>
 8020da8:	2300      	movs	r3, #0
 8020daa:	9308      	str	r3, [sp, #32]
 8020dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	dc37      	bgt.n	8020e22 <_dtoa_r+0x2a2>
 8020db2:	2301      	movs	r3, #1
 8020db4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020db8:	461a      	mov	r2, r3
 8020dba:	9209      	str	r2, [sp, #36]	; 0x24
 8020dbc:	e00c      	b.n	8020dd8 <_dtoa_r+0x258>
 8020dbe:	2301      	movs	r3, #1
 8020dc0:	e7f3      	b.n	8020daa <_dtoa_r+0x22a>
 8020dc2:	2300      	movs	r3, #0
 8020dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020dc6:	9308      	str	r3, [sp, #32]
 8020dc8:	9b00      	ldr	r3, [sp, #0]
 8020dca:	4413      	add	r3, r2
 8020dcc:	9302      	str	r3, [sp, #8]
 8020dce:	3301      	adds	r3, #1
 8020dd0:	2b01      	cmp	r3, #1
 8020dd2:	9303      	str	r3, [sp, #12]
 8020dd4:	bfb8      	it	lt
 8020dd6:	2301      	movlt	r3, #1
 8020dd8:	2200      	movs	r2, #0
 8020dda:	6462      	str	r2, [r4, #68]	; 0x44
 8020ddc:	2204      	movs	r2, #4
 8020dde:	f102 0014 	add.w	r0, r2, #20
 8020de2:	4298      	cmp	r0, r3
 8020de4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8020de6:	d920      	bls.n	8020e2a <_dtoa_r+0x2aa>
 8020de8:	4620      	mov	r0, r4
 8020dea:	f000 fdcf 	bl	802198c <_Balloc>
 8020dee:	9001      	str	r0, [sp, #4]
 8020df0:	2800      	cmp	r0, #0
 8020df2:	d13d      	bne.n	8020e70 <_dtoa_r+0x2f0>
 8020df4:	4b1c      	ldr	r3, [pc, #112]	; (8020e68 <_dtoa_r+0x2e8>)
 8020df6:	4602      	mov	r2, r0
 8020df8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020dfc:	481b      	ldr	r0, [pc, #108]	; (8020e6c <_dtoa_r+0x2ec>)
 8020dfe:	f001 fa03 	bl	8022208 <__assert_func>
 8020e02:	2301      	movs	r3, #1
 8020e04:	e7de      	b.n	8020dc4 <_dtoa_r+0x244>
 8020e06:	2501      	movs	r5, #1
 8020e08:	2300      	movs	r3, #0
 8020e0a:	9306      	str	r3, [sp, #24]
 8020e0c:	9508      	str	r5, [sp, #32]
 8020e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8020e12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020e16:	2200      	movs	r2, #0
 8020e18:	2312      	movs	r3, #18
 8020e1a:	e7ce      	b.n	8020dba <_dtoa_r+0x23a>
 8020e1c:	2301      	movs	r3, #1
 8020e1e:	9308      	str	r3, [sp, #32]
 8020e20:	e7f5      	b.n	8020e0e <_dtoa_r+0x28e>
 8020e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e24:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020e28:	e7d6      	b.n	8020dd8 <_dtoa_r+0x258>
 8020e2a:	3101      	adds	r1, #1
 8020e2c:	6461      	str	r1, [r4, #68]	; 0x44
 8020e2e:	0052      	lsls	r2, r2, #1
 8020e30:	e7d5      	b.n	8020dde <_dtoa_r+0x25e>
 8020e32:	bf00      	nop
 8020e34:	f3af 8000 	nop.w
 8020e38:	636f4361 	.word	0x636f4361
 8020e3c:	3fd287a7 	.word	0x3fd287a7
 8020e40:	8b60c8b3 	.word	0x8b60c8b3
 8020e44:	3fc68a28 	.word	0x3fc68a28
 8020e48:	509f79fb 	.word	0x509f79fb
 8020e4c:	3fd34413 	.word	0x3fd34413
 8020e50:	7ff00000 	.word	0x7ff00000
 8020e54:	08025eb1 	.word	0x08025eb1
 8020e58:	08025eb5 	.word	0x08025eb5
 8020e5c:	08025d8f 	.word	0x08025d8f
 8020e60:	3ff80000 	.word	0x3ff80000
 8020e64:	08025fb0 	.word	0x08025fb0
 8020e68:	08025ebe 	.word	0x08025ebe
 8020e6c:	08025ecf 	.word	0x08025ecf
 8020e70:	9b01      	ldr	r3, [sp, #4]
 8020e72:	6423      	str	r3, [r4, #64]	; 0x40
 8020e74:	9b03      	ldr	r3, [sp, #12]
 8020e76:	2b0e      	cmp	r3, #14
 8020e78:	f200 809d 	bhi.w	8020fb6 <_dtoa_r+0x436>
 8020e7c:	2d00      	cmp	r5, #0
 8020e7e:	f000 809a 	beq.w	8020fb6 <_dtoa_r+0x436>
 8020e82:	9b00      	ldr	r3, [sp, #0]
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	dd32      	ble.n	8020eee <_dtoa_r+0x36e>
 8020e88:	4ab7      	ldr	r2, [pc, #732]	; (8021168 <_dtoa_r+0x5e8>)
 8020e8a:	f003 030f 	and.w	r3, r3, #15
 8020e8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020e92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020e96:	9b00      	ldr	r3, [sp, #0]
 8020e98:	05d8      	lsls	r0, r3, #23
 8020e9a:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020e9e:	d516      	bpl.n	8020ece <_dtoa_r+0x34e>
 8020ea0:	4bb2      	ldr	r3, [pc, #712]	; (802116c <_dtoa_r+0x5ec>)
 8020ea2:	ec51 0b19 	vmov	r0, r1, d9
 8020ea6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020eaa:	f7df fcef 	bl	800088c <__aeabi_ddiv>
 8020eae:	f007 070f 	and.w	r7, r7, #15
 8020eb2:	4682      	mov	sl, r0
 8020eb4:	468b      	mov	fp, r1
 8020eb6:	2503      	movs	r5, #3
 8020eb8:	4eac      	ldr	r6, [pc, #688]	; (802116c <_dtoa_r+0x5ec>)
 8020eba:	b957      	cbnz	r7, 8020ed2 <_dtoa_r+0x352>
 8020ebc:	4642      	mov	r2, r8
 8020ebe:	464b      	mov	r3, r9
 8020ec0:	4650      	mov	r0, sl
 8020ec2:	4659      	mov	r1, fp
 8020ec4:	f7df fce2 	bl	800088c <__aeabi_ddiv>
 8020ec8:	4682      	mov	sl, r0
 8020eca:	468b      	mov	fp, r1
 8020ecc:	e028      	b.n	8020f20 <_dtoa_r+0x3a0>
 8020ece:	2502      	movs	r5, #2
 8020ed0:	e7f2      	b.n	8020eb8 <_dtoa_r+0x338>
 8020ed2:	07f9      	lsls	r1, r7, #31
 8020ed4:	d508      	bpl.n	8020ee8 <_dtoa_r+0x368>
 8020ed6:	4640      	mov	r0, r8
 8020ed8:	4649      	mov	r1, r9
 8020eda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020ede:	f7df fbab 	bl	8000638 <__aeabi_dmul>
 8020ee2:	3501      	adds	r5, #1
 8020ee4:	4680      	mov	r8, r0
 8020ee6:	4689      	mov	r9, r1
 8020ee8:	107f      	asrs	r7, r7, #1
 8020eea:	3608      	adds	r6, #8
 8020eec:	e7e5      	b.n	8020eba <_dtoa_r+0x33a>
 8020eee:	f000 809b 	beq.w	8021028 <_dtoa_r+0x4a8>
 8020ef2:	9b00      	ldr	r3, [sp, #0]
 8020ef4:	4f9d      	ldr	r7, [pc, #628]	; (802116c <_dtoa_r+0x5ec>)
 8020ef6:	425e      	negs	r6, r3
 8020ef8:	4b9b      	ldr	r3, [pc, #620]	; (8021168 <_dtoa_r+0x5e8>)
 8020efa:	f006 020f 	and.w	r2, r6, #15
 8020efe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f06:	ec51 0b19 	vmov	r0, r1, d9
 8020f0a:	f7df fb95 	bl	8000638 <__aeabi_dmul>
 8020f0e:	1136      	asrs	r6, r6, #4
 8020f10:	4682      	mov	sl, r0
 8020f12:	468b      	mov	fp, r1
 8020f14:	2300      	movs	r3, #0
 8020f16:	2502      	movs	r5, #2
 8020f18:	2e00      	cmp	r6, #0
 8020f1a:	d17a      	bne.n	8021012 <_dtoa_r+0x492>
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d1d3      	bne.n	8020ec8 <_dtoa_r+0x348>
 8020f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	f000 8082 	beq.w	802102c <_dtoa_r+0x4ac>
 8020f28:	4b91      	ldr	r3, [pc, #580]	; (8021170 <_dtoa_r+0x5f0>)
 8020f2a:	2200      	movs	r2, #0
 8020f2c:	4650      	mov	r0, sl
 8020f2e:	4659      	mov	r1, fp
 8020f30:	f7df fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8020f34:	2800      	cmp	r0, #0
 8020f36:	d079      	beq.n	802102c <_dtoa_r+0x4ac>
 8020f38:	9b03      	ldr	r3, [sp, #12]
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d076      	beq.n	802102c <_dtoa_r+0x4ac>
 8020f3e:	9b02      	ldr	r3, [sp, #8]
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	dd36      	ble.n	8020fb2 <_dtoa_r+0x432>
 8020f44:	9b00      	ldr	r3, [sp, #0]
 8020f46:	4650      	mov	r0, sl
 8020f48:	4659      	mov	r1, fp
 8020f4a:	1e5f      	subs	r7, r3, #1
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	4b89      	ldr	r3, [pc, #548]	; (8021174 <_dtoa_r+0x5f4>)
 8020f50:	f7df fb72 	bl	8000638 <__aeabi_dmul>
 8020f54:	9e02      	ldr	r6, [sp, #8]
 8020f56:	4682      	mov	sl, r0
 8020f58:	468b      	mov	fp, r1
 8020f5a:	3501      	adds	r5, #1
 8020f5c:	4628      	mov	r0, r5
 8020f5e:	f7df fb01 	bl	8000564 <__aeabi_i2d>
 8020f62:	4652      	mov	r2, sl
 8020f64:	465b      	mov	r3, fp
 8020f66:	f7df fb67 	bl	8000638 <__aeabi_dmul>
 8020f6a:	4b83      	ldr	r3, [pc, #524]	; (8021178 <_dtoa_r+0x5f8>)
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	f7df f9ad 	bl	80002cc <__adddf3>
 8020f72:	46d0      	mov	r8, sl
 8020f74:	46d9      	mov	r9, fp
 8020f76:	4682      	mov	sl, r0
 8020f78:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020f7c:	2e00      	cmp	r6, #0
 8020f7e:	d158      	bne.n	8021032 <_dtoa_r+0x4b2>
 8020f80:	4b7e      	ldr	r3, [pc, #504]	; (802117c <_dtoa_r+0x5fc>)
 8020f82:	2200      	movs	r2, #0
 8020f84:	4640      	mov	r0, r8
 8020f86:	4649      	mov	r1, r9
 8020f88:	f7df f99e 	bl	80002c8 <__aeabi_dsub>
 8020f8c:	4652      	mov	r2, sl
 8020f8e:	465b      	mov	r3, fp
 8020f90:	4680      	mov	r8, r0
 8020f92:	4689      	mov	r9, r1
 8020f94:	f7df fde0 	bl	8000b58 <__aeabi_dcmpgt>
 8020f98:	2800      	cmp	r0, #0
 8020f9a:	f040 8296 	bne.w	80214ca <_dtoa_r+0x94a>
 8020f9e:	4652      	mov	r2, sl
 8020fa0:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8020fa4:	4640      	mov	r0, r8
 8020fa6:	4649      	mov	r1, r9
 8020fa8:	f7df fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8020fac:	2800      	cmp	r0, #0
 8020fae:	f040 828a 	bne.w	80214c6 <_dtoa_r+0x946>
 8020fb2:	ec5b ab19 	vmov	sl, fp, d9
 8020fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	f2c0 8149 	blt.w	8021250 <_dtoa_r+0x6d0>
 8020fbe:	9a00      	ldr	r2, [sp, #0]
 8020fc0:	2a0e      	cmp	r2, #14
 8020fc2:	f300 8145 	bgt.w	8021250 <_dtoa_r+0x6d0>
 8020fc6:	4b68      	ldr	r3, [pc, #416]	; (8021168 <_dtoa_r+0x5e8>)
 8020fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020fcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	f280 80d6 	bge.w	8021184 <_dtoa_r+0x604>
 8020fd8:	9b03      	ldr	r3, [sp, #12]
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	f300 80d2 	bgt.w	8021184 <_dtoa_r+0x604>
 8020fe0:	f040 8270 	bne.w	80214c4 <_dtoa_r+0x944>
 8020fe4:	4b65      	ldr	r3, [pc, #404]	; (802117c <_dtoa_r+0x5fc>)
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	4640      	mov	r0, r8
 8020fea:	4649      	mov	r1, r9
 8020fec:	f7df fb24 	bl	8000638 <__aeabi_dmul>
 8020ff0:	4652      	mov	r2, sl
 8020ff2:	465b      	mov	r3, fp
 8020ff4:	f7df fda6 	bl	8000b44 <__aeabi_dcmpge>
 8020ff8:	9e03      	ldr	r6, [sp, #12]
 8020ffa:	4637      	mov	r7, r6
 8020ffc:	2800      	cmp	r0, #0
 8020ffe:	f040 8246 	bne.w	802148e <_dtoa_r+0x90e>
 8021002:	9d01      	ldr	r5, [sp, #4]
 8021004:	2331      	movs	r3, #49	; 0x31
 8021006:	f805 3b01 	strb.w	r3, [r5], #1
 802100a:	9b00      	ldr	r3, [sp, #0]
 802100c:	3301      	adds	r3, #1
 802100e:	9300      	str	r3, [sp, #0]
 8021010:	e241      	b.n	8021496 <_dtoa_r+0x916>
 8021012:	07f2      	lsls	r2, r6, #31
 8021014:	d505      	bpl.n	8021022 <_dtoa_r+0x4a2>
 8021016:	e9d7 2300 	ldrd	r2, r3, [r7]
 802101a:	f7df fb0d 	bl	8000638 <__aeabi_dmul>
 802101e:	3501      	adds	r5, #1
 8021020:	2301      	movs	r3, #1
 8021022:	1076      	asrs	r6, r6, #1
 8021024:	3708      	adds	r7, #8
 8021026:	e777      	b.n	8020f18 <_dtoa_r+0x398>
 8021028:	2502      	movs	r5, #2
 802102a:	e779      	b.n	8020f20 <_dtoa_r+0x3a0>
 802102c:	9f00      	ldr	r7, [sp, #0]
 802102e:	9e03      	ldr	r6, [sp, #12]
 8021030:	e794      	b.n	8020f5c <_dtoa_r+0x3dc>
 8021032:	9901      	ldr	r1, [sp, #4]
 8021034:	4b4c      	ldr	r3, [pc, #304]	; (8021168 <_dtoa_r+0x5e8>)
 8021036:	4431      	add	r1, r6
 8021038:	910d      	str	r1, [sp, #52]	; 0x34
 802103a:	9908      	ldr	r1, [sp, #32]
 802103c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021044:	2900      	cmp	r1, #0
 8021046:	d043      	beq.n	80210d0 <_dtoa_r+0x550>
 8021048:	494d      	ldr	r1, [pc, #308]	; (8021180 <_dtoa_r+0x600>)
 802104a:	2000      	movs	r0, #0
 802104c:	f7df fc1e 	bl	800088c <__aeabi_ddiv>
 8021050:	4652      	mov	r2, sl
 8021052:	465b      	mov	r3, fp
 8021054:	f7df f938 	bl	80002c8 <__aeabi_dsub>
 8021058:	9d01      	ldr	r5, [sp, #4]
 802105a:	4682      	mov	sl, r0
 802105c:	468b      	mov	fp, r1
 802105e:	4649      	mov	r1, r9
 8021060:	4640      	mov	r0, r8
 8021062:	f7df fd99 	bl	8000b98 <__aeabi_d2iz>
 8021066:	4606      	mov	r6, r0
 8021068:	f7df fa7c 	bl	8000564 <__aeabi_i2d>
 802106c:	4602      	mov	r2, r0
 802106e:	460b      	mov	r3, r1
 8021070:	4640      	mov	r0, r8
 8021072:	4649      	mov	r1, r9
 8021074:	f7df f928 	bl	80002c8 <__aeabi_dsub>
 8021078:	3630      	adds	r6, #48	; 0x30
 802107a:	f805 6b01 	strb.w	r6, [r5], #1
 802107e:	4652      	mov	r2, sl
 8021080:	465b      	mov	r3, fp
 8021082:	4680      	mov	r8, r0
 8021084:	4689      	mov	r9, r1
 8021086:	f7df fd49 	bl	8000b1c <__aeabi_dcmplt>
 802108a:	2800      	cmp	r0, #0
 802108c:	d163      	bne.n	8021156 <_dtoa_r+0x5d6>
 802108e:	4642      	mov	r2, r8
 8021090:	464b      	mov	r3, r9
 8021092:	4937      	ldr	r1, [pc, #220]	; (8021170 <_dtoa_r+0x5f0>)
 8021094:	2000      	movs	r0, #0
 8021096:	f7df f917 	bl	80002c8 <__aeabi_dsub>
 802109a:	4652      	mov	r2, sl
 802109c:	465b      	mov	r3, fp
 802109e:	f7df fd3d 	bl	8000b1c <__aeabi_dcmplt>
 80210a2:	2800      	cmp	r0, #0
 80210a4:	f040 80b6 	bne.w	8021214 <_dtoa_r+0x694>
 80210a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210aa:	429d      	cmp	r5, r3
 80210ac:	d081      	beq.n	8020fb2 <_dtoa_r+0x432>
 80210ae:	4b31      	ldr	r3, [pc, #196]	; (8021174 <_dtoa_r+0x5f4>)
 80210b0:	2200      	movs	r2, #0
 80210b2:	4650      	mov	r0, sl
 80210b4:	4659      	mov	r1, fp
 80210b6:	f7df fabf 	bl	8000638 <__aeabi_dmul>
 80210ba:	4b2e      	ldr	r3, [pc, #184]	; (8021174 <_dtoa_r+0x5f4>)
 80210bc:	4682      	mov	sl, r0
 80210be:	468b      	mov	fp, r1
 80210c0:	4640      	mov	r0, r8
 80210c2:	4649      	mov	r1, r9
 80210c4:	2200      	movs	r2, #0
 80210c6:	f7df fab7 	bl	8000638 <__aeabi_dmul>
 80210ca:	4680      	mov	r8, r0
 80210cc:	4689      	mov	r9, r1
 80210ce:	e7c6      	b.n	802105e <_dtoa_r+0x4de>
 80210d0:	4650      	mov	r0, sl
 80210d2:	4659      	mov	r1, fp
 80210d4:	f7df fab0 	bl	8000638 <__aeabi_dmul>
 80210d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210da:	9d01      	ldr	r5, [sp, #4]
 80210dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80210de:	4682      	mov	sl, r0
 80210e0:	468b      	mov	fp, r1
 80210e2:	4649      	mov	r1, r9
 80210e4:	4640      	mov	r0, r8
 80210e6:	f7df fd57 	bl	8000b98 <__aeabi_d2iz>
 80210ea:	4606      	mov	r6, r0
 80210ec:	f7df fa3a 	bl	8000564 <__aeabi_i2d>
 80210f0:	3630      	adds	r6, #48	; 0x30
 80210f2:	4602      	mov	r2, r0
 80210f4:	460b      	mov	r3, r1
 80210f6:	4640      	mov	r0, r8
 80210f8:	4649      	mov	r1, r9
 80210fa:	f7df f8e5 	bl	80002c8 <__aeabi_dsub>
 80210fe:	f805 6b01 	strb.w	r6, [r5], #1
 8021102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021104:	429d      	cmp	r5, r3
 8021106:	4680      	mov	r8, r0
 8021108:	4689      	mov	r9, r1
 802110a:	f04f 0200 	mov.w	r2, #0
 802110e:	d124      	bne.n	802115a <_dtoa_r+0x5da>
 8021110:	4b1b      	ldr	r3, [pc, #108]	; (8021180 <_dtoa_r+0x600>)
 8021112:	4650      	mov	r0, sl
 8021114:	4659      	mov	r1, fp
 8021116:	f7df f8d9 	bl	80002cc <__adddf3>
 802111a:	4602      	mov	r2, r0
 802111c:	460b      	mov	r3, r1
 802111e:	4640      	mov	r0, r8
 8021120:	4649      	mov	r1, r9
 8021122:	f7df fd19 	bl	8000b58 <__aeabi_dcmpgt>
 8021126:	2800      	cmp	r0, #0
 8021128:	d174      	bne.n	8021214 <_dtoa_r+0x694>
 802112a:	4652      	mov	r2, sl
 802112c:	465b      	mov	r3, fp
 802112e:	4914      	ldr	r1, [pc, #80]	; (8021180 <_dtoa_r+0x600>)
 8021130:	2000      	movs	r0, #0
 8021132:	f7df f8c9 	bl	80002c8 <__aeabi_dsub>
 8021136:	4602      	mov	r2, r0
 8021138:	460b      	mov	r3, r1
 802113a:	4640      	mov	r0, r8
 802113c:	4649      	mov	r1, r9
 802113e:	f7df fced 	bl	8000b1c <__aeabi_dcmplt>
 8021142:	2800      	cmp	r0, #0
 8021144:	f43f af35 	beq.w	8020fb2 <_dtoa_r+0x432>
 8021148:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802114a:	1e6b      	subs	r3, r5, #1
 802114c:	930f      	str	r3, [sp, #60]	; 0x3c
 802114e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021152:	2b30      	cmp	r3, #48	; 0x30
 8021154:	d0f8      	beq.n	8021148 <_dtoa_r+0x5c8>
 8021156:	9700      	str	r7, [sp, #0]
 8021158:	e04a      	b.n	80211f0 <_dtoa_r+0x670>
 802115a:	4b06      	ldr	r3, [pc, #24]	; (8021174 <_dtoa_r+0x5f4>)
 802115c:	f7df fa6c 	bl	8000638 <__aeabi_dmul>
 8021160:	4680      	mov	r8, r0
 8021162:	4689      	mov	r9, r1
 8021164:	e7bd      	b.n	80210e2 <_dtoa_r+0x562>
 8021166:	bf00      	nop
 8021168:	08025fb0 	.word	0x08025fb0
 802116c:	08025f88 	.word	0x08025f88
 8021170:	3ff00000 	.word	0x3ff00000
 8021174:	40240000 	.word	0x40240000
 8021178:	401c0000 	.word	0x401c0000
 802117c:	40140000 	.word	0x40140000
 8021180:	3fe00000 	.word	0x3fe00000
 8021184:	9d01      	ldr	r5, [sp, #4]
 8021186:	4656      	mov	r6, sl
 8021188:	465f      	mov	r7, fp
 802118a:	4642      	mov	r2, r8
 802118c:	464b      	mov	r3, r9
 802118e:	4630      	mov	r0, r6
 8021190:	4639      	mov	r1, r7
 8021192:	f7df fb7b 	bl	800088c <__aeabi_ddiv>
 8021196:	f7df fcff 	bl	8000b98 <__aeabi_d2iz>
 802119a:	4682      	mov	sl, r0
 802119c:	f7df f9e2 	bl	8000564 <__aeabi_i2d>
 80211a0:	4642      	mov	r2, r8
 80211a2:	464b      	mov	r3, r9
 80211a4:	f7df fa48 	bl	8000638 <__aeabi_dmul>
 80211a8:	4602      	mov	r2, r0
 80211aa:	460b      	mov	r3, r1
 80211ac:	4630      	mov	r0, r6
 80211ae:	4639      	mov	r1, r7
 80211b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80211b4:	f7df f888 	bl	80002c8 <__aeabi_dsub>
 80211b8:	f805 6b01 	strb.w	r6, [r5], #1
 80211bc:	9e01      	ldr	r6, [sp, #4]
 80211be:	9f03      	ldr	r7, [sp, #12]
 80211c0:	1bae      	subs	r6, r5, r6
 80211c2:	42b7      	cmp	r7, r6
 80211c4:	4602      	mov	r2, r0
 80211c6:	460b      	mov	r3, r1
 80211c8:	d135      	bne.n	8021236 <_dtoa_r+0x6b6>
 80211ca:	f7df f87f 	bl	80002cc <__adddf3>
 80211ce:	4642      	mov	r2, r8
 80211d0:	464b      	mov	r3, r9
 80211d2:	4606      	mov	r6, r0
 80211d4:	460f      	mov	r7, r1
 80211d6:	f7df fcbf 	bl	8000b58 <__aeabi_dcmpgt>
 80211da:	b9d0      	cbnz	r0, 8021212 <_dtoa_r+0x692>
 80211dc:	4642      	mov	r2, r8
 80211de:	464b      	mov	r3, r9
 80211e0:	4630      	mov	r0, r6
 80211e2:	4639      	mov	r1, r7
 80211e4:	f7df fc90 	bl	8000b08 <__aeabi_dcmpeq>
 80211e8:	b110      	cbz	r0, 80211f0 <_dtoa_r+0x670>
 80211ea:	f01a 0f01 	tst.w	sl, #1
 80211ee:	d110      	bne.n	8021212 <_dtoa_r+0x692>
 80211f0:	4620      	mov	r0, r4
 80211f2:	ee18 1a10 	vmov	r1, s16
 80211f6:	f000 fbee 	bl	80219d6 <_Bfree>
 80211fa:	2300      	movs	r3, #0
 80211fc:	9800      	ldr	r0, [sp, #0]
 80211fe:	702b      	strb	r3, [r5, #0]
 8021200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021202:	3001      	adds	r0, #1
 8021204:	6018      	str	r0, [r3, #0]
 8021206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021208:	2b00      	cmp	r3, #0
 802120a:	f43f acf2 	beq.w	8020bf2 <_dtoa_r+0x72>
 802120e:	601d      	str	r5, [r3, #0]
 8021210:	e4ef      	b.n	8020bf2 <_dtoa_r+0x72>
 8021212:	9f00      	ldr	r7, [sp, #0]
 8021214:	462b      	mov	r3, r5
 8021216:	461d      	mov	r5, r3
 8021218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802121c:	2a39      	cmp	r2, #57	; 0x39
 802121e:	d106      	bne.n	802122e <_dtoa_r+0x6ae>
 8021220:	9a01      	ldr	r2, [sp, #4]
 8021222:	429a      	cmp	r2, r3
 8021224:	d1f7      	bne.n	8021216 <_dtoa_r+0x696>
 8021226:	9901      	ldr	r1, [sp, #4]
 8021228:	2230      	movs	r2, #48	; 0x30
 802122a:	3701      	adds	r7, #1
 802122c:	700a      	strb	r2, [r1, #0]
 802122e:	781a      	ldrb	r2, [r3, #0]
 8021230:	3201      	adds	r2, #1
 8021232:	701a      	strb	r2, [r3, #0]
 8021234:	e78f      	b.n	8021156 <_dtoa_r+0x5d6>
 8021236:	4ba6      	ldr	r3, [pc, #664]	; (80214d0 <_dtoa_r+0x950>)
 8021238:	2200      	movs	r2, #0
 802123a:	f7df f9fd 	bl	8000638 <__aeabi_dmul>
 802123e:	2200      	movs	r2, #0
 8021240:	2300      	movs	r3, #0
 8021242:	4606      	mov	r6, r0
 8021244:	460f      	mov	r7, r1
 8021246:	f7df fc5f 	bl	8000b08 <__aeabi_dcmpeq>
 802124a:	2800      	cmp	r0, #0
 802124c:	d09d      	beq.n	802118a <_dtoa_r+0x60a>
 802124e:	e7cf      	b.n	80211f0 <_dtoa_r+0x670>
 8021250:	9a08      	ldr	r2, [sp, #32]
 8021252:	2a00      	cmp	r2, #0
 8021254:	f000 80d7 	beq.w	8021406 <_dtoa_r+0x886>
 8021258:	9a06      	ldr	r2, [sp, #24]
 802125a:	2a01      	cmp	r2, #1
 802125c:	f300 80ba 	bgt.w	80213d4 <_dtoa_r+0x854>
 8021260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021262:	2a00      	cmp	r2, #0
 8021264:	f000 80b2 	beq.w	80213cc <_dtoa_r+0x84c>
 8021268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802126c:	9e07      	ldr	r6, [sp, #28]
 802126e:	9d04      	ldr	r5, [sp, #16]
 8021270:	9a04      	ldr	r2, [sp, #16]
 8021272:	441a      	add	r2, r3
 8021274:	9204      	str	r2, [sp, #16]
 8021276:	9a05      	ldr	r2, [sp, #20]
 8021278:	2101      	movs	r1, #1
 802127a:	441a      	add	r2, r3
 802127c:	4620      	mov	r0, r4
 802127e:	9205      	str	r2, [sp, #20]
 8021280:	f000 fc48 	bl	8021b14 <__i2b>
 8021284:	4607      	mov	r7, r0
 8021286:	2d00      	cmp	r5, #0
 8021288:	dd0c      	ble.n	80212a4 <_dtoa_r+0x724>
 802128a:	9b05      	ldr	r3, [sp, #20]
 802128c:	2b00      	cmp	r3, #0
 802128e:	dd09      	ble.n	80212a4 <_dtoa_r+0x724>
 8021290:	42ab      	cmp	r3, r5
 8021292:	9a04      	ldr	r2, [sp, #16]
 8021294:	bfa8      	it	ge
 8021296:	462b      	movge	r3, r5
 8021298:	1ad2      	subs	r2, r2, r3
 802129a:	9204      	str	r2, [sp, #16]
 802129c:	9a05      	ldr	r2, [sp, #20]
 802129e:	1aed      	subs	r5, r5, r3
 80212a0:	1ad3      	subs	r3, r2, r3
 80212a2:	9305      	str	r3, [sp, #20]
 80212a4:	9b07      	ldr	r3, [sp, #28]
 80212a6:	b31b      	cbz	r3, 80212f0 <_dtoa_r+0x770>
 80212a8:	9b08      	ldr	r3, [sp, #32]
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	f000 80af 	beq.w	802140e <_dtoa_r+0x88e>
 80212b0:	2e00      	cmp	r6, #0
 80212b2:	dd13      	ble.n	80212dc <_dtoa_r+0x75c>
 80212b4:	4639      	mov	r1, r7
 80212b6:	4632      	mov	r2, r6
 80212b8:	4620      	mov	r0, r4
 80212ba:	f000 fceb 	bl	8021c94 <__pow5mult>
 80212be:	ee18 2a10 	vmov	r2, s16
 80212c2:	4601      	mov	r1, r0
 80212c4:	4607      	mov	r7, r0
 80212c6:	4620      	mov	r0, r4
 80212c8:	f000 fc3a 	bl	8021b40 <__multiply>
 80212cc:	ee18 1a10 	vmov	r1, s16
 80212d0:	4680      	mov	r8, r0
 80212d2:	4620      	mov	r0, r4
 80212d4:	f000 fb7f 	bl	80219d6 <_Bfree>
 80212d8:	ee08 8a10 	vmov	s16, r8
 80212dc:	9b07      	ldr	r3, [sp, #28]
 80212de:	1b9a      	subs	r2, r3, r6
 80212e0:	d006      	beq.n	80212f0 <_dtoa_r+0x770>
 80212e2:	ee18 1a10 	vmov	r1, s16
 80212e6:	4620      	mov	r0, r4
 80212e8:	f000 fcd4 	bl	8021c94 <__pow5mult>
 80212ec:	ee08 0a10 	vmov	s16, r0
 80212f0:	2101      	movs	r1, #1
 80212f2:	4620      	mov	r0, r4
 80212f4:	f000 fc0e 	bl	8021b14 <__i2b>
 80212f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	4606      	mov	r6, r0
 80212fe:	f340 8088 	ble.w	8021412 <_dtoa_r+0x892>
 8021302:	461a      	mov	r2, r3
 8021304:	4601      	mov	r1, r0
 8021306:	4620      	mov	r0, r4
 8021308:	f000 fcc4 	bl	8021c94 <__pow5mult>
 802130c:	9b06      	ldr	r3, [sp, #24]
 802130e:	2b01      	cmp	r3, #1
 8021310:	4606      	mov	r6, r0
 8021312:	f340 8081 	ble.w	8021418 <_dtoa_r+0x898>
 8021316:	f04f 0800 	mov.w	r8, #0
 802131a:	6933      	ldr	r3, [r6, #16]
 802131c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021320:	6918      	ldr	r0, [r3, #16]
 8021322:	f000 fba7 	bl	8021a74 <__hi0bits>
 8021326:	f1c0 0020 	rsb	r0, r0, #32
 802132a:	9b05      	ldr	r3, [sp, #20]
 802132c:	4418      	add	r0, r3
 802132e:	f010 001f 	ands.w	r0, r0, #31
 8021332:	f000 8092 	beq.w	802145a <_dtoa_r+0x8da>
 8021336:	f1c0 0320 	rsb	r3, r0, #32
 802133a:	2b04      	cmp	r3, #4
 802133c:	f340 808a 	ble.w	8021454 <_dtoa_r+0x8d4>
 8021340:	f1c0 001c 	rsb	r0, r0, #28
 8021344:	9b04      	ldr	r3, [sp, #16]
 8021346:	4403      	add	r3, r0
 8021348:	9304      	str	r3, [sp, #16]
 802134a:	9b05      	ldr	r3, [sp, #20]
 802134c:	4403      	add	r3, r0
 802134e:	4405      	add	r5, r0
 8021350:	9305      	str	r3, [sp, #20]
 8021352:	9b04      	ldr	r3, [sp, #16]
 8021354:	2b00      	cmp	r3, #0
 8021356:	dd07      	ble.n	8021368 <_dtoa_r+0x7e8>
 8021358:	ee18 1a10 	vmov	r1, s16
 802135c:	461a      	mov	r2, r3
 802135e:	4620      	mov	r0, r4
 8021360:	f000 fcd8 	bl	8021d14 <__lshift>
 8021364:	ee08 0a10 	vmov	s16, r0
 8021368:	9b05      	ldr	r3, [sp, #20]
 802136a:	2b00      	cmp	r3, #0
 802136c:	dd05      	ble.n	802137a <_dtoa_r+0x7fa>
 802136e:	4631      	mov	r1, r6
 8021370:	461a      	mov	r2, r3
 8021372:	4620      	mov	r0, r4
 8021374:	f000 fcce 	bl	8021d14 <__lshift>
 8021378:	4606      	mov	r6, r0
 802137a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802137c:	2b00      	cmp	r3, #0
 802137e:	d06e      	beq.n	802145e <_dtoa_r+0x8de>
 8021380:	ee18 0a10 	vmov	r0, s16
 8021384:	4631      	mov	r1, r6
 8021386:	f000 fd35 	bl	8021df4 <__mcmp>
 802138a:	2800      	cmp	r0, #0
 802138c:	da67      	bge.n	802145e <_dtoa_r+0x8de>
 802138e:	9b00      	ldr	r3, [sp, #0]
 8021390:	3b01      	subs	r3, #1
 8021392:	ee18 1a10 	vmov	r1, s16
 8021396:	9300      	str	r3, [sp, #0]
 8021398:	220a      	movs	r2, #10
 802139a:	2300      	movs	r3, #0
 802139c:	4620      	mov	r0, r4
 802139e:	f000 fb23 	bl	80219e8 <__multadd>
 80213a2:	9b08      	ldr	r3, [sp, #32]
 80213a4:	ee08 0a10 	vmov	s16, r0
 80213a8:	2b00      	cmp	r3, #0
 80213aa:	f000 81b0 	beq.w	802170e <_dtoa_r+0xb8e>
 80213ae:	2300      	movs	r3, #0
 80213b0:	4639      	mov	r1, r7
 80213b2:	220a      	movs	r2, #10
 80213b4:	4620      	mov	r0, r4
 80213b6:	f000 fb17 	bl	80219e8 <__multadd>
 80213ba:	9b02      	ldr	r3, [sp, #8]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	4607      	mov	r7, r0
 80213c0:	f300 808e 	bgt.w	80214e0 <_dtoa_r+0x960>
 80213c4:	9b06      	ldr	r3, [sp, #24]
 80213c6:	2b02      	cmp	r3, #2
 80213c8:	dc51      	bgt.n	802146e <_dtoa_r+0x8ee>
 80213ca:	e089      	b.n	80214e0 <_dtoa_r+0x960>
 80213cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80213ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80213d2:	e74b      	b.n	802126c <_dtoa_r+0x6ec>
 80213d4:	9b03      	ldr	r3, [sp, #12]
 80213d6:	1e5e      	subs	r6, r3, #1
 80213d8:	9b07      	ldr	r3, [sp, #28]
 80213da:	42b3      	cmp	r3, r6
 80213dc:	bfbf      	itttt	lt
 80213de:	9b07      	ldrlt	r3, [sp, #28]
 80213e0:	9607      	strlt	r6, [sp, #28]
 80213e2:	1af2      	sublt	r2, r6, r3
 80213e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80213e6:	bfb6      	itet	lt
 80213e8:	189b      	addlt	r3, r3, r2
 80213ea:	1b9e      	subge	r6, r3, r6
 80213ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80213ee:	9b03      	ldr	r3, [sp, #12]
 80213f0:	bfb8      	it	lt
 80213f2:	2600      	movlt	r6, #0
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	bfb7      	itett	lt
 80213f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80213fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021400:	1a9d      	sublt	r5, r3, r2
 8021402:	2300      	movlt	r3, #0
 8021404:	e734      	b.n	8021270 <_dtoa_r+0x6f0>
 8021406:	9e07      	ldr	r6, [sp, #28]
 8021408:	9d04      	ldr	r5, [sp, #16]
 802140a:	9f08      	ldr	r7, [sp, #32]
 802140c:	e73b      	b.n	8021286 <_dtoa_r+0x706>
 802140e:	9a07      	ldr	r2, [sp, #28]
 8021410:	e767      	b.n	80212e2 <_dtoa_r+0x762>
 8021412:	9b06      	ldr	r3, [sp, #24]
 8021414:	2b01      	cmp	r3, #1
 8021416:	dc18      	bgt.n	802144a <_dtoa_r+0x8ca>
 8021418:	f1ba 0f00 	cmp.w	sl, #0
 802141c:	d115      	bne.n	802144a <_dtoa_r+0x8ca>
 802141e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021422:	b993      	cbnz	r3, 802144a <_dtoa_r+0x8ca>
 8021424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021428:	0d1b      	lsrs	r3, r3, #20
 802142a:	051b      	lsls	r3, r3, #20
 802142c:	b183      	cbz	r3, 8021450 <_dtoa_r+0x8d0>
 802142e:	9b04      	ldr	r3, [sp, #16]
 8021430:	3301      	adds	r3, #1
 8021432:	9304      	str	r3, [sp, #16]
 8021434:	9b05      	ldr	r3, [sp, #20]
 8021436:	3301      	adds	r3, #1
 8021438:	9305      	str	r3, [sp, #20]
 802143a:	f04f 0801 	mov.w	r8, #1
 802143e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021440:	2b00      	cmp	r3, #0
 8021442:	f47f af6a 	bne.w	802131a <_dtoa_r+0x79a>
 8021446:	2001      	movs	r0, #1
 8021448:	e76f      	b.n	802132a <_dtoa_r+0x7aa>
 802144a:	f04f 0800 	mov.w	r8, #0
 802144e:	e7f6      	b.n	802143e <_dtoa_r+0x8be>
 8021450:	4698      	mov	r8, r3
 8021452:	e7f4      	b.n	802143e <_dtoa_r+0x8be>
 8021454:	f43f af7d 	beq.w	8021352 <_dtoa_r+0x7d2>
 8021458:	4618      	mov	r0, r3
 802145a:	301c      	adds	r0, #28
 802145c:	e772      	b.n	8021344 <_dtoa_r+0x7c4>
 802145e:	9b03      	ldr	r3, [sp, #12]
 8021460:	2b00      	cmp	r3, #0
 8021462:	dc37      	bgt.n	80214d4 <_dtoa_r+0x954>
 8021464:	9b06      	ldr	r3, [sp, #24]
 8021466:	2b02      	cmp	r3, #2
 8021468:	dd34      	ble.n	80214d4 <_dtoa_r+0x954>
 802146a:	9b03      	ldr	r3, [sp, #12]
 802146c:	9302      	str	r3, [sp, #8]
 802146e:	9b02      	ldr	r3, [sp, #8]
 8021470:	b96b      	cbnz	r3, 802148e <_dtoa_r+0x90e>
 8021472:	4631      	mov	r1, r6
 8021474:	2205      	movs	r2, #5
 8021476:	4620      	mov	r0, r4
 8021478:	f000 fab6 	bl	80219e8 <__multadd>
 802147c:	4601      	mov	r1, r0
 802147e:	4606      	mov	r6, r0
 8021480:	ee18 0a10 	vmov	r0, s16
 8021484:	f000 fcb6 	bl	8021df4 <__mcmp>
 8021488:	2800      	cmp	r0, #0
 802148a:	f73f adba 	bgt.w	8021002 <_dtoa_r+0x482>
 802148e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021490:	9d01      	ldr	r5, [sp, #4]
 8021492:	43db      	mvns	r3, r3
 8021494:	9300      	str	r3, [sp, #0]
 8021496:	f04f 0800 	mov.w	r8, #0
 802149a:	4631      	mov	r1, r6
 802149c:	4620      	mov	r0, r4
 802149e:	f000 fa9a 	bl	80219d6 <_Bfree>
 80214a2:	2f00      	cmp	r7, #0
 80214a4:	f43f aea4 	beq.w	80211f0 <_dtoa_r+0x670>
 80214a8:	f1b8 0f00 	cmp.w	r8, #0
 80214ac:	d005      	beq.n	80214ba <_dtoa_r+0x93a>
 80214ae:	45b8      	cmp	r8, r7
 80214b0:	d003      	beq.n	80214ba <_dtoa_r+0x93a>
 80214b2:	4641      	mov	r1, r8
 80214b4:	4620      	mov	r0, r4
 80214b6:	f000 fa8e 	bl	80219d6 <_Bfree>
 80214ba:	4639      	mov	r1, r7
 80214bc:	4620      	mov	r0, r4
 80214be:	f000 fa8a 	bl	80219d6 <_Bfree>
 80214c2:	e695      	b.n	80211f0 <_dtoa_r+0x670>
 80214c4:	2600      	movs	r6, #0
 80214c6:	4637      	mov	r7, r6
 80214c8:	e7e1      	b.n	802148e <_dtoa_r+0x90e>
 80214ca:	9700      	str	r7, [sp, #0]
 80214cc:	4637      	mov	r7, r6
 80214ce:	e598      	b.n	8021002 <_dtoa_r+0x482>
 80214d0:	40240000 	.word	0x40240000
 80214d4:	9b08      	ldr	r3, [sp, #32]
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	f000 80c9 	beq.w	802166e <_dtoa_r+0xaee>
 80214dc:	9b03      	ldr	r3, [sp, #12]
 80214de:	9302      	str	r3, [sp, #8]
 80214e0:	2d00      	cmp	r5, #0
 80214e2:	dd05      	ble.n	80214f0 <_dtoa_r+0x970>
 80214e4:	4639      	mov	r1, r7
 80214e6:	462a      	mov	r2, r5
 80214e8:	4620      	mov	r0, r4
 80214ea:	f000 fc13 	bl	8021d14 <__lshift>
 80214ee:	4607      	mov	r7, r0
 80214f0:	f1b8 0f00 	cmp.w	r8, #0
 80214f4:	d05a      	beq.n	80215ac <_dtoa_r+0xa2c>
 80214f6:	6879      	ldr	r1, [r7, #4]
 80214f8:	4620      	mov	r0, r4
 80214fa:	f000 fa47 	bl	802198c <_Balloc>
 80214fe:	4605      	mov	r5, r0
 8021500:	b920      	cbnz	r0, 802150c <_dtoa_r+0x98c>
 8021502:	4b87      	ldr	r3, [pc, #540]	; (8021720 <_dtoa_r+0xba0>)
 8021504:	4602      	mov	r2, r0
 8021506:	f240 21ea 	movw	r1, #746	; 0x2ea
 802150a:	e477      	b.n	8020dfc <_dtoa_r+0x27c>
 802150c:	693a      	ldr	r2, [r7, #16]
 802150e:	3202      	adds	r2, #2
 8021510:	0092      	lsls	r2, r2, #2
 8021512:	f107 010c 	add.w	r1, r7, #12
 8021516:	300c      	adds	r0, #12
 8021518:	f7fd fee4 	bl	801f2e4 <memcpy>
 802151c:	2201      	movs	r2, #1
 802151e:	4629      	mov	r1, r5
 8021520:	4620      	mov	r0, r4
 8021522:	f000 fbf7 	bl	8021d14 <__lshift>
 8021526:	9b01      	ldr	r3, [sp, #4]
 8021528:	f103 0901 	add.w	r9, r3, #1
 802152c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021530:	4413      	add	r3, r2
 8021532:	9305      	str	r3, [sp, #20]
 8021534:	f00a 0301 	and.w	r3, sl, #1
 8021538:	46b8      	mov	r8, r7
 802153a:	9304      	str	r3, [sp, #16]
 802153c:	4607      	mov	r7, r0
 802153e:	4631      	mov	r1, r6
 8021540:	ee18 0a10 	vmov	r0, s16
 8021544:	f7ff fa8e 	bl	8020a64 <quorem>
 8021548:	4641      	mov	r1, r8
 802154a:	9002      	str	r0, [sp, #8]
 802154c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021550:	ee18 0a10 	vmov	r0, s16
 8021554:	f000 fc4e 	bl	8021df4 <__mcmp>
 8021558:	463a      	mov	r2, r7
 802155a:	9003      	str	r0, [sp, #12]
 802155c:	4631      	mov	r1, r6
 802155e:	4620      	mov	r0, r4
 8021560:	f000 fc64 	bl	8021e2c <__mdiff>
 8021564:	68c2      	ldr	r2, [r0, #12]
 8021566:	f109 3bff 	add.w	fp, r9, #4294967295
 802156a:	4605      	mov	r5, r0
 802156c:	bb02      	cbnz	r2, 80215b0 <_dtoa_r+0xa30>
 802156e:	4601      	mov	r1, r0
 8021570:	ee18 0a10 	vmov	r0, s16
 8021574:	f000 fc3e 	bl	8021df4 <__mcmp>
 8021578:	4602      	mov	r2, r0
 802157a:	4629      	mov	r1, r5
 802157c:	4620      	mov	r0, r4
 802157e:	9207      	str	r2, [sp, #28]
 8021580:	f000 fa29 	bl	80219d6 <_Bfree>
 8021584:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8021588:	ea43 0102 	orr.w	r1, r3, r2
 802158c:	9b04      	ldr	r3, [sp, #16]
 802158e:	430b      	orrs	r3, r1
 8021590:	464d      	mov	r5, r9
 8021592:	d10f      	bne.n	80215b4 <_dtoa_r+0xa34>
 8021594:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021598:	d02a      	beq.n	80215f0 <_dtoa_r+0xa70>
 802159a:	9b03      	ldr	r3, [sp, #12]
 802159c:	2b00      	cmp	r3, #0
 802159e:	dd02      	ble.n	80215a6 <_dtoa_r+0xa26>
 80215a0:	9b02      	ldr	r3, [sp, #8]
 80215a2:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80215a6:	f88b a000 	strb.w	sl, [fp]
 80215aa:	e776      	b.n	802149a <_dtoa_r+0x91a>
 80215ac:	4638      	mov	r0, r7
 80215ae:	e7ba      	b.n	8021526 <_dtoa_r+0x9a6>
 80215b0:	2201      	movs	r2, #1
 80215b2:	e7e2      	b.n	802157a <_dtoa_r+0x9fa>
 80215b4:	9b03      	ldr	r3, [sp, #12]
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	db04      	blt.n	80215c4 <_dtoa_r+0xa44>
 80215ba:	9906      	ldr	r1, [sp, #24]
 80215bc:	430b      	orrs	r3, r1
 80215be:	9904      	ldr	r1, [sp, #16]
 80215c0:	430b      	orrs	r3, r1
 80215c2:	d122      	bne.n	802160a <_dtoa_r+0xa8a>
 80215c4:	2a00      	cmp	r2, #0
 80215c6:	ddee      	ble.n	80215a6 <_dtoa_r+0xa26>
 80215c8:	ee18 1a10 	vmov	r1, s16
 80215cc:	2201      	movs	r2, #1
 80215ce:	4620      	mov	r0, r4
 80215d0:	f000 fba0 	bl	8021d14 <__lshift>
 80215d4:	4631      	mov	r1, r6
 80215d6:	ee08 0a10 	vmov	s16, r0
 80215da:	f000 fc0b 	bl	8021df4 <__mcmp>
 80215de:	2800      	cmp	r0, #0
 80215e0:	dc03      	bgt.n	80215ea <_dtoa_r+0xa6a>
 80215e2:	d1e0      	bne.n	80215a6 <_dtoa_r+0xa26>
 80215e4:	f01a 0f01 	tst.w	sl, #1
 80215e8:	d0dd      	beq.n	80215a6 <_dtoa_r+0xa26>
 80215ea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80215ee:	d1d7      	bne.n	80215a0 <_dtoa_r+0xa20>
 80215f0:	2339      	movs	r3, #57	; 0x39
 80215f2:	f88b 3000 	strb.w	r3, [fp]
 80215f6:	462b      	mov	r3, r5
 80215f8:	461d      	mov	r5, r3
 80215fa:	3b01      	subs	r3, #1
 80215fc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021600:	2a39      	cmp	r2, #57	; 0x39
 8021602:	d071      	beq.n	80216e8 <_dtoa_r+0xb68>
 8021604:	3201      	adds	r2, #1
 8021606:	701a      	strb	r2, [r3, #0]
 8021608:	e747      	b.n	802149a <_dtoa_r+0x91a>
 802160a:	2a00      	cmp	r2, #0
 802160c:	dd07      	ble.n	802161e <_dtoa_r+0xa9e>
 802160e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021612:	d0ed      	beq.n	80215f0 <_dtoa_r+0xa70>
 8021614:	f10a 0301 	add.w	r3, sl, #1
 8021618:	f88b 3000 	strb.w	r3, [fp]
 802161c:	e73d      	b.n	802149a <_dtoa_r+0x91a>
 802161e:	9b05      	ldr	r3, [sp, #20]
 8021620:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021624:	4599      	cmp	r9, r3
 8021626:	d047      	beq.n	80216b8 <_dtoa_r+0xb38>
 8021628:	ee18 1a10 	vmov	r1, s16
 802162c:	2300      	movs	r3, #0
 802162e:	220a      	movs	r2, #10
 8021630:	4620      	mov	r0, r4
 8021632:	f000 f9d9 	bl	80219e8 <__multadd>
 8021636:	45b8      	cmp	r8, r7
 8021638:	ee08 0a10 	vmov	s16, r0
 802163c:	f04f 0300 	mov.w	r3, #0
 8021640:	f04f 020a 	mov.w	r2, #10
 8021644:	4641      	mov	r1, r8
 8021646:	4620      	mov	r0, r4
 8021648:	d106      	bne.n	8021658 <_dtoa_r+0xad8>
 802164a:	f000 f9cd 	bl	80219e8 <__multadd>
 802164e:	4680      	mov	r8, r0
 8021650:	4607      	mov	r7, r0
 8021652:	f109 0901 	add.w	r9, r9, #1
 8021656:	e772      	b.n	802153e <_dtoa_r+0x9be>
 8021658:	f000 f9c6 	bl	80219e8 <__multadd>
 802165c:	4639      	mov	r1, r7
 802165e:	4680      	mov	r8, r0
 8021660:	2300      	movs	r3, #0
 8021662:	220a      	movs	r2, #10
 8021664:	4620      	mov	r0, r4
 8021666:	f000 f9bf 	bl	80219e8 <__multadd>
 802166a:	4607      	mov	r7, r0
 802166c:	e7f1      	b.n	8021652 <_dtoa_r+0xad2>
 802166e:	9b03      	ldr	r3, [sp, #12]
 8021670:	9302      	str	r3, [sp, #8]
 8021672:	9d01      	ldr	r5, [sp, #4]
 8021674:	ee18 0a10 	vmov	r0, s16
 8021678:	4631      	mov	r1, r6
 802167a:	f7ff f9f3 	bl	8020a64 <quorem>
 802167e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021682:	9b01      	ldr	r3, [sp, #4]
 8021684:	f805 ab01 	strb.w	sl, [r5], #1
 8021688:	1aea      	subs	r2, r5, r3
 802168a:	9b02      	ldr	r3, [sp, #8]
 802168c:	4293      	cmp	r3, r2
 802168e:	dd09      	ble.n	80216a4 <_dtoa_r+0xb24>
 8021690:	ee18 1a10 	vmov	r1, s16
 8021694:	2300      	movs	r3, #0
 8021696:	220a      	movs	r2, #10
 8021698:	4620      	mov	r0, r4
 802169a:	f000 f9a5 	bl	80219e8 <__multadd>
 802169e:	ee08 0a10 	vmov	s16, r0
 80216a2:	e7e7      	b.n	8021674 <_dtoa_r+0xaf4>
 80216a4:	9b02      	ldr	r3, [sp, #8]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	bfc8      	it	gt
 80216aa:	461d      	movgt	r5, r3
 80216ac:	9b01      	ldr	r3, [sp, #4]
 80216ae:	bfd8      	it	le
 80216b0:	2501      	movle	r5, #1
 80216b2:	441d      	add	r5, r3
 80216b4:	f04f 0800 	mov.w	r8, #0
 80216b8:	ee18 1a10 	vmov	r1, s16
 80216bc:	2201      	movs	r2, #1
 80216be:	4620      	mov	r0, r4
 80216c0:	f000 fb28 	bl	8021d14 <__lshift>
 80216c4:	4631      	mov	r1, r6
 80216c6:	ee08 0a10 	vmov	s16, r0
 80216ca:	f000 fb93 	bl	8021df4 <__mcmp>
 80216ce:	2800      	cmp	r0, #0
 80216d0:	dc91      	bgt.n	80215f6 <_dtoa_r+0xa76>
 80216d2:	d102      	bne.n	80216da <_dtoa_r+0xb5a>
 80216d4:	f01a 0f01 	tst.w	sl, #1
 80216d8:	d18d      	bne.n	80215f6 <_dtoa_r+0xa76>
 80216da:	462b      	mov	r3, r5
 80216dc:	461d      	mov	r5, r3
 80216de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80216e2:	2a30      	cmp	r2, #48	; 0x30
 80216e4:	d0fa      	beq.n	80216dc <_dtoa_r+0xb5c>
 80216e6:	e6d8      	b.n	802149a <_dtoa_r+0x91a>
 80216e8:	9a01      	ldr	r2, [sp, #4]
 80216ea:	429a      	cmp	r2, r3
 80216ec:	d184      	bne.n	80215f8 <_dtoa_r+0xa78>
 80216ee:	9b00      	ldr	r3, [sp, #0]
 80216f0:	3301      	adds	r3, #1
 80216f2:	9300      	str	r3, [sp, #0]
 80216f4:	2331      	movs	r3, #49	; 0x31
 80216f6:	7013      	strb	r3, [r2, #0]
 80216f8:	e6cf      	b.n	802149a <_dtoa_r+0x91a>
 80216fa:	4b0a      	ldr	r3, [pc, #40]	; (8021724 <_dtoa_r+0xba4>)
 80216fc:	f7ff ba97 	b.w	8020c2e <_dtoa_r+0xae>
 8021700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021702:	2b00      	cmp	r3, #0
 8021704:	f47f aa7b 	bne.w	8020bfe <_dtoa_r+0x7e>
 8021708:	4b07      	ldr	r3, [pc, #28]	; (8021728 <_dtoa_r+0xba8>)
 802170a:	f7ff ba90 	b.w	8020c2e <_dtoa_r+0xae>
 802170e:	9b02      	ldr	r3, [sp, #8]
 8021710:	2b00      	cmp	r3, #0
 8021712:	dcae      	bgt.n	8021672 <_dtoa_r+0xaf2>
 8021714:	9b06      	ldr	r3, [sp, #24]
 8021716:	2b02      	cmp	r3, #2
 8021718:	f73f aea9 	bgt.w	802146e <_dtoa_r+0x8ee>
 802171c:	e7a9      	b.n	8021672 <_dtoa_r+0xaf2>
 802171e:	bf00      	nop
 8021720:	08025ebe 	.word	0x08025ebe
 8021724:	08025d8e 	.word	0x08025d8e
 8021728:	08025eb5 	.word	0x08025eb5

0802172c <__libc_fini_array>:
 802172c:	b538      	push	{r3, r4, r5, lr}
 802172e:	4d07      	ldr	r5, [pc, #28]	; (802174c <__libc_fini_array+0x20>)
 8021730:	4c07      	ldr	r4, [pc, #28]	; (8021750 <__libc_fini_array+0x24>)
 8021732:	1b64      	subs	r4, r4, r5
 8021734:	10a4      	asrs	r4, r4, #2
 8021736:	b91c      	cbnz	r4, 8021740 <__libc_fini_array+0x14>
 8021738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802173c:	f003 ba98 	b.w	8024c70 <_fini>
 8021740:	3c01      	subs	r4, #1
 8021742:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021746:	4798      	blx	r3
 8021748:	e7f5      	b.n	8021736 <__libc_fini_array+0xa>
 802174a:	bf00      	nop
 802174c:	08026130 	.word	0x08026130
 8021750:	08026134 	.word	0x08026134

08021754 <_malloc_trim_r>:
 8021754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021758:	4606      	mov	r6, r0
 802175a:	2008      	movs	r0, #8
 802175c:	460c      	mov	r4, r1
 802175e:	f7ff f963 	bl	8020a28 <sysconf>
 8021762:	4f23      	ldr	r7, [pc, #140]	; (80217f0 <_malloc_trim_r+0x9c>)
 8021764:	4680      	mov	r8, r0
 8021766:	4630      	mov	r0, r6
 8021768:	f7fd fdd2 	bl	801f310 <__malloc_lock>
 802176c:	68bb      	ldr	r3, [r7, #8]
 802176e:	685d      	ldr	r5, [r3, #4]
 8021770:	f025 0503 	bic.w	r5, r5, #3
 8021774:	1b2c      	subs	r4, r5, r4
 8021776:	3c11      	subs	r4, #17
 8021778:	4444      	add	r4, r8
 802177a:	fbb4 f4f8 	udiv	r4, r4, r8
 802177e:	3c01      	subs	r4, #1
 8021780:	fb08 f404 	mul.w	r4, r8, r4
 8021784:	45a0      	cmp	r8, r4
 8021786:	dd05      	ble.n	8021794 <_malloc_trim_r+0x40>
 8021788:	4630      	mov	r0, r6
 802178a:	f7fd fdc7 	bl	801f31c <__malloc_unlock>
 802178e:	2000      	movs	r0, #0
 8021790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021794:	2100      	movs	r1, #0
 8021796:	4630      	mov	r0, r6
 8021798:	f7fd fdc6 	bl	801f328 <_sbrk_r>
 802179c:	68bb      	ldr	r3, [r7, #8]
 802179e:	442b      	add	r3, r5
 80217a0:	4298      	cmp	r0, r3
 80217a2:	d1f1      	bne.n	8021788 <_malloc_trim_r+0x34>
 80217a4:	4261      	negs	r1, r4
 80217a6:	4630      	mov	r0, r6
 80217a8:	f7fd fdbe 	bl	801f328 <_sbrk_r>
 80217ac:	3001      	adds	r0, #1
 80217ae:	d110      	bne.n	80217d2 <_malloc_trim_r+0x7e>
 80217b0:	2100      	movs	r1, #0
 80217b2:	4630      	mov	r0, r6
 80217b4:	f7fd fdb8 	bl	801f328 <_sbrk_r>
 80217b8:	68ba      	ldr	r2, [r7, #8]
 80217ba:	1a83      	subs	r3, r0, r2
 80217bc:	2b0f      	cmp	r3, #15
 80217be:	dde3      	ble.n	8021788 <_malloc_trim_r+0x34>
 80217c0:	490c      	ldr	r1, [pc, #48]	; (80217f4 <_malloc_trim_r+0xa0>)
 80217c2:	6809      	ldr	r1, [r1, #0]
 80217c4:	1a40      	subs	r0, r0, r1
 80217c6:	490c      	ldr	r1, [pc, #48]	; (80217f8 <_malloc_trim_r+0xa4>)
 80217c8:	f043 0301 	orr.w	r3, r3, #1
 80217cc:	6008      	str	r0, [r1, #0]
 80217ce:	6053      	str	r3, [r2, #4]
 80217d0:	e7da      	b.n	8021788 <_malloc_trim_r+0x34>
 80217d2:	68bb      	ldr	r3, [r7, #8]
 80217d4:	4a08      	ldr	r2, [pc, #32]	; (80217f8 <_malloc_trim_r+0xa4>)
 80217d6:	1b2d      	subs	r5, r5, r4
 80217d8:	f045 0501 	orr.w	r5, r5, #1
 80217dc:	605d      	str	r5, [r3, #4]
 80217de:	6813      	ldr	r3, [r2, #0]
 80217e0:	4630      	mov	r0, r6
 80217e2:	1b1b      	subs	r3, r3, r4
 80217e4:	6013      	str	r3, [r2, #0]
 80217e6:	f7fd fd99 	bl	801f31c <__malloc_unlock>
 80217ea:	2001      	movs	r0, #1
 80217ec:	e7d0      	b.n	8021790 <_malloc_trim_r+0x3c>
 80217ee:	bf00      	nop
 80217f0:	20000570 	.word	0x20000570
 80217f4:	20000978 	.word	0x20000978
 80217f8:	2000386c 	.word	0x2000386c

080217fc <_free_r>:
 80217fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217fe:	4605      	mov	r5, r0
 8021800:	460f      	mov	r7, r1
 8021802:	2900      	cmp	r1, #0
 8021804:	f000 80b1 	beq.w	802196a <_free_r+0x16e>
 8021808:	f7fd fd82 	bl	801f310 <__malloc_lock>
 802180c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8021810:	4856      	ldr	r0, [pc, #344]	; (802196c <_free_r+0x170>)
 8021812:	f022 0401 	bic.w	r4, r2, #1
 8021816:	f1a7 0308 	sub.w	r3, r7, #8
 802181a:	eb03 0c04 	add.w	ip, r3, r4
 802181e:	6881      	ldr	r1, [r0, #8]
 8021820:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021824:	4561      	cmp	r1, ip
 8021826:	f026 0603 	bic.w	r6, r6, #3
 802182a:	f002 0201 	and.w	r2, r2, #1
 802182e:	d11b      	bne.n	8021868 <_free_r+0x6c>
 8021830:	4434      	add	r4, r6
 8021832:	b93a      	cbnz	r2, 8021844 <_free_r+0x48>
 8021834:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8021838:	1a9b      	subs	r3, r3, r2
 802183a:	4414      	add	r4, r2
 802183c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8021840:	60ca      	str	r2, [r1, #12]
 8021842:	6091      	str	r1, [r2, #8]
 8021844:	f044 0201 	orr.w	r2, r4, #1
 8021848:	605a      	str	r2, [r3, #4]
 802184a:	6083      	str	r3, [r0, #8]
 802184c:	4b48      	ldr	r3, [pc, #288]	; (8021970 <_free_r+0x174>)
 802184e:	681b      	ldr	r3, [r3, #0]
 8021850:	42a3      	cmp	r3, r4
 8021852:	d804      	bhi.n	802185e <_free_r+0x62>
 8021854:	4b47      	ldr	r3, [pc, #284]	; (8021974 <_free_r+0x178>)
 8021856:	4628      	mov	r0, r5
 8021858:	6819      	ldr	r1, [r3, #0]
 802185a:	f7ff ff7b 	bl	8021754 <_malloc_trim_r>
 802185e:	4628      	mov	r0, r5
 8021860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021864:	f7fd bd5a 	b.w	801f31c <__malloc_unlock>
 8021868:	f8cc 6004 	str.w	r6, [ip, #4]
 802186c:	2a00      	cmp	r2, #0
 802186e:	d138      	bne.n	80218e2 <_free_r+0xe6>
 8021870:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8021874:	1a5b      	subs	r3, r3, r1
 8021876:	440c      	add	r4, r1
 8021878:	6899      	ldr	r1, [r3, #8]
 802187a:	f100 0708 	add.w	r7, r0, #8
 802187e:	42b9      	cmp	r1, r7
 8021880:	d031      	beq.n	80218e6 <_free_r+0xea>
 8021882:	68df      	ldr	r7, [r3, #12]
 8021884:	60cf      	str	r7, [r1, #12]
 8021886:	60b9      	str	r1, [r7, #8]
 8021888:	eb0c 0106 	add.w	r1, ip, r6
 802188c:	6849      	ldr	r1, [r1, #4]
 802188e:	07c9      	lsls	r1, r1, #31
 8021890:	d40b      	bmi.n	80218aa <_free_r+0xae>
 8021892:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8021896:	4434      	add	r4, r6
 8021898:	bb3a      	cbnz	r2, 80218ea <_free_r+0xee>
 802189a:	4e37      	ldr	r6, [pc, #220]	; (8021978 <_free_r+0x17c>)
 802189c:	42b1      	cmp	r1, r6
 802189e:	d124      	bne.n	80218ea <_free_r+0xee>
 80218a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80218a4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80218a8:	2201      	movs	r2, #1
 80218aa:	f044 0101 	orr.w	r1, r4, #1
 80218ae:	6059      	str	r1, [r3, #4]
 80218b0:	511c      	str	r4, [r3, r4]
 80218b2:	2a00      	cmp	r2, #0
 80218b4:	d1d3      	bne.n	802185e <_free_r+0x62>
 80218b6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80218ba:	d21b      	bcs.n	80218f4 <_free_r+0xf8>
 80218bc:	0961      	lsrs	r1, r4, #5
 80218be:	08e2      	lsrs	r2, r4, #3
 80218c0:	2401      	movs	r4, #1
 80218c2:	408c      	lsls	r4, r1
 80218c4:	6841      	ldr	r1, [r0, #4]
 80218c6:	3201      	adds	r2, #1
 80218c8:	430c      	orrs	r4, r1
 80218ca:	6044      	str	r4, [r0, #4]
 80218cc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80218d0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80218d4:	3908      	subs	r1, #8
 80218d6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80218da:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80218de:	60e3      	str	r3, [r4, #12]
 80218e0:	e7bd      	b.n	802185e <_free_r+0x62>
 80218e2:	2200      	movs	r2, #0
 80218e4:	e7d0      	b.n	8021888 <_free_r+0x8c>
 80218e6:	2201      	movs	r2, #1
 80218e8:	e7ce      	b.n	8021888 <_free_r+0x8c>
 80218ea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80218ee:	60ce      	str	r6, [r1, #12]
 80218f0:	60b1      	str	r1, [r6, #8]
 80218f2:	e7da      	b.n	80218aa <_free_r+0xae>
 80218f4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80218f8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80218fc:	d214      	bcs.n	8021928 <_free_r+0x12c>
 80218fe:	09a2      	lsrs	r2, r4, #6
 8021900:	3238      	adds	r2, #56	; 0x38
 8021902:	1c51      	adds	r1, r2, #1
 8021904:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8021908:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 802190c:	428e      	cmp	r6, r1
 802190e:	d125      	bne.n	802195c <_free_r+0x160>
 8021910:	2401      	movs	r4, #1
 8021912:	1092      	asrs	r2, r2, #2
 8021914:	fa04 f202 	lsl.w	r2, r4, r2
 8021918:	6844      	ldr	r4, [r0, #4]
 802191a:	4322      	orrs	r2, r4
 802191c:	6042      	str	r2, [r0, #4]
 802191e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8021922:	60b3      	str	r3, [r6, #8]
 8021924:	60cb      	str	r3, [r1, #12]
 8021926:	e79a      	b.n	802185e <_free_r+0x62>
 8021928:	2a14      	cmp	r2, #20
 802192a:	d801      	bhi.n	8021930 <_free_r+0x134>
 802192c:	325b      	adds	r2, #91	; 0x5b
 802192e:	e7e8      	b.n	8021902 <_free_r+0x106>
 8021930:	2a54      	cmp	r2, #84	; 0x54
 8021932:	d802      	bhi.n	802193a <_free_r+0x13e>
 8021934:	0b22      	lsrs	r2, r4, #12
 8021936:	326e      	adds	r2, #110	; 0x6e
 8021938:	e7e3      	b.n	8021902 <_free_r+0x106>
 802193a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 802193e:	d802      	bhi.n	8021946 <_free_r+0x14a>
 8021940:	0be2      	lsrs	r2, r4, #15
 8021942:	3277      	adds	r2, #119	; 0x77
 8021944:	e7dd      	b.n	8021902 <_free_r+0x106>
 8021946:	f240 5154 	movw	r1, #1364	; 0x554
 802194a:	428a      	cmp	r2, r1
 802194c:	bf9a      	itte	ls
 802194e:	0ca2      	lsrls	r2, r4, #18
 8021950:	327c      	addls	r2, #124	; 0x7c
 8021952:	227e      	movhi	r2, #126	; 0x7e
 8021954:	e7d5      	b.n	8021902 <_free_r+0x106>
 8021956:	6889      	ldr	r1, [r1, #8]
 8021958:	428e      	cmp	r6, r1
 802195a:	d004      	beq.n	8021966 <_free_r+0x16a>
 802195c:	684a      	ldr	r2, [r1, #4]
 802195e:	f022 0203 	bic.w	r2, r2, #3
 8021962:	42a2      	cmp	r2, r4
 8021964:	d8f7      	bhi.n	8021956 <_free_r+0x15a>
 8021966:	68ce      	ldr	r6, [r1, #12]
 8021968:	e7d9      	b.n	802191e <_free_r+0x122>
 802196a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802196c:	20000570 	.word	0x20000570
 8021970:	2000097c 	.word	0x2000097c
 8021974:	2000389c 	.word	0x2000389c
 8021978:	20000578 	.word	0x20000578

0802197c <_localeconv_r>:
 802197c:	4800      	ldr	r0, [pc, #0]	; (8021980 <_localeconv_r+0x4>)
 802197e:	4770      	bx	lr
 8021980:	20000a74 	.word	0x20000a74

08021984 <__retarget_lock_init_recursive>:
 8021984:	4770      	bx	lr

08021986 <__retarget_lock_close_recursive>:
 8021986:	4770      	bx	lr

08021988 <__retarget_lock_acquire_recursive>:
 8021988:	4770      	bx	lr

0802198a <__retarget_lock_release_recursive>:
 802198a:	4770      	bx	lr

0802198c <_Balloc>:
 802198c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802198e:	b570      	push	{r4, r5, r6, lr}
 8021990:	4605      	mov	r5, r0
 8021992:	460c      	mov	r4, r1
 8021994:	b17b      	cbz	r3, 80219b6 <_Balloc+0x2a>
 8021996:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8021998:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802199c:	b9a0      	cbnz	r0, 80219c8 <_Balloc+0x3c>
 802199e:	2101      	movs	r1, #1
 80219a0:	fa01 f604 	lsl.w	r6, r1, r4
 80219a4:	1d72      	adds	r2, r6, #5
 80219a6:	0092      	lsls	r2, r2, #2
 80219a8:	4628      	mov	r0, r5
 80219aa:	f000 fc4b 	bl	8022244 <_calloc_r>
 80219ae:	b148      	cbz	r0, 80219c4 <_Balloc+0x38>
 80219b0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80219b4:	e00b      	b.n	80219ce <_Balloc+0x42>
 80219b6:	2221      	movs	r2, #33	; 0x21
 80219b8:	2104      	movs	r1, #4
 80219ba:	f000 fc43 	bl	8022244 <_calloc_r>
 80219be:	64e8      	str	r0, [r5, #76]	; 0x4c
 80219c0:	2800      	cmp	r0, #0
 80219c2:	d1e8      	bne.n	8021996 <_Balloc+0xa>
 80219c4:	2000      	movs	r0, #0
 80219c6:	bd70      	pop	{r4, r5, r6, pc}
 80219c8:	6802      	ldr	r2, [r0, #0]
 80219ca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80219ce:	2300      	movs	r3, #0
 80219d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80219d4:	e7f7      	b.n	80219c6 <_Balloc+0x3a>

080219d6 <_Bfree>:
 80219d6:	b131      	cbz	r1, 80219e6 <_Bfree+0x10>
 80219d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80219da:	684a      	ldr	r2, [r1, #4]
 80219dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80219e0:	6008      	str	r0, [r1, #0]
 80219e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80219e6:	4770      	bx	lr

080219e8 <__multadd>:
 80219e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219ec:	690d      	ldr	r5, [r1, #16]
 80219ee:	4607      	mov	r7, r0
 80219f0:	460c      	mov	r4, r1
 80219f2:	461e      	mov	r6, r3
 80219f4:	f101 0c14 	add.w	ip, r1, #20
 80219f8:	2000      	movs	r0, #0
 80219fa:	f8dc 3000 	ldr.w	r3, [ip]
 80219fe:	b299      	uxth	r1, r3
 8021a00:	fb02 6101 	mla	r1, r2, r1, r6
 8021a04:	0c1e      	lsrs	r6, r3, #16
 8021a06:	0c0b      	lsrs	r3, r1, #16
 8021a08:	fb02 3306 	mla	r3, r2, r6, r3
 8021a0c:	b289      	uxth	r1, r1
 8021a0e:	3001      	adds	r0, #1
 8021a10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021a14:	4285      	cmp	r5, r0
 8021a16:	f84c 1b04 	str.w	r1, [ip], #4
 8021a1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021a1e:	dcec      	bgt.n	80219fa <__multadd+0x12>
 8021a20:	b30e      	cbz	r6, 8021a66 <__multadd+0x7e>
 8021a22:	68a3      	ldr	r3, [r4, #8]
 8021a24:	42ab      	cmp	r3, r5
 8021a26:	dc19      	bgt.n	8021a5c <__multadd+0x74>
 8021a28:	6861      	ldr	r1, [r4, #4]
 8021a2a:	4638      	mov	r0, r7
 8021a2c:	3101      	adds	r1, #1
 8021a2e:	f7ff ffad 	bl	802198c <_Balloc>
 8021a32:	4680      	mov	r8, r0
 8021a34:	b928      	cbnz	r0, 8021a42 <__multadd+0x5a>
 8021a36:	4602      	mov	r2, r0
 8021a38:	4b0c      	ldr	r3, [pc, #48]	; (8021a6c <__multadd+0x84>)
 8021a3a:	480d      	ldr	r0, [pc, #52]	; (8021a70 <__multadd+0x88>)
 8021a3c:	21b5      	movs	r1, #181	; 0xb5
 8021a3e:	f000 fbe3 	bl	8022208 <__assert_func>
 8021a42:	6922      	ldr	r2, [r4, #16]
 8021a44:	3202      	adds	r2, #2
 8021a46:	f104 010c 	add.w	r1, r4, #12
 8021a4a:	0092      	lsls	r2, r2, #2
 8021a4c:	300c      	adds	r0, #12
 8021a4e:	f7fd fc49 	bl	801f2e4 <memcpy>
 8021a52:	4621      	mov	r1, r4
 8021a54:	4638      	mov	r0, r7
 8021a56:	f7ff ffbe 	bl	80219d6 <_Bfree>
 8021a5a:	4644      	mov	r4, r8
 8021a5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021a60:	3501      	adds	r5, #1
 8021a62:	615e      	str	r6, [r3, #20]
 8021a64:	6125      	str	r5, [r4, #16]
 8021a66:	4620      	mov	r0, r4
 8021a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a6c:	08025ebe 	.word	0x08025ebe
 8021a70:	08025f2a 	.word	0x08025f2a

08021a74 <__hi0bits>:
 8021a74:	0c03      	lsrs	r3, r0, #16
 8021a76:	041b      	lsls	r3, r3, #16
 8021a78:	b9d3      	cbnz	r3, 8021ab0 <__hi0bits+0x3c>
 8021a7a:	0400      	lsls	r0, r0, #16
 8021a7c:	2310      	movs	r3, #16
 8021a7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021a82:	bf04      	itt	eq
 8021a84:	0200      	lsleq	r0, r0, #8
 8021a86:	3308      	addeq	r3, #8
 8021a88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021a8c:	bf04      	itt	eq
 8021a8e:	0100      	lsleq	r0, r0, #4
 8021a90:	3304      	addeq	r3, #4
 8021a92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021a96:	bf04      	itt	eq
 8021a98:	0080      	lsleq	r0, r0, #2
 8021a9a:	3302      	addeq	r3, #2
 8021a9c:	2800      	cmp	r0, #0
 8021a9e:	db05      	blt.n	8021aac <__hi0bits+0x38>
 8021aa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021aa4:	f103 0301 	add.w	r3, r3, #1
 8021aa8:	bf08      	it	eq
 8021aaa:	2320      	moveq	r3, #32
 8021aac:	4618      	mov	r0, r3
 8021aae:	4770      	bx	lr
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	e7e4      	b.n	8021a7e <__hi0bits+0xa>

08021ab4 <__lo0bits>:
 8021ab4:	6803      	ldr	r3, [r0, #0]
 8021ab6:	f013 0207 	ands.w	r2, r3, #7
 8021aba:	4601      	mov	r1, r0
 8021abc:	d00b      	beq.n	8021ad6 <__lo0bits+0x22>
 8021abe:	07da      	lsls	r2, r3, #31
 8021ac0:	d423      	bmi.n	8021b0a <__lo0bits+0x56>
 8021ac2:	0798      	lsls	r0, r3, #30
 8021ac4:	bf49      	itett	mi
 8021ac6:	085b      	lsrmi	r3, r3, #1
 8021ac8:	089b      	lsrpl	r3, r3, #2
 8021aca:	2001      	movmi	r0, #1
 8021acc:	600b      	strmi	r3, [r1, #0]
 8021ace:	bf5c      	itt	pl
 8021ad0:	600b      	strpl	r3, [r1, #0]
 8021ad2:	2002      	movpl	r0, #2
 8021ad4:	4770      	bx	lr
 8021ad6:	b298      	uxth	r0, r3
 8021ad8:	b9a8      	cbnz	r0, 8021b06 <__lo0bits+0x52>
 8021ada:	0c1b      	lsrs	r3, r3, #16
 8021adc:	2010      	movs	r0, #16
 8021ade:	b2da      	uxtb	r2, r3
 8021ae0:	b90a      	cbnz	r2, 8021ae6 <__lo0bits+0x32>
 8021ae2:	3008      	adds	r0, #8
 8021ae4:	0a1b      	lsrs	r3, r3, #8
 8021ae6:	071a      	lsls	r2, r3, #28
 8021ae8:	bf04      	itt	eq
 8021aea:	091b      	lsreq	r3, r3, #4
 8021aec:	3004      	addeq	r0, #4
 8021aee:	079a      	lsls	r2, r3, #30
 8021af0:	bf04      	itt	eq
 8021af2:	089b      	lsreq	r3, r3, #2
 8021af4:	3002      	addeq	r0, #2
 8021af6:	07da      	lsls	r2, r3, #31
 8021af8:	d403      	bmi.n	8021b02 <__lo0bits+0x4e>
 8021afa:	085b      	lsrs	r3, r3, #1
 8021afc:	f100 0001 	add.w	r0, r0, #1
 8021b00:	d005      	beq.n	8021b0e <__lo0bits+0x5a>
 8021b02:	600b      	str	r3, [r1, #0]
 8021b04:	4770      	bx	lr
 8021b06:	4610      	mov	r0, r2
 8021b08:	e7e9      	b.n	8021ade <__lo0bits+0x2a>
 8021b0a:	2000      	movs	r0, #0
 8021b0c:	4770      	bx	lr
 8021b0e:	2020      	movs	r0, #32
 8021b10:	4770      	bx	lr
	...

08021b14 <__i2b>:
 8021b14:	b510      	push	{r4, lr}
 8021b16:	460c      	mov	r4, r1
 8021b18:	2101      	movs	r1, #1
 8021b1a:	f7ff ff37 	bl	802198c <_Balloc>
 8021b1e:	4602      	mov	r2, r0
 8021b20:	b928      	cbnz	r0, 8021b2e <__i2b+0x1a>
 8021b22:	4b05      	ldr	r3, [pc, #20]	; (8021b38 <__i2b+0x24>)
 8021b24:	4805      	ldr	r0, [pc, #20]	; (8021b3c <__i2b+0x28>)
 8021b26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021b2a:	f000 fb6d 	bl	8022208 <__assert_func>
 8021b2e:	2301      	movs	r3, #1
 8021b30:	6144      	str	r4, [r0, #20]
 8021b32:	6103      	str	r3, [r0, #16]
 8021b34:	bd10      	pop	{r4, pc}
 8021b36:	bf00      	nop
 8021b38:	08025ebe 	.word	0x08025ebe
 8021b3c:	08025f2a 	.word	0x08025f2a

08021b40 <__multiply>:
 8021b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b44:	4691      	mov	r9, r2
 8021b46:	690a      	ldr	r2, [r1, #16]
 8021b48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021b4c:	429a      	cmp	r2, r3
 8021b4e:	bfb8      	it	lt
 8021b50:	460b      	movlt	r3, r1
 8021b52:	460c      	mov	r4, r1
 8021b54:	bfbc      	itt	lt
 8021b56:	464c      	movlt	r4, r9
 8021b58:	4699      	movlt	r9, r3
 8021b5a:	6927      	ldr	r7, [r4, #16]
 8021b5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021b60:	68a3      	ldr	r3, [r4, #8]
 8021b62:	6861      	ldr	r1, [r4, #4]
 8021b64:	eb07 060a 	add.w	r6, r7, sl
 8021b68:	42b3      	cmp	r3, r6
 8021b6a:	b085      	sub	sp, #20
 8021b6c:	bfb8      	it	lt
 8021b6e:	3101      	addlt	r1, #1
 8021b70:	f7ff ff0c 	bl	802198c <_Balloc>
 8021b74:	b930      	cbnz	r0, 8021b84 <__multiply+0x44>
 8021b76:	4602      	mov	r2, r0
 8021b78:	4b44      	ldr	r3, [pc, #272]	; (8021c8c <__multiply+0x14c>)
 8021b7a:	4845      	ldr	r0, [pc, #276]	; (8021c90 <__multiply+0x150>)
 8021b7c:	f240 115d 	movw	r1, #349	; 0x15d
 8021b80:	f000 fb42 	bl	8022208 <__assert_func>
 8021b84:	f100 0514 	add.w	r5, r0, #20
 8021b88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021b8c:	462b      	mov	r3, r5
 8021b8e:	2200      	movs	r2, #0
 8021b90:	4543      	cmp	r3, r8
 8021b92:	d321      	bcc.n	8021bd8 <__multiply+0x98>
 8021b94:	f104 0314 	add.w	r3, r4, #20
 8021b98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021b9c:	f109 0314 	add.w	r3, r9, #20
 8021ba0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021ba4:	9202      	str	r2, [sp, #8]
 8021ba6:	1b3a      	subs	r2, r7, r4
 8021ba8:	3a15      	subs	r2, #21
 8021baa:	f022 0203 	bic.w	r2, r2, #3
 8021bae:	3204      	adds	r2, #4
 8021bb0:	f104 0115 	add.w	r1, r4, #21
 8021bb4:	428f      	cmp	r7, r1
 8021bb6:	bf38      	it	cc
 8021bb8:	2204      	movcc	r2, #4
 8021bba:	9201      	str	r2, [sp, #4]
 8021bbc:	9a02      	ldr	r2, [sp, #8]
 8021bbe:	9303      	str	r3, [sp, #12]
 8021bc0:	429a      	cmp	r2, r3
 8021bc2:	d80c      	bhi.n	8021bde <__multiply+0x9e>
 8021bc4:	2e00      	cmp	r6, #0
 8021bc6:	dd03      	ble.n	8021bd0 <__multiply+0x90>
 8021bc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d05a      	beq.n	8021c86 <__multiply+0x146>
 8021bd0:	6106      	str	r6, [r0, #16]
 8021bd2:	b005      	add	sp, #20
 8021bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bd8:	f843 2b04 	str.w	r2, [r3], #4
 8021bdc:	e7d8      	b.n	8021b90 <__multiply+0x50>
 8021bde:	f8b3 a000 	ldrh.w	sl, [r3]
 8021be2:	f1ba 0f00 	cmp.w	sl, #0
 8021be6:	d024      	beq.n	8021c32 <__multiply+0xf2>
 8021be8:	f104 0e14 	add.w	lr, r4, #20
 8021bec:	46a9      	mov	r9, r5
 8021bee:	f04f 0c00 	mov.w	ip, #0
 8021bf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021bf6:	f8d9 1000 	ldr.w	r1, [r9]
 8021bfa:	fa1f fb82 	uxth.w	fp, r2
 8021bfe:	b289      	uxth	r1, r1
 8021c00:	fb0a 110b 	mla	r1, sl, fp, r1
 8021c04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021c08:	f8d9 2000 	ldr.w	r2, [r9]
 8021c0c:	4461      	add	r1, ip
 8021c0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021c12:	fb0a c20b 	mla	r2, sl, fp, ip
 8021c16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021c1a:	b289      	uxth	r1, r1
 8021c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021c20:	4577      	cmp	r7, lr
 8021c22:	f849 1b04 	str.w	r1, [r9], #4
 8021c26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021c2a:	d8e2      	bhi.n	8021bf2 <__multiply+0xb2>
 8021c2c:	9a01      	ldr	r2, [sp, #4]
 8021c2e:	f845 c002 	str.w	ip, [r5, r2]
 8021c32:	9a03      	ldr	r2, [sp, #12]
 8021c34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021c38:	3304      	adds	r3, #4
 8021c3a:	f1b9 0f00 	cmp.w	r9, #0
 8021c3e:	d020      	beq.n	8021c82 <__multiply+0x142>
 8021c40:	6829      	ldr	r1, [r5, #0]
 8021c42:	f104 0c14 	add.w	ip, r4, #20
 8021c46:	46ae      	mov	lr, r5
 8021c48:	f04f 0a00 	mov.w	sl, #0
 8021c4c:	f8bc b000 	ldrh.w	fp, [ip]
 8021c50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021c54:	fb09 220b 	mla	r2, r9, fp, r2
 8021c58:	4492      	add	sl, r2
 8021c5a:	b289      	uxth	r1, r1
 8021c5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021c60:	f84e 1b04 	str.w	r1, [lr], #4
 8021c64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021c68:	f8be 1000 	ldrh.w	r1, [lr]
 8021c6c:	0c12      	lsrs	r2, r2, #16
 8021c6e:	fb09 1102 	mla	r1, r9, r2, r1
 8021c72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021c76:	4567      	cmp	r7, ip
 8021c78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021c7c:	d8e6      	bhi.n	8021c4c <__multiply+0x10c>
 8021c7e:	9a01      	ldr	r2, [sp, #4]
 8021c80:	50a9      	str	r1, [r5, r2]
 8021c82:	3504      	adds	r5, #4
 8021c84:	e79a      	b.n	8021bbc <__multiply+0x7c>
 8021c86:	3e01      	subs	r6, #1
 8021c88:	e79c      	b.n	8021bc4 <__multiply+0x84>
 8021c8a:	bf00      	nop
 8021c8c:	08025ebe 	.word	0x08025ebe
 8021c90:	08025f2a 	.word	0x08025f2a

08021c94 <__pow5mult>:
 8021c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c98:	4615      	mov	r5, r2
 8021c9a:	f012 0203 	ands.w	r2, r2, #3
 8021c9e:	4606      	mov	r6, r0
 8021ca0:	460f      	mov	r7, r1
 8021ca2:	d007      	beq.n	8021cb4 <__pow5mult+0x20>
 8021ca4:	4c1a      	ldr	r4, [pc, #104]	; (8021d10 <__pow5mult+0x7c>)
 8021ca6:	3a01      	subs	r2, #1
 8021ca8:	2300      	movs	r3, #0
 8021caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021cae:	f7ff fe9b 	bl	80219e8 <__multadd>
 8021cb2:	4607      	mov	r7, r0
 8021cb4:	10ad      	asrs	r5, r5, #2
 8021cb6:	d027      	beq.n	8021d08 <__pow5mult+0x74>
 8021cb8:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8021cba:	b944      	cbnz	r4, 8021cce <__pow5mult+0x3a>
 8021cbc:	f240 2171 	movw	r1, #625	; 0x271
 8021cc0:	4630      	mov	r0, r6
 8021cc2:	f7ff ff27 	bl	8021b14 <__i2b>
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	64b0      	str	r0, [r6, #72]	; 0x48
 8021cca:	4604      	mov	r4, r0
 8021ccc:	6003      	str	r3, [r0, #0]
 8021cce:	f04f 0900 	mov.w	r9, #0
 8021cd2:	07eb      	lsls	r3, r5, #31
 8021cd4:	d50a      	bpl.n	8021cec <__pow5mult+0x58>
 8021cd6:	4639      	mov	r1, r7
 8021cd8:	4622      	mov	r2, r4
 8021cda:	4630      	mov	r0, r6
 8021cdc:	f7ff ff30 	bl	8021b40 <__multiply>
 8021ce0:	4639      	mov	r1, r7
 8021ce2:	4680      	mov	r8, r0
 8021ce4:	4630      	mov	r0, r6
 8021ce6:	f7ff fe76 	bl	80219d6 <_Bfree>
 8021cea:	4647      	mov	r7, r8
 8021cec:	106d      	asrs	r5, r5, #1
 8021cee:	d00b      	beq.n	8021d08 <__pow5mult+0x74>
 8021cf0:	6820      	ldr	r0, [r4, #0]
 8021cf2:	b938      	cbnz	r0, 8021d04 <__pow5mult+0x70>
 8021cf4:	4622      	mov	r2, r4
 8021cf6:	4621      	mov	r1, r4
 8021cf8:	4630      	mov	r0, r6
 8021cfa:	f7ff ff21 	bl	8021b40 <__multiply>
 8021cfe:	6020      	str	r0, [r4, #0]
 8021d00:	f8c0 9000 	str.w	r9, [r0]
 8021d04:	4604      	mov	r4, r0
 8021d06:	e7e4      	b.n	8021cd2 <__pow5mult+0x3e>
 8021d08:	4638      	mov	r0, r7
 8021d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d0e:	bf00      	nop
 8021d10:	08026078 	.word	0x08026078

08021d14 <__lshift>:
 8021d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d18:	460c      	mov	r4, r1
 8021d1a:	6849      	ldr	r1, [r1, #4]
 8021d1c:	6923      	ldr	r3, [r4, #16]
 8021d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021d22:	68a3      	ldr	r3, [r4, #8]
 8021d24:	4607      	mov	r7, r0
 8021d26:	4691      	mov	r9, r2
 8021d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021d2c:	f108 0601 	add.w	r6, r8, #1
 8021d30:	42b3      	cmp	r3, r6
 8021d32:	db0b      	blt.n	8021d4c <__lshift+0x38>
 8021d34:	4638      	mov	r0, r7
 8021d36:	f7ff fe29 	bl	802198c <_Balloc>
 8021d3a:	4605      	mov	r5, r0
 8021d3c:	b948      	cbnz	r0, 8021d52 <__lshift+0x3e>
 8021d3e:	4602      	mov	r2, r0
 8021d40:	4b2a      	ldr	r3, [pc, #168]	; (8021dec <__lshift+0xd8>)
 8021d42:	482b      	ldr	r0, [pc, #172]	; (8021df0 <__lshift+0xdc>)
 8021d44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021d48:	f000 fa5e 	bl	8022208 <__assert_func>
 8021d4c:	3101      	adds	r1, #1
 8021d4e:	005b      	lsls	r3, r3, #1
 8021d50:	e7ee      	b.n	8021d30 <__lshift+0x1c>
 8021d52:	2300      	movs	r3, #0
 8021d54:	f100 0114 	add.w	r1, r0, #20
 8021d58:	f100 0210 	add.w	r2, r0, #16
 8021d5c:	4618      	mov	r0, r3
 8021d5e:	4553      	cmp	r3, sl
 8021d60:	db37      	blt.n	8021dd2 <__lshift+0xbe>
 8021d62:	6920      	ldr	r0, [r4, #16]
 8021d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021d68:	f104 0314 	add.w	r3, r4, #20
 8021d6c:	f019 091f 	ands.w	r9, r9, #31
 8021d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021d74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021d78:	d02f      	beq.n	8021dda <__lshift+0xc6>
 8021d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8021d7e:	468a      	mov	sl, r1
 8021d80:	f04f 0c00 	mov.w	ip, #0
 8021d84:	681a      	ldr	r2, [r3, #0]
 8021d86:	fa02 f209 	lsl.w	r2, r2, r9
 8021d8a:	ea42 020c 	orr.w	r2, r2, ip
 8021d8e:	f84a 2b04 	str.w	r2, [sl], #4
 8021d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d96:	4298      	cmp	r0, r3
 8021d98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021d9c:	d8f2      	bhi.n	8021d84 <__lshift+0x70>
 8021d9e:	1b03      	subs	r3, r0, r4
 8021da0:	3b15      	subs	r3, #21
 8021da2:	f023 0303 	bic.w	r3, r3, #3
 8021da6:	3304      	adds	r3, #4
 8021da8:	f104 0215 	add.w	r2, r4, #21
 8021dac:	4290      	cmp	r0, r2
 8021dae:	bf38      	it	cc
 8021db0:	2304      	movcc	r3, #4
 8021db2:	f841 c003 	str.w	ip, [r1, r3]
 8021db6:	f1bc 0f00 	cmp.w	ip, #0
 8021dba:	d001      	beq.n	8021dc0 <__lshift+0xac>
 8021dbc:	f108 0602 	add.w	r6, r8, #2
 8021dc0:	3e01      	subs	r6, #1
 8021dc2:	4638      	mov	r0, r7
 8021dc4:	612e      	str	r6, [r5, #16]
 8021dc6:	4621      	mov	r1, r4
 8021dc8:	f7ff fe05 	bl	80219d6 <_Bfree>
 8021dcc:	4628      	mov	r0, r5
 8021dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8021dd6:	3301      	adds	r3, #1
 8021dd8:	e7c1      	b.n	8021d5e <__lshift+0x4a>
 8021dda:	3904      	subs	r1, #4
 8021ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8021de0:	f841 2f04 	str.w	r2, [r1, #4]!
 8021de4:	4298      	cmp	r0, r3
 8021de6:	d8f9      	bhi.n	8021ddc <__lshift+0xc8>
 8021de8:	e7ea      	b.n	8021dc0 <__lshift+0xac>
 8021dea:	bf00      	nop
 8021dec:	08025ebe 	.word	0x08025ebe
 8021df0:	08025f2a 	.word	0x08025f2a

08021df4 <__mcmp>:
 8021df4:	b530      	push	{r4, r5, lr}
 8021df6:	6902      	ldr	r2, [r0, #16]
 8021df8:	690c      	ldr	r4, [r1, #16]
 8021dfa:	1b12      	subs	r2, r2, r4
 8021dfc:	d10e      	bne.n	8021e1c <__mcmp+0x28>
 8021dfe:	f100 0314 	add.w	r3, r0, #20
 8021e02:	3114      	adds	r1, #20
 8021e04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021e08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021e0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021e10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021e14:	42a5      	cmp	r5, r4
 8021e16:	d003      	beq.n	8021e20 <__mcmp+0x2c>
 8021e18:	d305      	bcc.n	8021e26 <__mcmp+0x32>
 8021e1a:	2201      	movs	r2, #1
 8021e1c:	4610      	mov	r0, r2
 8021e1e:	bd30      	pop	{r4, r5, pc}
 8021e20:	4283      	cmp	r3, r0
 8021e22:	d3f3      	bcc.n	8021e0c <__mcmp+0x18>
 8021e24:	e7fa      	b.n	8021e1c <__mcmp+0x28>
 8021e26:	f04f 32ff 	mov.w	r2, #4294967295
 8021e2a:	e7f7      	b.n	8021e1c <__mcmp+0x28>

08021e2c <__mdiff>:
 8021e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e30:	460c      	mov	r4, r1
 8021e32:	4606      	mov	r6, r0
 8021e34:	4611      	mov	r1, r2
 8021e36:	4620      	mov	r0, r4
 8021e38:	4690      	mov	r8, r2
 8021e3a:	f7ff ffdb 	bl	8021df4 <__mcmp>
 8021e3e:	1e05      	subs	r5, r0, #0
 8021e40:	d110      	bne.n	8021e64 <__mdiff+0x38>
 8021e42:	4629      	mov	r1, r5
 8021e44:	4630      	mov	r0, r6
 8021e46:	f7ff fda1 	bl	802198c <_Balloc>
 8021e4a:	b930      	cbnz	r0, 8021e5a <__mdiff+0x2e>
 8021e4c:	4b3a      	ldr	r3, [pc, #232]	; (8021f38 <__mdiff+0x10c>)
 8021e4e:	4602      	mov	r2, r0
 8021e50:	f240 2132 	movw	r1, #562	; 0x232
 8021e54:	4839      	ldr	r0, [pc, #228]	; (8021f3c <__mdiff+0x110>)
 8021e56:	f000 f9d7 	bl	8022208 <__assert_func>
 8021e5a:	2301      	movs	r3, #1
 8021e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e64:	bfa4      	itt	ge
 8021e66:	4643      	movge	r3, r8
 8021e68:	46a0      	movge	r8, r4
 8021e6a:	4630      	mov	r0, r6
 8021e6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021e70:	bfa6      	itte	ge
 8021e72:	461c      	movge	r4, r3
 8021e74:	2500      	movge	r5, #0
 8021e76:	2501      	movlt	r5, #1
 8021e78:	f7ff fd88 	bl	802198c <_Balloc>
 8021e7c:	b920      	cbnz	r0, 8021e88 <__mdiff+0x5c>
 8021e7e:	4b2e      	ldr	r3, [pc, #184]	; (8021f38 <__mdiff+0x10c>)
 8021e80:	4602      	mov	r2, r0
 8021e82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021e86:	e7e5      	b.n	8021e54 <__mdiff+0x28>
 8021e88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021e8c:	6926      	ldr	r6, [r4, #16]
 8021e8e:	60c5      	str	r5, [r0, #12]
 8021e90:	f104 0914 	add.w	r9, r4, #20
 8021e94:	f108 0514 	add.w	r5, r8, #20
 8021e98:	f100 0e14 	add.w	lr, r0, #20
 8021e9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021ea0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021ea4:	f108 0210 	add.w	r2, r8, #16
 8021ea8:	46f2      	mov	sl, lr
 8021eaa:	2100      	movs	r1, #0
 8021eac:	f859 3b04 	ldr.w	r3, [r9], #4
 8021eb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021eb4:	fa1f f883 	uxth.w	r8, r3
 8021eb8:	fa11 f18b 	uxtah	r1, r1, fp
 8021ebc:	0c1b      	lsrs	r3, r3, #16
 8021ebe:	eba1 0808 	sub.w	r8, r1, r8
 8021ec2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021ec6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021eca:	fa1f f888 	uxth.w	r8, r8
 8021ece:	1419      	asrs	r1, r3, #16
 8021ed0:	454e      	cmp	r6, r9
 8021ed2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021ed6:	f84a 3b04 	str.w	r3, [sl], #4
 8021eda:	d8e7      	bhi.n	8021eac <__mdiff+0x80>
 8021edc:	1b33      	subs	r3, r6, r4
 8021ede:	3b15      	subs	r3, #21
 8021ee0:	f023 0303 	bic.w	r3, r3, #3
 8021ee4:	3304      	adds	r3, #4
 8021ee6:	3415      	adds	r4, #21
 8021ee8:	42a6      	cmp	r6, r4
 8021eea:	bf38      	it	cc
 8021eec:	2304      	movcc	r3, #4
 8021eee:	441d      	add	r5, r3
 8021ef0:	4473      	add	r3, lr
 8021ef2:	469e      	mov	lr, r3
 8021ef4:	462e      	mov	r6, r5
 8021ef6:	4566      	cmp	r6, ip
 8021ef8:	d30e      	bcc.n	8021f18 <__mdiff+0xec>
 8021efa:	f10c 0203 	add.w	r2, ip, #3
 8021efe:	1b52      	subs	r2, r2, r5
 8021f00:	f022 0203 	bic.w	r2, r2, #3
 8021f04:	3d03      	subs	r5, #3
 8021f06:	45ac      	cmp	ip, r5
 8021f08:	bf38      	it	cc
 8021f0a:	2200      	movcc	r2, #0
 8021f0c:	441a      	add	r2, r3
 8021f0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021f12:	b17b      	cbz	r3, 8021f34 <__mdiff+0x108>
 8021f14:	6107      	str	r7, [r0, #16]
 8021f16:	e7a3      	b.n	8021e60 <__mdiff+0x34>
 8021f18:	f856 8b04 	ldr.w	r8, [r6], #4
 8021f1c:	fa11 f288 	uxtah	r2, r1, r8
 8021f20:	1414      	asrs	r4, r2, #16
 8021f22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021f26:	b292      	uxth	r2, r2
 8021f28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021f2c:	f84e 2b04 	str.w	r2, [lr], #4
 8021f30:	1421      	asrs	r1, r4, #16
 8021f32:	e7e0      	b.n	8021ef6 <__mdiff+0xca>
 8021f34:	3f01      	subs	r7, #1
 8021f36:	e7ea      	b.n	8021f0e <__mdiff+0xe2>
 8021f38:	08025ebe 	.word	0x08025ebe
 8021f3c:	08025f2a 	.word	0x08025f2a

08021f40 <__d2b>:
 8021f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021f44:	4689      	mov	r9, r1
 8021f46:	2101      	movs	r1, #1
 8021f48:	ec57 6b10 	vmov	r6, r7, d0
 8021f4c:	4690      	mov	r8, r2
 8021f4e:	f7ff fd1d 	bl	802198c <_Balloc>
 8021f52:	4604      	mov	r4, r0
 8021f54:	b930      	cbnz	r0, 8021f64 <__d2b+0x24>
 8021f56:	4602      	mov	r2, r0
 8021f58:	4b25      	ldr	r3, [pc, #148]	; (8021ff0 <__d2b+0xb0>)
 8021f5a:	4826      	ldr	r0, [pc, #152]	; (8021ff4 <__d2b+0xb4>)
 8021f5c:	f240 310a 	movw	r1, #778	; 0x30a
 8021f60:	f000 f952 	bl	8022208 <__assert_func>
 8021f64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021f6c:	bb35      	cbnz	r5, 8021fbc <__d2b+0x7c>
 8021f6e:	2e00      	cmp	r6, #0
 8021f70:	9301      	str	r3, [sp, #4]
 8021f72:	d028      	beq.n	8021fc6 <__d2b+0x86>
 8021f74:	4668      	mov	r0, sp
 8021f76:	9600      	str	r6, [sp, #0]
 8021f78:	f7ff fd9c 	bl	8021ab4 <__lo0bits>
 8021f7c:	9900      	ldr	r1, [sp, #0]
 8021f7e:	b300      	cbz	r0, 8021fc2 <__d2b+0x82>
 8021f80:	9a01      	ldr	r2, [sp, #4]
 8021f82:	f1c0 0320 	rsb	r3, r0, #32
 8021f86:	fa02 f303 	lsl.w	r3, r2, r3
 8021f8a:	430b      	orrs	r3, r1
 8021f8c:	40c2      	lsrs	r2, r0
 8021f8e:	6163      	str	r3, [r4, #20]
 8021f90:	9201      	str	r2, [sp, #4]
 8021f92:	9b01      	ldr	r3, [sp, #4]
 8021f94:	61a3      	str	r3, [r4, #24]
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	bf14      	ite	ne
 8021f9a:	2202      	movne	r2, #2
 8021f9c:	2201      	moveq	r2, #1
 8021f9e:	6122      	str	r2, [r4, #16]
 8021fa0:	b1d5      	cbz	r5, 8021fd8 <__d2b+0x98>
 8021fa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021fa6:	4405      	add	r5, r0
 8021fa8:	f8c9 5000 	str.w	r5, [r9]
 8021fac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021fb0:	f8c8 0000 	str.w	r0, [r8]
 8021fb4:	4620      	mov	r0, r4
 8021fb6:	b003      	add	sp, #12
 8021fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021fc0:	e7d5      	b.n	8021f6e <__d2b+0x2e>
 8021fc2:	6161      	str	r1, [r4, #20]
 8021fc4:	e7e5      	b.n	8021f92 <__d2b+0x52>
 8021fc6:	a801      	add	r0, sp, #4
 8021fc8:	f7ff fd74 	bl	8021ab4 <__lo0bits>
 8021fcc:	9b01      	ldr	r3, [sp, #4]
 8021fce:	6163      	str	r3, [r4, #20]
 8021fd0:	2201      	movs	r2, #1
 8021fd2:	6122      	str	r2, [r4, #16]
 8021fd4:	3020      	adds	r0, #32
 8021fd6:	e7e3      	b.n	8021fa0 <__d2b+0x60>
 8021fd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021fdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021fe0:	f8c9 0000 	str.w	r0, [r9]
 8021fe4:	6918      	ldr	r0, [r3, #16]
 8021fe6:	f7ff fd45 	bl	8021a74 <__hi0bits>
 8021fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021fee:	e7df      	b.n	8021fb0 <__d2b+0x70>
 8021ff0:	08025ebe 	.word	0x08025ebe
 8021ff4:	08025f2a 	.word	0x08025f2a

08021ff8 <frexp>:
 8021ff8:	b570      	push	{r4, r5, r6, lr}
 8021ffa:	2100      	movs	r1, #0
 8021ffc:	ec55 4b10 	vmov	r4, r5, d0
 8022000:	6001      	str	r1, [r0, #0]
 8022002:	4916      	ldr	r1, [pc, #88]	; (802205c <frexp+0x64>)
 8022004:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8022008:	428a      	cmp	r2, r1
 802200a:	4606      	mov	r6, r0
 802200c:	462b      	mov	r3, r5
 802200e:	dc22      	bgt.n	8022056 <frexp+0x5e>
 8022010:	ee10 1a10 	vmov	r1, s0
 8022014:	4311      	orrs	r1, r2
 8022016:	d01e      	beq.n	8022056 <frexp+0x5e>
 8022018:	4911      	ldr	r1, [pc, #68]	; (8022060 <frexp+0x68>)
 802201a:	4029      	ands	r1, r5
 802201c:	b969      	cbnz	r1, 802203a <frexp+0x42>
 802201e:	4b11      	ldr	r3, [pc, #68]	; (8022064 <frexp+0x6c>)
 8022020:	2200      	movs	r2, #0
 8022022:	ee10 0a10 	vmov	r0, s0
 8022026:	4629      	mov	r1, r5
 8022028:	f7de fb06 	bl	8000638 <__aeabi_dmul>
 802202c:	460b      	mov	r3, r1
 802202e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8022032:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8022036:	4604      	mov	r4, r0
 8022038:	6031      	str	r1, [r6, #0]
 802203a:	6831      	ldr	r1, [r6, #0]
 802203c:	1512      	asrs	r2, r2, #20
 802203e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022042:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8022046:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802204a:	440a      	add	r2, r1
 802204c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8022050:	6032      	str	r2, [r6, #0]
 8022052:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8022056:	ec45 4b10 	vmov	d0, r4, r5
 802205a:	bd70      	pop	{r4, r5, r6, pc}
 802205c:	7fefffff 	.word	0x7fefffff
 8022060:	7ff00000 	.word	0x7ff00000
 8022064:	43500000 	.word	0x43500000

08022068 <strncpy>:
 8022068:	b510      	push	{r4, lr}
 802206a:	3901      	subs	r1, #1
 802206c:	4603      	mov	r3, r0
 802206e:	b132      	cbz	r2, 802207e <strncpy+0x16>
 8022070:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022074:	f803 4b01 	strb.w	r4, [r3], #1
 8022078:	3a01      	subs	r2, #1
 802207a:	2c00      	cmp	r4, #0
 802207c:	d1f7      	bne.n	802206e <strncpy+0x6>
 802207e:	441a      	add	r2, r3
 8022080:	2100      	movs	r1, #0
 8022082:	4293      	cmp	r3, r2
 8022084:	d100      	bne.n	8022088 <strncpy+0x20>
 8022086:	bd10      	pop	{r4, pc}
 8022088:	f803 1b01 	strb.w	r1, [r3], #1
 802208c:	e7f9      	b.n	8022082 <strncpy+0x1a>

0802208e <__ssprint_r>:
 802208e:	6893      	ldr	r3, [r2, #8]
 8022090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022094:	4680      	mov	r8, r0
 8022096:	460c      	mov	r4, r1
 8022098:	4617      	mov	r7, r2
 802209a:	2b00      	cmp	r3, #0
 802209c:	d061      	beq.n	8022162 <__ssprint_r+0xd4>
 802209e:	2300      	movs	r3, #0
 80220a0:	f8d2 a000 	ldr.w	sl, [r2]
 80220a4:	9301      	str	r3, [sp, #4]
 80220a6:	469b      	mov	fp, r3
 80220a8:	f1bb 0f00 	cmp.w	fp, #0
 80220ac:	d02b      	beq.n	8022106 <__ssprint_r+0x78>
 80220ae:	68a6      	ldr	r6, [r4, #8]
 80220b0:	455e      	cmp	r6, fp
 80220b2:	d844      	bhi.n	802213e <__ssprint_r+0xb0>
 80220b4:	89a2      	ldrh	r2, [r4, #12]
 80220b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80220ba:	d03e      	beq.n	802213a <__ssprint_r+0xac>
 80220bc:	6820      	ldr	r0, [r4, #0]
 80220be:	6921      	ldr	r1, [r4, #16]
 80220c0:	6965      	ldr	r5, [r4, #20]
 80220c2:	eba0 0901 	sub.w	r9, r0, r1
 80220c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80220ce:	f109 0001 	add.w	r0, r9, #1
 80220d2:	106d      	asrs	r5, r5, #1
 80220d4:	4458      	add	r0, fp
 80220d6:	4285      	cmp	r5, r0
 80220d8:	bf38      	it	cc
 80220da:	4605      	movcc	r5, r0
 80220dc:	0553      	lsls	r3, r2, #21
 80220de:	d545      	bpl.n	802216c <__ssprint_r+0xde>
 80220e0:	4629      	mov	r1, r5
 80220e2:	4640      	mov	r0, r8
 80220e4:	f7fc feb2 	bl	801ee4c <_malloc_r>
 80220e8:	4606      	mov	r6, r0
 80220ea:	b9a0      	cbnz	r0, 8022116 <__ssprint_r+0x88>
 80220ec:	230c      	movs	r3, #12
 80220ee:	f8c8 3000 	str.w	r3, [r8]
 80220f2:	89a3      	ldrh	r3, [r4, #12]
 80220f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80220f8:	81a3      	strh	r3, [r4, #12]
 80220fa:	2300      	movs	r3, #0
 80220fc:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8022100:	f04f 30ff 	mov.w	r0, #4294967295
 8022104:	e02f      	b.n	8022166 <__ssprint_r+0xd8>
 8022106:	f8da 3000 	ldr.w	r3, [sl]
 802210a:	f8da b004 	ldr.w	fp, [sl, #4]
 802210e:	9301      	str	r3, [sp, #4]
 8022110:	f10a 0a08 	add.w	sl, sl, #8
 8022114:	e7c8      	b.n	80220a8 <__ssprint_r+0x1a>
 8022116:	464a      	mov	r2, r9
 8022118:	6921      	ldr	r1, [r4, #16]
 802211a:	f7fd f8e3 	bl	801f2e4 <memcpy>
 802211e:	89a2      	ldrh	r2, [r4, #12]
 8022120:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022128:	81a2      	strh	r2, [r4, #12]
 802212a:	6126      	str	r6, [r4, #16]
 802212c:	6165      	str	r5, [r4, #20]
 802212e:	444e      	add	r6, r9
 8022130:	eba5 0509 	sub.w	r5, r5, r9
 8022134:	6026      	str	r6, [r4, #0]
 8022136:	60a5      	str	r5, [r4, #8]
 8022138:	465e      	mov	r6, fp
 802213a:	455e      	cmp	r6, fp
 802213c:	d900      	bls.n	8022140 <__ssprint_r+0xb2>
 802213e:	465e      	mov	r6, fp
 8022140:	4632      	mov	r2, r6
 8022142:	9901      	ldr	r1, [sp, #4]
 8022144:	6820      	ldr	r0, [r4, #0]
 8022146:	f000 f8dd 	bl	8022304 <memmove>
 802214a:	68a2      	ldr	r2, [r4, #8]
 802214c:	1b92      	subs	r2, r2, r6
 802214e:	60a2      	str	r2, [r4, #8]
 8022150:	6822      	ldr	r2, [r4, #0]
 8022152:	4432      	add	r2, r6
 8022154:	6022      	str	r2, [r4, #0]
 8022156:	68ba      	ldr	r2, [r7, #8]
 8022158:	eba2 030b 	sub.w	r3, r2, fp
 802215c:	60bb      	str	r3, [r7, #8]
 802215e:	2b00      	cmp	r3, #0
 8022160:	d1d1      	bne.n	8022106 <__ssprint_r+0x78>
 8022162:	2000      	movs	r0, #0
 8022164:	6078      	str	r0, [r7, #4]
 8022166:	b003      	add	sp, #12
 8022168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802216c:	462a      	mov	r2, r5
 802216e:	4640      	mov	r0, r8
 8022170:	f000 f8e2 	bl	8022338 <_realloc_r>
 8022174:	4606      	mov	r6, r0
 8022176:	2800      	cmp	r0, #0
 8022178:	d1d7      	bne.n	802212a <__ssprint_r+0x9c>
 802217a:	6921      	ldr	r1, [r4, #16]
 802217c:	4640      	mov	r0, r8
 802217e:	f7ff fb3d 	bl	80217fc <_free_r>
 8022182:	e7b3      	b.n	80220ec <__ssprint_r+0x5e>

08022184 <__register_exitproc>:
 8022184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022188:	f8df a078 	ldr.w	sl, [pc, #120]	; 8022204 <__register_exitproc+0x80>
 802218c:	4606      	mov	r6, r0
 802218e:	f8da 0000 	ldr.w	r0, [sl]
 8022192:	4698      	mov	r8, r3
 8022194:	460f      	mov	r7, r1
 8022196:	4691      	mov	r9, r2
 8022198:	f7ff fbf6 	bl	8021988 <__retarget_lock_acquire_recursive>
 802219c:	4b18      	ldr	r3, [pc, #96]	; (8022200 <__register_exitproc+0x7c>)
 802219e:	681b      	ldr	r3, [r3, #0]
 80221a0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80221a4:	b91c      	cbnz	r4, 80221ae <__register_exitproc+0x2a>
 80221a6:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80221aa:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80221ae:	6865      	ldr	r5, [r4, #4]
 80221b0:	f8da 0000 	ldr.w	r0, [sl]
 80221b4:	2d1f      	cmp	r5, #31
 80221b6:	dd05      	ble.n	80221c4 <__register_exitproc+0x40>
 80221b8:	f7ff fbe7 	bl	802198a <__retarget_lock_release_recursive>
 80221bc:	f04f 30ff 	mov.w	r0, #4294967295
 80221c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221c4:	b19e      	cbz	r6, 80221ee <__register_exitproc+0x6a>
 80221c6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80221ca:	2201      	movs	r2, #1
 80221cc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80221d0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80221d4:	40aa      	lsls	r2, r5
 80221d6:	4313      	orrs	r3, r2
 80221d8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80221dc:	2e02      	cmp	r6, #2
 80221de:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80221e2:	bf02      	ittt	eq
 80221e4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80221e8:	4313      	orreq	r3, r2
 80221ea:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80221ee:	1c6b      	adds	r3, r5, #1
 80221f0:	3502      	adds	r5, #2
 80221f2:	6063      	str	r3, [r4, #4]
 80221f4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80221f8:	f7ff fbc7 	bl	802198a <__retarget_lock_release_recursive>
 80221fc:	2000      	movs	r0, #0
 80221fe:	e7df      	b.n	80221c0 <__register_exitproc+0x3c>
 8022200:	08025d58 	.word	0x08025d58
 8022204:	20000980 	.word	0x20000980

08022208 <__assert_func>:
 8022208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802220a:	4614      	mov	r4, r2
 802220c:	461a      	mov	r2, r3
 802220e:	4b09      	ldr	r3, [pc, #36]	; (8022234 <__assert_func+0x2c>)
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	4605      	mov	r5, r0
 8022214:	68d8      	ldr	r0, [r3, #12]
 8022216:	b14c      	cbz	r4, 802222c <__assert_func+0x24>
 8022218:	4b07      	ldr	r3, [pc, #28]	; (8022238 <__assert_func+0x30>)
 802221a:	9100      	str	r1, [sp, #0]
 802221c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022220:	4906      	ldr	r1, [pc, #24]	; (802223c <__assert_func+0x34>)
 8022222:	462b      	mov	r3, r5
 8022224:	f000 f844 	bl	80222b0 <fiprintf>
 8022228:	f000 ff98 	bl	802315c <abort>
 802222c:	4b04      	ldr	r3, [pc, #16]	; (8022240 <__assert_func+0x38>)
 802222e:	461c      	mov	r4, r3
 8022230:	e7f3      	b.n	802221a <__assert_func+0x12>
 8022232:	bf00      	nop
 8022234:	20000144 	.word	0x20000144
 8022238:	08026084 	.word	0x08026084
 802223c:	08026091 	.word	0x08026091
 8022240:	080260bf 	.word	0x080260bf

08022244 <_calloc_r>:
 8022244:	b538      	push	{r3, r4, r5, lr}
 8022246:	fba1 1502 	umull	r1, r5, r1, r2
 802224a:	b92d      	cbnz	r5, 8022258 <_calloc_r+0x14>
 802224c:	f7fc fdfe 	bl	801ee4c <_malloc_r>
 8022250:	4604      	mov	r4, r0
 8022252:	b938      	cbnz	r0, 8022264 <_calloc_r+0x20>
 8022254:	4620      	mov	r0, r4
 8022256:	bd38      	pop	{r3, r4, r5, pc}
 8022258:	f7fc fdbe 	bl	801edd8 <__errno>
 802225c:	230c      	movs	r3, #12
 802225e:	6003      	str	r3, [r0, #0]
 8022260:	2400      	movs	r4, #0
 8022262:	e7f7      	b.n	8022254 <_calloc_r+0x10>
 8022264:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022268:	f022 0203 	bic.w	r2, r2, #3
 802226c:	3a04      	subs	r2, #4
 802226e:	2a24      	cmp	r2, #36	; 0x24
 8022270:	d819      	bhi.n	80222a6 <_calloc_r+0x62>
 8022272:	2a13      	cmp	r2, #19
 8022274:	d915      	bls.n	80222a2 <_calloc_r+0x5e>
 8022276:	2a1b      	cmp	r2, #27
 8022278:	e9c0 5500 	strd	r5, r5, [r0]
 802227c:	d806      	bhi.n	802228c <_calloc_r+0x48>
 802227e:	f100 0308 	add.w	r3, r0, #8
 8022282:	2200      	movs	r2, #0
 8022284:	e9c3 2200 	strd	r2, r2, [r3]
 8022288:	609a      	str	r2, [r3, #8]
 802228a:	e7e3      	b.n	8022254 <_calloc_r+0x10>
 802228c:	2a24      	cmp	r2, #36	; 0x24
 802228e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8022292:	bf11      	iteee	ne
 8022294:	f100 0310 	addne.w	r3, r0, #16
 8022298:	6105      	streq	r5, [r0, #16]
 802229a:	f100 0318 	addeq.w	r3, r0, #24
 802229e:	6145      	streq	r5, [r0, #20]
 80222a0:	e7ef      	b.n	8022282 <_calloc_r+0x3e>
 80222a2:	4603      	mov	r3, r0
 80222a4:	e7ed      	b.n	8022282 <_calloc_r+0x3e>
 80222a6:	4629      	mov	r1, r5
 80222a8:	f7fd f82a 	bl	801f300 <memset>
 80222ac:	e7d2      	b.n	8022254 <_calloc_r+0x10>
	...

080222b0 <fiprintf>:
 80222b0:	b40e      	push	{r1, r2, r3}
 80222b2:	b503      	push	{r0, r1, lr}
 80222b4:	4601      	mov	r1, r0
 80222b6:	ab03      	add	r3, sp, #12
 80222b8:	4805      	ldr	r0, [pc, #20]	; (80222d0 <fiprintf+0x20>)
 80222ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80222be:	6800      	ldr	r0, [r0, #0]
 80222c0:	9301      	str	r3, [sp, #4]
 80222c2:	f000 fa0f 	bl	80226e4 <_vfiprintf_r>
 80222c6:	b002      	add	sp, #8
 80222c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80222cc:	b003      	add	sp, #12
 80222ce:	4770      	bx	lr
 80222d0:	20000144 	.word	0x20000144

080222d4 <__locale_mb_cur_max>:
 80222d4:	4b01      	ldr	r3, [pc, #4]	; (80222dc <__locale_mb_cur_max+0x8>)
 80222d6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80222da:	4770      	bx	lr
 80222dc:	20000984 	.word	0x20000984

080222e0 <__ascii_mbtowc>:
 80222e0:	b082      	sub	sp, #8
 80222e2:	b901      	cbnz	r1, 80222e6 <__ascii_mbtowc+0x6>
 80222e4:	a901      	add	r1, sp, #4
 80222e6:	b142      	cbz	r2, 80222fa <__ascii_mbtowc+0x1a>
 80222e8:	b14b      	cbz	r3, 80222fe <__ascii_mbtowc+0x1e>
 80222ea:	7813      	ldrb	r3, [r2, #0]
 80222ec:	600b      	str	r3, [r1, #0]
 80222ee:	7812      	ldrb	r2, [r2, #0]
 80222f0:	1e10      	subs	r0, r2, #0
 80222f2:	bf18      	it	ne
 80222f4:	2001      	movne	r0, #1
 80222f6:	b002      	add	sp, #8
 80222f8:	4770      	bx	lr
 80222fa:	4610      	mov	r0, r2
 80222fc:	e7fb      	b.n	80222f6 <__ascii_mbtowc+0x16>
 80222fe:	f06f 0001 	mvn.w	r0, #1
 8022302:	e7f8      	b.n	80222f6 <__ascii_mbtowc+0x16>

08022304 <memmove>:
 8022304:	4288      	cmp	r0, r1
 8022306:	b510      	push	{r4, lr}
 8022308:	eb01 0402 	add.w	r4, r1, r2
 802230c:	d902      	bls.n	8022314 <memmove+0x10>
 802230e:	4284      	cmp	r4, r0
 8022310:	4623      	mov	r3, r4
 8022312:	d807      	bhi.n	8022324 <memmove+0x20>
 8022314:	1e43      	subs	r3, r0, #1
 8022316:	42a1      	cmp	r1, r4
 8022318:	d008      	beq.n	802232c <memmove+0x28>
 802231a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802231e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022322:	e7f8      	b.n	8022316 <memmove+0x12>
 8022324:	4402      	add	r2, r0
 8022326:	4601      	mov	r1, r0
 8022328:	428a      	cmp	r2, r1
 802232a:	d100      	bne.n	802232e <memmove+0x2a>
 802232c:	bd10      	pop	{r4, pc}
 802232e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022336:	e7f7      	b.n	8022328 <memmove+0x24>

08022338 <_realloc_r>:
 8022338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802233c:	4681      	mov	r9, r0
 802233e:	460c      	mov	r4, r1
 8022340:	b929      	cbnz	r1, 802234e <_realloc_r+0x16>
 8022342:	4611      	mov	r1, r2
 8022344:	b003      	add	sp, #12
 8022346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802234a:	f7fc bd7f 	b.w	801ee4c <_malloc_r>
 802234e:	9201      	str	r2, [sp, #4]
 8022350:	f7fc ffde 	bl	801f310 <__malloc_lock>
 8022354:	9a01      	ldr	r2, [sp, #4]
 8022356:	f102 080b 	add.w	r8, r2, #11
 802235a:	f1b8 0f16 	cmp.w	r8, #22
 802235e:	d90b      	bls.n	8022378 <_realloc_r+0x40>
 8022360:	f038 0807 	bics.w	r8, r8, #7
 8022364:	d50a      	bpl.n	802237c <_realloc_r+0x44>
 8022366:	230c      	movs	r3, #12
 8022368:	f8c9 3000 	str.w	r3, [r9]
 802236c:	f04f 0b00 	mov.w	fp, #0
 8022370:	4658      	mov	r0, fp
 8022372:	b003      	add	sp, #12
 8022374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022378:	f04f 0810 	mov.w	r8, #16
 802237c:	4590      	cmp	r8, r2
 802237e:	d3f2      	bcc.n	8022366 <_realloc_r+0x2e>
 8022380:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022384:	f025 0603 	bic.w	r6, r5, #3
 8022388:	45b0      	cmp	r8, r6
 802238a:	f1a4 0a08 	sub.w	sl, r4, #8
 802238e:	f340 816e 	ble.w	802266e <_realloc_r+0x336>
 8022392:	499b      	ldr	r1, [pc, #620]	; (8022600 <_realloc_r+0x2c8>)
 8022394:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8022398:	eb0a 0306 	add.w	r3, sl, r6
 802239c:	459c      	cmp	ip, r3
 802239e:	6859      	ldr	r1, [r3, #4]
 80223a0:	d005      	beq.n	80223ae <_realloc_r+0x76>
 80223a2:	f021 0001 	bic.w	r0, r1, #1
 80223a6:	4418      	add	r0, r3
 80223a8:	6840      	ldr	r0, [r0, #4]
 80223aa:	07c7      	lsls	r7, r0, #31
 80223ac:	d427      	bmi.n	80223fe <_realloc_r+0xc6>
 80223ae:	f021 0103 	bic.w	r1, r1, #3
 80223b2:	459c      	cmp	ip, r3
 80223b4:	eb06 0701 	add.w	r7, r6, r1
 80223b8:	d119      	bne.n	80223ee <_realloc_r+0xb6>
 80223ba:	f108 0010 	add.w	r0, r8, #16
 80223be:	42b8      	cmp	r0, r7
 80223c0:	dc1f      	bgt.n	8022402 <_realloc_r+0xca>
 80223c2:	eb0a 0308 	add.w	r3, sl, r8
 80223c6:	4a8e      	ldr	r2, [pc, #568]	; (8022600 <_realloc_r+0x2c8>)
 80223c8:	eba7 0708 	sub.w	r7, r7, r8
 80223cc:	f047 0701 	orr.w	r7, r7, #1
 80223d0:	6093      	str	r3, [r2, #8]
 80223d2:	605f      	str	r7, [r3, #4]
 80223d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80223d8:	f003 0301 	and.w	r3, r3, #1
 80223dc:	ea43 0308 	orr.w	r3, r3, r8
 80223e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80223e4:	4648      	mov	r0, r9
 80223e6:	f7fc ff99 	bl	801f31c <__malloc_unlock>
 80223ea:	46a3      	mov	fp, r4
 80223ec:	e7c0      	b.n	8022370 <_realloc_r+0x38>
 80223ee:	45b8      	cmp	r8, r7
 80223f0:	dc07      	bgt.n	8022402 <_realloc_r+0xca>
 80223f2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80223f6:	60da      	str	r2, [r3, #12]
 80223f8:	6093      	str	r3, [r2, #8]
 80223fa:	4655      	mov	r5, sl
 80223fc:	e07f      	b.n	80224fe <_realloc_r+0x1c6>
 80223fe:	2100      	movs	r1, #0
 8022400:	460b      	mov	r3, r1
 8022402:	07e8      	lsls	r0, r5, #31
 8022404:	f100 80e5 	bmi.w	80225d2 <_realloc_r+0x29a>
 8022408:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802240c:	ebaa 0505 	sub.w	r5, sl, r5
 8022410:	6868      	ldr	r0, [r5, #4]
 8022412:	f020 0003 	bic.w	r0, r0, #3
 8022416:	eb00 0b06 	add.w	fp, r0, r6
 802241a:	2b00      	cmp	r3, #0
 802241c:	f000 80a5 	beq.w	802256a <_realloc_r+0x232>
 8022420:	459c      	cmp	ip, r3
 8022422:	eb01 070b 	add.w	r7, r1, fp
 8022426:	d14a      	bne.n	80224be <_realloc_r+0x186>
 8022428:	f108 0310 	add.w	r3, r8, #16
 802242c:	42bb      	cmp	r3, r7
 802242e:	f300 809c 	bgt.w	802256a <_realloc_r+0x232>
 8022432:	46ab      	mov	fp, r5
 8022434:	68eb      	ldr	r3, [r5, #12]
 8022436:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 802243a:	60d3      	str	r3, [r2, #12]
 802243c:	609a      	str	r2, [r3, #8]
 802243e:	1f32      	subs	r2, r6, #4
 8022440:	2a24      	cmp	r2, #36	; 0x24
 8022442:	d837      	bhi.n	80224b4 <_realloc_r+0x17c>
 8022444:	2a13      	cmp	r2, #19
 8022446:	d933      	bls.n	80224b0 <_realloc_r+0x178>
 8022448:	6823      	ldr	r3, [r4, #0]
 802244a:	60ab      	str	r3, [r5, #8]
 802244c:	6863      	ldr	r3, [r4, #4]
 802244e:	60eb      	str	r3, [r5, #12]
 8022450:	2a1b      	cmp	r2, #27
 8022452:	d81b      	bhi.n	802248c <_realloc_r+0x154>
 8022454:	3408      	adds	r4, #8
 8022456:	f105 0310 	add.w	r3, r5, #16
 802245a:	6822      	ldr	r2, [r4, #0]
 802245c:	601a      	str	r2, [r3, #0]
 802245e:	6862      	ldr	r2, [r4, #4]
 8022460:	605a      	str	r2, [r3, #4]
 8022462:	68a2      	ldr	r2, [r4, #8]
 8022464:	609a      	str	r2, [r3, #8]
 8022466:	eb05 0308 	add.w	r3, r5, r8
 802246a:	4a65      	ldr	r2, [pc, #404]	; (8022600 <_realloc_r+0x2c8>)
 802246c:	eba7 0708 	sub.w	r7, r7, r8
 8022470:	f047 0701 	orr.w	r7, r7, #1
 8022474:	6093      	str	r3, [r2, #8]
 8022476:	605f      	str	r7, [r3, #4]
 8022478:	686b      	ldr	r3, [r5, #4]
 802247a:	f003 0301 	and.w	r3, r3, #1
 802247e:	ea43 0308 	orr.w	r3, r3, r8
 8022482:	606b      	str	r3, [r5, #4]
 8022484:	4648      	mov	r0, r9
 8022486:	f7fc ff49 	bl	801f31c <__malloc_unlock>
 802248a:	e771      	b.n	8022370 <_realloc_r+0x38>
 802248c:	68a3      	ldr	r3, [r4, #8]
 802248e:	612b      	str	r3, [r5, #16]
 8022490:	68e3      	ldr	r3, [r4, #12]
 8022492:	616b      	str	r3, [r5, #20]
 8022494:	2a24      	cmp	r2, #36	; 0x24
 8022496:	bf01      	itttt	eq
 8022498:	6923      	ldreq	r3, [r4, #16]
 802249a:	61ab      	streq	r3, [r5, #24]
 802249c:	6962      	ldreq	r2, [r4, #20]
 802249e:	61ea      	streq	r2, [r5, #28]
 80224a0:	bf19      	ittee	ne
 80224a2:	3410      	addne	r4, #16
 80224a4:	f105 0318 	addne.w	r3, r5, #24
 80224a8:	f105 0320 	addeq.w	r3, r5, #32
 80224ac:	3418      	addeq	r4, #24
 80224ae:	e7d4      	b.n	802245a <_realloc_r+0x122>
 80224b0:	465b      	mov	r3, fp
 80224b2:	e7d2      	b.n	802245a <_realloc_r+0x122>
 80224b4:	4621      	mov	r1, r4
 80224b6:	4658      	mov	r0, fp
 80224b8:	f7ff ff24 	bl	8022304 <memmove>
 80224bc:	e7d3      	b.n	8022466 <_realloc_r+0x12e>
 80224be:	45b8      	cmp	r8, r7
 80224c0:	dc53      	bgt.n	802256a <_realloc_r+0x232>
 80224c2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80224c6:	4628      	mov	r0, r5
 80224c8:	60da      	str	r2, [r3, #12]
 80224ca:	6093      	str	r3, [r2, #8]
 80224cc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80224d0:	68eb      	ldr	r3, [r5, #12]
 80224d2:	60d3      	str	r3, [r2, #12]
 80224d4:	609a      	str	r2, [r3, #8]
 80224d6:	1f32      	subs	r2, r6, #4
 80224d8:	2a24      	cmp	r2, #36	; 0x24
 80224da:	d842      	bhi.n	8022562 <_realloc_r+0x22a>
 80224dc:	2a13      	cmp	r2, #19
 80224de:	d908      	bls.n	80224f2 <_realloc_r+0x1ba>
 80224e0:	6823      	ldr	r3, [r4, #0]
 80224e2:	60ab      	str	r3, [r5, #8]
 80224e4:	6863      	ldr	r3, [r4, #4]
 80224e6:	60eb      	str	r3, [r5, #12]
 80224e8:	2a1b      	cmp	r2, #27
 80224ea:	d828      	bhi.n	802253e <_realloc_r+0x206>
 80224ec:	3408      	adds	r4, #8
 80224ee:	f105 0010 	add.w	r0, r5, #16
 80224f2:	6823      	ldr	r3, [r4, #0]
 80224f4:	6003      	str	r3, [r0, #0]
 80224f6:	6863      	ldr	r3, [r4, #4]
 80224f8:	6043      	str	r3, [r0, #4]
 80224fa:	68a3      	ldr	r3, [r4, #8]
 80224fc:	6083      	str	r3, [r0, #8]
 80224fe:	686b      	ldr	r3, [r5, #4]
 8022500:	eba7 0008 	sub.w	r0, r7, r8
 8022504:	280f      	cmp	r0, #15
 8022506:	f003 0301 	and.w	r3, r3, #1
 802250a:	eb05 0207 	add.w	r2, r5, r7
 802250e:	f240 80b0 	bls.w	8022672 <_realloc_r+0x33a>
 8022512:	eb05 0108 	add.w	r1, r5, r8
 8022516:	ea48 0303 	orr.w	r3, r8, r3
 802251a:	f040 0001 	orr.w	r0, r0, #1
 802251e:	606b      	str	r3, [r5, #4]
 8022520:	6048      	str	r0, [r1, #4]
 8022522:	6853      	ldr	r3, [r2, #4]
 8022524:	f043 0301 	orr.w	r3, r3, #1
 8022528:	6053      	str	r3, [r2, #4]
 802252a:	3108      	adds	r1, #8
 802252c:	4648      	mov	r0, r9
 802252e:	f7ff f965 	bl	80217fc <_free_r>
 8022532:	4648      	mov	r0, r9
 8022534:	f7fc fef2 	bl	801f31c <__malloc_unlock>
 8022538:	f105 0b08 	add.w	fp, r5, #8
 802253c:	e718      	b.n	8022370 <_realloc_r+0x38>
 802253e:	68a3      	ldr	r3, [r4, #8]
 8022540:	612b      	str	r3, [r5, #16]
 8022542:	68e3      	ldr	r3, [r4, #12]
 8022544:	616b      	str	r3, [r5, #20]
 8022546:	2a24      	cmp	r2, #36	; 0x24
 8022548:	bf01      	itttt	eq
 802254a:	6923      	ldreq	r3, [r4, #16]
 802254c:	61ab      	streq	r3, [r5, #24]
 802254e:	6963      	ldreq	r3, [r4, #20]
 8022550:	61eb      	streq	r3, [r5, #28]
 8022552:	bf19      	ittee	ne
 8022554:	3410      	addne	r4, #16
 8022556:	f105 0018 	addne.w	r0, r5, #24
 802255a:	f105 0020 	addeq.w	r0, r5, #32
 802255e:	3418      	addeq	r4, #24
 8022560:	e7c7      	b.n	80224f2 <_realloc_r+0x1ba>
 8022562:	4621      	mov	r1, r4
 8022564:	f7ff fece 	bl	8022304 <memmove>
 8022568:	e7c9      	b.n	80224fe <_realloc_r+0x1c6>
 802256a:	45d8      	cmp	r8, fp
 802256c:	dc31      	bgt.n	80225d2 <_realloc_r+0x29a>
 802256e:	4628      	mov	r0, r5
 8022570:	68eb      	ldr	r3, [r5, #12]
 8022572:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022576:	60d3      	str	r3, [r2, #12]
 8022578:	609a      	str	r2, [r3, #8]
 802257a:	1f32      	subs	r2, r6, #4
 802257c:	2a24      	cmp	r2, #36	; 0x24
 802257e:	d824      	bhi.n	80225ca <_realloc_r+0x292>
 8022580:	2a13      	cmp	r2, #19
 8022582:	d908      	bls.n	8022596 <_realloc_r+0x25e>
 8022584:	6823      	ldr	r3, [r4, #0]
 8022586:	60ab      	str	r3, [r5, #8]
 8022588:	6863      	ldr	r3, [r4, #4]
 802258a:	60eb      	str	r3, [r5, #12]
 802258c:	2a1b      	cmp	r2, #27
 802258e:	d80a      	bhi.n	80225a6 <_realloc_r+0x26e>
 8022590:	3408      	adds	r4, #8
 8022592:	f105 0010 	add.w	r0, r5, #16
 8022596:	6823      	ldr	r3, [r4, #0]
 8022598:	6003      	str	r3, [r0, #0]
 802259a:	6863      	ldr	r3, [r4, #4]
 802259c:	6043      	str	r3, [r0, #4]
 802259e:	68a3      	ldr	r3, [r4, #8]
 80225a0:	6083      	str	r3, [r0, #8]
 80225a2:	465f      	mov	r7, fp
 80225a4:	e7ab      	b.n	80224fe <_realloc_r+0x1c6>
 80225a6:	68a3      	ldr	r3, [r4, #8]
 80225a8:	612b      	str	r3, [r5, #16]
 80225aa:	68e3      	ldr	r3, [r4, #12]
 80225ac:	616b      	str	r3, [r5, #20]
 80225ae:	2a24      	cmp	r2, #36	; 0x24
 80225b0:	bf01      	itttt	eq
 80225b2:	6923      	ldreq	r3, [r4, #16]
 80225b4:	61ab      	streq	r3, [r5, #24]
 80225b6:	6963      	ldreq	r3, [r4, #20]
 80225b8:	61eb      	streq	r3, [r5, #28]
 80225ba:	bf19      	ittee	ne
 80225bc:	3410      	addne	r4, #16
 80225be:	f105 0018 	addne.w	r0, r5, #24
 80225c2:	f105 0020 	addeq.w	r0, r5, #32
 80225c6:	3418      	addeq	r4, #24
 80225c8:	e7e5      	b.n	8022596 <_realloc_r+0x25e>
 80225ca:	4621      	mov	r1, r4
 80225cc:	f7ff fe9a 	bl	8022304 <memmove>
 80225d0:	e7e7      	b.n	80225a2 <_realloc_r+0x26a>
 80225d2:	4611      	mov	r1, r2
 80225d4:	4648      	mov	r0, r9
 80225d6:	f7fc fc39 	bl	801ee4c <_malloc_r>
 80225da:	4683      	mov	fp, r0
 80225dc:	2800      	cmp	r0, #0
 80225de:	f43f af51 	beq.w	8022484 <_realloc_r+0x14c>
 80225e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80225e6:	f023 0301 	bic.w	r3, r3, #1
 80225ea:	4453      	add	r3, sl
 80225ec:	f1a0 0208 	sub.w	r2, r0, #8
 80225f0:	4293      	cmp	r3, r2
 80225f2:	d107      	bne.n	8022604 <_realloc_r+0x2cc>
 80225f4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80225f8:	f027 0703 	bic.w	r7, r7, #3
 80225fc:	4437      	add	r7, r6
 80225fe:	e6fc      	b.n	80223fa <_realloc_r+0xc2>
 8022600:	20000570 	.word	0x20000570
 8022604:	1f32      	subs	r2, r6, #4
 8022606:	2a24      	cmp	r2, #36	; 0x24
 8022608:	d82d      	bhi.n	8022666 <_realloc_r+0x32e>
 802260a:	2a13      	cmp	r2, #19
 802260c:	d928      	bls.n	8022660 <_realloc_r+0x328>
 802260e:	6823      	ldr	r3, [r4, #0]
 8022610:	6003      	str	r3, [r0, #0]
 8022612:	6863      	ldr	r3, [r4, #4]
 8022614:	6043      	str	r3, [r0, #4]
 8022616:	2a1b      	cmp	r2, #27
 8022618:	d80e      	bhi.n	8022638 <_realloc_r+0x300>
 802261a:	f104 0208 	add.w	r2, r4, #8
 802261e:	f100 0308 	add.w	r3, r0, #8
 8022622:	6811      	ldr	r1, [r2, #0]
 8022624:	6019      	str	r1, [r3, #0]
 8022626:	6851      	ldr	r1, [r2, #4]
 8022628:	6059      	str	r1, [r3, #4]
 802262a:	6892      	ldr	r2, [r2, #8]
 802262c:	609a      	str	r2, [r3, #8]
 802262e:	4621      	mov	r1, r4
 8022630:	4648      	mov	r0, r9
 8022632:	f7ff f8e3 	bl	80217fc <_free_r>
 8022636:	e725      	b.n	8022484 <_realloc_r+0x14c>
 8022638:	68a3      	ldr	r3, [r4, #8]
 802263a:	6083      	str	r3, [r0, #8]
 802263c:	68e3      	ldr	r3, [r4, #12]
 802263e:	60c3      	str	r3, [r0, #12]
 8022640:	2a24      	cmp	r2, #36	; 0x24
 8022642:	bf01      	itttt	eq
 8022644:	6923      	ldreq	r3, [r4, #16]
 8022646:	6103      	streq	r3, [r0, #16]
 8022648:	6961      	ldreq	r1, [r4, #20]
 802264a:	6141      	streq	r1, [r0, #20]
 802264c:	bf19      	ittee	ne
 802264e:	f104 0210 	addne.w	r2, r4, #16
 8022652:	f100 0310 	addne.w	r3, r0, #16
 8022656:	f104 0218 	addeq.w	r2, r4, #24
 802265a:	f100 0318 	addeq.w	r3, r0, #24
 802265e:	e7e0      	b.n	8022622 <_realloc_r+0x2ea>
 8022660:	4603      	mov	r3, r0
 8022662:	4622      	mov	r2, r4
 8022664:	e7dd      	b.n	8022622 <_realloc_r+0x2ea>
 8022666:	4621      	mov	r1, r4
 8022668:	f7ff fe4c 	bl	8022304 <memmove>
 802266c:	e7df      	b.n	802262e <_realloc_r+0x2f6>
 802266e:	4637      	mov	r7, r6
 8022670:	e6c3      	b.n	80223fa <_realloc_r+0xc2>
 8022672:	431f      	orrs	r7, r3
 8022674:	606f      	str	r7, [r5, #4]
 8022676:	6853      	ldr	r3, [r2, #4]
 8022678:	f043 0301 	orr.w	r3, r3, #1
 802267c:	6053      	str	r3, [r2, #4]
 802267e:	e758      	b.n	8022532 <_realloc_r+0x1fa>

08022680 <__sprint_r>:
 8022680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022684:	6893      	ldr	r3, [r2, #8]
 8022686:	4680      	mov	r8, r0
 8022688:	460f      	mov	r7, r1
 802268a:	4614      	mov	r4, r2
 802268c:	b91b      	cbnz	r3, 8022696 <__sprint_r+0x16>
 802268e:	6053      	str	r3, [r2, #4]
 8022690:	4618      	mov	r0, r3
 8022692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022696:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8022698:	049d      	lsls	r5, r3, #18
 802269a:	d520      	bpl.n	80226de <__sprint_r+0x5e>
 802269c:	6815      	ldr	r5, [r2, #0]
 802269e:	3508      	adds	r5, #8
 80226a0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80226a4:	f04f 0900 	mov.w	r9, #0
 80226a8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80226ac:	45ca      	cmp	sl, r9
 80226ae:	dc0b      	bgt.n	80226c8 <__sprint_r+0x48>
 80226b0:	68a3      	ldr	r3, [r4, #8]
 80226b2:	f026 0003 	bic.w	r0, r6, #3
 80226b6:	1a18      	subs	r0, r3, r0
 80226b8:	60a0      	str	r0, [r4, #8]
 80226ba:	3508      	adds	r5, #8
 80226bc:	2800      	cmp	r0, #0
 80226be:	d1ef      	bne.n	80226a0 <__sprint_r+0x20>
 80226c0:	2300      	movs	r3, #0
 80226c2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80226c6:	e7e4      	b.n	8022692 <__sprint_r+0x12>
 80226c8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80226cc:	463a      	mov	r2, r7
 80226ce:	4640      	mov	r0, r8
 80226d0:	f000 feaf 	bl	8023432 <_fputwc_r>
 80226d4:	1c43      	adds	r3, r0, #1
 80226d6:	d0f3      	beq.n	80226c0 <__sprint_r+0x40>
 80226d8:	f109 0901 	add.w	r9, r9, #1
 80226dc:	e7e6      	b.n	80226ac <__sprint_r+0x2c>
 80226de:	f000 fed3 	bl	8023488 <__sfvwrite_r>
 80226e2:	e7ed      	b.n	80226c0 <__sprint_r+0x40>

080226e4 <_vfiprintf_r>:
 80226e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226e8:	ed2d 8b02 	vpush	{d8}
 80226ec:	b0b9      	sub	sp, #228	; 0xe4
 80226ee:	460f      	mov	r7, r1
 80226f0:	9201      	str	r2, [sp, #4]
 80226f2:	461d      	mov	r5, r3
 80226f4:	461c      	mov	r4, r3
 80226f6:	4681      	mov	r9, r0
 80226f8:	b118      	cbz	r0, 8022702 <_vfiprintf_r+0x1e>
 80226fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80226fc:	b90b      	cbnz	r3, 8022702 <_vfiprintf_r+0x1e>
 80226fe:	f000 fe2f 	bl	8023360 <__sinit>
 8022702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022704:	07d8      	lsls	r0, r3, #31
 8022706:	d405      	bmi.n	8022714 <_vfiprintf_r+0x30>
 8022708:	89bb      	ldrh	r3, [r7, #12]
 802270a:	0599      	lsls	r1, r3, #22
 802270c:	d402      	bmi.n	8022714 <_vfiprintf_r+0x30>
 802270e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8022710:	f7ff f93a 	bl	8021988 <__retarget_lock_acquire_recursive>
 8022714:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8022718:	049a      	lsls	r2, r3, #18
 802271a:	d406      	bmi.n	802272a <_vfiprintf_r+0x46>
 802271c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022720:	81bb      	strh	r3, [r7, #12]
 8022722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8022728:	667b      	str	r3, [r7, #100]	; 0x64
 802272a:	89bb      	ldrh	r3, [r7, #12]
 802272c:	071e      	lsls	r6, r3, #28
 802272e:	d501      	bpl.n	8022734 <_vfiprintf_r+0x50>
 8022730:	693b      	ldr	r3, [r7, #16]
 8022732:	b9bb      	cbnz	r3, 8022764 <_vfiprintf_r+0x80>
 8022734:	4639      	mov	r1, r7
 8022736:	4648      	mov	r0, r9
 8022738:	f000 fcb8 	bl	80230ac <__swsetup_r>
 802273c:	b190      	cbz	r0, 8022764 <_vfiprintf_r+0x80>
 802273e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022740:	07d8      	lsls	r0, r3, #31
 8022742:	d508      	bpl.n	8022756 <_vfiprintf_r+0x72>
 8022744:	f04f 33ff 	mov.w	r3, #4294967295
 8022748:	9302      	str	r3, [sp, #8]
 802274a:	9802      	ldr	r0, [sp, #8]
 802274c:	b039      	add	sp, #228	; 0xe4
 802274e:	ecbd 8b02 	vpop	{d8}
 8022752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022756:	89bb      	ldrh	r3, [r7, #12]
 8022758:	0599      	lsls	r1, r3, #22
 802275a:	d4f3      	bmi.n	8022744 <_vfiprintf_r+0x60>
 802275c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802275e:	f7ff f914 	bl	802198a <__retarget_lock_release_recursive>
 8022762:	e7ef      	b.n	8022744 <_vfiprintf_r+0x60>
 8022764:	89bb      	ldrh	r3, [r7, #12]
 8022766:	f003 021a 	and.w	r2, r3, #26
 802276a:	2a0a      	cmp	r2, #10
 802276c:	d116      	bne.n	802279c <_vfiprintf_r+0xb8>
 802276e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8022772:	2a00      	cmp	r2, #0
 8022774:	db12      	blt.n	802279c <_vfiprintf_r+0xb8>
 8022776:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022778:	07d2      	lsls	r2, r2, #31
 802277a:	d404      	bmi.n	8022786 <_vfiprintf_r+0xa2>
 802277c:	059e      	lsls	r6, r3, #22
 802277e:	d402      	bmi.n	8022786 <_vfiprintf_r+0xa2>
 8022780:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8022782:	f7ff f902 	bl	802198a <__retarget_lock_release_recursive>
 8022786:	9a01      	ldr	r2, [sp, #4]
 8022788:	462b      	mov	r3, r5
 802278a:	4639      	mov	r1, r7
 802278c:	4648      	mov	r0, r9
 802278e:	b039      	add	sp, #228	; 0xe4
 8022790:	ecbd 8b02 	vpop	{d8}
 8022794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022798:	f000 bc3a 	b.w	8023010 <__sbprintf>
 802279c:	2300      	movs	r3, #0
 802279e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80227a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80227a6:	ae0f      	add	r6, sp, #60	; 0x3c
 80227a8:	ee08 3a10 	vmov	s16, r3
 80227ac:	960c      	str	r6, [sp, #48]	; 0x30
 80227ae:	9307      	str	r3, [sp, #28]
 80227b0:	9302      	str	r3, [sp, #8]
 80227b2:	9b01      	ldr	r3, [sp, #4]
 80227b4:	461d      	mov	r5, r3
 80227b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80227ba:	b10a      	cbz	r2, 80227c0 <_vfiprintf_r+0xdc>
 80227bc:	2a25      	cmp	r2, #37	; 0x25
 80227be:	d1f9      	bne.n	80227b4 <_vfiprintf_r+0xd0>
 80227c0:	9b01      	ldr	r3, [sp, #4]
 80227c2:	ebb5 0803 	subs.w	r8, r5, r3
 80227c6:	d00d      	beq.n	80227e4 <_vfiprintf_r+0x100>
 80227c8:	e9c6 3800 	strd	r3, r8, [r6]
 80227cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80227ce:	4443      	add	r3, r8
 80227d0:	930e      	str	r3, [sp, #56]	; 0x38
 80227d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227d4:	3301      	adds	r3, #1
 80227d6:	2b07      	cmp	r3, #7
 80227d8:	930d      	str	r3, [sp, #52]	; 0x34
 80227da:	dc75      	bgt.n	80228c8 <_vfiprintf_r+0x1e4>
 80227dc:	3608      	adds	r6, #8
 80227de:	9b02      	ldr	r3, [sp, #8]
 80227e0:	4443      	add	r3, r8
 80227e2:	9302      	str	r3, [sp, #8]
 80227e4:	782b      	ldrb	r3, [r5, #0]
 80227e6:	2b00      	cmp	r3, #0
 80227e8:	f000 83d6 	beq.w	8022f98 <_vfiprintf_r+0x8b4>
 80227ec:	2300      	movs	r3, #0
 80227ee:	f04f 31ff 	mov.w	r1, #4294967295
 80227f2:	1c6a      	adds	r2, r5, #1
 80227f4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80227f8:	9100      	str	r1, [sp, #0]
 80227fa:	9303      	str	r3, [sp, #12]
 80227fc:	469a      	mov	sl, r3
 80227fe:	f812 3b01 	ldrb.w	r3, [r2], #1
 8022802:	9201      	str	r2, [sp, #4]
 8022804:	f1a3 0220 	sub.w	r2, r3, #32
 8022808:	2a5a      	cmp	r2, #90	; 0x5a
 802280a:	f200 831f 	bhi.w	8022e4c <_vfiprintf_r+0x768>
 802280e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8022812:	009b      	.short	0x009b
 8022814:	031d031d 	.word	0x031d031d
 8022818:	031d00a3 	.word	0x031d00a3
 802281c:	031d031d 	.word	0x031d031d
 8022820:	031d0082 	.word	0x031d0082
 8022824:	00a6031d 	.word	0x00a6031d
 8022828:	031d00b0 	.word	0x031d00b0
 802282c:	00b200ad 	.word	0x00b200ad
 8022830:	00cd031d 	.word	0x00cd031d
 8022834:	00d000d0 	.word	0x00d000d0
 8022838:	00d000d0 	.word	0x00d000d0
 802283c:	00d000d0 	.word	0x00d000d0
 8022840:	00d000d0 	.word	0x00d000d0
 8022844:	031d00d0 	.word	0x031d00d0
 8022848:	031d031d 	.word	0x031d031d
 802284c:	031d031d 	.word	0x031d031d
 8022850:	031d031d 	.word	0x031d031d
 8022854:	031d031d 	.word	0x031d031d
 8022858:	010800fa 	.word	0x010800fa
 802285c:	031d031d 	.word	0x031d031d
 8022860:	031d031d 	.word	0x031d031d
 8022864:	031d031d 	.word	0x031d031d
 8022868:	031d031d 	.word	0x031d031d
 802286c:	031d031d 	.word	0x031d031d
 8022870:	031d0158 	.word	0x031d0158
 8022874:	031d031d 	.word	0x031d031d
 8022878:	031d01a1 	.word	0x031d01a1
 802287c:	031d027e 	.word	0x031d027e
 8022880:	029e031d 	.word	0x029e031d
 8022884:	031d031d 	.word	0x031d031d
 8022888:	031d031d 	.word	0x031d031d
 802288c:	031d031d 	.word	0x031d031d
 8022890:	031d031d 	.word	0x031d031d
 8022894:	031d031d 	.word	0x031d031d
 8022898:	010a00fa 	.word	0x010a00fa
 802289c:	031d031d 	.word	0x031d031d
 80228a0:	00e0031d 	.word	0x00e0031d
 80228a4:	00f4010a 	.word	0x00f4010a
 80228a8:	00ed031d 	.word	0x00ed031d
 80228ac:	0136031d 	.word	0x0136031d
 80228b0:	018f015a 	.word	0x018f015a
 80228b4:	031d00f4 	.word	0x031d00f4
 80228b8:	009901a1 	.word	0x009901a1
 80228bc:	031d0280 	.word	0x031d0280
 80228c0:	0065031d 	.word	0x0065031d
 80228c4:	0099031d 	.word	0x0099031d
 80228c8:	aa0c      	add	r2, sp, #48	; 0x30
 80228ca:	4639      	mov	r1, r7
 80228cc:	4648      	mov	r0, r9
 80228ce:	f7ff fed7 	bl	8022680 <__sprint_r>
 80228d2:	2800      	cmp	r0, #0
 80228d4:	f040 833f 	bne.w	8022f56 <_vfiprintf_r+0x872>
 80228d8:	ae0f      	add	r6, sp, #60	; 0x3c
 80228da:	e780      	b.n	80227de <_vfiprintf_r+0xfa>
 80228dc:	4a9c      	ldr	r2, [pc, #624]	; (8022b50 <_vfiprintf_r+0x46c>)
 80228de:	9205      	str	r2, [sp, #20]
 80228e0:	f01a 0220 	ands.w	r2, sl, #32
 80228e4:	f000 8235 	beq.w	8022d52 <_vfiprintf_r+0x66e>
 80228e8:	3407      	adds	r4, #7
 80228ea:	f024 0207 	bic.w	r2, r4, #7
 80228ee:	4693      	mov	fp, r2
 80228f0:	6855      	ldr	r5, [r2, #4]
 80228f2:	f85b 4b08 	ldr.w	r4, [fp], #8
 80228f6:	f01a 0f01 	tst.w	sl, #1
 80228fa:	d009      	beq.n	8022910 <_vfiprintf_r+0x22c>
 80228fc:	ea54 0205 	orrs.w	r2, r4, r5
 8022900:	bf1f      	itttt	ne
 8022902:	2230      	movne	r2, #48	; 0x30
 8022904:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8022908:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 802290c:	f04a 0a02 	orrne.w	sl, sl, #2
 8022910:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8022914:	e11a      	b.n	8022b4c <_vfiprintf_r+0x468>
 8022916:	4648      	mov	r0, r9
 8022918:	f7ff f830 	bl	802197c <_localeconv_r>
 802291c:	6843      	ldr	r3, [r0, #4]
 802291e:	4618      	mov	r0, r3
 8022920:	ee08 3a10 	vmov	s16, r3
 8022924:	f7dd fc74 	bl	8000210 <strlen>
 8022928:	9007      	str	r0, [sp, #28]
 802292a:	4648      	mov	r0, r9
 802292c:	f7ff f826 	bl	802197c <_localeconv_r>
 8022930:	6883      	ldr	r3, [r0, #8]
 8022932:	9306      	str	r3, [sp, #24]
 8022934:	9b07      	ldr	r3, [sp, #28]
 8022936:	b12b      	cbz	r3, 8022944 <_vfiprintf_r+0x260>
 8022938:	9b06      	ldr	r3, [sp, #24]
 802293a:	b11b      	cbz	r3, 8022944 <_vfiprintf_r+0x260>
 802293c:	781b      	ldrb	r3, [r3, #0]
 802293e:	b10b      	cbz	r3, 8022944 <_vfiprintf_r+0x260>
 8022940:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8022944:	9a01      	ldr	r2, [sp, #4]
 8022946:	e75a      	b.n	80227fe <_vfiprintf_r+0x11a>
 8022948:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802294c:	2b00      	cmp	r3, #0
 802294e:	d1f9      	bne.n	8022944 <_vfiprintf_r+0x260>
 8022950:	2320      	movs	r3, #32
 8022952:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022956:	e7f5      	b.n	8022944 <_vfiprintf_r+0x260>
 8022958:	f04a 0a01 	orr.w	sl, sl, #1
 802295c:	e7f2      	b.n	8022944 <_vfiprintf_r+0x260>
 802295e:	f854 3b04 	ldr.w	r3, [r4], #4
 8022962:	9303      	str	r3, [sp, #12]
 8022964:	2b00      	cmp	r3, #0
 8022966:	daed      	bge.n	8022944 <_vfiprintf_r+0x260>
 8022968:	425b      	negs	r3, r3
 802296a:	9303      	str	r3, [sp, #12]
 802296c:	f04a 0a04 	orr.w	sl, sl, #4
 8022970:	e7e8      	b.n	8022944 <_vfiprintf_r+0x260>
 8022972:	232b      	movs	r3, #43	; 0x2b
 8022974:	e7ed      	b.n	8022952 <_vfiprintf_r+0x26e>
 8022976:	9a01      	ldr	r2, [sp, #4]
 8022978:	f812 3b01 	ldrb.w	r3, [r2], #1
 802297c:	2b2a      	cmp	r3, #42	; 0x2a
 802297e:	d112      	bne.n	80229a6 <_vfiprintf_r+0x2c2>
 8022980:	f854 0b04 	ldr.w	r0, [r4], #4
 8022984:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8022988:	e9cd 3200 	strd	r3, r2, [sp]
 802298c:	e7da      	b.n	8022944 <_vfiprintf_r+0x260>
 802298e:	9b00      	ldr	r3, [sp, #0]
 8022990:	200a      	movs	r0, #10
 8022992:	fb00 1303 	mla	r3, r0, r3, r1
 8022996:	9300      	str	r3, [sp, #0]
 8022998:	f812 3b01 	ldrb.w	r3, [r2], #1
 802299c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80229a0:	2909      	cmp	r1, #9
 80229a2:	d9f4      	bls.n	802298e <_vfiprintf_r+0x2aa>
 80229a4:	e72d      	b.n	8022802 <_vfiprintf_r+0x11e>
 80229a6:	2100      	movs	r1, #0
 80229a8:	9100      	str	r1, [sp, #0]
 80229aa:	e7f7      	b.n	802299c <_vfiprintf_r+0x2b8>
 80229ac:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80229b0:	e7c8      	b.n	8022944 <_vfiprintf_r+0x260>
 80229b2:	2100      	movs	r1, #0
 80229b4:	9a01      	ldr	r2, [sp, #4]
 80229b6:	9103      	str	r1, [sp, #12]
 80229b8:	9903      	ldr	r1, [sp, #12]
 80229ba:	3b30      	subs	r3, #48	; 0x30
 80229bc:	200a      	movs	r0, #10
 80229be:	fb00 3301 	mla	r3, r0, r1, r3
 80229c2:	9303      	str	r3, [sp, #12]
 80229c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80229c8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80229cc:	2909      	cmp	r1, #9
 80229ce:	d9f3      	bls.n	80229b8 <_vfiprintf_r+0x2d4>
 80229d0:	e717      	b.n	8022802 <_vfiprintf_r+0x11e>
 80229d2:	9b01      	ldr	r3, [sp, #4]
 80229d4:	781b      	ldrb	r3, [r3, #0]
 80229d6:	2b68      	cmp	r3, #104	; 0x68
 80229d8:	bf01      	itttt	eq
 80229da:	9b01      	ldreq	r3, [sp, #4]
 80229dc:	3301      	addeq	r3, #1
 80229de:	9301      	streq	r3, [sp, #4]
 80229e0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80229e4:	bf18      	it	ne
 80229e6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80229ea:	e7ab      	b.n	8022944 <_vfiprintf_r+0x260>
 80229ec:	9b01      	ldr	r3, [sp, #4]
 80229ee:	781b      	ldrb	r3, [r3, #0]
 80229f0:	2b6c      	cmp	r3, #108	; 0x6c
 80229f2:	d105      	bne.n	8022a00 <_vfiprintf_r+0x31c>
 80229f4:	9b01      	ldr	r3, [sp, #4]
 80229f6:	3301      	adds	r3, #1
 80229f8:	9301      	str	r3, [sp, #4]
 80229fa:	f04a 0a20 	orr.w	sl, sl, #32
 80229fe:	e7a1      	b.n	8022944 <_vfiprintf_r+0x260>
 8022a00:	f04a 0a10 	orr.w	sl, sl, #16
 8022a04:	e79e      	b.n	8022944 <_vfiprintf_r+0x260>
 8022a06:	46a3      	mov	fp, r4
 8022a08:	2100      	movs	r1, #0
 8022a0a:	f85b 3b04 	ldr.w	r3, [fp], #4
 8022a0e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022a12:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022a16:	2301      	movs	r3, #1
 8022a18:	9300      	str	r3, [sp, #0]
 8022a1a:	460d      	mov	r5, r1
 8022a1c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8022a20:	e0ad      	b.n	8022b7e <_vfiprintf_r+0x49a>
 8022a22:	f04a 0a10 	orr.w	sl, sl, #16
 8022a26:	f01a 0f20 	tst.w	sl, #32
 8022a2a:	d011      	beq.n	8022a50 <_vfiprintf_r+0x36c>
 8022a2c:	3407      	adds	r4, #7
 8022a2e:	f024 0307 	bic.w	r3, r4, #7
 8022a32:	469b      	mov	fp, r3
 8022a34:	685d      	ldr	r5, [r3, #4]
 8022a36:	f85b 4b08 	ldr.w	r4, [fp], #8
 8022a3a:	2d00      	cmp	r5, #0
 8022a3c:	da06      	bge.n	8022a4c <_vfiprintf_r+0x368>
 8022a3e:	4264      	negs	r4, r4
 8022a40:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8022a44:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8022a48:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022a4c:	2301      	movs	r3, #1
 8022a4e:	e04a      	b.n	8022ae6 <_vfiprintf_r+0x402>
 8022a50:	46a3      	mov	fp, r4
 8022a52:	f01a 0f10 	tst.w	sl, #16
 8022a56:	f85b 5b04 	ldr.w	r5, [fp], #4
 8022a5a:	d002      	beq.n	8022a62 <_vfiprintf_r+0x37e>
 8022a5c:	462c      	mov	r4, r5
 8022a5e:	17ed      	asrs	r5, r5, #31
 8022a60:	e7eb      	b.n	8022a3a <_vfiprintf_r+0x356>
 8022a62:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022a66:	d003      	beq.n	8022a70 <_vfiprintf_r+0x38c>
 8022a68:	b22c      	sxth	r4, r5
 8022a6a:	f345 35c0 	sbfx	r5, r5, #15, #1
 8022a6e:	e7e4      	b.n	8022a3a <_vfiprintf_r+0x356>
 8022a70:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022a74:	d0f2      	beq.n	8022a5c <_vfiprintf_r+0x378>
 8022a76:	b26c      	sxtb	r4, r5
 8022a78:	f345 15c0 	sbfx	r5, r5, #7, #1
 8022a7c:	e7dd      	b.n	8022a3a <_vfiprintf_r+0x356>
 8022a7e:	f01a 0f20 	tst.w	sl, #32
 8022a82:	f104 0b04 	add.w	fp, r4, #4
 8022a86:	d007      	beq.n	8022a98 <_vfiprintf_r+0x3b4>
 8022a88:	9a02      	ldr	r2, [sp, #8]
 8022a8a:	6823      	ldr	r3, [r4, #0]
 8022a8c:	9902      	ldr	r1, [sp, #8]
 8022a8e:	17d2      	asrs	r2, r2, #31
 8022a90:	e9c3 1200 	strd	r1, r2, [r3]
 8022a94:	465c      	mov	r4, fp
 8022a96:	e68c      	b.n	80227b2 <_vfiprintf_r+0xce>
 8022a98:	f01a 0f10 	tst.w	sl, #16
 8022a9c:	d003      	beq.n	8022aa6 <_vfiprintf_r+0x3c2>
 8022a9e:	6823      	ldr	r3, [r4, #0]
 8022aa0:	9a02      	ldr	r2, [sp, #8]
 8022aa2:	601a      	str	r2, [r3, #0]
 8022aa4:	e7f6      	b.n	8022a94 <_vfiprintf_r+0x3b0>
 8022aa6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022aaa:	d003      	beq.n	8022ab4 <_vfiprintf_r+0x3d0>
 8022aac:	6823      	ldr	r3, [r4, #0]
 8022aae:	9a02      	ldr	r2, [sp, #8]
 8022ab0:	801a      	strh	r2, [r3, #0]
 8022ab2:	e7ef      	b.n	8022a94 <_vfiprintf_r+0x3b0>
 8022ab4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022ab8:	d0f1      	beq.n	8022a9e <_vfiprintf_r+0x3ba>
 8022aba:	6823      	ldr	r3, [r4, #0]
 8022abc:	9a02      	ldr	r2, [sp, #8]
 8022abe:	701a      	strb	r2, [r3, #0]
 8022ac0:	e7e8      	b.n	8022a94 <_vfiprintf_r+0x3b0>
 8022ac2:	f04a 0a10 	orr.w	sl, sl, #16
 8022ac6:	f01a 0320 	ands.w	r3, sl, #32
 8022aca:	d01f      	beq.n	8022b0c <_vfiprintf_r+0x428>
 8022acc:	3407      	adds	r4, #7
 8022ace:	f024 0307 	bic.w	r3, r4, #7
 8022ad2:	469b      	mov	fp, r3
 8022ad4:	685d      	ldr	r5, [r3, #4]
 8022ad6:	f85b 4b08 	ldr.w	r4, [fp], #8
 8022ada:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8022ade:	2300      	movs	r3, #0
 8022ae0:	2200      	movs	r2, #0
 8022ae2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8022ae6:	9a00      	ldr	r2, [sp, #0]
 8022ae8:	3201      	adds	r2, #1
 8022aea:	f000 8262 	beq.w	8022fb2 <_vfiprintf_r+0x8ce>
 8022aee:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8022af2:	9204      	str	r2, [sp, #16]
 8022af4:	ea54 0205 	orrs.w	r2, r4, r5
 8022af8:	f040 8261 	bne.w	8022fbe <_vfiprintf_r+0x8da>
 8022afc:	9a00      	ldr	r2, [sp, #0]
 8022afe:	2a00      	cmp	r2, #0
 8022b00:	f000 8199 	beq.w	8022e36 <_vfiprintf_r+0x752>
 8022b04:	2b01      	cmp	r3, #1
 8022b06:	f040 825d 	bne.w	8022fc4 <_vfiprintf_r+0x8e0>
 8022b0a:	e139      	b.n	8022d80 <_vfiprintf_r+0x69c>
 8022b0c:	46a3      	mov	fp, r4
 8022b0e:	f01a 0510 	ands.w	r5, sl, #16
 8022b12:	f85b 4b04 	ldr.w	r4, [fp], #4
 8022b16:	d001      	beq.n	8022b1c <_vfiprintf_r+0x438>
 8022b18:	461d      	mov	r5, r3
 8022b1a:	e7de      	b.n	8022ada <_vfiprintf_r+0x3f6>
 8022b1c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8022b20:	d001      	beq.n	8022b26 <_vfiprintf_r+0x442>
 8022b22:	b2a4      	uxth	r4, r4
 8022b24:	e7d9      	b.n	8022ada <_vfiprintf_r+0x3f6>
 8022b26:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8022b2a:	d0d6      	beq.n	8022ada <_vfiprintf_r+0x3f6>
 8022b2c:	b2e4      	uxtb	r4, r4
 8022b2e:	e7f3      	b.n	8022b18 <_vfiprintf_r+0x434>
 8022b30:	2330      	movs	r3, #48	; 0x30
 8022b32:	46a3      	mov	fp, r4
 8022b34:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8022b38:	2378      	movs	r3, #120	; 0x78
 8022b3a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8022b3e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8022b42:	4b03      	ldr	r3, [pc, #12]	; (8022b50 <_vfiprintf_r+0x46c>)
 8022b44:	9305      	str	r3, [sp, #20]
 8022b46:	2500      	movs	r5, #0
 8022b48:	f04a 0a02 	orr.w	sl, sl, #2
 8022b4c:	2302      	movs	r3, #2
 8022b4e:	e7c7      	b.n	8022ae0 <_vfiprintf_r+0x3fc>
 8022b50:	08025d6c 	.word	0x08025d6c
 8022b54:	9b00      	ldr	r3, [sp, #0]
 8022b56:	46a3      	mov	fp, r4
 8022b58:	2500      	movs	r5, #0
 8022b5a:	1c5c      	adds	r4, r3, #1
 8022b5c:	f85b 8b04 	ldr.w	r8, [fp], #4
 8022b60:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8022b64:	f000 80ce 	beq.w	8022d04 <_vfiprintf_r+0x620>
 8022b68:	461a      	mov	r2, r3
 8022b6a:	4629      	mov	r1, r5
 8022b6c:	4640      	mov	r0, r8
 8022b6e:	f7dd fb57 	bl	8000220 <memchr>
 8022b72:	2800      	cmp	r0, #0
 8022b74:	f000 8174 	beq.w	8022e60 <_vfiprintf_r+0x77c>
 8022b78:	eba0 0308 	sub.w	r3, r0, r8
 8022b7c:	9300      	str	r3, [sp, #0]
 8022b7e:	9b00      	ldr	r3, [sp, #0]
 8022b80:	42ab      	cmp	r3, r5
 8022b82:	bfb8      	it	lt
 8022b84:	462b      	movlt	r3, r5
 8022b86:	9304      	str	r3, [sp, #16]
 8022b88:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022b8c:	b113      	cbz	r3, 8022b94 <_vfiprintf_r+0x4b0>
 8022b8e:	9b04      	ldr	r3, [sp, #16]
 8022b90:	3301      	adds	r3, #1
 8022b92:	9304      	str	r3, [sp, #16]
 8022b94:	f01a 0302 	ands.w	r3, sl, #2
 8022b98:	9308      	str	r3, [sp, #32]
 8022b9a:	bf1e      	ittt	ne
 8022b9c:	9b04      	ldrne	r3, [sp, #16]
 8022b9e:	3302      	addne	r3, #2
 8022ba0:	9304      	strne	r3, [sp, #16]
 8022ba2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8022ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8022ba8:	d11f      	bne.n	8022bea <_vfiprintf_r+0x506>
 8022baa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022bae:	1a9c      	subs	r4, r3, r2
 8022bb0:	2c00      	cmp	r4, #0
 8022bb2:	dd1a      	ble.n	8022bea <_vfiprintf_r+0x506>
 8022bb4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8022bb8:	48aa      	ldr	r0, [pc, #680]	; (8022e64 <_vfiprintf_r+0x780>)
 8022bba:	6030      	str	r0, [r6, #0]
 8022bbc:	2c10      	cmp	r4, #16
 8022bbe:	f103 0301 	add.w	r3, r3, #1
 8022bc2:	f106 0108 	add.w	r1, r6, #8
 8022bc6:	f300 8153 	bgt.w	8022e70 <_vfiprintf_r+0x78c>
 8022bca:	6074      	str	r4, [r6, #4]
 8022bcc:	2b07      	cmp	r3, #7
 8022bce:	4414      	add	r4, r2
 8022bd0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022bd4:	f340 815e 	ble.w	8022e94 <_vfiprintf_r+0x7b0>
 8022bd8:	aa0c      	add	r2, sp, #48	; 0x30
 8022bda:	4639      	mov	r1, r7
 8022bdc:	4648      	mov	r0, r9
 8022bde:	f7ff fd4f 	bl	8022680 <__sprint_r>
 8022be2:	2800      	cmp	r0, #0
 8022be4:	f040 81b7 	bne.w	8022f56 <_vfiprintf_r+0x872>
 8022be8:	ae0f      	add	r6, sp, #60	; 0x3c
 8022bea:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022bee:	b173      	cbz	r3, 8022c0e <_vfiprintf_r+0x52a>
 8022bf0:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8022bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022bf6:	6032      	str	r2, [r6, #0]
 8022bf8:	2201      	movs	r2, #1
 8022bfa:	6072      	str	r2, [r6, #4]
 8022bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022bfe:	3301      	adds	r3, #1
 8022c00:	3201      	adds	r2, #1
 8022c02:	2b07      	cmp	r3, #7
 8022c04:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022c08:	f300 8146 	bgt.w	8022e98 <_vfiprintf_r+0x7b4>
 8022c0c:	3608      	adds	r6, #8
 8022c0e:	9b08      	ldr	r3, [sp, #32]
 8022c10:	b16b      	cbz	r3, 8022c2e <_vfiprintf_r+0x54a>
 8022c12:	aa0b      	add	r2, sp, #44	; 0x2c
 8022c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c16:	6032      	str	r2, [r6, #0]
 8022c18:	2202      	movs	r2, #2
 8022c1a:	6072      	str	r2, [r6, #4]
 8022c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022c1e:	3301      	adds	r3, #1
 8022c20:	3202      	adds	r2, #2
 8022c22:	2b07      	cmp	r3, #7
 8022c24:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022c28:	f300 813f 	bgt.w	8022eaa <_vfiprintf_r+0x7c6>
 8022c2c:	3608      	adds	r6, #8
 8022c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c30:	2b80      	cmp	r3, #128	; 0x80
 8022c32:	d11f      	bne.n	8022c74 <_vfiprintf_r+0x590>
 8022c34:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022c38:	1a9c      	subs	r4, r3, r2
 8022c3a:	2c00      	cmp	r4, #0
 8022c3c:	dd1a      	ble.n	8022c74 <_vfiprintf_r+0x590>
 8022c3e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8022c42:	4889      	ldr	r0, [pc, #548]	; (8022e68 <_vfiprintf_r+0x784>)
 8022c44:	6030      	str	r0, [r6, #0]
 8022c46:	2c10      	cmp	r4, #16
 8022c48:	f103 0301 	add.w	r3, r3, #1
 8022c4c:	f106 0108 	add.w	r1, r6, #8
 8022c50:	f300 8134 	bgt.w	8022ebc <_vfiprintf_r+0x7d8>
 8022c54:	6074      	str	r4, [r6, #4]
 8022c56:	2b07      	cmp	r3, #7
 8022c58:	4414      	add	r4, r2
 8022c5a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022c5e:	f340 813f 	ble.w	8022ee0 <_vfiprintf_r+0x7fc>
 8022c62:	aa0c      	add	r2, sp, #48	; 0x30
 8022c64:	4639      	mov	r1, r7
 8022c66:	4648      	mov	r0, r9
 8022c68:	f7ff fd0a 	bl	8022680 <__sprint_r>
 8022c6c:	2800      	cmp	r0, #0
 8022c6e:	f040 8172 	bne.w	8022f56 <_vfiprintf_r+0x872>
 8022c72:	ae0f      	add	r6, sp, #60	; 0x3c
 8022c74:	9b00      	ldr	r3, [sp, #0]
 8022c76:	1aec      	subs	r4, r5, r3
 8022c78:	2c00      	cmp	r4, #0
 8022c7a:	dd1a      	ble.n	8022cb2 <_vfiprintf_r+0x5ce>
 8022c7c:	4d7a      	ldr	r5, [pc, #488]	; (8022e68 <_vfiprintf_r+0x784>)
 8022c7e:	6035      	str	r5, [r6, #0]
 8022c80:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8022c84:	2c10      	cmp	r4, #16
 8022c86:	f103 0301 	add.w	r3, r3, #1
 8022c8a:	f106 0208 	add.w	r2, r6, #8
 8022c8e:	f300 8129 	bgt.w	8022ee4 <_vfiprintf_r+0x800>
 8022c92:	6074      	str	r4, [r6, #4]
 8022c94:	2b07      	cmp	r3, #7
 8022c96:	440c      	add	r4, r1
 8022c98:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022c9c:	f340 8133 	ble.w	8022f06 <_vfiprintf_r+0x822>
 8022ca0:	aa0c      	add	r2, sp, #48	; 0x30
 8022ca2:	4639      	mov	r1, r7
 8022ca4:	4648      	mov	r0, r9
 8022ca6:	f7ff fceb 	bl	8022680 <__sprint_r>
 8022caa:	2800      	cmp	r0, #0
 8022cac:	f040 8153 	bne.w	8022f56 <_vfiprintf_r+0x872>
 8022cb0:	ae0f      	add	r6, sp, #60	; 0x3c
 8022cb2:	9b00      	ldr	r3, [sp, #0]
 8022cb4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022cb6:	6073      	str	r3, [r6, #4]
 8022cb8:	4418      	add	r0, r3
 8022cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022cbc:	f8c6 8000 	str.w	r8, [r6]
 8022cc0:	3301      	adds	r3, #1
 8022cc2:	2b07      	cmp	r3, #7
 8022cc4:	900e      	str	r0, [sp, #56]	; 0x38
 8022cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8022cc8:	f300 811f 	bgt.w	8022f0a <_vfiprintf_r+0x826>
 8022ccc:	f106 0308 	add.w	r3, r6, #8
 8022cd0:	f01a 0f04 	tst.w	sl, #4
 8022cd4:	f040 8121 	bne.w	8022f1a <_vfiprintf_r+0x836>
 8022cd8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8022cdc:	9904      	ldr	r1, [sp, #16]
 8022cde:	428a      	cmp	r2, r1
 8022ce0:	bfac      	ite	ge
 8022ce2:	189b      	addge	r3, r3, r2
 8022ce4:	185b      	addlt	r3, r3, r1
 8022ce6:	9302      	str	r3, [sp, #8]
 8022ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022cea:	b13b      	cbz	r3, 8022cfc <_vfiprintf_r+0x618>
 8022cec:	aa0c      	add	r2, sp, #48	; 0x30
 8022cee:	4639      	mov	r1, r7
 8022cf0:	4648      	mov	r0, r9
 8022cf2:	f7ff fcc5 	bl	8022680 <__sprint_r>
 8022cf6:	2800      	cmp	r0, #0
 8022cf8:	f040 812d 	bne.w	8022f56 <_vfiprintf_r+0x872>
 8022cfc:	2300      	movs	r3, #0
 8022cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8022d00:	ae0f      	add	r6, sp, #60	; 0x3c
 8022d02:	e6c7      	b.n	8022a94 <_vfiprintf_r+0x3b0>
 8022d04:	4640      	mov	r0, r8
 8022d06:	f7dd fa83 	bl	8000210 <strlen>
 8022d0a:	9000      	str	r0, [sp, #0]
 8022d0c:	e737      	b.n	8022b7e <_vfiprintf_r+0x49a>
 8022d0e:	f04a 0a10 	orr.w	sl, sl, #16
 8022d12:	f01a 0320 	ands.w	r3, sl, #32
 8022d16:	d008      	beq.n	8022d2a <_vfiprintf_r+0x646>
 8022d18:	3407      	adds	r4, #7
 8022d1a:	f024 0307 	bic.w	r3, r4, #7
 8022d1e:	469b      	mov	fp, r3
 8022d20:	685d      	ldr	r5, [r3, #4]
 8022d22:	f85b 4b08 	ldr.w	r4, [fp], #8
 8022d26:	2301      	movs	r3, #1
 8022d28:	e6da      	b.n	8022ae0 <_vfiprintf_r+0x3fc>
 8022d2a:	46a3      	mov	fp, r4
 8022d2c:	f01a 0510 	ands.w	r5, sl, #16
 8022d30:	f85b 4b04 	ldr.w	r4, [fp], #4
 8022d34:	d001      	beq.n	8022d3a <_vfiprintf_r+0x656>
 8022d36:	461d      	mov	r5, r3
 8022d38:	e7f5      	b.n	8022d26 <_vfiprintf_r+0x642>
 8022d3a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8022d3e:	d001      	beq.n	8022d44 <_vfiprintf_r+0x660>
 8022d40:	b2a4      	uxth	r4, r4
 8022d42:	e7f0      	b.n	8022d26 <_vfiprintf_r+0x642>
 8022d44:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8022d48:	d0ed      	beq.n	8022d26 <_vfiprintf_r+0x642>
 8022d4a:	b2e4      	uxtb	r4, r4
 8022d4c:	e7f3      	b.n	8022d36 <_vfiprintf_r+0x652>
 8022d4e:	4a47      	ldr	r2, [pc, #284]	; (8022e6c <_vfiprintf_r+0x788>)
 8022d50:	e5c5      	b.n	80228de <_vfiprintf_r+0x1fa>
 8022d52:	46a3      	mov	fp, r4
 8022d54:	f01a 0510 	ands.w	r5, sl, #16
 8022d58:	f85b 4b04 	ldr.w	r4, [fp], #4
 8022d5c:	d001      	beq.n	8022d62 <_vfiprintf_r+0x67e>
 8022d5e:	4615      	mov	r5, r2
 8022d60:	e5c9      	b.n	80228f6 <_vfiprintf_r+0x212>
 8022d62:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8022d66:	d001      	beq.n	8022d6c <_vfiprintf_r+0x688>
 8022d68:	b2a4      	uxth	r4, r4
 8022d6a:	e5c4      	b.n	80228f6 <_vfiprintf_r+0x212>
 8022d6c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8022d70:	f43f adc1 	beq.w	80228f6 <_vfiprintf_r+0x212>
 8022d74:	b2e4      	uxtb	r4, r4
 8022d76:	e7f2      	b.n	8022d5e <_vfiprintf_r+0x67a>
 8022d78:	2c0a      	cmp	r4, #10
 8022d7a:	f175 0300 	sbcs.w	r3, r5, #0
 8022d7e:	d205      	bcs.n	8022d8c <_vfiprintf_r+0x6a8>
 8022d80:	3430      	adds	r4, #48	; 0x30
 8022d82:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8022d86:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8022d8a:	e137      	b.n	8022ffc <_vfiprintf_r+0x918>
 8022d8c:	ab38      	add	r3, sp, #224	; 0xe0
 8022d8e:	9308      	str	r3, [sp, #32]
 8022d90:	9b04      	ldr	r3, [sp, #16]
 8022d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022d96:	f04f 0a00 	mov.w	sl, #0
 8022d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8022d9c:	9b08      	ldr	r3, [sp, #32]
 8022d9e:	220a      	movs	r2, #10
 8022da0:	f103 38ff 	add.w	r8, r3, #4294967295
 8022da4:	4620      	mov	r0, r4
 8022da6:	2300      	movs	r3, #0
 8022da8:	4629      	mov	r1, r5
 8022daa:	f7de f84b 	bl	8000e44 <__aeabi_uldivmod>
 8022dae:	9b08      	ldr	r3, [sp, #32]
 8022db0:	3230      	adds	r2, #48	; 0x30
 8022db2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8022db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022db8:	f10a 0a01 	add.w	sl, sl, #1
 8022dbc:	b1db      	cbz	r3, 8022df6 <_vfiprintf_r+0x712>
 8022dbe:	9b06      	ldr	r3, [sp, #24]
 8022dc0:	781b      	ldrb	r3, [r3, #0]
 8022dc2:	4553      	cmp	r3, sl
 8022dc4:	d117      	bne.n	8022df6 <_vfiprintf_r+0x712>
 8022dc6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022dca:	d014      	beq.n	8022df6 <_vfiprintf_r+0x712>
 8022dcc:	2c0a      	cmp	r4, #10
 8022dce:	f175 0300 	sbcs.w	r3, r5, #0
 8022dd2:	d310      	bcc.n	8022df6 <_vfiprintf_r+0x712>
 8022dd4:	9b07      	ldr	r3, [sp, #28]
 8022dd6:	eba8 0803 	sub.w	r8, r8, r3
 8022dda:	461a      	mov	r2, r3
 8022ddc:	ee18 1a10 	vmov	r1, s16
 8022de0:	4640      	mov	r0, r8
 8022de2:	f7ff f941 	bl	8022068 <strncpy>
 8022de6:	9b06      	ldr	r3, [sp, #24]
 8022de8:	785b      	ldrb	r3, [r3, #1]
 8022dea:	b1a3      	cbz	r3, 8022e16 <_vfiprintf_r+0x732>
 8022dec:	9b06      	ldr	r3, [sp, #24]
 8022dee:	3301      	adds	r3, #1
 8022df0:	9306      	str	r3, [sp, #24]
 8022df2:	f04f 0a00 	mov.w	sl, #0
 8022df6:	2300      	movs	r3, #0
 8022df8:	220a      	movs	r2, #10
 8022dfa:	4620      	mov	r0, r4
 8022dfc:	4629      	mov	r1, r5
 8022dfe:	f7de f821 	bl	8000e44 <__aeabi_uldivmod>
 8022e02:	2c0a      	cmp	r4, #10
 8022e04:	f175 0300 	sbcs.w	r3, r5, #0
 8022e08:	f0c0 80f8 	bcc.w	8022ffc <_vfiprintf_r+0x918>
 8022e0c:	4604      	mov	r4, r0
 8022e0e:	460d      	mov	r5, r1
 8022e10:	f8cd 8020 	str.w	r8, [sp, #32]
 8022e14:	e7c2      	b.n	8022d9c <_vfiprintf_r+0x6b8>
 8022e16:	469a      	mov	sl, r3
 8022e18:	e7ed      	b.n	8022df6 <_vfiprintf_r+0x712>
 8022e1a:	f004 030f 	and.w	r3, r4, #15
 8022e1e:	9a05      	ldr	r2, [sp, #20]
 8022e20:	0924      	lsrs	r4, r4, #4
 8022e22:	5cd3      	ldrb	r3, [r2, r3]
 8022e24:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022e28:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8022e2c:	092d      	lsrs	r5, r5, #4
 8022e2e:	ea54 0305 	orrs.w	r3, r4, r5
 8022e32:	d1f2      	bne.n	8022e1a <_vfiprintf_r+0x736>
 8022e34:	e0e2      	b.n	8022ffc <_vfiprintf_r+0x918>
 8022e36:	b933      	cbnz	r3, 8022e46 <_vfiprintf_r+0x762>
 8022e38:	f01a 0f01 	tst.w	sl, #1
 8022e3c:	d003      	beq.n	8022e46 <_vfiprintf_r+0x762>
 8022e3e:	2330      	movs	r3, #48	; 0x30
 8022e40:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8022e44:	e79f      	b.n	8022d86 <_vfiprintf_r+0x6a2>
 8022e46:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022e4a:	e0d7      	b.n	8022ffc <_vfiprintf_r+0x918>
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	f000 80a3 	beq.w	8022f98 <_vfiprintf_r+0x8b4>
 8022e52:	2100      	movs	r1, #0
 8022e54:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022e58:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022e5c:	46a3      	mov	fp, r4
 8022e5e:	e5da      	b.n	8022a16 <_vfiprintf_r+0x332>
 8022e60:	4605      	mov	r5, r0
 8022e62:	e68c      	b.n	8022b7e <_vfiprintf_r+0x49a>
 8022e64:	080260ca 	.word	0x080260ca
 8022e68:	080260da 	.word	0x080260da
 8022e6c:	08025d7d 	.word	0x08025d7d
 8022e70:	2010      	movs	r0, #16
 8022e72:	4402      	add	r2, r0
 8022e74:	2b07      	cmp	r3, #7
 8022e76:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022e7a:	6070      	str	r0, [r6, #4]
 8022e7c:	dd07      	ble.n	8022e8e <_vfiprintf_r+0x7aa>
 8022e7e:	aa0c      	add	r2, sp, #48	; 0x30
 8022e80:	4639      	mov	r1, r7
 8022e82:	4648      	mov	r0, r9
 8022e84:	f7ff fbfc 	bl	8022680 <__sprint_r>
 8022e88:	2800      	cmp	r0, #0
 8022e8a:	d164      	bne.n	8022f56 <_vfiprintf_r+0x872>
 8022e8c:	a90f      	add	r1, sp, #60	; 0x3c
 8022e8e:	3c10      	subs	r4, #16
 8022e90:	460e      	mov	r6, r1
 8022e92:	e68f      	b.n	8022bb4 <_vfiprintf_r+0x4d0>
 8022e94:	460e      	mov	r6, r1
 8022e96:	e6a8      	b.n	8022bea <_vfiprintf_r+0x506>
 8022e98:	aa0c      	add	r2, sp, #48	; 0x30
 8022e9a:	4639      	mov	r1, r7
 8022e9c:	4648      	mov	r0, r9
 8022e9e:	f7ff fbef 	bl	8022680 <__sprint_r>
 8022ea2:	2800      	cmp	r0, #0
 8022ea4:	d157      	bne.n	8022f56 <_vfiprintf_r+0x872>
 8022ea6:	ae0f      	add	r6, sp, #60	; 0x3c
 8022ea8:	e6b1      	b.n	8022c0e <_vfiprintf_r+0x52a>
 8022eaa:	aa0c      	add	r2, sp, #48	; 0x30
 8022eac:	4639      	mov	r1, r7
 8022eae:	4648      	mov	r0, r9
 8022eb0:	f7ff fbe6 	bl	8022680 <__sprint_r>
 8022eb4:	2800      	cmp	r0, #0
 8022eb6:	d14e      	bne.n	8022f56 <_vfiprintf_r+0x872>
 8022eb8:	ae0f      	add	r6, sp, #60	; 0x3c
 8022eba:	e6b8      	b.n	8022c2e <_vfiprintf_r+0x54a>
 8022ebc:	2010      	movs	r0, #16
 8022ebe:	4402      	add	r2, r0
 8022ec0:	2b07      	cmp	r3, #7
 8022ec2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022ec6:	6070      	str	r0, [r6, #4]
 8022ec8:	dd07      	ble.n	8022eda <_vfiprintf_r+0x7f6>
 8022eca:	aa0c      	add	r2, sp, #48	; 0x30
 8022ecc:	4639      	mov	r1, r7
 8022ece:	4648      	mov	r0, r9
 8022ed0:	f7ff fbd6 	bl	8022680 <__sprint_r>
 8022ed4:	2800      	cmp	r0, #0
 8022ed6:	d13e      	bne.n	8022f56 <_vfiprintf_r+0x872>
 8022ed8:	a90f      	add	r1, sp, #60	; 0x3c
 8022eda:	3c10      	subs	r4, #16
 8022edc:	460e      	mov	r6, r1
 8022ede:	e6ae      	b.n	8022c3e <_vfiprintf_r+0x55a>
 8022ee0:	460e      	mov	r6, r1
 8022ee2:	e6c7      	b.n	8022c74 <_vfiprintf_r+0x590>
 8022ee4:	2010      	movs	r0, #16
 8022ee6:	4401      	add	r1, r0
 8022ee8:	2b07      	cmp	r3, #7
 8022eea:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8022eee:	6070      	str	r0, [r6, #4]
 8022ef0:	dd06      	ble.n	8022f00 <_vfiprintf_r+0x81c>
 8022ef2:	aa0c      	add	r2, sp, #48	; 0x30
 8022ef4:	4639      	mov	r1, r7
 8022ef6:	4648      	mov	r0, r9
 8022ef8:	f7ff fbc2 	bl	8022680 <__sprint_r>
 8022efc:	bb58      	cbnz	r0, 8022f56 <_vfiprintf_r+0x872>
 8022efe:	aa0f      	add	r2, sp, #60	; 0x3c
 8022f00:	3c10      	subs	r4, #16
 8022f02:	4616      	mov	r6, r2
 8022f04:	e6bb      	b.n	8022c7e <_vfiprintf_r+0x59a>
 8022f06:	4616      	mov	r6, r2
 8022f08:	e6d3      	b.n	8022cb2 <_vfiprintf_r+0x5ce>
 8022f0a:	aa0c      	add	r2, sp, #48	; 0x30
 8022f0c:	4639      	mov	r1, r7
 8022f0e:	4648      	mov	r0, r9
 8022f10:	f7ff fbb6 	bl	8022680 <__sprint_r>
 8022f14:	b9f8      	cbnz	r0, 8022f56 <_vfiprintf_r+0x872>
 8022f16:	ab0f      	add	r3, sp, #60	; 0x3c
 8022f18:	e6da      	b.n	8022cd0 <_vfiprintf_r+0x5ec>
 8022f1a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8022f1e:	1a54      	subs	r4, r2, r1
 8022f20:	2c00      	cmp	r4, #0
 8022f22:	f77f aed9 	ble.w	8022cd8 <_vfiprintf_r+0x5f4>
 8022f26:	4d39      	ldr	r5, [pc, #228]	; (802300c <_vfiprintf_r+0x928>)
 8022f28:	2610      	movs	r6, #16
 8022f2a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8022f2e:	2c10      	cmp	r4, #16
 8022f30:	f102 0201 	add.w	r2, r2, #1
 8022f34:	601d      	str	r5, [r3, #0]
 8022f36:	dc1d      	bgt.n	8022f74 <_vfiprintf_r+0x890>
 8022f38:	605c      	str	r4, [r3, #4]
 8022f3a:	2a07      	cmp	r2, #7
 8022f3c:	440c      	add	r4, r1
 8022f3e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8022f42:	f77f aec9 	ble.w	8022cd8 <_vfiprintf_r+0x5f4>
 8022f46:	aa0c      	add	r2, sp, #48	; 0x30
 8022f48:	4639      	mov	r1, r7
 8022f4a:	4648      	mov	r0, r9
 8022f4c:	f7ff fb98 	bl	8022680 <__sprint_r>
 8022f50:	2800      	cmp	r0, #0
 8022f52:	f43f aec1 	beq.w	8022cd8 <_vfiprintf_r+0x5f4>
 8022f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022f58:	07d9      	lsls	r1, r3, #31
 8022f5a:	d405      	bmi.n	8022f68 <_vfiprintf_r+0x884>
 8022f5c:	89bb      	ldrh	r3, [r7, #12]
 8022f5e:	059a      	lsls	r2, r3, #22
 8022f60:	d402      	bmi.n	8022f68 <_vfiprintf_r+0x884>
 8022f62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8022f64:	f7fe fd11 	bl	802198a <__retarget_lock_release_recursive>
 8022f68:	89bb      	ldrh	r3, [r7, #12]
 8022f6a:	065b      	lsls	r3, r3, #25
 8022f6c:	f57f abed 	bpl.w	802274a <_vfiprintf_r+0x66>
 8022f70:	f7ff bbe8 	b.w	8022744 <_vfiprintf_r+0x60>
 8022f74:	3110      	adds	r1, #16
 8022f76:	2a07      	cmp	r2, #7
 8022f78:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8022f7c:	605e      	str	r6, [r3, #4]
 8022f7e:	dc02      	bgt.n	8022f86 <_vfiprintf_r+0x8a2>
 8022f80:	3308      	adds	r3, #8
 8022f82:	3c10      	subs	r4, #16
 8022f84:	e7d1      	b.n	8022f2a <_vfiprintf_r+0x846>
 8022f86:	aa0c      	add	r2, sp, #48	; 0x30
 8022f88:	4639      	mov	r1, r7
 8022f8a:	4648      	mov	r0, r9
 8022f8c:	f7ff fb78 	bl	8022680 <__sprint_r>
 8022f90:	2800      	cmp	r0, #0
 8022f92:	d1e0      	bne.n	8022f56 <_vfiprintf_r+0x872>
 8022f94:	ab0f      	add	r3, sp, #60	; 0x3c
 8022f96:	e7f4      	b.n	8022f82 <_vfiprintf_r+0x89e>
 8022f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022f9a:	b913      	cbnz	r3, 8022fa2 <_vfiprintf_r+0x8be>
 8022f9c:	2300      	movs	r3, #0
 8022f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8022fa0:	e7d9      	b.n	8022f56 <_vfiprintf_r+0x872>
 8022fa2:	aa0c      	add	r2, sp, #48	; 0x30
 8022fa4:	4639      	mov	r1, r7
 8022fa6:	4648      	mov	r0, r9
 8022fa8:	f7ff fb6a 	bl	8022680 <__sprint_r>
 8022fac:	2800      	cmp	r0, #0
 8022fae:	d0f5      	beq.n	8022f9c <_vfiprintf_r+0x8b8>
 8022fb0:	e7d1      	b.n	8022f56 <_vfiprintf_r+0x872>
 8022fb2:	ea54 0205 	orrs.w	r2, r4, r5
 8022fb6:	f8cd a010 	str.w	sl, [sp, #16]
 8022fba:	f43f ada3 	beq.w	8022b04 <_vfiprintf_r+0x420>
 8022fbe:	2b01      	cmp	r3, #1
 8022fc0:	f43f aeda 	beq.w	8022d78 <_vfiprintf_r+0x694>
 8022fc4:	2b02      	cmp	r3, #2
 8022fc6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022fca:	f43f af26 	beq.w	8022e1a <_vfiprintf_r+0x736>
 8022fce:	f004 0307 	and.w	r3, r4, #7
 8022fd2:	08e4      	lsrs	r4, r4, #3
 8022fd4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8022fd8:	08ed      	lsrs	r5, r5, #3
 8022fda:	3330      	adds	r3, #48	; 0x30
 8022fdc:	ea54 0105 	orrs.w	r1, r4, r5
 8022fe0:	4642      	mov	r2, r8
 8022fe2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022fe6:	d1f2      	bne.n	8022fce <_vfiprintf_r+0x8ea>
 8022fe8:	9904      	ldr	r1, [sp, #16]
 8022fea:	07c8      	lsls	r0, r1, #31
 8022fec:	d506      	bpl.n	8022ffc <_vfiprintf_r+0x918>
 8022fee:	2b30      	cmp	r3, #48	; 0x30
 8022ff0:	d004      	beq.n	8022ffc <_vfiprintf_r+0x918>
 8022ff2:	2330      	movs	r3, #48	; 0x30
 8022ff4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8022ff8:	f1a2 0802 	sub.w	r8, r2, #2
 8022ffc:	ab38      	add	r3, sp, #224	; 0xe0
 8022ffe:	eba3 0308 	sub.w	r3, r3, r8
 8023002:	9d00      	ldr	r5, [sp, #0]
 8023004:	f8dd a010 	ldr.w	sl, [sp, #16]
 8023008:	9300      	str	r3, [sp, #0]
 802300a:	e5b8      	b.n	8022b7e <_vfiprintf_r+0x49a>
 802300c:	080260ca 	.word	0x080260ca

08023010 <__sbprintf>:
 8023010:	b570      	push	{r4, r5, r6, lr}
 8023012:	460c      	mov	r4, r1
 8023014:	8989      	ldrh	r1, [r1, #12]
 8023016:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 802301a:	f021 0102 	bic.w	r1, r1, #2
 802301e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8023022:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8023024:	911b      	str	r1, [sp, #108]	; 0x6c
 8023026:	89e1      	ldrh	r1, [r4, #14]
 8023028:	f8ad 1016 	strh.w	r1, [sp, #22]
 802302c:	69e1      	ldr	r1, [r4, #28]
 802302e:	9109      	str	r1, [sp, #36]	; 0x24
 8023030:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023032:	910b      	str	r1, [sp, #44]	; 0x2c
 8023034:	a91c      	add	r1, sp, #112	; 0x70
 8023036:	9102      	str	r1, [sp, #8]
 8023038:	9106      	str	r1, [sp, #24]
 802303a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802303e:	4606      	mov	r6, r0
 8023040:	9104      	str	r1, [sp, #16]
 8023042:	9107      	str	r1, [sp, #28]
 8023044:	a818      	add	r0, sp, #96	; 0x60
 8023046:	2100      	movs	r1, #0
 8023048:	e9cd 3200 	strd	r3, r2, [sp]
 802304c:	9108      	str	r1, [sp, #32]
 802304e:	f7fe fc99 	bl	8021984 <__retarget_lock_init_recursive>
 8023052:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023056:	a902      	add	r1, sp, #8
 8023058:	4630      	mov	r0, r6
 802305a:	f7ff fb43 	bl	80226e4 <_vfiprintf_r>
 802305e:	1e05      	subs	r5, r0, #0
 8023060:	db07      	blt.n	8023072 <__sbprintf+0x62>
 8023062:	a902      	add	r1, sp, #8
 8023064:	4630      	mov	r0, r6
 8023066:	f000 f90f 	bl	8023288 <_fflush_r>
 802306a:	2800      	cmp	r0, #0
 802306c:	bf18      	it	ne
 802306e:	f04f 35ff 	movne.w	r5, #4294967295
 8023072:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8023076:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023078:	065b      	lsls	r3, r3, #25
 802307a:	bf42      	ittt	mi
 802307c:	89a3      	ldrhmi	r3, [r4, #12]
 802307e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8023082:	81a3      	strhmi	r3, [r4, #12]
 8023084:	f7fe fc7f 	bl	8021986 <__retarget_lock_close_recursive>
 8023088:	4628      	mov	r0, r5
 802308a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 802308e:	bd70      	pop	{r4, r5, r6, pc}

08023090 <__ascii_wctomb>:
 8023090:	b149      	cbz	r1, 80230a6 <__ascii_wctomb+0x16>
 8023092:	2aff      	cmp	r2, #255	; 0xff
 8023094:	bf85      	ittet	hi
 8023096:	238a      	movhi	r3, #138	; 0x8a
 8023098:	6003      	strhi	r3, [r0, #0]
 802309a:	700a      	strbls	r2, [r1, #0]
 802309c:	f04f 30ff 	movhi.w	r0, #4294967295
 80230a0:	bf98      	it	ls
 80230a2:	2001      	movls	r0, #1
 80230a4:	4770      	bx	lr
 80230a6:	4608      	mov	r0, r1
 80230a8:	4770      	bx	lr
	...

080230ac <__swsetup_r>:
 80230ac:	b538      	push	{r3, r4, r5, lr}
 80230ae:	4b2a      	ldr	r3, [pc, #168]	; (8023158 <__swsetup_r+0xac>)
 80230b0:	4605      	mov	r5, r0
 80230b2:	6818      	ldr	r0, [r3, #0]
 80230b4:	460c      	mov	r4, r1
 80230b6:	b118      	cbz	r0, 80230c0 <__swsetup_r+0x14>
 80230b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80230ba:	b90b      	cbnz	r3, 80230c0 <__swsetup_r+0x14>
 80230bc:	f000 f950 	bl	8023360 <__sinit>
 80230c0:	89a3      	ldrh	r3, [r4, #12]
 80230c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80230c6:	0718      	lsls	r0, r3, #28
 80230c8:	d422      	bmi.n	8023110 <__swsetup_r+0x64>
 80230ca:	06d9      	lsls	r1, r3, #27
 80230cc:	d407      	bmi.n	80230de <__swsetup_r+0x32>
 80230ce:	2309      	movs	r3, #9
 80230d0:	602b      	str	r3, [r5, #0]
 80230d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80230d6:	81a3      	strh	r3, [r4, #12]
 80230d8:	f04f 30ff 	mov.w	r0, #4294967295
 80230dc:	e034      	b.n	8023148 <__swsetup_r+0x9c>
 80230de:	0758      	lsls	r0, r3, #29
 80230e0:	d512      	bpl.n	8023108 <__swsetup_r+0x5c>
 80230e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80230e4:	b141      	cbz	r1, 80230f8 <__swsetup_r+0x4c>
 80230e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80230ea:	4299      	cmp	r1, r3
 80230ec:	d002      	beq.n	80230f4 <__swsetup_r+0x48>
 80230ee:	4628      	mov	r0, r5
 80230f0:	f7fe fb84 	bl	80217fc <_free_r>
 80230f4:	2300      	movs	r3, #0
 80230f6:	6323      	str	r3, [r4, #48]	; 0x30
 80230f8:	89a3      	ldrh	r3, [r4, #12]
 80230fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80230fe:	81a3      	strh	r3, [r4, #12]
 8023100:	2300      	movs	r3, #0
 8023102:	6063      	str	r3, [r4, #4]
 8023104:	6923      	ldr	r3, [r4, #16]
 8023106:	6023      	str	r3, [r4, #0]
 8023108:	89a3      	ldrh	r3, [r4, #12]
 802310a:	f043 0308 	orr.w	r3, r3, #8
 802310e:	81a3      	strh	r3, [r4, #12]
 8023110:	6923      	ldr	r3, [r4, #16]
 8023112:	b94b      	cbnz	r3, 8023128 <__swsetup_r+0x7c>
 8023114:	89a3      	ldrh	r3, [r4, #12]
 8023116:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802311a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802311e:	d003      	beq.n	8023128 <__swsetup_r+0x7c>
 8023120:	4621      	mov	r1, r4
 8023122:	4628      	mov	r0, r5
 8023124:	f000 fb46 	bl	80237b4 <__smakebuf_r>
 8023128:	89a0      	ldrh	r0, [r4, #12]
 802312a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802312e:	f010 0301 	ands.w	r3, r0, #1
 8023132:	d00a      	beq.n	802314a <__swsetup_r+0x9e>
 8023134:	2300      	movs	r3, #0
 8023136:	60a3      	str	r3, [r4, #8]
 8023138:	6963      	ldr	r3, [r4, #20]
 802313a:	425b      	negs	r3, r3
 802313c:	61a3      	str	r3, [r4, #24]
 802313e:	6923      	ldr	r3, [r4, #16]
 8023140:	b943      	cbnz	r3, 8023154 <__swsetup_r+0xa8>
 8023142:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023146:	d1c4      	bne.n	80230d2 <__swsetup_r+0x26>
 8023148:	bd38      	pop	{r3, r4, r5, pc}
 802314a:	0781      	lsls	r1, r0, #30
 802314c:	bf58      	it	pl
 802314e:	6963      	ldrpl	r3, [r4, #20]
 8023150:	60a3      	str	r3, [r4, #8]
 8023152:	e7f4      	b.n	802313e <__swsetup_r+0x92>
 8023154:	2000      	movs	r0, #0
 8023156:	e7f7      	b.n	8023148 <__swsetup_r+0x9c>
 8023158:	20000144 	.word	0x20000144

0802315c <abort>:
 802315c:	b508      	push	{r3, lr}
 802315e:	2006      	movs	r0, #6
 8023160:	f000 fb92 	bl	8023888 <raise>
 8023164:	2001      	movs	r0, #1
 8023166:	f7e8 fd37 	bl	800bbd8 <_exit>
	...

0802316c <__sflush_r>:
 802316c:	898b      	ldrh	r3, [r1, #12]
 802316e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023176:	4605      	mov	r5, r0
 8023178:	0718      	lsls	r0, r3, #28
 802317a:	460c      	mov	r4, r1
 802317c:	d45f      	bmi.n	802323e <__sflush_r+0xd2>
 802317e:	684b      	ldr	r3, [r1, #4]
 8023180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023184:	2b00      	cmp	r3, #0
 8023186:	818a      	strh	r2, [r1, #12]
 8023188:	dc05      	bgt.n	8023196 <__sflush_r+0x2a>
 802318a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 802318c:	2b00      	cmp	r3, #0
 802318e:	dc02      	bgt.n	8023196 <__sflush_r+0x2a>
 8023190:	2000      	movs	r0, #0
 8023192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023198:	2e00      	cmp	r6, #0
 802319a:	d0f9      	beq.n	8023190 <__sflush_r+0x24>
 802319c:	2300      	movs	r3, #0
 802319e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80231a2:	682f      	ldr	r7, [r5, #0]
 80231a4:	602b      	str	r3, [r5, #0]
 80231a6:	d036      	beq.n	8023216 <__sflush_r+0xaa>
 80231a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80231aa:	89a3      	ldrh	r3, [r4, #12]
 80231ac:	075a      	lsls	r2, r3, #29
 80231ae:	d505      	bpl.n	80231bc <__sflush_r+0x50>
 80231b0:	6863      	ldr	r3, [r4, #4]
 80231b2:	1ac0      	subs	r0, r0, r3
 80231b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80231b6:	b10b      	cbz	r3, 80231bc <__sflush_r+0x50>
 80231b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80231ba:	1ac0      	subs	r0, r0, r3
 80231bc:	2300      	movs	r3, #0
 80231be:	4602      	mov	r2, r0
 80231c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80231c2:	69e1      	ldr	r1, [r4, #28]
 80231c4:	4628      	mov	r0, r5
 80231c6:	47b0      	blx	r6
 80231c8:	1c43      	adds	r3, r0, #1
 80231ca:	89a3      	ldrh	r3, [r4, #12]
 80231cc:	d106      	bne.n	80231dc <__sflush_r+0x70>
 80231ce:	6829      	ldr	r1, [r5, #0]
 80231d0:	291d      	cmp	r1, #29
 80231d2:	d830      	bhi.n	8023236 <__sflush_r+0xca>
 80231d4:	4a2b      	ldr	r2, [pc, #172]	; (8023284 <__sflush_r+0x118>)
 80231d6:	40ca      	lsrs	r2, r1
 80231d8:	07d6      	lsls	r6, r2, #31
 80231da:	d52c      	bpl.n	8023236 <__sflush_r+0xca>
 80231dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80231e0:	b21b      	sxth	r3, r3
 80231e2:	2200      	movs	r2, #0
 80231e4:	6062      	str	r2, [r4, #4]
 80231e6:	04d9      	lsls	r1, r3, #19
 80231e8:	6922      	ldr	r2, [r4, #16]
 80231ea:	81a3      	strh	r3, [r4, #12]
 80231ec:	6022      	str	r2, [r4, #0]
 80231ee:	d504      	bpl.n	80231fa <__sflush_r+0x8e>
 80231f0:	1c42      	adds	r2, r0, #1
 80231f2:	d101      	bne.n	80231f8 <__sflush_r+0x8c>
 80231f4:	682b      	ldr	r3, [r5, #0]
 80231f6:	b903      	cbnz	r3, 80231fa <__sflush_r+0x8e>
 80231f8:	6520      	str	r0, [r4, #80]	; 0x50
 80231fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80231fc:	602f      	str	r7, [r5, #0]
 80231fe:	2900      	cmp	r1, #0
 8023200:	d0c6      	beq.n	8023190 <__sflush_r+0x24>
 8023202:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8023206:	4299      	cmp	r1, r3
 8023208:	d002      	beq.n	8023210 <__sflush_r+0xa4>
 802320a:	4628      	mov	r0, r5
 802320c:	f7fe faf6 	bl	80217fc <_free_r>
 8023210:	2000      	movs	r0, #0
 8023212:	6320      	str	r0, [r4, #48]	; 0x30
 8023214:	e7bd      	b.n	8023192 <__sflush_r+0x26>
 8023216:	69e1      	ldr	r1, [r4, #28]
 8023218:	2301      	movs	r3, #1
 802321a:	4628      	mov	r0, r5
 802321c:	47b0      	blx	r6
 802321e:	1c41      	adds	r1, r0, #1
 8023220:	d1c3      	bne.n	80231aa <__sflush_r+0x3e>
 8023222:	682b      	ldr	r3, [r5, #0]
 8023224:	2b00      	cmp	r3, #0
 8023226:	d0c0      	beq.n	80231aa <__sflush_r+0x3e>
 8023228:	2b1d      	cmp	r3, #29
 802322a:	d001      	beq.n	8023230 <__sflush_r+0xc4>
 802322c:	2b16      	cmp	r3, #22
 802322e:	d101      	bne.n	8023234 <__sflush_r+0xc8>
 8023230:	602f      	str	r7, [r5, #0]
 8023232:	e7ad      	b.n	8023190 <__sflush_r+0x24>
 8023234:	89a3      	ldrh	r3, [r4, #12]
 8023236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802323a:	81a3      	strh	r3, [r4, #12]
 802323c:	e7a9      	b.n	8023192 <__sflush_r+0x26>
 802323e:	690f      	ldr	r7, [r1, #16]
 8023240:	2f00      	cmp	r7, #0
 8023242:	d0a5      	beq.n	8023190 <__sflush_r+0x24>
 8023244:	079b      	lsls	r3, r3, #30
 8023246:	680e      	ldr	r6, [r1, #0]
 8023248:	bf08      	it	eq
 802324a:	694b      	ldreq	r3, [r1, #20]
 802324c:	600f      	str	r7, [r1, #0]
 802324e:	bf18      	it	ne
 8023250:	2300      	movne	r3, #0
 8023252:	eba6 0807 	sub.w	r8, r6, r7
 8023256:	608b      	str	r3, [r1, #8]
 8023258:	f1b8 0f00 	cmp.w	r8, #0
 802325c:	dd98      	ble.n	8023190 <__sflush_r+0x24>
 802325e:	69e1      	ldr	r1, [r4, #28]
 8023260:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023262:	4643      	mov	r3, r8
 8023264:	463a      	mov	r2, r7
 8023266:	4628      	mov	r0, r5
 8023268:	47b0      	blx	r6
 802326a:	2800      	cmp	r0, #0
 802326c:	dc06      	bgt.n	802327c <__sflush_r+0x110>
 802326e:	89a3      	ldrh	r3, [r4, #12]
 8023270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023274:	81a3      	strh	r3, [r4, #12]
 8023276:	f04f 30ff 	mov.w	r0, #4294967295
 802327a:	e78a      	b.n	8023192 <__sflush_r+0x26>
 802327c:	4407      	add	r7, r0
 802327e:	eba8 0800 	sub.w	r8, r8, r0
 8023282:	e7e9      	b.n	8023258 <__sflush_r+0xec>
 8023284:	20400001 	.word	0x20400001

08023288 <_fflush_r>:
 8023288:	b538      	push	{r3, r4, r5, lr}
 802328a:	460c      	mov	r4, r1
 802328c:	4605      	mov	r5, r0
 802328e:	b118      	cbz	r0, 8023298 <_fflush_r+0x10>
 8023290:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023292:	b90b      	cbnz	r3, 8023298 <_fflush_r+0x10>
 8023294:	f000 f864 	bl	8023360 <__sinit>
 8023298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802329c:	b1bb      	cbz	r3, 80232ce <_fflush_r+0x46>
 802329e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80232a0:	07d0      	lsls	r0, r2, #31
 80232a2:	d404      	bmi.n	80232ae <_fflush_r+0x26>
 80232a4:	0599      	lsls	r1, r3, #22
 80232a6:	d402      	bmi.n	80232ae <_fflush_r+0x26>
 80232a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80232aa:	f7fe fb6d 	bl	8021988 <__retarget_lock_acquire_recursive>
 80232ae:	4628      	mov	r0, r5
 80232b0:	4621      	mov	r1, r4
 80232b2:	f7ff ff5b 	bl	802316c <__sflush_r>
 80232b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80232b8:	07da      	lsls	r2, r3, #31
 80232ba:	4605      	mov	r5, r0
 80232bc:	d405      	bmi.n	80232ca <_fflush_r+0x42>
 80232be:	89a3      	ldrh	r3, [r4, #12]
 80232c0:	059b      	lsls	r3, r3, #22
 80232c2:	d402      	bmi.n	80232ca <_fflush_r+0x42>
 80232c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80232c6:	f7fe fb60 	bl	802198a <__retarget_lock_release_recursive>
 80232ca:	4628      	mov	r0, r5
 80232cc:	bd38      	pop	{r3, r4, r5, pc}
 80232ce:	461d      	mov	r5, r3
 80232d0:	e7fb      	b.n	80232ca <_fflush_r+0x42>
	...

080232d4 <std>:
 80232d4:	2300      	movs	r3, #0
 80232d6:	b510      	push	{r4, lr}
 80232d8:	4604      	mov	r4, r0
 80232da:	e9c0 3300 	strd	r3, r3, [r0]
 80232de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80232e2:	6083      	str	r3, [r0, #8]
 80232e4:	8181      	strh	r1, [r0, #12]
 80232e6:	6643      	str	r3, [r0, #100]	; 0x64
 80232e8:	81c2      	strh	r2, [r0, #14]
 80232ea:	6183      	str	r3, [r0, #24]
 80232ec:	4619      	mov	r1, r3
 80232ee:	2208      	movs	r2, #8
 80232f0:	305c      	adds	r0, #92	; 0x5c
 80232f2:	f7fc f805 	bl	801f300 <memset>
 80232f6:	4b07      	ldr	r3, [pc, #28]	; (8023314 <std+0x40>)
 80232f8:	6223      	str	r3, [r4, #32]
 80232fa:	4b07      	ldr	r3, [pc, #28]	; (8023318 <std+0x44>)
 80232fc:	6263      	str	r3, [r4, #36]	; 0x24
 80232fe:	4b07      	ldr	r3, [pc, #28]	; (802331c <std+0x48>)
 8023300:	62a3      	str	r3, [r4, #40]	; 0x28
 8023302:	4b07      	ldr	r3, [pc, #28]	; (8023320 <std+0x4c>)
 8023304:	61e4      	str	r4, [r4, #28]
 8023306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023308:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802330c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023310:	f7fe bb38 	b.w	8021984 <__retarget_lock_init_recursive>
 8023314:	080238c1 	.word	0x080238c1
 8023318:	080238e3 	.word	0x080238e3
 802331c:	0802391b 	.word	0x0802391b
 8023320:	0802393f 	.word	0x0802393f

08023324 <_cleanup_r>:
 8023324:	4901      	ldr	r1, [pc, #4]	; (802332c <_cleanup_r+0x8>)
 8023326:	f000 b9f9 	b.w	802371c <_fwalk_reent>
 802332a:	bf00      	nop
 802332c:	08023a49 	.word	0x08023a49

08023330 <__sfp_lock_acquire>:
 8023330:	4801      	ldr	r0, [pc, #4]	; (8023338 <__sfp_lock_acquire+0x8>)
 8023332:	f7fe bb29 	b.w	8021988 <__retarget_lock_acquire_recursive>
 8023336:	bf00      	nop
 8023338:	200038a2 	.word	0x200038a2

0802333c <__sfp_lock_release>:
 802333c:	4801      	ldr	r0, [pc, #4]	; (8023344 <__sfp_lock_release+0x8>)
 802333e:	f7fe bb24 	b.w	802198a <__retarget_lock_release_recursive>
 8023342:	bf00      	nop
 8023344:	200038a2 	.word	0x200038a2

08023348 <__sinit_lock_acquire>:
 8023348:	4801      	ldr	r0, [pc, #4]	; (8023350 <__sinit_lock_acquire+0x8>)
 802334a:	f7fe bb1d 	b.w	8021988 <__retarget_lock_acquire_recursive>
 802334e:	bf00      	nop
 8023350:	200038a3 	.word	0x200038a3

08023354 <__sinit_lock_release>:
 8023354:	4801      	ldr	r0, [pc, #4]	; (802335c <__sinit_lock_release+0x8>)
 8023356:	f7fe bb18 	b.w	802198a <__retarget_lock_release_recursive>
 802335a:	bf00      	nop
 802335c:	200038a3 	.word	0x200038a3

08023360 <__sinit>:
 8023360:	b510      	push	{r4, lr}
 8023362:	4604      	mov	r4, r0
 8023364:	f7ff fff0 	bl	8023348 <__sinit_lock_acquire>
 8023368:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802336a:	b11a      	cbz	r2, 8023374 <__sinit+0x14>
 802336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023370:	f7ff bff0 	b.w	8023354 <__sinit_lock_release>
 8023374:	4b0d      	ldr	r3, [pc, #52]	; (80233ac <__sinit+0x4c>)
 8023376:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023378:	2303      	movs	r3, #3
 802337a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 802337e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8023382:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8023386:	6860      	ldr	r0, [r4, #4]
 8023388:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 802338c:	2104      	movs	r1, #4
 802338e:	f7ff ffa1 	bl	80232d4 <std>
 8023392:	68a0      	ldr	r0, [r4, #8]
 8023394:	2201      	movs	r2, #1
 8023396:	2109      	movs	r1, #9
 8023398:	f7ff ff9c 	bl	80232d4 <std>
 802339c:	68e0      	ldr	r0, [r4, #12]
 802339e:	2202      	movs	r2, #2
 80233a0:	2112      	movs	r1, #18
 80233a2:	f7ff ff97 	bl	80232d4 <std>
 80233a6:	2301      	movs	r3, #1
 80233a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80233aa:	e7df      	b.n	802336c <__sinit+0xc>
 80233ac:	08023325 	.word	0x08023325

080233b0 <__fputwc>:
 80233b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80233b4:	4680      	mov	r8, r0
 80233b6:	460e      	mov	r6, r1
 80233b8:	4615      	mov	r5, r2
 80233ba:	f7fe ff8b 	bl	80222d4 <__locale_mb_cur_max>
 80233be:	2801      	cmp	r0, #1
 80233c0:	d11c      	bne.n	80233fc <__fputwc+0x4c>
 80233c2:	1e73      	subs	r3, r6, #1
 80233c4:	2bfe      	cmp	r3, #254	; 0xfe
 80233c6:	d819      	bhi.n	80233fc <__fputwc+0x4c>
 80233c8:	f88d 6004 	strb.w	r6, [sp, #4]
 80233cc:	4604      	mov	r4, r0
 80233ce:	2700      	movs	r7, #0
 80233d0:	f10d 0904 	add.w	r9, sp, #4
 80233d4:	42a7      	cmp	r7, r4
 80233d6:	d020      	beq.n	802341a <__fputwc+0x6a>
 80233d8:	68ab      	ldr	r3, [r5, #8]
 80233da:	f817 1009 	ldrb.w	r1, [r7, r9]
 80233de:	3b01      	subs	r3, #1
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	60ab      	str	r3, [r5, #8]
 80233e4:	da04      	bge.n	80233f0 <__fputwc+0x40>
 80233e6:	69aa      	ldr	r2, [r5, #24]
 80233e8:	4293      	cmp	r3, r2
 80233ea:	db1a      	blt.n	8023422 <__fputwc+0x72>
 80233ec:	290a      	cmp	r1, #10
 80233ee:	d018      	beq.n	8023422 <__fputwc+0x72>
 80233f0:	682b      	ldr	r3, [r5, #0]
 80233f2:	1c5a      	adds	r2, r3, #1
 80233f4:	602a      	str	r2, [r5, #0]
 80233f6:	7019      	strb	r1, [r3, #0]
 80233f8:	3701      	adds	r7, #1
 80233fa:	e7eb      	b.n	80233d4 <__fputwc+0x24>
 80233fc:	a901      	add	r1, sp, #4
 80233fe:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8023402:	4632      	mov	r2, r6
 8023404:	4640      	mov	r0, r8
 8023406:	f000 fae7 	bl	80239d8 <_wcrtomb_r>
 802340a:	1c41      	adds	r1, r0, #1
 802340c:	4604      	mov	r4, r0
 802340e:	d1de      	bne.n	80233ce <__fputwc+0x1e>
 8023410:	89ab      	ldrh	r3, [r5, #12]
 8023412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023416:	81ab      	strh	r3, [r5, #12]
 8023418:	4606      	mov	r6, r0
 802341a:	4630      	mov	r0, r6
 802341c:	b003      	add	sp, #12
 802341e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023422:	462a      	mov	r2, r5
 8023424:	4640      	mov	r0, r8
 8023426:	f000 fa8e 	bl	8023946 <__swbuf_r>
 802342a:	1c42      	adds	r2, r0, #1
 802342c:	d1e4      	bne.n	80233f8 <__fputwc+0x48>
 802342e:	4606      	mov	r6, r0
 8023430:	e7f3      	b.n	802341a <__fputwc+0x6a>

08023432 <_fputwc_r>:
 8023432:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8023434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023436:	4614      	mov	r4, r2
 8023438:	07da      	lsls	r2, r3, #31
 802343a:	4605      	mov	r5, r0
 802343c:	d407      	bmi.n	802344e <_fputwc_r+0x1c>
 802343e:	89a3      	ldrh	r3, [r4, #12]
 8023440:	059b      	lsls	r3, r3, #22
 8023442:	d404      	bmi.n	802344e <_fputwc_r+0x1c>
 8023444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023446:	9101      	str	r1, [sp, #4]
 8023448:	f7fe fa9e 	bl	8021988 <__retarget_lock_acquire_recursive>
 802344c:	9901      	ldr	r1, [sp, #4]
 802344e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023452:	0498      	lsls	r0, r3, #18
 8023454:	d406      	bmi.n	8023464 <_fputwc_r+0x32>
 8023456:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802345a:	81a3      	strh	r3, [r4, #12]
 802345c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802345e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8023462:	6663      	str	r3, [r4, #100]	; 0x64
 8023464:	4622      	mov	r2, r4
 8023466:	4628      	mov	r0, r5
 8023468:	f7ff ffa2 	bl	80233b0 <__fputwc>
 802346c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802346e:	07da      	lsls	r2, r3, #31
 8023470:	4605      	mov	r5, r0
 8023472:	d405      	bmi.n	8023480 <_fputwc_r+0x4e>
 8023474:	89a3      	ldrh	r3, [r4, #12]
 8023476:	059b      	lsls	r3, r3, #22
 8023478:	d402      	bmi.n	8023480 <_fputwc_r+0x4e>
 802347a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802347c:	f7fe fa85 	bl	802198a <__retarget_lock_release_recursive>
 8023480:	4628      	mov	r0, r5
 8023482:	b003      	add	sp, #12
 8023484:	bd30      	pop	{r4, r5, pc}
	...

08023488 <__sfvwrite_r>:
 8023488:	6893      	ldr	r3, [r2, #8]
 802348a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802348e:	4606      	mov	r6, r0
 8023490:	460c      	mov	r4, r1
 8023492:	4690      	mov	r8, r2
 8023494:	b91b      	cbnz	r3, 802349e <__sfvwrite_r+0x16>
 8023496:	2000      	movs	r0, #0
 8023498:	b003      	add	sp, #12
 802349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802349e:	898b      	ldrh	r3, [r1, #12]
 80234a0:	0718      	lsls	r0, r3, #28
 80234a2:	d550      	bpl.n	8023546 <__sfvwrite_r+0xbe>
 80234a4:	690b      	ldr	r3, [r1, #16]
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d04d      	beq.n	8023546 <__sfvwrite_r+0xbe>
 80234aa:	89a3      	ldrh	r3, [r4, #12]
 80234ac:	f8d8 7000 	ldr.w	r7, [r8]
 80234b0:	f013 0902 	ands.w	r9, r3, #2
 80234b4:	d16c      	bne.n	8023590 <__sfvwrite_r+0x108>
 80234b6:	f013 0301 	ands.w	r3, r3, #1
 80234ba:	f000 809c 	beq.w	80235f6 <__sfvwrite_r+0x16e>
 80234be:	4648      	mov	r0, r9
 80234c0:	46ca      	mov	sl, r9
 80234c2:	46cb      	mov	fp, r9
 80234c4:	f1bb 0f00 	cmp.w	fp, #0
 80234c8:	f000 8103 	beq.w	80236d2 <__sfvwrite_r+0x24a>
 80234cc:	b950      	cbnz	r0, 80234e4 <__sfvwrite_r+0x5c>
 80234ce:	465a      	mov	r2, fp
 80234d0:	210a      	movs	r1, #10
 80234d2:	4650      	mov	r0, sl
 80234d4:	f7dc fea4 	bl	8000220 <memchr>
 80234d8:	2800      	cmp	r0, #0
 80234da:	f000 80ff 	beq.w	80236dc <__sfvwrite_r+0x254>
 80234de:	3001      	adds	r0, #1
 80234e0:	eba0 090a 	sub.w	r9, r0, sl
 80234e4:	6820      	ldr	r0, [r4, #0]
 80234e6:	6921      	ldr	r1, [r4, #16]
 80234e8:	6963      	ldr	r3, [r4, #20]
 80234ea:	45d9      	cmp	r9, fp
 80234ec:	464a      	mov	r2, r9
 80234ee:	bf28      	it	cs
 80234f0:	465a      	movcs	r2, fp
 80234f2:	4288      	cmp	r0, r1
 80234f4:	f240 80f5 	bls.w	80236e2 <__sfvwrite_r+0x25a>
 80234f8:	68a5      	ldr	r5, [r4, #8]
 80234fa:	441d      	add	r5, r3
 80234fc:	42aa      	cmp	r2, r5
 80234fe:	f340 80f0 	ble.w	80236e2 <__sfvwrite_r+0x25a>
 8023502:	4651      	mov	r1, sl
 8023504:	462a      	mov	r2, r5
 8023506:	f7fe fefd 	bl	8022304 <memmove>
 802350a:	6823      	ldr	r3, [r4, #0]
 802350c:	442b      	add	r3, r5
 802350e:	6023      	str	r3, [r4, #0]
 8023510:	4621      	mov	r1, r4
 8023512:	4630      	mov	r0, r6
 8023514:	f7ff feb8 	bl	8023288 <_fflush_r>
 8023518:	2800      	cmp	r0, #0
 802351a:	d167      	bne.n	80235ec <__sfvwrite_r+0x164>
 802351c:	ebb9 0905 	subs.w	r9, r9, r5
 8023520:	f040 80f7 	bne.w	8023712 <__sfvwrite_r+0x28a>
 8023524:	4621      	mov	r1, r4
 8023526:	4630      	mov	r0, r6
 8023528:	f7ff feae 	bl	8023288 <_fflush_r>
 802352c:	2800      	cmp	r0, #0
 802352e:	d15d      	bne.n	80235ec <__sfvwrite_r+0x164>
 8023530:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8023534:	44aa      	add	sl, r5
 8023536:	ebab 0b05 	sub.w	fp, fp, r5
 802353a:	1b55      	subs	r5, r2, r5
 802353c:	f8c8 5008 	str.w	r5, [r8, #8]
 8023540:	2d00      	cmp	r5, #0
 8023542:	d1bf      	bne.n	80234c4 <__sfvwrite_r+0x3c>
 8023544:	e7a7      	b.n	8023496 <__sfvwrite_r+0xe>
 8023546:	4621      	mov	r1, r4
 8023548:	4630      	mov	r0, r6
 802354a:	f7ff fdaf 	bl	80230ac <__swsetup_r>
 802354e:	2800      	cmp	r0, #0
 8023550:	d0ab      	beq.n	80234aa <__sfvwrite_r+0x22>
 8023552:	f04f 30ff 	mov.w	r0, #4294967295
 8023556:	e79f      	b.n	8023498 <__sfvwrite_r+0x10>
 8023558:	e9d7 b900 	ldrd	fp, r9, [r7]
 802355c:	3708      	adds	r7, #8
 802355e:	f1b9 0f00 	cmp.w	r9, #0
 8023562:	d0f9      	beq.n	8023558 <__sfvwrite_r+0xd0>
 8023564:	45d1      	cmp	r9, sl
 8023566:	464b      	mov	r3, r9
 8023568:	69e1      	ldr	r1, [r4, #28]
 802356a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802356c:	bf28      	it	cs
 802356e:	4653      	movcs	r3, sl
 8023570:	465a      	mov	r2, fp
 8023572:	4630      	mov	r0, r6
 8023574:	47a8      	blx	r5
 8023576:	2800      	cmp	r0, #0
 8023578:	dd38      	ble.n	80235ec <__sfvwrite_r+0x164>
 802357a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802357e:	4483      	add	fp, r0
 8023580:	eba9 0900 	sub.w	r9, r9, r0
 8023584:	1a18      	subs	r0, r3, r0
 8023586:	f8c8 0008 	str.w	r0, [r8, #8]
 802358a:	2800      	cmp	r0, #0
 802358c:	d1e7      	bne.n	802355e <__sfvwrite_r+0xd6>
 802358e:	e782      	b.n	8023496 <__sfvwrite_r+0xe>
 8023590:	f04f 0b00 	mov.w	fp, #0
 8023594:	f8df a180 	ldr.w	sl, [pc, #384]	; 8023718 <__sfvwrite_r+0x290>
 8023598:	46d9      	mov	r9, fp
 802359a:	e7e0      	b.n	802355e <__sfvwrite_r+0xd6>
 802359c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80235a0:	3708      	adds	r7, #8
 80235a2:	f1ba 0f00 	cmp.w	sl, #0
 80235a6:	d0f9      	beq.n	802359c <__sfvwrite_r+0x114>
 80235a8:	89a3      	ldrh	r3, [r4, #12]
 80235aa:	6820      	ldr	r0, [r4, #0]
 80235ac:	68a2      	ldr	r2, [r4, #8]
 80235ae:	0599      	lsls	r1, r3, #22
 80235b0:	d563      	bpl.n	802367a <__sfvwrite_r+0x1f2>
 80235b2:	4552      	cmp	r2, sl
 80235b4:	d836      	bhi.n	8023624 <__sfvwrite_r+0x19c>
 80235b6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80235ba:	d033      	beq.n	8023624 <__sfvwrite_r+0x19c>
 80235bc:	6921      	ldr	r1, [r4, #16]
 80235be:	6965      	ldr	r5, [r4, #20]
 80235c0:	eba0 0b01 	sub.w	fp, r0, r1
 80235c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80235c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80235cc:	f10b 0201 	add.w	r2, fp, #1
 80235d0:	106d      	asrs	r5, r5, #1
 80235d2:	4452      	add	r2, sl
 80235d4:	4295      	cmp	r5, r2
 80235d6:	bf38      	it	cc
 80235d8:	4615      	movcc	r5, r2
 80235da:	055b      	lsls	r3, r3, #21
 80235dc:	d53d      	bpl.n	802365a <__sfvwrite_r+0x1d2>
 80235de:	4629      	mov	r1, r5
 80235e0:	4630      	mov	r0, r6
 80235e2:	f7fb fc33 	bl	801ee4c <_malloc_r>
 80235e6:	b948      	cbnz	r0, 80235fc <__sfvwrite_r+0x174>
 80235e8:	230c      	movs	r3, #12
 80235ea:	6033      	str	r3, [r6, #0]
 80235ec:	89a3      	ldrh	r3, [r4, #12]
 80235ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80235f2:	81a3      	strh	r3, [r4, #12]
 80235f4:	e7ad      	b.n	8023552 <__sfvwrite_r+0xca>
 80235f6:	4699      	mov	r9, r3
 80235f8:	469a      	mov	sl, r3
 80235fa:	e7d2      	b.n	80235a2 <__sfvwrite_r+0x11a>
 80235fc:	465a      	mov	r2, fp
 80235fe:	6921      	ldr	r1, [r4, #16]
 8023600:	9001      	str	r0, [sp, #4]
 8023602:	f7fb fe6f 	bl	801f2e4 <memcpy>
 8023606:	89a2      	ldrh	r2, [r4, #12]
 8023608:	9b01      	ldr	r3, [sp, #4]
 802360a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802360e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8023612:	81a2      	strh	r2, [r4, #12]
 8023614:	6123      	str	r3, [r4, #16]
 8023616:	6165      	str	r5, [r4, #20]
 8023618:	445b      	add	r3, fp
 802361a:	eba5 050b 	sub.w	r5, r5, fp
 802361e:	6023      	str	r3, [r4, #0]
 8023620:	4652      	mov	r2, sl
 8023622:	60a5      	str	r5, [r4, #8]
 8023624:	4552      	cmp	r2, sl
 8023626:	bf28      	it	cs
 8023628:	4652      	movcs	r2, sl
 802362a:	6820      	ldr	r0, [r4, #0]
 802362c:	9201      	str	r2, [sp, #4]
 802362e:	4649      	mov	r1, r9
 8023630:	f7fe fe68 	bl	8022304 <memmove>
 8023634:	68a3      	ldr	r3, [r4, #8]
 8023636:	9a01      	ldr	r2, [sp, #4]
 8023638:	1a9b      	subs	r3, r3, r2
 802363a:	60a3      	str	r3, [r4, #8]
 802363c:	6823      	ldr	r3, [r4, #0]
 802363e:	441a      	add	r2, r3
 8023640:	4655      	mov	r5, sl
 8023642:	6022      	str	r2, [r4, #0]
 8023644:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8023648:	44a9      	add	r9, r5
 802364a:	ebaa 0a05 	sub.w	sl, sl, r5
 802364e:	1b45      	subs	r5, r0, r5
 8023650:	f8c8 5008 	str.w	r5, [r8, #8]
 8023654:	2d00      	cmp	r5, #0
 8023656:	d1a4      	bne.n	80235a2 <__sfvwrite_r+0x11a>
 8023658:	e71d      	b.n	8023496 <__sfvwrite_r+0xe>
 802365a:	462a      	mov	r2, r5
 802365c:	4630      	mov	r0, r6
 802365e:	f7fe fe6b 	bl	8022338 <_realloc_r>
 8023662:	4603      	mov	r3, r0
 8023664:	2800      	cmp	r0, #0
 8023666:	d1d5      	bne.n	8023614 <__sfvwrite_r+0x18c>
 8023668:	6921      	ldr	r1, [r4, #16]
 802366a:	4630      	mov	r0, r6
 802366c:	f7fe f8c6 	bl	80217fc <_free_r>
 8023670:	89a3      	ldrh	r3, [r4, #12]
 8023672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023676:	81a3      	strh	r3, [r4, #12]
 8023678:	e7b6      	b.n	80235e8 <__sfvwrite_r+0x160>
 802367a:	6923      	ldr	r3, [r4, #16]
 802367c:	4283      	cmp	r3, r0
 802367e:	d302      	bcc.n	8023686 <__sfvwrite_r+0x1fe>
 8023680:	6961      	ldr	r1, [r4, #20]
 8023682:	4551      	cmp	r1, sl
 8023684:	d915      	bls.n	80236b2 <__sfvwrite_r+0x22a>
 8023686:	4552      	cmp	r2, sl
 8023688:	bf28      	it	cs
 802368a:	4652      	movcs	r2, sl
 802368c:	4649      	mov	r1, r9
 802368e:	4615      	mov	r5, r2
 8023690:	f7fe fe38 	bl	8022304 <memmove>
 8023694:	68a3      	ldr	r3, [r4, #8]
 8023696:	6822      	ldr	r2, [r4, #0]
 8023698:	1b5b      	subs	r3, r3, r5
 802369a:	442a      	add	r2, r5
 802369c:	60a3      	str	r3, [r4, #8]
 802369e:	6022      	str	r2, [r4, #0]
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d1cf      	bne.n	8023644 <__sfvwrite_r+0x1bc>
 80236a4:	4621      	mov	r1, r4
 80236a6:	4630      	mov	r0, r6
 80236a8:	f7ff fdee 	bl	8023288 <_fflush_r>
 80236ac:	2800      	cmp	r0, #0
 80236ae:	d0c9      	beq.n	8023644 <__sfvwrite_r+0x1bc>
 80236b0:	e79c      	b.n	80235ec <__sfvwrite_r+0x164>
 80236b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80236b6:	459a      	cmp	sl, r3
 80236b8:	bf38      	it	cc
 80236ba:	4653      	movcc	r3, sl
 80236bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80236be:	fb93 f3f1 	sdiv	r3, r3, r1
 80236c2:	464a      	mov	r2, r9
 80236c4:	434b      	muls	r3, r1
 80236c6:	4630      	mov	r0, r6
 80236c8:	69e1      	ldr	r1, [r4, #28]
 80236ca:	47a8      	blx	r5
 80236cc:	1e05      	subs	r5, r0, #0
 80236ce:	dcb9      	bgt.n	8023644 <__sfvwrite_r+0x1bc>
 80236d0:	e78c      	b.n	80235ec <__sfvwrite_r+0x164>
 80236d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80236d6:	2000      	movs	r0, #0
 80236d8:	3708      	adds	r7, #8
 80236da:	e6f3      	b.n	80234c4 <__sfvwrite_r+0x3c>
 80236dc:	f10b 0901 	add.w	r9, fp, #1
 80236e0:	e700      	b.n	80234e4 <__sfvwrite_r+0x5c>
 80236e2:	4293      	cmp	r3, r2
 80236e4:	dc08      	bgt.n	80236f8 <__sfvwrite_r+0x270>
 80236e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80236e8:	69e1      	ldr	r1, [r4, #28]
 80236ea:	4652      	mov	r2, sl
 80236ec:	4630      	mov	r0, r6
 80236ee:	47a8      	blx	r5
 80236f0:	1e05      	subs	r5, r0, #0
 80236f2:	f73f af13 	bgt.w	802351c <__sfvwrite_r+0x94>
 80236f6:	e779      	b.n	80235ec <__sfvwrite_r+0x164>
 80236f8:	4651      	mov	r1, sl
 80236fa:	9201      	str	r2, [sp, #4]
 80236fc:	f7fe fe02 	bl	8022304 <memmove>
 8023700:	9a01      	ldr	r2, [sp, #4]
 8023702:	68a3      	ldr	r3, [r4, #8]
 8023704:	1a9b      	subs	r3, r3, r2
 8023706:	60a3      	str	r3, [r4, #8]
 8023708:	6823      	ldr	r3, [r4, #0]
 802370a:	4413      	add	r3, r2
 802370c:	6023      	str	r3, [r4, #0]
 802370e:	4615      	mov	r5, r2
 8023710:	e704      	b.n	802351c <__sfvwrite_r+0x94>
 8023712:	2001      	movs	r0, #1
 8023714:	e70c      	b.n	8023530 <__sfvwrite_r+0xa8>
 8023716:	bf00      	nop
 8023718:	7ffffc00 	.word	0x7ffffc00

0802371c <_fwalk_reent>:
 802371c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023720:	4606      	mov	r6, r0
 8023722:	4688      	mov	r8, r1
 8023724:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8023728:	2700      	movs	r7, #0
 802372a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802372e:	f1b9 0901 	subs.w	r9, r9, #1
 8023732:	d505      	bpl.n	8023740 <_fwalk_reent+0x24>
 8023734:	6824      	ldr	r4, [r4, #0]
 8023736:	2c00      	cmp	r4, #0
 8023738:	d1f7      	bne.n	802372a <_fwalk_reent+0xe>
 802373a:	4638      	mov	r0, r7
 802373c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023740:	89ab      	ldrh	r3, [r5, #12]
 8023742:	2b01      	cmp	r3, #1
 8023744:	d907      	bls.n	8023756 <_fwalk_reent+0x3a>
 8023746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802374a:	3301      	adds	r3, #1
 802374c:	d003      	beq.n	8023756 <_fwalk_reent+0x3a>
 802374e:	4629      	mov	r1, r5
 8023750:	4630      	mov	r0, r6
 8023752:	47c0      	blx	r8
 8023754:	4307      	orrs	r7, r0
 8023756:	3568      	adds	r5, #104	; 0x68
 8023758:	e7e9      	b.n	802372e <_fwalk_reent+0x12>

0802375a <__swhatbuf_r>:
 802375a:	b570      	push	{r4, r5, r6, lr}
 802375c:	460e      	mov	r6, r1
 802375e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023762:	2900      	cmp	r1, #0
 8023764:	b096      	sub	sp, #88	; 0x58
 8023766:	4614      	mov	r4, r2
 8023768:	461d      	mov	r5, r3
 802376a:	da0a      	bge.n	8023782 <__swhatbuf_r+0x28>
 802376c:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8023770:	2300      	movs	r3, #0
 8023772:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8023776:	602b      	str	r3, [r5, #0]
 8023778:	d116      	bne.n	80237a8 <__swhatbuf_r+0x4e>
 802377a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802377e:	6023      	str	r3, [r4, #0]
 8023780:	e015      	b.n	80237ae <__swhatbuf_r+0x54>
 8023782:	466a      	mov	r2, sp
 8023784:	f000 f9b8 	bl	8023af8 <_fstat_r>
 8023788:	2800      	cmp	r0, #0
 802378a:	dbef      	blt.n	802376c <__swhatbuf_r+0x12>
 802378c:	9a01      	ldr	r2, [sp, #4]
 802378e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023796:	425a      	negs	r2, r3
 8023798:	415a      	adcs	r2, r3
 802379a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802379e:	602a      	str	r2, [r5, #0]
 80237a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80237a4:	6023      	str	r3, [r4, #0]
 80237a6:	e002      	b.n	80237ae <__swhatbuf_r+0x54>
 80237a8:	2240      	movs	r2, #64	; 0x40
 80237aa:	6022      	str	r2, [r4, #0]
 80237ac:	4618      	mov	r0, r3
 80237ae:	b016      	add	sp, #88	; 0x58
 80237b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080237b4 <__smakebuf_r>:
 80237b4:	898b      	ldrh	r3, [r1, #12]
 80237b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80237b8:	079d      	lsls	r5, r3, #30
 80237ba:	4606      	mov	r6, r0
 80237bc:	460c      	mov	r4, r1
 80237be:	d507      	bpl.n	80237d0 <__smakebuf_r+0x1c>
 80237c0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80237c4:	6023      	str	r3, [r4, #0]
 80237c6:	6123      	str	r3, [r4, #16]
 80237c8:	2301      	movs	r3, #1
 80237ca:	6163      	str	r3, [r4, #20]
 80237cc:	b002      	add	sp, #8
 80237ce:	bd70      	pop	{r4, r5, r6, pc}
 80237d0:	ab01      	add	r3, sp, #4
 80237d2:	466a      	mov	r2, sp
 80237d4:	f7ff ffc1 	bl	802375a <__swhatbuf_r>
 80237d8:	9900      	ldr	r1, [sp, #0]
 80237da:	4605      	mov	r5, r0
 80237dc:	4630      	mov	r0, r6
 80237de:	f7fb fb35 	bl	801ee4c <_malloc_r>
 80237e2:	b948      	cbnz	r0, 80237f8 <__smakebuf_r+0x44>
 80237e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237e8:	059a      	lsls	r2, r3, #22
 80237ea:	d4ef      	bmi.n	80237cc <__smakebuf_r+0x18>
 80237ec:	f023 0303 	bic.w	r3, r3, #3
 80237f0:	f043 0302 	orr.w	r3, r3, #2
 80237f4:	81a3      	strh	r3, [r4, #12]
 80237f6:	e7e3      	b.n	80237c0 <__smakebuf_r+0xc>
 80237f8:	4b0d      	ldr	r3, [pc, #52]	; (8023830 <__smakebuf_r+0x7c>)
 80237fa:	63f3      	str	r3, [r6, #60]	; 0x3c
 80237fc:	89a3      	ldrh	r3, [r4, #12]
 80237fe:	6020      	str	r0, [r4, #0]
 8023800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023804:	81a3      	strh	r3, [r4, #12]
 8023806:	9b00      	ldr	r3, [sp, #0]
 8023808:	6163      	str	r3, [r4, #20]
 802380a:	9b01      	ldr	r3, [sp, #4]
 802380c:	6120      	str	r0, [r4, #16]
 802380e:	b15b      	cbz	r3, 8023828 <__smakebuf_r+0x74>
 8023810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023814:	4630      	mov	r0, r6
 8023816:	f000 f981 	bl	8023b1c <_isatty_r>
 802381a:	b128      	cbz	r0, 8023828 <__smakebuf_r+0x74>
 802381c:	89a3      	ldrh	r3, [r4, #12]
 802381e:	f023 0303 	bic.w	r3, r3, #3
 8023822:	f043 0301 	orr.w	r3, r3, #1
 8023826:	81a3      	strh	r3, [r4, #12]
 8023828:	89a0      	ldrh	r0, [r4, #12]
 802382a:	4305      	orrs	r5, r0
 802382c:	81a5      	strh	r5, [r4, #12]
 802382e:	e7cd      	b.n	80237cc <__smakebuf_r+0x18>
 8023830:	08023325 	.word	0x08023325

08023834 <_raise_r>:
 8023834:	291f      	cmp	r1, #31
 8023836:	b538      	push	{r3, r4, r5, lr}
 8023838:	4604      	mov	r4, r0
 802383a:	460d      	mov	r5, r1
 802383c:	d904      	bls.n	8023848 <_raise_r+0x14>
 802383e:	2316      	movs	r3, #22
 8023840:	6003      	str	r3, [r0, #0]
 8023842:	f04f 30ff 	mov.w	r0, #4294967295
 8023846:	bd38      	pop	{r3, r4, r5, pc}
 8023848:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 802384c:	b112      	cbz	r2, 8023854 <_raise_r+0x20>
 802384e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023852:	b94b      	cbnz	r3, 8023868 <_raise_r+0x34>
 8023854:	4620      	mov	r0, r4
 8023856:	f000 f831 	bl	80238bc <_getpid_r>
 802385a:	462a      	mov	r2, r5
 802385c:	4601      	mov	r1, r0
 802385e:	4620      	mov	r0, r4
 8023860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023864:	f000 b818 	b.w	8023898 <_kill_r>
 8023868:	2b01      	cmp	r3, #1
 802386a:	d00a      	beq.n	8023882 <_raise_r+0x4e>
 802386c:	1c59      	adds	r1, r3, #1
 802386e:	d103      	bne.n	8023878 <_raise_r+0x44>
 8023870:	2316      	movs	r3, #22
 8023872:	6003      	str	r3, [r0, #0]
 8023874:	2001      	movs	r0, #1
 8023876:	e7e6      	b.n	8023846 <_raise_r+0x12>
 8023878:	2400      	movs	r4, #0
 802387a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802387e:	4628      	mov	r0, r5
 8023880:	4798      	blx	r3
 8023882:	2000      	movs	r0, #0
 8023884:	e7df      	b.n	8023846 <_raise_r+0x12>
	...

08023888 <raise>:
 8023888:	4b02      	ldr	r3, [pc, #8]	; (8023894 <raise+0xc>)
 802388a:	4601      	mov	r1, r0
 802388c:	6818      	ldr	r0, [r3, #0]
 802388e:	f7ff bfd1 	b.w	8023834 <_raise_r>
 8023892:	bf00      	nop
 8023894:	20000144 	.word	0x20000144

08023898 <_kill_r>:
 8023898:	b538      	push	{r3, r4, r5, lr}
 802389a:	4d07      	ldr	r5, [pc, #28]	; (80238b8 <_kill_r+0x20>)
 802389c:	2300      	movs	r3, #0
 802389e:	4604      	mov	r4, r0
 80238a0:	4608      	mov	r0, r1
 80238a2:	4611      	mov	r1, r2
 80238a4:	602b      	str	r3, [r5, #0]
 80238a6:	f7e8 f987 	bl	800bbb8 <_kill>
 80238aa:	1c43      	adds	r3, r0, #1
 80238ac:	d102      	bne.n	80238b4 <_kill_r+0x1c>
 80238ae:	682b      	ldr	r3, [r5, #0]
 80238b0:	b103      	cbz	r3, 80238b4 <_kill_r+0x1c>
 80238b2:	6023      	str	r3, [r4, #0]
 80238b4:	bd38      	pop	{r3, r4, r5, pc}
 80238b6:	bf00      	nop
 80238b8:	200038a4 	.word	0x200038a4

080238bc <_getpid_r>:
 80238bc:	f7e8 b974 	b.w	800bba8 <_getpid>

080238c0 <__sread>:
 80238c0:	b510      	push	{r4, lr}
 80238c2:	460c      	mov	r4, r1
 80238c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238c8:	f000 f94a 	bl	8023b60 <_read_r>
 80238cc:	2800      	cmp	r0, #0
 80238ce:	bfab      	itete	ge
 80238d0:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80238d2:	89a3      	ldrhlt	r3, [r4, #12]
 80238d4:	181b      	addge	r3, r3, r0
 80238d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80238da:	bfac      	ite	ge
 80238dc:	6523      	strge	r3, [r4, #80]	; 0x50
 80238de:	81a3      	strhlt	r3, [r4, #12]
 80238e0:	bd10      	pop	{r4, pc}

080238e2 <__swrite>:
 80238e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238e6:	461f      	mov	r7, r3
 80238e8:	898b      	ldrh	r3, [r1, #12]
 80238ea:	05db      	lsls	r3, r3, #23
 80238ec:	4605      	mov	r5, r0
 80238ee:	460c      	mov	r4, r1
 80238f0:	4616      	mov	r6, r2
 80238f2:	d505      	bpl.n	8023900 <__swrite+0x1e>
 80238f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238f8:	2302      	movs	r3, #2
 80238fa:	2200      	movs	r2, #0
 80238fc:	f000 f91e 	bl	8023b3c <_lseek_r>
 8023900:	89a3      	ldrh	r3, [r4, #12]
 8023902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802390a:	81a3      	strh	r3, [r4, #12]
 802390c:	4632      	mov	r2, r6
 802390e:	463b      	mov	r3, r7
 8023910:	4628      	mov	r0, r5
 8023912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023916:	f000 b875 	b.w	8023a04 <_write_r>

0802391a <__sseek>:
 802391a:	b510      	push	{r4, lr}
 802391c:	460c      	mov	r4, r1
 802391e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023922:	f000 f90b 	bl	8023b3c <_lseek_r>
 8023926:	1c43      	adds	r3, r0, #1
 8023928:	89a3      	ldrh	r3, [r4, #12]
 802392a:	bf15      	itete	ne
 802392c:	6520      	strne	r0, [r4, #80]	; 0x50
 802392e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023936:	81a3      	strheq	r3, [r4, #12]
 8023938:	bf18      	it	ne
 802393a:	81a3      	strhne	r3, [r4, #12]
 802393c:	bd10      	pop	{r4, pc}

0802393e <__sclose>:
 802393e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023942:	f000 b871 	b.w	8023a28 <_close_r>

08023946 <__swbuf_r>:
 8023946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023948:	460e      	mov	r6, r1
 802394a:	4614      	mov	r4, r2
 802394c:	4605      	mov	r5, r0
 802394e:	b118      	cbz	r0, 8023958 <__swbuf_r+0x12>
 8023950:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023952:	b90b      	cbnz	r3, 8023958 <__swbuf_r+0x12>
 8023954:	f7ff fd04 	bl	8023360 <__sinit>
 8023958:	69a3      	ldr	r3, [r4, #24]
 802395a:	60a3      	str	r3, [r4, #8]
 802395c:	89a3      	ldrh	r3, [r4, #12]
 802395e:	0719      	lsls	r1, r3, #28
 8023960:	d529      	bpl.n	80239b6 <__swbuf_r+0x70>
 8023962:	6923      	ldr	r3, [r4, #16]
 8023964:	b33b      	cbz	r3, 80239b6 <__swbuf_r+0x70>
 8023966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802396a:	b2f6      	uxtb	r6, r6
 802396c:	049a      	lsls	r2, r3, #18
 802396e:	4637      	mov	r7, r6
 8023970:	d52a      	bpl.n	80239c8 <__swbuf_r+0x82>
 8023972:	6823      	ldr	r3, [r4, #0]
 8023974:	6920      	ldr	r0, [r4, #16]
 8023976:	1a18      	subs	r0, r3, r0
 8023978:	6963      	ldr	r3, [r4, #20]
 802397a:	4283      	cmp	r3, r0
 802397c:	dc04      	bgt.n	8023988 <__swbuf_r+0x42>
 802397e:	4621      	mov	r1, r4
 8023980:	4628      	mov	r0, r5
 8023982:	f7ff fc81 	bl	8023288 <_fflush_r>
 8023986:	b9e0      	cbnz	r0, 80239c2 <__swbuf_r+0x7c>
 8023988:	68a3      	ldr	r3, [r4, #8]
 802398a:	3b01      	subs	r3, #1
 802398c:	60a3      	str	r3, [r4, #8]
 802398e:	6823      	ldr	r3, [r4, #0]
 8023990:	1c5a      	adds	r2, r3, #1
 8023992:	6022      	str	r2, [r4, #0]
 8023994:	701e      	strb	r6, [r3, #0]
 8023996:	6962      	ldr	r2, [r4, #20]
 8023998:	1c43      	adds	r3, r0, #1
 802399a:	429a      	cmp	r2, r3
 802399c:	d004      	beq.n	80239a8 <__swbuf_r+0x62>
 802399e:	89a3      	ldrh	r3, [r4, #12]
 80239a0:	07db      	lsls	r3, r3, #31
 80239a2:	d506      	bpl.n	80239b2 <__swbuf_r+0x6c>
 80239a4:	2e0a      	cmp	r6, #10
 80239a6:	d104      	bne.n	80239b2 <__swbuf_r+0x6c>
 80239a8:	4621      	mov	r1, r4
 80239aa:	4628      	mov	r0, r5
 80239ac:	f7ff fc6c 	bl	8023288 <_fflush_r>
 80239b0:	b938      	cbnz	r0, 80239c2 <__swbuf_r+0x7c>
 80239b2:	4638      	mov	r0, r7
 80239b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80239b6:	4621      	mov	r1, r4
 80239b8:	4628      	mov	r0, r5
 80239ba:	f7ff fb77 	bl	80230ac <__swsetup_r>
 80239be:	2800      	cmp	r0, #0
 80239c0:	d0d1      	beq.n	8023966 <__swbuf_r+0x20>
 80239c2:	f04f 37ff 	mov.w	r7, #4294967295
 80239c6:	e7f4      	b.n	80239b2 <__swbuf_r+0x6c>
 80239c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80239cc:	81a3      	strh	r3, [r4, #12]
 80239ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80239d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80239d4:	6663      	str	r3, [r4, #100]	; 0x64
 80239d6:	e7cc      	b.n	8023972 <__swbuf_r+0x2c>

080239d8 <_wcrtomb_r>:
 80239d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239da:	4c09      	ldr	r4, [pc, #36]	; (8023a00 <_wcrtomb_r+0x28>)
 80239dc:	b085      	sub	sp, #20
 80239de:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 80239e2:	4605      	mov	r5, r0
 80239e4:	461e      	mov	r6, r3
 80239e6:	b909      	cbnz	r1, 80239ec <_wcrtomb_r+0x14>
 80239e8:	460a      	mov	r2, r1
 80239ea:	a901      	add	r1, sp, #4
 80239ec:	47b8      	blx	r7
 80239ee:	1c43      	adds	r3, r0, #1
 80239f0:	bf01      	itttt	eq
 80239f2:	2300      	moveq	r3, #0
 80239f4:	6033      	streq	r3, [r6, #0]
 80239f6:	238a      	moveq	r3, #138	; 0x8a
 80239f8:	602b      	streq	r3, [r5, #0]
 80239fa:	b005      	add	sp, #20
 80239fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80239fe:	bf00      	nop
 8023a00:	20000984 	.word	0x20000984

08023a04 <_write_r>:
 8023a04:	b538      	push	{r3, r4, r5, lr}
 8023a06:	4d07      	ldr	r5, [pc, #28]	; (8023a24 <_write_r+0x20>)
 8023a08:	4604      	mov	r4, r0
 8023a0a:	4608      	mov	r0, r1
 8023a0c:	4611      	mov	r1, r2
 8023a0e:	2200      	movs	r2, #0
 8023a10:	602a      	str	r2, [r5, #0]
 8023a12:	461a      	mov	r2, r3
 8023a14:	f7e8 f907 	bl	800bc26 <_write>
 8023a18:	1c43      	adds	r3, r0, #1
 8023a1a:	d102      	bne.n	8023a22 <_write_r+0x1e>
 8023a1c:	682b      	ldr	r3, [r5, #0]
 8023a1e:	b103      	cbz	r3, 8023a22 <_write_r+0x1e>
 8023a20:	6023      	str	r3, [r4, #0]
 8023a22:	bd38      	pop	{r3, r4, r5, pc}
 8023a24:	200038a4 	.word	0x200038a4

08023a28 <_close_r>:
 8023a28:	b538      	push	{r3, r4, r5, lr}
 8023a2a:	4d06      	ldr	r5, [pc, #24]	; (8023a44 <_close_r+0x1c>)
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	4604      	mov	r4, r0
 8023a30:	4608      	mov	r0, r1
 8023a32:	602b      	str	r3, [r5, #0]
 8023a34:	f7e8 f913 	bl	800bc5e <_close>
 8023a38:	1c43      	adds	r3, r0, #1
 8023a3a:	d102      	bne.n	8023a42 <_close_r+0x1a>
 8023a3c:	682b      	ldr	r3, [r5, #0]
 8023a3e:	b103      	cbz	r3, 8023a42 <_close_r+0x1a>
 8023a40:	6023      	str	r3, [r4, #0]
 8023a42:	bd38      	pop	{r3, r4, r5, pc}
 8023a44:	200038a4 	.word	0x200038a4

08023a48 <_fclose_r>:
 8023a48:	b570      	push	{r4, r5, r6, lr}
 8023a4a:	4606      	mov	r6, r0
 8023a4c:	460c      	mov	r4, r1
 8023a4e:	b911      	cbnz	r1, 8023a56 <_fclose_r+0xe>
 8023a50:	2500      	movs	r5, #0
 8023a52:	4628      	mov	r0, r5
 8023a54:	bd70      	pop	{r4, r5, r6, pc}
 8023a56:	b118      	cbz	r0, 8023a60 <_fclose_r+0x18>
 8023a58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023a5a:	b90b      	cbnz	r3, 8023a60 <_fclose_r+0x18>
 8023a5c:	f7ff fc80 	bl	8023360 <__sinit>
 8023a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023a62:	07d8      	lsls	r0, r3, #31
 8023a64:	d405      	bmi.n	8023a72 <_fclose_r+0x2a>
 8023a66:	89a3      	ldrh	r3, [r4, #12]
 8023a68:	0599      	lsls	r1, r3, #22
 8023a6a:	d402      	bmi.n	8023a72 <_fclose_r+0x2a>
 8023a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023a6e:	f7fd ff8b 	bl	8021988 <__retarget_lock_acquire_recursive>
 8023a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a76:	b93b      	cbnz	r3, 8023a88 <_fclose_r+0x40>
 8023a78:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8023a7a:	f015 0501 	ands.w	r5, r5, #1
 8023a7e:	d1e7      	bne.n	8023a50 <_fclose_r+0x8>
 8023a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023a82:	f7fd ff82 	bl	802198a <__retarget_lock_release_recursive>
 8023a86:	e7e4      	b.n	8023a52 <_fclose_r+0xa>
 8023a88:	4621      	mov	r1, r4
 8023a8a:	4630      	mov	r0, r6
 8023a8c:	f7ff fb6e 	bl	802316c <__sflush_r>
 8023a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023a92:	4605      	mov	r5, r0
 8023a94:	b133      	cbz	r3, 8023aa4 <_fclose_r+0x5c>
 8023a96:	69e1      	ldr	r1, [r4, #28]
 8023a98:	4630      	mov	r0, r6
 8023a9a:	4798      	blx	r3
 8023a9c:	2800      	cmp	r0, #0
 8023a9e:	bfb8      	it	lt
 8023aa0:	f04f 35ff 	movlt.w	r5, #4294967295
 8023aa4:	89a3      	ldrh	r3, [r4, #12]
 8023aa6:	061a      	lsls	r2, r3, #24
 8023aa8:	d503      	bpl.n	8023ab2 <_fclose_r+0x6a>
 8023aaa:	6921      	ldr	r1, [r4, #16]
 8023aac:	4630      	mov	r0, r6
 8023aae:	f7fd fea5 	bl	80217fc <_free_r>
 8023ab2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023ab4:	b141      	cbz	r1, 8023ac8 <_fclose_r+0x80>
 8023ab6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8023aba:	4299      	cmp	r1, r3
 8023abc:	d002      	beq.n	8023ac4 <_fclose_r+0x7c>
 8023abe:	4630      	mov	r0, r6
 8023ac0:	f7fd fe9c 	bl	80217fc <_free_r>
 8023ac4:	2300      	movs	r3, #0
 8023ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8023ac8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8023aca:	b121      	cbz	r1, 8023ad6 <_fclose_r+0x8e>
 8023acc:	4630      	mov	r0, r6
 8023ace:	f7fd fe95 	bl	80217fc <_free_r>
 8023ad2:	2300      	movs	r3, #0
 8023ad4:	6463      	str	r3, [r4, #68]	; 0x44
 8023ad6:	f7ff fc2b 	bl	8023330 <__sfp_lock_acquire>
 8023ada:	2300      	movs	r3, #0
 8023adc:	81a3      	strh	r3, [r4, #12]
 8023ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ae0:	07db      	lsls	r3, r3, #31
 8023ae2:	d402      	bmi.n	8023aea <_fclose_r+0xa2>
 8023ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023ae6:	f7fd ff50 	bl	802198a <__retarget_lock_release_recursive>
 8023aea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023aec:	f7fd ff4b 	bl	8021986 <__retarget_lock_close_recursive>
 8023af0:	f7ff fc24 	bl	802333c <__sfp_lock_release>
 8023af4:	e7ad      	b.n	8023a52 <_fclose_r+0xa>
	...

08023af8 <_fstat_r>:
 8023af8:	b538      	push	{r3, r4, r5, lr}
 8023afa:	4d07      	ldr	r5, [pc, #28]	; (8023b18 <_fstat_r+0x20>)
 8023afc:	2300      	movs	r3, #0
 8023afe:	4604      	mov	r4, r0
 8023b00:	4608      	mov	r0, r1
 8023b02:	4611      	mov	r1, r2
 8023b04:	602b      	str	r3, [r5, #0]
 8023b06:	f7e8 f8b6 	bl	800bc76 <_fstat>
 8023b0a:	1c43      	adds	r3, r0, #1
 8023b0c:	d102      	bne.n	8023b14 <_fstat_r+0x1c>
 8023b0e:	682b      	ldr	r3, [r5, #0]
 8023b10:	b103      	cbz	r3, 8023b14 <_fstat_r+0x1c>
 8023b12:	6023      	str	r3, [r4, #0]
 8023b14:	bd38      	pop	{r3, r4, r5, pc}
 8023b16:	bf00      	nop
 8023b18:	200038a4 	.word	0x200038a4

08023b1c <_isatty_r>:
 8023b1c:	b538      	push	{r3, r4, r5, lr}
 8023b1e:	4d06      	ldr	r5, [pc, #24]	; (8023b38 <_isatty_r+0x1c>)
 8023b20:	2300      	movs	r3, #0
 8023b22:	4604      	mov	r4, r0
 8023b24:	4608      	mov	r0, r1
 8023b26:	602b      	str	r3, [r5, #0]
 8023b28:	f7e8 f8b5 	bl	800bc96 <_isatty>
 8023b2c:	1c43      	adds	r3, r0, #1
 8023b2e:	d102      	bne.n	8023b36 <_isatty_r+0x1a>
 8023b30:	682b      	ldr	r3, [r5, #0]
 8023b32:	b103      	cbz	r3, 8023b36 <_isatty_r+0x1a>
 8023b34:	6023      	str	r3, [r4, #0]
 8023b36:	bd38      	pop	{r3, r4, r5, pc}
 8023b38:	200038a4 	.word	0x200038a4

08023b3c <_lseek_r>:
 8023b3c:	b538      	push	{r3, r4, r5, lr}
 8023b3e:	4d07      	ldr	r5, [pc, #28]	; (8023b5c <_lseek_r+0x20>)
 8023b40:	4604      	mov	r4, r0
 8023b42:	4608      	mov	r0, r1
 8023b44:	4611      	mov	r1, r2
 8023b46:	2200      	movs	r2, #0
 8023b48:	602a      	str	r2, [r5, #0]
 8023b4a:	461a      	mov	r2, r3
 8023b4c:	f7e8 f8ae 	bl	800bcac <_lseek>
 8023b50:	1c43      	adds	r3, r0, #1
 8023b52:	d102      	bne.n	8023b5a <_lseek_r+0x1e>
 8023b54:	682b      	ldr	r3, [r5, #0]
 8023b56:	b103      	cbz	r3, 8023b5a <_lseek_r+0x1e>
 8023b58:	6023      	str	r3, [r4, #0]
 8023b5a:	bd38      	pop	{r3, r4, r5, pc}
 8023b5c:	200038a4 	.word	0x200038a4

08023b60 <_read_r>:
 8023b60:	b538      	push	{r3, r4, r5, lr}
 8023b62:	4d07      	ldr	r5, [pc, #28]	; (8023b80 <_read_r+0x20>)
 8023b64:	4604      	mov	r4, r0
 8023b66:	4608      	mov	r0, r1
 8023b68:	4611      	mov	r1, r2
 8023b6a:	2200      	movs	r2, #0
 8023b6c:	602a      	str	r2, [r5, #0]
 8023b6e:	461a      	mov	r2, r3
 8023b70:	f7e8 f83c 	bl	800bbec <_read>
 8023b74:	1c43      	adds	r3, r0, #1
 8023b76:	d102      	bne.n	8023b7e <_read_r+0x1e>
 8023b78:	682b      	ldr	r3, [r5, #0]
 8023b7a:	b103      	cbz	r3, 8023b7e <_read_r+0x1e>
 8023b7c:	6023      	str	r3, [r4, #0]
 8023b7e:	bd38      	pop	{r3, r4, r5, pc}
 8023b80:	200038a4 	.word	0x200038a4

08023b84 <powl>:
 8023b84:	f000 b904 	b.w	8023d90 <pow>

08023b88 <ceil>:
 8023b88:	ec51 0b10 	vmov	r0, r1, d0
 8023b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023b94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023b98:	2e13      	cmp	r6, #19
 8023b9a:	ee10 5a10 	vmov	r5, s0
 8023b9e:	ee10 8a10 	vmov	r8, s0
 8023ba2:	460c      	mov	r4, r1
 8023ba4:	dc30      	bgt.n	8023c08 <ceil+0x80>
 8023ba6:	2e00      	cmp	r6, #0
 8023ba8:	da12      	bge.n	8023bd0 <ceil+0x48>
 8023baa:	a335      	add	r3, pc, #212	; (adr r3, 8023c80 <ceil+0xf8>)
 8023bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bb0:	f7dc fb8c 	bl	80002cc <__adddf3>
 8023bb4:	2200      	movs	r2, #0
 8023bb6:	2300      	movs	r3, #0
 8023bb8:	f7dc ffce 	bl	8000b58 <__aeabi_dcmpgt>
 8023bbc:	b128      	cbz	r0, 8023bca <ceil+0x42>
 8023bbe:	2c00      	cmp	r4, #0
 8023bc0:	db55      	blt.n	8023c6e <ceil+0xe6>
 8023bc2:	432c      	orrs	r4, r5
 8023bc4:	d057      	beq.n	8023c76 <ceil+0xee>
 8023bc6:	4c30      	ldr	r4, [pc, #192]	; (8023c88 <ceil+0x100>)
 8023bc8:	2500      	movs	r5, #0
 8023bca:	4621      	mov	r1, r4
 8023bcc:	4628      	mov	r0, r5
 8023bce:	e025      	b.n	8023c1c <ceil+0x94>
 8023bd0:	4f2e      	ldr	r7, [pc, #184]	; (8023c8c <ceil+0x104>)
 8023bd2:	4137      	asrs	r7, r6
 8023bd4:	ea01 0307 	and.w	r3, r1, r7
 8023bd8:	4303      	orrs	r3, r0
 8023bda:	d01f      	beq.n	8023c1c <ceil+0x94>
 8023bdc:	a328      	add	r3, pc, #160	; (adr r3, 8023c80 <ceil+0xf8>)
 8023bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023be2:	f7dc fb73 	bl	80002cc <__adddf3>
 8023be6:	2200      	movs	r2, #0
 8023be8:	2300      	movs	r3, #0
 8023bea:	f7dc ffb5 	bl	8000b58 <__aeabi_dcmpgt>
 8023bee:	2800      	cmp	r0, #0
 8023bf0:	d0eb      	beq.n	8023bca <ceil+0x42>
 8023bf2:	2c00      	cmp	r4, #0
 8023bf4:	bfc2      	ittt	gt
 8023bf6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8023bfa:	fa43 f606 	asrgt.w	r6, r3, r6
 8023bfe:	19a4      	addgt	r4, r4, r6
 8023c00:	ea24 0407 	bic.w	r4, r4, r7
 8023c04:	2500      	movs	r5, #0
 8023c06:	e7e0      	b.n	8023bca <ceil+0x42>
 8023c08:	2e33      	cmp	r6, #51	; 0x33
 8023c0a:	dd0b      	ble.n	8023c24 <ceil+0x9c>
 8023c0c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023c10:	d104      	bne.n	8023c1c <ceil+0x94>
 8023c12:	ee10 2a10 	vmov	r2, s0
 8023c16:	460b      	mov	r3, r1
 8023c18:	f7dc fb58 	bl	80002cc <__adddf3>
 8023c1c:	ec41 0b10 	vmov	d0, r0, r1
 8023c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c24:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023c28:	f04f 33ff 	mov.w	r3, #4294967295
 8023c2c:	fa23 f707 	lsr.w	r7, r3, r7
 8023c30:	4207      	tst	r7, r0
 8023c32:	d0f3      	beq.n	8023c1c <ceil+0x94>
 8023c34:	a312      	add	r3, pc, #72	; (adr r3, 8023c80 <ceil+0xf8>)
 8023c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c3a:	f7dc fb47 	bl	80002cc <__adddf3>
 8023c3e:	2200      	movs	r2, #0
 8023c40:	2300      	movs	r3, #0
 8023c42:	f7dc ff89 	bl	8000b58 <__aeabi_dcmpgt>
 8023c46:	2800      	cmp	r0, #0
 8023c48:	d0bf      	beq.n	8023bca <ceil+0x42>
 8023c4a:	2c00      	cmp	r4, #0
 8023c4c:	dd02      	ble.n	8023c54 <ceil+0xcc>
 8023c4e:	2e14      	cmp	r6, #20
 8023c50:	d103      	bne.n	8023c5a <ceil+0xd2>
 8023c52:	3401      	adds	r4, #1
 8023c54:	ea25 0507 	bic.w	r5, r5, r7
 8023c58:	e7b7      	b.n	8023bca <ceil+0x42>
 8023c5a:	2301      	movs	r3, #1
 8023c5c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023c60:	fa03 f606 	lsl.w	r6, r3, r6
 8023c64:	4435      	add	r5, r6
 8023c66:	4545      	cmp	r5, r8
 8023c68:	bf38      	it	cc
 8023c6a:	18e4      	addcc	r4, r4, r3
 8023c6c:	e7f2      	b.n	8023c54 <ceil+0xcc>
 8023c6e:	2500      	movs	r5, #0
 8023c70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023c74:	e7a9      	b.n	8023bca <ceil+0x42>
 8023c76:	4625      	mov	r5, r4
 8023c78:	e7a7      	b.n	8023bca <ceil+0x42>
 8023c7a:	bf00      	nop
 8023c7c:	f3af 8000 	nop.w
 8023c80:	8800759c 	.word	0x8800759c
 8023c84:	7e37e43c 	.word	0x7e37e43c
 8023c88:	3ff00000 	.word	0x3ff00000
 8023c8c:	000fffff 	.word	0x000fffff

08023c90 <floor>:
 8023c90:	ec51 0b10 	vmov	r0, r1, d0
 8023c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023c98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023c9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023ca0:	2e13      	cmp	r6, #19
 8023ca2:	ee10 5a10 	vmov	r5, s0
 8023ca6:	ee10 8a10 	vmov	r8, s0
 8023caa:	460c      	mov	r4, r1
 8023cac:	dc32      	bgt.n	8023d14 <floor+0x84>
 8023cae:	2e00      	cmp	r6, #0
 8023cb0:	da14      	bge.n	8023cdc <floor+0x4c>
 8023cb2:	a333      	add	r3, pc, #204	; (adr r3, 8023d80 <floor+0xf0>)
 8023cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cb8:	f7dc fb08 	bl	80002cc <__adddf3>
 8023cbc:	2200      	movs	r2, #0
 8023cbe:	2300      	movs	r3, #0
 8023cc0:	f7dc ff4a 	bl	8000b58 <__aeabi_dcmpgt>
 8023cc4:	b138      	cbz	r0, 8023cd6 <floor+0x46>
 8023cc6:	2c00      	cmp	r4, #0
 8023cc8:	da57      	bge.n	8023d7a <floor+0xea>
 8023cca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8023cce:	431d      	orrs	r5, r3
 8023cd0:	d001      	beq.n	8023cd6 <floor+0x46>
 8023cd2:	4c2d      	ldr	r4, [pc, #180]	; (8023d88 <floor+0xf8>)
 8023cd4:	2500      	movs	r5, #0
 8023cd6:	4621      	mov	r1, r4
 8023cd8:	4628      	mov	r0, r5
 8023cda:	e025      	b.n	8023d28 <floor+0x98>
 8023cdc:	4f2b      	ldr	r7, [pc, #172]	; (8023d8c <floor+0xfc>)
 8023cde:	4137      	asrs	r7, r6
 8023ce0:	ea01 0307 	and.w	r3, r1, r7
 8023ce4:	4303      	orrs	r3, r0
 8023ce6:	d01f      	beq.n	8023d28 <floor+0x98>
 8023ce8:	a325      	add	r3, pc, #148	; (adr r3, 8023d80 <floor+0xf0>)
 8023cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cee:	f7dc faed 	bl	80002cc <__adddf3>
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	f7dc ff2f 	bl	8000b58 <__aeabi_dcmpgt>
 8023cfa:	2800      	cmp	r0, #0
 8023cfc:	d0eb      	beq.n	8023cd6 <floor+0x46>
 8023cfe:	2c00      	cmp	r4, #0
 8023d00:	bfbe      	ittt	lt
 8023d02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023d06:	fa43 f606 	asrlt.w	r6, r3, r6
 8023d0a:	19a4      	addlt	r4, r4, r6
 8023d0c:	ea24 0407 	bic.w	r4, r4, r7
 8023d10:	2500      	movs	r5, #0
 8023d12:	e7e0      	b.n	8023cd6 <floor+0x46>
 8023d14:	2e33      	cmp	r6, #51	; 0x33
 8023d16:	dd0b      	ble.n	8023d30 <floor+0xa0>
 8023d18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023d1c:	d104      	bne.n	8023d28 <floor+0x98>
 8023d1e:	ee10 2a10 	vmov	r2, s0
 8023d22:	460b      	mov	r3, r1
 8023d24:	f7dc fad2 	bl	80002cc <__adddf3>
 8023d28:	ec41 0b10 	vmov	d0, r0, r1
 8023d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023d34:	f04f 33ff 	mov.w	r3, #4294967295
 8023d38:	fa23 f707 	lsr.w	r7, r3, r7
 8023d3c:	4207      	tst	r7, r0
 8023d3e:	d0f3      	beq.n	8023d28 <floor+0x98>
 8023d40:	a30f      	add	r3, pc, #60	; (adr r3, 8023d80 <floor+0xf0>)
 8023d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d46:	f7dc fac1 	bl	80002cc <__adddf3>
 8023d4a:	2200      	movs	r2, #0
 8023d4c:	2300      	movs	r3, #0
 8023d4e:	f7dc ff03 	bl	8000b58 <__aeabi_dcmpgt>
 8023d52:	2800      	cmp	r0, #0
 8023d54:	d0bf      	beq.n	8023cd6 <floor+0x46>
 8023d56:	2c00      	cmp	r4, #0
 8023d58:	da02      	bge.n	8023d60 <floor+0xd0>
 8023d5a:	2e14      	cmp	r6, #20
 8023d5c:	d103      	bne.n	8023d66 <floor+0xd6>
 8023d5e:	3401      	adds	r4, #1
 8023d60:	ea25 0507 	bic.w	r5, r5, r7
 8023d64:	e7b7      	b.n	8023cd6 <floor+0x46>
 8023d66:	2301      	movs	r3, #1
 8023d68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023d6c:	fa03 f606 	lsl.w	r6, r3, r6
 8023d70:	4435      	add	r5, r6
 8023d72:	4545      	cmp	r5, r8
 8023d74:	bf38      	it	cc
 8023d76:	18e4      	addcc	r4, r4, r3
 8023d78:	e7f2      	b.n	8023d60 <floor+0xd0>
 8023d7a:	2500      	movs	r5, #0
 8023d7c:	462c      	mov	r4, r5
 8023d7e:	e7aa      	b.n	8023cd6 <floor+0x46>
 8023d80:	8800759c 	.word	0x8800759c
 8023d84:	7e37e43c 	.word	0x7e37e43c
 8023d88:	bff00000 	.word	0xbff00000
 8023d8c:	000fffff 	.word	0x000fffff

08023d90 <pow>:
 8023d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d92:	ed2d 8b02 	vpush	{d8}
 8023d96:	eeb0 8a40 	vmov.f32	s16, s0
 8023d9a:	eef0 8a60 	vmov.f32	s17, s1
 8023d9e:	ec55 4b11 	vmov	r4, r5, d1
 8023da2:	f000 f8b1 	bl	8023f08 <__ieee754_pow>
 8023da6:	4622      	mov	r2, r4
 8023da8:	462b      	mov	r3, r5
 8023daa:	4620      	mov	r0, r4
 8023dac:	4629      	mov	r1, r5
 8023dae:	ec57 6b10 	vmov	r6, r7, d0
 8023db2:	f7dc fedb 	bl	8000b6c <__aeabi_dcmpun>
 8023db6:	2800      	cmp	r0, #0
 8023db8:	d13b      	bne.n	8023e32 <pow+0xa2>
 8023dba:	ec51 0b18 	vmov	r0, r1, d8
 8023dbe:	2200      	movs	r2, #0
 8023dc0:	2300      	movs	r3, #0
 8023dc2:	f7dc fea1 	bl	8000b08 <__aeabi_dcmpeq>
 8023dc6:	b1b8      	cbz	r0, 8023df8 <pow+0x68>
 8023dc8:	2200      	movs	r2, #0
 8023dca:	2300      	movs	r3, #0
 8023dcc:	4620      	mov	r0, r4
 8023dce:	4629      	mov	r1, r5
 8023dd0:	f7dc fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8023dd4:	2800      	cmp	r0, #0
 8023dd6:	d146      	bne.n	8023e66 <pow+0xd6>
 8023dd8:	ec45 4b10 	vmov	d0, r4, r5
 8023ddc:	f000 feb0 	bl	8024b40 <finite>
 8023de0:	b338      	cbz	r0, 8023e32 <pow+0xa2>
 8023de2:	2200      	movs	r2, #0
 8023de4:	2300      	movs	r3, #0
 8023de6:	4620      	mov	r0, r4
 8023de8:	4629      	mov	r1, r5
 8023dea:	f7dc fe97 	bl	8000b1c <__aeabi_dcmplt>
 8023dee:	b300      	cbz	r0, 8023e32 <pow+0xa2>
 8023df0:	f7fa fff2 	bl	801edd8 <__errno>
 8023df4:	2322      	movs	r3, #34	; 0x22
 8023df6:	e01b      	b.n	8023e30 <pow+0xa0>
 8023df8:	ec47 6b10 	vmov	d0, r6, r7
 8023dfc:	f000 fea0 	bl	8024b40 <finite>
 8023e00:	b9e0      	cbnz	r0, 8023e3c <pow+0xac>
 8023e02:	eeb0 0a48 	vmov.f32	s0, s16
 8023e06:	eef0 0a68 	vmov.f32	s1, s17
 8023e0a:	f000 fe99 	bl	8024b40 <finite>
 8023e0e:	b1a8      	cbz	r0, 8023e3c <pow+0xac>
 8023e10:	ec45 4b10 	vmov	d0, r4, r5
 8023e14:	f000 fe94 	bl	8024b40 <finite>
 8023e18:	b180      	cbz	r0, 8023e3c <pow+0xac>
 8023e1a:	4632      	mov	r2, r6
 8023e1c:	463b      	mov	r3, r7
 8023e1e:	4630      	mov	r0, r6
 8023e20:	4639      	mov	r1, r7
 8023e22:	f7dc fea3 	bl	8000b6c <__aeabi_dcmpun>
 8023e26:	2800      	cmp	r0, #0
 8023e28:	d0e2      	beq.n	8023df0 <pow+0x60>
 8023e2a:	f7fa ffd5 	bl	801edd8 <__errno>
 8023e2e:	2321      	movs	r3, #33	; 0x21
 8023e30:	6003      	str	r3, [r0, #0]
 8023e32:	ecbd 8b02 	vpop	{d8}
 8023e36:	ec47 6b10 	vmov	d0, r6, r7
 8023e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023e3c:	2200      	movs	r2, #0
 8023e3e:	2300      	movs	r3, #0
 8023e40:	4630      	mov	r0, r6
 8023e42:	4639      	mov	r1, r7
 8023e44:	f7dc fe60 	bl	8000b08 <__aeabi_dcmpeq>
 8023e48:	2800      	cmp	r0, #0
 8023e4a:	d0f2      	beq.n	8023e32 <pow+0xa2>
 8023e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8023e50:	eef0 0a68 	vmov.f32	s1, s17
 8023e54:	f000 fe74 	bl	8024b40 <finite>
 8023e58:	2800      	cmp	r0, #0
 8023e5a:	d0ea      	beq.n	8023e32 <pow+0xa2>
 8023e5c:	ec45 4b10 	vmov	d0, r4, r5
 8023e60:	f000 fe6e 	bl	8024b40 <finite>
 8023e64:	e7c3      	b.n	8023dee <pow+0x5e>
 8023e66:	4f01      	ldr	r7, [pc, #4]	; (8023e6c <pow+0xdc>)
 8023e68:	2600      	movs	r6, #0
 8023e6a:	e7e2      	b.n	8023e32 <pow+0xa2>
 8023e6c:	3ff00000 	.word	0x3ff00000

08023e70 <sqrt>:
 8023e70:	b538      	push	{r3, r4, r5, lr}
 8023e72:	ed2d 8b02 	vpush	{d8}
 8023e76:	ec55 4b10 	vmov	r4, r5, d0
 8023e7a:	f000 fd73 	bl	8024964 <__ieee754_sqrt>
 8023e7e:	4622      	mov	r2, r4
 8023e80:	462b      	mov	r3, r5
 8023e82:	4620      	mov	r0, r4
 8023e84:	4629      	mov	r1, r5
 8023e86:	eeb0 8a40 	vmov.f32	s16, s0
 8023e8a:	eef0 8a60 	vmov.f32	s17, s1
 8023e8e:	f7dc fe6d 	bl	8000b6c <__aeabi_dcmpun>
 8023e92:	b990      	cbnz	r0, 8023eba <sqrt+0x4a>
 8023e94:	2200      	movs	r2, #0
 8023e96:	2300      	movs	r3, #0
 8023e98:	4620      	mov	r0, r4
 8023e9a:	4629      	mov	r1, r5
 8023e9c:	f7dc fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8023ea0:	b158      	cbz	r0, 8023eba <sqrt+0x4a>
 8023ea2:	f7fa ff99 	bl	801edd8 <__errno>
 8023ea6:	2321      	movs	r3, #33	; 0x21
 8023ea8:	6003      	str	r3, [r0, #0]
 8023eaa:	2200      	movs	r2, #0
 8023eac:	2300      	movs	r3, #0
 8023eae:	4610      	mov	r0, r2
 8023eb0:	4619      	mov	r1, r3
 8023eb2:	f7dc fceb 	bl	800088c <__aeabi_ddiv>
 8023eb6:	ec41 0b18 	vmov	d8, r0, r1
 8023eba:	eeb0 0a48 	vmov.f32	s0, s16
 8023ebe:	eef0 0a68 	vmov.f32	s1, s17
 8023ec2:	ecbd 8b02 	vpop	{d8}
 8023ec6:	bd38      	pop	{r3, r4, r5, pc}

08023ec8 <sqrtf>:
 8023ec8:	b508      	push	{r3, lr}
 8023eca:	ed2d 8b02 	vpush	{d8}
 8023ece:	eeb0 8a40 	vmov.f32	s16, s0
 8023ed2:	f000 fdf9 	bl	8024ac8 <__ieee754_sqrtf>
 8023ed6:	eeb4 8a48 	vcmp.f32	s16, s16
 8023eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ede:	d60c      	bvs.n	8023efa <sqrtf+0x32>
 8023ee0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8023f00 <sqrtf+0x38>
 8023ee4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023eec:	d505      	bpl.n	8023efa <sqrtf+0x32>
 8023eee:	f7fa ff73 	bl	801edd8 <__errno>
 8023ef2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023ef6:	2321      	movs	r3, #33	; 0x21
 8023ef8:	6003      	str	r3, [r0, #0]
 8023efa:	ecbd 8b02 	vpop	{d8}
 8023efe:	bd08      	pop	{r3, pc}
	...

08023f08 <__ieee754_pow>:
 8023f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f0c:	ed2d 8b06 	vpush	{d8-d10}
 8023f10:	b089      	sub	sp, #36	; 0x24
 8023f12:	ed8d 1b00 	vstr	d1, [sp]
 8023f16:	e9dd 2900 	ldrd	r2, r9, [sp]
 8023f1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8023f1e:	ea58 0102 	orrs.w	r1, r8, r2
 8023f22:	ec57 6b10 	vmov	r6, r7, d0
 8023f26:	d115      	bne.n	8023f54 <__ieee754_pow+0x4c>
 8023f28:	19b3      	adds	r3, r6, r6
 8023f2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8023f2e:	4152      	adcs	r2, r2
 8023f30:	4299      	cmp	r1, r3
 8023f32:	4b89      	ldr	r3, [pc, #548]	; (8024158 <__ieee754_pow+0x250>)
 8023f34:	4193      	sbcs	r3, r2
 8023f36:	f080 84d2 	bcs.w	80248de <__ieee754_pow+0x9d6>
 8023f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023f3e:	4630      	mov	r0, r6
 8023f40:	4639      	mov	r1, r7
 8023f42:	f7dc f9c3 	bl	80002cc <__adddf3>
 8023f46:	ec41 0b10 	vmov	d0, r0, r1
 8023f4a:	b009      	add	sp, #36	; 0x24
 8023f4c:	ecbd 8b06 	vpop	{d8-d10}
 8023f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f54:	4b81      	ldr	r3, [pc, #516]	; (802415c <__ieee754_pow+0x254>)
 8023f56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8023f5a:	429c      	cmp	r4, r3
 8023f5c:	ee10 aa10 	vmov	sl, s0
 8023f60:	463d      	mov	r5, r7
 8023f62:	dc06      	bgt.n	8023f72 <__ieee754_pow+0x6a>
 8023f64:	d101      	bne.n	8023f6a <__ieee754_pow+0x62>
 8023f66:	2e00      	cmp	r6, #0
 8023f68:	d1e7      	bne.n	8023f3a <__ieee754_pow+0x32>
 8023f6a:	4598      	cmp	r8, r3
 8023f6c:	dc01      	bgt.n	8023f72 <__ieee754_pow+0x6a>
 8023f6e:	d10f      	bne.n	8023f90 <__ieee754_pow+0x88>
 8023f70:	b172      	cbz	r2, 8023f90 <__ieee754_pow+0x88>
 8023f72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8023f76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8023f7a:	ea55 050a 	orrs.w	r5, r5, sl
 8023f7e:	d1dc      	bne.n	8023f3a <__ieee754_pow+0x32>
 8023f80:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023f84:	18db      	adds	r3, r3, r3
 8023f86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8023f8a:	4152      	adcs	r2, r2
 8023f8c:	429d      	cmp	r5, r3
 8023f8e:	e7d0      	b.n	8023f32 <__ieee754_pow+0x2a>
 8023f90:	2d00      	cmp	r5, #0
 8023f92:	da3b      	bge.n	802400c <__ieee754_pow+0x104>
 8023f94:	4b72      	ldr	r3, [pc, #456]	; (8024160 <__ieee754_pow+0x258>)
 8023f96:	4598      	cmp	r8, r3
 8023f98:	dc51      	bgt.n	802403e <__ieee754_pow+0x136>
 8023f9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8023f9e:	4598      	cmp	r8, r3
 8023fa0:	f340 84ac 	ble.w	80248fc <__ieee754_pow+0x9f4>
 8023fa4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023fa8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023fac:	2b14      	cmp	r3, #20
 8023fae:	dd0f      	ble.n	8023fd0 <__ieee754_pow+0xc8>
 8023fb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8023fb4:	fa22 f103 	lsr.w	r1, r2, r3
 8023fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8023fbc:	4293      	cmp	r3, r2
 8023fbe:	f040 849d 	bne.w	80248fc <__ieee754_pow+0x9f4>
 8023fc2:	f001 0101 	and.w	r1, r1, #1
 8023fc6:	f1c1 0302 	rsb	r3, r1, #2
 8023fca:	9304      	str	r3, [sp, #16]
 8023fcc:	b182      	cbz	r2, 8023ff0 <__ieee754_pow+0xe8>
 8023fce:	e05f      	b.n	8024090 <__ieee754_pow+0x188>
 8023fd0:	2a00      	cmp	r2, #0
 8023fd2:	d15b      	bne.n	802408c <__ieee754_pow+0x184>
 8023fd4:	f1c3 0314 	rsb	r3, r3, #20
 8023fd8:	fa48 f103 	asr.w	r1, r8, r3
 8023fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8023fe0:	4543      	cmp	r3, r8
 8023fe2:	f040 8488 	bne.w	80248f6 <__ieee754_pow+0x9ee>
 8023fe6:	f001 0101 	and.w	r1, r1, #1
 8023fea:	f1c1 0302 	rsb	r3, r1, #2
 8023fee:	9304      	str	r3, [sp, #16]
 8023ff0:	4b5c      	ldr	r3, [pc, #368]	; (8024164 <__ieee754_pow+0x25c>)
 8023ff2:	4598      	cmp	r8, r3
 8023ff4:	d132      	bne.n	802405c <__ieee754_pow+0x154>
 8023ff6:	f1b9 0f00 	cmp.w	r9, #0
 8023ffa:	f280 8478 	bge.w	80248ee <__ieee754_pow+0x9e6>
 8023ffe:	4959      	ldr	r1, [pc, #356]	; (8024164 <__ieee754_pow+0x25c>)
 8024000:	4632      	mov	r2, r6
 8024002:	463b      	mov	r3, r7
 8024004:	2000      	movs	r0, #0
 8024006:	f7dc fc41 	bl	800088c <__aeabi_ddiv>
 802400a:	e79c      	b.n	8023f46 <__ieee754_pow+0x3e>
 802400c:	2300      	movs	r3, #0
 802400e:	9304      	str	r3, [sp, #16]
 8024010:	2a00      	cmp	r2, #0
 8024012:	d13d      	bne.n	8024090 <__ieee754_pow+0x188>
 8024014:	4b51      	ldr	r3, [pc, #324]	; (802415c <__ieee754_pow+0x254>)
 8024016:	4598      	cmp	r8, r3
 8024018:	d1ea      	bne.n	8023ff0 <__ieee754_pow+0xe8>
 802401a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802401e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8024022:	ea53 030a 	orrs.w	r3, r3, sl
 8024026:	f000 845a 	beq.w	80248de <__ieee754_pow+0x9d6>
 802402a:	4b4f      	ldr	r3, [pc, #316]	; (8024168 <__ieee754_pow+0x260>)
 802402c:	429c      	cmp	r4, r3
 802402e:	dd08      	ble.n	8024042 <__ieee754_pow+0x13a>
 8024030:	f1b9 0f00 	cmp.w	r9, #0
 8024034:	f2c0 8457 	blt.w	80248e6 <__ieee754_pow+0x9de>
 8024038:	e9dd 0100 	ldrd	r0, r1, [sp]
 802403c:	e783      	b.n	8023f46 <__ieee754_pow+0x3e>
 802403e:	2302      	movs	r3, #2
 8024040:	e7e5      	b.n	802400e <__ieee754_pow+0x106>
 8024042:	f1b9 0f00 	cmp.w	r9, #0
 8024046:	f04f 0000 	mov.w	r0, #0
 802404a:	f04f 0100 	mov.w	r1, #0
 802404e:	f6bf af7a 	bge.w	8023f46 <__ieee754_pow+0x3e>
 8024052:	e9dd 0300 	ldrd	r0, r3, [sp]
 8024056:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802405a:	e774      	b.n	8023f46 <__ieee754_pow+0x3e>
 802405c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8024060:	d106      	bne.n	8024070 <__ieee754_pow+0x168>
 8024062:	4632      	mov	r2, r6
 8024064:	463b      	mov	r3, r7
 8024066:	4630      	mov	r0, r6
 8024068:	4639      	mov	r1, r7
 802406a:	f7dc fae5 	bl	8000638 <__aeabi_dmul>
 802406e:	e76a      	b.n	8023f46 <__ieee754_pow+0x3e>
 8024070:	4b3e      	ldr	r3, [pc, #248]	; (802416c <__ieee754_pow+0x264>)
 8024072:	4599      	cmp	r9, r3
 8024074:	d10c      	bne.n	8024090 <__ieee754_pow+0x188>
 8024076:	2d00      	cmp	r5, #0
 8024078:	db0a      	blt.n	8024090 <__ieee754_pow+0x188>
 802407a:	ec47 6b10 	vmov	d0, r6, r7
 802407e:	b009      	add	sp, #36	; 0x24
 8024080:	ecbd 8b06 	vpop	{d8-d10}
 8024084:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024088:	f000 bc6c 	b.w	8024964 <__ieee754_sqrt>
 802408c:	2300      	movs	r3, #0
 802408e:	9304      	str	r3, [sp, #16]
 8024090:	ec47 6b10 	vmov	d0, r6, r7
 8024094:	f000 fd4b 	bl	8024b2e <fabs>
 8024098:	ec51 0b10 	vmov	r0, r1, d0
 802409c:	f1ba 0f00 	cmp.w	sl, #0
 80240a0:	d129      	bne.n	80240f6 <__ieee754_pow+0x1ee>
 80240a2:	b124      	cbz	r4, 80240ae <__ieee754_pow+0x1a6>
 80240a4:	4b2f      	ldr	r3, [pc, #188]	; (8024164 <__ieee754_pow+0x25c>)
 80240a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80240aa:	429a      	cmp	r2, r3
 80240ac:	d123      	bne.n	80240f6 <__ieee754_pow+0x1ee>
 80240ae:	f1b9 0f00 	cmp.w	r9, #0
 80240b2:	da05      	bge.n	80240c0 <__ieee754_pow+0x1b8>
 80240b4:	4602      	mov	r2, r0
 80240b6:	460b      	mov	r3, r1
 80240b8:	2000      	movs	r0, #0
 80240ba:	492a      	ldr	r1, [pc, #168]	; (8024164 <__ieee754_pow+0x25c>)
 80240bc:	f7dc fbe6 	bl	800088c <__aeabi_ddiv>
 80240c0:	2d00      	cmp	r5, #0
 80240c2:	f6bf af40 	bge.w	8023f46 <__ieee754_pow+0x3e>
 80240c6:	9b04      	ldr	r3, [sp, #16]
 80240c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80240cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80240d0:	4323      	orrs	r3, r4
 80240d2:	d108      	bne.n	80240e6 <__ieee754_pow+0x1de>
 80240d4:	4602      	mov	r2, r0
 80240d6:	460b      	mov	r3, r1
 80240d8:	4610      	mov	r0, r2
 80240da:	4619      	mov	r1, r3
 80240dc:	f7dc f8f4 	bl	80002c8 <__aeabi_dsub>
 80240e0:	4602      	mov	r2, r0
 80240e2:	460b      	mov	r3, r1
 80240e4:	e78f      	b.n	8024006 <__ieee754_pow+0xfe>
 80240e6:	9b04      	ldr	r3, [sp, #16]
 80240e8:	2b01      	cmp	r3, #1
 80240ea:	f47f af2c 	bne.w	8023f46 <__ieee754_pow+0x3e>
 80240ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80240f2:	4619      	mov	r1, r3
 80240f4:	e727      	b.n	8023f46 <__ieee754_pow+0x3e>
 80240f6:	0feb      	lsrs	r3, r5, #31
 80240f8:	3b01      	subs	r3, #1
 80240fa:	9306      	str	r3, [sp, #24]
 80240fc:	9a06      	ldr	r2, [sp, #24]
 80240fe:	9b04      	ldr	r3, [sp, #16]
 8024100:	4313      	orrs	r3, r2
 8024102:	d102      	bne.n	802410a <__ieee754_pow+0x202>
 8024104:	4632      	mov	r2, r6
 8024106:	463b      	mov	r3, r7
 8024108:	e7e6      	b.n	80240d8 <__ieee754_pow+0x1d0>
 802410a:	4b19      	ldr	r3, [pc, #100]	; (8024170 <__ieee754_pow+0x268>)
 802410c:	4598      	cmp	r8, r3
 802410e:	f340 80fb 	ble.w	8024308 <__ieee754_pow+0x400>
 8024112:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8024116:	4598      	cmp	r8, r3
 8024118:	4b13      	ldr	r3, [pc, #76]	; (8024168 <__ieee754_pow+0x260>)
 802411a:	dd0c      	ble.n	8024136 <__ieee754_pow+0x22e>
 802411c:	429c      	cmp	r4, r3
 802411e:	dc0f      	bgt.n	8024140 <__ieee754_pow+0x238>
 8024120:	f1b9 0f00 	cmp.w	r9, #0
 8024124:	da0f      	bge.n	8024146 <__ieee754_pow+0x23e>
 8024126:	2000      	movs	r0, #0
 8024128:	b009      	add	sp, #36	; 0x24
 802412a:	ecbd 8b06 	vpop	{d8-d10}
 802412e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024132:	f000 bcf3 	b.w	8024b1c <__math_oflow>
 8024136:	429c      	cmp	r4, r3
 8024138:	dbf2      	blt.n	8024120 <__ieee754_pow+0x218>
 802413a:	4b0a      	ldr	r3, [pc, #40]	; (8024164 <__ieee754_pow+0x25c>)
 802413c:	429c      	cmp	r4, r3
 802413e:	dd19      	ble.n	8024174 <__ieee754_pow+0x26c>
 8024140:	f1b9 0f00 	cmp.w	r9, #0
 8024144:	dcef      	bgt.n	8024126 <__ieee754_pow+0x21e>
 8024146:	2000      	movs	r0, #0
 8024148:	b009      	add	sp, #36	; 0x24
 802414a:	ecbd 8b06 	vpop	{d8-d10}
 802414e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024152:	f000 bcda 	b.w	8024b0a <__math_uflow>
 8024156:	bf00      	nop
 8024158:	fff00000 	.word	0xfff00000
 802415c:	7ff00000 	.word	0x7ff00000
 8024160:	433fffff 	.word	0x433fffff
 8024164:	3ff00000 	.word	0x3ff00000
 8024168:	3fefffff 	.word	0x3fefffff
 802416c:	3fe00000 	.word	0x3fe00000
 8024170:	41e00000 	.word	0x41e00000
 8024174:	4b60      	ldr	r3, [pc, #384]	; (80242f8 <__ieee754_pow+0x3f0>)
 8024176:	2200      	movs	r2, #0
 8024178:	f7dc f8a6 	bl	80002c8 <__aeabi_dsub>
 802417c:	a354      	add	r3, pc, #336	; (adr r3, 80242d0 <__ieee754_pow+0x3c8>)
 802417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024182:	4604      	mov	r4, r0
 8024184:	460d      	mov	r5, r1
 8024186:	f7dc fa57 	bl	8000638 <__aeabi_dmul>
 802418a:	a353      	add	r3, pc, #332	; (adr r3, 80242d8 <__ieee754_pow+0x3d0>)
 802418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024190:	4606      	mov	r6, r0
 8024192:	460f      	mov	r7, r1
 8024194:	4620      	mov	r0, r4
 8024196:	4629      	mov	r1, r5
 8024198:	f7dc fa4e 	bl	8000638 <__aeabi_dmul>
 802419c:	4b57      	ldr	r3, [pc, #348]	; (80242fc <__ieee754_pow+0x3f4>)
 802419e:	4682      	mov	sl, r0
 80241a0:	468b      	mov	fp, r1
 80241a2:	2200      	movs	r2, #0
 80241a4:	4620      	mov	r0, r4
 80241a6:	4629      	mov	r1, r5
 80241a8:	f7dc fa46 	bl	8000638 <__aeabi_dmul>
 80241ac:	4602      	mov	r2, r0
 80241ae:	460b      	mov	r3, r1
 80241b0:	a14b      	add	r1, pc, #300	; (adr r1, 80242e0 <__ieee754_pow+0x3d8>)
 80241b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80241b6:	f7dc f887 	bl	80002c8 <__aeabi_dsub>
 80241ba:	4622      	mov	r2, r4
 80241bc:	462b      	mov	r3, r5
 80241be:	f7dc fa3b 	bl	8000638 <__aeabi_dmul>
 80241c2:	4602      	mov	r2, r0
 80241c4:	460b      	mov	r3, r1
 80241c6:	2000      	movs	r0, #0
 80241c8:	494d      	ldr	r1, [pc, #308]	; (8024300 <__ieee754_pow+0x3f8>)
 80241ca:	f7dc f87d 	bl	80002c8 <__aeabi_dsub>
 80241ce:	4622      	mov	r2, r4
 80241d0:	4680      	mov	r8, r0
 80241d2:	4689      	mov	r9, r1
 80241d4:	462b      	mov	r3, r5
 80241d6:	4620      	mov	r0, r4
 80241d8:	4629      	mov	r1, r5
 80241da:	f7dc fa2d 	bl	8000638 <__aeabi_dmul>
 80241de:	4602      	mov	r2, r0
 80241e0:	460b      	mov	r3, r1
 80241e2:	4640      	mov	r0, r8
 80241e4:	4649      	mov	r1, r9
 80241e6:	f7dc fa27 	bl	8000638 <__aeabi_dmul>
 80241ea:	a33f      	add	r3, pc, #252	; (adr r3, 80242e8 <__ieee754_pow+0x3e0>)
 80241ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241f0:	f7dc fa22 	bl	8000638 <__aeabi_dmul>
 80241f4:	4602      	mov	r2, r0
 80241f6:	460b      	mov	r3, r1
 80241f8:	4650      	mov	r0, sl
 80241fa:	4659      	mov	r1, fp
 80241fc:	f7dc f864 	bl	80002c8 <__aeabi_dsub>
 8024200:	4602      	mov	r2, r0
 8024202:	460b      	mov	r3, r1
 8024204:	4680      	mov	r8, r0
 8024206:	4689      	mov	r9, r1
 8024208:	4630      	mov	r0, r6
 802420a:	4639      	mov	r1, r7
 802420c:	f7dc f85e 	bl	80002cc <__adddf3>
 8024210:	2000      	movs	r0, #0
 8024212:	4632      	mov	r2, r6
 8024214:	463b      	mov	r3, r7
 8024216:	4604      	mov	r4, r0
 8024218:	460d      	mov	r5, r1
 802421a:	f7dc f855 	bl	80002c8 <__aeabi_dsub>
 802421e:	4602      	mov	r2, r0
 8024220:	460b      	mov	r3, r1
 8024222:	4640      	mov	r0, r8
 8024224:	4649      	mov	r1, r9
 8024226:	f7dc f84f 	bl	80002c8 <__aeabi_dsub>
 802422a:	9b04      	ldr	r3, [sp, #16]
 802422c:	9a06      	ldr	r2, [sp, #24]
 802422e:	3b01      	subs	r3, #1
 8024230:	4313      	orrs	r3, r2
 8024232:	4682      	mov	sl, r0
 8024234:	468b      	mov	fp, r1
 8024236:	f040 81e7 	bne.w	8024608 <__ieee754_pow+0x700>
 802423a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80242f0 <__ieee754_pow+0x3e8>
 802423e:	eeb0 8a47 	vmov.f32	s16, s14
 8024242:	eef0 8a67 	vmov.f32	s17, s15
 8024246:	e9dd 6700 	ldrd	r6, r7, [sp]
 802424a:	2600      	movs	r6, #0
 802424c:	4632      	mov	r2, r6
 802424e:	463b      	mov	r3, r7
 8024250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024254:	f7dc f838 	bl	80002c8 <__aeabi_dsub>
 8024258:	4622      	mov	r2, r4
 802425a:	462b      	mov	r3, r5
 802425c:	f7dc f9ec 	bl	8000638 <__aeabi_dmul>
 8024260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024264:	4680      	mov	r8, r0
 8024266:	4689      	mov	r9, r1
 8024268:	4650      	mov	r0, sl
 802426a:	4659      	mov	r1, fp
 802426c:	f7dc f9e4 	bl	8000638 <__aeabi_dmul>
 8024270:	4602      	mov	r2, r0
 8024272:	460b      	mov	r3, r1
 8024274:	4640      	mov	r0, r8
 8024276:	4649      	mov	r1, r9
 8024278:	f7dc f828 	bl	80002cc <__adddf3>
 802427c:	4632      	mov	r2, r6
 802427e:	463b      	mov	r3, r7
 8024280:	4680      	mov	r8, r0
 8024282:	4689      	mov	r9, r1
 8024284:	4620      	mov	r0, r4
 8024286:	4629      	mov	r1, r5
 8024288:	f7dc f9d6 	bl	8000638 <__aeabi_dmul>
 802428c:	460b      	mov	r3, r1
 802428e:	4604      	mov	r4, r0
 8024290:	460d      	mov	r5, r1
 8024292:	4602      	mov	r2, r0
 8024294:	4649      	mov	r1, r9
 8024296:	4640      	mov	r0, r8
 8024298:	f7dc f818 	bl	80002cc <__adddf3>
 802429c:	4b19      	ldr	r3, [pc, #100]	; (8024304 <__ieee754_pow+0x3fc>)
 802429e:	4299      	cmp	r1, r3
 80242a0:	ec45 4b19 	vmov	d9, r4, r5
 80242a4:	4606      	mov	r6, r0
 80242a6:	460f      	mov	r7, r1
 80242a8:	468b      	mov	fp, r1
 80242aa:	f340 82f1 	ble.w	8024890 <__ieee754_pow+0x988>
 80242ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80242b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80242b6:	4303      	orrs	r3, r0
 80242b8:	f000 81e4 	beq.w	8024684 <__ieee754_pow+0x77c>
 80242bc:	ec51 0b18 	vmov	r0, r1, d8
 80242c0:	2200      	movs	r2, #0
 80242c2:	2300      	movs	r3, #0
 80242c4:	f7dc fc2a 	bl	8000b1c <__aeabi_dcmplt>
 80242c8:	3800      	subs	r0, #0
 80242ca:	bf18      	it	ne
 80242cc:	2001      	movne	r0, #1
 80242ce:	e72b      	b.n	8024128 <__ieee754_pow+0x220>
 80242d0:	60000000 	.word	0x60000000
 80242d4:	3ff71547 	.word	0x3ff71547
 80242d8:	f85ddf44 	.word	0xf85ddf44
 80242dc:	3e54ae0b 	.word	0x3e54ae0b
 80242e0:	55555555 	.word	0x55555555
 80242e4:	3fd55555 	.word	0x3fd55555
 80242e8:	652b82fe 	.word	0x652b82fe
 80242ec:	3ff71547 	.word	0x3ff71547
 80242f0:	00000000 	.word	0x00000000
 80242f4:	bff00000 	.word	0xbff00000
 80242f8:	3ff00000 	.word	0x3ff00000
 80242fc:	3fd00000 	.word	0x3fd00000
 8024300:	3fe00000 	.word	0x3fe00000
 8024304:	408fffff 	.word	0x408fffff
 8024308:	4bd5      	ldr	r3, [pc, #852]	; (8024660 <__ieee754_pow+0x758>)
 802430a:	402b      	ands	r3, r5
 802430c:	2200      	movs	r2, #0
 802430e:	b92b      	cbnz	r3, 802431c <__ieee754_pow+0x414>
 8024310:	4bd4      	ldr	r3, [pc, #848]	; (8024664 <__ieee754_pow+0x75c>)
 8024312:	f7dc f991 	bl	8000638 <__aeabi_dmul>
 8024316:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802431a:	460c      	mov	r4, r1
 802431c:	1523      	asrs	r3, r4, #20
 802431e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024322:	4413      	add	r3, r2
 8024324:	9305      	str	r3, [sp, #20]
 8024326:	4bd0      	ldr	r3, [pc, #832]	; (8024668 <__ieee754_pow+0x760>)
 8024328:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802432c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8024330:	429c      	cmp	r4, r3
 8024332:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8024336:	dd08      	ble.n	802434a <__ieee754_pow+0x442>
 8024338:	4bcc      	ldr	r3, [pc, #816]	; (802466c <__ieee754_pow+0x764>)
 802433a:	429c      	cmp	r4, r3
 802433c:	f340 8162 	ble.w	8024604 <__ieee754_pow+0x6fc>
 8024340:	9b05      	ldr	r3, [sp, #20]
 8024342:	3301      	adds	r3, #1
 8024344:	9305      	str	r3, [sp, #20]
 8024346:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802434a:	2400      	movs	r4, #0
 802434c:	00e3      	lsls	r3, r4, #3
 802434e:	9307      	str	r3, [sp, #28]
 8024350:	4bc7      	ldr	r3, [pc, #796]	; (8024670 <__ieee754_pow+0x768>)
 8024352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024356:	ed93 7b00 	vldr	d7, [r3]
 802435a:	4629      	mov	r1, r5
 802435c:	ec53 2b17 	vmov	r2, r3, d7
 8024360:	eeb0 9a47 	vmov.f32	s18, s14
 8024364:	eef0 9a67 	vmov.f32	s19, s15
 8024368:	4682      	mov	sl, r0
 802436a:	f7db ffad 	bl	80002c8 <__aeabi_dsub>
 802436e:	4652      	mov	r2, sl
 8024370:	4606      	mov	r6, r0
 8024372:	460f      	mov	r7, r1
 8024374:	462b      	mov	r3, r5
 8024376:	ec51 0b19 	vmov	r0, r1, d9
 802437a:	f7db ffa7 	bl	80002cc <__adddf3>
 802437e:	4602      	mov	r2, r0
 8024380:	460b      	mov	r3, r1
 8024382:	2000      	movs	r0, #0
 8024384:	49bb      	ldr	r1, [pc, #748]	; (8024674 <__ieee754_pow+0x76c>)
 8024386:	f7dc fa81 	bl	800088c <__aeabi_ddiv>
 802438a:	ec41 0b1a 	vmov	d10, r0, r1
 802438e:	4602      	mov	r2, r0
 8024390:	460b      	mov	r3, r1
 8024392:	4630      	mov	r0, r6
 8024394:	4639      	mov	r1, r7
 8024396:	f7dc f94f 	bl	8000638 <__aeabi_dmul>
 802439a:	2300      	movs	r3, #0
 802439c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80243a0:	9302      	str	r3, [sp, #8]
 80243a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80243a6:	46ab      	mov	fp, r5
 80243a8:	106d      	asrs	r5, r5, #1
 80243aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80243ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80243b2:	ec41 0b18 	vmov	d8, r0, r1
 80243b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80243ba:	2200      	movs	r2, #0
 80243bc:	4640      	mov	r0, r8
 80243be:	4649      	mov	r1, r9
 80243c0:	4614      	mov	r4, r2
 80243c2:	461d      	mov	r5, r3
 80243c4:	f7dc f938 	bl	8000638 <__aeabi_dmul>
 80243c8:	4602      	mov	r2, r0
 80243ca:	460b      	mov	r3, r1
 80243cc:	4630      	mov	r0, r6
 80243ce:	4639      	mov	r1, r7
 80243d0:	f7db ff7a 	bl	80002c8 <__aeabi_dsub>
 80243d4:	ec53 2b19 	vmov	r2, r3, d9
 80243d8:	4606      	mov	r6, r0
 80243da:	460f      	mov	r7, r1
 80243dc:	4620      	mov	r0, r4
 80243de:	4629      	mov	r1, r5
 80243e0:	f7db ff72 	bl	80002c8 <__aeabi_dsub>
 80243e4:	4602      	mov	r2, r0
 80243e6:	460b      	mov	r3, r1
 80243e8:	4650      	mov	r0, sl
 80243ea:	4659      	mov	r1, fp
 80243ec:	f7db ff6c 	bl	80002c8 <__aeabi_dsub>
 80243f0:	4642      	mov	r2, r8
 80243f2:	464b      	mov	r3, r9
 80243f4:	f7dc f920 	bl	8000638 <__aeabi_dmul>
 80243f8:	4602      	mov	r2, r0
 80243fa:	460b      	mov	r3, r1
 80243fc:	4630      	mov	r0, r6
 80243fe:	4639      	mov	r1, r7
 8024400:	f7db ff62 	bl	80002c8 <__aeabi_dsub>
 8024404:	ec53 2b1a 	vmov	r2, r3, d10
 8024408:	f7dc f916 	bl	8000638 <__aeabi_dmul>
 802440c:	ec53 2b18 	vmov	r2, r3, d8
 8024410:	ec41 0b19 	vmov	d9, r0, r1
 8024414:	ec51 0b18 	vmov	r0, r1, d8
 8024418:	f7dc f90e 	bl	8000638 <__aeabi_dmul>
 802441c:	a37c      	add	r3, pc, #496	; (adr r3, 8024610 <__ieee754_pow+0x708>)
 802441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024422:	4604      	mov	r4, r0
 8024424:	460d      	mov	r5, r1
 8024426:	f7dc f907 	bl	8000638 <__aeabi_dmul>
 802442a:	a37b      	add	r3, pc, #492	; (adr r3, 8024618 <__ieee754_pow+0x710>)
 802442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024430:	f7db ff4c 	bl	80002cc <__adddf3>
 8024434:	4622      	mov	r2, r4
 8024436:	462b      	mov	r3, r5
 8024438:	f7dc f8fe 	bl	8000638 <__aeabi_dmul>
 802443c:	a378      	add	r3, pc, #480	; (adr r3, 8024620 <__ieee754_pow+0x718>)
 802443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024442:	f7db ff43 	bl	80002cc <__adddf3>
 8024446:	4622      	mov	r2, r4
 8024448:	462b      	mov	r3, r5
 802444a:	f7dc f8f5 	bl	8000638 <__aeabi_dmul>
 802444e:	a376      	add	r3, pc, #472	; (adr r3, 8024628 <__ieee754_pow+0x720>)
 8024450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024454:	f7db ff3a 	bl	80002cc <__adddf3>
 8024458:	4622      	mov	r2, r4
 802445a:	462b      	mov	r3, r5
 802445c:	f7dc f8ec 	bl	8000638 <__aeabi_dmul>
 8024460:	a373      	add	r3, pc, #460	; (adr r3, 8024630 <__ieee754_pow+0x728>)
 8024462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024466:	f7db ff31 	bl	80002cc <__adddf3>
 802446a:	4622      	mov	r2, r4
 802446c:	462b      	mov	r3, r5
 802446e:	f7dc f8e3 	bl	8000638 <__aeabi_dmul>
 8024472:	a371      	add	r3, pc, #452	; (adr r3, 8024638 <__ieee754_pow+0x730>)
 8024474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024478:	f7db ff28 	bl	80002cc <__adddf3>
 802447c:	4622      	mov	r2, r4
 802447e:	4606      	mov	r6, r0
 8024480:	460f      	mov	r7, r1
 8024482:	462b      	mov	r3, r5
 8024484:	4620      	mov	r0, r4
 8024486:	4629      	mov	r1, r5
 8024488:	f7dc f8d6 	bl	8000638 <__aeabi_dmul>
 802448c:	4602      	mov	r2, r0
 802448e:	460b      	mov	r3, r1
 8024490:	4630      	mov	r0, r6
 8024492:	4639      	mov	r1, r7
 8024494:	f7dc f8d0 	bl	8000638 <__aeabi_dmul>
 8024498:	4642      	mov	r2, r8
 802449a:	4604      	mov	r4, r0
 802449c:	460d      	mov	r5, r1
 802449e:	464b      	mov	r3, r9
 80244a0:	ec51 0b18 	vmov	r0, r1, d8
 80244a4:	f7db ff12 	bl	80002cc <__adddf3>
 80244a8:	ec53 2b19 	vmov	r2, r3, d9
 80244ac:	f7dc f8c4 	bl	8000638 <__aeabi_dmul>
 80244b0:	4622      	mov	r2, r4
 80244b2:	462b      	mov	r3, r5
 80244b4:	f7db ff0a 	bl	80002cc <__adddf3>
 80244b8:	4642      	mov	r2, r8
 80244ba:	4682      	mov	sl, r0
 80244bc:	468b      	mov	fp, r1
 80244be:	464b      	mov	r3, r9
 80244c0:	4640      	mov	r0, r8
 80244c2:	4649      	mov	r1, r9
 80244c4:	f7dc f8b8 	bl	8000638 <__aeabi_dmul>
 80244c8:	4b6b      	ldr	r3, [pc, #428]	; (8024678 <__ieee754_pow+0x770>)
 80244ca:	2200      	movs	r2, #0
 80244cc:	4606      	mov	r6, r0
 80244ce:	460f      	mov	r7, r1
 80244d0:	f7db fefc 	bl	80002cc <__adddf3>
 80244d4:	4652      	mov	r2, sl
 80244d6:	465b      	mov	r3, fp
 80244d8:	f7db fef8 	bl	80002cc <__adddf3>
 80244dc:	2000      	movs	r0, #0
 80244de:	4604      	mov	r4, r0
 80244e0:	460d      	mov	r5, r1
 80244e2:	4602      	mov	r2, r0
 80244e4:	460b      	mov	r3, r1
 80244e6:	4640      	mov	r0, r8
 80244e8:	4649      	mov	r1, r9
 80244ea:	f7dc f8a5 	bl	8000638 <__aeabi_dmul>
 80244ee:	4b62      	ldr	r3, [pc, #392]	; (8024678 <__ieee754_pow+0x770>)
 80244f0:	4680      	mov	r8, r0
 80244f2:	4689      	mov	r9, r1
 80244f4:	2200      	movs	r2, #0
 80244f6:	4620      	mov	r0, r4
 80244f8:	4629      	mov	r1, r5
 80244fa:	f7db fee5 	bl	80002c8 <__aeabi_dsub>
 80244fe:	4632      	mov	r2, r6
 8024500:	463b      	mov	r3, r7
 8024502:	f7db fee1 	bl	80002c8 <__aeabi_dsub>
 8024506:	4602      	mov	r2, r0
 8024508:	460b      	mov	r3, r1
 802450a:	4650      	mov	r0, sl
 802450c:	4659      	mov	r1, fp
 802450e:	f7db fedb 	bl	80002c8 <__aeabi_dsub>
 8024512:	ec53 2b18 	vmov	r2, r3, d8
 8024516:	f7dc f88f 	bl	8000638 <__aeabi_dmul>
 802451a:	4622      	mov	r2, r4
 802451c:	4606      	mov	r6, r0
 802451e:	460f      	mov	r7, r1
 8024520:	462b      	mov	r3, r5
 8024522:	ec51 0b19 	vmov	r0, r1, d9
 8024526:	f7dc f887 	bl	8000638 <__aeabi_dmul>
 802452a:	4602      	mov	r2, r0
 802452c:	460b      	mov	r3, r1
 802452e:	4630      	mov	r0, r6
 8024530:	4639      	mov	r1, r7
 8024532:	f7db fecb 	bl	80002cc <__adddf3>
 8024536:	4606      	mov	r6, r0
 8024538:	460f      	mov	r7, r1
 802453a:	4602      	mov	r2, r0
 802453c:	460b      	mov	r3, r1
 802453e:	4640      	mov	r0, r8
 8024540:	4649      	mov	r1, r9
 8024542:	f7db fec3 	bl	80002cc <__adddf3>
 8024546:	a33e      	add	r3, pc, #248	; (adr r3, 8024640 <__ieee754_pow+0x738>)
 8024548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802454c:	2000      	movs	r0, #0
 802454e:	4604      	mov	r4, r0
 8024550:	460d      	mov	r5, r1
 8024552:	f7dc f871 	bl	8000638 <__aeabi_dmul>
 8024556:	4642      	mov	r2, r8
 8024558:	ec41 0b18 	vmov	d8, r0, r1
 802455c:	464b      	mov	r3, r9
 802455e:	4620      	mov	r0, r4
 8024560:	4629      	mov	r1, r5
 8024562:	f7db feb1 	bl	80002c8 <__aeabi_dsub>
 8024566:	4602      	mov	r2, r0
 8024568:	460b      	mov	r3, r1
 802456a:	4630      	mov	r0, r6
 802456c:	4639      	mov	r1, r7
 802456e:	f7db feab 	bl	80002c8 <__aeabi_dsub>
 8024572:	a335      	add	r3, pc, #212	; (adr r3, 8024648 <__ieee754_pow+0x740>)
 8024574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024578:	f7dc f85e 	bl	8000638 <__aeabi_dmul>
 802457c:	a334      	add	r3, pc, #208	; (adr r3, 8024650 <__ieee754_pow+0x748>)
 802457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024582:	4606      	mov	r6, r0
 8024584:	460f      	mov	r7, r1
 8024586:	4620      	mov	r0, r4
 8024588:	4629      	mov	r1, r5
 802458a:	f7dc f855 	bl	8000638 <__aeabi_dmul>
 802458e:	4602      	mov	r2, r0
 8024590:	460b      	mov	r3, r1
 8024592:	4630      	mov	r0, r6
 8024594:	4639      	mov	r1, r7
 8024596:	f7db fe99 	bl	80002cc <__adddf3>
 802459a:	9a07      	ldr	r2, [sp, #28]
 802459c:	4b37      	ldr	r3, [pc, #220]	; (802467c <__ieee754_pow+0x774>)
 802459e:	4413      	add	r3, r2
 80245a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245a4:	f7db fe92 	bl	80002cc <__adddf3>
 80245a8:	4682      	mov	sl, r0
 80245aa:	9805      	ldr	r0, [sp, #20]
 80245ac:	468b      	mov	fp, r1
 80245ae:	f7db ffd9 	bl	8000564 <__aeabi_i2d>
 80245b2:	9a07      	ldr	r2, [sp, #28]
 80245b4:	4b32      	ldr	r3, [pc, #200]	; (8024680 <__ieee754_pow+0x778>)
 80245b6:	4413      	add	r3, r2
 80245b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80245bc:	4606      	mov	r6, r0
 80245be:	460f      	mov	r7, r1
 80245c0:	4652      	mov	r2, sl
 80245c2:	465b      	mov	r3, fp
 80245c4:	ec51 0b18 	vmov	r0, r1, d8
 80245c8:	f7db fe80 	bl	80002cc <__adddf3>
 80245cc:	4642      	mov	r2, r8
 80245ce:	464b      	mov	r3, r9
 80245d0:	f7db fe7c 	bl	80002cc <__adddf3>
 80245d4:	4632      	mov	r2, r6
 80245d6:	463b      	mov	r3, r7
 80245d8:	f7db fe78 	bl	80002cc <__adddf3>
 80245dc:	2000      	movs	r0, #0
 80245de:	4632      	mov	r2, r6
 80245e0:	463b      	mov	r3, r7
 80245e2:	4604      	mov	r4, r0
 80245e4:	460d      	mov	r5, r1
 80245e6:	f7db fe6f 	bl	80002c8 <__aeabi_dsub>
 80245ea:	4642      	mov	r2, r8
 80245ec:	464b      	mov	r3, r9
 80245ee:	f7db fe6b 	bl	80002c8 <__aeabi_dsub>
 80245f2:	ec53 2b18 	vmov	r2, r3, d8
 80245f6:	f7db fe67 	bl	80002c8 <__aeabi_dsub>
 80245fa:	4602      	mov	r2, r0
 80245fc:	460b      	mov	r3, r1
 80245fe:	4650      	mov	r0, sl
 8024600:	4659      	mov	r1, fp
 8024602:	e610      	b.n	8024226 <__ieee754_pow+0x31e>
 8024604:	2401      	movs	r4, #1
 8024606:	e6a1      	b.n	802434c <__ieee754_pow+0x444>
 8024608:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8024658 <__ieee754_pow+0x750>
 802460c:	e617      	b.n	802423e <__ieee754_pow+0x336>
 802460e:	bf00      	nop
 8024610:	4a454eef 	.word	0x4a454eef
 8024614:	3fca7e28 	.word	0x3fca7e28
 8024618:	93c9db65 	.word	0x93c9db65
 802461c:	3fcd864a 	.word	0x3fcd864a
 8024620:	a91d4101 	.word	0xa91d4101
 8024624:	3fd17460 	.word	0x3fd17460
 8024628:	518f264d 	.word	0x518f264d
 802462c:	3fd55555 	.word	0x3fd55555
 8024630:	db6fabff 	.word	0xdb6fabff
 8024634:	3fdb6db6 	.word	0x3fdb6db6
 8024638:	33333303 	.word	0x33333303
 802463c:	3fe33333 	.word	0x3fe33333
 8024640:	e0000000 	.word	0xe0000000
 8024644:	3feec709 	.word	0x3feec709
 8024648:	dc3a03fd 	.word	0xdc3a03fd
 802464c:	3feec709 	.word	0x3feec709
 8024650:	145b01f5 	.word	0x145b01f5
 8024654:	be3e2fe0 	.word	0xbe3e2fe0
 8024658:	00000000 	.word	0x00000000
 802465c:	3ff00000 	.word	0x3ff00000
 8024660:	7ff00000 	.word	0x7ff00000
 8024664:	43400000 	.word	0x43400000
 8024668:	0003988e 	.word	0x0003988e
 802466c:	000bb679 	.word	0x000bb679
 8024670:	080260f0 	.word	0x080260f0
 8024674:	3ff00000 	.word	0x3ff00000
 8024678:	40080000 	.word	0x40080000
 802467c:	08026110 	.word	0x08026110
 8024680:	08026100 	.word	0x08026100
 8024684:	a3b5      	add	r3, pc, #724	; (adr r3, 802495c <__ieee754_pow+0xa54>)
 8024686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802468a:	4640      	mov	r0, r8
 802468c:	4649      	mov	r1, r9
 802468e:	f7db fe1d 	bl	80002cc <__adddf3>
 8024692:	4622      	mov	r2, r4
 8024694:	ec41 0b1a 	vmov	d10, r0, r1
 8024698:	462b      	mov	r3, r5
 802469a:	4630      	mov	r0, r6
 802469c:	4639      	mov	r1, r7
 802469e:	f7db fe13 	bl	80002c8 <__aeabi_dsub>
 80246a2:	4602      	mov	r2, r0
 80246a4:	460b      	mov	r3, r1
 80246a6:	ec51 0b1a 	vmov	r0, r1, d10
 80246aa:	f7dc fa55 	bl	8000b58 <__aeabi_dcmpgt>
 80246ae:	2800      	cmp	r0, #0
 80246b0:	f47f ae04 	bne.w	80242bc <__ieee754_pow+0x3b4>
 80246b4:	4aa4      	ldr	r2, [pc, #656]	; (8024948 <__ieee754_pow+0xa40>)
 80246b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80246ba:	4293      	cmp	r3, r2
 80246bc:	f340 8108 	ble.w	80248d0 <__ieee754_pow+0x9c8>
 80246c0:	151b      	asrs	r3, r3, #20
 80246c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80246c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80246ca:	fa4a f303 	asr.w	r3, sl, r3
 80246ce:	445b      	add	r3, fp
 80246d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80246d4:	4e9d      	ldr	r6, [pc, #628]	; (802494c <__ieee754_pow+0xa44>)
 80246d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80246da:	4116      	asrs	r6, r2
 80246dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80246e0:	2000      	movs	r0, #0
 80246e2:	ea23 0106 	bic.w	r1, r3, r6
 80246e6:	f1c2 0214 	rsb	r2, r2, #20
 80246ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80246ee:	fa4a fa02 	asr.w	sl, sl, r2
 80246f2:	f1bb 0f00 	cmp.w	fp, #0
 80246f6:	4602      	mov	r2, r0
 80246f8:	460b      	mov	r3, r1
 80246fa:	4620      	mov	r0, r4
 80246fc:	4629      	mov	r1, r5
 80246fe:	bfb8      	it	lt
 8024700:	f1ca 0a00 	rsblt	sl, sl, #0
 8024704:	f7db fde0 	bl	80002c8 <__aeabi_dsub>
 8024708:	ec41 0b19 	vmov	d9, r0, r1
 802470c:	4642      	mov	r2, r8
 802470e:	464b      	mov	r3, r9
 8024710:	ec51 0b19 	vmov	r0, r1, d9
 8024714:	f7db fdda 	bl	80002cc <__adddf3>
 8024718:	a37b      	add	r3, pc, #492	; (adr r3, 8024908 <__ieee754_pow+0xa00>)
 802471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802471e:	2000      	movs	r0, #0
 8024720:	4604      	mov	r4, r0
 8024722:	460d      	mov	r5, r1
 8024724:	f7db ff88 	bl	8000638 <__aeabi_dmul>
 8024728:	ec53 2b19 	vmov	r2, r3, d9
 802472c:	4606      	mov	r6, r0
 802472e:	460f      	mov	r7, r1
 8024730:	4620      	mov	r0, r4
 8024732:	4629      	mov	r1, r5
 8024734:	f7db fdc8 	bl	80002c8 <__aeabi_dsub>
 8024738:	4602      	mov	r2, r0
 802473a:	460b      	mov	r3, r1
 802473c:	4640      	mov	r0, r8
 802473e:	4649      	mov	r1, r9
 8024740:	f7db fdc2 	bl	80002c8 <__aeabi_dsub>
 8024744:	a372      	add	r3, pc, #456	; (adr r3, 8024910 <__ieee754_pow+0xa08>)
 8024746:	e9d3 2300 	ldrd	r2, r3, [r3]
 802474a:	f7db ff75 	bl	8000638 <__aeabi_dmul>
 802474e:	a372      	add	r3, pc, #456	; (adr r3, 8024918 <__ieee754_pow+0xa10>)
 8024750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024754:	4680      	mov	r8, r0
 8024756:	4689      	mov	r9, r1
 8024758:	4620      	mov	r0, r4
 802475a:	4629      	mov	r1, r5
 802475c:	f7db ff6c 	bl	8000638 <__aeabi_dmul>
 8024760:	4602      	mov	r2, r0
 8024762:	460b      	mov	r3, r1
 8024764:	4640      	mov	r0, r8
 8024766:	4649      	mov	r1, r9
 8024768:	f7db fdb0 	bl	80002cc <__adddf3>
 802476c:	4604      	mov	r4, r0
 802476e:	460d      	mov	r5, r1
 8024770:	4602      	mov	r2, r0
 8024772:	460b      	mov	r3, r1
 8024774:	4630      	mov	r0, r6
 8024776:	4639      	mov	r1, r7
 8024778:	f7db fda8 	bl	80002cc <__adddf3>
 802477c:	4632      	mov	r2, r6
 802477e:	463b      	mov	r3, r7
 8024780:	4680      	mov	r8, r0
 8024782:	4689      	mov	r9, r1
 8024784:	f7db fda0 	bl	80002c8 <__aeabi_dsub>
 8024788:	4602      	mov	r2, r0
 802478a:	460b      	mov	r3, r1
 802478c:	4620      	mov	r0, r4
 802478e:	4629      	mov	r1, r5
 8024790:	f7db fd9a 	bl	80002c8 <__aeabi_dsub>
 8024794:	4642      	mov	r2, r8
 8024796:	4606      	mov	r6, r0
 8024798:	460f      	mov	r7, r1
 802479a:	464b      	mov	r3, r9
 802479c:	4640      	mov	r0, r8
 802479e:	4649      	mov	r1, r9
 80247a0:	f7db ff4a 	bl	8000638 <__aeabi_dmul>
 80247a4:	a35e      	add	r3, pc, #376	; (adr r3, 8024920 <__ieee754_pow+0xa18>)
 80247a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247aa:	4604      	mov	r4, r0
 80247ac:	460d      	mov	r5, r1
 80247ae:	f7db ff43 	bl	8000638 <__aeabi_dmul>
 80247b2:	a35d      	add	r3, pc, #372	; (adr r3, 8024928 <__ieee754_pow+0xa20>)
 80247b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247b8:	f7db fd86 	bl	80002c8 <__aeabi_dsub>
 80247bc:	4622      	mov	r2, r4
 80247be:	462b      	mov	r3, r5
 80247c0:	f7db ff3a 	bl	8000638 <__aeabi_dmul>
 80247c4:	a35a      	add	r3, pc, #360	; (adr r3, 8024930 <__ieee754_pow+0xa28>)
 80247c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247ca:	f7db fd7f 	bl	80002cc <__adddf3>
 80247ce:	4622      	mov	r2, r4
 80247d0:	462b      	mov	r3, r5
 80247d2:	f7db ff31 	bl	8000638 <__aeabi_dmul>
 80247d6:	a358      	add	r3, pc, #352	; (adr r3, 8024938 <__ieee754_pow+0xa30>)
 80247d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247dc:	f7db fd74 	bl	80002c8 <__aeabi_dsub>
 80247e0:	4622      	mov	r2, r4
 80247e2:	462b      	mov	r3, r5
 80247e4:	f7db ff28 	bl	8000638 <__aeabi_dmul>
 80247e8:	a355      	add	r3, pc, #340	; (adr r3, 8024940 <__ieee754_pow+0xa38>)
 80247ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247ee:	f7db fd6d 	bl	80002cc <__adddf3>
 80247f2:	4622      	mov	r2, r4
 80247f4:	462b      	mov	r3, r5
 80247f6:	f7db ff1f 	bl	8000638 <__aeabi_dmul>
 80247fa:	4602      	mov	r2, r0
 80247fc:	460b      	mov	r3, r1
 80247fe:	4640      	mov	r0, r8
 8024800:	4649      	mov	r1, r9
 8024802:	f7db fd61 	bl	80002c8 <__aeabi_dsub>
 8024806:	4604      	mov	r4, r0
 8024808:	460d      	mov	r5, r1
 802480a:	4602      	mov	r2, r0
 802480c:	460b      	mov	r3, r1
 802480e:	4640      	mov	r0, r8
 8024810:	4649      	mov	r1, r9
 8024812:	f7db ff11 	bl	8000638 <__aeabi_dmul>
 8024816:	2200      	movs	r2, #0
 8024818:	ec41 0b19 	vmov	d9, r0, r1
 802481c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024820:	4620      	mov	r0, r4
 8024822:	4629      	mov	r1, r5
 8024824:	f7db fd50 	bl	80002c8 <__aeabi_dsub>
 8024828:	4602      	mov	r2, r0
 802482a:	460b      	mov	r3, r1
 802482c:	ec51 0b19 	vmov	r0, r1, d9
 8024830:	f7dc f82c 	bl	800088c <__aeabi_ddiv>
 8024834:	4632      	mov	r2, r6
 8024836:	4604      	mov	r4, r0
 8024838:	460d      	mov	r5, r1
 802483a:	463b      	mov	r3, r7
 802483c:	4640      	mov	r0, r8
 802483e:	4649      	mov	r1, r9
 8024840:	f7db fefa 	bl	8000638 <__aeabi_dmul>
 8024844:	4632      	mov	r2, r6
 8024846:	463b      	mov	r3, r7
 8024848:	f7db fd40 	bl	80002cc <__adddf3>
 802484c:	4602      	mov	r2, r0
 802484e:	460b      	mov	r3, r1
 8024850:	4620      	mov	r0, r4
 8024852:	4629      	mov	r1, r5
 8024854:	f7db fd38 	bl	80002c8 <__aeabi_dsub>
 8024858:	4642      	mov	r2, r8
 802485a:	464b      	mov	r3, r9
 802485c:	f7db fd34 	bl	80002c8 <__aeabi_dsub>
 8024860:	460b      	mov	r3, r1
 8024862:	4602      	mov	r2, r0
 8024864:	493a      	ldr	r1, [pc, #232]	; (8024950 <__ieee754_pow+0xa48>)
 8024866:	2000      	movs	r0, #0
 8024868:	f7db fd2e 	bl	80002c8 <__aeabi_dsub>
 802486c:	ec41 0b10 	vmov	d0, r0, r1
 8024870:	ee10 3a90 	vmov	r3, s1
 8024874:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8024878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802487c:	da2b      	bge.n	80248d6 <__ieee754_pow+0x9ce>
 802487e:	4650      	mov	r0, sl
 8024880:	f000 f96a 	bl	8024b58 <scalbn>
 8024884:	ec51 0b10 	vmov	r0, r1, d0
 8024888:	ec53 2b18 	vmov	r2, r3, d8
 802488c:	f7ff bbed 	b.w	802406a <__ieee754_pow+0x162>
 8024890:	4b30      	ldr	r3, [pc, #192]	; (8024954 <__ieee754_pow+0xa4c>)
 8024892:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024896:	429e      	cmp	r6, r3
 8024898:	f77f af0c 	ble.w	80246b4 <__ieee754_pow+0x7ac>
 802489c:	4b2e      	ldr	r3, [pc, #184]	; (8024958 <__ieee754_pow+0xa50>)
 802489e:	440b      	add	r3, r1
 80248a0:	4303      	orrs	r3, r0
 80248a2:	d009      	beq.n	80248b8 <__ieee754_pow+0x9b0>
 80248a4:	ec51 0b18 	vmov	r0, r1, d8
 80248a8:	2200      	movs	r2, #0
 80248aa:	2300      	movs	r3, #0
 80248ac:	f7dc f936 	bl	8000b1c <__aeabi_dcmplt>
 80248b0:	3800      	subs	r0, #0
 80248b2:	bf18      	it	ne
 80248b4:	2001      	movne	r0, #1
 80248b6:	e447      	b.n	8024148 <__ieee754_pow+0x240>
 80248b8:	4622      	mov	r2, r4
 80248ba:	462b      	mov	r3, r5
 80248bc:	f7db fd04 	bl	80002c8 <__aeabi_dsub>
 80248c0:	4642      	mov	r2, r8
 80248c2:	464b      	mov	r3, r9
 80248c4:	f7dc f93e 	bl	8000b44 <__aeabi_dcmpge>
 80248c8:	2800      	cmp	r0, #0
 80248ca:	f43f aef3 	beq.w	80246b4 <__ieee754_pow+0x7ac>
 80248ce:	e7e9      	b.n	80248a4 <__ieee754_pow+0x99c>
 80248d0:	f04f 0a00 	mov.w	sl, #0
 80248d4:	e71a      	b.n	802470c <__ieee754_pow+0x804>
 80248d6:	ec51 0b10 	vmov	r0, r1, d0
 80248da:	4619      	mov	r1, r3
 80248dc:	e7d4      	b.n	8024888 <__ieee754_pow+0x980>
 80248de:	491c      	ldr	r1, [pc, #112]	; (8024950 <__ieee754_pow+0xa48>)
 80248e0:	2000      	movs	r0, #0
 80248e2:	f7ff bb30 	b.w	8023f46 <__ieee754_pow+0x3e>
 80248e6:	2000      	movs	r0, #0
 80248e8:	2100      	movs	r1, #0
 80248ea:	f7ff bb2c 	b.w	8023f46 <__ieee754_pow+0x3e>
 80248ee:	4630      	mov	r0, r6
 80248f0:	4639      	mov	r1, r7
 80248f2:	f7ff bb28 	b.w	8023f46 <__ieee754_pow+0x3e>
 80248f6:	9204      	str	r2, [sp, #16]
 80248f8:	f7ff bb7a 	b.w	8023ff0 <__ieee754_pow+0xe8>
 80248fc:	2300      	movs	r3, #0
 80248fe:	f7ff bb64 	b.w	8023fca <__ieee754_pow+0xc2>
 8024902:	bf00      	nop
 8024904:	f3af 8000 	nop.w
 8024908:	00000000 	.word	0x00000000
 802490c:	3fe62e43 	.word	0x3fe62e43
 8024910:	fefa39ef 	.word	0xfefa39ef
 8024914:	3fe62e42 	.word	0x3fe62e42
 8024918:	0ca86c39 	.word	0x0ca86c39
 802491c:	be205c61 	.word	0xbe205c61
 8024920:	72bea4d0 	.word	0x72bea4d0
 8024924:	3e663769 	.word	0x3e663769
 8024928:	c5d26bf1 	.word	0xc5d26bf1
 802492c:	3ebbbd41 	.word	0x3ebbbd41
 8024930:	af25de2c 	.word	0xaf25de2c
 8024934:	3f11566a 	.word	0x3f11566a
 8024938:	16bebd93 	.word	0x16bebd93
 802493c:	3f66c16c 	.word	0x3f66c16c
 8024940:	5555553e 	.word	0x5555553e
 8024944:	3fc55555 	.word	0x3fc55555
 8024948:	3fe00000 	.word	0x3fe00000
 802494c:	000fffff 	.word	0x000fffff
 8024950:	3ff00000 	.word	0x3ff00000
 8024954:	4090cbff 	.word	0x4090cbff
 8024958:	3f6f3400 	.word	0x3f6f3400
 802495c:	652b82fe 	.word	0x652b82fe
 8024960:	3c971547 	.word	0x3c971547

08024964 <__ieee754_sqrt>:
 8024964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024968:	ec55 4b10 	vmov	r4, r5, d0
 802496c:	4e55      	ldr	r6, [pc, #340]	; (8024ac4 <__ieee754_sqrt+0x160>)
 802496e:	43ae      	bics	r6, r5
 8024970:	ee10 0a10 	vmov	r0, s0
 8024974:	ee10 3a10 	vmov	r3, s0
 8024978:	462a      	mov	r2, r5
 802497a:	4629      	mov	r1, r5
 802497c:	d110      	bne.n	80249a0 <__ieee754_sqrt+0x3c>
 802497e:	ee10 2a10 	vmov	r2, s0
 8024982:	462b      	mov	r3, r5
 8024984:	f7db fe58 	bl	8000638 <__aeabi_dmul>
 8024988:	4602      	mov	r2, r0
 802498a:	460b      	mov	r3, r1
 802498c:	4620      	mov	r0, r4
 802498e:	4629      	mov	r1, r5
 8024990:	f7db fc9c 	bl	80002cc <__adddf3>
 8024994:	4604      	mov	r4, r0
 8024996:	460d      	mov	r5, r1
 8024998:	ec45 4b10 	vmov	d0, r4, r5
 802499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80249a0:	2d00      	cmp	r5, #0
 80249a2:	dc10      	bgt.n	80249c6 <__ieee754_sqrt+0x62>
 80249a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80249a8:	4330      	orrs	r0, r6
 80249aa:	d0f5      	beq.n	8024998 <__ieee754_sqrt+0x34>
 80249ac:	b15d      	cbz	r5, 80249c6 <__ieee754_sqrt+0x62>
 80249ae:	ee10 2a10 	vmov	r2, s0
 80249b2:	462b      	mov	r3, r5
 80249b4:	ee10 0a10 	vmov	r0, s0
 80249b8:	f7db fc86 	bl	80002c8 <__aeabi_dsub>
 80249bc:	4602      	mov	r2, r0
 80249be:	460b      	mov	r3, r1
 80249c0:	f7db ff64 	bl	800088c <__aeabi_ddiv>
 80249c4:	e7e6      	b.n	8024994 <__ieee754_sqrt+0x30>
 80249c6:	1512      	asrs	r2, r2, #20
 80249c8:	d074      	beq.n	8024ab4 <__ieee754_sqrt+0x150>
 80249ca:	07d4      	lsls	r4, r2, #31
 80249cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80249d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80249d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80249d8:	bf5e      	ittt	pl
 80249da:	0fda      	lsrpl	r2, r3, #31
 80249dc:	005b      	lslpl	r3, r3, #1
 80249de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80249e2:	2400      	movs	r4, #0
 80249e4:	0fda      	lsrs	r2, r3, #31
 80249e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80249ea:	107f      	asrs	r7, r7, #1
 80249ec:	005b      	lsls	r3, r3, #1
 80249ee:	2516      	movs	r5, #22
 80249f0:	4620      	mov	r0, r4
 80249f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80249f6:	1886      	adds	r6, r0, r2
 80249f8:	428e      	cmp	r6, r1
 80249fa:	bfde      	ittt	le
 80249fc:	1b89      	suble	r1, r1, r6
 80249fe:	18b0      	addle	r0, r6, r2
 8024a00:	18a4      	addle	r4, r4, r2
 8024a02:	0049      	lsls	r1, r1, #1
 8024a04:	3d01      	subs	r5, #1
 8024a06:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8024a0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8024a0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024a12:	d1f0      	bne.n	80249f6 <__ieee754_sqrt+0x92>
 8024a14:	462a      	mov	r2, r5
 8024a16:	f04f 0e20 	mov.w	lr, #32
 8024a1a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024a1e:	4281      	cmp	r1, r0
 8024a20:	eb06 0c05 	add.w	ip, r6, r5
 8024a24:	dc02      	bgt.n	8024a2c <__ieee754_sqrt+0xc8>
 8024a26:	d113      	bne.n	8024a50 <__ieee754_sqrt+0xec>
 8024a28:	459c      	cmp	ip, r3
 8024a2a:	d811      	bhi.n	8024a50 <__ieee754_sqrt+0xec>
 8024a2c:	f1bc 0f00 	cmp.w	ip, #0
 8024a30:	eb0c 0506 	add.w	r5, ip, r6
 8024a34:	da43      	bge.n	8024abe <__ieee754_sqrt+0x15a>
 8024a36:	2d00      	cmp	r5, #0
 8024a38:	db41      	blt.n	8024abe <__ieee754_sqrt+0x15a>
 8024a3a:	f100 0801 	add.w	r8, r0, #1
 8024a3e:	1a09      	subs	r1, r1, r0
 8024a40:	459c      	cmp	ip, r3
 8024a42:	bf88      	it	hi
 8024a44:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8024a48:	eba3 030c 	sub.w	r3, r3, ip
 8024a4c:	4432      	add	r2, r6
 8024a4e:	4640      	mov	r0, r8
 8024a50:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8024a54:	f1be 0e01 	subs.w	lr, lr, #1
 8024a58:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8024a5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024a60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024a64:	d1db      	bne.n	8024a1e <__ieee754_sqrt+0xba>
 8024a66:	430b      	orrs	r3, r1
 8024a68:	d006      	beq.n	8024a78 <__ieee754_sqrt+0x114>
 8024a6a:	1c50      	adds	r0, r2, #1
 8024a6c:	bf13      	iteet	ne
 8024a6e:	3201      	addne	r2, #1
 8024a70:	3401      	addeq	r4, #1
 8024a72:	4672      	moveq	r2, lr
 8024a74:	f022 0201 	bicne.w	r2, r2, #1
 8024a78:	1063      	asrs	r3, r4, #1
 8024a7a:	0852      	lsrs	r2, r2, #1
 8024a7c:	07e1      	lsls	r1, r4, #31
 8024a7e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8024a82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8024a86:	bf48      	it	mi
 8024a88:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8024a8c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8024a90:	4614      	mov	r4, r2
 8024a92:	e781      	b.n	8024998 <__ieee754_sqrt+0x34>
 8024a94:	0ad9      	lsrs	r1, r3, #11
 8024a96:	3815      	subs	r0, #21
 8024a98:	055b      	lsls	r3, r3, #21
 8024a9a:	2900      	cmp	r1, #0
 8024a9c:	d0fa      	beq.n	8024a94 <__ieee754_sqrt+0x130>
 8024a9e:	02cd      	lsls	r5, r1, #11
 8024aa0:	d50a      	bpl.n	8024ab8 <__ieee754_sqrt+0x154>
 8024aa2:	f1c2 0420 	rsb	r4, r2, #32
 8024aa6:	fa23 f404 	lsr.w	r4, r3, r4
 8024aaa:	1e55      	subs	r5, r2, #1
 8024aac:	4093      	lsls	r3, r2
 8024aae:	4321      	orrs	r1, r4
 8024ab0:	1b42      	subs	r2, r0, r5
 8024ab2:	e78a      	b.n	80249ca <__ieee754_sqrt+0x66>
 8024ab4:	4610      	mov	r0, r2
 8024ab6:	e7f0      	b.n	8024a9a <__ieee754_sqrt+0x136>
 8024ab8:	0049      	lsls	r1, r1, #1
 8024aba:	3201      	adds	r2, #1
 8024abc:	e7ef      	b.n	8024a9e <__ieee754_sqrt+0x13a>
 8024abe:	4680      	mov	r8, r0
 8024ac0:	e7bd      	b.n	8024a3e <__ieee754_sqrt+0xda>
 8024ac2:	bf00      	nop
 8024ac4:	7ff00000 	.word	0x7ff00000

08024ac8 <__ieee754_sqrtf>:
 8024ac8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024acc:	4770      	bx	lr

08024ace <with_errno>:
 8024ace:	b570      	push	{r4, r5, r6, lr}
 8024ad0:	4604      	mov	r4, r0
 8024ad2:	460d      	mov	r5, r1
 8024ad4:	4616      	mov	r6, r2
 8024ad6:	f7fa f97f 	bl	801edd8 <__errno>
 8024ada:	4629      	mov	r1, r5
 8024adc:	6006      	str	r6, [r0, #0]
 8024ade:	4620      	mov	r0, r4
 8024ae0:	bd70      	pop	{r4, r5, r6, pc}

08024ae2 <xflow>:
 8024ae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024ae4:	4614      	mov	r4, r2
 8024ae6:	461d      	mov	r5, r3
 8024ae8:	b108      	cbz	r0, 8024aee <xflow+0xc>
 8024aea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024aee:	e9cd 2300 	strd	r2, r3, [sp]
 8024af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024af6:	4620      	mov	r0, r4
 8024af8:	4629      	mov	r1, r5
 8024afa:	f7db fd9d 	bl	8000638 <__aeabi_dmul>
 8024afe:	2222      	movs	r2, #34	; 0x22
 8024b00:	b003      	add	sp, #12
 8024b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024b06:	f7ff bfe2 	b.w	8024ace <with_errno>

08024b0a <__math_uflow>:
 8024b0a:	b508      	push	{r3, lr}
 8024b0c:	2200      	movs	r2, #0
 8024b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8024b12:	f7ff ffe6 	bl	8024ae2 <xflow>
 8024b16:	ec41 0b10 	vmov	d0, r0, r1
 8024b1a:	bd08      	pop	{r3, pc}

08024b1c <__math_oflow>:
 8024b1c:	b508      	push	{r3, lr}
 8024b1e:	2200      	movs	r2, #0
 8024b20:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8024b24:	f7ff ffdd 	bl	8024ae2 <xflow>
 8024b28:	ec41 0b10 	vmov	d0, r0, r1
 8024b2c:	bd08      	pop	{r3, pc}

08024b2e <fabs>:
 8024b2e:	ec51 0b10 	vmov	r0, r1, d0
 8024b32:	ee10 2a10 	vmov	r2, s0
 8024b36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024b3a:	ec43 2b10 	vmov	d0, r2, r3
 8024b3e:	4770      	bx	lr

08024b40 <finite>:
 8024b40:	b082      	sub	sp, #8
 8024b42:	ed8d 0b00 	vstr	d0, [sp]
 8024b46:	9801      	ldr	r0, [sp, #4]
 8024b48:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8024b4c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024b50:	0fc0      	lsrs	r0, r0, #31
 8024b52:	b002      	add	sp, #8
 8024b54:	4770      	bx	lr
	...

08024b58 <scalbn>:
 8024b58:	b570      	push	{r4, r5, r6, lr}
 8024b5a:	ec55 4b10 	vmov	r4, r5, d0
 8024b5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024b62:	4606      	mov	r6, r0
 8024b64:	462b      	mov	r3, r5
 8024b66:	b99a      	cbnz	r2, 8024b90 <scalbn+0x38>
 8024b68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024b6c:	4323      	orrs	r3, r4
 8024b6e:	d036      	beq.n	8024bde <scalbn+0x86>
 8024b70:	4b39      	ldr	r3, [pc, #228]	; (8024c58 <scalbn+0x100>)
 8024b72:	4629      	mov	r1, r5
 8024b74:	ee10 0a10 	vmov	r0, s0
 8024b78:	2200      	movs	r2, #0
 8024b7a:	f7db fd5d 	bl	8000638 <__aeabi_dmul>
 8024b7e:	4b37      	ldr	r3, [pc, #220]	; (8024c5c <scalbn+0x104>)
 8024b80:	429e      	cmp	r6, r3
 8024b82:	4604      	mov	r4, r0
 8024b84:	460d      	mov	r5, r1
 8024b86:	da10      	bge.n	8024baa <scalbn+0x52>
 8024b88:	a32b      	add	r3, pc, #172	; (adr r3, 8024c38 <scalbn+0xe0>)
 8024b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b8e:	e03a      	b.n	8024c06 <scalbn+0xae>
 8024b90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024b94:	428a      	cmp	r2, r1
 8024b96:	d10c      	bne.n	8024bb2 <scalbn+0x5a>
 8024b98:	ee10 2a10 	vmov	r2, s0
 8024b9c:	4620      	mov	r0, r4
 8024b9e:	4629      	mov	r1, r5
 8024ba0:	f7db fb94 	bl	80002cc <__adddf3>
 8024ba4:	4604      	mov	r4, r0
 8024ba6:	460d      	mov	r5, r1
 8024ba8:	e019      	b.n	8024bde <scalbn+0x86>
 8024baa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024bae:	460b      	mov	r3, r1
 8024bb0:	3a36      	subs	r2, #54	; 0x36
 8024bb2:	4432      	add	r2, r6
 8024bb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024bb8:	428a      	cmp	r2, r1
 8024bba:	dd08      	ble.n	8024bce <scalbn+0x76>
 8024bbc:	2d00      	cmp	r5, #0
 8024bbe:	a120      	add	r1, pc, #128	; (adr r1, 8024c40 <scalbn+0xe8>)
 8024bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024bc4:	da1c      	bge.n	8024c00 <scalbn+0xa8>
 8024bc6:	a120      	add	r1, pc, #128	; (adr r1, 8024c48 <scalbn+0xf0>)
 8024bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024bcc:	e018      	b.n	8024c00 <scalbn+0xa8>
 8024bce:	2a00      	cmp	r2, #0
 8024bd0:	dd08      	ble.n	8024be4 <scalbn+0x8c>
 8024bd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024bd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024bda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024bde:	ec45 4b10 	vmov	d0, r4, r5
 8024be2:	bd70      	pop	{r4, r5, r6, pc}
 8024be4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024be8:	da19      	bge.n	8024c1e <scalbn+0xc6>
 8024bea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024bee:	429e      	cmp	r6, r3
 8024bf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024bf4:	dd0a      	ble.n	8024c0c <scalbn+0xb4>
 8024bf6:	a112      	add	r1, pc, #72	; (adr r1, 8024c40 <scalbn+0xe8>)
 8024bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	d1e2      	bne.n	8024bc6 <scalbn+0x6e>
 8024c00:	a30f      	add	r3, pc, #60	; (adr r3, 8024c40 <scalbn+0xe8>)
 8024c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c06:	f7db fd17 	bl	8000638 <__aeabi_dmul>
 8024c0a:	e7cb      	b.n	8024ba4 <scalbn+0x4c>
 8024c0c:	a10a      	add	r1, pc, #40	; (adr r1, 8024c38 <scalbn+0xe0>)
 8024c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	d0b8      	beq.n	8024b88 <scalbn+0x30>
 8024c16:	a10e      	add	r1, pc, #56	; (adr r1, 8024c50 <scalbn+0xf8>)
 8024c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024c1c:	e7b4      	b.n	8024b88 <scalbn+0x30>
 8024c1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024c22:	3236      	adds	r2, #54	; 0x36
 8024c24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024c28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024c2c:	4620      	mov	r0, r4
 8024c2e:	4b0c      	ldr	r3, [pc, #48]	; (8024c60 <scalbn+0x108>)
 8024c30:	2200      	movs	r2, #0
 8024c32:	e7e8      	b.n	8024c06 <scalbn+0xae>
 8024c34:	f3af 8000 	nop.w
 8024c38:	c2f8f359 	.word	0xc2f8f359
 8024c3c:	01a56e1f 	.word	0x01a56e1f
 8024c40:	8800759c 	.word	0x8800759c
 8024c44:	7e37e43c 	.word	0x7e37e43c
 8024c48:	8800759c 	.word	0x8800759c
 8024c4c:	fe37e43c 	.word	0xfe37e43c
 8024c50:	c2f8f359 	.word	0xc2f8f359
 8024c54:	81a56e1f 	.word	0x81a56e1f
 8024c58:	43500000 	.word	0x43500000
 8024c5c:	ffff3cb0 	.word	0xffff3cb0
 8024c60:	3c900000 	.word	0x3c900000

08024c64 <_init>:
 8024c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c66:	bf00      	nop
 8024c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024c6a:	bc08      	pop	{r3}
 8024c6c:	469e      	mov	lr, r3
 8024c6e:	4770      	bx	lr

08024c70 <_fini>:
 8024c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c72:	bf00      	nop
 8024c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024c76:	bc08      	pop	{r3}
 8024c78:	469e      	mov	lr, r3
 8024c7a:	4770      	bx	lr
