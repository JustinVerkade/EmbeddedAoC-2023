
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001902c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08019200  08019200  00029200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e0c  08019e0c  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08019e0c  08019e0c  00029e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e14  08019e14  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019e14  08019e14  00029e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019e18  08019e18  00029e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08019e1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d70  200002fc  0801a118  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000306c  0801a118  0003306c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034027  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d67  00000000  00000000  00064353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002810  00000000  00000000  0006c0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002388  00000000  00000000  0006e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038e7d  00000000  00000000  00070c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044c92  00000000  00000000  000a9ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107c55  00000000  00000000  000ee767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f63bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b15c  00000000  00000000  001f640c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080191e4 	.word	0x080191e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	080191e4 	.word	0x080191e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AdventOfCode_init>:
		AdventOfCode_return_t(*aoc_day_21)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_22)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_23)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_24)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_25)(AdventOfCode_config_t))
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
	aoc->aoc_func_list[0] = aoc_day_01;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
	aoc->aoc_func_list[1] = aoc_day_02;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
	aoc->aoc_func_list[2] = aoc_day_03;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	609a      	str	r2, [r3, #8]
	aoc->aoc_func_list[3] = aoc_day_04;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	60da      	str	r2, [r3, #12]
	aoc->aoc_func_list[4] = aoc_day_05;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	611a      	str	r2, [r3, #16]
	aoc->aoc_func_list[5] = aoc_day_06;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	615a      	str	r2, [r3, #20]
	aoc->aoc_func_list[6] = aoc_day_07;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f22:	619a      	str	r2, [r3, #24]
	aoc->aoc_func_list[7] = aoc_day_08;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f28:	61da      	str	r2, [r3, #28]
	aoc->aoc_func_list[8] = aoc_day_09;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2e:	621a      	str	r2, [r3, #32]
	aoc->aoc_func_list[9] = aoc_day_10;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
	aoc->aoc_func_list[10] = aoc_day_11;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
	aoc->aoc_func_list[11] = aoc_day_12;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
	aoc->aoc_func_list[12] = aoc_day_13;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
	aoc->aoc_func_list[13] = aoc_day_14;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
	aoc->aoc_func_list[14] = aoc_day_15;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
	aoc->aoc_func_list[15] = aoc_day_16;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
	aoc->aoc_func_list[16] = aoc_day_17;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
	aoc->aoc_func_list[17] = aoc_day_18;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
	aoc->aoc_func_list[18] = aoc_day_19;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f6a:	649a      	str	r2, [r3, #72]	; 0x48
	aoc->aoc_func_list[19] = aoc_day_20;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f70:	64da      	str	r2, [r3, #76]	; 0x4c
	aoc->aoc_func_list[20] = aoc_day_21;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f76:	651a      	str	r2, [r3, #80]	; 0x50
	aoc->aoc_func_list[21] = aoc_day_22;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
	aoc->aoc_func_list[22] = aoc_day_23;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58
	aoc->aoc_func_list[23] = aoc_day_24;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
	aoc->aoc_func_list[24] = aoc_day_25;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <AdventOfCode_print>:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, line, strlen(line));
	}
}

void AdventOfCode_print(AdventOfCode_config_t config, char *text, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if(config == AOC_CONFIG_TEST || config == AOC_CONFIG_DEBUG || config == AOC_CONFIG_RELEASE)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d014      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d011      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d00e      	beq.n	8000fda <AdventOfCode_print+0x3e>
		return;
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8000fbc:	bf00      	nop
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <AdventOfCode_print+0x48>)
 8000fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f8      	bne.n	8000fbe <AdventOfCode_print+0x22>
	CDC_Transmit_HS((uint8_t*)text, len);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f014 f97e 	bl	80152d4 <CDC_Transmit_HS>
 8000fd8:	e000      	b.n	8000fdc <AdventOfCode_print+0x40>
		return;
 8000fda:	bf00      	nop
}
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000f98 	.word	0x20000f98

08000fe8 <AoC_Day_01>:
 */

#include "AoC/Days/Day01.h"

AdventOfCode_return_t AoC_Day_01(AdventOfCode_config_t config)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000ff6:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8000ffa:	701a      	strb	r2, [r3, #0]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8000ffc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001000:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <AoC_Day_01+0x26>
		return AOC_RETURN_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e10b      	b.n	8001226 <AoC_Day_01+0x23e>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 800100e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001012:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10a      	bne.n	8001032 <AoC_Day_01+0x4a>
			ret = f_open(&file, "day1t.txt", FA_READ);
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	2201      	movs	r2, #1
 8001022:	4983      	ldr	r1, [pc, #524]	; (8001230 <AoC_Day_01+0x248>)
 8001024:	4618      	mov	r0, r3
 8001026:	f013 f8fd 	bl	8014224 <f_open>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 8001030:	e009      	b.n	8001046 <AoC_Day_01+0x5e>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	2201      	movs	r2, #1
 8001038:	497e      	ldr	r1, [pc, #504]	; (8001234 <AoC_Day_01+0x24c>)
 800103a:	4618      	mov	r0, r3
 800103c:	f013 f8f2 	bl	8014224 <f_open>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
		if(ret != FR_OK)
 8001046:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <AoC_Day_01+0x7e>
		{
			AdventOfCode_print(config, "\tCannot find file!\n", strlen("\tCannot find file!\n"));
 800104e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001052:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2213      	movs	r2, #19
 800105a:	4977      	ldr	r1, [pc, #476]	; (8001238 <AoC_Day_01+0x250>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff9d 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001062:	2301      	movs	r3, #1
 8001064:	e0df      	b.n	8001226 <AoC_Day_01+0x23e>
		}

		// process data
		char buffer[16];
		int32_t prev_value = -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		int32_t counter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		while(f_gets(buffer, 16, &file))
 8001074:	e019      	b.n	80010aa <AoC_Day_01+0xc2>
		{
			int32_t value = atoi(buffer);
 8001076:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800107a:	4618      	mov	r0, r3
 800107c:	f015 f906 	bl	801628c <atoi>
 8001080:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
			if(prev_value >= 0 && prev_value < value)
 8001084:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <AoC_Day_01+0xba>
 800108c:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001090:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001094:	429a      	cmp	r2, r3
 8001096:	da04      	bge.n	80010a2 <AoC_Day_01+0xba>
				counter++;
 8001098:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800109c:	3301      	adds	r3, #1
 800109e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
			prev_value = value;
 80010a2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80010a6:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		while(f_gets(buffer, 16, &file))
 80010aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80010ae:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80010b2:	2110      	movs	r1, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f013 ff89 	bl	8014fcc <f_gets>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1da      	bne.n	8001076 <AoC_Day_01+0x8e>
		}

		// output answer
		char answer[32];
		sprintf(answer, "\tPart 1 answer: %ld\n", counter);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80010c8:	495c      	ldr	r1, [pc, #368]	; (800123c <AoC_Day_01+0x254>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f015 fe8c 	bl	8016de8 <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f89b 	bl	8000210 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	f107 010c 	add.w	r1, r7, #12
 80010e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80010e6:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4618      	mov	r0, r3
 80010f8:	f013 fd84 	bl	8014c04 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 80010fc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001100:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10a      	bne.n	8001120 <AoC_Day_01+0x138>
			ret = f_open(&file, "day1t.txt", FA_READ);
 800110a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110e:	2201      	movs	r2, #1
 8001110:	4947      	ldr	r1, [pc, #284]	; (8001230 <AoC_Day_01+0x248>)
 8001112:	4618      	mov	r0, r3
 8001114:	f013 f886 	bl	8014224 <f_open>
 8001118:	4603      	mov	r3, r0
 800111a:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
 800111e:	e009      	b.n	8001134 <AoC_Day_01+0x14c>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	2201      	movs	r2, #1
 8001126:	4943      	ldr	r1, [pc, #268]	; (8001234 <AoC_Day_01+0x24c>)
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f87b 	bl	8014224 <f_open>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
		if(ret != FR_OK)
 8001134:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <AoC_Day_01+0x16c>
		{
			AdventOfCode_print(config, "\tCannot find file!\n", strlen("\tCannot find file!\n"));
 800113c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001140:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2213      	movs	r2, #19
 8001148:	493b      	ldr	r1, [pc, #236]	; (8001238 <AoC_Day_01+0x250>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff26 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001150:	2301      	movs	r3, #1
 8001152:	e068      	b.n	8001226 <AoC_Day_01+0x23e>
		}

		// process data
		char buffer[16];
		int32_t prev_value[] = {-1, -1};
 8001154:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <AoC_Day_01+0x258>)
 8001156:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800115a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115e:	e883 0003 	stmia.w	r3, {r0, r1}
		int32_t prev_sum = -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
		int32_t counter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
		while(f_gets(buffer, 16, &file))
 8001170:	e02f      	b.n	80011d2 <AoC_Day_01+0x1ea>
		{
			int32_t value = atoi(buffer);
 8001172:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001176:	4618      	mov	r0, r3
 8001178:	f015 f888 	bl	801628c <atoi>
 800117c:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
			if(prev_value[1] >= 0)
 8001180:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001184:	2b00      	cmp	r3, #0
 8001186:	db1c      	blt.n	80011c2 <AoC_Day_01+0x1da>
			{
				int32_t sum = value + prev_value[1] + prev_value[0];
 8001188:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800118c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001190:	441a      	add	r2, r3
 8001192:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001196:	4413      	add	r3, r2
 8001198:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
				if(prev_sum >= 0 && prev_sum < sum)
 800119c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <AoC_Day_01+0x1d2>
 80011a4:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80011a8:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011ac:	429a      	cmp	r2, r3
 80011ae:	da04      	bge.n	80011ba <AoC_Day_01+0x1d2>
					counter++;
 80011b0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80011b4:	3301      	adds	r3, #1
 80011b6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				prev_sum = sum;
 80011ba:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011be:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
			}
			prev_value[1] = prev_value[0];
 80011c2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80011c6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
			prev_value[0] = value;
 80011ca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80011ce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
		while(f_gets(buffer, 16, &file))
 80011d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80011d6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80011da:	2110      	movs	r1, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f013 fef5 	bl	8014fcc <f_gets>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1c4      	bne.n	8001172 <AoC_Day_01+0x18a>
		}

		// output answer
		char answer[32];
		sprintf(answer, "\tPart 2 answer: %ld\n", counter);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80011f0:	4914      	ldr	r1, [pc, #80]	; (8001244 <AoC_Day_01+0x25c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f015 fdf8 	bl	8016de8 <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f807 	bl	8000210 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	f107 010c 	add.w	r1, r7, #12
 800120a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800120e:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fec1 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4618      	mov	r0, r3
 8001220:	f013 fcf0 	bl	8014c04 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08019200 	.word	0x08019200
 8001234:	0801920c 	.word	0x0801920c
 8001238:	08019218 	.word	0x08019218
 800123c:	0801922c 	.word	0x0801922c
 8001240:	0801925c 	.word	0x0801925c
 8001244:	08019244 	.word	0x08019244

08001248 <AoC_Day_02>:
 */

#include "AoC/Days/Day02.h"

AdventOfCode_return_t AoC_Day_02(AdventOfCode_config_t config)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <AoC_Day_02+0x14>
		return AOC_RETURN_NOK;
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <AoC_Day_02+0x16>

	// status code
	return AOC_RETURN_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <AoC_Day_03>:
 */

#include "AoC/Days/Day03.h"

AdventOfCode_return_t AoC_Day_03(AdventOfCode_config_t config)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <AoC_Day_03+0x14>
		return AOC_RETURN_NOK;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <AoC_Day_03+0x16>

	// status code
	return AOC_RETURN_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <AoC_Day_04>:
 */

#include "AoC/Days/Day04.h"

AdventOfCode_return_t AoC_Day_04(AdventOfCode_config_t config)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <AoC_Day_04+0x14>
		return AOC_RETURN_NOK;
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <AoC_Day_04+0x16>

	// status code
	return AOC_RETURN_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <AoC_Day_05>:
 */

#include "AoC/Days/Day05.h"

AdventOfCode_return_t AoC_Day_05(AdventOfCode_config_t config)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <AoC_Day_05+0x14>
		return AOC_RETURN_NOK;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <AoC_Day_05+0x16>

	// status code
	return AOC_RETURN_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <AoC_Day_06>:
 */

#include "AoC/Days/Day06.h"

AdventOfCode_return_t AoC_Day_06(AdventOfCode_config_t config)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <AoC_Day_06+0x14>
		return AOC_RETURN_NOK;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <AoC_Day_06+0x16>

	// status code
	return AOC_RETURN_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <AoC_Day_07>:
 */

#include "AoC/Days/Day07.h"

AdventOfCode_return_t AoC_Day_07(AdventOfCode_config_t config)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <AoC_Day_07+0x14>
		return AOC_RETURN_NOK;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <AoC_Day_07+0x16>

	// status code
	return AOC_RETURN_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <AoC_Day_08>:
 */

#include "AoC/Days/Day08.h"

AdventOfCode_return_t AoC_Day_08(AdventOfCode_config_t config)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <AoC_Day_08+0x14>
		return AOC_RETURN_NOK;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <AoC_Day_08+0x16>

	// status code
	return AOC_RETURN_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <AoC_Day_09>:
 */

#include "AoC/Days/Day09.h"

AdventOfCode_return_t AoC_Day_09(AdventOfCode_config_t config)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <AoC_Day_09+0x14>
		return AOC_RETURN_NOK;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <AoC_Day_09+0x16>

	// status code
	return AOC_RETURN_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <AoC_Day_10>:
 */

#include "AoC/Days/Day10.h"

AdventOfCode_return_t AoC_Day_10(AdventOfCode_config_t config)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <AoC_Day_10+0x14>
		return AOC_RETURN_NOK;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <AoC_Day_10+0x16>

	// status code
	return AOC_RETURN_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <AoC_Day_11>:
 */

#include "AoC/Days/Day11.h"

AdventOfCode_return_t AoC_Day_11(AdventOfCode_config_t config)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <AoC_Day_11+0x14>
		return AOC_RETURN_NOK;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <AoC_Day_11+0x16>

	// status code
	return AOC_RETURN_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <AoC_Day_12>:
 */

#include "AoC/Days/Day12.h"

AdventOfCode_return_t AoC_Day_12(AdventOfCode_config_t config)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <AoC_Day_12+0x14>
		return AOC_RETURN_NOK;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <AoC_Day_12+0x16>

	// status code
	return AOC_RETURN_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <AoC_Day_13>:
 */

#include "AoC/Days/Day13.h"

AdventOfCode_return_t AoC_Day_13(AdventOfCode_config_t config)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <AoC_Day_13+0x14>
		return AOC_RETURN_NOK;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <AoC_Day_13+0x16>

	// status code
	return AOC_RETURN_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <AoC_Day_14>:
 */

#include "AoC/Days/Day14.h"

AdventOfCode_return_t AoC_Day_14(AdventOfCode_config_t config)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <AoC_Day_14+0x14>
		return AOC_RETURN_NOK;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <AoC_Day_14+0x16>

	// status code
	return AOC_RETURN_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <AoC_Day_15>:
 */

#include "AoC/Days/Day15.h"

AdventOfCode_return_t AoC_Day_15(AdventOfCode_config_t config)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <AoC_Day_15+0x14>
		return AOC_RETURN_NOK;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <AoC_Day_15+0x16>

	// status code
	return AOC_RETURN_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <AoC_Day_16>:
 */

#include "AoC/Days/Day16.h"

AdventOfCode_return_t AoC_Day_16(AdventOfCode_config_t config)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <AoC_Day_16+0x14>
		return AOC_RETURN_NOK;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <AoC_Day_16+0x16>

	// status code
	return AOC_RETURN_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <AoC_Day_17>:
 */

#include "AoC/Days/Day17.h"

AdventOfCode_return_t AoC_Day_17(AdventOfCode_config_t config)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <AoC_Day_17+0x14>
		return AOC_RETURN_NOK;
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <AoC_Day_17+0x16>

	// status code
	return AOC_RETURN_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <AoC_Day_18>:
 */

#include "AoC/Days/Day18.h"

AdventOfCode_return_t AoC_Day_18(AdventOfCode_config_t config)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <AoC_Day_18+0x14>
		return AOC_RETURN_NOK;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <AoC_Day_18+0x16>

	// status code
	return AOC_RETURN_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <AoC_Day_19>:
 */

#include "AoC/Days/Day19.h"

AdventOfCode_return_t AoC_Day_19(AdventOfCode_config_t config)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <AoC_Day_19+0x14>
		return AOC_RETURN_NOK;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <AoC_Day_19+0x16>

	// status code
	return AOC_RETURN_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <AoC_Day_20>:
 */

#include "AoC/Days/Day20.h"

AdventOfCode_return_t AoC_Day_20(AdventOfCode_config_t config)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <AoC_Day_20+0x14>
		return AOC_RETURN_NOK;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <AoC_Day_20+0x16>

	// status code
	return AOC_RETURN_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <AoC_Day_21>:
 */

#include "AoC/Days/Day21.h"

AdventOfCode_return_t AoC_Day_21(AdventOfCode_config_t config)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <AoC_Day_21+0x14>
		return AOC_RETURN_NOK;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <AoC_Day_21+0x16>

	// status code
	return AOC_RETURN_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <AoC_Day_22>:
 */

#include "AoC/Days/Day22.h"

AdventOfCode_return_t AoC_Day_22(AdventOfCode_config_t config)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <AoC_Day_22+0x14>
		return AOC_RETURN_NOK;
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <AoC_Day_22+0x16>

	// status code
	return AOC_RETURN_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <AoC_Day_23>:
 */

#include "AoC/Days/Day23.h"

AdventOfCode_return_t AoC_Day_23(AdventOfCode_config_t config)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <AoC_Day_23+0x14>
		return AOC_RETURN_NOK;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <AoC_Day_23+0x16>

	// status code
	return AOC_RETURN_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <AoC_Day_24>:
 */

#include "AoC/Days/Day24.h"

AdventOfCode_return_t AoC_Day_24(AdventOfCode_config_t config)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <AoC_Day_24+0x14>
		return AOC_RETURN_NOK;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <AoC_Day_24+0x16>

	// status code
	return AOC_RETURN_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <AoC_Day_25>:
 */

#include "AoC/Days/Day25.h"

AdventOfCode_return_t AoC_Day_25(AdventOfCode_config_t config)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <AoC_Day_25+0x14>
		return AOC_RETURN_NOK;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <AoC_Day_25+0x16>

	// status code
	return AOC_RETURN_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <System_init>:

extern USBD_HandleTypeDef hUsbDeviceHS;

// state functions
void System_init(System_t *state)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	// system resource states
	state->sram_working = 1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	70da      	strb	r2, [r3, #3]

	// external interface status
	state->vcom_open = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

	// perform selftest
	System_selfTest(state);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f805 	bl	80015a8 <System_selfTest>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <System_selfTest>:

void System_selfTest(System_t *state)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	// test psram
	uint32_t *ptr = SRAM_ADDRESS + 1000000ul;
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <System_selfTest+0x90>)
 80015b2:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <System_selfTest+0x28>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	0919      	lsrs	r1, r3, #4
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	b28a      	uxth	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <System_selfTest+0x94>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d9f0      	bls.n	80015ba <System_selfTest+0x12>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	e00f      	b.n	80015fe <System_selfTest+0x56>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d002      	beq.n	80015f8 <System_selfTest+0x50>
			state->sram_working = 0;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	3301      	adds	r3, #1
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <System_selfTest+0x94>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d9eb      	bls.n	80015de <System_selfTest+0x36>

	// test sdio
	state->sdio.file_result = f_mount(&state->sdio.file_system, (const TCHAR*)SDPath, 0);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800160c:	2200      	movs	r2, #0
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <System_selfTest+0x98>)
 8001610:	4618      	mov	r0, r3
 8001612:	f012 fdc1 	bl	8014198 <f_mount>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(state->sdio.file_result != FR_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <System_selfTest+0x88>
		state->sdio_working = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	603d0900 	.word	0x603d0900
 800163c:	000f423f 	.word	0x000f423f
 8001640:	20000f54 	.word	0x20000f54

08001644 <System_initLog>:

// interface log functions
void System_initLog(System_t *state)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	char *logo = "\n________________________________________________________________________________\n"
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <System_initLog+0x38>)
 800164e:	60fb      	str	r3, [r7, #12]
			" Device: FOX-PDA-v1\n"
			" Author: Justin Verkade\n"
			" Function: General purpose high performance developement board.\n"
			"________________________________________________________________________________\n";

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001650:	bf00      	nop
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <System_initLog+0x3c>)
 8001654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f8      	bne.n	8001652 <System_initLog+0xe>
	CDC_Transmit_HS((uint8_t*)logo, strlen(logo));
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7fe fdd5 	bl	8000210 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29b      	uxth	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f013 fe31 	bl	80152d4 <CDC_Transmit_HS>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	08019264 	.word	0x08019264
 8001680:	20000f98 	.word	0x20000f98

08001684 <System_selfTestLog>:

void System_selfTestLog(System_t *state)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b0d3      	sub	sp, #332	; 0x14c
 8001688:	af02      	add	r7, sp, #8
 800168a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800168e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001692:	6018      	str	r0, [r3, #0]
	char *text = "\n"
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <System_selfTestLog+0x100>)
 8001696:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			" -> SDIO status: %s\n"
			" -> WIFI status: %s\n"
			"________________________________________________________________________________\n";

	char sram_str[16];
	if(state->sram_working)
 800169a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800169e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <System_selfTestLog+0x36>
		strcpy(sram_str, "ENABLED");
 80016aa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80016ae:	4a36      	ldr	r2, [pc, #216]	; (8001788 <System_selfTestLog+0x104>)
 80016b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80016b8:	e005      	b.n	80016c6 <System_selfTestLog+0x42>
	else
		strcpy(sram_str, "DISABLED");
 80016ba:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80016be:	4a33      	ldr	r2, [pc, #204]	; (800178c <System_selfTestLog+0x108>)
 80016c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c2:	c303      	stmia	r3!, {r0, r1}
 80016c4:	701a      	strb	r2, [r3, #0]

	char sdio_str[16];
	if(state->sdio_working)
 80016c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	789b      	ldrb	r3, [r3, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <System_selfTestLog+0x62>
		strcpy(sdio_str, "ENABLED");
 80016d6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016da:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <System_selfTestLog+0x104>)
 80016dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80016e4:	e005      	b.n	80016f2 <System_selfTestLog+0x6e>
	else
		strcpy(sdio_str, "DISABLED");
 80016e6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80016ea:	4a28      	ldr	r2, [pc, #160]	; (800178c <System_selfTestLog+0x108>)
 80016ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ee:	c303      	stmia	r3!, {r0, r1}
 80016f0:	701a      	strb	r2, [r3, #0]

	char wifi_str[16];
	if(state->wifi_working)
 80016f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <System_selfTestLog+0x8c>
		strcpy(wifi_str, "NOT IMPLEMENTED"); // todo wifi not functional
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <System_selfTestLog+0x10c>)
 8001704:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800170e:	e005      	b.n	800171c <System_selfTestLog+0x98>
	else
		strcpy(wifi_str, "DISABLED");
 8001710:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <System_selfTestLog+0x108>)
 8001716:	ca07      	ldmia	r2, {r0, r1, r2}
 8001718:	c303      	stmia	r3!, {r0, r1}
 800171a:	701a      	strb	r2, [r3, #0]

	char text_buffer[256];
	sprintf(text_buffer, text, sram_str, sdio_str, wifi_str);
 800171c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001720:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001724:	f107 000c 	add.w	r0, r7, #12
 8001728:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	460b      	mov	r3, r1
 8001730:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001734:	f015 fb58 	bl	8016de8 <siprintf>

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001738:	bf00      	nop
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <System_selfTestLog+0x110>)
 800173c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f8      	bne.n	800173a <System_selfTestLog+0xb6>
	CDC_Transmit_HS((uint8_t*)text_buffer, strlen(text_buffer));
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd5f 	bl	8000210 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f013 fdb9 	bl	80152d4 <CDC_Transmit_HS>

	// print new cursor
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001762:	bf00      	nop
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <System_selfTestLog+0x110>)
 8001766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800176a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f8      	bne.n	8001764 <System_selfTestLog+0xe0>
	CDC_Transmit_HS((uint8_t*)">", 1);
 8001772:	2101      	movs	r1, #1
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <System_selfTestLog+0x114>)
 8001776:	f013 fdad 	bl	80152d4 <CDC_Transmit_HS>
}
 800177a:	bf00      	nop
 800177c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	08019604 	.word	0x08019604
 8001788:	080196a4 	.word	0x080196a4
 800178c:	080196ac 	.word	0x080196ac
 8001790:	080196b8 	.word	0x080196b8
 8001794:	20000f98 	.word	0x20000f98
 8001798:	080196c8 	.word	0x080196c8

0800179c <checkImplementation>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void checkImplementation()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 80017a2:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 80017a4:	4b51      	ldr	r3, [pc, #324]	; (80018ec <checkImplementation+0x150>)
 80017a6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80017aa:	e004      	b.n	80017b6 <checkImplementation+0x1a>
 80017ac:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80017b0:	3301      	adds	r3, #1
 80017b2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80017b6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d004      	beq.n	80017ca <checkImplementation+0x2e>
 80017c0:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <checkImplementation+0x154>)
 80017c2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d3f0      	bcc.n	80017ac <checkImplementation+0x10>
	ptr++;
 80017ca:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80017ce:	3301      	adds	r3, #1
 80017d0:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

	// no value given
	if(*ptr == '\0')
 80017d4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <checkImplementation+0x4e>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 80017de:	2215      	movs	r2, #21
 80017e0:	4944      	ldr	r1, [pc, #272]	; (80018f4 <checkImplementation+0x158>)
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7ff fbda 	bl	8000f9c <AdventOfCode_print>
		return;
 80017e8:	e07c      	b.n	80018e4 <checkImplementation+0x148>
	}

	// check value
	int32_t day = atoi((char*)ptr);
 80017ea:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 80017ee:	f014 fd4d 	bl	801628c <atoi>
 80017f2:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
	if(day > 25 || day <= 0)
 80017f6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80017fa:	2b19      	cmp	r3, #25
 80017fc:	dc03      	bgt.n	8001806 <checkImplementation+0x6a>
 80017fe:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001802:	2b00      	cmp	r3, #0
 8001804:	dc05      	bgt.n	8001812 <checkImplementation+0x76>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8001806:	221a      	movs	r2, #26
 8001808:	493b      	ldr	r1, [pc, #236]	; (80018f8 <checkImplementation+0x15c>)
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff fbc6 	bl	8000f9c <AdventOfCode_print>
		return;
 8001810:	e068      	b.n	80018e4 <checkImplementation+0x148>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Checking day %ld\n", day);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800181a:	4938      	ldr	r1, [pc, #224]	; (80018fc <checkImplementation+0x160>)
 800181c:	4618      	mov	r0, r3
 800181e:	f015 fae3 	bl	8016de8 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fcf2 	bl	8000210 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	2002      	movs	r0, #2
 8001838:	f7ff fbb0 	bl	8000f9c <AdventOfCode_print>

	// check day
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 800183c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001840:	3b01      	subs	r3, #1
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <checkImplementation+0x164>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	2000      	movs	r0, #0
 800184a:	4798      	blx	r3
 800184c:	4603      	mov	r3, r0
 800184e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if(ret == AOC_RETURN_OK)
 8001852:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <checkImplementation+0xca>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Implemented\n", strlen("\tState: Implemented\n"));
 800185a:	2214      	movs	r2, #20
 800185c:	4929      	ldr	r1, [pc, #164]	; (8001904 <checkImplementation+0x168>)
 800185e:	2002      	movs	r0, #2
 8001860:	f7ff fb9c 	bl	8000f9c <AdventOfCode_print>
 8001864:	e004      	b.n	8001870 <checkImplementation+0xd4>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8001866:	2218      	movs	r2, #24
 8001868:	4927      	ldr	r1, [pc, #156]	; (8001908 <checkImplementation+0x16c>)
 800186a:	2002      	movs	r0, #2
 800186c:	f7ff fb96 	bl	8000f9c <AdventOfCode_print>

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001878:	4924      	ldr	r1, [pc, #144]	; (800190c <checkImplementation+0x170>)
 800187a:	4618      	mov	r0, r3
 800187c:	f015 fab4 	bl	8016de8 <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 8001880:	1d3a      	adds	r2, r7, #4
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f013 fabb 	bl	8014e04 <f_stat>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <checkImplementation+0x104>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Present\n", strlen("\tDebug: Present\n"));
 8001894:	2210      	movs	r2, #16
 8001896:	491e      	ldr	r1, [pc, #120]	; (8001910 <checkImplementation+0x174>)
 8001898:	2002      	movs	r0, #2
 800189a:	f7ff fb7f 	bl	8000f9c <AdventOfCode_print>
 800189e:	e004      	b.n	80018aa <checkImplementation+0x10e>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 80018a0:	220f      	movs	r2, #15
 80018a2:	491c      	ldr	r1, [pc, #112]	; (8001914 <checkImplementation+0x178>)
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7ff fb79 	bl	8000f9c <AdventOfCode_print>

	// check release file
	sprintf(buffer, "day%ld.txt", day);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80018b2:	4919      	ldr	r1, [pc, #100]	; (8001918 <checkImplementation+0x17c>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f015 fa97 	bl	8016de8 <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 80018ba:	1d3a      	adds	r2, r7, #4
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f013 fa9e 	bl	8014e04 <f_stat>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <checkImplementation+0x13e>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Present\n", strlen("\tRelease: Present\n"));
 80018ce:	2212      	movs	r2, #18
 80018d0:	4912      	ldr	r1, [pc, #72]	; (800191c <checkImplementation+0x180>)
 80018d2:	2002      	movs	r0, #2
 80018d4:	f7ff fb62 	bl	8000f9c <AdventOfCode_print>
 80018d8:	e004      	b.n	80018e4 <checkImplementation+0x148>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 80018da:	2211      	movs	r2, #17
 80018dc:	4910      	ldr	r1, [pc, #64]	; (8001920 <checkImplementation+0x184>)
 80018de:	2002      	movs	r0, #2
 80018e0:	f7ff fb5c 	bl	8000f9c <AdventOfCode_print>
}
 80018e4:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000adc 	.word	0x20000adc
 80018f0:	20000edc 	.word	0x20000edc
 80018f4:	080196cc 	.word	0x080196cc
 80018f8:	080196e4 	.word	0x080196e4
 80018fc:	08019700 	.word	0x08019700
 8001900:	20000ee0 	.word	0x20000ee0
 8001904:	08019714 	.word	0x08019714
 8001908:	0801972c 	.word	0x0801972c
 800190c:	08019748 	.word	0x08019748
 8001910:	08019754 	.word	0x08019754
 8001914:	08019768 	.word	0x08019768
 8001918:	08019778 	.word	0x08019778
 800191c:	08019784 	.word	0x08019784
 8001920:	08019798 	.word	0x08019798

08001924 <runDebugImplementation>:

void runDebugImplementation()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 800192a:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <runDebugImplementation+0x19c>)
 800192e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001932:	e004      	b.n	800193e <runDebugImplementation+0x1a>
 8001934:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001938:	3301      	adds	r3, #1
 800193a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800193e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b20      	cmp	r3, #32
 8001946:	d004      	beq.n	8001952 <runDebugImplementation+0x2e>
 8001948:	4a5e      	ldr	r2, [pc, #376]	; (8001ac4 <runDebugImplementation+0x1a0>)
 800194a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800194e:	4293      	cmp	r3, r2
 8001950:	d3f0      	bcc.n	8001934 <runDebugImplementation+0x10>
	ptr++;
 8001952:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001956:	3301      	adds	r3, #1
 8001958:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

	// no value given
	if(*ptr == '\0')
 800195c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <runDebugImplementation+0x4e>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8001966:	2215      	movs	r2, #21
 8001968:	4957      	ldr	r1, [pc, #348]	; (8001ac8 <runDebugImplementation+0x1a4>)
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fb16 	bl	8000f9c <AdventOfCode_print>
		return;
 8001970:	e0a2      	b.n	8001ab8 <runDebugImplementation+0x194>
	}

	// check value
	int32_t day = atoi((char*)ptr);
 8001972:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8001976:	f014 fc89 	bl	801628c <atoi>
 800197a:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
	if(day > 25 || day <= 0)
 800197e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001982:	2b19      	cmp	r3, #25
 8001984:	dc03      	bgt.n	800198e <runDebugImplementation+0x6a>
 8001986:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800198a:	2b00      	cmp	r3, #0
 800198c:	dc05      	bgt.n	800199a <runDebugImplementation+0x76>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800198e:	221a      	movs	r2, #26
 8001990:	494e      	ldr	r1, [pc, #312]	; (8001acc <runDebugImplementation+0x1a8>)
 8001992:	2002      	movs	r0, #2
 8001994:	f7ff fb02 	bl	8000f9c <AdventOfCode_print>
		return;
 8001998:	e08e      	b.n	8001ab8 <runDebugImplementation+0x194>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing debug day %ld\n", day);
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80019a2:	494b      	ldr	r1, [pc, #300]	; (8001ad0 <runDebugImplementation+0x1ac>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f015 fa1f 	bl	8016de8 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc2e 	bl	8000210 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	4619      	mov	r1, r3
 80019be:	2002      	movs	r0, #2
 80019c0:	f7ff faec 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 80019c4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <runDebugImplementation+0x1b0>)
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	2000      	movs	r0, #0
 80019d2:	4798      	blx	r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
	if(ret != AOC_RETURN_OK)
 80019da:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <runDebugImplementation+0xca>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 80019e2:	2218      	movs	r2, #24
 80019e4:	493c      	ldr	r1, [pc, #240]	; (8001ad8 <runDebugImplementation+0x1b4>)
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fad8 	bl	8000f9c <AdventOfCode_print>
		return;
 80019ec:	e064      	b.n	8001ab8 <runDebugImplementation+0x194>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80019f6:	4939      	ldr	r1, [pc, #228]	; (8001adc <runDebugImplementation+0x1b8>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f015 f9f5 	bl	8016de8 <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 80019fe:	463a      	mov	r2, r7
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f013 f9fc 	bl	8014e04 <f_stat>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <runDebugImplementation+0xfa>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 8001a12:	220f      	movs	r2, #15
 8001a14:	4932      	ldr	r1, [pc, #200]	; (8001ae0 <runDebugImplementation+0x1bc>)
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7ff fac0 	bl	8000f9c <AdventOfCode_print>
		return;
 8001a1c:	e04c      	b.n	8001ab8 <runDebugImplementation+0x194>
	}

	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4930      	ldr	r1, [pc, #192]	; (8001ae4 <runDebugImplementation+0x1c0>)
 8001a22:	2002      	movs	r0, #2
 8001a24:	f7ff faba 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8001a28:	f001 fc76 	bl	8003318 <HAL_GetTick>
 8001a2c:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_DEBUG_VERBOSE);
 8001a30:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <runDebugImplementation+0x1b0>)
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	4798      	blx	r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint32_t end = HAL_GetTick();
 8001a46:	f001 fc67 	bl	8003318 <HAL_GetTick>
 8001a4a:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
	if(dret == AOC_RETURN_OK)
 8001a4e:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <runDebugImplementation+0x164>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8001a56:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001a5a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001a5e:	1ad2      	subs	r2, r2, r3
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4920      	ldr	r1, [pc, #128]	; (8001ae8 <runDebugImplementation+0x1c4>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f015 f9be 	bl	8016de8 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fbcd 	bl	8000210 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f107 0318 	add.w	r3, r7, #24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff fa8b 	bl	8000f9c <AdventOfCode_print>
 8001a86:	e017      	b.n	8001ab8 <runDebugImplementation+0x194>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8001a88:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001a8c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001a90:	1ad2      	subs	r2, r2, r3
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	4915      	ldr	r1, [pc, #84]	; (8001aec <runDebugImplementation+0x1c8>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f015 f9a5 	bl	8016de8 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fbb4 	bl	8000210 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f7ff fa72 	bl	8000f9c <AdventOfCode_print>
	}
}
 8001ab8:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000adc 	.word	0x20000adc
 8001ac4:	20000edc 	.word	0x20000edc
 8001ac8:	080196cc 	.word	0x080196cc
 8001acc:	080196e4 	.word	0x080196e4
 8001ad0:	080197ac 	.word	0x080197ac
 8001ad4:	20000ee0 	.word	0x20000ee0
 8001ad8:	0801972c 	.word	0x0801972c
 8001adc:	08019748 	.word	0x08019748
 8001ae0:	08019768 	.word	0x08019768
 8001ae4:	080197c8 	.word	0x080197c8
 8001ae8:	080197d0 	.word	0x080197d0
 8001aec:	080197e4 	.word	0x080197e4

08001af0 <runReleaseImplementation>:

void runReleaseImplementation()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001af6:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 8001af8:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <runReleaseImplementation+0x19c>)
 8001afa:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001afe:	e004      	b.n	8001b0a <runReleaseImplementation+0x1a>
 8001b00:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001b0a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d004      	beq.n	8001b1e <runReleaseImplementation+0x2e>
 8001b14:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <runReleaseImplementation+0x1a0>)
 8001b16:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d3f0      	bcc.n	8001b00 <runReleaseImplementation+0x10>
	ptr++;
 8001b1e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b22:	3301      	adds	r3, #1
 8001b24:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

	// no value given
	if(*ptr == '\0')
 8001b28:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <runReleaseImplementation+0x4e>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8001b32:	2215      	movs	r2, #21
 8001b34:	4957      	ldr	r1, [pc, #348]	; (8001c94 <runReleaseImplementation+0x1a4>)
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7ff fa30 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b3c:	e0a2      	b.n	8001c84 <runReleaseImplementation+0x194>
	}

	// check value
	int32_t day = atoi((char*)ptr);
 8001b3e:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8001b42:	f014 fba3 	bl	801628c <atoi>
 8001b46:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
	if(day > 25 || day <= 0)
 8001b4a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001b4e:	2b19      	cmp	r3, #25
 8001b50:	dc03      	bgt.n	8001b5a <runReleaseImplementation+0x6a>
 8001b52:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	dc05      	bgt.n	8001b66 <runReleaseImplementation+0x76>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8001b5a:	221a      	movs	r2, #26
 8001b5c:	494e      	ldr	r1, [pc, #312]	; (8001c98 <runReleaseImplementation+0x1a8>)
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff fa1c 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b64:	e08e      	b.n	8001c84 <runReleaseImplementation+0x194>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing release day %ld\n", day);
 8001b66:	f107 0318 	add.w	r3, r7, #24
 8001b6a:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001b6e:	494b      	ldr	r1, [pc, #300]	; (8001c9c <runReleaseImplementation+0x1ac>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f015 f939 	bl	8016de8 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001b76:	f107 0318 	add.w	r3, r7, #24
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fb48 	bl	8000210 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7ff fa06 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8001b90:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a42      	ldr	r2, [pc, #264]	; (8001ca0 <runReleaseImplementation+0x1b0>)
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4798      	blx	r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
	if(ret != AOC_RETURN_OK)
 8001ba6:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <runReleaseImplementation+0xca>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8001bae:	2218      	movs	r2, #24
 8001bb0:	493c      	ldr	r1, [pc, #240]	; (8001ca4 <runReleaseImplementation+0x1b4>)
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f7ff f9f2 	bl	8000f9c <AdventOfCode_print>
		return;
 8001bb8:	e064      	b.n	8001c84 <runReleaseImplementation+0x194>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ld.txt", day);
 8001bba:	f107 0318 	add.w	r3, r7, #24
 8001bbe:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001bc2:	4939      	ldr	r1, [pc, #228]	; (8001ca8 <runReleaseImplementation+0x1b8>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f015 f90f 	bl	8016de8 <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 8001bca:	463a      	mov	r2, r7
 8001bcc:	f107 0318 	add.w	r3, r7, #24
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f013 f916 	bl	8014e04 <f_stat>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <runReleaseImplementation+0xfa>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 8001bde:	2211      	movs	r2, #17
 8001be0:	4932      	ldr	r1, [pc, #200]	; (8001cac <runReleaseImplementation+0x1bc>)
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7ff f9da 	bl	8000f9c <AdventOfCode_print>
		return;
 8001be8:	e04c      	b.n	8001c84 <runReleaseImplementation+0x194>
	}


	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8001bea:	2207      	movs	r2, #7
 8001bec:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <runReleaseImplementation+0x1c0>)
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f7ff f9d4 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8001bf4:	f001 fb90 	bl	8003318 <HAL_GetTick>
 8001bf8:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_RELEASE_VERBOSE);
 8001bfc:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001c00:	3b01      	subs	r3, #1
 8001c02:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <runReleaseImplementation+0x1b0>)
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	2004      	movs	r0, #4
 8001c0a:	4798      	blx	r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint32_t end = HAL_GetTick();
 8001c12:	f001 fb81 	bl	8003318 <HAL_GetTick>
 8001c16:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
	if(dret == AOC_RETURN_OK)
 8001c1a:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <runReleaseImplementation+0x164>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8001c22:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001c26:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001c2a:	1ad2      	subs	r2, r2, r3
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	4920      	ldr	r1, [pc, #128]	; (8001cb4 <runReleaseImplementation+0x1c4>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f015 f8d8 	bl	8016de8 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fae7 	bl	8000210 <strlen>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f7ff f9a5 	bl	8000f9c <AdventOfCode_print>
 8001c52:	e017      	b.n	8001c84 <runReleaseImplementation+0x194>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8001c54:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001c58:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	4915      	ldr	r1, [pc, #84]	; (8001cb8 <runReleaseImplementation+0x1c8>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f015 f8bf 	bl	8016de8 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe face 	bl	8000210 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f7ff f98c 	bl	8000f9c <AdventOfCode_print>
	}
}
 8001c84:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000adc 	.word	0x20000adc
 8001c90:	20000edc 	.word	0x20000edc
 8001c94:	080196cc 	.word	0x080196cc
 8001c98:	080196e4 	.word	0x080196e4
 8001c9c:	080197f4 	.word	0x080197f4
 8001ca0:	20000ee0 	.word	0x20000ee0
 8001ca4:	0801972c 	.word	0x0801972c
 8001ca8:	08019778 	.word	0x08019778
 8001cac:	08019798 	.word	0x08019798
 8001cb0:	080197c8 	.word	0x080197c8
 8001cb4:	080197d0 	.word	0x080197d0
 8001cb8:	080197e4 	.word	0x080197e4

08001cbc <fetchPuzzleInput>:

void fetchPuzzleInput()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	f5ad 6dc9 	sub.w	sp, sp, #1608	; 0x648
 8001cc2:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <fetchPuzzleInput+0x1ac>)
 8001cc6:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8001cca:	e004      	b.n	8001cd6 <fetchPuzzleInput+0x1a>
 8001ccc:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8001cd6:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d004      	beq.n	8001cea <fetchPuzzleInput+0x2e>
 8001ce0:	4a62      	ldr	r2, [pc, #392]	; (8001e6c <fetchPuzzleInput+0x1b0>)
 8001ce2:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d3f0      	bcc.n	8001ccc <fetchPuzzleInput+0x10>
	ptr++;
 8001cea:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
	uint8_t *start = ptr;
 8001cf4:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001cf8:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
	for(ptr=usb_rx_buffer; *ptr!='\n'&&ptr<(usb_rx_buffer+1024); ptr++);
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <fetchPuzzleInput+0x1ac>)
 8001cfe:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8001d02:	e004      	b.n	8001d0e <fetchPuzzleInput+0x52>
 8001d04:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8001d0e:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b0a      	cmp	r3, #10
 8001d16:	d004      	beq.n	8001d22 <fetchPuzzleInput+0x66>
 8001d18:	4a54      	ldr	r2, [pc, #336]	; (8001e6c <fetchPuzzleInput+0x1b0>)
 8001d1a:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d3f0      	bcc.n	8001d04 <fetchPuzzleInput+0x48>
	*ptr = 0x00;
 8001d22:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

	// no value given
	if(*start == '\0')
 8001d2a:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <fetchPuzzleInput+0x84>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 8001d34:	2214      	movs	r2, #20
 8001d36:	494e      	ldr	r1, [pc, #312]	; (8001e70 <fetchPuzzleInput+0x1b4>)
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f7ff f92f 	bl	8000f9c <AdventOfCode_print>
		return;
 8001d3e:	e08e      	b.n	8001e5e <fetchPuzzleInput+0x1a2>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Creating %s\n", start);
 8001d40:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d44:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 8001d48:	494a      	ldr	r1, [pc, #296]	; (8001e74 <fetchPuzzleInput+0x1b8>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f015 f84c 	bl	8016de8 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001d50:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fa5b 	bl	8000210 <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d62:	4619      	mov	r1, r3
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff f919 	bl	8000f9c <AdventOfCode_print>

	// create file
	FIL file;
	uint8_t ret = f_open(&file, (char*)start, FA_CREATE_ALWAYS | FA_WRITE);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8001d72:	4618      	mov	r0, r3
 8001d74:	f012 fa56 	bl	8014224 <f_open>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 3637 	strb.w	r3, [r7, #1591]	; 0x637
	if(ret != FR_OK)
 8001d7e:	f897 3637 	ldrb.w	r3, [r7, #1591]	; 0x637
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <fetchPuzzleInput+0xd6>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to create file!\n", strlen("Failed to create file!\n"));
 8001d86:	2217      	movs	r2, #23
 8001d88:	493b      	ldr	r1, [pc, #236]	; (8001e78 <fetchPuzzleInput+0x1bc>)
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff f906 	bl	8000f9c <AdventOfCode_print>
		return;
 8001d90:	e065      	b.n	8001e5e <fetchPuzzleInput+0x1a2>
	}

	// fetch data
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploade data:\n{\n", strlen("Uploade data:\n{\n"));
 8001d92:	2210      	movs	r2, #16
 8001d94:	4939      	ldr	r1, [pc, #228]	; (8001e7c <fetchPuzzleInput+0x1c0>)
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7ff f900 	bl	8000f9c <AdventOfCode_print>

	usb_rx_ready = 0;
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <fetchPuzzleInput+0x1c4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
	uint8_t done = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 3643 	strb.w	r3, [r7, #1603]	; 0x643
	uint32_t counter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
	while(!done)
 8001dae:	e044      	b.n	8001e3a <fetchPuzzleInput+0x17e>
	{
		// wait for new data
		if(!usb_rx_ready)
 8001db0:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <fetchPuzzleInput+0x1c4>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d100      	bne.n	8001dba <fetchPuzzleInput+0xfe>
			continue;
 8001db8:	e03f      	b.n	8001e3a <fetchPuzzleInput+0x17e>

		// flicker lightn light
		if((counter++ % 2) == 0)
 8001dba:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	f8c7 263c 	str.w	r2, [r7, #1596]	; 0x63c
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d103      	bne.n	8001dd4 <fetchPuzzleInput+0x118>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001dcc:	2140      	movs	r1, #64	; 0x40
 8001dce:	482d      	ldr	r0, [pc, #180]	; (8001e84 <fetchPuzzleInput+0x1c8>)
 8001dd0:	f002 fbe3 	bl	800459a <HAL_GPIO_TogglePin>

		// check last character
		char last_character = usb_rx_buffer[usb_rx_length - 3];
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <fetchPuzzleInput+0x1cc>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <fetchPuzzleInput+0x1ac>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	f887 3636 	strb.w	r3, [r7, #1590]	; 0x636
		if(last_character == '`')
 8001de2:	f897 3636 	ldrb.w	r3, [r7, #1590]	; 0x636
 8001de6:	2b60      	cmp	r3, #96	; 0x60
 8001de8:	d108      	bne.n	8001dfc <fetchPuzzleInput+0x140>
		{
			usb_rx_buffer[usb_rx_length - 3] = 0x00;
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <fetchPuzzleInput+0x1cc>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	3b03      	subs	r3, #3
 8001df0:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <fetchPuzzleInput+0x1ac>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	54d1      	strb	r1, [r2, r3]
			done = 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3643 	strb.w	r3, [r7, #1603]	; 0x643
		}

		// echo message
		sprintf(buffer, "\t%s", (char*)usb_rx_buffer);
 8001dfc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <fetchPuzzleInput+0x1ac>)
 8001e02:	4922      	ldr	r1, [pc, #136]	; (8001e8c <fetchPuzzleInput+0x1d0>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f014 ffef 	bl	8016de8 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001e0a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe f9fe 	bl	8000210 <strlen>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2002      	movs	r0, #2
 8001e20:	f7ff f8bc 	bl	8000f9c <AdventOfCode_print>

		// write to file
		f_write(&file, usb_rx_buffer, usb_rx_length, NULL);
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <fetchPuzzleInput+0x1cc>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4638      	mov	r0, r7
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	490e      	ldr	r1, [pc, #56]	; (8001e68 <fetchPuzzleInput+0x1ac>)
 8001e30:	f012 fcf5 	bl	801481e <f_write>

		// clear flag
		usb_rx_ready = 0;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <fetchPuzzleInput+0x1c4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
	while(!done)
 8001e3a:	f897 3643 	ldrb.w	r3, [r7, #1603]	; 0x643
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0b6      	beq.n	8001db0 <fetchPuzzleInput+0xf4>
	}

	// close file
	f_close(&file);
 8001e42:	463b      	mov	r3, r7
 8001e44:	4618      	mov	r0, r3
 8001e46:	f012 fedd 	bl	8014c04 <f_close>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "}\nSaving input\n", strlen("}\nSaving input\n"));
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	4910      	ldr	r1, [pc, #64]	; (8001e90 <fetchPuzzleInput+0x1d4>)
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f7ff f8a4 	bl	8000f9c <AdventOfCode_print>

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2140      	movs	r1, #64	; 0x40
 8001e58:	480a      	ldr	r0, [pc, #40]	; (8001e84 <fetchPuzzleInput+0x1c8>)
 8001e5a:	f002 fb85 	bl	8004568 <HAL_GPIO_WritePin>
}
 8001e5e:	f507 67c9 	add.w	r7, r7, #1608	; 0x648
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000adc 	.word	0x20000adc
 8001e6c:	20000edc 	.word	0x20000edc
 8001e70:	08019810 	.word	0x08019810
 8001e74:	08019828 	.word	0x08019828
 8001e78:	08019838 	.word	0x08019838
 8001e7c:	08019850 	.word	0x08019850
 8001e80:	20000ede 	.word	0x20000ede
 8001e84:	40021800 	.word	0x40021800
 8001e88:	20000edc 	.word	0x20000edc
 8001e8c:	08019864 	.word	0x08019864
 8001e90:	08019868 	.word	0x08019868

08001e94 <showDirectory>:

void showDirectory()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0a4      	sub	sp, #144	; 0x90
 8001e98:	af00      	add	r7, sp, #0
	// opening log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Uploaded files:\n{\n", strlen("Uploaded files:\n{\n"));
 8001e9a:	2212      	movs	r2, #18
 8001e9c:	4922      	ldr	r1, [pc, #136]	; (8001f28 <showDirectory+0x94>)
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f7ff f87c 	bl	8000f9c <AdventOfCode_print>
	char buffer[64];

	DIR dir;
	FILINFO fno;
	uint8_t counter = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	f_opendir(&dir, "/");
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	491f      	ldr	r1, [pc, #124]	; (8001f2c <showDirectory+0x98>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f012 fed1 	bl	8014c58 <f_opendir>
	do
	{
	    f_readdir(&dir, &fno);
 8001eb6:	1d3a      	adds	r2, r7, #4
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f012 ff63 	bl	8014d8a <f_readdir>
	    if(fno.fname[0] != 0 && counter++ > 1)
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01c      	beq.n	8001f04 <showDirectory+0x70>
 8001eca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	f887 208f 	strb.w	r2, [r7, #143]	; 0x8f
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d915      	bls.n	8001f04 <showDirectory+0x70>
	    {
	    	sprintf(buffer, "\t%s\n", fno.fname);
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	f103 0209 	add.w	r2, r3, #9
 8001ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee2:	4913      	ldr	r1, [pc, #76]	; (8001f30 <showDirectory+0x9c>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f014 ff7f 	bl	8016de8 <siprintf>
	    	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001eea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe f98e 	bl	8000210 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001efc:	4619      	mov	r1, r3
 8001efe:	2002      	movs	r0, #2
 8001f00:	f7ff f84c 	bl	8000f9c <AdventOfCode_print>
	    }
	} while(fno.fname[0] != 0);
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1d5      	bne.n	8001eb6 <showDirectory+0x22>
	f_closedir(&dir);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f012 ff15 	bl	8014d3e <f_closedir>

	// closing log
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "}\n", strlen("}\n"));
 8001f14:	2202      	movs	r2, #2
 8001f16:	4907      	ldr	r1, [pc, #28]	; (8001f34 <showDirectory+0xa0>)
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7ff f83f 	bl	8000f9c <AdventOfCode_print>
}
 8001f1e:	bf00      	nop
 8001f20:	3790      	adds	r7, #144	; 0x90
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08019878 	.word	0x08019878
 8001f2c:	0801988c 	.word	0x0801988c
 8001f30:	08019890 	.word	0x08019890
 8001f34:	08019898 	.word	0x08019898

08001f38 <deleteFile>:

void deleteFile()
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001f3e:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <deleteFile+0xdc>)
 8001f42:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001f46:	e004      	b.n	8001f52 <deleteFile+0x1a>
 8001f48:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001f52:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d004      	beq.n	8001f66 <deleteFile+0x2e>
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <deleteFile+0xe0>)
 8001f5e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d3f0      	bcc.n	8001f48 <deleteFile+0x10>
	ptr++;
 8001f66:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	uint8_t *start = ptr;
 8001f70:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f74:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	for(ptr=usb_rx_buffer; *ptr!='\n'&&ptr<(usb_rx_buffer+1024); ptr++);
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <deleteFile+0xdc>)
 8001f7a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001f7e:	e004      	b.n	8001f8a <deleteFile+0x52>
 8001f80:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f84:	3301      	adds	r3, #1
 8001f86:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001f8a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b0a      	cmp	r3, #10
 8001f92:	d004      	beq.n	8001f9e <deleteFile+0x66>
 8001f94:	4a20      	ldr	r2, [pc, #128]	; (8002018 <deleteFile+0xe0>)
 8001f96:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d3f0      	bcc.n	8001f80 <deleteFile+0x48>
	*ptr = 0x00;
 8001f9e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]

	// no value given
	if(*start == '\0')
 8001fa6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <deleteFile+0x84>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No file name given!\n", strlen("No file name given!\n"));
 8001fb0:	2214      	movs	r2, #20
 8001fb2:	491a      	ldr	r1, [pc, #104]	; (800201c <deleteFile+0xe4>)
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7fe fff1 	bl	8000f9c <AdventOfCode_print>
		return;
 8001fba:	e027      	b.n	800200c <deleteFile+0xd4>
	}

	// check implementation
	char buffer[1028];
	sprintf(buffer, "Deleting %s\n", start);
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8001fc2:	4917      	ldr	r1, [pc, #92]	; (8002020 <deleteFile+0xe8>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f014 ff0f 	bl	8016de8 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001fca:	463b      	mov	r3, r7
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe f91f 	bl	8000210 <strlen>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	4619      	mov	r1, r3
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f7fe ffde 	bl	8000f9c <AdventOfCode_print>

	// delete file
	uint8_t ret = f_unlink((char*)start);
 8001fe0:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001fe4:	f012 ff47 	bl	8014e76 <f_unlink>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
	if(ret != FR_OK)
 8001fee:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <deleteFile+0xca>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Failed to delete file!\n", strlen("Failed to delete file!\n"));
 8001ff6:	2217      	movs	r2, #23
 8001ff8:	490a      	ldr	r1, [pc, #40]	; (8002024 <deleteFile+0xec>)
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7fe ffce 	bl	8000f9c <AdventOfCode_print>
		return;
 8002000:	e004      	b.n	800200c <deleteFile+0xd4>
	}

	// deleted file
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Deleted file\n", strlen("Deleted file\n"));
 8002002:	220d      	movs	r2, #13
 8002004:	4908      	ldr	r1, [pc, #32]	; (8002028 <deleteFile+0xf0>)
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe ffc8 	bl	8000f9c <AdventOfCode_print>
}
 800200c:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000adc 	.word	0x20000adc
 8002018:	20000edc 	.word	0x20000edc
 800201c:	08019810 	.word	0x08019810
 8002020:	0801989c 	.word	0x0801989c
 8002024:	080198ac 	.word	0x080198ac
 8002028:	080198c4 	.word	0x080198c4

0800202c <USBD_HandleCommands>:

void USBD_HandleCommands()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	// check if message is valid
	if(!usb_rx_ready)
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <USBD_HandleCommands+0xc4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d059      	beq.n	80020ec <USBD_HandleCommands+0xc0>
		return;

	// turn on light
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	482d      	ldr	r0, [pc, #180]	; (80020f4 <USBD_HandleCommands+0xc8>)
 800203e:	f002 fa93 	bl	8004568 <HAL_GPIO_WritePin>

	// echo message
	//	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, (char*)usb_rx_buffer, strlen((char*)usb_rx_buffer));

	// process command
	switch(usb_rx_buffer[0])
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <USBD_HandleCommands+0xcc>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	3b63      	subs	r3, #99	; 0x63
 8002048:	2b12      	cmp	r3, #18
 800204a:	d83b      	bhi.n	80020c4 <USBD_HandleCommands+0x98>
 800204c:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <USBD_HandleCommands+0x28>)
 800204e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002052:	bf00      	nop
 8002054:	080020a1 	.word	0x080020a1
 8002058:	080020bf 	.word	0x080020bf
 800205c:	080020c5 	.word	0x080020c5
 8002060:	080020c5 	.word	0x080020c5
 8002064:	080020c5 	.word	0x080020c5
 8002068:	080020c5 	.word	0x080020c5
 800206c:	080020c5 	.word	0x080020c5
 8002070:	080020c5 	.word	0x080020c5
 8002074:	080020c5 	.word	0x080020c5
 8002078:	080020b9 	.word	0x080020b9
 800207c:	080020c5 	.word	0x080020c5
 8002080:	080020c5 	.word	0x080020c5
 8002084:	080020c5 	.word	0x080020c5
 8002088:	080020c5 	.word	0x080020c5
 800208c:	080020c5 	.word	0x080020c5
 8002090:	080020ad 	.word	0x080020ad
 8002094:	080020c5 	.word	0x080020c5
 8002098:	080020a7 	.word	0x080020a7
 800209c:	080020b3 	.word	0x080020b3
	{
	case USB_COMMAND_CHECK:
		checkImplementation();
 80020a0:	f7ff fb7c 	bl	800179c <checkImplementation>
		break;
 80020a4:	e014      	b.n	80020d0 <USBD_HandleCommands+0xa4>

	case USB_COMMAND_TEST:
		runDebugImplementation();
 80020a6:	f7ff fc3d 	bl	8001924 <runDebugImplementation>
		break;
 80020aa:	e011      	b.n	80020d0 <USBD_HandleCommands+0xa4>

	case USB_COMMAND_RELEASE:
		runReleaseImplementation();
 80020ac:	f7ff fd20 	bl	8001af0 <runReleaseImplementation>
		break;
 80020b0:	e00e      	b.n	80020d0 <USBD_HandleCommands+0xa4>

	case USB_COMMAND_UPLOAD:
		fetchPuzzleInput();
 80020b2:	f7ff fe03 	bl	8001cbc <fetchPuzzleInput>
		break;
 80020b6:	e00b      	b.n	80020d0 <USBD_HandleCommands+0xa4>

	case USB_COMMAND_LIST:
		showDirectory();
 80020b8:	f7ff feec 	bl	8001e94 <showDirectory>
		break;
 80020bc:	e008      	b.n	80020d0 <USBD_HandleCommands+0xa4>

	case USB_COMMAND_DELETE:
		deleteFile();
 80020be:	f7ff ff3b 	bl	8001f38 <deleteFile>
		break;
 80020c2:	e005      	b.n	80020d0 <USBD_HandleCommands+0xa4>

	default:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Unkown command!\n", strlen("Unkown command!\n"));
 80020c4:	2210      	movs	r2, #16
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <USBD_HandleCommands+0xd0>)
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7fe ff67 	bl	8000f9c <AdventOfCode_print>
		break;
 80020ce:	bf00      	nop
	}

	// print new cursor
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, ">", 1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	490b      	ldr	r1, [pc, #44]	; (8002100 <USBD_HandleCommands+0xd4>)
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7fe ff61 	bl	8000f9c <AdventOfCode_print>

	// clear receive flag
	usb_rx_ready = 0;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <USBD_HandleCommands+0xc4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]

	// turn off led
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <USBD_HandleCommands+0xc8>)
 80020e6:	f002 fa3f 	bl	8004568 <HAL_GPIO_WritePin>
 80020ea:	e000      	b.n	80020ee <USBD_HandleCommands+0xc2>
		return;
 80020ec:	bf00      	nop
}
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000ede 	.word	0x20000ede
 80020f4:	40021800 	.word	0x40021800
 80020f8:	20000adc 	.word	0x20000adc
 80020fc:	080198d4 	.word	0x080198d4
 8002100:	080198e8 	.word	0x080198e8

08002104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b096      	sub	sp, #88	; 0x58
 8002108:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800210a:	f001 f8b4 	bl	8003276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210e:	f000 f897 	bl	8002240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002112:	f000 fae7 	bl	80026e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002116:	f000 fa55 	bl	80025c4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800211a:	f000 f95f 	bl	80023dc <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 800211e:	f012 ffef 	bl	8015100 <MX_USB_DEVICE_Init>
  MX_USB_HOST_Init();
 8002122:	f013 fd9b 	bl	8015c5c <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8002126:	f000 fa1d 	bl	8002564 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800212a:	f000 f979 	bl	8002420 <MX_TIM1_Init>
  MX_TIM11_Init();
 800212e:	f000 f9cb 	bl	80024c8 <MX_TIM11_Init>
  MX_ADC1_Init();
 8002132:	f000 f8f3 	bl	800231c <MX_ADC1_Init>
  MX_FMC_Init();
 8002136:	f000 fa73 	bl	8002620 <MX_FMC_Init>
  MX_FATFS_Init();
 800213a:	f00c f809 	bl	800e150 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	// wait for usb connection
	while(!usb_connected)
 800213e:	e003      	b.n	8002148 <main+0x44>
	HAL_Delay(500);
 8002140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002144:	f001 f8f4 	bl	8003330 <HAL_Delay>
	while(!usb_connected)
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <main+0xcc>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f7      	beq.n	8002140 <main+0x3c>

	// system startup
	System_init(&system_state);
 8002150:	4820      	ldr	r0, [pc, #128]	; (80021d4 <main+0xd0>)
 8002152:	f7ff fa11 	bl	8001578 <System_init>

	// system init terminal log
	System_initLog(&system_state);
 8002156:	481f      	ldr	r0, [pc, #124]	; (80021d4 <main+0xd0>)
 8002158:	f7ff fa74 	bl	8001644 <System_initLog>
	System_selfTestLog(&system_state);
 800215c:	481d      	ldr	r0, [pc, #116]	; (80021d4 <main+0xd0>)
 800215e:	f7ff fa91 	bl	8001684 <System_selfTestLog>

	// init AOC
	AdventOfCode_init(&aoc,
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <main+0xd4>)
 8002164:	9315      	str	r3, [sp, #84]	; 0x54
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <main+0xd8>)
 8002168:	9314      	str	r3, [sp, #80]	; 0x50
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <main+0xdc>)
 800216c:	9313      	str	r3, [sp, #76]	; 0x4c
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <main+0xe0>)
 8002170:	9312      	str	r3, [sp, #72]	; 0x48
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <main+0xe4>)
 8002174:	9311      	str	r3, [sp, #68]	; 0x44
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <main+0xe8>)
 8002178:	9310      	str	r3, [sp, #64]	; 0x40
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <main+0xec>)
 800217c:	930f      	str	r3, [sp, #60]	; 0x3c
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <main+0xf0>)
 8002180:	930e      	str	r3, [sp, #56]	; 0x38
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <main+0xf4>)
 8002184:	930d      	str	r3, [sp, #52]	; 0x34
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <main+0xf8>)
 8002188:	930c      	str	r3, [sp, #48]	; 0x30
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <main+0xfc>)
 800218c:	930b      	str	r3, [sp, #44]	; 0x2c
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <main+0x100>)
 8002190:	930a      	str	r3, [sp, #40]	; 0x28
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <main+0x104>)
 8002194:	9309      	str	r3, [sp, #36]	; 0x24
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <main+0x108>)
 8002198:	9308      	str	r3, [sp, #32]
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <main+0x10c>)
 800219c:	9307      	str	r3, [sp, #28]
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <main+0x110>)
 80021a0:	9306      	str	r3, [sp, #24]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <main+0x114>)
 80021a4:	9305      	str	r3, [sp, #20]
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <main+0x118>)
 80021a8:	9304      	str	r3, [sp, #16]
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <main+0x11c>)
 80021ac:	9303      	str	r3, [sp, #12]
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <main+0x120>)
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <main+0x124>)
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <main+0x128>)
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <main+0x12c>)
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <main+0x130>)
 80021be:	491e      	ldr	r1, [pc, #120]	; (8002238 <main+0x134>)
 80021c0:	481e      	ldr	r0, [pc, #120]	; (800223c <main+0x138>)
 80021c2:	f7fe fe93 	bl	8000eec <AdventOfCode_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		USBD_HandleCommands();
 80021c6:	f7ff ff31 	bl	800202c <USBD_HandleCommands>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80021ca:	f013 fd6d 	bl	8015ca8 <MX_USB_HOST_Process>
		USBD_HandleCommands();
 80021ce:	e7fa      	b.n	80021c6 <main+0xc2>
 80021d0:	20000edf 	.word	0x20000edf
 80021d4:	20000670 	.word	0x20000670
 80021d8:	08001557 	.word	0x08001557
 80021dc:	08001535 	.word	0x08001535
 80021e0:	08001513 	.word	0x08001513
 80021e4:	080014f1 	.word	0x080014f1
 80021e8:	080014cf 	.word	0x080014cf
 80021ec:	080014ad 	.word	0x080014ad
 80021f0:	0800148b 	.word	0x0800148b
 80021f4:	08001469 	.word	0x08001469
 80021f8:	08001447 	.word	0x08001447
 80021fc:	08001425 	.word	0x08001425
 8002200:	08001403 	.word	0x08001403
 8002204:	080013e1 	.word	0x080013e1
 8002208:	080013bf 	.word	0x080013bf
 800220c:	0800139d 	.word	0x0800139d
 8002210:	0800137b 	.word	0x0800137b
 8002214:	08001359 	.word	0x08001359
 8002218:	08001337 	.word	0x08001337
 800221c:	08001315 	.word	0x08001315
 8002220:	080012f3 	.word	0x080012f3
 8002224:	080012d1 	.word	0x080012d1
 8002228:	080012af 	.word	0x080012af
 800222c:	0800128d 	.word	0x0800128d
 8002230:	0800126b 	.word	0x0800126b
 8002234:	08001249 	.word	0x08001249
 8002238:	08000fe9 	.word	0x08000fe9
 800223c:	20000ee0 	.word	0x20000ee0

08002240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b094      	sub	sp, #80	; 0x50
 8002244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	2230      	movs	r2, #48	; 0x30
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f014 f868 	bl	8016324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002264:	f005 f9a6 	bl	80075b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <SystemClock_Config+0xd4>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <SystemClock_Config+0xd4>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <SystemClock_Config+0xd4>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <SystemClock_Config+0xd8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <SystemClock_Config+0xd8>)
 8002286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <SystemClock_Config+0xd8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002298:	2301      	movs	r3, #1
 800229a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a2:	2302      	movs	r3, #2
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022ac:	2308      	movs	r3, #8
 80022ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022b0:	23d8      	movs	r3, #216	; 0xd8
 80022b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b4:	2302      	movs	r3, #2
 80022b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80022b8:	2309      	movs	r3, #9
 80022ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022bc:	f107 0320 	add.w	r3, r7, #32
 80022c0:	4618      	mov	r0, r3
 80022c2:	f005 f9d7 	bl	8007674 <HAL_RCC_OscConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80022cc:	f000 fb3c 	bl	8002948 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022d0:	f005 f980 	bl	80075d4 <HAL_PWREx_EnableOverDrive>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80022da:	f000 fb35 	bl	8002948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022de:	230f      	movs	r3, #15
 80022e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e2:	2302      	movs	r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2107      	movs	r1, #7
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 fc5d 	bl	8007bbc <HAL_RCC_ClockConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002308:	f000 fb1e 	bl	8002948 <Error_Handler>
  }
}
 800230c:	bf00      	nop
 800230e:	3750      	adds	r7, #80	; 0x50
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000

0800231c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002322:	463b      	mov	r3, r7
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002330:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <MX_ADC1_Init+0xb8>)
 8002332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002336:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800233a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <MX_ADC1_Init+0xb4>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002344:	2201      	movs	r2, #1
 8002346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <MX_ADC1_Init+0xb4>)
 800234a:	2201      	movs	r2, #1
 800234c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002358:	2200      	movs	r2, #0
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <MX_ADC1_Init+0xb4>)
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <MX_ADC1_Init+0xbc>)
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <MX_ADC1_Init+0xb4>)
 800236a:	2202      	movs	r2, #2
 800236c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <MX_ADC1_Init+0xb4>)
 8002378:	2201      	movs	r2, #1
 800237a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800237c:	4814      	ldr	r0, [pc, #80]	; (80023d0 <MX_ADC1_Init+0xb4>)
 800237e:	f000 fffb 	bl	8003378 <HAL_ADC_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002388:	f000 fade 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002390:	2301      	movs	r3, #1
 8002392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002394:	2306      	movs	r3, #6
 8002396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	4619      	mov	r1, r3
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <MX_ADC1_Init+0xb4>)
 800239e:	f001 f82f 	bl	8003400 <HAL_ADC_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023a8:	f000 face 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_ADC1_Init+0xb4>)
 80023ba:	f001 f821 	bl	8003400 <HAL_ADC_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80023c4:	f000 fac0 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000318 	.word	0x20000318
 80023d4:	40012000 	.word	0x40012000
 80023d8:	0f000001 	.word	0x0f000001

080023dc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <MX_SDMMC1_SD_Init+0x40>)
 80023e4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 8002400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002404:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 8002408:	2204      	movs	r2, #4
 800240a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <MX_SDMMC1_SD_Init+0x3c>)
 800240e:	f006 f9b1 	bl	8008774 <HAL_SD_Init>
  /* USER CODE END SDMMC1_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200003c0 	.word	0x200003c0
 800241c:	40012c00 	.word	0x40012c00

08002420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002440:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <MX_TIM1_Init+0xa4>)
 8002442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002456:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800246a:	4815      	ldr	r0, [pc, #84]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800246c:	f007 faf2 	bl	8009a54 <HAL_TIM_Base_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002476:	f000 fa67 	bl	8002948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	4619      	mov	r1, r3
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002488:	f007 fcb0 	bl	8009dec <HAL_TIM_ConfigClockSource>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002492:	f000 fa59 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <MX_TIM1_Init+0xa0>)
 80024a8:	f008 f902 	bl	800a6b0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024b2:	f000 fa49 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000504 	.word	0x20000504
 80024c4:	40010000 	.word	0x40010000

080024c8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
 80024dc:	615a      	str	r2, [r3, #20]
 80024de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <MX_TIM11_Init+0x94>)
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <MX_TIM11_Init+0x98>)
 80024e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <MX_TIM11_Init+0x94>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <MX_TIM11_Init+0x94>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_TIM11_Init+0x94>)
 80024f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <MX_TIM11_Init+0x94>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <MX_TIM11_Init+0x94>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002506:	4815      	ldr	r0, [pc, #84]	; (800255c <MX_TIM11_Init+0x94>)
 8002508:	f007 faa4 	bl	8009a54 <HAL_TIM_Base_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002512:	f000 fa19 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002516:	4811      	ldr	r0, [pc, #68]	; (800255c <MX_TIM11_Init+0x94>)
 8002518:	f007 faf3 	bl	8009b02 <HAL_TIM_PWM_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002522:	f000 fa11 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002526:	2360      	movs	r3, #96	; 0x60
 8002528:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <MX_TIM11_Init+0x94>)
 800253e:	f007 fb41 	bl	8009bc4 <HAL_TIM_PWM_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002548:	f000 f9fe 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <MX_TIM11_Init+0x94>)
 800254e:	f000 fc1d 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000550 	.word	0x20000550
 8002560:	40014800 	.word	0x40014800

08002564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <MX_USART1_UART_Init+0x58>)
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <MX_USART1_UART_Init+0x5c>)
 800256c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <MX_USART1_UART_Init+0x58>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_USART1_UART_Init+0x58>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <MX_USART1_UART_Init+0x58>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_USART1_UART_Init+0x58>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_USART1_UART_Init+0x58>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_USART1_UART_Init+0x58>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_USART1_UART_Init+0x58>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_USART1_UART_Init+0x58>)
 800259c:	2200      	movs	r2, #0
 800259e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_USART1_UART_Init+0x58>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_USART1_UART_Init+0x58>)
 80025a8:	f008 f910 	bl	800a7cc <HAL_UART_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025b2:	f000 f9c9 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000059c 	.word	0x2000059c
 80025c0:	40011000 	.word	0x40011000

080025c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_DMA_Init+0x58>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <MX_DMA_Init+0x58>)
 80025d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_DMA_Init+0x58>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2038      	movs	r0, #56	; 0x38
 80025e8:	f001 fa35 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025ec:	2038      	movs	r0, #56	; 0x38
 80025ee:	f001 fa4e 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	203b      	movs	r0, #59	; 0x3b
 80025f8:	f001 fa2d 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80025fc:	203b      	movs	r0, #59	; 0x3b
 80025fe:	f001 fa46 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2045      	movs	r0, #69	; 0x45
 8002608:	f001 fa25 	bl	8003a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800260c:	2045      	movs	r0, #69	; 0x45
 800260e:	f001 fa3e 	bl	8003a8e <HAL_NVIC_EnableIRQ>

}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <MX_FMC_Init+0xbc>)
 800263a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800263e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <MX_FMC_Init+0xbc>)
 8002642:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <MX_FMC_Init+0xc0>)
 8002644:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <MX_FMC_Init+0xbc>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <MX_FMC_Init+0xbc>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MX_FMC_Init+0xbc>)
 8002654:	2204      	movs	r2, #4
 8002656:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_FMC_Init+0xbc>)
 800265a:	2210      	movs	r2, #16
 800265c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <MX_FMC_Init+0xbc>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_FMC_Init+0xbc>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_FMC_Init+0xbc>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_FMC_Init+0xbc>)
 8002672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <MX_FMC_Init+0xbc>)
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <MX_FMC_Init+0xbc>)
 8002680:	2200      	movs	r2, #0
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <MX_FMC_Init+0xbc>)
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_FMC_Init+0xbc>)
 800268c:	2200      	movs	r2, #0
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <MX_FMC_Init+0xbc>)
 8002692:	2200      	movs	r2, #0
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_FMC_Init+0xbc>)
 8002698:	2200      	movs	r2, #0
 800269a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <MX_FMC_Init+0xbc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 80026a2:	2305      	movs	r3, #5
 80026a4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80026a6:	230f      	movs	r3, #15
 80026a8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 8;
 80026aa:	2308      	movs	r3, #8
 80026ac:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80026b2:	2310      	movs	r3, #16
 80026b4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80026b6:	2311      	movs	r3, #17
 80026b8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_FMC_Init+0xbc>)
 80026c6:	f007 f97d 	bl	80099c4 <HAL_SRAM_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80026d0:	f000 f93a 	bl	8002948 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000624 	.word	0x20000624
 80026e0:	a0000104 	.word	0xa0000104

080026e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026fa:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <MX_GPIO_Init+0x244>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a8a      	ldr	r2, [pc, #552]	; (8002928 <MX_GPIO_Init+0x244>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <MX_GPIO_Init+0x244>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	4b85      	ldr	r3, [pc, #532]	; (8002928 <MX_GPIO_Init+0x244>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a84      	ldr	r2, [pc, #528]	; (8002928 <MX_GPIO_Init+0x244>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b82      	ldr	r3, [pc, #520]	; (8002928 <MX_GPIO_Init+0x244>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <MX_GPIO_Init+0x244>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a7e      	ldr	r2, [pc, #504]	; (8002928 <MX_GPIO_Init+0x244>)
 8002730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <MX_GPIO_Init+0x244>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002742:	4b79      	ldr	r3, [pc, #484]	; (8002928 <MX_GPIO_Init+0x244>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a78      	ldr	r2, [pc, #480]	; (8002928 <MX_GPIO_Init+0x244>)
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <MX_GPIO_Init+0x244>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <MX_GPIO_Init+0x244>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a72      	ldr	r2, [pc, #456]	; (8002928 <MX_GPIO_Init+0x244>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <MX_GPIO_Init+0x244>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <MX_GPIO_Init+0x244>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <MX_GPIO_Init+0x244>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <MX_GPIO_Init+0x244>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <MX_GPIO_Init+0x244>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a66      	ldr	r2, [pc, #408]	; (8002928 <MX_GPIO_Init+0x244>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b64      	ldr	r3, [pc, #400]	; (8002928 <MX_GPIO_Init+0x244>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <MX_GPIO_Init+0x244>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <MX_GPIO_Init+0x244>)
 80027a8:	f043 0320 	orr.w	r3, r3, #32
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <MX_GPIO_Init+0x244>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <MX_GPIO_Init+0x244>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a5a      	ldr	r2, [pc, #360]	; (8002928 <MX_GPIO_Init+0x244>)
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b58      	ldr	r3, [pc, #352]	; (8002928 <MX_GPIO_Init+0x244>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027d8:	4854      	ldr	r0, [pc, #336]	; (800292c <MX_GPIO_Init+0x248>)
 80027da:	f001 fec5 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2104      	movs	r1, #4
 80027e2:	4853      	ldr	r0, [pc, #332]	; (8002930 <MX_GPIO_Init+0x24c>)
 80027e4:	f001 fec0 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2140      	movs	r1, #64	; 0x40
 80027ec:	4851      	ldr	r0, [pc, #324]	; (8002934 <MX_GPIO_Init+0x250>)
 80027ee:	f001 febb 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	21c0      	movs	r1, #192	; 0xc0
 80027f6:	4850      	ldr	r0, [pc, #320]	; (8002938 <MX_GPIO_Init+0x254>)
 80027f8:	f001 feb6 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 80027fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	4619      	mov	r1, r3
 8002814:	4845      	ldr	r0, [pc, #276]	; (800292c <MX_GPIO_Init+0x248>)
 8002816:	f001 fcfb 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 800281a:	f643 4333 	movw	r3, #15411	; 0x3c33
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	483f      	ldr	r0, [pc, #252]	; (800292c <MX_GPIO_Init+0x248>)
 8002830:	f001 fcee 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8002834:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002846:	4619      	mov	r1, r3
 8002848:	483b      	ldr	r0, [pc, #236]	; (8002938 <MX_GPIO_Init+0x254>)
 800284a:	f001 fce1 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 800284e:	f248 63e8 	movw	r3, #34536	; 0x86e8
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	4836      	ldr	r0, [pc, #216]	; (800293c <MX_GPIO_Init+0x258>)
 8002864:	f001 fcd4 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286c:	2300      	movs	r3, #0
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	4831      	ldr	r0, [pc, #196]	; (8002940 <MX_GPIO_Init+0x25c>)
 800287c:	f001 fcc8 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 8002880:	230b      	movs	r3, #11
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4619      	mov	r1, r3
 8002892:	4827      	ldr	r0, [pc, #156]	; (8002930 <MX_GPIO_Init+0x24c>)
 8002894:	f001 fcbc 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_HOST_VBUF_Pin */
  GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 8002898:	2304      	movs	r3, #4
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ac:	4619      	mov	r1, r3
 80028ae:	4820      	ldr	r0, [pc, #128]	; (8002930 <MX_GPIO_Init+0x24c>)
 80028b0:	f001 fcae 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80028b4:	23a0      	movs	r3, #160	; 0xa0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	481b      	ldr	r0, [pc, #108]	; (8002934 <MX_GPIO_Init+0x250>)
 80028c8:	f001 fca2 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80028cc:	2340      	movs	r3, #64	; 0x40
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4814      	ldr	r0, [pc, #80]	; (8002934 <MX_GPIO_Init+0x250>)
 80028e4:	f001 fc94 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80028e8:	23c0      	movs	r3, #192	; 0xc0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ec:	2301      	movs	r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	480e      	ldr	r0, [pc, #56]	; (8002938 <MX_GPIO_Init+0x254>)
 8002900:	f001 fc86 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002904:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	480a      	ldr	r0, [pc, #40]	; (8002944 <MX_GPIO_Init+0x260>)
 800291a:	f001 fc79 	bl	8004210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800291e:	bf00      	nop
 8002920:	3738      	adds	r7, #56	; 0x38
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40020400 	.word	0x40020400
 8002930:	40022000 	.word	0x40022000
 8002934:	40020800 	.word	0x40020800
 8002938:	40021800 	.word	0x40021800
 800293c:	40020000 	.word	0x40020000
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021400 	.word	0x40021400

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294e:	b672      	cpsid	i
}
 8002950:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	2140      	movs	r1, #64	; 0x40
 8002956:	481c      	ldr	r0, [pc, #112]	; (80029c8 <Error_Handler+0x80>)
 8002958:	f001 fe06 	bl	8004568 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	4819      	ldr	r0, [pc, #100]	; (80029c8 <Error_Handler+0x80>)
 8002962:	f001 fe01 	bl	8004568 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002966:	2200      	movs	r2, #0
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	4818      	ldr	r0, [pc, #96]	; (80029cc <Error_Handler+0x84>)
 800296c:	f001 fdfc 	bl	8004568 <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <Error_Handler+0x88>)
 8002972:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8002976:	2b02      	cmp	r3, #2
 8002978:	d010      	beq.n	800299c <Error_Handler+0x54>
 800297a:	2b02      	cmp	r3, #2
 800297c:	dc17      	bgt.n	80029ae <Error_Handler+0x66>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <Error_Handler+0x40>
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <Error_Handler+0x4a>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 8002986:	e012      	b.n	80029ae <Error_Handler+0x66>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002988:	2140      	movs	r1, #64	; 0x40
 800298a:	480f      	ldr	r0, [pc, #60]	; (80029c8 <Error_Handler+0x80>)
 800298c:	f001 fe05 	bl	800459a <HAL_GPIO_TogglePin>
			break;
 8002990:	e00e      	b.n	80029b0 <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <Error_Handler+0x80>)
 8002996:	f001 fe00 	bl	800459a <HAL_GPIO_TogglePin>
			break;
 800299a:	e009      	b.n	80029b0 <Error_Handler+0x68>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800299c:	2140      	movs	r1, #64	; 0x40
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <Error_Handler+0x80>)
 80029a0:	f001 fdfb 	bl	800459a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <Error_Handler+0x80>)
 80029a8:	f001 fdf7 	bl	800459a <HAL_GPIO_TogglePin>
			break;
 80029ac:	e000      	b.n	80029b0 <Error_Handler+0x68>
			break;
 80029ae:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 80029b0:	2300      	movs	r3, #0
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	e002      	b.n	80029bc <Error_Handler+0x74>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3301      	adds	r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <Error_Handler+0x8c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d9f8      	bls.n	80029b6 <Error_Handler+0x6e>
		switch(system_state.error)
 80029c4:	e7d4      	b.n	8002970 <Error_Handler+0x28>
 80029c6:	bf00      	nop
 80029c8:	40021800 	.word	0x40021800
 80029cc:	40020800 	.word	0x40020800
 80029d0:	20000670 	.word	0x20000670
 80029d4:	001e847f 	.word	0x001e847f

080029d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_MspInit+0x44>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_MspInit+0x44>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_MspInit+0x44>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_MspInit+0x44>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_MspInit+0x44>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_MspInit+0x44>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <HAL_ADC_MspInit+0xd4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d153      	bne.n	8002aea <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_ADC_MspInit+0xd8>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <HAL_ADC_MspInit+0xd8>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_ADC_MspInit+0xd8>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_ADC_MspInit+0xd8>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_ADC_MspInit+0xd8>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_ADC_MspInit+0xd8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002a72:	2305      	movs	r3, #5
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a76:	2303      	movs	r3, #3
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	481d      	ldr	r0, [pc, #116]	; (8002afc <HAL_ADC_MspInit+0xdc>)
 8002a86:	f001 fbc3 	bl	8004210 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_ADC_MspInit+0xe4>)
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002ab4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ab8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ace:	480c      	ldr	r0, [pc, #48]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002ad0:	f000 fff8 	bl	8003ac4 <HAL_DMA_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002ada:	f7ff ff35 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <HAL_ADC_MspInit+0xe0>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40012000 	.word	0x40012000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	20000360 	.word	0x20000360
 8002b04:	40026410 	.word	0x40026410

08002b08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0ac      	sub	sp, #176	; 0xb0
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b20:	f107 0318 	add.w	r3, r7, #24
 8002b24:	2284      	movs	r2, #132	; 0x84
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f013 fbfb 	bl	8016324 <memset>
  if(hsd->Instance==SDMMC1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a74      	ldr	r2, [pc, #464]	; (8002d04 <HAL_SD_MspInit+0x1fc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f040 80e0 	bne.w	8002cfa <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8002b3a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8002b3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4c:	f107 0318 	add.w	r3, r7, #24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f005 fa57 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8002b5c:	f7ff fef4 	bl	8002948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002b60:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6c:	4b66      	ldr	r3, [pc, #408]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b78:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a62      	ldr	r2, [pc, #392]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b90:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a5c      	ldr	r2, [pc, #368]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <HAL_SD_MspInit+0x200>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8002ba8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bcc:	4619      	mov	r1, r3
 8002bce:	484f      	ldr	r0, [pc, #316]	; (8002d0c <HAL_SD_MspInit+0x204>)
 8002bd0:	f001 fb1e 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002bec:	230c      	movs	r3, #12
 8002bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4845      	ldr	r0, [pc, #276]	; (8002d10 <HAL_SD_MspInit+0x208>)
 8002bfa:	f001 fb09 	bl	8004210 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c00:	4a45      	ldr	r2, [pc, #276]	; (8002d18 <HAL_SD_MspInit+0x210>)
 8002c02:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c0a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c12:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c18:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c1e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c20:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c26:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c28:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c2e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c32:	2220      	movs	r2, #32
 8002c34:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c3e:	2204      	movs	r2, #4
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c44:	2203      	movs	r2, #3
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002c58:	482e      	ldr	r0, [pc, #184]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c5a:	f000 ff33 	bl	8003ac4 <HAL_DMA_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8002c64:	f7ff fe70 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c6e:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_SD_MspInit+0x20c>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002c76:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <HAL_SD_MspInit+0x218>)
 8002c78:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002c7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c80:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002c84:	2240      	movs	r2, #64	; 0x40
 8002c86:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c94:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c9c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ca4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002ca8:	2220      	movs	r2, #32
 8002caa:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002cba:	2203      	movs	r2, #3
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002cc0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002cc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002cce:	4813      	ldr	r0, [pc, #76]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002cd0:	f000 fef8 	bl	8003ac4 <HAL_DMA_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002cda:	f7ff fe35 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_SD_MspInit+0x214>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	2031      	movs	r0, #49	; 0x31
 8002cf0:	f000 feb1 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002cf4:	2031      	movs	r0, #49	; 0x31
 8002cf6:	f000 feca 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	37b0      	adds	r7, #176	; 0xb0
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	20000444 	.word	0x20000444
 8002d18:	40026458 	.word	0x40026458
 8002d1c:	200004a4 	.word	0x200004a4
 8002d20:	400264a0 	.word	0x400264a0

08002d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <HAL_TIM_Base_MspInit+0x5c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10c      	bne.n	8002d50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d4e:	e010      	b.n	8002d72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <HAL_TIM_Base_MspInit+0x64>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10b      	bne.n	8002d72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40014800 	.word	0x40014800

08002d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <HAL_TIM_MspPostInit+0x64>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d11b      	bne.n	8002de6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002db4:	f043 0320 	orr.w	r3, r3, #32
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 030c 	add.w	r3, r7, #12
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_TIM_MspPostInit+0x6c>)
 8002de2:	f001 fa15 	bl	8004210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40014800 	.word	0x40014800
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40021400 	.word	0x40021400

08002dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b0aa      	sub	sp, #168	; 0xa8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	2284      	movs	r2, #132	; 0x84
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f013 fa81 	bl	8016324 <memset>
  if(huart->Instance==USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_UART_MspInit+0xb0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d13a      	bne.n	8002ea2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e2c:	2340      	movs	r3, #64	; 0x40
 8002e2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e30:	2300      	movs	r3, #0
 8002e32:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f005 f8e3 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e44:	f7ff fd80 	bl	8002948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_UART_MspInit+0xb4>)
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_UART_MspInit+0xb4>)
 8002e4e:	f043 0310 	orr.w	r3, r3, #16
 8002e52:	6453      	str	r3, [r2, #68]	; 0x44
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_UART_MspInit+0xb4>)
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_UART_MspInit+0xb4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <HAL_UART_MspInit+0xb4>)
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_UART_MspInit+0xb4>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8002e78:	23c0      	movs	r3, #192	; 0xc0
 8002e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e90:	2307      	movs	r3, #7
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <HAL_UART_MspInit+0xb8>)
 8002e9e:	f001 f9b7 	bl	8004210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	37a8      	adds	r7, #168	; 0xa8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020400 	.word	0x40020400

08002eb8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_FMC_MspInit+0xc4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d14e      	bne.n	8002f72 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_FMC_MspInit+0xc4>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_FMC_MspInit+0xc8>)
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <HAL_FMC_MspInit+0xc8>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_FMC_MspInit+0xc8>)
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8002ef2:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8002ef6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f04:	230c      	movs	r3, #12
 8002f06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	481d      	ldr	r0, [pc, #116]	; (8002f84 <HAL_FMC_MspInit+0xcc>)
 8002f0e:	f001 f97f 	bl	8004210 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8002f12:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8002f16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f24:	230c      	movs	r3, #12
 8002f26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4816      	ldr	r0, [pc, #88]	; (8002f88 <HAL_FMC_MspInit+0xd0>)
 8002f2e:	f001 f96f 	bl	8004210 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8002f32:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002f36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f44:	230c      	movs	r3, #12
 8002f46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480f      	ldr	r0, [pc, #60]	; (8002f8c <HAL_FMC_MspInit+0xd4>)
 8002f4e:	f001 f95f 	bl	8004210 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8002f52:	233f      	movs	r3, #63	; 0x3f
 8002f54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f62:	230c      	movs	r3, #12
 8002f64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4809      	ldr	r0, [pc, #36]	; (8002f90 <HAL_FMC_MspInit+0xd8>)
 8002f6c:	f001 f950 	bl	8004210 <HAL_GPIO_Init>
 8002f70:	e000      	b.n	8002f74 <HAL_FMC_MspInit+0xbc>
    return;
 8002f72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000f44 	.word	0x20000f44
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40021400 	.word	0x40021400
 8002f90:	40021800 	.word	0x40021800

08002f94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f9c:	f7ff ff8c 	bl	8002eb8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <NMI_Handler+0x4>

08002fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <HardFault_Handler+0x4>

08002fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <MemManage_Handler+0x4>

08002fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fbe:	e7fe      	b.n	8002fbe <BusFault_Handler+0x4>

08002fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <UsageFault_Handler+0x4>

08002fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff4:	f000 f97c 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <SDMMC1_IRQHandler+0x10>)
 8003002:	f005 fe37 	bl	8008c74 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200003c0 	.word	0x200003c0

08003010 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <DMA2_Stream0_IRQHandler+0x10>)
 8003016:	f000 fe85 	bl	8003d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000360 	.word	0x20000360

08003024 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <DMA2_Stream3_IRQHandler+0x10>)
 800302a:	f000 fe7b 	bl	8003d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000444 	.word	0x20000444

08003038 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <OTG_FS_IRQHandler+0x10>)
 800303e:	f001 fd31 	bl	8004aa4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20002d58 	.word	0x20002d58

0800304c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <DMA2_Stream6_IRQHandler+0x10>)
 8003052:	f000 fe67 	bl	8003d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200004a4 	.word	0x200004a4

08003060 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <OTG_HS_IRQHandler+0x10>)
 8003066:	f003 f933 	bl	80062d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20002474 	.word	0x20002474

08003074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return 1;
 8003078:	2301      	movs	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_kill>:

int _kill(int pid, int sig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800308e:	f013 f901 	bl	8016294 <__errno>
 8003092:	4603      	mov	r3, r0
 8003094:	2216      	movs	r2, #22
 8003096:	601a      	str	r2, [r3, #0]
  return -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_exit>:

void _exit (int status)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ffe7 	bl	8003084 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030b6:	e7fe      	b.n	80030b6 <_exit+0x12>

080030b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ca:	f3af 8000 	nop.w
 80030ce:	4601      	mov	r1, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf0      	blt.n	80030ca <_read+0x12>
  }

  return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e009      	b.n	8003118 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbf1      	blt.n	8003104 <_write+0x12>
  }
  return len;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_close>:

int _close(int file)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003152:	605a      	str	r2, [r3, #4]
  return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_isatty>:

int _isatty(int file)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <_sbrk+0x5c>)
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_sbrk+0x60>)
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_sbrk+0x64>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <_sbrk+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c4:	f013 f866 	bl	8016294 <__errno>
 80031c8:	4603      	mov	r3, r0
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e009      	b.n	80031e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_sbrk+0x64>)
 80031e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20050000 	.word	0x20050000
 80031f4:	00000400 	.word	0x00000400
 80031f8:	20000f48 	.word	0x20000f48
 80031fc:	20003070 	.word	0x20003070

08003200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SystemInit+0x20>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <SystemInit+0x20>)
 800320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800325c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800322a:	490e      	ldr	r1, [pc, #56]	; (8003264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003230:	e002      	b.n	8003238 <LoopCopyDataInit>

08003232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003236:	3304      	adds	r3, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800323c:	d3f9      	bcc.n	8003232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003240:	4c0b      	ldr	r4, [pc, #44]	; (8003270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003244:	e001      	b.n	800324a <LoopFillZerobss>

08003246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003248:	3204      	adds	r2, #4

0800324a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800324c:	d3fb      	bcc.n	8003246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800324e:	f7ff ffd7 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003252:	f013 f825 	bl	80162a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003256:	f7fe ff55 	bl	8002104 <main>
  bx  lr    
 800325a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800325c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003264:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8003268:	08019e1c 	.word	0x08019e1c
  ldr r2, =_sbss
 800326c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8003270:	2000306c 	.word	0x2000306c

08003274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC_IRQHandler>

08003276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327a:	2003      	movs	r0, #3
 800327c:	f000 fbe0 	bl	8003a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003280:	200f      	movs	r0, #15
 8003282:	f000 f805 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003286:	f7ff fba7 	bl	80029d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fbfb 	bl	8003aaa <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f000 fbc3 	bl	8003a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000000 	.word	0x20000000
 80032e8:	20000008 	.word	0x20000008
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000008 	.word	0x20000008
 8003314:	20000f4c 	.word	0x20000f4c

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000f4c 	.word	0x20000f4c

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_Delay+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000008 	.word	0x20000008

08003378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e031      	b.n	80033f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fb42 	bl	8002a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d116      	bne.n	80033e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_ADC_Init+0x84>)
 80033bc:	4013      	ands	r3, r2
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f970 	bl	80036ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
 80033e2:	e001      	b.n	80033e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	ffffeefd 	.word	0xffffeefd

08003400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1c>
 8003418:	2302      	movs	r3, #2
 800341a:	e136      	b.n	800368a <HAL_ADC_ConfigChannel+0x28a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d93a      	bls.n	80034a2 <HAL_ADC_ConfigChannel+0xa2>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003434:	d035      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68d9      	ldr	r1, [r3, #12]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	3b1e      	subs	r3, #30
 800344c:	2207      	movs	r2, #7
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	400a      	ands	r2, r1
 800345a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a8d      	ldr	r2, [pc, #564]	; (8003698 <HAL_ADC_ConfigChannel+0x298>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10a      	bne.n	800347c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68d9      	ldr	r1, [r3, #12]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	061a      	lsls	r2, r3, #24
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347a:	e035      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68d9      	ldr	r1, [r3, #12]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	4618      	mov	r0, r3
 800348e:	4603      	mov	r3, r0
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4403      	add	r3, r0
 8003494:	3b1e      	subs	r3, #30
 8003496:	409a      	lsls	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a0:	e022      	b.n	80034e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6919      	ldr	r1, [r3, #16]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	2207      	movs	r2, #7
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43da      	mvns	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6919      	ldr	r1, [r3, #16]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	4603      	mov	r3, r0
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4403      	add	r3, r0
 80034de:	409a      	lsls	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d824      	bhi.n	800353a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b05      	subs	r3, #5
 8003502:	221f      	movs	r2, #31
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43da      	mvns	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	400a      	ands	r2, r1
 8003510:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b05      	subs	r3, #5
 800352c:	fa00 f203 	lsl.w	r2, r0, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	635a      	str	r2, [r3, #52]	; 0x34
 8003538:	e04c      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d824      	bhi.n	800358c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	3b23      	subs	r3, #35	; 0x23
 8003554:	221f      	movs	r2, #31
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	400a      	ands	r2, r1
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	3b23      	subs	r3, #35	; 0x23
 800357e:	fa00 f203 	lsl.w	r2, r0, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
 800358a:	e023      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	3b41      	subs	r3, #65	; 0x41
 800359e:	221f      	movs	r2, #31
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43da      	mvns	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	400a      	ands	r2, r1
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b41      	subs	r3, #65	; 0x41
 80035c8:	fa00 f203 	lsl.w	r2, r0, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a30      	ldr	r2, [pc, #192]	; (800369c <HAL_ADC_ConfigChannel+0x29c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10a      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x1f4>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e6:	d105      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80035ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80035f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_ADC_ConfigChannel+0x29c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10f      	bne.n	800361e <HAL_ADC_ConfigChannel+0x21e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b12      	cmp	r3, #18
 8003604:	d10b      	bne.n	800361e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800360c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003610:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800361c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_ADC_ConfigChannel+0x29c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d12b      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x280>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_ADC_ConfigChannel+0x298>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <HAL_ADC_ConfigChannel+0x23a>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b11      	cmp	r3, #17
 8003638:	d122      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003640:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003644:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800364c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003650:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_ADC_ConfigChannel+0x298>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d111      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_ADC_ConfigChannel+0x2a4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9a      	lsrs	r2, r3, #18
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003672:	e002      	b.n	800367a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3b01      	subs	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	10000012 	.word	0x10000012
 800369c:	40012000 	.word	0x40012000
 80036a0:	40012300 	.word	0x40012300
 80036a4:	20000000 	.word	0x20000000
 80036a8:	431bde83 	.word	0x431bde83

080036ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80036b4:	4b78      	ldr	r3, [pc, #480]	; (8003898 <ADC_Init+0x1ec>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a77      	ldr	r2, [pc, #476]	; (8003898 <ADC_Init+0x1ec>)
 80036ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80036c0:	4b75      	ldr	r3, [pc, #468]	; (8003898 <ADC_Init+0x1ec>)
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4973      	ldr	r1, [pc, #460]	; (8003898 <ADC_Init+0x1ec>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	4a58      	ldr	r2, [pc, #352]	; (800389c <ADC_Init+0x1f0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800374e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6899      	ldr	r1, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	e00f      	b.n	80037a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0202 	bic.w	r2, r2, #2
 80037b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	005a      	lsls	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01b      	beq.n	800380c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	3b01      	subs	r3, #1
 8003800:	035a      	lsls	r2, r3, #13
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	e007      	b.n	800381c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	3b01      	subs	r3, #1
 8003838:	051a      	lsls	r2, r3, #20
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800385e:	025a      	lsls	r2, r3, #9
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6899      	ldr	r1, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	029a      	lsls	r2, r3, #10
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40012300 	.word	0x40012300
 800389c:	0f000001 	.word	0x0f000001

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <__NVIC_SetPriorityGrouping+0x40>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <__NVIC_SetPriorityGrouping+0x40>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60d3      	str	r3, [r2, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00
 80038e4:	05fa0000 	.word	0x05fa0000

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	; (800393c <__NVIC_EnableIRQ+0x38>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db0a      	blt.n	800396a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	490c      	ldr	r1, [pc, #48]	; (800398c <__NVIC_SetPriority+0x4c>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	440b      	add	r3, r1
 8003964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003968:	e00a      	b.n	8003980 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4908      	ldr	r1, [pc, #32]	; (8003990 <__NVIC_SetPriority+0x50>)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3b04      	subs	r3, #4
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	440b      	add	r3, r1
 800397e:	761a      	strb	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f1c3 0307 	rsb	r3, r3, #7
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf28      	it	cs
 80039b2:	2304      	movcs	r3, #4
 80039b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d902      	bls.n	80039c4 <NVIC_EncodePriority+0x30>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b03      	subs	r3, #3
 80039c2:	e000      	b.n	80039c6 <NVIC_EncodePriority+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039dc:	f04f 31ff 	mov.w	r1, #4294967295
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	4313      	orrs	r3, r2
         );
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a0c:	d301      	bcc.n	8003a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <SysTick_Config+0x40>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	f7ff ff8e 	bl	8003940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <SysTick_Config+0x40>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <SysTick_Config+0x40>)
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff29 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a68:	f7ff ff3e 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff ff8e 	bl	8003994 <NVIC_EncodePriority>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff5d 	bl	8003940 <__NVIC_SetPriority>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff31 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffa2 	bl	80039fc <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ad0:	f7ff fc22 	bl	8003318 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e099      	b.n	8003c14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b00:	e00f      	b.n	8003b22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b02:	f7ff fc09 	bl	8003318 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d908      	bls.n	8003b22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e078      	b.n	8003c14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e8      	bne.n	8003b02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <HAL_DMA_Init+0x158>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d107      	bne.n	8003b8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	4313      	orrs	r3, r2
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d117      	bne.n	8003be6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 faa5 	bl	8004118 <DMA_CheckFifoParam>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003be2:	2301      	movs	r3, #1
 8003be4:	e016      	b.n	8003c14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa5c 	bl	80040ac <DMA_CalcBaseAndBitshift>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	223f      	movs	r2, #63	; 0x3f
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	f010803f 	.word	0xf010803f

08003c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_DMA_Start_IT+0x26>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e048      	b.n	8003cd8 <HAL_DMA_Start_IT+0xb8>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d137      	bne.n	8003cca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f9ee 	bl	8004050 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	223f      	movs	r2, #63	; 0x3f
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0216 	orr.w	r2, r2, #22
 8003c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e005      	b.n	8003cd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00c      	b.n	8003d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2205      	movs	r2, #5
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d30:	4b8e      	ldr	r3, [pc, #568]	; (8003f6c <HAL_DMA_IRQHandler+0x248>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a8e      	ldr	r2, [pc, #568]	; (8003f70 <HAL_DMA_IRQHandler+0x24c>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2208      	movs	r2, #8
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01a      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0201 	orr.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2201      	movs	r2, #1
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	2201      	movs	r2, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f043 0202 	orr.w	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2204      	movs	r2, #4
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2204      	movs	r2, #4
 8003dea:	409a      	lsls	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	2210      	movs	r2, #16
 8003e02:	409a      	lsls	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d043      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d03c      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	2210      	movs	r2, #16
 8003e20:	409a      	lsls	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d024      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
 8003e52:	e01f      	b.n	8003e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e016      	b.n	8003e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0208 	bic.w	r2, r2, #8
 8003e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2220      	movs	r2, #32
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 808f 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8087 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	2220      	movs	r2, #32
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d136      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0216 	bic.w	r2, r2, #22
 8003edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_DMA_IRQHandler+0x1da>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	223f      	movs	r2, #63	; 0x3f
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d07e      	beq.n	8004030 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
        }
        return;
 8003f3a:	e079      	b.n	8004030 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01d      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d031      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
 8003f68:	e02c      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
 8003f6a:	bf00      	nop
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d023      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e01e      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10f      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0210 	bic.w	r2, r2, #16
 8003fa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d032      	beq.n	8004032 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d022      	beq.n	800401e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2205      	movs	r2, #5
 8003fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d307      	bcc.n	800400c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f2      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x2cc>
 800400a:	e000      	b.n	800400e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800400c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
 800402e:	e000      	b.n	8004032 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004030:	bf00      	nop
    }
  }
}
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800406c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d108      	bne.n	8004090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800408e:	e007      	b.n	80040a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3b10      	subs	r3, #16
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <DMA_CalcBaseAndBitshift+0x60>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <DMA_CalcBaseAndBitshift+0x64>)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d908      	bls.n	80040ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <DMA_CalcBaseAndBitshift+0x68>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	1d1a      	adds	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	659a      	str	r2, [r3, #88]	; 0x58
 80040ea:	e006      	b.n	80040fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <DMA_CalcBaseAndBitshift+0x68>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	aaaaaaab 	.word	0xaaaaaaab
 8004110:	08019994 	.word	0x08019994
 8004114:	fffffc00 	.word	0xfffffc00

08004118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11f      	bne.n	8004172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d856      	bhi.n	80041e6 <DMA_CheckFifoParam+0xce>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <DMA_CheckFifoParam+0x28>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004151 	.word	0x08004151
 8004144:	08004163 	.word	0x08004163
 8004148:	08004151 	.word	0x08004151
 800414c:	080041e7 	.word	0x080041e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d046      	beq.n	80041ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004160:	e043      	b.n	80041ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800416a:	d140      	bne.n	80041ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e03d      	b.n	80041ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417a:	d121      	bne.n	80041c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d837      	bhi.n	80041f2 <DMA_CheckFifoParam+0xda>
 8004182:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <DMA_CheckFifoParam+0x70>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	08004199 	.word	0x08004199
 800418c:	0800419f 	.word	0x0800419f
 8004190:	08004199 	.word	0x08004199
 8004194:	080041b1 	.word	0x080041b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e030      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d025      	beq.n	80041f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ae:	e022      	b.n	80041f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041b8:	d11f      	bne.n	80041fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041be:	e01c      	b.n	80041fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d903      	bls.n	80041ce <DMA_CheckFifoParam+0xb6>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d003      	beq.n	80041d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041cc:	e018      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
      break;
 80041d2:	e015      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00e      	beq.n	80041fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e00b      	b.n	80041fe <DMA_CheckFifoParam+0xe6>
      break;
 80041e6:	bf00      	nop
 80041e8:	e00a      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e008      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      break;
 80041ee:	bf00      	nop
 80041f0:	e006      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e004      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e002      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      break;   
 80041fa:	bf00      	nop
 80041fc:	e000      	b.n	8004200 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e175      	b.n	800451c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004230:	2201      	movs	r2, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	f040 8164 	bne.w	8004516 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d005      	beq.n	8004266 <HAL_GPIO_Init+0x56>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d130      	bne.n	80042c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d017      	beq.n	8004304 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d123      	bne.n	8004358 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0203 	and.w	r2, r3, #3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80be 	beq.w	8004516 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_GPIO_Init+0x324>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	4a65      	ldr	r2, [pc, #404]	; (8004534 <HAL_GPIO_Init+0x324>)
 80043a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a4:	6453      	str	r3, [r2, #68]	; 0x44
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_GPIO_Init+0x324>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043b2:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_GPIO_Init+0x328>)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	3302      	adds	r3, #2
 80043ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	220f      	movs	r2, #15
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_GPIO_Init+0x32c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d037      	beq.n	800444e <HAL_GPIO_Init+0x23e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a57      	ldr	r2, [pc, #348]	; (8004540 <HAL_GPIO_Init+0x330>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d031      	beq.n	800444a <HAL_GPIO_Init+0x23a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a56      	ldr	r2, [pc, #344]	; (8004544 <HAL_GPIO_Init+0x334>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x236>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a55      	ldr	r2, [pc, #340]	; (8004548 <HAL_GPIO_Init+0x338>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x232>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a54      	ldr	r2, [pc, #336]	; (800454c <HAL_GPIO_Init+0x33c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x22e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a53      	ldr	r2, [pc, #332]	; (8004550 <HAL_GPIO_Init+0x340>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x22a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_GPIO_Init+0x344>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x226>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a51      	ldr	r2, [pc, #324]	; (8004558 <HAL_GPIO_Init+0x348>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x222>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a50      	ldr	r2, [pc, #320]	; (800455c <HAL_GPIO_Init+0x34c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x21e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4f      	ldr	r2, [pc, #316]	; (8004560 <HAL_GPIO_Init+0x350>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x21a>
 8004426:	2309      	movs	r3, #9
 8004428:	e012      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800442a:	230a      	movs	r3, #10
 800442c:	e010      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800442e:	2308      	movs	r3, #8
 8004430:	e00e      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004432:	2307      	movs	r3, #7
 8004434:	e00c      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004436:	2306      	movs	r3, #6
 8004438:	e00a      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800443a:	2305      	movs	r3, #5
 800443c:	e008      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800443e:	2304      	movs	r3, #4
 8004440:	e006      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004442:	2303      	movs	r3, #3
 8004444:	e004      	b.n	8004450 <HAL_GPIO_Init+0x240>
 8004446:	2302      	movs	r3, #2
 8004448:	e002      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_GPIO_Init+0x240>
 800444e:	2300      	movs	r3, #0
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f002 0203 	and.w	r2, r2, #3
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	4093      	lsls	r3, r2
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004460:	4935      	ldr	r1, [pc, #212]	; (8004538 <HAL_GPIO_Init+0x328>)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	3302      	adds	r3, #2
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_GPIO_Init+0x354>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <HAL_GPIO_Init+0x354>)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_GPIO_Init+0x354>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044c2:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044e6:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_GPIO_Init+0x354>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <HAL_GPIO_Init+0x354>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	f67f ae86 	bls.w	8004230 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3724      	adds	r7, #36	; 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	40013800 	.word	0x40013800
 800453c:	40020000 	.word	0x40020000
 8004540:	40020400 	.word	0x40020400
 8004544:	40020800 	.word	0x40020800
 8004548:	40020c00 	.word	0x40020c00
 800454c:	40021000 	.word	0x40021000
 8004550:	40021400 	.word	0x40021400
 8004554:	40021800 	.word	0x40021800
 8004558:	40021c00 	.word	0x40021c00
 800455c:	40022000 	.word	0x40022000
 8004560:	40022400 	.word	0x40022400
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
 8004574:	4613      	mov	r3, r2
 8004576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004578:	787b      	ldrb	r3, [r7, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004584:	e003      	b.n	800458e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ac:	887a      	ldrh	r2, [r7, #2]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	041a      	lsls	r2, r3, #16
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	400b      	ands	r3, r1
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	619a      	str	r2, [r3, #24]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80045ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d0:	b08f      	sub	sp, #60	; 0x3c
 80045d2:	af0a      	add	r7, sp, #40	; 0x28
 80045d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e054      	b.n	800468a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f011 fb8c 	bl	8015d18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2203      	movs	r2, #3
 8004604:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f007 fc7b 	bl	800bf1a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	687e      	ldr	r6, [r7, #4]
 800462c:	466d      	mov	r5, sp
 800462e:	f106 0410 	add.w	r4, r6, #16
 8004632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800463e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004642:	1d33      	adds	r3, r6, #4
 8004644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f007 fb5c 	bl	800bd04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f007 fc72 	bl	800bf3c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	687e      	ldr	r6, [r7, #4]
 8004660:	466d      	mov	r5, sp
 8004662:	f106 0410 	add.w	r4, r6, #16
 8004666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800466a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800466c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800466e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004672:	e885 0003 	stmia.w	r5, {r0, r1}
 8004676:	1d33      	adds	r3, r6, #4
 8004678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800467a:	6838      	ldr	r0, [r7, #0]
 800467c:	f008 ffae 	bl	800d5dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004692 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004692:	b590      	push	{r4, r7, lr}
 8004694:	b089      	sub	sp, #36	; 0x24
 8004696:	af04      	add	r7, sp, #16
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	4608      	mov	r0, r1
 800469c:	4611      	mov	r1, r2
 800469e:	461a      	mov	r2, r3
 80046a0:	4603      	mov	r3, r0
 80046a2:	70fb      	strb	r3, [r7, #3]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70bb      	strb	r3, [r7, #2]
 80046a8:	4613      	mov	r3, r2
 80046aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_HCD_HC_Init+0x28>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e076      	b.n	80047a8 <HAL_HCD_HC_Init+0x116>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	333d      	adds	r3, #61	; 0x3d
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3338      	adds	r3, #56	; 0x38
 80046e2:	787a      	ldrb	r2, [r7, #1]
 80046e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3340      	adds	r3, #64	; 0x40
 80046f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80046f6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	212c      	movs	r1, #44	; 0x2c
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	4413      	add	r3, r2
 8004704:	3339      	adds	r3, #57	; 0x39
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	333f      	adds	r3, #63	; 0x3f
 8004718:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800471c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	78ba      	ldrb	r2, [r7, #2]
 8004722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004726:	b2d0      	uxtb	r0, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	333a      	adds	r3, #58	; 0x3a
 8004734:	4602      	mov	r2, r0
 8004736:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004738:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800473c:	2b00      	cmp	r3, #0
 800473e:	da09      	bge.n	8004754 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	333b      	adds	r3, #59	; 0x3b
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e008      	b.n	8004766 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	333b      	adds	r3, #59	; 0x3b
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	333c      	adds	r3, #60	; 0x3c
 8004774:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004778:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	787c      	ldrb	r4, [r7, #1]
 8004780:	78ba      	ldrb	r2, [r7, #2]
 8004782:	78f9      	ldrb	r1, [r7, #3]
 8004784:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004786:	9302      	str	r3, [sp, #8]
 8004788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4623      	mov	r3, r4
 8004796:	f009 f89b 	bl	800d8d0 <USB_HC_Init>
 800479a:	4603      	mov	r3, r0
 800479c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_HCD_HC_Halt+0x1e>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e00f      	b.n	80047ee <HAL_HCD_HC_Halt+0x3e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f009 faeb 	bl	800ddba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	4603      	mov	r3, r0
 8004808:	70fb      	strb	r3, [r7, #3]
 800480a:	460b      	mov	r3, r1
 800480c:	70bb      	strb	r3, [r7, #2]
 800480e:	4613      	mov	r3, r2
 8004810:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	212c      	movs	r1, #44	; 0x2c
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	333b      	adds	r3, #59	; 0x3b
 8004820:	78ba      	ldrb	r2, [r7, #2]
 8004822:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	333f      	adds	r3, #63	; 0x3f
 8004832:	787a      	ldrb	r2, [r7, #1]
 8004834:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004836:	7c3b      	ldrb	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d112      	bne.n	8004862 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3342      	adds	r3, #66	; 0x42
 800484a:	2203      	movs	r2, #3
 800484c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	333d      	adds	r3, #61	; 0x3d
 800485c:	7f3a      	ldrb	r2, [r7, #28]
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e008      	b.n	8004874 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3342      	adds	r3, #66	; 0x42
 8004870:	2202      	movs	r2, #2
 8004872:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b03      	cmp	r3, #3
 8004878:	f200 80c6 	bhi.w	8004a08 <HAL_HCD_HC_SubmitRequest+0x210>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080049f5 	.word	0x080049f5
 800488c:	080048f9 	.word	0x080048f9
 8004890:	08004977 	.word	0x08004977
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004894:	7c3b      	ldrb	r3, [r7, #16]
 8004896:	2b01      	cmp	r3, #1
 8004898:	f040 80b8 	bne.w	8004a0c <HAL_HCD_HC_SubmitRequest+0x214>
 800489c:	78bb      	ldrb	r3, [r7, #2]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 80b4 	bne.w	8004a0c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80048a4:	8b3b      	ldrh	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3355      	adds	r3, #85	; 0x55
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	212c      	movs	r1, #44	; 0x2c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	3355      	adds	r3, #85	; 0x55
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3342      	adds	r3, #66	; 0x42
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80048e2:	e093      	b.n	8004a0c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	3342      	adds	r3, #66	; 0x42
 80048f2:	2202      	movs	r2, #2
 80048f4:	701a      	strb	r2, [r3, #0]
      break;
 80048f6:	e089      	b.n	8004a0c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80048f8:	78bb      	ldrb	r3, [r7, #2]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11d      	bne.n	800493a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	212c      	movs	r1, #44	; 0x2c
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	3355      	adds	r3, #85	; 0x55
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	212c      	movs	r1, #44	; 0x2c
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	4413      	add	r3, r2
 800491e:	3342      	adds	r3, #66	; 0x42
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004924:	e073      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	3342      	adds	r3, #66	; 0x42
 8004934:	2202      	movs	r2, #2
 8004936:	701a      	strb	r2, [r3, #0]
      break;
 8004938:	e069      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	3354      	adds	r3, #84	; 0x54
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3342      	adds	r3, #66	; 0x42
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
      break;
 8004960:	e055      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	3342      	adds	r3, #66	; 0x42
 8004970:	2202      	movs	r2, #2
 8004972:	701a      	strb	r2, [r3, #0]
      break;
 8004974:	e04b      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004976:	78bb      	ldrb	r3, [r7, #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11d      	bne.n	80049b8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	212c      	movs	r1, #44	; 0x2c
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3355      	adds	r3, #85	; 0x55
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	3342      	adds	r3, #66	; 0x42
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80049a2:	e034      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3342      	adds	r3, #66	; 0x42
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
      break;
 80049b6:	e02a      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3354      	adds	r3, #84	; 0x54
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3342      	adds	r3, #66	; 0x42
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e016      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3342      	adds	r3, #66	; 0x42
 80049ee:	2202      	movs	r2, #2
 80049f0:	701a      	strb	r2, [r3, #0]
      break;
 80049f2:	e00c      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3342      	adds	r3, #66	; 0x42
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004a08:	bf00      	nop
 8004a0a:	e000      	b.n	8004a0e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004a0c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3344      	adds	r3, #68	; 0x44
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	8b3a      	ldrh	r2, [r7, #24]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	202c      	movs	r0, #44	; 0x2c
 8004a28:	fb00 f303 	mul.w	r3, r0, r3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334c      	adds	r3, #76	; 0x4c
 8004a30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3360      	adds	r3, #96	; 0x60
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	212c      	movs	r1, #44	; 0x2c
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3350      	adds	r3, #80	; 0x50
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	3339      	adds	r3, #57	; 0x39
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3361      	adds	r3, #97	; 0x61
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	222c      	movs	r2, #44	; 0x2c
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	3338      	adds	r3, #56	; 0x38
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	18d1      	adds	r1, r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	f009 f83e 	bl	800db14 <USB_HC_StartXfer>
 8004a98:	4603      	mov	r3, r0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f008 fcca 	bl	800d454 <USB_GetMode>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	f040 80f6 	bne.w	8004cb4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f008 fc0d 	bl	800d2ec <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80ec 	beq.w	8004cb2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f008 fc04 	bl	800d2ec <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aee:	d104      	bne.n	8004afa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f008 fbf4 	bl	800d2ec <USB_ReadInterrupts>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0e:	d104      	bne.n	8004b1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f008 fbe4 	bl	800d2ec <USB_ReadInterrupts>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b2e:	d104      	bne.n	8004b3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f008 fbd4 	bl	800d2ec <USB_ReadInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d103      	bne.n	8004b56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2202      	movs	r2, #2
 8004b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f008 fbc6 	bl	800d2ec <USB_ReadInterrupts>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d11c      	bne.n	8004ba6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004b86:	2110      	movs	r1, #16
 8004b88:	6938      	ldr	r0, [r7, #16]
 8004b8a:	f007 fb81 	bl	800c290 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004b8e:	6938      	ldr	r0, [r7, #16]
 8004b90:	f007 fbb2 	bl	800c2f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2101      	movs	r1, #1
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f008 fdd2 	bl	800d744 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f011 f947 	bl	8015e34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f008 fb9e 	bl	800d2ec <USB_ReadInterrupts>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bba:	d102      	bne.n	8004bc2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 f9ce 	bl	8005f5e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f008 fb90 	bl	800d2ec <USB_ReadInterrupts>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d106      	bne.n	8004be4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f011 f910 	bl	8015dfc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2208      	movs	r2, #8
 8004be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f008 fb7f 	bl	800d2ec <USB_ReadInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d101      	bne.n	8004bfc <HAL_HCD_IRQHandler+0x158>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_HCD_IRQHandler+0x15a>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d012      	beq.n	8004c28 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0210 	bic.w	r2, r2, #16
 8004c10:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f001 f8d1 	bl	8005dba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0210 	orr.w	r2, r2, #16
 8004c26:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f008 fb5d 	bl	800d2ec <USB_ReadInterrupts>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c3c:	d13a      	bne.n	8004cb4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f009 f8a8 	bl	800dd98 <USB_HC_ReadInterrupt>
 8004c48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	e025      	b.n	8004c9c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d018      	beq.n	8004c96 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7a:	d106      	bne.n	8004c8a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8ab 	bl	8004dde <HCD_HC_IN_IRQHandler>
 8004c88:	e005      	b.n	8004c96 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fcc6 	bl	8005622 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3d4      	bcc.n	8004c50 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cae:	615a      	str	r2, [r3, #20]
 8004cb0:	e000      	b.n	8004cb4 <HAL_HCD_IRQHandler+0x210>
      return;
 8004cb2:	bf00      	nop
    }
  }
}
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_HCD_Start+0x16>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e013      	b.n	8004cf8 <HAL_HCD_Start+0x3e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f008 fd94 	bl	800d80c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f007 f905 	bl	800bef8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_HCD_Stop+0x16>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e00d      	b.n	8004d32 <HAL_HCD_Stop+0x32>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f009 f982 	bl	800e02c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f008 fd36 	bl	800d7b8 <USB_ResetPort>
 8004d4c:	4603      	mov	r3, r0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	212c      	movs	r1, #44	; 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3360      	adds	r3, #96	; 0x60
 8004d70:	781b      	ldrb	r3, [r3, #0]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	212c      	movs	r1, #44	; 0x2c
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	3350      	adds	r3, #80	; 0x50
 8004d98:	681b      	ldr	r3, [r3, #0]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f008 fd7a 	bl	800d8ac <USB_GetCurrentFrame>
 8004db8:	4603      	mov	r3, r0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f008 fd55 	bl	800d87e <USB_GetHostSpeed>
 8004dd4:	4603      	mov	r3, r0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f008 fa85 	bl	800d312 <USB_ReadChInterrupts>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d11a      	bne.n	8004e48 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2304      	movs	r3, #4
 8004e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3361      	adds	r3, #97	; 0x61
 8004e32:	2207      	movs	r2, #7
 8004e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f008 ffba 	bl	800ddba <USB_HC_Halt>
 8004e46:	e0a2      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f008 fa5d 	bl	800d312 <USB_ReadChInterrupts>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e62:	d11b      	bne.n	8004e9c <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	461a      	mov	r2, r3
 8004e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	212c      	movs	r1, #44	; 0x2c
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	4413      	add	r3, r2
 8004e84:	3361      	adds	r3, #97	; 0x61
 8004e86:	2208      	movs	r2, #8
 8004e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f008 ff90 	bl	800ddba <USB_HC_Halt>
 8004e9a:	e078      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f008 fa33 	bl	800d312 <USB_ReadChInterrupts>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d11a      	bne.n	8004eec <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3361      	adds	r3, #97	; 0x61
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f008 ff68 	bl	800ddba <USB_HC_Halt>
 8004eea:	e050      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f008 fa0b 	bl	800d312 <USB_ReadChInterrupts>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d11b      	bne.n	8004f40 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3361      	adds	r3, #97	; 0x61
 8004f2a:	2209      	movs	r2, #9
 8004f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f008 ff3e 	bl	800ddba <USB_HC_Halt>
 8004f3e:	e026      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f008 f9e1 	bl	800d312 <USB_ReadChInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d119      	bne.n	8004f8e <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	461a      	mov	r2, r3
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	212c      	movs	r1, #44	; 0x2c
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	4413      	add	r3, r2
 8004f78:	3361      	adds	r3, #97	; 0x61
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	4611      	mov	r1, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f008 ff16 	bl	800ddba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f008 f9ba 	bl	800d312 <USB_ReadChInterrupts>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d112      	bne.n	8004fd0 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f008 ff00 	bl	800ddba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fcc:	6093      	str	r3, [r2, #8]
 8004fce:	e325      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f008 f999 	bl	800d312 <USB_ReadChInterrupts>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	f040 80e8 	bne.w	80051bc <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d019      	beq.n	800503a <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	212c      	movs	r1, #44	; 0x2c
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	4413      	add	r3, r2
 8005012:	3348      	adds	r3, #72	; 0x48
 8005014:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	440b      	add	r3, r1
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	202c      	movs	r0, #44	; 0x2c
 8005030:	fb00 f303 	mul.w	r3, r0, r3
 8005034:	440b      	add	r3, r1
 8005036:	3350      	adds	r3, #80	; 0x50
 8005038:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	212c      	movs	r1, #44	; 0x2c
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	4413      	add	r3, r2
 8005046:	3361      	adds	r3, #97	; 0x61
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	335c      	adds	r3, #92	; 0x5c
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	2301      	movs	r3, #1
 800506e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	212c      	movs	r1, #44	; 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	333f      	adds	r3, #63	; 0x3f
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d009      	beq.n	8005098 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	212c      	movs	r1, #44	; 0x2c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	333f      	adds	r3, #63	; 0x3f
 8005092:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005094:	2b02      	cmp	r3, #2
 8005096:	d111      	bne.n	80050bc <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f008 fe89 	bl	800ddba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	461a      	mov	r2, r3
 80050b6:	2310      	movs	r3, #16
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	e03a      	b.n	8005132 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	333f      	adds	r3, #63	; 0x3f
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d009      	beq.n	80050e4 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	212c      	movs	r1, #44	; 0x2c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	333f      	adds	r3, #63	; 0x3f
 80050de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d126      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005102:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3360      	adds	r3, #96	; 0x60
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	b2d9      	uxtb	r1, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	202c      	movs	r0, #44	; 0x2c
 8005120:	fb00 f303 	mul.w	r3, r0, r3
 8005124:	4413      	add	r3, r2
 8005126:	3360      	adds	r3, #96	; 0x60
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f010 fe8f 	bl	8015e50 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12b      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	212c      	movs	r1, #44	; 0x2c
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	4413      	add	r3, r2
 8005146:	3348      	adds	r3, #72	; 0x48
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	202c      	movs	r0, #44	; 0x2c
 8005150:	fb00 f202 	mul.w	r2, r0, r2
 8005154:	440a      	add	r2, r1
 8005156:	3240      	adds	r2, #64	; 0x40
 8005158:	8812      	ldrh	r2, [r2, #0]
 800515a:	fbb3 f3f2 	udiv	r3, r3, r2
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 825a 	beq.w	800561c <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3354      	adds	r3, #84	; 0x54
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f083 0301 	eor.w	r3, r3, #1
 800517c:	b2d8      	uxtb	r0, r3
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	212c      	movs	r1, #44	; 0x2c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	3354      	adds	r3, #84	; 0x54
 800518c:	4602      	mov	r2, r0
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e244      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	212c      	movs	r1, #44	; 0x2c
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	4413      	add	r3, r2
 800519e:	3354      	adds	r3, #84	; 0x54
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f083 0301 	eor.w	r3, r3, #1
 80051a6:	b2d8      	uxtb	r0, r3
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	212c      	movs	r1, #44	; 0x2c
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	3354      	adds	r3, #84	; 0x54
 80051b6:	4602      	mov	r2, r0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e22f      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f008 f8a3 	bl	800d312 <USB_ReadChInterrupts>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d109      	bne.n	80051ea <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	461a      	mov	r2, r3
 80051e4:	2320      	movs	r3, #32
 80051e6:	6093      	str	r3, [r2, #8]
 80051e8:	e218      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f008 f88c 	bl	800d312 <USB_ReadChInterrupts>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	f040 816b 	bne.w	80054dc <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4413      	add	r3, r2
 800520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005212:	461a      	mov	r2, r3
 8005214:	2302      	movs	r3, #2
 8005216:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	212c      	movs	r1, #44	; 0x2c
 800521e:	fb01 f303 	mul.w	r3, r1, r3
 8005222:	4413      	add	r3, r2
 8005224:	3361      	adds	r3, #97	; 0x61
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d112      	bne.n	8005252 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	212c      	movs	r1, #44	; 0x2c
 8005232:	fb01 f303 	mul.w	r3, r1, r3
 8005236:	4413      	add	r3, r2
 8005238:	3361      	adds	r3, #97	; 0x61
 800523a:	2202      	movs	r2, #2
 800523c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	212c      	movs	r1, #44	; 0x2c
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	3360      	adds	r3, #96	; 0x60
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e135      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	3361      	adds	r3, #97	; 0x61
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d112      	bne.n	800528c <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	212c      	movs	r1, #44	; 0x2c
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	3361      	adds	r3, #97	; 0x61
 8005274:	2202      	movs	r2, #2
 8005276:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	212c      	movs	r1, #44	; 0x2c
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	3360      	adds	r3, #96	; 0x60
 8005286:	2205      	movs	r2, #5
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e118      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3361      	adds	r3, #97	; 0x61
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b07      	cmp	r3, #7
 800529e:	d009      	beq.n	80052b4 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	3361      	adds	r3, #97	; 0x61
 80052ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d159      	bne.n	8005368 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	212c      	movs	r1, #44	; 0x2c
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	3361      	adds	r3, #97	; 0x61
 80052c2:	2202      	movs	r2, #2
 80052c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	335c      	adds	r3, #92	; 0x5c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	202c      	movs	r0, #44	; 0x2c
 80052de:	fb00 f303 	mul.w	r3, r0, r3
 80052e2:	440b      	add	r3, r1
 80052e4:	335c      	adds	r3, #92	; 0x5c
 80052e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	335c      	adds	r3, #92	; 0x5c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d912      	bls.n	8005322 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	212c      	movs	r1, #44	; 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	335c      	adds	r3, #92	; 0x5c
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	212c      	movs	r1, #44	; 0x2c
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	4413      	add	r3, r2
 800531a:	3360      	adds	r3, #96	; 0x60
 800531c:	2204      	movs	r2, #4
 800531e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005320:	e0cd      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	212c      	movs	r1, #44	; 0x2c
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	4413      	add	r3, r2
 800532e:	3360      	adds	r3, #96	; 0x60
 8005330:	2202      	movs	r2, #2
 8005332:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800534a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005352:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005360:	461a      	mov	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005366:	e0aa      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	212c      	movs	r1, #44	; 0x2c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	3361      	adds	r3, #97	; 0x61
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b05      	cmp	r3, #5
 800537a:	d109      	bne.n	8005390 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3361      	adds	r3, #97	; 0x61
 800538a:	2202      	movs	r2, #2
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e096      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	212c      	movs	r1, #44	; 0x2c
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	3361      	adds	r3, #97	; 0x61
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d109      	bne.n	80053b8 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	212c      	movs	r1, #44	; 0x2c
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	3361      	adds	r3, #97	; 0x61
 80053b2:	2202      	movs	r2, #2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e082      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3361      	adds	r3, #97	; 0x61
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d13f      	bne.n	800544c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	212c      	movs	r1, #44	; 0x2c
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	4413      	add	r3, r2
 80053d8:	3361      	adds	r3, #97	; 0x61
 80053da:	2202      	movs	r2, #2
 80053dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	212c      	movs	r1, #44	; 0x2c
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	4413      	add	r3, r2
 80053ea:	3360      	adds	r3, #96	; 0x60
 80053ec:	2202      	movs	r2, #2
 80053ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	333f      	adds	r3, #63	; 0x3f
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	212c      	movs	r1, #44	; 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	333f      	adds	r3, #63	; 0x3f
 8005412:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005414:	2b02      	cmp	r3, #2
 8005416:	d152      	bne.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800542e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005436:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	461a      	mov	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e038      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	212c      	movs	r1, #44	; 0x2c
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	4413      	add	r3, r2
 8005458:	3361      	adds	r3, #97	; 0x61
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d123      	bne.n	80054a8 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	212c      	movs	r1, #44	; 0x2c
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	3361      	adds	r3, #97	; 0x61
 800546e:	2202      	movs	r2, #2
 8005470:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	212c      	movs	r1, #44	; 0x2c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	335c      	adds	r3, #92	; 0x5c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	202c      	movs	r0, #44	; 0x2c
 800548a:	fb00 f303 	mul.w	r3, r0, r3
 800548e:	440b      	add	r3, r1
 8005490:	335c      	adds	r3, #92	; 0x5c
 8005492:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	212c      	movs	r1, #44	; 0x2c
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
 80054a0:	3360      	adds	r3, #96	; 0x60
 80054a2:	2204      	movs	r2, #4
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e00a      	b.n	80054be <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	212c      	movs	r1, #44	; 0x2c
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	3361      	adds	r3, #97	; 0x61
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	f000 80ae 	beq.w	800561a <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	b2d9      	uxtb	r1, r3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	202c      	movs	r0, #44	; 0x2c
 80054c8:	fb00 f303 	mul.w	r3, r0, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f010 fcbb 	bl	8015e50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054da:	e09f      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f007 ff13 	bl	800d312 <USB_ReadChInterrupts>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d123      	bne.n	800553e <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3361      	adds	r3, #97	; 0x61
 8005516:	2205      	movs	r2, #5
 8005518:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	212c      	movs	r1, #44	; 0x2c
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	4413      	add	r3, r2
 8005526:	335c      	adds	r3, #92	; 0x5c
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f008 fc3f 	bl	800ddba <USB_HC_Halt>
 800553c:	e06e      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	4611      	mov	r1, r2
 8005548:	4618      	mov	r0, r3
 800554a:	f007 fee2 	bl	800d312 <USB_ReadChInterrupts>
 800554e:	4603      	mov	r3, r0
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d161      	bne.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	212c      	movs	r1, #44	; 0x2c
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	333f      	adds	r3, #63	; 0x3f
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d11a      	bne.n	80055a2 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	212c      	movs	r1, #44	; 0x2c
 8005572:	fb01 f303 	mul.w	r3, r1, r3
 8005576:	4413      	add	r3, r2
 8005578:	335c      	adds	r3, #92	; 0x5c
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	212c      	movs	r1, #44	; 0x2c
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	3361      	adds	r3, #97	; 0x61
 800558c:	2204      	movs	r2, #4
 800558e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f008 fc0d 	bl	800ddba <USB_HC_Halt>
 80055a0:	e031      	b.n	8005606 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	212c      	movs	r1, #44	; 0x2c
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	333f      	adds	r3, #63	; 0x3f
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	212c      	movs	r1, #44	; 0x2c
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	333f      	adds	r3, #63	; 0x3f
 80055c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d11d      	bne.n	8005606 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	212c      	movs	r1, #44	; 0x2c
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	335c      	adds	r3, #92	; 0x5c
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d110      	bne.n	8005606 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	212c      	movs	r1, #44	; 0x2c
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	3361      	adds	r3, #97	; 0x61
 80055f2:	2204      	movs	r2, #4
 80055f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f008 fbda 	bl	800ddba <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	2310      	movs	r3, #16
 8005616:	6093      	str	r3, [r2, #8]
 8005618:	e000      	b.n	800561c <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800561a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b088      	sub	sp, #32
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	4611      	mov	r1, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f007 fe63 	bl	800d312 <USB_ReadChInterrupts>
 800564c:	4603      	mov	r3, r0
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d11a      	bne.n	800568c <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	461a      	mov	r2, r3
 8005664:	2304      	movs	r3, #4
 8005666:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	212c      	movs	r1, #44	; 0x2c
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	4413      	add	r3, r2
 8005674:	3361      	adds	r3, #97	; 0x61
 8005676:	2207      	movs	r2, #7
 8005678:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f008 fb98 	bl	800ddba <USB_HC_Halt>
 800568a:	e393      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f007 fe3b 	bl	800d312 <USB_ReadChInterrupts>
 800569c:	4603      	mov	r3, r0
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d137      	bne.n	8005716 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	461a      	mov	r2, r3
 80056b4:	2320      	movs	r3, #32
 80056b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	212c      	movs	r1, #44	; 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	333d      	adds	r3, #61	; 0x3d
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 8373 	bne.w	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	212c      	movs	r1, #44	; 0x2c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	333d      	adds	r3, #61	; 0x3d
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	212c      	movs	r1, #44	; 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3360      	adds	r3, #96	; 0x60
 80056ee:	2202      	movs	r2, #2
 80056f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	3361      	adds	r3, #97	; 0x61
 8005700:	2203      	movs	r2, #3
 8005702:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	4611      	mov	r1, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f008 fb53 	bl	800ddba <USB_HC_Halt>
 8005714:	e34e      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f007 fdf6 	bl	800d312 <USB_ReadChInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005730:	d112      	bne.n	8005758 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	461a      	mov	r2, r3
 8005740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005744:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f008 fb32 	bl	800ddba <USB_HC_Halt>
 8005756:	e32d      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f007 fdd5 	bl	800d312 <USB_ReadChInterrupts>
 8005768:	4603      	mov	r3, r0
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d142      	bne.n	80057f8 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	212c      	movs	r1, #44	; 0x2c
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	4413      	add	r3, r2
 800577e:	335c      	adds	r3, #92	; 0x5c
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f007 fdbf 	bl	800d312 <USB_ReadChInterrupts>
 8005794:	4603      	mov	r3, r0
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d111      	bne.n	80057c2 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	212c      	movs	r1, #44	; 0x2c
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	333d      	adds	r3, #61	; 0x3d
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	461a      	mov	r2, r3
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	461a      	mov	r2, r3
 80057d0:	2301      	movs	r3, #1
 80057d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	212c      	movs	r1, #44	; 0x2c
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	4413      	add	r3, r2
 80057e0:	3361      	adds	r3, #97	; 0x61
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f008 fae2 	bl	800ddba <USB_HC_Halt>
 80057f6:	e2dd      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f007 fd85 	bl	800d312 <USB_ReadChInterrupts>
 8005808:	4603      	mov	r3, r0
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d12c      	bne.n	800586c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	212c      	movs	r1, #44	; 0x2c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	3361      	adds	r3, #97	; 0x61
 8005820:	2205      	movs	r2, #5
 8005822:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	212c      	movs	r1, #44	; 0x2c
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	333d      	adds	r3, #61	; 0x3d
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	335c      	adds	r3, #92	; 0x5c
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f008 fab1 	bl	800ddba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	461a      	mov	r2, r3
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	6093      	str	r3, [r2, #8]
 800586a:	e2a3      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f007 fd4b 	bl	800d312 <USB_ReadChInterrupts>
 800587c:	4603      	mov	r3, r0
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b08      	cmp	r3, #8
 8005884:	d11a      	bne.n	80058bc <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	461a      	mov	r2, r3
 8005894:	2308      	movs	r3, #8
 8005896:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	212c      	movs	r1, #44	; 0x2c
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	3361      	adds	r3, #97	; 0x61
 80058a6:	2206      	movs	r2, #6
 80058a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	4611      	mov	r1, r2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f008 fa80 	bl	800ddba <USB_HC_Halt>
 80058ba:	e27b      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f007 fd23 	bl	800d312 <USB_ReadChInterrupts>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d140      	bne.n	8005958 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	212c      	movs	r1, #44	; 0x2c
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	335c      	adds	r3, #92	; 0x5c
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	212c      	movs	r1, #44	; 0x2c
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	3361      	adds	r3, #97	; 0x61
 80058f6:	2204      	movs	r2, #4
 80058f8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	212c      	movs	r1, #44	; 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	333d      	adds	r3, #61	; 0x3d
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d112      	bne.n	8005934 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	212c      	movs	r1, #44	; 0x2c
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	333c      	adds	r3, #60	; 0x3c
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d108      	bne.n	8005934 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	212c      	movs	r1, #44	; 0x2c
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	4413      	add	r3, r2
 800592e:	333d      	adds	r3, #61	; 0x3d
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f008 fa3b 	bl	800ddba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005950:	461a      	mov	r2, r3
 8005952:	2310      	movs	r3, #16
 8005954:	6093      	str	r3, [r2, #8]
 8005956:	e22d      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f007 fcd5 	bl	800d312 <USB_ReadChInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d164      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d111      	bne.n	800599e <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	212c      	movs	r1, #44	; 0x2c
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	4413      	add	r3, r2
 8005986:	3361      	adds	r3, #97	; 0x61
 8005988:	2207      	movs	r2, #7
 800598a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f008 fa0f 	bl	800ddba <USB_HC_Halt>
 800599c:	e044      	b.n	8005a28 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	212c      	movs	r1, #44	; 0x2c
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	335c      	adds	r3, #92	; 0x5c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	202c      	movs	r0, #44	; 0x2c
 80059b6:	fb00 f303 	mul.w	r3, r0, r3
 80059ba:	440b      	add	r3, r1
 80059bc:	335c      	adds	r3, #92	; 0x5c
 80059be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	212c      	movs	r1, #44	; 0x2c
 80059c6:	fb01 f303 	mul.w	r3, r1, r3
 80059ca:	4413      	add	r3, r2
 80059cc:	335c      	adds	r3, #92	; 0x5c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d920      	bls.n	8005a16 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	212c      	movs	r1, #44	; 0x2c
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	4413      	add	r3, r2
 80059e0:	335c      	adds	r3, #92	; 0x5c
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	212c      	movs	r1, #44	; 0x2c
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	3360      	adds	r3, #96	; 0x60
 80059f4:	2204      	movs	r2, #4
 80059f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	b2d9      	uxtb	r1, r3
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	202c      	movs	r0, #44	; 0x2c
 8005a02:	fb00 f303 	mul.w	r3, r0, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3360      	adds	r3, #96	; 0x60
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f010 fa1e 	bl	8015e50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a14:	e008      	b.n	8005a28 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	212c      	movs	r1, #44	; 0x2c
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	3360      	adds	r3, #96	; 0x60
 8005a24:	2202      	movs	r2, #2
 8005a26:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	461a      	mov	r2, r3
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	6093      	str	r3, [r2, #8]
 8005a3a:	e1bb      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f007 fc63 	bl	800d312 <USB_ReadChInterrupts>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a56:	d11b      	bne.n	8005a90 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	212c      	movs	r1, #44	; 0x2c
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	3361      	adds	r3, #97	; 0x61
 8005a66:	2209      	movs	r2, #9
 8005a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	4611      	mov	r1, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f008 f9a0 	bl	800ddba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a86:	461a      	mov	r2, r3
 8005a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a8c:	6093      	str	r3, [r2, #8]
 8005a8e:	e191      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f007 fc39 	bl	800d312 <USB_ReadChInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	f040 8184 	bne.w	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2302      	movs	r3, #2
 8005abc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	212c      	movs	r1, #44	; 0x2c
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	3361      	adds	r3, #97	; 0x61
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	f040 8087 	bne.w	8005be2 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	212c      	movs	r1, #44	; 0x2c
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	3361      	adds	r3, #97	; 0x61
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	212c      	movs	r1, #44	; 0x2c
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	3360      	adds	r3, #96	; 0x60
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	212c      	movs	r1, #44	; 0x2c
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	333f      	adds	r3, #63	; 0x3f
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d00a      	beq.n	8005b22 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	212c      	movs	r1, #44	; 0x2c
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	333f      	adds	r3, #63	; 0x3f
 8005b1a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	f040 8139 	bne.w	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d113      	bne.n	8005b52 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	212c      	movs	r1, #44	; 0x2c
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	3355      	adds	r3, #85	; 0x55
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	f083 0301 	eor.w	r3, r3, #1
 8005b3e:	b2d8      	uxtb	r0, r3
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	212c      	movs	r1, #44	; 0x2c
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3355      	adds	r3, #85	; 0x55
 8005b4e:	4602      	mov	r2, r0
 8005b50:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	f040 811c 	bne.w	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	334c      	adds	r3, #76	; 0x4c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8111 	beq.w	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	212c      	movs	r1, #44	; 0x2c
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	334c      	adds	r3, #76	; 0x4c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	202c      	movs	r0, #44	; 0x2c
 8005b88:	fb00 f202 	mul.w	r2, r0, r2
 8005b8c:	440a      	add	r2, r1
 8005b8e:	3240      	adds	r2, #64	; 0x40
 8005b90:	8812      	ldrh	r2, [r2, #0]
 8005b92:	4413      	add	r3, r2
 8005b94:	3b01      	subs	r3, #1
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	202c      	movs	r0, #44	; 0x2c
 8005b9c:	fb00 f202 	mul.w	r2, r0, r2
 8005ba0:	440a      	add	r2, r1
 8005ba2:	3240      	adds	r2, #64	; 0x40
 8005ba4:	8812      	ldrh	r2, [r2, #0]
 8005ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80ee 	beq.w	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	212c      	movs	r1, #44	; 0x2c
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3355      	adds	r3, #85	; 0x55
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f083 0301 	eor.w	r3, r3, #1
 8005bcc:	b2d8      	uxtb	r0, r3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	212c      	movs	r1, #44	; 0x2c
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	3355      	adds	r3, #85	; 0x55
 8005bdc:	4602      	mov	r2, r0
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	e0d8      	b.n	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	212c      	movs	r1, #44	; 0x2c
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	4413      	add	r3, r2
 8005bee:	3361      	adds	r3, #97	; 0x61
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d109      	bne.n	8005c0a <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	212c      	movs	r1, #44	; 0x2c
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	3361      	adds	r3, #97	; 0x61
 8005c04:	2202      	movs	r2, #2
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e0c4      	b.n	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	212c      	movs	r1, #44	; 0x2c
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	4413      	add	r3, r2
 8005c16:	3361      	adds	r3, #97	; 0x61
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d112      	bne.n	8005c44 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	212c      	movs	r1, #44	; 0x2c
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	4413      	add	r3, r2
 8005c2a:	3361      	adds	r3, #97	; 0x61
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	212c      	movs	r1, #44	; 0x2c
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3360      	adds	r3, #96	; 0x60
 8005c3e:	2202      	movs	r2, #2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	e0a7      	b.n	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	212c      	movs	r1, #44	; 0x2c
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	3361      	adds	r3, #97	; 0x61
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d112      	bne.n	8005c7e <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	212c      	movs	r1, #44	; 0x2c
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	3361      	adds	r3, #97	; 0x61
 8005c66:	2202      	movs	r2, #2
 8005c68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	212c      	movs	r1, #44	; 0x2c
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	4413      	add	r3, r2
 8005c76:	3360      	adds	r3, #96	; 0x60
 8005c78:	2202      	movs	r2, #2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e08a      	b.n	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	212c      	movs	r1, #44	; 0x2c
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	4413      	add	r3, r2
 8005c8a:	3361      	adds	r3, #97	; 0x61
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	d112      	bne.n	8005cb8 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	212c      	movs	r1, #44	; 0x2c
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3361      	adds	r3, #97	; 0x61
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	212c      	movs	r1, #44	; 0x2c
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	3360      	adds	r3, #96	; 0x60
 8005cb2:	2205      	movs	r2, #5
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e06d      	b.n	8005d94 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	212c      	movs	r1, #44	; 0x2c
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3361      	adds	r3, #97	; 0x61
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b07      	cmp	r3, #7
 8005cca:	d009      	beq.n	8005ce0 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3361      	adds	r3, #97	; 0x61
 8005cda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d168      	bne.n	8005db2 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	212c      	movs	r1, #44	; 0x2c
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	3361      	adds	r3, #97	; 0x61
 8005cee:	2202      	movs	r2, #2
 8005cf0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	212c      	movs	r1, #44	; 0x2c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	335c      	adds	r3, #92	; 0x5c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	202c      	movs	r0, #44	; 0x2c
 8005d0a:	fb00 f303 	mul.w	r3, r0, r3
 8005d0e:	440b      	add	r3, r1
 8005d10:	335c      	adds	r3, #92	; 0x5c
 8005d12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	212c      	movs	r1, #44	; 0x2c
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	335c      	adds	r3, #92	; 0x5c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d912      	bls.n	8005d4e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	212c      	movs	r1, #44	; 0x2c
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	335c      	adds	r3, #92	; 0x5c
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	212c      	movs	r1, #44	; 0x2c
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	3360      	adds	r3, #96	; 0x60
 8005d48:	2204      	movs	r2, #4
 8005d4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d4c:	e021      	b.n	8005d92 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	212c      	movs	r1, #44	; 0x2c
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	3360      	adds	r3, #96	; 0x60
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d76:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d7e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d92:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	b2d9      	uxtb	r1, r3
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	202c      	movs	r0, #44	; 0x2c
 8005d9e:	fb00 f303 	mul.w	r3, r0, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	3360      	adds	r3, #96	; 0x60
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f010 f850 	bl	8015e50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005db0:	e000      	b.n	8005db4 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8005db2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b08a      	sub	sp, #40	; 0x28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	0c5b      	lsrs	r3, r3, #17
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d004      	beq.n	8005e00 <HCD_RXQLVL_IRQHandler+0x46>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	f000 80a9 	beq.w	8005f50 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005dfe:	e0aa      	b.n	8005f56 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a6 	beq.w	8005f54 <HCD_RXQLVL_IRQHandler+0x19a>
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	212c      	movs	r1, #44	; 0x2c
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	3344      	adds	r3, #68	; 0x44
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 809b 	beq.w	8005f54 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	212c      	movs	r1, #44	; 0x2c
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	4413      	add	r3, r2
 8005e2a:	3350      	adds	r3, #80	; 0x50
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	441a      	add	r2, r3
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	202c      	movs	r0, #44	; 0x2c
 8005e38:	fb00 f303 	mul.w	r3, r0, r3
 8005e3c:	440b      	add	r3, r1
 8005e3e:	334c      	adds	r3, #76	; 0x4c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d87a      	bhi.n	8005f3c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	212c      	movs	r1, #44	; 0x2c
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	3344      	adds	r3, #68	; 0x44
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	b292      	uxth	r2, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f007 f8b0 	bl	800cfc4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	212c      	movs	r1, #44	; 0x2c
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	3344      	adds	r3, #68	; 0x44
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	441a      	add	r2, r3
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	202c      	movs	r0, #44	; 0x2c
 8005e7e:	fb00 f303 	mul.w	r3, r0, r3
 8005e82:	440b      	add	r3, r1
 8005e84:	3344      	adds	r3, #68	; 0x44
 8005e86:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	212c      	movs	r1, #44	; 0x2c
 8005e8e:	fb01 f303 	mul.w	r3, r1, r3
 8005e92:	4413      	add	r3, r2
 8005e94:	3350      	adds	r3, #80	; 0x50
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	202c      	movs	r0, #44	; 0x2c
 8005ea2:	fb00 f303 	mul.w	r3, r0, r3
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3350      	adds	r3, #80	; 0x50
 8005eaa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	0cdb      	lsrs	r3, r3, #19
 8005ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	212c      	movs	r1, #44	; 0x2c
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	3340      	adds	r3, #64	; 0x40
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d13c      	bne.n	8005f54 <HCD_RXQLVL_IRQHandler+0x19a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d039      	beq.n	8005f54 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005efe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	212c      	movs	r1, #44	; 0x2c
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3354      	adds	r3, #84	; 0x54
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2d8      	uxtb	r0, r3
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	212c      	movs	r1, #44	; 0x2c
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	3354      	adds	r3, #84	; 0x54
 8005f36:	4602      	mov	r2, r0
 8005f38:	701a      	strb	r2, [r3, #0]
      break;
 8005f3a:	e00b      	b.n	8005f54 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	212c      	movs	r1, #44	; 0x2c
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	3360      	adds	r3, #96	; 0x60
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	701a      	strb	r2, [r3, #0]
      break;
 8005f4e:	e001      	b.n	8005f54 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005f54:	bf00      	nop
  }
}
 8005f56:	bf00      	nop
 8005f58:	3728      	adds	r7, #40	; 0x28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f8a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d10b      	bne.n	8005fae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d102      	bne.n	8005fa6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f00f ff39 	bl	8015e18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f043 0302 	orr.w	r3, r3, #2
 8005fac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d132      	bne.n	800601e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f043 0308 	orr.w	r3, r3, #8
 8005fbe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d126      	bne.n	8006018 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d113      	bne.n	8005ffa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005fd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fdc:	d106      	bne.n	8005fec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f007 fbad 	bl	800d744 <USB_InitFSLSPClkSel>
 8005fea:	e011      	b.n	8006010 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f007 fba6 	bl	800d744 <USB_InitFSLSPClkSel>
 8005ff8:	e00a      	b.n	8006010 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d106      	bne.n	8006010 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006008:	461a      	mov	r2, r3
 800600a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800600e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f00f ff2b 	bl	8015e6c <HAL_HCD_PortEnabled_Callback>
 8006016:	e002      	b.n	800601e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f00f ff35 	bl	8015e88 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b20      	cmp	r3, #32
 8006026:	d103      	bne.n	8006030 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f043 0320 	orr.w	r3, r3, #32
 800602e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6013      	str	r3, [r2, #0]
}
 800603c:	bf00      	nop
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	b08f      	sub	sp, #60	; 0x3c
 8006048:	af0a      	add	r7, sp, #40	; 0x28
 800604a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e116      	b.n	8006284 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f00f fa89 	bl	8015588 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2203      	movs	r2, #3
 800607a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f005 ff40 	bl	800bf1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	687e      	ldr	r6, [r7, #4]
 80060a2:	466d      	mov	r5, sp
 80060a4:	f106 0410 	add.w	r4, r6, #16
 80060a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80060b8:	1d33      	adds	r3, r6, #4
 80060ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060bc:	6838      	ldr	r0, [r7, #0]
 80060be:	f005 fe21 	bl	800bd04 <USB_CoreInit>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0d7      	b.n	8006284 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f005 ff2e 	bl	800bf3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	e04a      	b.n	800617c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	333d      	adds	r3, #61	; 0x3d
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	333c      	adds	r3, #60	; 0x3c
 800610a:	7bfa      	ldrb	r2, [r7, #15]
 800610c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	b298      	uxth	r0, r3
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3344      	adds	r3, #68	; 0x44
 8006122:	4602      	mov	r2, r0
 8006124:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006126:	7bfa      	ldrb	r2, [r7, #15]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3340      	adds	r3, #64	; 0x40
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800613a:	7bfa      	ldrb	r2, [r7, #15]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	3348      	adds	r3, #72	; 0x48
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800614e:	7bfa      	ldrb	r2, [r7, #15]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	334c      	adds	r3, #76	; 0x4c
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	3354      	adds	r3, #84	; 0x54
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	3301      	adds	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d3af      	bcc.n	80060e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
 800618a:	e044      	b.n	8006216 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800618c:	7bfa      	ldrb	r2, [r7, #15]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061a2:	7bfa      	ldrb	r2, [r7, #15]
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80061b4:	7bfa      	ldrb	r2, [r7, #15]
 80061b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061b8:	7bfa      	ldrb	r2, [r7, #15]
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061ce:	7bfa      	ldrb	r2, [r7, #15]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061fa:	7bfa      	ldrb	r2, [r7, #15]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	3301      	adds	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
 8006216:	7bfa      	ldrb	r2, [r7, #15]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d3b5      	bcc.n	800618c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	687e      	ldr	r6, [r7, #4]
 8006228:	466d      	mov	r5, sp
 800622a:	f106 0410 	add.w	r4, r6, #16
 800622e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006236:	e894 0003 	ldmia.w	r4, {r0, r1}
 800623a:	e885 0003 	stmia.w	r5, {r0, r1}
 800623e:	1d33      	adds	r3, r6, #4
 8006240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006242:	6838      	ldr	r0, [r7, #0]
 8006244:	f005 fec6 	bl	800bfd4 <USB_DevInit>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e014      	b.n	8006284 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b01      	cmp	r3, #1
 8006270:	d102      	bne.n	8006278 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 f97a 	bl	800756c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f007 f814 	bl	800d2aa <USB_DevDisconnect>

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800628c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_PCD_Start+0x16>
 800629e:	2302      	movs	r3, #2
 80062a0:	e012      	b.n	80062c8 <HAL_PCD_Start+0x3c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f005 fe22 	bl	800bef8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f006 ffd5 	bl	800d268 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062d0:	b590      	push	{r4, r7, lr}
 80062d2:	b08d      	sub	sp, #52	; 0x34
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f007 f8b4 	bl	800d454 <USB_GetMode>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 84b7 	bne.w	8006c62 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f006 fff7 	bl	800d2ec <USB_ReadInterrupts>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 84ad 	beq.w	8006c60 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	0a1b      	lsrs	r3, r3, #8
 8006310:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f006 ffe4 	bl	800d2ec <USB_ReadInterrupts>
 8006324:	4603      	mov	r3, r0
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d107      	bne.n	800633e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f002 0202 	and.w	r2, r2, #2
 800633c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f006 ffd2 	bl	800d2ec <USB_ReadInterrupts>
 8006348:	4603      	mov	r3, r0
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b10      	cmp	r3, #16
 8006350:	d161      	bne.n	8006416 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0210 	bic.w	r2, r2, #16
 8006360:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	4613      	mov	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4413      	add	r3, r2
 800637e:	3304      	adds	r3, #4
 8006380:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	0c5b      	lsrs	r3, r3, #17
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	2b02      	cmp	r3, #2
 800638c:	d124      	bne.n	80063d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d035      	beq.n	8006406 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	6a38      	ldr	r0, [r7, #32]
 80063ae:	f006 fe09 	bl	800cfc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063be:	441a      	add	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063d0:	441a      	add	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
 80063d6:	e016      	b.n	8006406 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	0c5b      	lsrs	r3, r3, #17
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d110      	bne.n	8006406 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063ea:	2208      	movs	r2, #8
 80063ec:	4619      	mov	r1, r3
 80063ee:	6a38      	ldr	r0, [r7, #32]
 80063f0:	f006 fde8 	bl	800cfc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006400:	441a      	add	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0210 	orr.w	r2, r2, #16
 8006414:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f006 ff66 	bl	800d2ec <USB_ReadInterrupts>
 8006420:	4603      	mov	r3, r0
 8006422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006426:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800642a:	f040 80a7 	bne.w	800657c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f006 ff8c 	bl	800d354 <USB_ReadDevAllOutEpInterrupt>
 800643c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800643e:	e099      	b.n	8006574 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 808e 	beq.w	8006568 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f006 ffb0 	bl	800d3bc <USB_ReadDevOutEPInterrupt>
 800645c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00c      	beq.n	8006482 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	461a      	mov	r2, r3
 8006476:	2301      	movs	r3, #1
 8006478:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800647a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 feef 	bl	8007260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2308      	movs	r3, #8
 800649c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800649e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ffc5 	bl	8007430 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	461a      	mov	r2, r3
 80064be:	2310      	movs	r3, #16
 80064c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d030      	beq.n	800652e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b80      	cmp	r3, #128	; 0x80
 80064d6:	d109      	bne.n	80064ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d108      	bne.n	800651c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	b2db      	uxtb	r3, r3
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f00f f950 	bl	80157bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	461a      	mov	r2, r3
 800652a:	2302      	movs	r3, #2
 800652c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	461a      	mov	r2, r3
 8006546:	2320      	movs	r3, #32
 8006548:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d009      	beq.n	8006568 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006566:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	3301      	adds	r3, #1
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	f47f af62 	bne.w	8006440 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f006 feb3 	bl	800d2ec <USB_ReadInterrupts>
 8006586:	4603      	mov	r3, r0
 8006588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800658c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006590:	f040 80db 	bne.w	800674a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f006 fef5 	bl	800d388 <USB_ReadDevAllInEpInterrupt>
 800659e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80065a4:	e0cd      	b.n	8006742 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80c2 	beq.w	8006736 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f006 ff1b 	bl	800d3f8 <USB_ReadDevInEPInterrupt>
 80065c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d057      	beq.n	800667e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	2201      	movs	r2, #1
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ee:	4013      	ands	r3, r2
 80065f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fe:	461a      	mov	r2, r3
 8006600:	2301      	movs	r3, #1
 8006602:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d132      	bne.n	8006672 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	334c      	adds	r3, #76	; 0x4c
 800661c:	6819      	ldr	r1, [r3, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4403      	add	r3, r0
 800662c:	3348      	adds	r3, #72	; 0x48
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4419      	add	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4403      	add	r3, r0
 8006640:	334c      	adds	r3, #76	; 0x4c
 8006642:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <HAL_PCD_IRQHandler+0x3a2>
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3354      	adds	r3, #84	; 0x54
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d108      	bne.n	8006672 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800666a:	461a      	mov	r2, r3
 800666c:	2101      	movs	r1, #1
 800666e:	f006 ff23 	bl	800d4b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	b2db      	uxtb	r3, r3
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f00f f81a 	bl	80156b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	461a      	mov	r2, r3
 8006696:	2308      	movs	r3, #8
 8006698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	461a      	mov	r2, r3
 80066b2:	2310      	movs	r3, #16
 80066b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	461a      	mov	r2, r3
 80066ce:	2340      	movs	r3, #64	; 0x40
 80066d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d023      	beq.n	8006724 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80066dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066de:	6a38      	ldr	r0, [r7, #32]
 80066e0:	f005 fdd6 	bl	800c290 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	4613      	mov	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	3338      	adds	r3, #56	; 0x38
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	3304      	adds	r3, #4
 80066f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d108      	bne.n	8006712 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2200      	movs	r2, #0
 8006704:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f00f f867 	bl	80157e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	461a      	mov	r2, r3
 8006720:	2302      	movs	r3, #2
 8006722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800672e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fd08 	bl	8007146 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	f47f af2e 	bne.w	80065a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f006 fdcc 	bl	800d2ec <USB_ReadInterrupts>
 8006754:	4603      	mov	r3, r0
 8006756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800675e:	d122      	bne.n	80067a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800677a:	2b01      	cmp	r3, #1
 800677c:	d108      	bne.n	8006790 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f00f f9e7 	bl	8015b5c <HAL_PCDEx_LPM_Callback>
 800678e:	e002      	b.n	8006796 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f00f f805 	bl	80157a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80067a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f006 fd9e 	bl	800d2ec <USB_ReadInterrupts>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ba:	d112      	bne.n	80067e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d102      	bne.n	80067d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f00e ffc1 	bl	8015754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695a      	ldr	r2, [r3, #20]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80067e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f006 fd80 	bl	800d2ec <USB_ReadInterrupts>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f6:	d121      	bne.n	800683c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006806:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d111      	bne.n	8006836 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006820:	089b      	lsrs	r3, r3, #2
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800682c:	2101      	movs	r1, #1
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f00f f994 	bl	8015b5c <HAL_PCDEx_LPM_Callback>
 8006834:	e002      	b.n	800683c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f00e ff8c 	bl	8015754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f006 fd53 	bl	800d2ec <USB_ReadInterrupts>
 8006846:	4603      	mov	r3, r0
 8006848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006850:	f040 80b7 	bne.w	80069c2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2110      	movs	r1, #16
 800686e:	4618      	mov	r0, r3
 8006870:	f005 fd0e 	bl	800c290 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006874:	2300      	movs	r3, #0
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006878:	e046      	b.n	8006908 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	461a      	mov	r2, r3
 8006888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800688c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	461a      	mov	r2, r3
 80068bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006900:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	3301      	adds	r3, #1
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690e:	429a      	cmp	r2, r3
 8006910:	d3b3      	bcc.n	800687a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006920:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006924:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693e:	f043 030b 	orr.w	r3, r3, #11
 8006942:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006954:	f043 030b 	orr.w	r3, r3, #11
 8006958:	6453      	str	r3, [r2, #68]	; 0x44
 800695a:	e015      	b.n	8006988 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006962:	695a      	ldr	r2, [r3, #20]
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	4619      	mov	r1, r3
 800696c:	f242 032b 	movw	r3, #8235	; 0x202b
 8006970:	4313      	orrs	r3, r2
 8006972:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	69fa      	ldr	r2, [r7, #28]
 800697e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006982:	f043 030b 	orr.w	r3, r3, #11
 8006986:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006996:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800699a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069ac:	461a      	mov	r2, r3
 80069ae:	f006 fd83 	bl	800d4b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695a      	ldr	r2, [r3, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80069c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f006 fc90 	bl	800d2ec <USB_ReadInterrupts>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d6:	d124      	bne.n	8006a22 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f006 fd47 	bl	800d470 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f005 fccf 	bl	800c38a <USB_GetDevSpeed>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681c      	ldr	r4, [r3, #0]
 80069f8:	f001 fad0 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 80069fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	4620      	mov	r0, r4
 8006a08:	f005 f9d4 	bl	800bdb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f00e fe78 	bl	8015702 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695a      	ldr	r2, [r3, #20]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f006 fc60 	bl	800d2ec <USB_ReadInterrupts>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	d10a      	bne.n	8006a4c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f00e fe55 	bl	80156e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f002 0208 	and.w	r2, r2, #8
 8006a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f006 fc4b 	bl	800d2ec <USB_ReadInterrupts>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d122      	bne.n	8006aa6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a70:	e014      	b.n	8006a9c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d105      	bne.n	8006a96 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fb27 	bl	80070e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	3301      	adds	r3, #1
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3e5      	bcc.n	8006a72 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f006 fc1e 	bl	800d2ec <USB_ReadInterrupts>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aba:	d13b      	bne.n	8006b34 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006abc:	2301      	movs	r3, #1
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac0:	e02b      	b.n	8006b1a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	3340      	adds	r3, #64	; 0x40
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d115      	bne.n	8006b14 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006ae8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da12      	bge.n	8006b14 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	4613      	mov	r3, r2
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	333f      	adds	r3, #63	; 0x3f
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fae8 	bl	80070e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d3ce      	bcc.n	8006ac2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f006 fbd7 	bl	800d2ec <USB_ReadInterrupts>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b48:	d155      	bne.n	8006bf6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	e045      	b.n	8006bdc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	4613      	mov	r3, r2
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d12e      	bne.n	8006bd6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da2b      	bge.n	8006bd6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006b8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d121      	bne.n	8006bd6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	4613      	mov	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bd2:	6053      	str	r3, [r2, #4]
            break;
 8006bd4:	e007      	b.n	8006be6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	3301      	adds	r3, #1
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3b4      	bcc.n	8006b50 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695a      	ldr	r2, [r3, #20]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f006 fb76 	bl	800d2ec <USB_ReadInterrupts>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d10a      	bne.n	8006c22 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f00e fdf9 	bl	8015804 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f006 fb60 	bl	800d2ec <USB_ReadInterrupts>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f003 0304 	and.w	r3, r3, #4
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d115      	bne.n	8006c62 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f00e fde9 	bl	8015820 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6859      	ldr	r1, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
 8006c5e:	e000      	b.n	8006c62 <HAL_PCD_IRQHandler+0x992>
      return;
 8006c60:	bf00      	nop
    }
  }
}
 8006c62:	3734      	adds	r7, #52	; 0x34
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd90      	pop	{r4, r7, pc}

08006c68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_PCD_SetAddress+0x1a>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e013      	b.n	8006caa <HAL_PCD_SetAddress+0x42>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f006 fabe 	bl	800d21c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	4608      	mov	r0, r1
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	70fb      	strb	r3, [r7, #3]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	803b      	strh	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da0f      	bge.n	8006cf8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	f003 020f 	and.w	r2, r3, #15
 8006cde:	4613      	mov	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	3338      	adds	r3, #56	; 0x38
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	705a      	strb	r2, [r3, #1]
 8006cf6:	e00f      	b.n	8006d18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	f003 020f 	and.w	r2, r3, #15
 8006cfe:	4613      	mov	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3304      	adds	r3, #4
 8006d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d24:	883a      	ldrh	r2, [r7, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	78ba      	ldrb	r2, [r7, #2]
 8006d2e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d42:	78bb      	ldrb	r3, [r7, #2]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d102      	bne.n	8006d4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_PCD_EP_Open+0xaa>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e00e      	b.n	8006d7a <HAL_PCD_EP_Open+0xc8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68f9      	ldr	r1, [r7, #12]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f005 fb32 	bl	800c3d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006d78:	7afb      	ldrb	r3, [r7, #11]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da0f      	bge.n	8006db6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	3338      	adds	r3, #56	; 0x38
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	3304      	adds	r3, #4
 8006dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	705a      	strb	r2, [r3, #1]
 8006db4:	e00f      	b.n	8006dd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	3304      	adds	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_PCD_EP_Close+0x6e>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e00e      	b.n	8006e0e <HAL_PCD_EP_Close+0x8c>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68f9      	ldr	r1, [r7, #12]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f005 fb70 	bl	800c4e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	460b      	mov	r3, r1
 8006e24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2200      	movs	r2, #0
 8006e56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d102      	bne.n	8006e72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d109      	bne.n	8006e90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	6979      	ldr	r1, [r7, #20]
 8006e8a:	f005 fe57 	bl	800cb3c <USB_EP0StartXfer>
 8006e8e:	e008      	b.n	8006ea2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	f005 fbfd 	bl	800c69c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006ece:	681b      	ldr	r3, [r3, #0]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	607a      	str	r2, [r7, #4]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	f003 020f 	and.w	r2, r3, #15
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	3338      	adds	r3, #56	; 0x38
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	3304      	adds	r3, #4
 8006f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2200      	movs	r2, #0
 8006f14:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d102      	bne.n	8006f36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6979      	ldr	r1, [r7, #20]
 8006f4e:	f005 fdf5 	bl	800cb3c <USB_EP0StartXfer>
 8006f52:	e008      	b.n	8006f66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6979      	ldr	r1, [r7, #20]
 8006f62:	f005 fb9b 	bl	800c69c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	f003 020f 	and.w	r2, r3, #15
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d901      	bls.n	8006f8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e050      	b.n	8007030 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	da0f      	bge.n	8006fb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	3338      	adds	r3, #56	; 0x38
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3304      	adds	r3, #4
 8006fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	705a      	strb	r2, [r3, #1]
 8006fb4:	e00d      	b.n	8006fd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3304      	adds	r3, #4
 8006fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_PCD_EP_SetStall+0x82>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e01e      	b.n	8007030 <HAL_PCD_EP_SetStall+0xc0>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	4618      	mov	r0, r3
 8007002:	f006 f837 	bl	800d074 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	b2d9      	uxtb	r1, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007020:	461a      	mov	r2, r3
 8007022:	f006 fa49 	bl	800d4b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	f003 020f 	and.w	r2, r3, #15
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d901      	bls.n	8007056 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e042      	b.n	80070dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da0f      	bge.n	800707e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	f003 020f 	and.w	r2, r3, #15
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	3338      	adds	r3, #56	; 0x38
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	705a      	strb	r2, [r3, #1]
 800707c:	e00f      	b.n	800709e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	f003 020f 	and.w	r2, r3, #15
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	3304      	adds	r3, #4
 8007096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_PCD_EP_ClrStall+0x86>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e00e      	b.n	80070dc <HAL_PCD_EP_ClrStall+0xa4>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68f9      	ldr	r1, [r7, #12]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f006 f83f 	bl	800d150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80070f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da0c      	bge.n	8007112 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	3338      	adds	r3, #56	; 0x38
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	3304      	adds	r3, #4
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e00c      	b.n	800712c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	f003 020f 	and.w	r2, r3, #15
 8007118:	4613      	mov	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	3304      	adds	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68f9      	ldr	r1, [r7, #12]
 8007132:	4618      	mov	r0, r3
 8007134:	f005 fe5e 	bl	800cdf4 <USB_EPStopXfer>
 8007138:	4603      	mov	r3, r0
 800713a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800713c:	7afb      	ldrb	r3, [r7, #11]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	; 0x28
 800714a:	af02      	add	r7, sp, #8
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	3338      	adds	r3, #56	; 0x38
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4413      	add	r3, r2
 800716a:	3304      	adds	r3, #4
 800716c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1a      	ldr	r2, [r3, #32]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	429a      	cmp	r2, r3
 8007178:	d901      	bls.n	800717e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e06c      	b.n	8007258 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	429a      	cmp	r2, r3
 8007192:	d902      	bls.n	800719a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3303      	adds	r3, #3
 800719e:	089b      	lsrs	r3, r3, #2
 80071a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071a2:	e02b      	b.n	80071fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	699a      	ldr	r2, [r3, #24]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d902      	bls.n	80071c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	3303      	adds	r3, #3
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6919      	ldr	r1, [r3, #16]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4603      	mov	r3, r0
 80071de:	6978      	ldr	r0, [r7, #20]
 80071e0:	f005 feb2 	bl	800cf48 <USB_WritePacket>

    ep->xfer_buff  += len;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	b29b      	uxth	r3, r3
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	429a      	cmp	r2, r3
 8007210:	d809      	bhi.n	8007226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1a      	ldr	r2, [r3, #32]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800721a:	429a      	cmp	r2, r3
 800721c:	d203      	bcs.n	8007226 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1be      	bne.n	80071a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	429a      	cmp	r2, r3
 8007230:	d811      	bhi.n	8007256 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	2201      	movs	r2, #1
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	43db      	mvns	r3, r3
 800724c:	6939      	ldr	r1, [r7, #16]
 800724e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007252:	4013      	ands	r3, r2
 8007254:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	333c      	adds	r3, #60	; 0x3c
 8007278:	3304      	adds	r3, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d17b      	bne.n	800738e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d015      	beq.n	80072cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4a61      	ldr	r2, [pc, #388]	; (8007428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	f240 80b9 	bls.w	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 80b3 	beq.w	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	461a      	mov	r2, r3
 80072c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c8:	6093      	str	r3, [r2, #8]
 80072ca:	e0a7      	b.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	461a      	mov	r2, r3
 80072e4:	2320      	movs	r3, #32
 80072e6:	6093      	str	r3, [r2, #8]
 80072e8:	e098      	b.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 8093 	bne.w	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4a4b      	ldr	r2, [pc, #300]	; (8007428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d90f      	bls.n	800731e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	461a      	mov	r2, r3
 8007316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731a:	6093      	str	r3, [r2, #8]
 800731c:	e07e      	b.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	0159      	lsls	r1, r3, #5
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	440b      	add	r3, r1
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d114      	bne.n	8007380 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007368:	461a      	mov	r2, r3
 800736a:	2101      	movs	r1, #1
 800736c:	f006 f8a4 	bl	800d4b8 <USB_EP0_OutStart>
 8007370:	e006      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	691a      	ldr	r2, [r3, #16]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	441a      	add	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f00e f978 	bl	801567c <HAL_PCD_DataOutStageCallback>
 800738c:	e046      	b.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	4a26      	ldr	r2, [pc, #152]	; (800742c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d124      	bne.n	80073e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	461a      	mov	r2, r3
 80073ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b2:	6093      	str	r3, [r2, #8]
 80073b4:	e032      	b.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073cc:	461a      	mov	r2, r3
 80073ce:	2320      	movs	r3, #32
 80073d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f00e f94f 	bl	801567c <HAL_PCD_DataOutStageCallback>
 80073de:	e01d      	b.n	800741c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d114      	bne.n	8007410 <PCD_EP_OutXfrComplete_int+0x1b0>
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	4613      	mov	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d108      	bne.n	8007410 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007408:	461a      	mov	r2, r3
 800740a:	2100      	movs	r1, #0
 800740c:	f006 f854 	bl	800d4b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f00e f930 	bl	801567c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	4f54300a 	.word	0x4f54300a
 800742c:	4f54310a 	.word	0x4f54310a

08007430 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	333c      	adds	r3, #60	; 0x3c
 8007448:	3304      	adds	r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d90e      	bls.n	8007484 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	461a      	mov	r2, r3
 800747e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007482:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f00e f8e7 	bl	8015658 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d90c      	bls.n	80074ac <PCD_EP_OutSetupPacket_int+0x7c>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d108      	bne.n	80074ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074a4:	461a      	mov	r2, r3
 80074a6:	2101      	movs	r1, #1
 80074a8:	f006 f806 	bl	800d4b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	4f54300a 	.word	0x4f54300a

080074bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
 80074c8:	4613      	mov	r3, r2
 80074ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d107      	bne.n	80074ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80074da:	883b      	ldrh	r3, [r7, #0]
 80074dc:	0419      	lsls	r1, r3, #16
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	629a      	str	r2, [r3, #40]	; 0x28
 80074e8:	e028      	b.n	800753c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	0c1b      	lsrs	r3, r3, #16
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	4413      	add	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]
 80074fc:	e00d      	b.n	800751a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	3340      	adds	r3, #64	; 0x40
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4413      	add	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	3301      	adds	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
 800751a:	7bfa      	ldrb	r2, [r7, #15]
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	3b01      	subs	r3, #1
 8007520:	429a      	cmp	r2, r3
 8007522:	d3ec      	bcc.n	80074fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007524:	883b      	ldrh	r3, [r7, #0]
 8007526:	0418      	lsls	r0, r3, #16
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6819      	ldr	r1, [r3, #0]
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	3b01      	subs	r3, #1
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4302      	orrs	r2, r0
 8007534:	3340      	adds	r3, #64	; 0x40
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	887a      	ldrh	r2, [r7, #2]
 800755c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800759a:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800759c:	4313      	orrs	r3, r2
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	10000003 	.word	0x10000003

080075b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a04      	ldr	r2, [pc, #16]	; (80075d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80075be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c2:	6013      	str	r3, [r2, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40007000 	.word	0x40007000

080075d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80075de:	4b23      	ldr	r3, [pc, #140]	; (800766c <HAL_PWREx_EnableOverDrive+0x98>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	4a22      	ldr	r2, [pc, #136]	; (800766c <HAL_PWREx_EnableOverDrive+0x98>)
 80075e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ea:	4b20      	ldr	r3, [pc, #128]	; (800766c <HAL_PWREx_EnableOverDrive+0x98>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80075f6:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007600:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007602:	f7fb fe89 	bl	8003318 <HAL_GetTick>
 8007606:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007608:	e009      	b.n	800761e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800760a:	f7fb fe85 	bl	8003318 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007618:	d901      	bls.n	800761e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e022      	b.n	8007664 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762a:	d1ee      	bne.n	800760a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800762c:	4b10      	ldr	r3, [pc, #64]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0f      	ldr	r2, [pc, #60]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007636:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007638:	f7fb fe6e 	bl	8003318 <HAL_GetTick>
 800763c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800763e:	e009      	b.n	8007654 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007640:	f7fb fe6a 	bl	8003318 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800764e:	d901      	bls.n	8007654 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e007      	b.n	8007664 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007660:	d1ee      	bne.n	8007640 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40023800 	.word	0x40023800
 8007670:	40007000 	.word	0x40007000

08007674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800767c:	2300      	movs	r3, #0
 800767e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e291      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8087 	beq.w	80077a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007698:	4b96      	ldr	r3, [pc, #600]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 030c 	and.w	r3, r3, #12
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d00c      	beq.n	80076be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076a4:	4b93      	ldr	r3, [pc, #588]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d112      	bne.n	80076d6 <HAL_RCC_OscConfig+0x62>
 80076b0:	4b90      	ldr	r3, [pc, #576]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076bc:	d10b      	bne.n	80076d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076be:	4b8d      	ldr	r3, [pc, #564]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d06c      	beq.n	80077a4 <HAL_RCC_OscConfig+0x130>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d168      	bne.n	80077a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e26b      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076de:	d106      	bne.n	80076ee <HAL_RCC_OscConfig+0x7a>
 80076e0:	4b84      	ldr	r3, [pc, #528]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a83      	ldr	r2, [pc, #524]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	e02e      	b.n	800774c <HAL_RCC_OscConfig+0xd8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10c      	bne.n	8007710 <HAL_RCC_OscConfig+0x9c>
 80076f6:	4b7f      	ldr	r3, [pc, #508]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a7e      	ldr	r2, [pc, #504]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	4b7c      	ldr	r3, [pc, #496]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a7b      	ldr	r2, [pc, #492]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	e01d      	b.n	800774c <HAL_RCC_OscConfig+0xd8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007718:	d10c      	bne.n	8007734 <HAL_RCC_OscConfig+0xc0>
 800771a:	4b76      	ldr	r3, [pc, #472]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a75      	ldr	r2, [pc, #468]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4b73      	ldr	r3, [pc, #460]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a72      	ldr	r2, [pc, #456]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800772c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e00b      	b.n	800774c <HAL_RCC_OscConfig+0xd8>
 8007734:	4b6f      	ldr	r3, [pc, #444]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a6e      	ldr	r2, [pc, #440]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800773a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	4b6c      	ldr	r3, [pc, #432]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a6b      	ldr	r2, [pc, #428]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800774a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d013      	beq.n	800777c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007754:	f7fb fde0 	bl	8003318 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800775c:	f7fb fddc 	bl	8003318 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b64      	cmp	r3, #100	; 0x64
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e21f      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800776e:	4b61      	ldr	r3, [pc, #388]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0f0      	beq.n	800775c <HAL_RCC_OscConfig+0xe8>
 800777a:	e014      	b.n	80077a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fb fdcc 	bl	8003318 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007784:	f7fb fdc8 	bl	8003318 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b64      	cmp	r3, #100	; 0x64
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e20b      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007796:	4b57      	ldr	r3, [pc, #348]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f0      	bne.n	8007784 <HAL_RCC_OscConfig+0x110>
 80077a2:	e000      	b.n	80077a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d069      	beq.n	8007886 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077b2:	4b50      	ldr	r3, [pc, #320]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 030c 	and.w	r3, r3, #12
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077be:	4b4d      	ldr	r3, [pc, #308]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 030c 	and.w	r3, r3, #12
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d11c      	bne.n	8007804 <HAL_RCC_OscConfig+0x190>
 80077ca:	4b4a      	ldr	r3, [pc, #296]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d116      	bne.n	8007804 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d6:	4b47      	ldr	r3, [pc, #284]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_RCC_OscConfig+0x17a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d001      	beq.n	80077ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e1df      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ee:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	493d      	ldr	r1, [pc, #244]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007802:	e040      	b.n	8007886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d023      	beq.n	8007854 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800780c:	4b39      	ldr	r3, [pc, #228]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a38      	ldr	r2, [pc, #224]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007818:	f7fb fd7e 	bl	8003318 <HAL_GetTick>
 800781c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007820:	f7fb fd7a 	bl	8003318 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e1bd      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007832:	4b30      	ldr	r3, [pc, #192]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f0      	beq.n	8007820 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783e:	4b2d      	ldr	r3, [pc, #180]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	4929      	ldr	r1, [pc, #164]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800784e:	4313      	orrs	r3, r2
 8007850:	600b      	str	r3, [r1, #0]
 8007852:	e018      	b.n	8007886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007854:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007860:	f7fb fd5a 	bl	8003318 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007868:	f7fb fd56 	bl	8003318 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e199      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800787a:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f0      	bne.n	8007868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d038      	beq.n	8007904 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d019      	beq.n	80078ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800789a:	4b16      	ldr	r3, [pc, #88]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800789c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789e:	4a15      	ldr	r2, [pc, #84]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a6:	f7fb fd37 	bl	8003318 <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078ae:	f7fb fd33 	bl	8003318 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e176      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80078c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <HAL_RCC_OscConfig+0x23a>
 80078cc:	e01a      	b.n	8007904 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078ce:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078da:	f7fb fd1d 	bl	8003318 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e0:	e00a      	b.n	80078f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078e2:	f7fb fd19 	bl	8003318 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d903      	bls.n	80078f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e15c      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
 80078f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078f8:	4b91      	ldr	r3, [pc, #580]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80078fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ee      	bne.n	80078e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80a4 	beq.w	8007a5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007912:	4b8b      	ldr	r3, [pc, #556]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10d      	bne.n	800793a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800791e:	4b88      	ldr	r3, [pc, #544]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	4a87      	ldr	r2, [pc, #540]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007928:	6413      	str	r3, [r2, #64]	; 0x40
 800792a:	4b85      	ldr	r3, [pc, #532]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007932:	60bb      	str	r3, [r7, #8]
 8007934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007936:	2301      	movs	r3, #1
 8007938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800793a:	4b82      	ldr	r3, [pc, #520]	; (8007b44 <HAL_RCC_OscConfig+0x4d0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d118      	bne.n	8007978 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007946:	4b7f      	ldr	r3, [pc, #508]	; (8007b44 <HAL_RCC_OscConfig+0x4d0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a7e      	ldr	r2, [pc, #504]	; (8007b44 <HAL_RCC_OscConfig+0x4d0>)
 800794c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007952:	f7fb fce1 	bl	8003318 <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800795a:	f7fb fcdd 	bl	8003318 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b64      	cmp	r3, #100	; 0x64
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e120      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800796c:	4b75      	ldr	r3, [pc, #468]	; (8007b44 <HAL_RCC_OscConfig+0x4d0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0f0      	beq.n	800795a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d106      	bne.n	800798e <HAL_RCC_OscConfig+0x31a>
 8007980:	4b6f      	ldr	r3, [pc, #444]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	4a6e      	ldr	r2, [pc, #440]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	6713      	str	r3, [r2, #112]	; 0x70
 800798c:	e02d      	b.n	80079ea <HAL_RCC_OscConfig+0x376>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10c      	bne.n	80079b0 <HAL_RCC_OscConfig+0x33c>
 8007996:	4b6a      	ldr	r3, [pc, #424]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	4a69      	ldr	r2, [pc, #420]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	6713      	str	r3, [r2, #112]	; 0x70
 80079a2:	4b67      	ldr	r3, [pc, #412]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	4a66      	ldr	r2, [pc, #408]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079a8:	f023 0304 	bic.w	r3, r3, #4
 80079ac:	6713      	str	r3, [r2, #112]	; 0x70
 80079ae:	e01c      	b.n	80079ea <HAL_RCC_OscConfig+0x376>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b05      	cmp	r3, #5
 80079b6:	d10c      	bne.n	80079d2 <HAL_RCC_OscConfig+0x35e>
 80079b8:	4b61      	ldr	r3, [pc, #388]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079bc:	4a60      	ldr	r2, [pc, #384]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079be:	f043 0304 	orr.w	r3, r3, #4
 80079c2:	6713      	str	r3, [r2, #112]	; 0x70
 80079c4:	4b5e      	ldr	r3, [pc, #376]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	4a5d      	ldr	r2, [pc, #372]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	6713      	str	r3, [r2, #112]	; 0x70
 80079d0:	e00b      	b.n	80079ea <HAL_RCC_OscConfig+0x376>
 80079d2:	4b5b      	ldr	r3, [pc, #364]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d6:	4a5a      	ldr	r2, [pc, #360]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	6713      	str	r3, [r2, #112]	; 0x70
 80079de:	4b58      	ldr	r3, [pc, #352]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	4a57      	ldr	r2, [pc, #348]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 80079e4:	f023 0304 	bic.w	r3, r3, #4
 80079e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d015      	beq.n	8007a1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f2:	f7fb fc91 	bl	8003318 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f8:	e00a      	b.n	8007a10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fa:	f7fb fc8d 	bl	8003318 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e0ce      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a10:	4b4b      	ldr	r3, [pc, #300]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0ee      	beq.n	80079fa <HAL_RCC_OscConfig+0x386>
 8007a1c:	e014      	b.n	8007a48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1e:	f7fb fc7b 	bl	8003318 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a24:	e00a      	b.n	8007a3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a26:	f7fb fc77 	bl	8003318 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e0b8      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a3c:	4b40      	ldr	r3, [pc, #256]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1ee      	bne.n	8007a26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d105      	bne.n	8007a5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a4e:	4b3c      	ldr	r3, [pc, #240]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	4a3b      	ldr	r2, [pc, #236]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80a4 	beq.w	8007bac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a64:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 030c 	and.w	r3, r3, #12
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d06b      	beq.n	8007b48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d149      	bne.n	8007b0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a78:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a30      	ldr	r2, [pc, #192]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fb fc48 	bl	8003318 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a8c:	f7fb fc44 	bl	8003318 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e087      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9e:	4b28      	ldr	r3, [pc, #160]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69da      	ldr	r2, [r3, #28]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	019b      	lsls	r3, r3, #6
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac0:	085b      	lsrs	r3, r3, #1
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	041b      	lsls	r3, r3, #16
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ad8:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae4:	f7fb fc18 	bl	8003318 <HAL_GetTick>
 8007ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aec:	f7fb fc14 	bl	8003318 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e057      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007afe:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f0      	beq.n	8007aec <HAL_RCC_OscConfig+0x478>
 8007b0a:	e04f      	b.n	8007bac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b0c:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0b      	ldr	r2, [pc, #44]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fb fbfe 	bl	8003318 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b20:	f7fb fbfa 	bl	8003318 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e03d      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b32:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_RCC_OscConfig+0x4cc>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x4ac>
 8007b3e:	e035      	b.n	8007bac <HAL_RCC_OscConfig+0x538>
 8007b40:	40023800 	.word	0x40023800
 8007b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_RCC_OscConfig+0x544>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d028      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d121      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d11a      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b78:	4013      	ands	r3, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d111      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	3b01      	subs	r3, #1
 8007b92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d107      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d001      	beq.n	8007bac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40023800 	.word	0x40023800

08007bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0d0      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bd4:	4b6a      	ldr	r3, [pc, #424]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d910      	bls.n	8007c04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be2:	4b67      	ldr	r3, [pc, #412]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f023 020f 	bic.w	r2, r3, #15
 8007bea:	4965      	ldr	r1, [pc, #404]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bf2:	4b63      	ldr	r3, [pc, #396]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d001      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e0b8      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d020      	beq.n	8007c52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c1c:	4b59      	ldr	r3, [pc, #356]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	4a58      	ldr	r2, [pc, #352]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c34:	4b53      	ldr	r3, [pc, #332]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	4a52      	ldr	r2, [pc, #328]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c40:	4b50      	ldr	r3, [pc, #320]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	494d      	ldr	r1, [pc, #308]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d040      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d107      	bne.n	8007c76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c66:	4b47      	ldr	r3, [pc, #284]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d115      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e07f      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c7e:	4b41      	ldr	r3, [pc, #260]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e073      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c8e:	4b3d      	ldr	r3, [pc, #244]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e06b      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c9e:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f023 0203 	bic.w	r2, r3, #3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	4936      	ldr	r1, [pc, #216]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb0:	f7fb fb32 	bl	8003318 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb6:	e00a      	b.n	8007cce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cb8:	f7fb fb2e 	bl	8003318 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e053      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cce:	4b2d      	ldr	r3, [pc, #180]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 020c 	and.w	r2, r3, #12
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d1eb      	bne.n	8007cb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d210      	bcs.n	8007d10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cee:	4b24      	ldr	r3, [pc, #144]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f023 020f 	bic.w	r2, r3, #15
 8007cf6:	4922      	ldr	r1, [pc, #136]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfe:	4b20      	ldr	r3, [pc, #128]	; (8007d80 <HAL_RCC_ClockConfig+0x1c4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d001      	beq.n	8007d10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e032      	b.n	8007d76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d1c:	4b19      	ldr	r3, [pc, #100]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	4916      	ldr	r1, [pc, #88]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0308 	and.w	r3, r3, #8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d009      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d3a:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	490e      	ldr	r1, [pc, #56]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d4e:	f000 f821 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8007d52:	4602      	mov	r2, r0
 8007d54:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <HAL_RCC_ClockConfig+0x1c8>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	091b      	lsrs	r3, r3, #4
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	490a      	ldr	r1, [pc, #40]	; (8007d88 <HAL_RCC_ClockConfig+0x1cc>)
 8007d60:	5ccb      	ldrb	r3, [r1, r3]
 8007d62:	fa22 f303 	lsr.w	r3, r2, r3
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <HAL_RCC_ClockConfig+0x1d0>)
 8007d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d6a:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <HAL_RCC_ClockConfig+0x1d4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fb fa8e 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40023c00 	.word	0x40023c00
 8007d84:	40023800 	.word	0x40023800
 8007d88:	0801997c 	.word	0x0801997c
 8007d8c:	20000000 	.word	0x20000000
 8007d90:	20000004 	.word	0x20000004

08007d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d98:	b094      	sub	sp, #80	; 0x50
 8007d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007da0:	2300      	movs	r3, #0
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da4:	2300      	movs	r3, #0
 8007da6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dac:	4b79      	ldr	r3, [pc, #484]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 030c 	and.w	r3, r3, #12
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d00d      	beq.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	f200 80e1 	bhi.w	8007f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d002      	beq.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d003      	beq.n	8007dce <HAL_RCC_GetSysClockFreq+0x3a>
 8007dc6:	e0db      	b.n	8007f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dc8:	4b73      	ldr	r3, [pc, #460]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dcc:	e0db      	b.n	8007f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dce:	4b72      	ldr	r3, [pc, #456]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dd2:	e0d8      	b.n	8007f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dd4:	4b6f      	ldr	r3, [pc, #444]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ddc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007dde:	4b6d      	ldr	r3, [pc, #436]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d063      	beq.n	8007eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dea:	4b6a      	ldr	r3, [pc, #424]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	099b      	lsrs	r3, r3, #6
 8007df0:	2200      	movs	r2, #0
 8007df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007df4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8007dfe:	2300      	movs	r3, #0
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
 8007e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e06:	4622      	mov	r2, r4
 8007e08:	462b      	mov	r3, r5
 8007e0a:	f04f 0000 	mov.w	r0, #0
 8007e0e:	f04f 0100 	mov.w	r1, #0
 8007e12:	0159      	lsls	r1, r3, #5
 8007e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e18:	0150      	lsls	r0, r2, #5
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4621      	mov	r1, r4
 8007e20:	1a51      	subs	r1, r2, r1
 8007e22:	6139      	str	r1, [r7, #16]
 8007e24:	4629      	mov	r1, r5
 8007e26:	eb63 0301 	sbc.w	r3, r3, r1
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f04f 0300 	mov.w	r3, #0
 8007e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e38:	4659      	mov	r1, fp
 8007e3a:	018b      	lsls	r3, r1, #6
 8007e3c:	4651      	mov	r1, sl
 8007e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e42:	4651      	mov	r1, sl
 8007e44:	018a      	lsls	r2, r1, #6
 8007e46:	4651      	mov	r1, sl
 8007e48:	ebb2 0801 	subs.w	r8, r2, r1
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e66:	4690      	mov	r8, r2
 8007e68:	4699      	mov	r9, r3
 8007e6a:	4623      	mov	r3, r4
 8007e6c:	eb18 0303 	adds.w	r3, r8, r3
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	462b      	mov	r3, r5
 8007e74:	eb49 0303 	adc.w	r3, r9, r3
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	f04f 0200 	mov.w	r2, #0
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e86:	4629      	mov	r1, r5
 8007e88:	028b      	lsls	r3, r1, #10
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e90:	4621      	mov	r1, r4
 8007e92:	028a      	lsls	r2, r1, #10
 8007e94:	4610      	mov	r0, r2
 8007e96:	4619      	mov	r1, r3
 8007e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ea4:	f7f8 fea0 	bl	8000be8 <__aeabi_uldivmod>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4613      	mov	r3, r2
 8007eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb0:	e058      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb2:	4b38      	ldr	r3, [pc, #224]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ec2:	623b      	str	r3, [r7, #32]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ecc:	4642      	mov	r2, r8
 8007ece:	464b      	mov	r3, r9
 8007ed0:	f04f 0000 	mov.w	r0, #0
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	0159      	lsls	r1, r3, #5
 8007eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ede:	0150      	lsls	r0, r2, #5
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007eea:	4649      	mov	r1, r9
 8007eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f04:	ebb2 040a 	subs.w	r4, r2, sl
 8007f08:	eb63 050b 	sbc.w	r5, r3, fp
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	00eb      	lsls	r3, r5, #3
 8007f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f1a:	00e2      	lsls	r2, r4, #3
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	461d      	mov	r5, r3
 8007f20:	4643      	mov	r3, r8
 8007f22:	18e3      	adds	r3, r4, r3
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	464b      	mov	r3, r9
 8007f28:	eb45 0303 	adc.w	r3, r5, r3
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	028b      	lsls	r3, r1, #10
 8007f3e:	4621      	mov	r1, r4
 8007f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f44:	4621      	mov	r1, r4
 8007f46:	028a      	lsls	r2, r1, #10
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f4e:	2200      	movs	r2, #0
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	61fa      	str	r2, [r7, #28]
 8007f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f58:	f7f8 fe46 	bl	8000be8 <__aeabi_uldivmod>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4613      	mov	r3, r2
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	3301      	adds	r3, #1
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007f74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f7e:	e002      	b.n	8007f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f80:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3750      	adds	r7, #80	; 0x50
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f92:	bf00      	nop
 8007f94:	40023800 	.word	0x40023800
 8007f98:	00f42400 	.word	0x00f42400

08007f9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fa0:	4b03      	ldr	r3, [pc, #12]	; (8007fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000000 	.word	0x20000000

08007fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fb8:	f7ff fff0 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	0a9b      	lsrs	r3, r3, #10
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	4903      	ldr	r1, [pc, #12]	; (8007fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fca:	5ccb      	ldrb	r3, [r1, r3]
 8007fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	0801998c 	.word	0x0801998c

08007fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fe0:	f7ff ffdc 	bl	8007f9c <HAL_RCC_GetHCLKFreq>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	0b5b      	lsrs	r3, r3, #13
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	4903      	ldr	r1, [pc, #12]	; (8008000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ff2:	5ccb      	ldrb	r3, [r1, r3]
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40023800 	.word	0x40023800
 8008000:	0801998c 	.word	0x0801998c

08008004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800802c:	4b69      	ldr	r3, [pc, #420]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4a68      	ldr	r2, [pc, #416]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008032:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008036:	6093      	str	r3, [r2, #8]
 8008038:	4b66      	ldr	r3, [pc, #408]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	4964      	ldr	r1, [pc, #400]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800804e:	2301      	movs	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d017      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800805e:	4b5d      	ldr	r3, [pc, #372]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806c:	4959      	ldr	r1, [pc, #356]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807c:	d101      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800807e:	2301      	movs	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800808a:	2301      	movs	r3, #1
 800808c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d017      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800809a:	4b4e      	ldr	r3, [pc, #312]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	494a      	ldr	r1, [pc, #296]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b8:	d101      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80080ba:	2301      	movs	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80080d6:	2301      	movs	r3, #1
 80080d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 808b 	beq.w	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080e8:	4b3a      	ldr	r3, [pc, #232]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	4a39      	ldr	r2, [pc, #228]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f2:	6413      	str	r3, [r2, #64]	; 0x40
 80080f4:	4b37      	ldr	r3, [pc, #220]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008100:	4b35      	ldr	r3, [pc, #212]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a34      	ldr	r2, [pc, #208]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810c:	f7fb f904 	bl	8003318 <HAL_GetTick>
 8008110:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008112:	e008      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008114:	f7fb f900 	bl	8003318 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b64      	cmp	r3, #100	; 0x64
 8008120:	d901      	bls.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e31f      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008126:	4b2c      	ldr	r3, [pc, #176]	; (80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0f0      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008132:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800813a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d035      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d02e      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008150:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008158:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800815a:	4b1e      	ldr	r3, [pc, #120]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008164:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008166:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816a:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008172:	4a18      	ldr	r2, [pc, #96]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008178:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800817a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b01      	cmp	r3, #1
 8008182:	d114      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fb f8c8 	bl	8003318 <HAL_GetTick>
 8008188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800818a:	e00a      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800818c:	f7fb f8c4 	bl	8003318 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	f241 3288 	movw	r2, #5000	; 0x1388
 800819a:	4293      	cmp	r3, r2
 800819c:	d901      	bls.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e2e1      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081a2:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0ee      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081ba:	d111      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80081ca:	400b      	ands	r3, r1
 80081cc:	4901      	ldr	r1, [pc, #4]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	608b      	str	r3, [r1, #8]
 80081d2:	e00b      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80081d4:	40023800 	.word	0x40023800
 80081d8:	40007000 	.word	0x40007000
 80081dc:	0ffffcff 	.word	0x0ffffcff
 80081e0:	4ba8      	ldr	r3, [pc, #672]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4aa7      	ldr	r2, [pc, #668]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081ea:	6093      	str	r3, [r2, #8]
 80081ec:	4ba5      	ldr	r3, [pc, #660]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f8:	49a2      	ldr	r1, [pc, #648]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0310 	and.w	r3, r3, #16
 8008206:	2b00      	cmp	r3, #0
 8008208:	d010      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800820a:	4b9e      	ldr	r3, [pc, #632]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800820c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008210:	4a9c      	ldr	r2, [pc, #624]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800821a:	4b9a      	ldr	r3, [pc, #616]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800821c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	4997      	ldr	r1, [pc, #604]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008226:	4313      	orrs	r3, r2
 8008228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008238:	4b92      	ldr	r3, [pc, #584]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008246:	498f      	ldr	r1, [pc, #572]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008248:	4313      	orrs	r3, r2
 800824a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800825a:	4b8a      	ldr	r3, [pc, #552]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008268:	4986      	ldr	r1, [pc, #536]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800827c:	4b81      	ldr	r3, [pc, #516]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800827e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828a:	497e      	ldr	r1, [pc, #504]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800828c:	4313      	orrs	r3, r2
 800828e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800829e:	4b79      	ldr	r3, [pc, #484]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ac:	4975      	ldr	r1, [pc, #468]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082c0:	4b70      	ldr	r3, [pc, #448]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c6:	f023 0203 	bic.w	r2, r3, #3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ce:	496d      	ldr	r1, [pc, #436]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082e2:	4b68      	ldr	r3, [pc, #416]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e8:	f023 020c 	bic.w	r2, r3, #12
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f0:	4964      	ldr	r1, [pc, #400]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008304:	4b5f      	ldr	r3, [pc, #380]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008312:	495c      	ldr	r1, [pc, #368]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008314:	4313      	orrs	r3, r2
 8008316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008326:	4b57      	ldr	r3, [pc, #348]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008334:	4953      	ldr	r1, [pc, #332]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008348:	4b4e      	ldr	r3, [pc, #312]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	494b      	ldr	r1, [pc, #300]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008358:	4313      	orrs	r3, r2
 800835a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800836a:	4b46      	ldr	r3, [pc, #280]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	4942      	ldr	r1, [pc, #264]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800837a:	4313      	orrs	r3, r2
 800837c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800838c:	4b3d      	ldr	r3, [pc, #244]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	493a      	ldr	r1, [pc, #232]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800839c:	4313      	orrs	r3, r2
 800839e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80083ae:	4b35      	ldr	r3, [pc, #212]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083bc:	4931      	ldr	r1, [pc, #196]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80083d0:	4b2c      	ldr	r3, [pc, #176]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083de:	4929      	ldr	r1, [pc, #164]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d011      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008400:	4920      	ldr	r1, [pc, #128]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008402:	4313      	orrs	r3, r2
 8008404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008410:	d101      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008412:	2301      	movs	r3, #1
 8008414:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008422:	4b18      	ldr	r3, [pc, #96]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008428:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008430:	4914      	ldr	r1, [pc, #80]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008454:	490b      	ldr	r1, [pc, #44]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d006      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80d8 	beq.w	8008620 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a03      	ldr	r2, [pc, #12]	; (8008484 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800847a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847c:	f7fa ff4c 	bl	8003318 <HAL_GetTick>
 8008480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008482:	e00a      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008484:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008488:	f7fa ff46 	bl	8003318 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b64      	cmp	r3, #100	; 0x64
 8008494:	d901      	bls.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e165      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800849a:	4ba9      	ldr	r3, [pc, #676]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f0      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d021      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d11d      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084ba:	4ba1      	ldr	r3, [pc, #644]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80084bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c0:	0c1b      	lsrs	r3, r3, #16
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084c8:	4b9d      	ldr	r3, [pc, #628]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80084ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ce:	0e1b      	lsrs	r3, r3, #24
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	019a      	lsls	r2, r3, #6
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	431a      	orrs	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	061b      	lsls	r3, r3, #24
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	071b      	lsls	r3, r3, #28
 80084ee:	4994      	ldr	r1, [pc, #592]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008514:	2b00      	cmp	r3, #0
 8008516:	d02e      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008520:	d129      	bne.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008522:	4b87      	ldr	r3, [pc, #540]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008528:	0c1b      	lsrs	r3, r3, #16
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008530:	4b83      	ldr	r3, [pc, #524]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	0f1b      	lsrs	r3, r3, #28
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	019a      	lsls	r2, r3, #6
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	041b      	lsls	r3, r3, #16
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	061b      	lsls	r3, r3, #24
 8008550:	431a      	orrs	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	071b      	lsls	r3, r3, #28
 8008556:	497a      	ldr	r1, [pc, #488]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800855e:	4b78      	ldr	r3, [pc, #480]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008564:	f023 021f 	bic.w	r2, r3, #31
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	3b01      	subs	r3, #1
 800856e:	4974      	ldr	r1, [pc, #464]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01d      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008582:	4b6f      	ldr	r3, [pc, #444]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008588:	0e1b      	lsrs	r3, r3, #24
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008590:	4b6b      	ldr	r3, [pc, #428]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008596:	0f1b      	lsrs	r3, r3, #28
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	019a      	lsls	r2, r3, #6
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	431a      	orrs	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	061b      	lsls	r3, r3, #24
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	071b      	lsls	r3, r3, #28
 80085b6:	4962      	ldr	r1, [pc, #392]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d011      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	019a      	lsls	r2, r3, #6
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	061b      	lsls	r3, r3, #24
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	071b      	lsls	r3, r3, #28
 80085e6:	4956      	ldr	r1, [pc, #344]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80085ee:	4b54      	ldr	r3, [pc, #336]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a53      	ldr	r2, [pc, #332]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80085f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085fa:	f7fa fe8d 	bl	8003318 <HAL_GetTick>
 80085fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008600:	e008      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008602:	f7fa fe89 	bl	8003318 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b64      	cmp	r3, #100	; 0x64
 800860e:	d901      	bls.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e0a8      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008614:	4b4a      	ldr	r3, [pc, #296]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0f0      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	2b01      	cmp	r3, #1
 8008624:	f040 809e 	bne.w	8008764 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008628:	4b45      	ldr	r3, [pc, #276]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a44      	ldr	r2, [pc, #272]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800862e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008634:	f7fa fe70 	bl	8003318 <HAL_GetTick>
 8008638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800863a:	e008      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800863c:	f7fa fe6c 	bl	8003318 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b64      	cmp	r3, #100	; 0x64
 8008648:	d901      	bls.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e08b      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800864e:	4b3c      	ldr	r3, [pc, #240]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865a:	d0ef      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02e      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d12a      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008684:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868a:	0c1b      	lsrs	r3, r3, #16
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008692:	4b2b      	ldr	r3, [pc, #172]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008698:	0f1b      	lsrs	r3, r3, #28
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	019a      	lsls	r2, r3, #6
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	041b      	lsls	r3, r3, #16
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	431a      	orrs	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	071b      	lsls	r3, r3, #28
 80086b8:	4921      	ldr	r1, [pc, #132]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80086c0:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	3b01      	subs	r3, #1
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	491b      	ldr	r1, [pc, #108]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d022      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x728>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ee:	d11d      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086f0:	4b13      	ldr	r3, [pc, #76]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80086f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f6:	0e1b      	lsrs	r3, r3, #24
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086fe:	4b10      	ldr	r3, [pc, #64]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008704:	0f1b      	lsrs	r3, r3, #28
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	019a      	lsls	r2, r3, #6
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	431a      	orrs	r2, r3
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	431a      	orrs	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	071b      	lsls	r3, r3, #28
 8008724:	4906      	ldr	r1, [pc, #24]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800872c:	4b04      	ldr	r3, [pc, #16]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a03      	ldr	r2, [pc, #12]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008738:	f7fa fdee 	bl	8003318 <HAL_GetTick>
 800873c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800873e:	e00a      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8008740:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008744:	f7fa fde8 	bl	8003318 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d901      	bls.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e007      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800875e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008762:	d1ef      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40023800 	.word	0x40023800

08008774 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e022      	b.n	80087cc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fa f9b5 	bl	8002b08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2203      	movs	r2, #3
 80087a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f814 	bl	80087d4 <HAL_SD_InitCard>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e00a      	b.n	80087cc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087d4:	b5b0      	push	{r4, r5, r7, lr}
 80087d6:	b08e      	sub	sp, #56	; 0x38
 80087d8:	af04      	add	r7, sp, #16
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80087dc:	2300      	movs	r3, #0
 80087de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80087ec:	2300      	movs	r3, #0
 80087ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80087f0:	2376      	movs	r3, #118	; 0x76
 80087f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681d      	ldr	r5, [r3, #0]
 80087f8:	466c      	mov	r4, sp
 80087fa:	f107 0314 	add.w	r3, r7, #20
 80087fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800880c:	4628      	mov	r0, r5
 800880e:	f002 fd47 	bl	800b2a0 <SDMMC_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e059      	b.n	80088d8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008832:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4618      	mov	r0, r3
 800883a:	f002 fd7b 	bl	800b334 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800884c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800884e:	2002      	movs	r0, #2
 8008850:	f7fa fd6e 	bl	8003330 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 ff59 	bl	800970c <SD_PowerON>
 800885a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e02e      	b.n	80088d8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fe78 	bl	8009570 <SD_InitCard>
 8008880:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e01b      	b.n	80088d8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088a8:	4618      	mov	r0, r3
 80088aa:	f002 fdd5 	bl	800b458 <SDMMC_CmdBlockLength>
 80088ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00f      	beq.n	80088d6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <HAL_SD_InitCard+0x10c>)
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3728      	adds	r7, #40	; 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bdb0      	pop	{r4, r5, r7, pc}
 80088e0:	004005ff 	.word	0x004005ff

080088e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08c      	sub	sp, #48	; 0x30
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e0c3      	b.n	8008a94 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	f040 80bc 	bne.w	8008a92 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	441a      	add	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892a:	429a      	cmp	r2, r3
 800892c:	d907      	bls.n	800893e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e0aa      	b.n	8008a94 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2203      	movs	r2, #3
 8008942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800895c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	4a4e      	ldr	r2, [pc, #312]	; (8008a9c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	4a4d      	ldr	r2, [pc, #308]	; (8008aa0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800896c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	2200      	movs	r2, #0
 8008974:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3380      	adds	r3, #128	; 0x80
 80089a4:	4619      	mov	r1, r3
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	025b      	lsls	r3, r3, #9
 80089ac:	089b      	lsrs	r3, r3, #2
 80089ae:	f7fb f937 	bl	8003c20 <HAL_DMA_Start_IT>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d017      	beq.n	80089e8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80089c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a35      	ldr	r2, [pc, #212]	; (8008aa4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e055      	b.n	8008a94 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0208 	orr.w	r2, r2, #8
 80089f6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d002      	beq.n	8008a06 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	025b      	lsls	r3, r3, #9
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	025b      	lsls	r3, r3, #9
 8008a10:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a12:	2390      	movs	r3, #144	; 0x90
 8008a14:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a16:	2302      	movs	r3, #2
 8008a18:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f107 0210 	add.w	r2, r7, #16
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f002 fce7 	bl	800b400 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d90a      	bls.n	8008a4e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2282      	movs	r2, #130	; 0x82
 8008a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 fd4b 	bl	800b4e0 <SDMMC_CmdReadMultiBlock>
 8008a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a4c:	e009      	b.n	8008a62 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2281      	movs	r2, #129	; 0x81
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f002 fd1e 	bl	800b49c <SDMMC_CmdReadSingleBlock>
 8008a60:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d012      	beq.n	8008a8e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a0d      	ldr	r2, [pc, #52]	; (8008aa4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	431a      	orrs	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e002      	b.n	8008a94 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e000      	b.n	8008a94 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008a92:	2302      	movs	r3, #2
  }
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3730      	adds	r7, #48	; 0x30
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	0800937f 	.word	0x0800937f
 8008aa0:	080093f1 	.word	0x080093f1
 8008aa4:	004005ff 	.word	0x004005ff

08008aa8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08c      	sub	sp, #48	; 0x30
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d107      	bne.n	8008ad0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0c6      	b.n	8008c5e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	f040 80bf 	bne.w	8008c5c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	441a      	add	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d907      	bls.n	8008b02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e0ad      	b.n	8008c5e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2203      	movs	r2, #3
 8008b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 021a 	orr.w	r2, r2, #26
 8008b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	4a50      	ldr	r2, [pc, #320]	; (8008c68 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	4a4f      	ldr	r2, [pc, #316]	; (8008c6c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008b30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	2200      	movs	r2, #0
 8008b38:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d002      	beq.n	8008b48 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	025b      	lsls	r3, r3, #9
 8008b46:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d90a      	bls.n	8008b64 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	22a0      	movs	r2, #160	; 0xa0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f002 fd04 	bl	800b568 <SDMMC_CmdWriteMultiBlock>
 8008b60:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b62:	e009      	b.n	8008b78 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2290      	movs	r2, #144	; 0x90
 8008b68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fcd7 	bl	800b524 <SDMMC_CmdWriteSingleBlock>
 8008b76:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d012      	beq.n	8008ba4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a3b      	ldr	r2, [pc, #236]	; (8008c70 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e05c      	b.n	8008c5e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0208 	orr.w	r2, r2, #8
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb8:	2240      	movs	r2, #64	; 0x40
 8008bba:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	689a      	ldr	r2, [r3, #8]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3380      	adds	r3, #128	; 0x80
 8008be4:	461a      	mov	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	025b      	lsls	r3, r3, #9
 8008bea:	089b      	lsrs	r3, r3, #2
 8008bec:	f7fb f818 	bl	8003c20 <HAL_DMA_Start_IT>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01a      	beq.n	8008c2c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 021a 	bic.w	r2, r2, #26
 8008c04:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a19      	ldr	r2, [pc, #100]	; (8008c70 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e018      	b.n	8008c5e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c30:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	025b      	lsls	r3, r3, #9
 8008c36:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008c38:	2390      	movs	r3, #144	; 0x90
 8008c3a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f107 0210 	add.w	r2, r7, #16
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f002 fbd4 	bl	800b400 <SDMMC_ConfigData>

      return HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e000      	b.n	8008c5e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008c5c:	2302      	movs	r3, #2
  }
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3730      	adds	r7, #48	; 0x30
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	08009355 	.word	0x08009355
 8008c6c:	080093f1 	.word	0x080093f1
 8008c70:	004005ff 	.word	0x004005ff

08008c74 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d008      	beq.n	8008ca2 <HAL_SD_IRQHandler+0x2e>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fdec 	bl	8009878 <SD_Read_IT>
 8008ca0:	e15a      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 808d 	beq.w	8008dcc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b9a      	ldr	r3, [pc, #616]	; (8008f30 <HAL_SD_IRQHandler+0x2bc>)
 8008cc8:	400b      	ands	r3, r1
 8008cca:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0201 	bic.w	r2, r2, #1
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f003 0308 	and.w	r3, r3, #8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d039      	beq.n	8008d5a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <HAL_SD_IRQHandler+0x86>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d011      	beq.n	8008d1e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f002 fc54 	bl	800b5ac <SDMMC_CmdStopTransfer>
 8008d04:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f921 	bl	8008f60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <HAL_SD_IRQHandler+0xd6>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f005 fa98 	bl	800e280 <HAL_SD_RxCpltCallback>
 8008d50:	e102      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f005 fa8a 	bl	800e26c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008d58:	e0fe      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80f9 	beq.w	8008f58 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d011      	beq.n	8008d94 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f002 fc19 	bl	800b5ac <SDMMC_CmdStopTransfer>
 8008d7a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f8e6 	bl	8008f60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f040 80dc 	bne.w	8008f58 <HAL_SD_IRQHandler+0x2e4>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f040 80d6 	bne.w	8008f58 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0208 	bic.w	r2, r2, #8
 8008dba:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f005 fa51 	bl	800e26c <HAL_SD_TxCpltCallback>
}
 8008dca:	e0c5      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d008      	beq.n	8008dec <HAL_SD_IRQHandler+0x178>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fd98 	bl	800991a <SD_Write_IT>
 8008dea:	e0b5      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80ae 	beq.w	8008f58 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	f043 0202 	orr.w	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	f043 0208 	orr.w	r2, r3, #8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f043 0220 	orr.w	r2, r3, #32
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	f043 0210 	orr.w	r2, r3, #16
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f002 fb92 	bl	800b5ac <SDMMC_CmdStopTransfer>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f857 	bl	8008f60 <HAL_SD_ErrorCallback>
}
 8008eb2:	e051      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d04c      	beq.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <HAL_SD_IRQHandler+0x25e>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d011      	beq.n	8008ef6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	4a17      	ldr	r2, [pc, #92]	; (8008f34 <HAL_SD_IRQHandler+0x2c0>)
 8008ed8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fa fefe 	bl	8003ce0 <HAL_DMA_Abort_IT>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d036      	beq.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fad0 	bl	8009494 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ef4:	e030      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <HAL_SD_IRQHandler+0x296>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d018      	beq.n	8008f3c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	4a0a      	ldr	r2, [pc, #40]	; (8008f38 <HAL_SD_IRQHandler+0x2c4>)
 8008f10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fa fee2 	bl	8003ce0 <HAL_DMA_Abort_IT>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01a      	beq.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 faeb 	bl	8009502 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008f2c:	e014      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
 8008f2e:	bf00      	nop
 8008f30:	ffff3ec5 	.word	0xffff3ec5
 8008f34:	08009495 	.word	0x08009495
 8008f38:	08009503 	.word	0x08009503
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f005 f981 	bl	800e258 <HAL_SD_AbortCallback>
}
 8008f56:	e7ff      	b.n	8008f58 <HAL_SD_IRQHandler+0x2e4>
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f82:	0f9b      	lsrs	r3, r3, #30
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f8e:	0e9b      	lsrs	r3, r3, #26
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa0:	0e1b      	lsrs	r3, r3, #24
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbe:	0a1b      	lsrs	r3, r3, #8
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd4:	0d1b      	lsrs	r3, r3, #20
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe0:	0c1b      	lsrs	r3, r3, #16
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ff2:	0bdb      	lsrs	r3, r3, #15
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009004:	0b9b      	lsrs	r3, r3, #14
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	b2da      	uxtb	r2, r3
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009016:	0b5b      	lsrs	r3, r3, #13
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009028:	0b1b      	lsrs	r3, r3, #12
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2200      	movs	r2, #0
 800903a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009040:	2b00      	cmp	r3, #0
 8009042:	d163      	bne.n	800910c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009048:	009a      	lsls	r2, r3, #2
 800904a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800904e:	4013      	ands	r3, r2
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009054:	0f92      	lsrs	r2, r2, #30
 8009056:	431a      	orrs	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009060:	0edb      	lsrs	r3, r3, #27
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	b2da      	uxtb	r2, r3
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009072:	0e1b      	lsrs	r3, r3, #24
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	b2da      	uxtb	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009084:	0d5b      	lsrs	r3, r3, #21
 8009086:	b2db      	uxtb	r3, r3
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	b2da      	uxtb	r2, r3
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009096:	0c9b      	lsrs	r3, r3, #18
 8009098:	b2db      	uxtb	r3, r3
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a8:	0bdb      	lsrs	r3, r3, #15
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	7e1b      	ldrb	r3, [r3, #24]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	3302      	adds	r3, #2
 80090cc:	2201      	movs	r2, #1
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80090d6:	fb03 f202 	mul.w	r2, r3, r2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	7a1b      	ldrb	r3, [r3, #8]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	2201      	movs	r2, #1
 80090ea:	409a      	lsls	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090f8:	0a52      	lsrs	r2, r2, #9
 80090fa:	fb03 f202 	mul.w	r2, r3, r2
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009108:	661a      	str	r2, [r3, #96]	; 0x60
 800910a:	e031      	b.n	8009170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009110:	2b01      	cmp	r3, #1
 8009112:	d11d      	bne.n	8009150 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	431a      	orrs	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	3301      	adds	r3, #1
 8009130:	029a      	lsls	r2, r3, #10
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009144:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	661a      	str	r2, [r3, #96]	; 0x60
 800914e:	e00f      	b.n	8009170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a58      	ldr	r2, [pc, #352]	; (80092b8 <HAL_SD_GetCardCSD+0x344>)
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e09d      	b.n	80092ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009174:	0b9b      	lsrs	r3, r3, #14
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	b2da      	uxtb	r2, r3
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009186:	09db      	lsrs	r3, r3, #7
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a8:	0fdb      	lsrs	r3, r3, #31
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b4:	0f5b      	lsrs	r3, r3, #29
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	0e9b      	lsrs	r3, r3, #26
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d8:	0d9b      	lsrs	r3, r3, #22
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	0d5b      	lsrs	r3, r3, #21
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	0c1b      	lsrs	r3, r3, #16
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	b2da      	uxtb	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	0bdb      	lsrs	r3, r3, #15
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	b2da      	uxtb	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922e:	0b9b      	lsrs	r3, r3, #14
 8009230:	b2db      	uxtb	r3, r3
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	b2da      	uxtb	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009242:	0b5b      	lsrs	r3, r3, #13
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009256:	0b1b      	lsrs	r3, r3, #12
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	b2da      	uxtb	r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926a:	0a9b      	lsrs	r3, r3, #10
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 0303 	and.w	r3, r3, #3
 8009272:	b2da      	uxtb	r2, r3
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929a:	b2da      	uxtb	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	004005ff 	.word	0x004005ff

080092bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009320:	f107 030c 	add.w	r3, r7, #12
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa7e 	bl	8009828 <SD_SendStatus>
 800932c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d005      	beq.n	8009340 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0a5b      	lsrs	r3, r3, #9
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800934a:	693b      	ldr	r3, [r7, #16]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009370:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009372:	bf00      	nop
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	2b82      	cmp	r3, #130	; 0x82
 8009392:	d111      	bne.n	80093b8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f002 f907 	bl	800b5ac <SDMMC_CmdStopTransfer>
 800939e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d008      	beq.n	80093b8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	431a      	orrs	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff fdd4 	bl	8008f60 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0208 	bic.w	r2, r2, #8
 80093c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80093d0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f004 ff4d 	bl	800e280 <HAL_SD_RxCpltCallback>
#endif
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fa fe1a 	bl	8004038 <HAL_DMA_GetError>
 8009404:	4603      	mov	r3, r0
 8009406:	2b02      	cmp	r3, #2
 8009408:	d03e      	beq.n	8009488 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009410:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d002      	beq.n	8009426 <SD_DMAError+0x36>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d12d      	bne.n	8009482 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a19      	ldr	r2, [pc, #100]	; (8009490 <SD_DMAError+0xa0>)
 800942c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800943c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800944a:	6978      	ldr	r0, [r7, #20]
 800944c:	f7ff ff62 	bl	8009314 <HAL_SD_GetCardState>
 8009450:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b06      	cmp	r3, #6
 8009456:	d002      	beq.n	800945e <SD_DMAError+0x6e>
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b05      	cmp	r3, #5
 800945c:	d10a      	bne.n	8009474 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f002 f8a2 	bl	800b5ac <SDMMC_CmdStopTransfer>
 8009468:	4602      	mov	r2, r0
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	431a      	orrs	r2, r3
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2200      	movs	r2, #0
 8009480:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009482:	6978      	ldr	r0, [r7, #20]
 8009484:	f7ff fd6c 	bl	8008f60 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009488:	bf00      	nop
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	004005ff 	.word	0x004005ff

08009494 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff ff31 	bl	8009314 <HAL_SD_GetCardState>
 80094b2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b06      	cmp	r3, #6
 80094c6:	d002      	beq.n	80094ce <SD_DMATxAbort+0x3a>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	d10a      	bne.n	80094e4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 f86a 	bl	800b5ac <SDMMC_CmdStopTransfer>
 80094d8:	4602      	mov	r2, r0
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	431a      	orrs	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d103      	bne.n	80094f4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f004 feb3 	bl	800e258 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80094f2:	e002      	b.n	80094fa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff fd33 	bl	8008f60 <HAL_SD_ErrorCallback>
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f240 523a 	movw	r2, #1338	; 0x53a
 8009518:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fefa 	bl	8009314 <HAL_SD_GetCardState>
 8009520:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b06      	cmp	r3, #6
 8009534:	d002      	beq.n	800953c <SD_DMARxAbort+0x3a>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b05      	cmp	r3, #5
 800953a:	d10a      	bne.n	8009552 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f002 f833 	bl	800b5ac <SDMMC_CmdStopTransfer>
 8009546:	4602      	mov	r2, r0
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	431a      	orrs	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	2b00      	cmp	r3, #0
 8009558:	d103      	bne.n	8009562 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f004 fe7c 	bl	800e258 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009560:	e002      	b.n	8009568 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f7ff fcfc 	bl	8008f60 <HAL_SD_ErrorCallback>
}
 8009568:	bf00      	nop
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009570:	b5b0      	push	{r4, r5, r7, lr}
 8009572:	b094      	sub	sp, #80	; 0x50
 8009574:	af04      	add	r7, sp, #16
 8009576:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009578:	2301      	movs	r3, #1
 800957a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fee5 	bl	800b350 <SDMMC_GetPowerState>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800958c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009590:	e0b8      	b.n	8009704 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009596:	2b03      	cmp	r3, #3
 8009598:	d02f      	beq.n	80095fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 f8cc 	bl	800b73c <SDMMC_CmdSendCID>
 80095a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80095ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ae:	e0a9      	b.n	8009704 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 ff0f 	bl	800b3da <SDMMC_GetResponse>
 80095bc:	4602      	mov	r2, r0
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2104      	movs	r1, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 ff06 	bl	800b3da <SDMMC_GetResponse>
 80095ce:	4602      	mov	r2, r0
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2108      	movs	r1, #8
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 fefd 	bl	800b3da <SDMMC_GetResponse>
 80095e0:	4602      	mov	r2, r0
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	210c      	movs	r1, #12
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fef4 	bl	800b3da <SDMMC_GetResponse>
 80095f2:	4602      	mov	r2, r0
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d00d      	beq.n	800961e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f107 020e 	add.w	r2, r7, #14
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f002 f8d2 	bl	800b7b6 <SDMMC_CmdSetRelAdd>
 8009612:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <SD_InitCard+0xae>
    {
      return errorstate;
 800961a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961c:	e072      	b.n	8009704 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	2b03      	cmp	r3, #3
 8009624:	d036      	beq.n	8009694 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009626:	89fb      	ldrh	r3, [r7, #14]
 8009628:	461a      	mov	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f002 f89c 	bl	800b778 <SDMMC_CmdSendCSD>
 8009640:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964a:	e05b      	b.n	8009704 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f001 fec1 	bl	800b3da <SDMMC_GetResponse>
 8009658:	4602      	mov	r2, r0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2104      	movs	r1, #4
 8009664:	4618      	mov	r0, r3
 8009666:	f001 feb8 	bl	800b3da <SDMMC_GetResponse>
 800966a:	4602      	mov	r2, r0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2108      	movs	r1, #8
 8009676:	4618      	mov	r0, r3
 8009678:	f001 feaf 	bl	800b3da <SDMMC_GetResponse>
 800967c:	4602      	mov	r2, r0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	210c      	movs	r1, #12
 8009688:	4618      	mov	r0, r3
 800968a:	f001 fea6 	bl	800b3da <SDMMC_GetResponse>
 800968e:	4602      	mov	r2, r0
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2104      	movs	r1, #4
 800969a:	4618      	mov	r0, r3
 800969c:	f001 fe9d 	bl	800b3da <SDMMC_GetResponse>
 80096a0:	4603      	mov	r3, r0
 80096a2:	0d1a      	lsrs	r2, r3, #20
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fc60 	bl	8008f74 <HAL_SD_GetCardCSD>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096be:	e021      	b.n	8009704 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c8:	041b      	lsls	r3, r3, #16
 80096ca:	2200      	movs	r2, #0
 80096cc:	461c      	mov	r4, r3
 80096ce:	4615      	mov	r5, r2
 80096d0:	4622      	mov	r2, r4
 80096d2:	462b      	mov	r3, r5
 80096d4:	4608      	mov	r0, r1
 80096d6:	f001 ff8b 	bl	800b5f0 <SDMMC_CmdSelDesel>
 80096da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80096dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	e00e      	b.n	8009704 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681d      	ldr	r5, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	466c      	mov	r4, sp
 80096ee:	f103 0210 	add.w	r2, r3, #16
 80096f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80096f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096f8:	3304      	adds	r3, #4
 80096fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096fc:	4628      	mov	r0, r5
 80096fe:	f001 fdcf 	bl	800b2a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3740      	adds	r7, #64	; 0x40
 8009708:	46bd      	mov	sp, r7
 800970a:	bdb0      	pop	{r4, r5, r7, pc}

0800970c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	2300      	movs	r3, #0
 800971e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f001 ff86 	bl	800b636 <SDMMC_CmdGoIdleState>
 800972a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	e072      	b.n	800981c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f001 ff99 	bl	800b672 <SDMMC_CmdOperCond>
 8009740:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00d      	beq.n	8009764 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f001 ff6f 	bl	800b636 <SDMMC_CmdGoIdleState>
 8009758:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	e05b      	b.n	800981c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800976e:	2b01      	cmp	r3, #1
 8009770:	d137      	bne.n	80097e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2100      	movs	r1, #0
 8009778:	4618      	mov	r0, r3
 800977a:	f001 ff99 	bl	800b6b0 <SDMMC_CmdAppCommand>
 800977e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d02d      	beq.n	80097e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800978a:	e047      	b.n	800981c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f001 ff8c 	bl	800b6b0 <SDMMC_CmdAppCommand>
 8009798:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	e03b      	b.n	800981c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	491e      	ldr	r1, [pc, #120]	; (8009824 <SD_PowerON+0x118>)
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 ffa2 	bl	800b6f4 <SDMMC_CmdAppOperCommand>
 80097b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097bc:	e02e      	b.n	800981c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 fe08 	bl	800b3da <SDMMC_GetResponse>
 80097ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	0fdb      	lsrs	r3, r3, #31
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d101      	bne.n	80097d8 <SD_PowerON+0xcc>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <SD_PowerON+0xce>
 80097d8:	2300      	movs	r3, #0
 80097da:	613b      	str	r3, [r7, #16]

    count++;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	3301      	adds	r3, #1
 80097e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d802      	bhi.n	80097f2 <SD_PowerON+0xe6>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0cc      	beq.n	800978c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d902      	bls.n	8009802 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80097fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009800:	e00c      	b.n	800981c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	645a      	str	r2, [r3, #68]	; 0x44
 8009812:	e002      	b.n	800981a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	c1100000 	.word	0xc1100000

08009828 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800983c:	e018      	b.n	8009870 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009846:	041b      	lsls	r3, r3, #16
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f001 ffd4 	bl	800b7f8 <SDMMC_CmdSendStatus>
 8009850:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	e009      	b.n	8009870 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fdb9 	bl	800b3da <SDMMC_GetResponse>
 8009868:	4602      	mov	r2, r0
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d03f      	beq.n	8009912 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	e033      	b.n	8009900 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4618      	mov	r0, r3
 800989e:	f001 fd2b 	bl	800b2f8 <SDMMC_ReadFIFO>
 80098a2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	0a1b      	lsrs	r3, r3, #8
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3301      	adds	r3, #1
 80098c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	0e1b      	lsrs	r3, r3, #24
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	3301      	adds	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b07      	cmp	r3, #7
 8009904:	d9c8      	bls.n	8009898 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009912:	bf00      	nop
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d043      	beq.n	80099bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e037      	b.n	80099aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3301      	adds	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3b01      	subs	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	021a      	lsls	r2, r3, #8
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4313      	orrs	r3, r2
 8009956:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	3b01      	subs	r3, #1
 8009962:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	041a      	lsls	r2, r3, #16
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4313      	orrs	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3b01      	subs	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	061a      	lsls	r2, r3, #24
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	4313      	orrs	r3, r2
 8009986:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3b01      	subs	r3, #1
 8009992:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f107 0208 	add.w	r2, r7, #8
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 fcb7 	bl	800b312 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	3301      	adds	r3, #1
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b07      	cmp	r3, #7
 80099ae:	d9c4      	bls.n	800993a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80099bc:	bf00      	nop
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e038      	b.n	8009a4c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d106      	bne.n	80099f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7f9 fad0 	bl	8002f94 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3308      	adds	r3, #8
 80099fc:	4619      	mov	r1, r3
 80099fe:	4610      	mov	r0, r2
 8009a00:	f001 fb36 	bl	800b070 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	f001 fbbe 	bl	800b190 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6858      	ldr	r0, [r3, #4]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	f001 fc05 	bl	800b230 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	6892      	ldr	r2, [r2, #8]
 8009a2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	6892      	ldr	r2, [r2, #8]
 8009a3a:	f041 0101 	orr.w	r1, r1, #1
 8009a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e049      	b.n	8009afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7f9 f952 	bl	8002d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4619      	mov	r1, r3
 8009a92:	4610      	mov	r0, r2
 8009a94:	f000 fa74 	bl	8009f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e049      	b.n	8009ba8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f841 	bl	8009bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2202      	movs	r2, #2
 8009b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f000 fa1d 	bl	8009f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d101      	bne.n	8009be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009bde:	2302      	movs	r3, #2
 8009be0:	e0ff      	b.n	8009de2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b14      	cmp	r3, #20
 8009bee:	f200 80f0 	bhi.w	8009dd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009dd3 	.word	0x08009dd3
 8009c00:	08009dd3 	.word	0x08009dd3
 8009c04:	08009dd3 	.word	0x08009dd3
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009dd3 	.word	0x08009dd3
 8009c10:	08009dd3 	.word	0x08009dd3
 8009c14:	08009dd3 	.word	0x08009dd3
 8009c18:	08009ccf 	.word	0x08009ccf
 8009c1c:	08009dd3 	.word	0x08009dd3
 8009c20:	08009dd3 	.word	0x08009dd3
 8009c24:	08009dd3 	.word	0x08009dd3
 8009c28:	08009d0f 	.word	0x08009d0f
 8009c2c:	08009dd3 	.word	0x08009dd3
 8009c30:	08009dd3 	.word	0x08009dd3
 8009c34:	08009dd3 	.word	0x08009dd3
 8009c38:	08009d51 	.word	0x08009d51
 8009c3c:	08009dd3 	.word	0x08009dd3
 8009c40:	08009dd3 	.word	0x08009dd3
 8009c44:	08009dd3 	.word	0x08009dd3
 8009c48:	08009d91 	.word	0x08009d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fa34 	bl	800a0c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 0208 	orr.w	r2, r2, #8
 8009c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699a      	ldr	r2, [r3, #24]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0204 	bic.w	r2, r2, #4
 8009c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6999      	ldr	r1, [r3, #24]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	619a      	str	r2, [r3, #24]
      break;
 8009c8a:	e0a5      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 fa86 	bl	800a1a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	699a      	ldr	r2, [r3, #24]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6999      	ldr	r1, [r3, #24]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	021a      	lsls	r2, r3, #8
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	619a      	str	r2, [r3, #24]
      break;
 8009ccc:	e084      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fadd 	bl	800a294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69da      	ldr	r2, [r3, #28]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 0208 	orr.w	r2, r2, #8
 8009ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69da      	ldr	r2, [r3, #28]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0204 	bic.w	r2, r2, #4
 8009cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69d9      	ldr	r1, [r3, #28]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	691a      	ldr	r2, [r3, #16]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	61da      	str	r2, [r3, #28]
      break;
 8009d0c:	e064      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 fb33 	bl	800a380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69da      	ldr	r2, [r3, #28]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69da      	ldr	r2, [r3, #28]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69d9      	ldr	r1, [r3, #28]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	021a      	lsls	r2, r3, #8
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	61da      	str	r2, [r3, #28]
      break;
 8009d4e:	e043      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fb6a 	bl	800a430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0208 	orr.w	r2, r2, #8
 8009d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0204 	bic.w	r2, r2, #4
 8009d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	691a      	ldr	r2, [r3, #16]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d8e:	e023      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fb9c 	bl	800a4d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	021a      	lsls	r2, r3, #8
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009dd0:	e002      	b.n	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop

08009dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_TIM_ConfigClockSource+0x1c>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e0b4      	b.n	8009f72 <HAL_TIM_ConfigClockSource+0x186>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	4b56      	ldr	r3, [pc, #344]	; (8009f7c <HAL_TIM_ConfigClockSource+0x190>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e40:	d03e      	beq.n	8009ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8009e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e46:	f200 8087 	bhi.w	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4e:	f000 8086 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x172>
 8009e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e56:	d87f      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e58:	2b70      	cmp	r3, #112	; 0x70
 8009e5a:	d01a      	beq.n	8009e92 <HAL_TIM_ConfigClockSource+0xa6>
 8009e5c:	2b70      	cmp	r3, #112	; 0x70
 8009e5e:	d87b      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e60:	2b60      	cmp	r3, #96	; 0x60
 8009e62:	d050      	beq.n	8009f06 <HAL_TIM_ConfigClockSource+0x11a>
 8009e64:	2b60      	cmp	r3, #96	; 0x60
 8009e66:	d877      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e68:	2b50      	cmp	r3, #80	; 0x50
 8009e6a:	d03c      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8009e6c:	2b50      	cmp	r3, #80	; 0x50
 8009e6e:	d873      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d058      	beq.n	8009f26 <HAL_TIM_ConfigClockSource+0x13a>
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d86f      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e78:	2b30      	cmp	r3, #48	; 0x30
 8009e7a:	d064      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e7c:	2b30      	cmp	r3, #48	; 0x30
 8009e7e:	d86b      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d060      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	d867      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d05c      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e8c:	2b10      	cmp	r3, #16
 8009e8e:	d05a      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e90:	e062      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	6899      	ldr	r1, [r3, #8]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f000 fbe5 	bl	800a670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	609a      	str	r2, [r3, #8]
      break;
 8009ebe:	e04f      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	6899      	ldr	r1, [r3, #8]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f000 fbce 	bl	800a670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ee2:	609a      	str	r2, [r3, #8]
      break;
 8009ee4:	e03c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	6859      	ldr	r1, [r3, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f000 fb42 	bl	800a57c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2150      	movs	r1, #80	; 0x50
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fb9b 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009f04:	e02c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	6859      	ldr	r1, [r3, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f000 fb61 	bl	800a5da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2160      	movs	r1, #96	; 0x60
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 fb8b 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009f24:	e01c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6859      	ldr	r1, [r3, #4]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f000 fb22 	bl	800a57c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2140      	movs	r1, #64	; 0x40
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fb7b 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009f44:	e00c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f000 fb72 	bl	800a63a <TIM_ITRx_SetConfig>
      break;
 8009f56:	e003      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	fffeff88 	.word	0xfffeff88

08009f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a40      	ldr	r2, [pc, #256]	; (800a094 <TIM_Base_SetConfig+0x114>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d013      	beq.n	8009fc0 <TIM_Base_SetConfig+0x40>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9e:	d00f      	beq.n	8009fc0 <TIM_Base_SetConfig+0x40>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a3d      	ldr	r2, [pc, #244]	; (800a098 <TIM_Base_SetConfig+0x118>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00b      	beq.n	8009fc0 <TIM_Base_SetConfig+0x40>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a3c      	ldr	r2, [pc, #240]	; (800a09c <TIM_Base_SetConfig+0x11c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d007      	beq.n	8009fc0 <TIM_Base_SetConfig+0x40>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a3b      	ldr	r2, [pc, #236]	; (800a0a0 <TIM_Base_SetConfig+0x120>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d003      	beq.n	8009fc0 <TIM_Base_SetConfig+0x40>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a3a      	ldr	r2, [pc, #232]	; (800a0a4 <TIM_Base_SetConfig+0x124>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d108      	bne.n	8009fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a2f      	ldr	r2, [pc, #188]	; (800a094 <TIM_Base_SetConfig+0x114>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d02b      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe0:	d027      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2c      	ldr	r2, [pc, #176]	; (800a098 <TIM_Base_SetConfig+0x118>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d023      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a2b      	ldr	r2, [pc, #172]	; (800a09c <TIM_Base_SetConfig+0x11c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d01f      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a2a      	ldr	r2, [pc, #168]	; (800a0a0 <TIM_Base_SetConfig+0x120>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d01b      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a29      	ldr	r2, [pc, #164]	; (800a0a4 <TIM_Base_SetConfig+0x124>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d017      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a28      	ldr	r2, [pc, #160]	; (800a0a8 <TIM_Base_SetConfig+0x128>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d013      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a27      	ldr	r2, [pc, #156]	; (800a0ac <TIM_Base_SetConfig+0x12c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d00f      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a26      	ldr	r2, [pc, #152]	; (800a0b0 <TIM_Base_SetConfig+0x130>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00b      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a25      	ldr	r2, [pc, #148]	; (800a0b4 <TIM_Base_SetConfig+0x134>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d007      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a24      	ldr	r2, [pc, #144]	; (800a0b8 <TIM_Base_SetConfig+0x138>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d003      	beq.n	800a032 <TIM_Base_SetConfig+0xb2>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a23      	ldr	r2, [pc, #140]	; (800a0bc <TIM_Base_SetConfig+0x13c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d108      	bne.n	800a044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a0a      	ldr	r2, [pc, #40]	; (800a094 <TIM_Base_SetConfig+0x114>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d003      	beq.n	800a078 <TIM_Base_SetConfig+0xf8>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a0c      	ldr	r2, [pc, #48]	; (800a0a4 <TIM_Base_SetConfig+0x124>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d103      	bne.n	800a080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	691a      	ldr	r2, [r3, #16]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	615a      	str	r2, [r3, #20]
}
 800a086:	bf00      	nop
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40010000 	.word	0x40010000
 800a098:	40000400 	.word	0x40000400
 800a09c:	40000800 	.word	0x40000800
 800a0a0:	40000c00 	.word	0x40000c00
 800a0a4:	40010400 	.word	0x40010400
 800a0a8:	40014000 	.word	0x40014000
 800a0ac:	40014400 	.word	0x40014400
 800a0b0:	40014800 	.word	0x40014800
 800a0b4:	40001800 	.word	0x40001800
 800a0b8:	40001c00 	.word	0x40001c00
 800a0bc:	40002000 	.word	0x40002000

0800a0c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	f023 0201 	bic.w	r2, r3, #1
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4b2b      	ldr	r3, [pc, #172]	; (800a198 <TIM_OC1_SetConfig+0xd8>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 0303 	bic.w	r3, r3, #3
 800a0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f023 0302 	bic.w	r3, r3, #2
 800a108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	4313      	orrs	r3, r2
 800a112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a21      	ldr	r2, [pc, #132]	; (800a19c <TIM_OC1_SetConfig+0xdc>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d003      	beq.n	800a124 <TIM_OC1_SetConfig+0x64>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a20      	ldr	r2, [pc, #128]	; (800a1a0 <TIM_OC1_SetConfig+0xe0>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d10c      	bne.n	800a13e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f023 0308 	bic.w	r3, r3, #8
 800a12a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	4313      	orrs	r3, r2
 800a134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f023 0304 	bic.w	r3, r3, #4
 800a13c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a16      	ldr	r2, [pc, #88]	; (800a19c <TIM_OC1_SetConfig+0xdc>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d003      	beq.n	800a14e <TIM_OC1_SetConfig+0x8e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <TIM_OC1_SetConfig+0xe0>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d111      	bne.n	800a172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a15c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	4313      	orrs	r3, r2
 800a166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	4313      	orrs	r3, r2
 800a170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	621a      	str	r2, [r3, #32]
}
 800a18c:	bf00      	nop
 800a18e:	371c      	adds	r7, #28
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	fffeff8f 	.word	0xfffeff8f
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40010400 	.word	0x40010400

0800a1a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	f023 0210 	bic.w	r2, r3, #16
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4b2e      	ldr	r3, [pc, #184]	; (800a288 <TIM_OC2_SetConfig+0xe4>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	021b      	lsls	r3, r3, #8
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f023 0320 	bic.w	r3, r3, #32
 800a1ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a23      	ldr	r2, [pc, #140]	; (800a28c <TIM_OC2_SetConfig+0xe8>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d003      	beq.n	800a20c <TIM_OC2_SetConfig+0x68>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a22      	ldr	r2, [pc, #136]	; (800a290 <TIM_OC2_SetConfig+0xec>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d10d      	bne.n	800a228 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a18      	ldr	r2, [pc, #96]	; (800a28c <TIM_OC2_SetConfig+0xe8>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_OC2_SetConfig+0x94>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a17      	ldr	r2, [pc, #92]	; (800a290 <TIM_OC2_SetConfig+0xec>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d113      	bne.n	800a260 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a23e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	621a      	str	r2, [r3, #32]
}
 800a27a:	bf00      	nop
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	feff8fff 	.word	0xfeff8fff
 800a28c:	40010000 	.word	0x40010000
 800a290:	40010400 	.word	0x40010400

0800a294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4b2d      	ldr	r3, [pc, #180]	; (800a374 <TIM_OC3_SetConfig+0xe0>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0303 	bic.w	r3, r3, #3
 800a2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	021b      	lsls	r3, r3, #8
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a22      	ldr	r2, [pc, #136]	; (800a378 <TIM_OC3_SetConfig+0xe4>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d003      	beq.n	800a2fa <TIM_OC3_SetConfig+0x66>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a21      	ldr	r2, [pc, #132]	; (800a37c <TIM_OC3_SetConfig+0xe8>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d10d      	bne.n	800a316 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	021b      	lsls	r3, r3, #8
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a17      	ldr	r2, [pc, #92]	; (800a378 <TIM_OC3_SetConfig+0xe4>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d003      	beq.n	800a326 <TIM_OC3_SetConfig+0x92>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a16      	ldr	r2, [pc, #88]	; (800a37c <TIM_OC3_SetConfig+0xe8>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d113      	bne.n	800a34e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a32c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	4313      	orrs	r3, r2
 800a340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	621a      	str	r2, [r3, #32]
}
 800a368:	bf00      	nop
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	fffeff8f 	.word	0xfffeff8f
 800a378:	40010000 	.word	0x40010000
 800a37c:	40010400 	.word	0x40010400

0800a380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <TIM_OC4_SetConfig+0xa4>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	031b      	lsls	r3, r3, #12
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a13      	ldr	r2, [pc, #76]	; (800a428 <TIM_OC4_SetConfig+0xa8>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_OC4_SetConfig+0x68>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a12      	ldr	r2, [pc, #72]	; (800a42c <TIM_OC4_SetConfig+0xac>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d109      	bne.n	800a3fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	019b      	lsls	r3, r3, #6
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	621a      	str	r2, [r3, #32]
}
 800a416:	bf00      	nop
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	feff8fff 	.word	0xfeff8fff
 800a428:	40010000 	.word	0x40010000
 800a42c:	40010400 	.word	0x40010400

0800a430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4b1b      	ldr	r3, [pc, #108]	; (800a4c8 <TIM_OC5_SetConfig+0x98>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	041b      	lsls	r3, r3, #16
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a12      	ldr	r2, [pc, #72]	; (800a4cc <TIM_OC5_SetConfig+0x9c>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d003      	beq.n	800a48e <TIM_OC5_SetConfig+0x5e>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a11      	ldr	r2, [pc, #68]	; (800a4d0 <TIM_OC5_SetConfig+0xa0>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d109      	bne.n	800a4a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a494:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	621a      	str	r2, [r3, #32]
}
 800a4bc:	bf00      	nop
 800a4be:	371c      	adds	r7, #28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	fffeff8f 	.word	0xfffeff8f
 800a4cc:	40010000 	.word	0x40010000
 800a4d0:	40010400 	.word	0x40010400

0800a4d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	; (800a570 <TIM_OC6_SetConfig+0x9c>)
 800a500:	4013      	ands	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	021b      	lsls	r3, r3, #8
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	051b      	lsls	r3, r3, #20
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	4313      	orrs	r3, r2
 800a522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a13      	ldr	r2, [pc, #76]	; (800a574 <TIM_OC6_SetConfig+0xa0>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_OC6_SetConfig+0x60>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a12      	ldr	r2, [pc, #72]	; (800a578 <TIM_OC6_SetConfig+0xa4>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d109      	bne.n	800a548 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a53a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	029b      	lsls	r3, r3, #10
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	621a      	str	r2, [r3, #32]
}
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	feff8fff 	.word	0xfeff8fff
 800a574:	40010000 	.word	0x40010000
 800a578:	40010400 	.word	0x40010400

0800a57c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f023 0201 	bic.w	r2, r3, #1
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f023 030a 	bic.w	r3, r3, #10
 800a5b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b087      	sub	sp, #28
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	f023 0210 	bic.w	r2, r3, #16
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	031b      	lsls	r3, r3, #12
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	4313      	orrs	r3, r2
 800a620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	621a      	str	r2, [r3, #32]
}
 800a62e:	bf00      	nop
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	f043 0307 	orr.w	r3, r3, #7
 800a65c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	609a      	str	r2, [r3, #8]
}
 800a664:	bf00      	nop
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a68a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	021a      	lsls	r2, r3, #8
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	431a      	orrs	r2, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	4313      	orrs	r3, r2
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	609a      	str	r2, [r3, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	371c      	adds	r7, #28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e06d      	b.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a30      	ldr	r2, [pc, #192]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d004      	beq.n	800a6fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d108      	bne.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a714:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a20      	ldr	r2, [pc, #128]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d022      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a73a:	d01d      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a1d      	ldr	r2, [pc, #116]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d018      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a1c      	ldr	r2, [pc, #112]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a1a      	ldr	r2, [pc, #104]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00e      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a15      	ldr	r2, [pc, #84]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d009      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a16      	ldr	r2, [pc, #88]	; (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d004      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d10c      	bne.n	800a792 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a77e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	4313      	orrs	r3, r2
 800a788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	40010000 	.word	0x40010000
 800a7b4:	40010400 	.word	0x40010400
 800a7b8:	40000400 	.word	0x40000400
 800a7bc:	40000800 	.word	0x40000800
 800a7c0:	40000c00 	.word	0x40000c00
 800a7c4:	40014000 	.word	0x40014000
 800a7c8:	40001800 	.word	0x40001800

0800a7cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e040      	b.n	800a860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7f8 fb04 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2224      	movs	r2, #36	; 0x24
 800a7f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0201 	bic.w	r2, r2, #1
 800a808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f82c 	bl	800a868 <UART_SetConfig>
 800a810:	4603      	mov	r3, r0
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e022      	b.n	800a860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa84 	bl	800ad30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0201 	orr.w	r2, r2, #1
 800a856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fb0b 	bl	800ae74 <UART_CheckIdleState>
 800a85e:	4603      	mov	r3, r0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a870:	2300      	movs	r3, #0
 800a872:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	431a      	orrs	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	431a      	orrs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	4313      	orrs	r3, r2
 800a88a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4ba6      	ldr	r3, [pc, #664]	; (800ab2c <UART_SetConfig+0x2c4>)
 800a894:	4013      	ands	r3, r2
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6812      	ldr	r2, [r2, #0]
 800a89a:	6979      	ldr	r1, [r7, #20]
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a94      	ldr	r2, [pc, #592]	; (800ab30 <UART_SetConfig+0x2c8>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d120      	bne.n	800a926 <UART_SetConfig+0xbe>
 800a8e4:	4b93      	ldr	r3, [pc, #588]	; (800ab34 <UART_SetConfig+0x2cc>)
 800a8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d816      	bhi.n	800a920 <UART_SetConfig+0xb8>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <UART_SetConfig+0x90>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a915 	.word	0x0800a915
 800a900:	0800a90f 	.word	0x0800a90f
 800a904:	0800a91b 	.word	0x0800a91b
 800a908:	2301      	movs	r3, #1
 800a90a:	77fb      	strb	r3, [r7, #31]
 800a90c:	e150      	b.n	800abb0 <UART_SetConfig+0x348>
 800a90e:	2302      	movs	r3, #2
 800a910:	77fb      	strb	r3, [r7, #31]
 800a912:	e14d      	b.n	800abb0 <UART_SetConfig+0x348>
 800a914:	2304      	movs	r3, #4
 800a916:	77fb      	strb	r3, [r7, #31]
 800a918:	e14a      	b.n	800abb0 <UART_SetConfig+0x348>
 800a91a:	2308      	movs	r3, #8
 800a91c:	77fb      	strb	r3, [r7, #31]
 800a91e:	e147      	b.n	800abb0 <UART_SetConfig+0x348>
 800a920:	2310      	movs	r3, #16
 800a922:	77fb      	strb	r3, [r7, #31]
 800a924:	e144      	b.n	800abb0 <UART_SetConfig+0x348>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a83      	ldr	r2, [pc, #524]	; (800ab38 <UART_SetConfig+0x2d0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d132      	bne.n	800a996 <UART_SetConfig+0x12e>
 800a930:	4b80      	ldr	r3, [pc, #512]	; (800ab34 <UART_SetConfig+0x2cc>)
 800a932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a936:	f003 030c 	and.w	r3, r3, #12
 800a93a:	2b0c      	cmp	r3, #12
 800a93c:	d828      	bhi.n	800a990 <UART_SetConfig+0x128>
 800a93e:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <UART_SetConfig+0xdc>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a979 	.word	0x0800a979
 800a948:	0800a991 	.word	0x0800a991
 800a94c:	0800a991 	.word	0x0800a991
 800a950:	0800a991 	.word	0x0800a991
 800a954:	0800a985 	.word	0x0800a985
 800a958:	0800a991 	.word	0x0800a991
 800a95c:	0800a991 	.word	0x0800a991
 800a960:	0800a991 	.word	0x0800a991
 800a964:	0800a97f 	.word	0x0800a97f
 800a968:	0800a991 	.word	0x0800a991
 800a96c:	0800a991 	.word	0x0800a991
 800a970:	0800a991 	.word	0x0800a991
 800a974:	0800a98b 	.word	0x0800a98b
 800a978:	2300      	movs	r3, #0
 800a97a:	77fb      	strb	r3, [r7, #31]
 800a97c:	e118      	b.n	800abb0 <UART_SetConfig+0x348>
 800a97e:	2302      	movs	r3, #2
 800a980:	77fb      	strb	r3, [r7, #31]
 800a982:	e115      	b.n	800abb0 <UART_SetConfig+0x348>
 800a984:	2304      	movs	r3, #4
 800a986:	77fb      	strb	r3, [r7, #31]
 800a988:	e112      	b.n	800abb0 <UART_SetConfig+0x348>
 800a98a:	2308      	movs	r3, #8
 800a98c:	77fb      	strb	r3, [r7, #31]
 800a98e:	e10f      	b.n	800abb0 <UART_SetConfig+0x348>
 800a990:	2310      	movs	r3, #16
 800a992:	77fb      	strb	r3, [r7, #31]
 800a994:	e10c      	b.n	800abb0 <UART_SetConfig+0x348>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a68      	ldr	r2, [pc, #416]	; (800ab3c <UART_SetConfig+0x2d4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d120      	bne.n	800a9e2 <UART_SetConfig+0x17a>
 800a9a0:	4b64      	ldr	r3, [pc, #400]	; (800ab34 <UART_SetConfig+0x2cc>)
 800a9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9aa:	2b30      	cmp	r3, #48	; 0x30
 800a9ac:	d013      	beq.n	800a9d6 <UART_SetConfig+0x16e>
 800a9ae:	2b30      	cmp	r3, #48	; 0x30
 800a9b0:	d814      	bhi.n	800a9dc <UART_SetConfig+0x174>
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	d009      	beq.n	800a9ca <UART_SetConfig+0x162>
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	d810      	bhi.n	800a9dc <UART_SetConfig+0x174>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <UART_SetConfig+0x15c>
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d006      	beq.n	800a9d0 <UART_SetConfig+0x168>
 800a9c2:	e00b      	b.n	800a9dc <UART_SetConfig+0x174>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	77fb      	strb	r3, [r7, #31]
 800a9c8:	e0f2      	b.n	800abb0 <UART_SetConfig+0x348>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	77fb      	strb	r3, [r7, #31]
 800a9ce:	e0ef      	b.n	800abb0 <UART_SetConfig+0x348>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	77fb      	strb	r3, [r7, #31]
 800a9d4:	e0ec      	b.n	800abb0 <UART_SetConfig+0x348>
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	77fb      	strb	r3, [r7, #31]
 800a9da:	e0e9      	b.n	800abb0 <UART_SetConfig+0x348>
 800a9dc:	2310      	movs	r3, #16
 800a9de:	77fb      	strb	r3, [r7, #31]
 800a9e0:	e0e6      	b.n	800abb0 <UART_SetConfig+0x348>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a56      	ldr	r2, [pc, #344]	; (800ab40 <UART_SetConfig+0x2d8>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d120      	bne.n	800aa2e <UART_SetConfig+0x1c6>
 800a9ec:	4b51      	ldr	r3, [pc, #324]	; (800ab34 <UART_SetConfig+0x2cc>)
 800a9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9f6:	2bc0      	cmp	r3, #192	; 0xc0
 800a9f8:	d013      	beq.n	800aa22 <UART_SetConfig+0x1ba>
 800a9fa:	2bc0      	cmp	r3, #192	; 0xc0
 800a9fc:	d814      	bhi.n	800aa28 <UART_SetConfig+0x1c0>
 800a9fe:	2b80      	cmp	r3, #128	; 0x80
 800aa00:	d009      	beq.n	800aa16 <UART_SetConfig+0x1ae>
 800aa02:	2b80      	cmp	r3, #128	; 0x80
 800aa04:	d810      	bhi.n	800aa28 <UART_SetConfig+0x1c0>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <UART_SetConfig+0x1a8>
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	d006      	beq.n	800aa1c <UART_SetConfig+0x1b4>
 800aa0e:	e00b      	b.n	800aa28 <UART_SetConfig+0x1c0>
 800aa10:	2300      	movs	r3, #0
 800aa12:	77fb      	strb	r3, [r7, #31]
 800aa14:	e0cc      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa16:	2302      	movs	r3, #2
 800aa18:	77fb      	strb	r3, [r7, #31]
 800aa1a:	e0c9      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	77fb      	strb	r3, [r7, #31]
 800aa20:	e0c6      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa22:	2308      	movs	r3, #8
 800aa24:	77fb      	strb	r3, [r7, #31]
 800aa26:	e0c3      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa28:	2310      	movs	r3, #16
 800aa2a:	77fb      	strb	r3, [r7, #31]
 800aa2c:	e0c0      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a44      	ldr	r2, [pc, #272]	; (800ab44 <UART_SetConfig+0x2dc>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d125      	bne.n	800aa84 <UART_SetConfig+0x21c>
 800aa38:	4b3e      	ldr	r3, [pc, #248]	; (800ab34 <UART_SetConfig+0x2cc>)
 800aa3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa46:	d017      	beq.n	800aa78 <UART_SetConfig+0x210>
 800aa48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa4c:	d817      	bhi.n	800aa7e <UART_SetConfig+0x216>
 800aa4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa52:	d00b      	beq.n	800aa6c <UART_SetConfig+0x204>
 800aa54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa58:	d811      	bhi.n	800aa7e <UART_SetConfig+0x216>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <UART_SetConfig+0x1fe>
 800aa5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa62:	d006      	beq.n	800aa72 <UART_SetConfig+0x20a>
 800aa64:	e00b      	b.n	800aa7e <UART_SetConfig+0x216>
 800aa66:	2300      	movs	r3, #0
 800aa68:	77fb      	strb	r3, [r7, #31]
 800aa6a:	e0a1      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	77fb      	strb	r3, [r7, #31]
 800aa70:	e09e      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa72:	2304      	movs	r3, #4
 800aa74:	77fb      	strb	r3, [r7, #31]
 800aa76:	e09b      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa78:	2308      	movs	r3, #8
 800aa7a:	77fb      	strb	r3, [r7, #31]
 800aa7c:	e098      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa7e:	2310      	movs	r3, #16
 800aa80:	77fb      	strb	r3, [r7, #31]
 800aa82:	e095      	b.n	800abb0 <UART_SetConfig+0x348>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a2f      	ldr	r2, [pc, #188]	; (800ab48 <UART_SetConfig+0x2e0>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d125      	bne.n	800aada <UART_SetConfig+0x272>
 800aa8e:	4b29      	ldr	r3, [pc, #164]	; (800ab34 <UART_SetConfig+0x2cc>)
 800aa90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa9c:	d017      	beq.n	800aace <UART_SetConfig+0x266>
 800aa9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaa2:	d817      	bhi.n	800aad4 <UART_SetConfig+0x26c>
 800aaa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaa8:	d00b      	beq.n	800aac2 <UART_SetConfig+0x25a>
 800aaaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaae:	d811      	bhi.n	800aad4 <UART_SetConfig+0x26c>
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <UART_SetConfig+0x254>
 800aab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aab8:	d006      	beq.n	800aac8 <UART_SetConfig+0x260>
 800aaba:	e00b      	b.n	800aad4 <UART_SetConfig+0x26c>
 800aabc:	2301      	movs	r3, #1
 800aabe:	77fb      	strb	r3, [r7, #31]
 800aac0:	e076      	b.n	800abb0 <UART_SetConfig+0x348>
 800aac2:	2302      	movs	r3, #2
 800aac4:	77fb      	strb	r3, [r7, #31]
 800aac6:	e073      	b.n	800abb0 <UART_SetConfig+0x348>
 800aac8:	2304      	movs	r3, #4
 800aaca:	77fb      	strb	r3, [r7, #31]
 800aacc:	e070      	b.n	800abb0 <UART_SetConfig+0x348>
 800aace:	2308      	movs	r3, #8
 800aad0:	77fb      	strb	r3, [r7, #31]
 800aad2:	e06d      	b.n	800abb0 <UART_SetConfig+0x348>
 800aad4:	2310      	movs	r3, #16
 800aad6:	77fb      	strb	r3, [r7, #31]
 800aad8:	e06a      	b.n	800abb0 <UART_SetConfig+0x348>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a1b      	ldr	r2, [pc, #108]	; (800ab4c <UART_SetConfig+0x2e4>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d138      	bne.n	800ab56 <UART_SetConfig+0x2ee>
 800aae4:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <UART_SetConfig+0x2cc>)
 800aae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aaee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaf2:	d017      	beq.n	800ab24 <UART_SetConfig+0x2bc>
 800aaf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaf8:	d82a      	bhi.n	800ab50 <UART_SetConfig+0x2e8>
 800aafa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aafe:	d00b      	beq.n	800ab18 <UART_SetConfig+0x2b0>
 800ab00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab04:	d824      	bhi.n	800ab50 <UART_SetConfig+0x2e8>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <UART_SetConfig+0x2aa>
 800ab0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0e:	d006      	beq.n	800ab1e <UART_SetConfig+0x2b6>
 800ab10:	e01e      	b.n	800ab50 <UART_SetConfig+0x2e8>
 800ab12:	2300      	movs	r3, #0
 800ab14:	77fb      	strb	r3, [r7, #31]
 800ab16:	e04b      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	77fb      	strb	r3, [r7, #31]
 800ab1c:	e048      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab1e:	2304      	movs	r3, #4
 800ab20:	77fb      	strb	r3, [r7, #31]
 800ab22:	e045      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab24:	2308      	movs	r3, #8
 800ab26:	77fb      	strb	r3, [r7, #31]
 800ab28:	e042      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab2a:	bf00      	nop
 800ab2c:	efff69f3 	.word	0xefff69f3
 800ab30:	40011000 	.word	0x40011000
 800ab34:	40023800 	.word	0x40023800
 800ab38:	40004400 	.word	0x40004400
 800ab3c:	40004800 	.word	0x40004800
 800ab40:	40004c00 	.word	0x40004c00
 800ab44:	40005000 	.word	0x40005000
 800ab48:	40011400 	.word	0x40011400
 800ab4c:	40007800 	.word	0x40007800
 800ab50:	2310      	movs	r3, #16
 800ab52:	77fb      	strb	r3, [r7, #31]
 800ab54:	e02c      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a72      	ldr	r2, [pc, #456]	; (800ad24 <UART_SetConfig+0x4bc>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d125      	bne.n	800abac <UART_SetConfig+0x344>
 800ab60:	4b71      	ldr	r3, [pc, #452]	; (800ad28 <UART_SetConfig+0x4c0>)
 800ab62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab6e:	d017      	beq.n	800aba0 <UART_SetConfig+0x338>
 800ab70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab74:	d817      	bhi.n	800aba6 <UART_SetConfig+0x33e>
 800ab76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab7a:	d00b      	beq.n	800ab94 <UART_SetConfig+0x32c>
 800ab7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab80:	d811      	bhi.n	800aba6 <UART_SetConfig+0x33e>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <UART_SetConfig+0x326>
 800ab86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab8a:	d006      	beq.n	800ab9a <UART_SetConfig+0x332>
 800ab8c:	e00b      	b.n	800aba6 <UART_SetConfig+0x33e>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	77fb      	strb	r3, [r7, #31]
 800ab92:	e00d      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab94:	2302      	movs	r3, #2
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e00a      	b.n	800abb0 <UART_SetConfig+0x348>
 800ab9a:	2304      	movs	r3, #4
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e007      	b.n	800abb0 <UART_SetConfig+0x348>
 800aba0:	2308      	movs	r3, #8
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e004      	b.n	800abb0 <UART_SetConfig+0x348>
 800aba6:	2310      	movs	r3, #16
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e001      	b.n	800abb0 <UART_SetConfig+0x348>
 800abac:	2310      	movs	r3, #16
 800abae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	69db      	ldr	r3, [r3, #28]
 800abb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb8:	d15b      	bne.n	800ac72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800abba:	7ffb      	ldrb	r3, [r7, #31]
 800abbc:	2b08      	cmp	r3, #8
 800abbe:	d828      	bhi.n	800ac12 <UART_SetConfig+0x3aa>
 800abc0:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <UART_SetConfig+0x360>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abed 	.word	0x0800abed
 800abcc:	0800abf5 	.word	0x0800abf5
 800abd0:	0800abfd 	.word	0x0800abfd
 800abd4:	0800ac13 	.word	0x0800ac13
 800abd8:	0800ac03 	.word	0x0800ac03
 800abdc:	0800ac13 	.word	0x0800ac13
 800abe0:	0800ac13 	.word	0x0800ac13
 800abe4:	0800ac13 	.word	0x0800ac13
 800abe8:	0800ac0b 	.word	0x0800ac0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abec:	f7fd f9e2 	bl	8007fb4 <HAL_RCC_GetPCLK1Freq>
 800abf0:	61b8      	str	r0, [r7, #24]
        break;
 800abf2:	e013      	b.n	800ac1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abf4:	f7fd f9f2 	bl	8007fdc <HAL_RCC_GetPCLK2Freq>
 800abf8:	61b8      	str	r0, [r7, #24]
        break;
 800abfa:	e00f      	b.n	800ac1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abfc:	4b4b      	ldr	r3, [pc, #300]	; (800ad2c <UART_SetConfig+0x4c4>)
 800abfe:	61bb      	str	r3, [r7, #24]
        break;
 800ac00:	e00c      	b.n	800ac1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac02:	f7fd f8c7 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 800ac06:	61b8      	str	r0, [r7, #24]
        break;
 800ac08:	e008      	b.n	800ac1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac0e:	61bb      	str	r3, [r7, #24]
        break;
 800ac10:	e004      	b.n	800ac1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	77bb      	strb	r3, [r7, #30]
        break;
 800ac1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d074      	beq.n	800ad0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	005a      	lsls	r2, r3, #1
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	441a      	add	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b0f      	cmp	r3, #15
 800ac3c:	d916      	bls.n	800ac6c <UART_SetConfig+0x404>
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac44:	d212      	bcs.n	800ac6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	f023 030f 	bic.w	r3, r3, #15
 800ac4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	085b      	lsrs	r3, r3, #1
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	89fb      	ldrh	r3, [r7, #14]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	89fa      	ldrh	r2, [r7, #14]
 800ac68:	60da      	str	r2, [r3, #12]
 800ac6a:	e04f      	b.n	800ad0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	77bb      	strb	r3, [r7, #30]
 800ac70:	e04c      	b.n	800ad0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac72:	7ffb      	ldrb	r3, [r7, #31]
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d828      	bhi.n	800acca <UART_SetConfig+0x462>
 800ac78:	a201      	add	r2, pc, #4	; (adr r2, 800ac80 <UART_SetConfig+0x418>)
 800ac7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7e:	bf00      	nop
 800ac80:	0800aca5 	.word	0x0800aca5
 800ac84:	0800acad 	.word	0x0800acad
 800ac88:	0800acb5 	.word	0x0800acb5
 800ac8c:	0800accb 	.word	0x0800accb
 800ac90:	0800acbb 	.word	0x0800acbb
 800ac94:	0800accb 	.word	0x0800accb
 800ac98:	0800accb 	.word	0x0800accb
 800ac9c:	0800accb 	.word	0x0800accb
 800aca0:	0800acc3 	.word	0x0800acc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aca4:	f7fd f986 	bl	8007fb4 <HAL_RCC_GetPCLK1Freq>
 800aca8:	61b8      	str	r0, [r7, #24]
        break;
 800acaa:	e013      	b.n	800acd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acac:	f7fd f996 	bl	8007fdc <HAL_RCC_GetPCLK2Freq>
 800acb0:	61b8      	str	r0, [r7, #24]
        break;
 800acb2:	e00f      	b.n	800acd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acb4:	4b1d      	ldr	r3, [pc, #116]	; (800ad2c <UART_SetConfig+0x4c4>)
 800acb6:	61bb      	str	r3, [r7, #24]
        break;
 800acb8:	e00c      	b.n	800acd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acba:	f7fd f86b 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 800acbe:	61b8      	str	r0, [r7, #24]
        break;
 800acc0:	e008      	b.n	800acd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acc6:	61bb      	str	r3, [r7, #24]
        break;
 800acc8:	e004      	b.n	800acd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	77bb      	strb	r3, [r7, #30]
        break;
 800acd2:	bf00      	nop
    }

    if (pclk != 0U)
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d018      	beq.n	800ad0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	085a      	lsrs	r2, r3, #1
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	441a      	add	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2b0f      	cmp	r3, #15
 800acf2:	d909      	bls.n	800ad08 <UART_SetConfig+0x4a0>
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acfa:	d205      	bcs.n	800ad08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60da      	str	r2, [r3, #12]
 800ad06:	e001      	b.n	800ad0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ad18:	7fbb      	ldrb	r3, [r7, #30]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3720      	adds	r7, #32
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40007c00 	.word	0x40007c00
 800ad28:	40023800 	.word	0x40023800
 800ad2c:	00f42400 	.word	0x00f42400

0800ad30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00a      	beq.n	800ad5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00a      	beq.n	800ad9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	430a      	orrs	r2, r1
 800adbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	f003 0310 	and.w	r3, r3, #16
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00a      	beq.n	800ade2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01a      	beq.n	800ae46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	430a      	orrs	r2, r1
 800ae24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae2e:	d10a      	bne.n	800ae46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00a      	beq.n	800ae68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	605a      	str	r2, [r3, #4]
  }
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af02      	add	r7, sp, #8
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae84:	f7f8 fa48 	bl	8003318 <HAL_GetTick>
 800ae88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b08      	cmp	r3, #8
 800ae96:	d10e      	bne.n	800aeb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f81b 	bl	800aee2 <UART_WaitOnFlagUntilTimeout>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e011      	b.n	800aeda <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b09c      	sub	sp, #112	; 0x70
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	603b      	str	r3, [r7, #0]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef2:	e0a7      	b.n	800b044 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	f000 80a3 	beq.w	800b044 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aefe:	f7f8 fa0b 	bl	8003318 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <UART_WaitOnFlagUntilTimeout+0x32>
 800af0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af10:	2b00      	cmp	r3, #0
 800af12:	d13f      	bne.n	800af94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af28:	667b      	str	r3, [r7, #100]	; 0x64
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e6      	bne.n	800af14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	663b      	str	r3, [r7, #96]	; 0x60
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3308      	adds	r3, #8
 800af64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af66:	64ba      	str	r2, [r7, #72]	; 0x48
 800af68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e5      	bne.n	800af46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2220      	movs	r2, #32
 800af7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2220      	movs	r2, #32
 800af84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e068      	b.n	800b066 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0304 	and.w	r3, r3, #4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d050      	beq.n	800b044 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afb0:	d148      	bne.n	800b044 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
 800afdc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e6      	bne.n	800afbc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	613b      	str	r3, [r7, #16]
   return(result);
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f023 0301 	bic.w	r3, r3, #1
 800b004:	66bb      	str	r3, [r7, #104]	; 0x68
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b00e:	623a      	str	r2, [r7, #32]
 800b010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	69f9      	ldr	r1, [r7, #28]
 800b014:	6a3a      	ldr	r2, [r7, #32]
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e5      	bne.n	800afee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2220      	movs	r2, #32
 800b026:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2220      	movs	r2, #32
 800b02c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2220      	movs	r2, #32
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e010      	b.n	800b066 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69da      	ldr	r2, [r3, #28]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	4013      	ands	r3, r2
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	429a      	cmp	r2, r3
 800b052:	bf0c      	ite	eq
 800b054:	2301      	moveq	r3, #1
 800b056:	2300      	movne	r3, #0
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	461a      	mov	r2, r3
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	429a      	cmp	r2, r3
 800b060:	f43f af48 	beq.w	800aef4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3770      	adds	r7, #112	; 0x70
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800b070:	b480      	push	{r7}
 800b072:	b087      	sub	sp, #28
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	6812      	ldr	r2, [r2, #0]
 800b088:	f023 0101 	bic.w	r1, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2b08      	cmp	r3, #8
 800b098:	d102      	bne.n	800b0a0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b09a:	2340      	movs	r3, #64	; 0x40
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	e001      	b.n	800b0a4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b0b0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b0b6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b0bc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b0c2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b0c8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b0ce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b0d4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b0da:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b0e0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800b108:	4b20      	ldr	r3, [pc, #128]	; (800b18c <FMC_NORSRAM_Init+0x11c>)
 800b10a:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b112:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b11a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b122:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	43db      	mvns	r3, r3
 800b132:	ea02 0103 	and.w	r1, r2, r3
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	4319      	orrs	r1, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b14c:	d10c      	bne.n	800b168 <FMC_NORSRAM_Init+0xf8>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d008      	beq.n	800b168 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b162:	431a      	orrs	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	371c      	adds	r7, #28
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	0008fb7f 	.word	0x0008fb7f

0800b190 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	011b      	lsls	r3, r3, #4
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	021b      	lsls	r3, r3, #8
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	051b      	lsls	r3, r3, #20
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	3b02      	subs	r3, #2
 800b1d6:	061b      	lsls	r3, r3, #24
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	3201      	adds	r2, #1
 800b1e4:	4319      	orrs	r1, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1f8:	d113      	bne.n	800b222 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b202:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	3b01      	subs	r3, #1
 800b20a:	051b      	lsls	r3, r3, #20
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	431a      	orrs	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b244:	d11d      	bne.n	800b282 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b24e:	4b13      	ldr	r3, [pc, #76]	; (800b29c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b250:	4013      	ands	r3, r2
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	6811      	ldr	r1, [r2, #0]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	6852      	ldr	r2, [r2, #4]
 800b25a:	0112      	lsls	r2, r2, #4
 800b25c:	4311      	orrs	r1, r2
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	6892      	ldr	r2, [r2, #8]
 800b262:	0212      	lsls	r2, r2, #8
 800b264:	4311      	orrs	r1, r2
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	6992      	ldr	r2, [r2, #24]
 800b26a:	4311      	orrs	r1, r2
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	68d2      	ldr	r2, [r2, #12]
 800b270:	0412      	lsls	r2, r2, #16
 800b272:	430a      	orrs	r2, r1
 800b274:	ea43 0102 	orr.w	r1, r3, r2
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b280:	e005      	b.n	800b28e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b28a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	cff00000 	.word	0xcff00000

0800b2a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	b480      	push	{r7}
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	f107 001c 	add.w	r0, r7, #28
 800b2ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b2b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b2ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b2be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b2c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b2c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b2ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <SDMMC_Init+0x54>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	b004      	add	sp, #16
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	ffff8100 	.word	0xffff8100

0800b2f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b306:	4618      	mov	r0, r3
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2203      	movs	r2, #3
 800b340:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0303 	and.w	r3, r3, #3
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b38a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b390:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b396:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <SDMMC_SendCommand+0x50>)
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	fffff000 	.word	0xfffff000

0800b3c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	b2db      	uxtb	r3, r3
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3314      	adds	r3, #20
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
}  
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b426:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b42c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b432:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	4313      	orrs	r3, r2
 800b438:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	431a      	orrs	r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0

}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b466:	2310      	movs	r3, #16
 800b468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b46a:	2340      	movs	r3, #64	; 0x40
 800b46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ff74 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b484:	f241 3288 	movw	r2, #5000	; 0x1388
 800b488:	2110      	movs	r1, #16
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9d6 	bl	800b83c <SDMMC_GetCmdResp1>
 800b490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b492:	69fb      	ldr	r3, [r7, #28]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3720      	adds	r7, #32
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b4aa:	2311      	movs	r3, #17
 800b4ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ae:	2340      	movs	r3, #64	; 0x40
 800b4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4bc:	f107 0308 	add.w	r3, r7, #8
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff ff52 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	2111      	movs	r1, #17
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f9b4 	bl	800b83c <SDMMC_GetCmdResp1>
 800b4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b4ee:	2312      	movs	r3, #18
 800b4f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4f2:	2340      	movs	r3, #64	; 0x40
 800b4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b500:	f107 0308 	add.w	r3, r7, #8
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff ff30 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b510:	2112      	movs	r1, #18
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f992 	bl	800b83c <SDMMC_GetCmdResp1>
 800b518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b51a:	69fb      	ldr	r3, [r7, #28]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3720      	adds	r7, #32
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b532:	2318      	movs	r3, #24
 800b534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b536:	2340      	movs	r3, #64	; 0x40
 800b538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b544:	f107 0308 	add.w	r3, r7, #8
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff0e 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b550:	f241 3288 	movw	r2, #5000	; 0x1388
 800b554:	2118      	movs	r1, #24
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f970 	bl	800b83c <SDMMC_GetCmdResp1>
 800b55c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b55e:	69fb      	ldr	r3, [r7, #28]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3720      	adds	r7, #32
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b576:	2319      	movs	r3, #25
 800b578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57a:	2340      	movs	r3, #64	; 0x40
 800b57c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b57e:	2300      	movs	r3, #0
 800b580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b586:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b588:	f107 0308 	add.w	r3, r7, #8
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff feec 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b594:	f241 3288 	movw	r2, #5000	; 0x1388
 800b598:	2119      	movs	r1, #25
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f94e 	bl	800b83c <SDMMC_GetCmdResp1>
 800b5a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b5b8:	230c      	movs	r3, #12
 800b5ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff fecb 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b5d6:	4a05      	ldr	r2, [pc, #20]	; (800b5ec <SDMMC_CmdStopTransfer+0x40>)
 800b5d8:	210c      	movs	r1, #12
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f92e 	bl	800b83c <SDMMC_GetCmdResp1>
 800b5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	05f5e100 	.word	0x05f5e100

0800b5f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b600:	2307      	movs	r3, #7
 800b602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b604:	2340      	movs	r3, #64	; 0x40
 800b606:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b608:	2300      	movs	r3, #0
 800b60a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b610:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b612:	f107 0310 	add.w	r3, r7, #16
 800b616:	4619      	mov	r1, r3
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7ff fea7 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b61e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b622:	2107      	movs	r1, #7
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 f909 	bl	800b83c <SDMMC_GetCmdResp1>
 800b62a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b088      	sub	sp, #32
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b646:	2300      	movs	r3, #0
 800b648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64a:	2300      	movs	r3, #0
 800b64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b64e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b654:	f107 0308 	add.w	r3, r7, #8
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fe86 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fb23 	bl	800bcac <SDMMC_GetCmdError>
 800b666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b668:	69fb      	ldr	r3, [r7, #28]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3720      	adds	r7, #32
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b088      	sub	sp, #32
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b67a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b680:	2308      	movs	r3, #8
 800b682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b684:	2340      	movs	r3, #64	; 0x40
 800b686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b690:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b692:	f107 0308 	add.w	r3, r7, #8
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff fe67 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fab6 	bl	800bc10 <SDMMC_GetCmdResp7>
 800b6a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6a6:	69fb      	ldr	r3, [r7, #28]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b6be:	2337      	movs	r3, #55	; 0x37
 800b6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6c2:	2340      	movs	r3, #64	; 0x40
 800b6c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6d0:	f107 0308 	add.w	r3, r7, #8
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff fe48 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e0:	2137      	movs	r1, #55	; 0x37
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f8aa 	bl	800b83c <SDMMC_GetCmdResp1>
 800b6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ea:	69fb      	ldr	r3, [r7, #28]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <SDMMC_CmdAppOperCommand+0x44>)
 800b702:	4313      	orrs	r3, r2
 800b704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b706:	2329      	movs	r3, #41	; 0x29
 800b708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b70a:	2340      	movs	r3, #64	; 0x40
 800b70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b718:	f107 0308 	add.w	r3, r7, #8
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff fe24 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f9bf 	bl	800baa8 <SDMMC_GetCmdResp3>
 800b72a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b72c:	69fb      	ldr	r3, [r7, #28]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	80100000 	.word	0x80100000

0800b73c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b748:	2302      	movs	r3, #2
 800b74a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b74c:	23c0      	movs	r3, #192	; 0xc0
 800b74e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b750:	2300      	movs	r3, #0
 800b752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b75a:	f107 0308 	add.w	r3, r7, #8
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff fe03 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f956 	bl	800ba18 <SDMMC_GetCmdResp2>
 800b76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b76e:	69fb      	ldr	r3, [r7, #28]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3720      	adds	r7, #32
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b786:	2309      	movs	r3, #9
 800b788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b78a:	23c0      	movs	r3, #192	; 0xc0
 800b78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b798:	f107 0308 	add.w	r3, r7, #8
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fde4 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f937 	bl	800ba18 <SDMMC_GetCmdResp2>
 800b7aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3720      	adds	r7, #32
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b088      	sub	sp, #32
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7c8:	2340      	movs	r3, #64	; 0x40
 800b7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d6:	f107 0308 	add.w	r3, r7, #8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff fdc5 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	2103      	movs	r1, #3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f99c 	bl	800bb24 <SDMMC_GetCmdResp6>
 800b7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ee:	69fb      	ldr	r3, [r7, #28]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3720      	adds	r7, #32
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b806:	230d      	movs	r3, #13
 800b808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b80a:	2340      	movs	r3, #64	; 0x40
 800b80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b818:	f107 0308 	add.w	r3, r7, #8
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff fda4 	bl	800b36c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b824:	f241 3288 	movw	r2, #5000	; 0x1388
 800b828:	210d      	movs	r1, #13
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f806 	bl	800b83c <SDMMC_GetCmdResp1>
 800b830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b832:	69fb      	ldr	r3, [r7, #28]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3720      	adds	r7, #32
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b088      	sub	sp, #32
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	460b      	mov	r3, r1
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b84a:	4b70      	ldr	r3, [pc, #448]	; (800ba0c <SDMMC_GetCmdResp1+0x1d0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a70      	ldr	r2, [pc, #448]	; (800ba10 <SDMMC_GetCmdResp1+0x1d4>)
 800b850:	fba2 2303 	umull	r2, r3, r2, r3
 800b854:	0a5a      	lsrs	r2, r3, #9
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	fb02 f303 	mul.w	r3, r2, r3
 800b85c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	1e5a      	subs	r2, r3, #1
 800b862:	61fa      	str	r2, [r7, #28]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d102      	bne.n	800b86e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b868:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b86c:	e0c9      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0ef      	beq.n	800b85e <SDMMC_GetCmdResp1+0x22>
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1ea      	bne.n	800b85e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d004      	beq.n	800b89e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2204      	movs	r2, #4
 800b898:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b89a:	2304      	movs	r3, #4
 800b89c:	e0b1      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d004      	beq.n	800b8b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e0a6      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	22c5      	movs	r2, #197	; 0xc5
 800b8b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff fd80 	bl	800b3c0 <SDMMC_GetCommandResponse>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	7afb      	ldrb	r3, [r7, #11]
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d001      	beq.n	800b8ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e099      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7ff fd82 	bl	800b3da <SDMMC_GetResponse>
 800b8d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	4b4e      	ldr	r3, [pc, #312]	; (800ba14 <SDMMC_GetCmdResp1+0x1d8>)
 800b8dc:	4013      	ands	r3, r2
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e08d      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	da02      	bge.n	800b8f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8f0:	e087      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8fc:	2340      	movs	r3, #64	; 0x40
 800b8fe:	e080      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b90a:	2380      	movs	r3, #128	; 0x80
 800b90c:	e079      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b91c:	e071      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b92c:	e069      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b93c:	e061      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b94c:	e059      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b95c:	e051      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b96c:	e049      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b97c:	e041      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b98c:	e039      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b99c:	e031      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9ac:	e029      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9bc:	e021      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9cc:	e019      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b9dc:	e011      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b9e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9ec:	e009      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f003 0308 	and.w	r3, r3, #8
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9fc:	e001      	b.n	800ba02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000000 	.word	0x20000000
 800ba10:	10624dd3 	.word	0x10624dd3
 800ba14:	fdffe008 	.word	0xfdffe008

0800ba18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba20:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <SDMMC_GetCmdResp2+0x88>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a1f      	ldr	r2, [pc, #124]	; (800baa4 <SDMMC_GetCmdResp2+0x8c>)
 800ba26:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2a:	0a5b      	lsrs	r3, r3, #9
 800ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba30:	fb02 f303 	mul.w	r3, r2, r3
 800ba34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	60fa      	str	r2, [r7, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba44:	e026      	b.n	800ba94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0ef      	beq.n	800ba36 <SDMMC_GetCmdResp2+0x1e>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1ea      	bne.n	800ba36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2204      	movs	r2, #4
 800ba70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba72:	2304      	movs	r3, #4
 800ba74:	e00e      	b.n	800ba94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d004      	beq.n	800ba8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e003      	b.n	800ba94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	22c5      	movs	r2, #197	; 0xc5
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	20000000 	.word	0x20000000
 800baa4:	10624dd3 	.word	0x10624dd3

0800baa8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab0:	4b1a      	ldr	r3, [pc, #104]	; (800bb1c <SDMMC_GetCmdResp3+0x74>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a1a      	ldr	r2, [pc, #104]	; (800bb20 <SDMMC_GetCmdResp3+0x78>)
 800bab6:	fba2 2303 	umull	r2, r3, r2, r3
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	fb02 f303 	mul.w	r3, r2, r3
 800bac4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1e5a      	subs	r2, r3, #1
 800baca:	60fa      	str	r2, [r7, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad4:	e01b      	b.n	800bb0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bada:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0ef      	beq.n	800bac6 <SDMMC_GetCmdResp3+0x1e>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1ea      	bne.n	800bac6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf4:	f003 0304 	and.w	r3, r3, #4
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d004      	beq.n	800bb06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2204      	movs	r2, #4
 800bb00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb02:	2304      	movs	r3, #4
 800bb04:	e003      	b.n	800bb0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	22c5      	movs	r2, #197	; 0xc5
 800bb0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	20000000 	.word	0x20000000
 800bb20:	10624dd3 	.word	0x10624dd3

0800bb24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb32:	4b35      	ldr	r3, [pc, #212]	; (800bc08 <SDMMC_GetCmdResp6+0xe4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a35      	ldr	r2, [pc, #212]	; (800bc0c <SDMMC_GetCmdResp6+0xe8>)
 800bb38:	fba2 2303 	umull	r2, r3, r2, r3
 800bb3c:	0a5b      	lsrs	r3, r3, #9
 800bb3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb42:	fb02 f303 	mul.w	r3, r2, r3
 800bb46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	1e5a      	subs	r2, r3, #1
 800bb4c:	61fa      	str	r2, [r7, #28]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d102      	bne.n	800bb58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb56:	e052      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d0ef      	beq.n	800bb48 <SDMMC_GetCmdResp6+0x24>
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1ea      	bne.n	800bb48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb76:	f003 0304 	and.w	r3, r3, #4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d004      	beq.n	800bb88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2204      	movs	r2, #4
 800bb82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb84:	2304      	movs	r3, #4
 800bb86:	e03a      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d004      	beq.n	800bb9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2201      	movs	r2, #1
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e02f      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff fc0e 	bl	800b3c0 <SDMMC_GetCommandResponse>
 800bba4:	4603      	mov	r3, r0
 800bba6:	461a      	mov	r2, r3
 800bba8:	7afb      	ldrb	r3, [r7, #11]
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d001      	beq.n	800bbb2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e025      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	22c5      	movs	r2, #197	; 0xc5
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbb8:	2100      	movs	r1, #0
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f7ff fc0d 	bl	800b3da <SDMMC_GetResponse>
 800bbc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	0c1b      	lsrs	r3, r3, #16
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e011      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbe8:	e009      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbf8:	e001      	b.n	800bbfe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20000000 	.word	0x20000000
 800bc0c:	10624dd3 	.word	0x10624dd3

0800bc10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc18:	4b22      	ldr	r3, [pc, #136]	; (800bca4 <SDMMC_GetCmdResp7+0x94>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a22      	ldr	r2, [pc, #136]	; (800bca8 <SDMMC_GetCmdResp7+0x98>)
 800bc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc22:	0a5b      	lsrs	r3, r3, #9
 800bc24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc28:	fb02 f303 	mul.w	r3, r2, r3
 800bc2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	1e5a      	subs	r2, r3, #1
 800bc32:	60fa      	str	r2, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc3c:	e02c      	b.n	800bc98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0ef      	beq.n	800bc2e <SDMMC_GetCmdResp7+0x1e>
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1ea      	bne.n	800bc2e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d004      	beq.n	800bc6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2204      	movs	r2, #4
 800bc68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc6a:	2304      	movs	r3, #4
 800bc6c:	e014      	b.n	800bc98 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e009      	b.n	800bc98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2240      	movs	r2, #64	; 0x40
 800bc94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc96:	2300      	movs	r3, #0
  
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	20000000 	.word	0x20000000
 800bca8:	10624dd3 	.word	0x10624dd3

0800bcac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcb4:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <SDMMC_GetCmdError+0x50>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a11      	ldr	r2, [pc, #68]	; (800bd00 <SDMMC_GetCmdError+0x54>)
 800bcba:	fba2 2303 	umull	r2, r3, r2, r3
 800bcbe:	0a5b      	lsrs	r3, r3, #9
 800bcc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcc4:	fb02 f303 	mul.w	r3, r2, r3
 800bcc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	1e5a      	subs	r2, r3, #1
 800bcce:	60fa      	str	r2, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcd8:	e009      	b.n	800bcee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f1      	beq.n	800bcca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	22c5      	movs	r2, #197	; 0xc5
 800bcea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20000000 	.word	0x20000000
 800bd00:	10624dd3 	.word	0x10624dd3

0800bd04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd04:	b084      	sub	sp, #16
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b084      	sub	sp, #16
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	f107 001c 	add.w	r0, r7, #28
 800bd12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d120      	bne.n	800bd5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	68da      	ldr	r2, [r3, #12]
 800bd2c:	4b20      	ldr	r3, [pc, #128]	; (800bdb0 <USB_CoreInit+0xac>)
 800bd2e:	4013      	ands	r3, r2
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d105      	bne.n	800bd52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 fc0e 	bl	800d574 <USB_CoreReset>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73fb      	strb	r3, [r7, #15]
 800bd5c:	e010      	b.n	800bd80 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 fc02 	bl	800d574 <USB_CoreReset>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d10b      	bne.n	800bd9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f043 0206 	orr.w	r2, r3, #6
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f043 0220 	orr.w	r2, r3, #32
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdaa:	b004      	add	sp, #16
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	ffbdffbf 	.word	0xffbdffbf

0800bdb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d165      	bne.n	800be94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	4a41      	ldr	r2, [pc, #260]	; (800bed0 <USB_SetTurnaroundTime+0x11c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d906      	bls.n	800bdde <USB_SetTurnaroundTime+0x2a>
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	4a40      	ldr	r2, [pc, #256]	; (800bed4 <USB_SetTurnaroundTime+0x120>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d202      	bcs.n	800bdde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bdd8:	230f      	movs	r3, #15
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	e062      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	4a3c      	ldr	r2, [pc, #240]	; (800bed4 <USB_SetTurnaroundTime+0x120>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d306      	bcc.n	800bdf4 <USB_SetTurnaroundTime+0x40>
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	4a3b      	ldr	r2, [pc, #236]	; (800bed8 <USB_SetTurnaroundTime+0x124>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d202      	bcs.n	800bdf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bdee:	230e      	movs	r3, #14
 800bdf0:	617b      	str	r3, [r7, #20]
 800bdf2:	e057      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	4a38      	ldr	r2, [pc, #224]	; (800bed8 <USB_SetTurnaroundTime+0x124>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d306      	bcc.n	800be0a <USB_SetTurnaroundTime+0x56>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4a37      	ldr	r2, [pc, #220]	; (800bedc <USB_SetTurnaroundTime+0x128>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d202      	bcs.n	800be0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be04:	230d      	movs	r3, #13
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	e04c      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4a33      	ldr	r2, [pc, #204]	; (800bedc <USB_SetTurnaroundTime+0x128>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d306      	bcc.n	800be20 <USB_SetTurnaroundTime+0x6c>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4a32      	ldr	r2, [pc, #200]	; (800bee0 <USB_SetTurnaroundTime+0x12c>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d802      	bhi.n	800be20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be1a:	230c      	movs	r3, #12
 800be1c:	617b      	str	r3, [r7, #20]
 800be1e:	e041      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4a2f      	ldr	r2, [pc, #188]	; (800bee0 <USB_SetTurnaroundTime+0x12c>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d906      	bls.n	800be36 <USB_SetTurnaroundTime+0x82>
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4a2e      	ldr	r2, [pc, #184]	; (800bee4 <USB_SetTurnaroundTime+0x130>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d802      	bhi.n	800be36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be30:	230b      	movs	r3, #11
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	e036      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	4a2a      	ldr	r2, [pc, #168]	; (800bee4 <USB_SetTurnaroundTime+0x130>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d906      	bls.n	800be4c <USB_SetTurnaroundTime+0x98>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4a29      	ldr	r2, [pc, #164]	; (800bee8 <USB_SetTurnaroundTime+0x134>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d802      	bhi.n	800be4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be46:	230a      	movs	r3, #10
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e02b      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	4a26      	ldr	r2, [pc, #152]	; (800bee8 <USB_SetTurnaroundTime+0x134>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d906      	bls.n	800be62 <USB_SetTurnaroundTime+0xae>
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	4a25      	ldr	r2, [pc, #148]	; (800beec <USB_SetTurnaroundTime+0x138>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d202      	bcs.n	800be62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be5c:	2309      	movs	r3, #9
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e020      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	4a21      	ldr	r2, [pc, #132]	; (800beec <USB_SetTurnaroundTime+0x138>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d306      	bcc.n	800be78 <USB_SetTurnaroundTime+0xc4>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	4a20      	ldr	r2, [pc, #128]	; (800bef0 <USB_SetTurnaroundTime+0x13c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d802      	bhi.n	800be78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be72:	2308      	movs	r3, #8
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	e015      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	4a1d      	ldr	r2, [pc, #116]	; (800bef0 <USB_SetTurnaroundTime+0x13c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d906      	bls.n	800be8e <USB_SetTurnaroundTime+0xda>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4a1c      	ldr	r2, [pc, #112]	; (800bef4 <USB_SetTurnaroundTime+0x140>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d202      	bcs.n	800be8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be88:	2307      	movs	r3, #7
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e00a      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be8e:	2306      	movs	r3, #6
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e007      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be9a:	2309      	movs	r3, #9
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	e001      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bea0:	2309      	movs	r3, #9
 800bea2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	029b      	lsls	r3, r3, #10
 800beb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	00d8acbf 	.word	0x00d8acbf
 800bed4:	00e4e1c0 	.word	0x00e4e1c0
 800bed8:	00f42400 	.word	0x00f42400
 800bedc:	01067380 	.word	0x01067380
 800bee0:	011a499f 	.word	0x011a499f
 800bee4:	01312cff 	.word	0x01312cff
 800bee8:	014ca43f 	.word	0x014ca43f
 800beec:	016e3600 	.word	0x016e3600
 800bef0:	01a6ab1f 	.word	0x01a6ab1f
 800bef4:	01e84800 	.word	0x01e84800

0800bef8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f043 0201 	orr.w	r2, r3, #1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f023 0201 	bic.w	r2, r3, #1
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d115      	bne.n	800bf8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f7f7 f9e0 	bl	8003330 <HAL_Delay>
      ms++;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 fa6c 	bl	800d454 <USB_GetMode>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d01e      	beq.n	800bfc0 <USB_SetCurrentMode+0x84>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b31      	cmp	r3, #49	; 0x31
 800bf86:	d9f0      	bls.n	800bf6a <USB_SetCurrentMode+0x2e>
 800bf88:	e01a      	b.n	800bfc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf8a:	78fb      	ldrb	r3, [r7, #3]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d115      	bne.n	800bfbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	f7f7 f9c7 	bl	8003330 <HAL_Delay>
      ms++;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fa53 	bl	800d454 <USB_GetMode>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d005      	beq.n	800bfc0 <USB_SetCurrentMode+0x84>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b31      	cmp	r3, #49	; 0x31
 800bfb8:	d9f0      	bls.n	800bf9c <USB_SetCurrentMode+0x60>
 800bfba:	e001      	b.n	800bfc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e005      	b.n	800bfcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b32      	cmp	r3, #50	; 0x32
 800bfc4:	d101      	bne.n	800bfca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bfe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	613b      	str	r3, [r7, #16]
 800bff2:	e009      	b.n	800c008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	3340      	adds	r3, #64	; 0x40
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	3301      	adds	r3, #1
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b0e      	cmp	r3, #14
 800c00c:	d9f2      	bls.n	800bff4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11c      	bne.n	800c04e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c022:	f043 0302 	orr.w	r3, r3, #2
 800c026:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	e005      	b.n	800c05a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c052:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c060:	461a      	mov	r2, r3
 800c062:	2300      	movs	r3, #0
 800c064:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c06c:	4619      	mov	r1, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c074:	461a      	mov	r2, r3
 800c076:	680b      	ldr	r3, [r1, #0]
 800c078:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d10c      	bne.n	800c09a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c082:	2b00      	cmp	r3, #0
 800c084:	d104      	bne.n	800c090 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c086:	2100      	movs	r1, #0
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f965 	bl	800c358 <USB_SetDevSpeed>
 800c08e:	e008      	b.n	800c0a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c090:	2101      	movs	r1, #1
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f960 	bl	800c358 <USB_SetDevSpeed>
 800c098:	e003      	b.n	800c0a2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c09a:	2103      	movs	r1, #3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f95b 	bl	800c358 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0a2:	2110      	movs	r1, #16
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f8f3 	bl	800c290 <USB_FlushTxFifo>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f91f 	bl	800c2f8 <USB_FlushRxFifo>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	2300      	movs	r3, #0
 800c0da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	613b      	str	r3, [r7, #16]
 800c0ec:	e043      	b.n	800c176 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	015a      	lsls	r2, r3, #5
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c104:	d118      	bne.n	800c138 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	015a      	lsls	r2, r3, #5
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4413      	add	r3, r2
 800c114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c118:	461a      	mov	r2, r3
 800c11a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	e013      	b.n	800c14a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c12e:	461a      	mov	r2, r3
 800c130:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	e008      	b.n	800c14a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c144:	461a      	mov	r2, r3
 800c146:	2300      	movs	r3, #0
 800c148:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c156:	461a      	mov	r2, r3
 800c158:	2300      	movs	r3, #0
 800c15a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4413      	add	r3, r2
 800c164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c168:	461a      	mov	r2, r3
 800c16a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c16e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	3301      	adds	r3, #1
 800c174:	613b      	str	r3, [r7, #16]
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d3b7      	bcc.n	800c0ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c17e:	2300      	movs	r3, #0
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	e043      	b.n	800c20c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c19a:	d118      	bne.n	800c1ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10a      	bne.n	800c1b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	e013      	b.n	800c1e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1ca:	6013      	str	r3, [r2, #0]
 800c1cc:	e008      	b.n	800c1e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	015a      	lsls	r2, r3, #5
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1da:	461a      	mov	r2, r3
 800c1dc:	2300      	movs	r3, #0
 800c1de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	015a      	lsls	r2, r3, #5
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1fe:	461a      	mov	r2, r3
 800c200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c204:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	3301      	adds	r3, #1
 800c20a:	613b      	str	r3, [r7, #16]
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	429a      	cmp	r2, r3
 800c212:	d3b7      	bcc.n	800c184 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c226:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c234:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d105      	bne.n	800c248 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	f043 0210 	orr.w	r2, r3, #16
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	699a      	ldr	r2, [r3, #24]
 800c24c:	4b0e      	ldr	r3, [pc, #56]	; (800c288 <USB_DevInit+0x2b4>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c256:	2b00      	cmp	r3, #0
 800c258:	d005      	beq.n	800c266 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	f043 0208 	orr.w	r2, r3, #8
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d105      	bne.n	800c278 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	699a      	ldr	r2, [r3, #24]
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <USB_DevInit+0x2b8>)
 800c272:	4313      	orrs	r3, r2
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c284:	b004      	add	sp, #16
 800c286:	4770      	bx	lr
 800c288:	803c3800 	.word	0x803c3800
 800c28c:	40000004 	.word	0x40000004

0800c290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4a13      	ldr	r2, [pc, #76]	; (800c2f4 <USB_FlushTxFifo+0x64>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d901      	bls.n	800c2b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e01b      	b.n	800c2e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	daf2      	bge.n	800c29e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	019b      	lsls	r3, r3, #6
 800c2c0:	f043 0220 	orr.w	r2, r3, #32
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4a08      	ldr	r2, [pc, #32]	; (800c2f4 <USB_FlushTxFifo+0x64>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d901      	bls.n	800c2da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e006      	b.n	800c2e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	f003 0320 	and.w	r3, r3, #32
 800c2e2:	2b20      	cmp	r3, #32
 800c2e4:	d0f0      	beq.n	800c2c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	00030d40 	.word	0x00030d40

0800c2f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c300:	2300      	movs	r3, #0
 800c302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3301      	adds	r3, #1
 800c308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	4a11      	ldr	r2, [pc, #68]	; (800c354 <USB_FlushRxFifo+0x5c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d901      	bls.n	800c316 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c312:	2303      	movs	r3, #3
 800c314:	e018      	b.n	800c348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	daf2      	bge.n	800c304 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2210      	movs	r2, #16
 800c326:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4a08      	ldr	r2, [pc, #32]	; (800c354 <USB_FlushRxFifo+0x5c>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d901      	bls.n	800c33a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e006      	b.n	800c348 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	f003 0310 	and.w	r3, r3, #16
 800c342:	2b10      	cmp	r3, #16
 800c344:	d0f0      	beq.n	800c328 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	00030d40 	.word	0x00030d40

0800c358 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	68f9      	ldr	r1, [r7, #12]
 800c374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c378:	4313      	orrs	r3, r2
 800c37a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f003 0306 	and.w	r3, r3, #6
 800c3a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75fb      	strb	r3, [r7, #23]
 800c3ae:	e00a      	b.n	800c3c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d002      	beq.n	800c3bc <USB_GetDevSpeed+0x32>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b06      	cmp	r3, #6
 800c3ba:	d102      	bne.n	800c3c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	75fb      	strb	r3, [r7, #23]
 800c3c0:	e001      	b.n	800c3c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c3c2:	230f      	movs	r3, #15
 800c3c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	371c      	adds	r7, #28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d139      	bne.n	800c464 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f6:	69da      	ldr	r2, [r3, #28]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	f003 030f 	and.w	r3, r3, #15
 800c400:	2101      	movs	r1, #1
 800c402:	fa01 f303 	lsl.w	r3, r1, r3
 800c406:	b29b      	uxth	r3, r3
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c40e:	4313      	orrs	r3, r2
 800c410:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	015a      	lsls	r2, r3, #5
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d153      	bne.n	800c4d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	791b      	ldrb	r3, [r3, #4]
 800c442:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c444:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	059b      	lsls	r3, r3, #22
 800c44a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c44c:	431a      	orrs	r2, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	0159      	lsls	r1, r3, #5
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	440b      	add	r3, r1
 800c456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45a:	4619      	mov	r1, r3
 800c45c:	4b20      	ldr	r3, [pc, #128]	; (800c4e0 <USB_ActivateEndpoint+0x10c>)
 800c45e:	4313      	orrs	r3, r2
 800c460:	600b      	str	r3, [r1, #0]
 800c462:	e035      	b.n	800c4d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46a:	69da      	ldr	r2, [r3, #28]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	f003 030f 	and.w	r3, r3, #15
 800c474:	2101      	movs	r1, #1
 800c476:	fa01 f303 	lsl.w	r3, r1, r3
 800c47a:	041b      	lsls	r3, r3, #16
 800c47c:	68f9      	ldr	r1, [r7, #12]
 800c47e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c482:	4313      	orrs	r3, r2
 800c484:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	015a      	lsls	r2, r3, #5
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	4413      	add	r3, r2
 800c48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d119      	bne.n	800c4d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	015a      	lsls	r2, r3, #5
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	791b      	ldrb	r3, [r3, #4]
 800c4b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4b8:	430b      	orrs	r3, r1
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	0159      	lsls	r1, r3, #5
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	440b      	add	r3, r1
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <USB_ActivateEndpoint+0x10c>)
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	10008000 	.word	0x10008000

0800c4e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d161      	bne.n	800c5c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	015a      	lsls	r2, r3, #5
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	4413      	add	r3, r2
 800c508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c516:	d11f      	bne.n	800c558 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	0151      	lsls	r1, r2, #5
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	440a      	add	r2, r1
 800c52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c536:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	0151      	lsls	r1, r2, #5
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	440a      	add	r2, r1
 800c54e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c55e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	f003 030f 	and.w	r3, r3, #15
 800c568:	2101      	movs	r1, #1
 800c56a:	fa01 f303 	lsl.w	r3, r1, r3
 800c56e:	b29b      	uxth	r3, r3
 800c570:	43db      	mvns	r3, r3
 800c572:	68f9      	ldr	r1, [r7, #12]
 800c574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c578:	4013      	ands	r3, r2
 800c57a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c582:	69da      	ldr	r2, [r3, #28]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	f003 030f 	and.w	r3, r3, #15
 800c58c:	2101      	movs	r1, #1
 800c58e:	fa01 f303 	lsl.w	r3, r1, r3
 800c592:	b29b      	uxth	r3, r3
 800c594:	43db      	mvns	r3, r3
 800c596:	68f9      	ldr	r1, [r7, #12]
 800c598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c59c:	4013      	ands	r3, r2
 800c59e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	0159      	lsls	r1, r3, #5
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	440b      	add	r3, r1
 800c5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4b35      	ldr	r3, [pc, #212]	; (800c694 <USB_DeactivateEndpoint+0x1b0>)
 800c5be:	4013      	ands	r3, r2
 800c5c0:	600b      	str	r3, [r1, #0]
 800c5c2:	e060      	b.n	800c686 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5da:	d11f      	bne.n	800c61c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	0151      	lsls	r1, r2, #5
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	440a      	add	r2, r1
 800c5f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	015a      	lsls	r2, r3, #5
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	4413      	add	r3, r2
 800c604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	0151      	lsls	r1, r2, #5
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	440a      	add	r2, r1
 800c612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c61a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	2101      	movs	r1, #1
 800c62e:	fa01 f303 	lsl.w	r3, r1, r3
 800c632:	041b      	lsls	r3, r3, #16
 800c634:	43db      	mvns	r3, r3
 800c636:	68f9      	ldr	r1, [r7, #12]
 800c638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c63c:	4013      	ands	r3, r2
 800c63e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c646:	69da      	ldr	r2, [r3, #28]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	f003 030f 	and.w	r3, r3, #15
 800c650:	2101      	movs	r1, #1
 800c652:	fa01 f303 	lsl.w	r3, r1, r3
 800c656:	041b      	lsls	r3, r3, #16
 800c658:	43db      	mvns	r3, r3
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c660:	4013      	ands	r3, r2
 800c662:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	0159      	lsls	r1, r3, #5
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	440b      	add	r3, r1
 800c67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67e:	4619      	mov	r1, r3
 800c680:	4b05      	ldr	r3, [pc, #20]	; (800c698 <USB_DeactivateEndpoint+0x1b4>)
 800c682:	4013      	ands	r3, r2
 800c684:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	ec337800 	.word	0xec337800
 800c698:	eff37800 	.word	0xeff37800

0800c69c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08a      	sub	sp, #40	; 0x28
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	785b      	ldrb	r3, [r3, #1]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	f040 8163 	bne.w	800c984 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d132      	bne.n	800c72c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	015a      	lsls	r2, r3, #5
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	0159      	lsls	r1, r3, #5
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	440b      	add	r3, r1
 800c6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4ba5      	ldr	r3, [pc, #660]	; (800c978 <USB_EPStartXfer+0x2dc>)
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	69ba      	ldr	r2, [r7, #24]
 800c6f8:	0151      	lsls	r1, r2, #5
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	440a      	add	r2, r1
 800c6fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c714:	691a      	ldr	r2, [r3, #16]
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	0159      	lsls	r1, r3, #5
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	440b      	add	r3, r1
 800c71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c722:	4619      	mov	r1, r3
 800c724:	4b95      	ldr	r3, [pc, #596]	; (800c97c <USB_EPStartXfer+0x2e0>)
 800c726:	4013      	ands	r3, r2
 800c728:	610b      	str	r3, [r1, #16]
 800c72a:	e074      	b.n	800c816 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	015a      	lsls	r2, r3, #5
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	4413      	add	r3, r2
 800c734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c738:	691a      	ldr	r2, [r3, #16]
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	0159      	lsls	r1, r3, #5
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	440b      	add	r3, r1
 800c742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c746:	4619      	mov	r1, r3
 800c748:	4b8c      	ldr	r3, [pc, #560]	; (800c97c <USB_EPStartXfer+0x2e0>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	015a      	lsls	r2, r3, #5
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	4413      	add	r3, r2
 800c756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75a:	691a      	ldr	r2, [r3, #16]
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	0159      	lsls	r1, r3, #5
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	440b      	add	r3, r1
 800c764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c768:	4619      	mov	r1, r3
 800c76a:	4b83      	ldr	r3, [pc, #524]	; (800c978 <USB_EPStartXfer+0x2dc>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	4413      	add	r3, r2
 800c778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c77c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	6999      	ldr	r1, [r3, #24]
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	440b      	add	r3, r1
 800c788:	1e59      	subs	r1, r3, #1
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c792:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c794:	4b7a      	ldr	r3, [pc, #488]	; (800c980 <USB_EPStartXfer+0x2e4>)
 800c796:	400b      	ands	r3, r1
 800c798:	69b9      	ldr	r1, [r7, #24]
 800c79a:	0148      	lsls	r0, r1, #5
 800c79c:	69f9      	ldr	r1, [r7, #28]
 800c79e:	4401      	add	r1, r0
 800c7a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b4:	691a      	ldr	r2, [r3, #16]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7be:	69b9      	ldr	r1, [r7, #24]
 800c7c0:	0148      	lsls	r0, r1, #5
 800c7c2:	69f9      	ldr	r1, [r7, #28]
 800c7c4:	4401      	add	r1, r0
 800c7c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	791b      	ldrb	r3, [r3, #4]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d11f      	bne.n	800c816 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	015a      	lsls	r2, r3, #5
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	4413      	add	r3, r2
 800c7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	69ba      	ldr	r2, [r7, #24]
 800c7e6:	0151      	lsls	r1, r2, #5
 800c7e8:	69fa      	ldr	r2, [r7, #28]
 800c7ea:	440a      	add	r2, r1
 800c7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	015a      	lsls	r2, r3, #5
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	0151      	lsls	r1, r2, #5
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	440a      	add	r2, r1
 800c80c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c814:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d14b      	bne.n	800c8b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d009      	beq.n	800c838 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c830:	461a      	mov	r2, r3
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	791b      	ldrb	r3, [r3, #4]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d128      	bne.n	800c892 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d110      	bne.n	800c872 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	015a      	lsls	r2, r3, #5
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	4413      	add	r3, r2
 800c858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	0151      	lsls	r1, r2, #5
 800c862:	69fa      	ldr	r2, [r7, #28]
 800c864:	440a      	add	r2, r1
 800c866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c86a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	e00f      	b.n	800c892 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	69ba      	ldr	r2, [r7, #24]
 800c882:	0151      	lsls	r1, r2, #5
 800c884:	69fa      	ldr	r2, [r7, #28]
 800c886:	440a      	add	r2, r1
 800c888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c88c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c890:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	0151      	lsls	r1, r2, #5
 800c8a4:	69fa      	ldr	r2, [r7, #28]
 800c8a6:	440a      	add	r2, r1
 800c8a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	e137      	b.n	800cb24 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	0151      	lsls	r1, r2, #5
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	440a      	add	r2, r1
 800c8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c8d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	791b      	ldrb	r3, [r3, #4]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d015      	beq.n	800c908 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 811f 	beq.w	800cb24 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	f003 030f 	and.w	r3, r3, #15
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fc:	69f9      	ldr	r1, [r7, #28]
 800c8fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c902:	4313      	orrs	r3, r2
 800c904:	634b      	str	r3, [r1, #52]	; 0x34
 800c906:	e10d      	b.n	800cb24 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c914:	2b00      	cmp	r3, #0
 800c916:	d110      	bne.n	800c93a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	0151      	lsls	r1, r2, #5
 800c92a:	69fa      	ldr	r2, [r7, #28]
 800c92c:	440a      	add	r2, r1
 800c92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	e00f      	b.n	800c95a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	0151      	lsls	r1, r2, #5
 800c94c:	69fa      	ldr	r2, [r7, #28]
 800c94e:	440a      	add	r2, r1
 800c950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c958:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6919      	ldr	r1, [r3, #16]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	b298      	uxth	r0, r3
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	4603      	mov	r3, r0
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f000 faea 	bl	800cf48 <USB_WritePacket>
 800c974:	e0d6      	b.n	800cb24 <USB_EPStartXfer+0x488>
 800c976:	bf00      	nop
 800c978:	e007ffff 	.word	0xe007ffff
 800c97c:	fff80000 	.word	0xfff80000
 800c980:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c990:	691a      	ldr	r2, [r3, #16]
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	0159      	lsls	r1, r3, #5
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	440b      	add	r3, r1
 800c99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4b63      	ldr	r3, [pc, #396]	; (800cb30 <USB_EPStartXfer+0x494>)
 800c9a2:	4013      	ands	r3, r2
 800c9a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	0159      	lsls	r1, r3, #5
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	440b      	add	r3, r1
 800c9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4b5c      	ldr	r3, [pc, #368]	; (800cb34 <USB_EPStartXfer+0x498>)
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d123      	bne.n	800ca18 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	015a      	lsls	r2, r3, #5
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9dc:	691a      	ldr	r2, [r3, #16]
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9e6:	69b9      	ldr	r1, [r7, #24]
 800c9e8:	0148      	lsls	r0, r1, #5
 800c9ea:	69f9      	ldr	r1, [r7, #28]
 800c9ec:	4401      	add	r1, r0
 800c9ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	015a      	lsls	r2, r3, #5
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	0151      	lsls	r1, r2, #5
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	440a      	add	r2, r1
 800ca0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca14:	6113      	str	r3, [r2, #16]
 800ca16:	e037      	b.n	800ca88 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	699a      	ldr	r2, [r3, #24]
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	4413      	add	r3, r2
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	8afa      	ldrh	r2, [r7, #22]
 800ca34:	fb03 f202 	mul.w	r2, r3, r2
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca48:	691a      	ldr	r2, [r3, #16]
 800ca4a:	8afb      	ldrh	r3, [r7, #22]
 800ca4c:	04d9      	lsls	r1, r3, #19
 800ca4e:	4b3a      	ldr	r3, [pc, #232]	; (800cb38 <USB_EPStartXfer+0x49c>)
 800ca50:	400b      	ands	r3, r1
 800ca52:	69b9      	ldr	r1, [r7, #24]
 800ca54:	0148      	lsls	r0, r1, #5
 800ca56:	69f9      	ldr	r1, [r7, #28]
 800ca58:	4401      	add	r1, r0
 800ca5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6e:	691a      	ldr	r2, [r3, #16]
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca78:	69b9      	ldr	r1, [r7, #24]
 800ca7a:	0148      	lsls	r0, r1, #5
 800ca7c:	69f9      	ldr	r1, [r7, #28]
 800ca7e:	4401      	add	r1, r0
 800ca80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca84:	4313      	orrs	r3, r2
 800ca86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ca88:	79fb      	ldrb	r3, [r7, #7]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d10d      	bne.n	800caaa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d009      	beq.n	800caaa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6919      	ldr	r1, [r3, #16]
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	460a      	mov	r2, r1
 800caa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	791b      	ldrb	r3, [r3, #4]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d128      	bne.n	800cb04 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d110      	bne.n	800cae4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	0151      	lsls	r1, r2, #5
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	440a      	add	r2, r1
 800cad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cadc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	e00f      	b.n	800cb04 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	015a      	lsls	r2, r3, #5
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	4413      	add	r3, r2
 800caec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	0151      	lsls	r1, r2, #5
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	440a      	add	r2, r1
 800cafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cafe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	015a      	lsls	r2, r3, #5
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	0151      	lsls	r1, r2, #5
 800cb16:	69fa      	ldr	r2, [r7, #28]
 800cb18:	440a      	add	r2, r1
 800cb1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3720      	adds	r7, #32
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	fff80000 	.word	0xfff80000
 800cb34:	e007ffff 	.word	0xe007ffff
 800cb38:	1ff80000 	.word	0x1ff80000

0800cb3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	785b      	ldrb	r3, [r3, #1]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	f040 80ce 	bne.w	800ccfa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d132      	bne.n	800cbcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb72:	691a      	ldr	r2, [r3, #16]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	0159      	lsls	r1, r3, #5
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	440b      	add	r3, r1
 800cb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb80:	4619      	mov	r1, r3
 800cb82:	4b9a      	ldr	r3, [pc, #616]	; (800cdec <USB_EP0StartXfer+0x2b0>)
 800cb84:	4013      	ands	r3, r2
 800cb86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	0151      	lsls	r1, r2, #5
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	440a      	add	r2, r1
 800cb9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb4:	691a      	ldr	r2, [r3, #16]
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	0159      	lsls	r1, r3, #5
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	440b      	add	r3, r1
 800cbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4b8a      	ldr	r3, [pc, #552]	; (800cdf0 <USB_EP0StartXfer+0x2b4>)
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	610b      	str	r3, [r1, #16]
 800cbca:	e04e      	b.n	800cc6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd8:	691a      	ldr	r2, [r3, #16]
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	0159      	lsls	r1, r3, #5
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	440b      	add	r3, r1
 800cbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4b81      	ldr	r3, [pc, #516]	; (800cdf0 <USB_EP0StartXfer+0x2b4>)
 800cbea:	4013      	ands	r3, r2
 800cbec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbfa:	691a      	ldr	r2, [r3, #16]
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	0159      	lsls	r1, r3, #5
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	440b      	add	r3, r1
 800cc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc08:	4619      	mov	r1, r3
 800cc0a:	4b78      	ldr	r3, [pc, #480]	; (800cdec <USB_EP0StartXfer+0x2b0>)
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	699a      	ldr	r2, [r3, #24]
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d903      	bls.n	800cc24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	0151      	lsls	r1, r2, #5
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	440a      	add	r2, r1
 800cc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc50:	691a      	ldr	r2, [r3, #16]
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc5a:	6939      	ldr	r1, [r7, #16]
 800cc5c:	0148      	lsls	r0, r1, #5
 800cc5e:	6979      	ldr	r1, [r7, #20]
 800cc60:	4401      	add	r1, r0
 800cc62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc66:	4313      	orrs	r3, r2
 800cc68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d11e      	bne.n	800ccae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d009      	beq.n	800cc8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc84:	461a      	mov	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	015a      	lsls	r2, r3, #5
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	4413      	add	r3, r2
 800cc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	0151      	lsls	r1, r2, #5
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	440a      	add	r2, r1
 800cca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccaa:	6013      	str	r3, [r2, #0]
 800ccac:	e097      	b.n	800cdde <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	015a      	lsls	r2, r3, #5
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	0151      	lsls	r1, r2, #5
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	440a      	add	r2, r1
 800ccc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cccc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 8083 	beq.w	800cdde <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	f003 030f 	and.w	r3, r3, #15
 800cce8:	2101      	movs	r1, #1
 800ccea:	fa01 f303 	lsl.w	r3, r1, r3
 800ccee:	6979      	ldr	r1, [r7, #20]
 800ccf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	634b      	str	r3, [r1, #52]	; 0x34
 800ccf8:	e071      	b.n	800cdde <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	015a      	lsls	r2, r3, #5
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	4413      	add	r3, r2
 800cd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd06:	691a      	ldr	r2, [r3, #16]
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	0159      	lsls	r1, r3, #5
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	440b      	add	r3, r1
 800cd10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd14:	4619      	mov	r1, r3
 800cd16:	4b36      	ldr	r3, [pc, #216]	; (800cdf0 <USB_EP0StartXfer+0x2b4>)
 800cd18:	4013      	ands	r3, r2
 800cd1a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd28:	691a      	ldr	r2, [r3, #16]
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	0159      	lsls	r1, r3, #5
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	440b      	add	r3, r1
 800cd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd36:	4619      	mov	r1, r3
 800cd38:	4b2c      	ldr	r3, [pc, #176]	; (800cdec <USB_EP0StartXfer+0x2b0>)
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	68da      	ldr	r2, [r3, #12]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	68da      	ldr	r2, [r3, #12]
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	015a      	lsls	r2, r3, #5
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	0151      	lsls	r1, r2, #5
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	440a      	add	r2, r1
 800cd6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	015a      	lsls	r2, r3, #5
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd82:	691a      	ldr	r2, [r3, #16]
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	69db      	ldr	r3, [r3, #28]
 800cd88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd8c:	6939      	ldr	r1, [r7, #16]
 800cd8e:	0148      	lsls	r0, r1, #5
 800cd90:	6979      	ldr	r1, [r7, #20]
 800cd92:	4401      	add	r1, r0
 800cd94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d10d      	bne.n	800cdbe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d009      	beq.n	800cdbe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	6919      	ldr	r1, [r3, #16]
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	015a      	lsls	r2, r3, #5
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdba:	460a      	mov	r2, r1
 800cdbc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	0151      	lsls	r1, r2, #5
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	440a      	add	r2, r1
 800cdd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	371c      	adds	r7, #28
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr
 800cdec:	e007ffff 	.word	0xe007ffff
 800cdf0:	fff80000 	.word	0xfff80000

0800cdf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b087      	sub	sp, #28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d14a      	bne.n	800cea8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce2a:	f040 8086 	bne.w	800cf3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	015a      	lsls	r2, r3, #5
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	4413      	add	r3, r2
 800ce38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	683a      	ldr	r2, [r7, #0]
 800ce40:	7812      	ldrb	r2, [r2, #0]
 800ce42:	0151      	lsls	r1, r2, #5
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	440a      	add	r2, r1
 800ce48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	7812      	ldrb	r2, [r2, #0]
 800ce66:	0151      	lsls	r1, r2, #5
 800ce68:	693a      	ldr	r2, [r7, #16]
 800ce6a:	440a      	add	r2, r1
 800ce6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d902      	bls.n	800ce8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	75fb      	strb	r3, [r7, #23]
          break;
 800ce8a:	e056      	b.n	800cf3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	015a      	lsls	r2, r3, #5
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	4413      	add	r3, r2
 800ce96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cea4:	d0e7      	beq.n	800ce76 <USB_EPStopXfer+0x82>
 800cea6:	e048      	b.n	800cf3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cec0:	d13b      	bne.n	800cf3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	0151      	lsls	r1, r2, #5
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	440a      	add	r2, r1
 800cedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cee0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cee4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	015a      	lsls	r2, r3, #5
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	4413      	add	r3, r2
 800cef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	7812      	ldrb	r2, [r2, #0]
 800cefa:	0151      	lsls	r1, r2, #5
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	440a      	add	r2, r1
 800cf00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f242 7210 	movw	r2, #10000	; 0x2710
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d902      	bls.n	800cf20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	75fb      	strb	r3, [r7, #23]
          break;
 800cf1e:	e00c      	b.n	800cf3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf38:	d0e7      	beq.n	800cf0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	371c      	adds	r7, #28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b089      	sub	sp, #36	; 0x24
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4611      	mov	r1, r2
 800cf54:	461a      	mov	r2, r3
 800cf56:	460b      	mov	r3, r1
 800cf58:	71fb      	strb	r3, [r7, #7]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d123      	bne.n	800cfb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf6e:	88bb      	ldrh	r3, [r7, #4]
 800cf70:	3303      	adds	r3, #3
 800cf72:	089b      	lsrs	r3, r3, #2
 800cf74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	61bb      	str	r3, [r7, #24]
 800cf7a:	e018      	b.n	800cfae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	031a      	lsls	r2, r3, #12
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf88:	461a      	mov	r2, r3
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	3301      	adds	r3, #1
 800cf94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	61bb      	str	r3, [r7, #24]
 800cfae:	69ba      	ldr	r2, [r7, #24]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d3e2      	bcc.n	800cf7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3724      	adds	r7, #36	; 0x24
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b08b      	sub	sp, #44	; 0x2c
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cfda:	88fb      	ldrh	r3, [r7, #6]
 800cfdc:	089b      	lsrs	r3, r3, #2
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cfe2:	88fb      	ldrh	r3, [r7, #6]
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cfea:	2300      	movs	r3, #0
 800cfec:	623b      	str	r3, [r7, #32]
 800cfee:	e014      	b.n	800d01a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	601a      	str	r2, [r3, #0]
    pDest++;
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	3301      	adds	r3, #1
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	3301      	adds	r3, #1
 800d006:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	3301      	adds	r3, #1
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	3301      	adds	r3, #1
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d014:	6a3b      	ldr	r3, [r7, #32]
 800d016:	3301      	adds	r3, #1
 800d018:	623b      	str	r3, [r7, #32]
 800d01a:	6a3a      	ldr	r2, [r7, #32]
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d3e6      	bcc.n	800cff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d022:	8bfb      	ldrh	r3, [r7, #30]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d01e      	beq.n	800d066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d028:	2300      	movs	r3, #0
 800d02a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d032:	461a      	mov	r2, r3
 800d034:	f107 0310 	add.w	r3, r7, #16
 800d038:	6812      	ldr	r2, [r2, #0]
 800d03a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	b2db      	uxtb	r3, r3
 800d042:	00db      	lsls	r3, r3, #3
 800d044:	fa22 f303 	lsr.w	r3, r2, r3
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	701a      	strb	r2, [r3, #0]
      i++;
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	3301      	adds	r3, #1
 800d052:	623b      	str	r3, [r7, #32]
      pDest++;
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	3301      	adds	r3, #1
 800d058:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d05a:	8bfb      	ldrh	r3, [r7, #30]
 800d05c:	3b01      	subs	r3, #1
 800d05e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d060:	8bfb      	ldrh	r3, [r7, #30]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1ea      	bne.n	800d03c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d068:	4618      	mov	r0, r3
 800d06a:	372c      	adds	r7, #44	; 0x2c
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	785b      	ldrb	r3, [r3, #1]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d12c      	bne.n	800d0ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	015a      	lsls	r2, r3, #5
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4413      	add	r3, r2
 800d098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	db12      	blt.n	800d0c8 <USB_EPSetStall+0x54>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00f      	beq.n	800d0c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	015a      	lsls	r2, r3, #5
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	0151      	lsls	r1, r2, #5
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	440a      	add	r2, r1
 800d0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	0151      	lsls	r1, r2, #5
 800d0da:	68fa      	ldr	r2, [r7, #12]
 800d0dc:	440a      	add	r2, r1
 800d0de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	e02b      	b.n	800d142 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	db12      	blt.n	800d122 <USB_EPSetStall+0xae>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00f      	beq.n	800d122 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	015a      	lsls	r2, r3, #5
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	0151      	lsls	r1, r2, #5
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	440a      	add	r2, r1
 800d118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d11c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d120:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	015a      	lsls	r2, r3, #5
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	4413      	add	r3, r2
 800d12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	0151      	lsls	r1, r2, #5
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	440a      	add	r2, r1
 800d138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d13c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	785b      	ldrb	r3, [r3, #1]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d128      	bne.n	800d1be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	015a      	lsls	r2, r3, #5
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	4413      	add	r3, r2
 800d174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	0151      	lsls	r1, r2, #5
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	440a      	add	r2, r1
 800d182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d18a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	791b      	ldrb	r3, [r3, #4]
 800d190:	2b03      	cmp	r3, #3
 800d192:	d003      	beq.n	800d19c <USB_EPClearStall+0x4c>
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	791b      	ldrb	r3, [r3, #4]
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d138      	bne.n	800d20e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	015a      	lsls	r2, r3, #5
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	0151      	lsls	r1, r2, #5
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	440a      	add	r2, r1
 800d1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	e027      	b.n	800d20e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	015a      	lsls	r2, r3, #5
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	0151      	lsls	r1, r2, #5
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	440a      	add	r2, r1
 800d1d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	791b      	ldrb	r3, [r3, #4]
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d003      	beq.n	800d1ee <USB_EPClearStall+0x9e>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	791b      	ldrb	r3, [r3, #4]
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d10f      	bne.n	800d20e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	015a      	lsls	r2, r3, #5
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	0151      	lsls	r1, r2, #5
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	440a      	add	r2, r1
 800d204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d20c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	460b      	mov	r3, r1
 800d226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d23a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d23e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	011b      	lsls	r3, r3, #4
 800d24c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d256:	4313      	orrs	r3, r2
 800d258:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d282:	f023 0303 	bic.w	r3, r3, #3
 800d286:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d296:	f023 0302 	bic.w	r3, r3, #2
 800d29a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b085      	sub	sp, #20
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2c4:	f023 0303 	bic.w	r3, r3, #3
 800d2c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2d8:	f043 0302 	orr.w	r3, r3, #2
 800d2dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4013      	ands	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d304:	68fb      	ldr	r3, [r7, #12]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d312:	b480      	push	{r7}
 800d314:	b085      	sub	sp, #20
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	460b      	mov	r3, r1
 800d31c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d322:	78fb      	ldrb	r3, [r7, #3]
 800d324:	015a      	lsls	r2, r3, #5
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	4413      	add	r3, r2
 800d32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d332:	78fb      	ldrb	r3, [r7, #3]
 800d334:	015a      	lsls	r2, r3, #5
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	4413      	add	r3, r2
 800d33a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	4013      	ands	r3, r2
 800d344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d346:	68bb      	ldr	r3, [r7, #8]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d366:	699b      	ldr	r3, [r3, #24]
 800d368:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	4013      	ands	r3, r2
 800d376:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	0c1b      	lsrs	r3, r3, #16
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3714      	adds	r7, #20
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	b29b      	uxth	r3, r3
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d3cc:	78fb      	ldrb	r3, [r7, #3]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	460b      	mov	r3, r1
 800d402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d41c:	78fb      	ldrb	r3, [r7, #3]
 800d41e:	f003 030f 	and.w	r3, r3, #15
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	fa22 f303 	lsr.w	r3, r2, r3
 800d428:	01db      	lsls	r3, r3, #7
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	4313      	orrs	r3, r2
 800d430:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d432:	78fb      	ldrb	r3, [r7, #3]
 800d434:	015a      	lsls	r2, r3, #5
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	4413      	add	r3, r2
 800d43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	4013      	ands	r3, r2
 800d444:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d446:	68bb      	ldr	r3, [r7, #8]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	371c      	adds	r7, #28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	695b      	ldr	r3, [r3, #20]
 800d460:	f003 0301 	and.w	r3, r3, #1
}
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d48a:	4619      	mov	r1, r3
 800d48c:	4b09      	ldr	r3, [pc, #36]	; (800d4b4 <USB_ActivateSetup+0x44>)
 800d48e:	4013      	ands	r3, r2
 800d490:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr
 800d4b4:	fffff800 	.word	0xfffff800

0800d4b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b087      	sub	sp, #28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	333c      	adds	r3, #60	; 0x3c
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	4a26      	ldr	r2, [pc, #152]	; (800d570 <USB_EP0_OutStart+0xb8>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d90a      	bls.n	800d4f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4ec:	d101      	bne.n	800d4f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e037      	b.n	800d562 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d50c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d520:	f043 0318 	orr.w	r3, r3, #24
 800d524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d534:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d538:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d53a:	7afb      	ldrb	r3, [r7, #11]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d10f      	bne.n	800d560 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d546:	461a      	mov	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d55a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d55e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	371c      	adds	r7, #28
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	4f54300a 	.word	0x4f54300a

0800d574 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3301      	adds	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	4a13      	ldr	r2, [pc, #76]	; (800d5d8 <USB_CoreReset+0x64>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d901      	bls.n	800d592 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e01b      	b.n	800d5ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	daf2      	bge.n	800d580 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	f043 0201 	orr.w	r2, r3, #1
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4a09      	ldr	r2, [pc, #36]	; (800d5d8 <USB_CoreReset+0x64>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d901      	bls.n	800d5bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e006      	b.n	800d5ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d0f0      	beq.n	800d5aa <USB_CoreReset+0x36>

  return HAL_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	00030d40 	.word	0x00030d40

0800d5dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5dc:	b084      	sub	sp, #16
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b086      	sub	sp, #24
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d5ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	2300      	movs	r3, #0
 800d600:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d616:	2b00      	cmp	r3, #0
 800d618:	d018      	beq.n	800d64c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d10a      	bne.n	800d636 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d62e:	f043 0304 	orr.w	r3, r3, #4
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	e014      	b.n	800d660 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d644:	f023 0304 	bic.w	r3, r3, #4
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	e009      	b.n	800d660 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d65a:	f023 0304 	bic.w	r3, r3, #4
 800d65e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d660:	2110      	movs	r1, #16
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7fe fe14 	bl	800c290 <USB_FlushTxFifo>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d001      	beq.n	800d672 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7fe fe40 	bl	800c2f8 <USB_FlushRxFifo>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800d67e:	2301      	movs	r3, #1
 800d680:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d682:	2300      	movs	r3, #0
 800d684:	613b      	str	r3, [r7, #16]
 800d686:	e015      	b.n	800d6b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	015a      	lsls	r2, r3, #5
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	4413      	add	r3, r2
 800d690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d694:	461a      	mov	r2, r3
 800d696:	f04f 33ff 	mov.w	r3, #4294967295
 800d69a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	015a      	lsls	r2, r3, #5
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	613b      	str	r3, [r7, #16]
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	693a      	ldr	r2, [r7, #16]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d3e5      	bcc.n	800d688 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a13      	ldr	r2, [pc, #76]	; (800d730 <USB_HostInit+0x154>)
 800d6e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a13      	ldr	r2, [pc, #76]	; (800d734 <USB_HostInit+0x158>)
 800d6e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d6ec:	e009      	b.n	800d702 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2280      	movs	r2, #128	; 0x80
 800d6f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a10      	ldr	r2, [pc, #64]	; (800d738 <USB_HostInit+0x15c>)
 800d6f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a0f      	ldr	r2, [pc, #60]	; (800d73c <USB_HostInit+0x160>)
 800d6fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	2b00      	cmp	r3, #0
 800d706:	d105      	bne.n	800d714 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	f043 0210 	orr.w	r2, r3, #16
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	699a      	ldr	r2, [r3, #24]
 800d718:	4b09      	ldr	r3, [pc, #36]	; (800d740 <USB_HostInit+0x164>)
 800d71a:	4313      	orrs	r3, r2
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d720:	7dfb      	ldrb	r3, [r7, #23]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d72c:	b004      	add	sp, #16
 800d72e:	4770      	bx	lr
 800d730:	01000200 	.word	0x01000200
 800d734:	00e00300 	.word	0x00e00300
 800d738:	00600080 	.word	0x00600080
 800d73c:	004000e0 	.word	0x004000e0
 800d740:	a3200008 	.word	0xa3200008

0800d744 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d77c:	4313      	orrs	r3, r2
 800d77e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d780:	78fb      	ldrb	r3, [r7, #3]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d107      	bne.n	800d796 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d78c:	461a      	mov	r2, r3
 800d78e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d792:	6053      	str	r3, [r2, #4]
 800d794:	e009      	b.n	800d7aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d796:	78fb      	ldrb	r3, [r7, #3]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d106      	bne.n	800d7aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f241 7370 	movw	r3, #6000	; 0x1770
 800d7a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d7d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d7e8:	2064      	movs	r0, #100	; 0x64
 800d7ea:	f7f5 fda1 	bl	8003330 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d7fc:	200a      	movs	r0, #10
 800d7fe:	f7f5 fd97 	bl	8003330 <HAL_Delay>

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b085      	sub	sp, #20
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d81c:	2300      	movs	r3, #0
 800d81e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d830:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d109      	bne.n	800d850 <USB_DriveVbus+0x44>
 800d83c:	78fb      	ldrb	r3, [r7, #3]
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d106      	bne.n	800d850 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d84a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d84e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d85a:	d109      	bne.n	800d870 <USB_DriveVbus+0x64>
 800d85c:	78fb      	ldrb	r3, [r7, #3]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d86a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d86e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3714      	adds	r7, #20
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d87e:	b480      	push	{r7}
 800d880:	b085      	sub	sp, #20
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	0c5b      	lsrs	r3, r3, #17
 800d89c:	f003 0303 	and.w	r3, r3, #3
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	b29b      	uxth	r3, r3
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3714      	adds	r7, #20
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b088      	sub	sp, #32
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	4608      	mov	r0, r1
 800d8da:	4611      	mov	r1, r2
 800d8dc:	461a      	mov	r2, r3
 800d8de:	4603      	mov	r3, r0
 800d8e0:	70fb      	strb	r3, [r7, #3]
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	70bb      	strb	r3, [r7, #2]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8fe:	461a      	mov	r2, r3
 800d900:	f04f 33ff 	mov.w	r3, #4294967295
 800d904:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d87e      	bhi.n	800da0c <USB_HC_Init+0x13c>
 800d90e:	a201      	add	r2, pc, #4	; (adr r2, 800d914 <USB_HC_Init+0x44>)
 800d910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d914:	0800d925 	.word	0x0800d925
 800d918:	0800d9cf 	.word	0x0800d9cf
 800d91c:	0800d925 	.word	0x0800d925
 800d920:	0800d991 	.word	0x0800d991
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	015a      	lsls	r2, r3, #5
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d930:	461a      	mov	r2, r3
 800d932:	f240 439d 	movw	r3, #1181	; 0x49d
 800d936:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d938:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	da10      	bge.n	800d962 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	4413      	add	r3, r2
 800d948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	78fa      	ldrb	r2, [r7, #3]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	440a      	add	r2, r1
 800d956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d95a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d95e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d960:	e057      	b.n	800da12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d051      	beq.n	800da12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d96e:	78fb      	ldrb	r3, [r7, #3]
 800d970:	015a      	lsls	r2, r3, #5
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	4413      	add	r3, r2
 800d976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	78fa      	ldrb	r2, [r7, #3]
 800d97e:	0151      	lsls	r1, r2, #5
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	440a      	add	r2, r1
 800d984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d988:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d98c:	60d3      	str	r3, [r2, #12]
      break;
 800d98e:	e040      	b.n	800da12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	4413      	add	r3, r2
 800d998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d99c:	461a      	mov	r2, r3
 800d99e:	f240 639d 	movw	r3, #1693	; 0x69d
 800d9a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d9a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	da34      	bge.n	800da16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d9ac:	78fb      	ldrb	r3, [r7, #3]
 800d9ae:	015a      	lsls	r2, r3, #5
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	78fa      	ldrb	r2, [r7, #3]
 800d9bc:	0151      	lsls	r1, r2, #5
 800d9be:	693a      	ldr	r2, [r7, #16]
 800d9c0:	440a      	add	r2, r1
 800d9c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d9cc:	e023      	b.n	800da16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	015a      	lsls	r2, r3, #5
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9da:	461a      	mov	r2, r3
 800d9dc:	f240 2325 	movw	r3, #549	; 0x225
 800d9e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d9e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	da17      	bge.n	800da1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d9ea:	78fb      	ldrb	r3, [r7, #3]
 800d9ec:	015a      	lsls	r2, r3, #5
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	78fa      	ldrb	r2, [r7, #3]
 800d9fa:	0151      	lsls	r1, r2, #5
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	440a      	add	r2, r1
 800da00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800da08:	60d3      	str	r3, [r2, #12]
      }
      break;
 800da0a:	e006      	b.n	800da1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	77fb      	strb	r3, [r7, #31]
      break;
 800da10:	e004      	b.n	800da1c <USB_HC_Init+0x14c>
      break;
 800da12:	bf00      	nop
 800da14:	e002      	b.n	800da1c <USB_HC_Init+0x14c>
      break;
 800da16:	bf00      	nop
 800da18:	e000      	b.n	800da1c <USB_HC_Init+0x14c>
      break;
 800da1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	4413      	add	r3, r2
 800da24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	78fa      	ldrb	r2, [r7, #3]
 800da2c:	0151      	lsls	r1, r2, #5
 800da2e:	693a      	ldr	r2, [r7, #16]
 800da30:	440a      	add	r2, r1
 800da32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da36:	f043 0302 	orr.w	r3, r3, #2
 800da3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da42:	699a      	ldr	r2, [r3, #24]
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	f003 030f 	and.w	r3, r3, #15
 800da4a:	2101      	movs	r1, #1
 800da4c:	fa01 f303 	lsl.w	r3, r1, r3
 800da50:	6939      	ldr	r1, [r7, #16]
 800da52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800da56:	4313      	orrs	r3, r2
 800da58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	699b      	ldr	r3, [r3, #24]
 800da5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800da66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	da03      	bge.n	800da76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800da6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da72:	61bb      	str	r3, [r7, #24]
 800da74:	e001      	b.n	800da7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800da76:	2300      	movs	r3, #0
 800da78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff feff 	bl	800d87e <USB_GetHostSpeed>
 800da80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800da82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da86:	2b02      	cmp	r3, #2
 800da88:	d106      	bne.n	800da98 <USB_HC_Init+0x1c8>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d003      	beq.n	800da98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800da90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da94:	617b      	str	r3, [r7, #20]
 800da96:	e001      	b.n	800da9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800da98:	2300      	movs	r3, #0
 800da9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da9c:	787b      	ldrb	r3, [r7, #1]
 800da9e:	059b      	lsls	r3, r3, #22
 800daa0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800daa4:	78bb      	ldrb	r3, [r7, #2]
 800daa6:	02db      	lsls	r3, r3, #11
 800daa8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800daac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800daae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dab2:	049b      	lsls	r3, r3, #18
 800dab4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dab8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800daba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dabc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dac0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dac6:	78fb      	ldrb	r3, [r7, #3]
 800dac8:	0159      	lsls	r1, r3, #5
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	440b      	add	r3, r1
 800dace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dad2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dad8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800dada:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d003      	beq.n	800daea <USB_HC_Init+0x21a>
 800dae2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d10f      	bne.n	800db0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800daea:	78fb      	ldrb	r3, [r7, #3]
 800daec:	015a      	lsls	r2, r3, #5
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	78fa      	ldrb	r2, [r7, #3]
 800dafa:	0151      	lsls	r1, r2, #5
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	440a      	add	r2, r1
 800db00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800db0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3720      	adds	r7, #32
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08c      	sub	sp, #48	; 0x30
 800db18:	af02      	add	r7, sp, #8
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	4613      	mov	r3, r2
 800db20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	785b      	ldrb	r3, [r3, #1]
 800db2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800db2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d02d      	beq.n	800db9a <USB_HC_StartXfer+0x86>
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	791b      	ldrb	r3, [r3, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d129      	bne.n	800db9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d117      	bne.n	800db7c <USB_HC_StartXfer+0x68>
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	79db      	ldrb	r3, [r3, #7]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <USB_HC_StartXfer+0x48>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	79db      	ldrb	r3, [r3, #7]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d10f      	bne.n	800db7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	6a3b      	ldr	r3, [r7, #32]
 800db62:	4413      	add	r3, r2
 800db64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	69fa      	ldr	r2, [r7, #28]
 800db6c:	0151      	lsls	r1, r2, #5
 800db6e:	6a3a      	ldr	r2, [r7, #32]
 800db70:	440a      	add	r2, r1
 800db72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800db7c:	79fb      	ldrb	r3, [r7, #7]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10b      	bne.n	800db9a <USB_HC_StartXfer+0x86>
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	795b      	ldrb	r3, [r3, #5]
 800db86:	2b01      	cmp	r3, #1
 800db88:	d107      	bne.n	800db9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	785b      	ldrb	r3, [r3, #1]
 800db8e:	4619      	mov	r1, r3
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 fa0f 	bl	800dfb4 <USB_DoPing>
      return HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	e0f8      	b.n	800dd8c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d018      	beq.n	800dbd4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	8912      	ldrh	r2, [r2, #8]
 800dbaa:	4413      	add	r3, r2
 800dbac:	3b01      	subs	r3, #1
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	8912      	ldrh	r2, [r2, #8]
 800dbb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbb6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dbb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dbba:	8b7b      	ldrh	r3, [r7, #26]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d90b      	bls.n	800dbd8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800dbc0:	8b7b      	ldrh	r3, [r7, #26]
 800dbc2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dbc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	8912      	ldrh	r2, [r2, #8]
 800dbca:	fb03 f202 	mul.w	r2, r3, r2
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	611a      	str	r2, [r3, #16]
 800dbd2:	e001      	b.n	800dbd8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	78db      	ldrb	r3, [r3, #3]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d007      	beq.n	800dbf0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dbe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	8912      	ldrh	r2, [r2, #8]
 800dbe6:	fb03 f202 	mul.w	r2, r3, r2
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	611a      	str	r2, [r3, #16]
 800dbee:	e003      	b.n	800dbf8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	695a      	ldr	r2, [r3, #20]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dc00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc02:	04d9      	lsls	r1, r3, #19
 800dc04:	4b63      	ldr	r3, [pc, #396]	; (800dd94 <USB_HC_StartXfer+0x280>)
 800dc06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	7a9b      	ldrb	r3, [r3, #10]
 800dc0e:	075b      	lsls	r3, r3, #29
 800dc10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc14:	69f9      	ldr	r1, [r7, #28]
 800dc16:	0148      	lsls	r0, r1, #5
 800dc18:	6a39      	ldr	r1, [r7, #32]
 800dc1a:	4401      	add	r1, r0
 800dc1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dc20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d009      	beq.n	800dc3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	68d9      	ldr	r1, [r3, #12]
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	015a      	lsls	r2, r3, #5
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	4413      	add	r3, r2
 800dc36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc3a:	460a      	mov	r2, r1
 800dc3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	bf0c      	ite	eq
 800dc4e:	2301      	moveq	r3, #1
 800dc50:	2300      	movne	r3, #0
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	015a      	lsls	r2, r3, #5
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	69fa      	ldr	r2, [r7, #28]
 800dc66:	0151      	lsls	r1, r2, #5
 800dc68:	6a3a      	ldr	r2, [r7, #32]
 800dc6a:	440a      	add	r2, r1
 800dc6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dc74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	015a      	lsls	r2, r3, #5
 800dc7a:	6a3b      	ldr	r3, [r7, #32]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	7e7b      	ldrb	r3, [r7, #25]
 800dc86:	075b      	lsls	r3, r3, #29
 800dc88:	69f9      	ldr	r1, [r7, #28]
 800dc8a:	0148      	lsls	r0, r1, #5
 800dc8c:	6a39      	ldr	r1, [r7, #32]
 800dc8e:	4401      	add	r1, r0
 800dc90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dc94:	4313      	orrs	r3, r2
 800dc96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	015a      	lsls	r2, r3, #5
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	4413      	add	r3, r2
 800dca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	78db      	ldrb	r3, [r3, #3]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	e003      	b.n	800dcca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dcc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	015a      	lsls	r2, r3, #5
 800dcd6:	6a3b      	ldr	r3, [r7, #32]
 800dcd8:	4413      	add	r3, r2
 800dcda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcde:	461a      	mov	r2, r3
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dce4:	79fb      	ldrb	r3, [r7, #7]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	e04e      	b.n	800dd8c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	78db      	ldrb	r3, [r3, #3]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d149      	bne.n	800dd8a <USB_HC_StartXfer+0x276>
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d045      	beq.n	800dd8a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	79db      	ldrb	r3, [r3, #7]
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d830      	bhi.n	800dd68 <USB_HC_StartXfer+0x254>
 800dd06:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <USB_HC_StartXfer+0x1f8>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd1d 	.word	0x0800dd1d
 800dd10:	0800dd41 	.word	0x0800dd41
 800dd14:	0800dd1d 	.word	0x0800dd1d
 800dd18:	0800dd41 	.word	0x0800dd41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	695b      	ldr	r3, [r3, #20]
 800dd20:	3303      	adds	r3, #3
 800dd22:	089b      	lsrs	r3, r3, #2
 800dd24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dd26:	8afa      	ldrh	r2, [r7, #22]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d91c      	bls.n	800dd6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	f043 0220 	orr.w	r2, r3, #32
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	619a      	str	r2, [r3, #24]
        }
        break;
 800dd3e:	e015      	b.n	800dd6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	695b      	ldr	r3, [r3, #20]
 800dd44:	3303      	adds	r3, #3
 800dd46:	089b      	lsrs	r3, r3, #2
 800dd48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dd4a:	8afa      	ldrh	r2, [r7, #22]
 800dd4c:	6a3b      	ldr	r3, [r7, #32]
 800dd4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d90a      	bls.n	800dd70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	619a      	str	r2, [r3, #24]
        }
        break;
 800dd66:	e003      	b.n	800dd70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dd68:	bf00      	nop
 800dd6a:	e002      	b.n	800dd72 <USB_HC_StartXfer+0x25e>
        break;
 800dd6c:	bf00      	nop
 800dd6e:	e000      	b.n	800dd72 <USB_HC_StartXfer+0x25e>
        break;
 800dd70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	68d9      	ldr	r1, [r3, #12]
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	785a      	ldrb	r2, [r3, #1]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	2000      	movs	r0, #0
 800dd82:	9000      	str	r0, [sp, #0]
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f7ff f8df 	bl	800cf48 <USB_WritePacket>
  }

  return HAL_OK;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3728      	adds	r7, #40	; 0x28
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	1ff80000 	.word	0x1ff80000

0800dd98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	b29b      	uxth	r3, r3
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b089      	sub	sp, #36	; 0x24
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	015a      	lsls	r2, r3, #5
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	4413      	add	r3, r2
 800ddda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	0c9b      	lsrs	r3, r3, #18
 800dde2:	f003 0303 	and.w	r3, r3, #3
 800dde6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	015a      	lsls	r2, r3, #5
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	4413      	add	r3, r2
 800ddf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	0fdb      	lsrs	r3, r3, #31
 800ddf8:	f003 0301 	and.w	r3, r3, #1
 800ddfc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	f003 0320 	and.w	r3, r3, #32
 800de06:	2b20      	cmp	r3, #32
 800de08:	d104      	bne.n	800de14 <USB_HC_Halt+0x5a>
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	e0c8      	b.n	800dfa6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <USB_HC_Halt+0x66>
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d163      	bne.n	800dee8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	4413      	add	r3, r2
 800de28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	69ba      	ldr	r2, [r7, #24]
 800de30:	0151      	lsls	r1, r2, #5
 800de32:	69fa      	ldr	r2, [r7, #28]
 800de34:	440a      	add	r2, r1
 800de36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de3e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	f003 0320 	and.w	r3, r3, #32
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f040 80ab 	bne.w	800dfa4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d133      	bne.n	800dec2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	015a      	lsls	r2, r3, #5
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	4413      	add	r3, r2
 800de62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	0151      	lsls	r1, r2, #5
 800de6c:	69fa      	ldr	r2, [r7, #28]
 800de6e:	440a      	add	r2, r1
 800de70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	015a      	lsls	r2, r3, #5
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	4413      	add	r3, r2
 800de82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	69ba      	ldr	r2, [r7, #24]
 800de8a:	0151      	lsls	r1, r2, #5
 800de8c:	69fa      	ldr	r2, [r7, #28]
 800de8e:	440a      	add	r2, r1
 800de90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de98:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3301      	adds	r3, #1
 800de9e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dea6:	d81d      	bhi.n	800dee4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	015a      	lsls	r2, r3, #5
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	4413      	add	r3, r2
 800deb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800deba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800debe:	d0ec      	beq.n	800de9a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dec0:	e070      	b.n	800dfa4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	015a      	lsls	r2, r3, #5
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	4413      	add	r3, r2
 800deca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	69ba      	ldr	r2, [r7, #24]
 800ded2:	0151      	lsls	r1, r2, #5
 800ded4:	69fa      	ldr	r2, [r7, #28]
 800ded6:	440a      	add	r2, r1
 800ded8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dedc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dee0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dee2:	e05f      	b.n	800dfa4 <USB_HC_Halt+0x1ea>
            break;
 800dee4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dee6:	e05d      	b.n	800dfa4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	015a      	lsls	r2, r3, #5
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	4413      	add	r3, r2
 800def0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	69ba      	ldr	r2, [r7, #24]
 800def8:	0151      	lsls	r1, r2, #5
 800defa:	69fa      	ldr	r2, [r7, #28]
 800defc:	440a      	add	r2, r1
 800defe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d133      	bne.n	800df80 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	015a      	lsls	r2, r3, #5
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	4413      	add	r3, r2
 800df20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	0151      	lsls	r1, r2, #5
 800df2a:	69fa      	ldr	r2, [r7, #28]
 800df2c:	440a      	add	r2, r1
 800df2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	0151      	lsls	r1, r2, #5
 800df4a:	69fa      	ldr	r2, [r7, #28]
 800df4c:	440a      	add	r2, r1
 800df4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df56:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	3301      	adds	r3, #1
 800df5c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df64:	d81d      	bhi.n	800dfa2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df7c:	d0ec      	beq.n	800df58 <USB_HC_Halt+0x19e>
 800df7e:	e011      	b.n	800dfa4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	4413      	add	r3, r2
 800df88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	69ba      	ldr	r2, [r7, #24]
 800df90:	0151      	lsls	r1, r2, #5
 800df92:	69fa      	ldr	r2, [r7, #28]
 800df94:	440a      	add	r2, r1
 800df96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df9e:	6013      	str	r3, [r2, #0]
 800dfa0:	e000      	b.n	800dfa4 <USB_HC_Halt+0x1ea>
          break;
 800dfa2:	bf00      	nop
    }
  }

  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3724      	adds	r7, #36	; 0x24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dfc4:	78fb      	ldrb	r3, [r7, #3]
 800dfc6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	04da      	lsls	r2, r3, #19
 800dfd0:	4b15      	ldr	r3, [pc, #84]	; (800e028 <USB_DoPing+0x74>)
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	0151      	lsls	r1, r2, #5
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	440a      	add	r2, r1
 800dfdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfe4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dffc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e004:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	015a      	lsls	r2, r3, #5
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	4413      	add	r3, r2
 800e00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e012:	461a      	mov	r2, r3
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	371c      	adds	r7, #28
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	1ff80000 	.word	0x1ff80000

0800e02c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b088      	sub	sp, #32
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e034:	2300      	movs	r3, #0
 800e036:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e03c:	2300      	movs	r3, #0
 800e03e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7fd ff6a 	bl	800bf1a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e046:	2110      	movs	r1, #16
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7fe f921 	bl	800c290 <USB_FlushTxFifo>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7fe f94d 	bl	800c2f8 <USB_FlushRxFifo>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e068:	2300      	movs	r3, #0
 800e06a:	61bb      	str	r3, [r7, #24]
 800e06c:	e01f      	b.n	800e0ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	015a      	lsls	r2, r3, #5
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	4413      	add	r3, r2
 800e076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e084:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e08c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e094:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	015a      	lsls	r2, r3, #5
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	4413      	add	r3, r2
 800e09e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	61bb      	str	r3, [r7, #24]
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	2b0f      	cmp	r3, #15
 800e0b2:	d9dc      	bls.n	800e06e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	61bb      	str	r3, [r7, #24]
 800e0b8:	e034      	b.n	800e124 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e0d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e100:	d80c      	bhi.n	800e11c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e118:	d0ec      	beq.n	800e0f4 <USB_StopHost+0xc8>
 800e11a:	e000      	b.n	800e11e <USB_StopHost+0xf2>
        break;
 800e11c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	3301      	adds	r3, #1
 800e122:	61bb      	str	r3, [r7, #24]
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	2b0f      	cmp	r3, #15
 800e128:	d9c7      	bls.n	800e0ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e130:	461a      	mov	r2, r3
 800e132:	f04f 33ff 	mov.w	r3, #4294967295
 800e136:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f04f 32ff 	mov.w	r2, #4294967295
 800e13e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7fd fed9 	bl	800bef8 <USB_EnableGlobalInt>

  return ret;
 800e146:	7ffb      	ldrb	r3, [r7, #31]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e154:	4904      	ldr	r1, [pc, #16]	; (800e168 <MX_FATFS_Init+0x18>)
 800e156:	4805      	ldr	r0, [pc, #20]	; (800e16c <MX_FATFS_Init+0x1c>)
 800e158:	f006 ffc2 	bl	80150e0 <FATFS_LinkDriver>
 800e15c:	4603      	mov	r3, r0
 800e15e:	461a      	mov	r2, r3
 800e160:	4b03      	ldr	r3, [pc, #12]	; (800e170 <MX_FATFS_Init+0x20>)
 800e162:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e164:	bf00      	nop
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20000f54 	.word	0x20000f54
 800e16c:	0801999c 	.word	0x0801999c
 800e170:	20000f50 	.word	0x20000f50

0800e174 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e178:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e18e:	f000 f888 	bl	800e2a2 <BSP_SD_IsDetected>
 800e192:	4603      	mov	r3, r0
 800e194:	2b01      	cmp	r3, #1
 800e196:	d001      	beq.n	800e19c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e198:	2302      	movs	r3, #2
 800e19a:	e005      	b.n	800e1a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e19c:	4804      	ldr	r0, [pc, #16]	; (800e1b0 <BSP_SD_Init+0x2c>)
 800e19e:	f7fa fae9 	bl	8008774 <HAL_SD_Init>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	200003c0 	.word	0x200003c0

0800e1b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	68f9      	ldr	r1, [r7, #12]
 800e1ca:	4806      	ldr	r0, [pc, #24]	; (800e1e4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e1cc:	f7fa fb8a 	bl	80088e4 <HAL_SD_ReadBlocks_DMA>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	200003c0 	.word	0x200003c0

0800e1e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	68f9      	ldr	r1, [r7, #12]
 800e1fe:	4806      	ldr	r0, [pc, #24]	; (800e218 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e200:	f7fa fc52 	bl	8008aa8 <HAL_SD_WriteBlocks_DMA>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	200003c0 	.word	0x200003c0

0800e21c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e220:	4805      	ldr	r0, [pc, #20]	; (800e238 <BSP_SD_GetCardState+0x1c>)
 800e222:	f7fb f877 	bl	8009314 <HAL_SD_GetCardState>
 800e226:	4603      	mov	r3, r0
 800e228:	2b04      	cmp	r3, #4
 800e22a:	bf14      	ite	ne
 800e22c:	2301      	movne	r3, #1
 800e22e:	2300      	moveq	r3, #0
 800e230:	b2db      	uxtb	r3, r3
}
 800e232:	4618      	mov	r0, r3
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	200003c0 	.word	0x200003c0

0800e23c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e244:	6879      	ldr	r1, [r7, #4]
 800e246:	4803      	ldr	r0, [pc, #12]	; (800e254 <BSP_SD_GetCardInfo+0x18>)
 800e248:	f7fb f838 	bl	80092bc <HAL_SD_GetCardInfo>
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	200003c0 	.word	0x200003c0

0800e258 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e260:	f000 f818 	bl	800e294 <BSP_SD_AbortCallback>
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e274:	f000 f98c 	bl	800e590 <BSP_SD_WriteCpltCallback>
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e288:	f000 f98e 	bl	800e5a8 <BSP_SD_ReadCpltCallback>
}
 800e28c:	bf00      	nop
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e294:	b480      	push	{r7}
 800e296:	af00      	add	r7, sp, #0

}
 800e298:	bf00      	nop
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	b083      	sub	sp, #12
 800e2a6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	b2db      	uxtb	r3, r3
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e2c4:	f7f5 f828 	bl	8003318 <HAL_GetTick>
 800e2c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e2ca:	e006      	b.n	800e2da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e2cc:	f7ff ffa6 	bl	800e21c <BSP_SD_GetCardState>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	e009      	b.n	800e2ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e2da:	f7f5 f81d 	bl	8003318 <HAL_GetTick>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d8f0      	bhi.n	800e2cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e2ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
	...

0800e2f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e302:	4b0b      	ldr	r3, [pc, #44]	; (800e330 <SD_CheckStatus+0x38>)
 800e304:	2201      	movs	r2, #1
 800e306:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e308:	f7ff ff88 	bl	800e21c <BSP_SD_GetCardState>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d107      	bne.n	800e322 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e312:	4b07      	ldr	r3, [pc, #28]	; (800e330 <SD_CheckStatus+0x38>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	b2db      	uxtb	r3, r3
 800e318:	f023 0301 	bic.w	r3, r3, #1
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	4b04      	ldr	r3, [pc, #16]	; (800e330 <SD_CheckStatus+0x38>)
 800e320:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e322:	4b03      	ldr	r3, [pc, #12]	; (800e330 <SD_CheckStatus+0x38>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	b2db      	uxtb	r3, r3
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20000009 	.word	0x20000009

0800e334 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e33e:	f7ff ff21 	bl	800e184 <BSP_SD_Init>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d107      	bne.n	800e358 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff ffd4 	bl	800e2f8 <SD_CheckStatus>
 800e350:	4603      	mov	r3, r0
 800e352:	461a      	mov	r2, r3
 800e354:	4b04      	ldr	r3, [pc, #16]	; (800e368 <SD_initialize+0x34>)
 800e356:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e358:	4b03      	ldr	r3, [pc, #12]	; (800e368 <SD_initialize+0x34>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	b2db      	uxtb	r3, r3
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20000009 	.word	0x20000009

0800e36c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e376:	79fb      	ldrb	r3, [r7, #7]
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff ffbd 	bl	800e2f8 <SD_CheckStatus>
 800e37e:	4603      	mov	r3, r0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60b9      	str	r1, [r7, #8]
 800e390:	607a      	str	r2, [r7, #4]
 800e392:	603b      	str	r3, [r7, #0]
 800e394:	4603      	mov	r3, r0
 800e396:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e39c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e3a0:	f7ff ff8c 	bl	800e2bc <SD_CheckStatusWithTimeout>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da01      	bge.n	800e3ae <SD_read+0x26>
  {
    return res;
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	e03b      	b.n	800e426 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	68b8      	ldr	r0, [r7, #8]
 800e3b4:	f7ff fefe 	bl	800e1b4 <BSP_SD_ReadBlocks_DMA>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d132      	bne.n	800e424 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e3be:	4b1c      	ldr	r3, [pc, #112]	; (800e430 <SD_read+0xa8>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e3c4:	f7f4 ffa8 	bl	8003318 <HAL_GetTick>
 800e3c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e3ca:	bf00      	nop
 800e3cc:	4b18      	ldr	r3, [pc, #96]	; (800e430 <SD_read+0xa8>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d108      	bne.n	800e3e6 <SD_read+0x5e>
 800e3d4:	f7f4 ffa0 	bl	8003318 <HAL_GetTick>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	f247 522f 	movw	r2, #29999	; 0x752f
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d9f2      	bls.n	800e3cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e3e6:	4b12      	ldr	r3, [pc, #72]	; (800e430 <SD_read+0xa8>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d102      	bne.n	800e3f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	75fb      	strb	r3, [r7, #23]
 800e3f2:	e017      	b.n	800e424 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e3f4:	4b0e      	ldr	r3, [pc, #56]	; (800e430 <SD_read+0xa8>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e3fa:	f7f4 ff8d 	bl	8003318 <HAL_GetTick>
 800e3fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e400:	e007      	b.n	800e412 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e402:	f7ff ff0b 	bl	800e21c <BSP_SD_GetCardState>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d102      	bne.n	800e412 <SD_read+0x8a>
          {
            res = RES_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e410:	e008      	b.n	800e424 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e412:	f7f4 ff81 	bl	8003318 <HAL_GetTick>
 800e416:	4602      	mov	r2, r0
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e420:	4293      	cmp	r3, r2
 800e422:	d9ee      	bls.n	800e402 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e424:	7dfb      	ldrb	r3, [r7, #23]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20000f5c 	.word	0x20000f5c

0800e434 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60b9      	str	r1, [r7, #8]
 800e43c:	607a      	str	r2, [r7, #4]
 800e43e:	603b      	str	r3, [r7, #0]
 800e440:	4603      	mov	r3, r0
 800e442:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e448:	4b24      	ldr	r3, [pc, #144]	; (800e4dc <SD_write+0xa8>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e44e:	f247 5030 	movw	r0, #30000	; 0x7530
 800e452:	f7ff ff33 	bl	800e2bc <SD_CheckStatusWithTimeout>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	da01      	bge.n	800e460 <SD_write+0x2c>
  {
    return res;
 800e45c:	7dfb      	ldrb	r3, [r7, #23]
 800e45e:	e038      	b.n	800e4d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e460:	683a      	ldr	r2, [r7, #0]
 800e462:	6879      	ldr	r1, [r7, #4]
 800e464:	68b8      	ldr	r0, [r7, #8]
 800e466:	f7ff febf 	bl	800e1e8 <BSP_SD_WriteBlocks_DMA>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d12f      	bne.n	800e4d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e470:	f7f4 ff52 	bl	8003318 <HAL_GetTick>
 800e474:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e476:	bf00      	nop
 800e478:	4b18      	ldr	r3, [pc, #96]	; (800e4dc <SD_write+0xa8>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d108      	bne.n	800e492 <SD_write+0x5e>
 800e480:	f7f4 ff4a 	bl	8003318 <HAL_GetTick>
 800e484:	4602      	mov	r2, r0
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e48e:	4293      	cmp	r3, r2
 800e490:	d9f2      	bls.n	800e478 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e492:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <SD_write+0xa8>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d102      	bne.n	800e4a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	75fb      	strb	r3, [r7, #23]
 800e49e:	e017      	b.n	800e4d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e4a0:	4b0e      	ldr	r3, [pc, #56]	; (800e4dc <SD_write+0xa8>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e4a6:	f7f4 ff37 	bl	8003318 <HAL_GetTick>
 800e4aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e4ac:	e007      	b.n	800e4be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4ae:	f7ff feb5 	bl	800e21c <BSP_SD_GetCardState>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <SD_write+0x8a>
          {
            res = RES_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	75fb      	strb	r3, [r7, #23]
            break;
 800e4bc:	e008      	b.n	800e4d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e4be:	f7f4 ff2b 	bl	8003318 <HAL_GetTick>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d9ee      	bls.n	800e4ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	20000f58 	.word	0x20000f58

0800e4e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08c      	sub	sp, #48	; 0x30
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	603a      	str	r2, [r7, #0]
 800e4ea:	71fb      	strb	r3, [r7, #7]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e4f6:	4b25      	ldr	r3, [pc, #148]	; (800e58c <SD_ioctl+0xac>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f003 0301 	and.w	r3, r3, #1
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <SD_ioctl+0x28>
 800e504:	2303      	movs	r3, #3
 800e506:	e03c      	b.n	800e582 <SD_ioctl+0xa2>

  switch (cmd)
 800e508:	79bb      	ldrb	r3, [r7, #6]
 800e50a:	2b03      	cmp	r3, #3
 800e50c:	d834      	bhi.n	800e578 <SD_ioctl+0x98>
 800e50e:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <SD_ioctl+0x34>)
 800e510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e514:	0800e525 	.word	0x0800e525
 800e518:	0800e52d 	.word	0x0800e52d
 800e51c:	0800e545 	.word	0x0800e545
 800e520:	0800e55f 	.word	0x0800e55f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e52a:	e028      	b.n	800e57e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e52c:	f107 030c 	add.w	r3, r7, #12
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff fe83 	bl	800e23c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e542:	e01c      	b.n	800e57e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e544:	f107 030c 	add.w	r3, r7, #12
 800e548:	4618      	mov	r0, r3
 800e54a:	f7ff fe77 	bl	800e23c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	b29a      	uxth	r2, r3
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e55c:	e00f      	b.n	800e57e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e55e:	f107 030c 	add.w	r3, r7, #12
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff fe6a 	bl	800e23c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	0a5a      	lsrs	r2, r3, #9
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e576:	e002      	b.n	800e57e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e578:	2304      	movs	r3, #4
 800e57a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e57e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e582:	4618      	mov	r0, r3
 800e584:	3730      	adds	r7, #48	; 0x30
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	20000009 	.word	0x20000009

0800e590 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e590:	b480      	push	{r7}
 800e592:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e594:	4b03      	ldr	r3, [pc, #12]	; (800e5a4 <BSP_SD_WriteCpltCallback+0x14>)
 800e596:	2201      	movs	r2, #1
 800e598:	601a      	str	r2, [r3, #0]
}
 800e59a:	bf00      	nop
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	20000f58 	.word	0x20000f58

0800e5a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e5ac:	4b03      	ldr	r3, [pc, #12]	; (800e5bc <BSP_SD_ReadCpltCallback+0x14>)
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	601a      	str	r2, [r3, #0]
}
 800e5b2:	bf00      	nop
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	20000f5c 	.word	0x20000f5c

0800e5c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e5cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e5d0:	f007 fe8a 	bl	80162e8 <malloc>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d109      	bne.n	800e5f2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	32b0      	adds	r2, #176	; 0xb0
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	e0d4      	b.n	800e79c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e5f2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f007 fe93 	bl	8016324 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	32b0      	adds	r2, #176	; 0xb0
 800e608:	68f9      	ldr	r1, [r7, #12]
 800e60a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	32b0      	adds	r2, #176	; 0xb0
 800e618:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7c1b      	ldrb	r3, [r3, #16]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d138      	bne.n	800e69c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e62a:	4b5e      	ldr	r3, [pc, #376]	; (800e7a4 <USBD_CDC_Init+0x1e4>)
 800e62c:	7819      	ldrb	r1, [r3, #0]
 800e62e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e632:	2202      	movs	r2, #2
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f007 f96e 	bl	8015916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e63a:	4b5a      	ldr	r3, [pc, #360]	; (800e7a4 <USBD_CDC_Init+0x1e4>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	f003 020f 	and.w	r2, r3, #15
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	4613      	mov	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	440b      	add	r3, r1
 800e64e:	3324      	adds	r3, #36	; 0x24
 800e650:	2201      	movs	r2, #1
 800e652:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e654:	4b54      	ldr	r3, [pc, #336]	; (800e7a8 <USBD_CDC_Init+0x1e8>)
 800e656:	7819      	ldrb	r1, [r3, #0]
 800e658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e65c:	2202      	movs	r2, #2
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f007 f959 	bl	8015916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e664:	4b50      	ldr	r3, [pc, #320]	; (800e7a8 <USBD_CDC_Init+0x1e8>)
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	f003 020f 	and.w	r2, r3, #15
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	4613      	mov	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	440b      	add	r3, r1
 800e678:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e67c:	2201      	movs	r2, #1
 800e67e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e680:	4b4a      	ldr	r3, [pc, #296]	; (800e7ac <USBD_CDC_Init+0x1ec>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	f003 020f 	and.w	r2, r3, #15
 800e688:	6879      	ldr	r1, [r7, #4]
 800e68a:	4613      	mov	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	440b      	add	r3, r1
 800e694:	3326      	adds	r3, #38	; 0x26
 800e696:	2210      	movs	r2, #16
 800e698:	801a      	strh	r2, [r3, #0]
 800e69a:	e035      	b.n	800e708 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e69c:	4b41      	ldr	r3, [pc, #260]	; (800e7a4 <USBD_CDC_Init+0x1e4>)
 800e69e:	7819      	ldrb	r1, [r3, #0]
 800e6a0:	2340      	movs	r3, #64	; 0x40
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f007 f936 	bl	8015916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e6aa:	4b3e      	ldr	r3, [pc, #248]	; (800e7a4 <USBD_CDC_Init+0x1e4>)
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	f003 020f 	and.w	r2, r3, #15
 800e6b2:	6879      	ldr	r1, [r7, #4]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	4413      	add	r3, r2
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	440b      	add	r3, r1
 800e6be:	3324      	adds	r3, #36	; 0x24
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e6c4:	4b38      	ldr	r3, [pc, #224]	; (800e7a8 <USBD_CDC_Init+0x1e8>)
 800e6c6:	7819      	ldrb	r1, [r3, #0]
 800e6c8:	2340      	movs	r3, #64	; 0x40
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f007 f922 	bl	8015916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e6d2:	4b35      	ldr	r3, [pc, #212]	; (800e7a8 <USBD_CDC_Init+0x1e8>)
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	f003 020f 	and.w	r2, r3, #15
 800e6da:	6879      	ldr	r1, [r7, #4]
 800e6dc:	4613      	mov	r3, r2
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4413      	add	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	440b      	add	r3, r1
 800e6e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e6ee:	4b2f      	ldr	r3, [pc, #188]	; (800e7ac <USBD_CDC_Init+0x1ec>)
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	f003 020f 	and.w	r2, r3, #15
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	440b      	add	r3, r1
 800e702:	3326      	adds	r3, #38	; 0x26
 800e704:	2210      	movs	r2, #16
 800e706:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e708:	4b28      	ldr	r3, [pc, #160]	; (800e7ac <USBD_CDC_Init+0x1ec>)
 800e70a:	7819      	ldrb	r1, [r3, #0]
 800e70c:	2308      	movs	r3, #8
 800e70e:	2203      	movs	r2, #3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f007 f900 	bl	8015916 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e716:	4b25      	ldr	r3, [pc, #148]	; (800e7ac <USBD_CDC_Init+0x1ec>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	f003 020f 	and.w	r2, r3, #15
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	4613      	mov	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	440b      	add	r3, r1
 800e72a:	3324      	adds	r3, #36	; 0x24
 800e72c:	2201      	movs	r2, #1
 800e72e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	33b0      	adds	r3, #176	; 0xb0
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e762:	2b00      	cmp	r3, #0
 800e764:	d101      	bne.n	800e76a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800e766:	2302      	movs	r3, #2
 800e768:	e018      	b.n	800e79c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	7c1b      	ldrb	r3, [r3, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e772:	4b0d      	ldr	r3, [pc, #52]	; (800e7a8 <USBD_CDC_Init+0x1e8>)
 800e774:	7819      	ldrb	r1, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e77c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f007 f9b7 	bl	8015af4 <USBD_LL_PrepareReceive>
 800e786:	e008      	b.n	800e79a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e788:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <USBD_CDC_Init+0x1e8>)
 800e78a:	7819      	ldrb	r1, [r3, #0]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e792:	2340      	movs	r3, #64	; 0x40
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f007 f9ad 	bl	8015af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	20000093 	.word	0x20000093
 800e7a8:	20000094 	.word	0x20000094
 800e7ac:	20000095 	.word	0x20000095

0800e7b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e7bc:	4b3a      	ldr	r3, [pc, #232]	; (800e8a8 <USBD_CDC_DeInit+0xf8>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f007 f8cd 	bl	8015962 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e7c8:	4b37      	ldr	r3, [pc, #220]	; (800e8a8 <USBD_CDC_DeInit+0xf8>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	f003 020f 	and.w	r2, r3, #15
 800e7d0:	6879      	ldr	r1, [r7, #4]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	440b      	add	r3, r1
 800e7dc:	3324      	adds	r3, #36	; 0x24
 800e7de:	2200      	movs	r2, #0
 800e7e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e7e2:	4b32      	ldr	r3, [pc, #200]	; (800e8ac <USBD_CDC_DeInit+0xfc>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f007 f8ba 	bl	8015962 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e7ee:	4b2f      	ldr	r3, [pc, #188]	; (800e8ac <USBD_CDC_DeInit+0xfc>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	f003 020f 	and.w	r2, r3, #15
 800e7f6:	6879      	ldr	r1, [r7, #4]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	440b      	add	r3, r1
 800e802:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e806:	2200      	movs	r2, #0
 800e808:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e80a:	4b29      	ldr	r3, [pc, #164]	; (800e8b0 <USBD_CDC_DeInit+0x100>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f007 f8a6 	bl	8015962 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e816:	4b26      	ldr	r3, [pc, #152]	; (800e8b0 <USBD_CDC_DeInit+0x100>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	f003 020f 	and.w	r2, r3, #15
 800e81e:	6879      	ldr	r1, [r7, #4]
 800e820:	4613      	mov	r3, r2
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	4413      	add	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	440b      	add	r3, r1
 800e82a:	3324      	adds	r3, #36	; 0x24
 800e82c:	2200      	movs	r2, #0
 800e82e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e830:	4b1f      	ldr	r3, [pc, #124]	; (800e8b0 <USBD_CDC_DeInit+0x100>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f003 020f 	and.w	r2, r3, #15
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	4613      	mov	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4413      	add	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	440b      	add	r3, r1
 800e844:	3326      	adds	r3, #38	; 0x26
 800e846:	2200      	movs	r2, #0
 800e848:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	32b0      	adds	r2, #176	; 0xb0
 800e854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d01f      	beq.n	800e89c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	33b0      	adds	r3, #176	; 0xb0
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	32b0      	adds	r2, #176	; 0xb0
 800e87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87e:	4618      	mov	r0, r3
 800e880:	f007 fd3a 	bl	80162f8 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	32b0      	adds	r2, #176	; 0xb0
 800e88e:	2100      	movs	r1, #0
 800e890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20000093 	.word	0x20000093
 800e8ac:	20000094 	.word	0x20000094
 800e8b0:	20000095 	.word	0x20000095

0800e8b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	32b0      	adds	r2, #176	; 0xb0
 800e8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d101      	bne.n	800e8e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	e0bf      	b.n	800ea64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d050      	beq.n	800e992 <USBD_CDC_Setup+0xde>
 800e8f0:	2b20      	cmp	r3, #32
 800e8f2:	f040 80af 	bne.w	800ea54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	88db      	ldrh	r3, [r3, #6]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d03a      	beq.n	800e974 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	b25b      	sxtb	r3, r3
 800e904:	2b00      	cmp	r3, #0
 800e906:	da1b      	bge.n	800e940 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	33b0      	adds	r3, #176	; 0xb0
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e91e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e920:	683a      	ldr	r2, [r7, #0]
 800e922:	88d2      	ldrh	r2, [r2, #6]
 800e924:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	88db      	ldrh	r3, [r3, #6]
 800e92a:	2b07      	cmp	r3, #7
 800e92c:	bf28      	it	cs
 800e92e:	2307      	movcs	r3, #7
 800e930:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	89fa      	ldrh	r2, [r7, #14]
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f001 fdad 	bl	8010498 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e93e:	e090      	b.n	800ea62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	785a      	ldrb	r2, [r3, #1]
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	88db      	ldrh	r3, [r3, #6]
 800e94e:	2b3f      	cmp	r3, #63	; 0x3f
 800e950:	d803      	bhi.n	800e95a <USBD_CDC_Setup+0xa6>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	88db      	ldrh	r3, [r3, #6]
 800e956:	b2da      	uxtb	r2, r3
 800e958:	e000      	b.n	800e95c <USBD_CDC_Setup+0xa8>
 800e95a:	2240      	movs	r2, #64	; 0x40
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e962:	6939      	ldr	r1, [r7, #16]
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e96a:	461a      	mov	r2, r3
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f001 fdbf 	bl	80104f0 <USBD_CtlPrepareRx>
      break;
 800e972:	e076      	b.n	800ea62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	33b0      	adds	r3, #176	; 0xb0
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4413      	add	r3, r2
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	683a      	ldr	r2, [r7, #0]
 800e988:	7850      	ldrb	r0, [r2, #1]
 800e98a:	2200      	movs	r2, #0
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	4798      	blx	r3
      break;
 800e990:	e067      	b.n	800ea62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	785b      	ldrb	r3, [r3, #1]
 800e996:	2b0b      	cmp	r3, #11
 800e998:	d851      	bhi.n	800ea3e <USBD_CDC_Setup+0x18a>
 800e99a:	a201      	add	r2, pc, #4	; (adr r2, 800e9a0 <USBD_CDC_Setup+0xec>)
 800e99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a0:	0800e9d1 	.word	0x0800e9d1
 800e9a4:	0800ea4d 	.word	0x0800ea4d
 800e9a8:	0800ea3f 	.word	0x0800ea3f
 800e9ac:	0800ea3f 	.word	0x0800ea3f
 800e9b0:	0800ea3f 	.word	0x0800ea3f
 800e9b4:	0800ea3f 	.word	0x0800ea3f
 800e9b8:	0800ea3f 	.word	0x0800ea3f
 800e9bc:	0800ea3f 	.word	0x0800ea3f
 800e9c0:	0800ea3f 	.word	0x0800ea3f
 800e9c4:	0800ea3f 	.word	0x0800ea3f
 800e9c8:	0800e9fb 	.word	0x0800e9fb
 800e9cc:	0800ea25 	.word	0x0800ea25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b03      	cmp	r3, #3
 800e9da:	d107      	bne.n	800e9ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e9dc:	f107 030a 	add.w	r3, r7, #10
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f001 fd57 	bl	8010498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e9ea:	e032      	b.n	800ea52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f001 fce1 	bl	80103b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	75fb      	strb	r3, [r7, #23]
          break;
 800e9f8:	e02b      	b.n	800ea52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d107      	bne.n	800ea16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ea06:	f107 030d 	add.w	r3, r7, #13
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f001 fd42 	bl	8010498 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea14:	e01d      	b.n	800ea52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f001 fccc 	bl	80103b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	75fb      	strb	r3, [r7, #23]
          break;
 800ea22:	e016      	b.n	800ea52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	2b03      	cmp	r3, #3
 800ea2e:	d00f      	beq.n	800ea50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f001 fcbf 	bl	80103b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ea3c:	e008      	b.n	800ea50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ea3e:	6839      	ldr	r1, [r7, #0]
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f001 fcb8 	bl	80103b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ea46:	2303      	movs	r3, #3
 800ea48:	75fb      	strb	r3, [r7, #23]
          break;
 800ea4a:	e002      	b.n	800ea52 <USBD_CDC_Setup+0x19e>
          break;
 800ea4c:	bf00      	nop
 800ea4e:	e008      	b.n	800ea62 <USBD_CDC_Setup+0x1ae>
          break;
 800ea50:	bf00      	nop
      }
      break;
 800ea52:	e006      	b.n	800ea62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ea54:	6839      	ldr	r1, [r7, #0]
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f001 fcad 	bl	80103b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ea5c:	2303      	movs	r3, #3
 800ea5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ea60:	bf00      	nop
  }

  return (uint8_t)ret;
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	32b0      	adds	r2, #176	; 0xb0
 800ea8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ea92:	2303      	movs	r3, #3
 800ea94:	e065      	b.n	800eb62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	32b0      	adds	r2, #176	; 0xb0
 800eaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eaa6:	78fb      	ldrb	r3, [r7, #3]
 800eaa8:	f003 020f 	and.w	r2, r3, #15
 800eaac:	6879      	ldr	r1, [r7, #4]
 800eaae:	4613      	mov	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	440b      	add	r3, r1
 800eab8:	3318      	adds	r3, #24
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d02f      	beq.n	800eb20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800eac0:	78fb      	ldrb	r3, [r7, #3]
 800eac2:	f003 020f 	and.w	r2, r3, #15
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	4613      	mov	r3, r2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	4413      	add	r3, r2
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	440b      	add	r3, r1
 800ead2:	3318      	adds	r3, #24
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	f003 010f 	and.w	r1, r3, #15
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	460b      	mov	r3, r1
 800eae0:	00db      	lsls	r3, r3, #3
 800eae2:	440b      	add	r3, r1
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4403      	add	r3, r0
 800eae8:	3348      	adds	r3, #72	; 0x48
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	fbb2 f1f3 	udiv	r1, r2, r3
 800eaf0:	fb01 f303 	mul.w	r3, r1, r3
 800eaf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d112      	bne.n	800eb20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800eafa:	78fb      	ldrb	r3, [r7, #3]
 800eafc:	f003 020f 	and.w	r2, r3, #15
 800eb00:	6879      	ldr	r1, [r7, #4]
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	440b      	add	r3, r1
 800eb0c:	3318      	adds	r3, #24
 800eb0e:	2200      	movs	r2, #0
 800eb10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eb12:	78f9      	ldrb	r1, [r7, #3]
 800eb14:	2300      	movs	r3, #0
 800eb16:	2200      	movs	r2, #0
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f006 ffca 	bl	8015ab2 <USBD_LL_Transmit>
 800eb1e:	e01f      	b.n	800eb60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	33b0      	adds	r3, #176	; 0xb0
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4413      	add	r3, r2
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d010      	beq.n	800eb60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	33b0      	adds	r3, #176	; 0xb0
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	4413      	add	r3, r2
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	691b      	ldr	r3, [r3, #16]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eb5c:	78fa      	ldrb	r2, [r7, #3]
 800eb5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b084      	sub	sp, #16
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	460b      	mov	r3, r1
 800eb74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	32b0      	adds	r2, #176	; 0xb0
 800eb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	32b0      	adds	r2, #176	; 0xb0
 800eb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	e01a      	b.n	800ebd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eb9c:	78fb      	ldrb	r3, [r7, #3]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f006 ffc8 	bl	8015b36 <USBD_LL_GetRxDataSize>
 800eba6:	4602      	mov	r2, r0
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	33b0      	adds	r3, #176	; 0xb0
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	32b0      	adds	r2, #176	; 0xb0
 800ebec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d101      	bne.n	800ebfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e025      	b.n	800ec48 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	33b0      	adds	r3, #176	; 0xb0
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	4413      	add	r3, r2
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d01a      	beq.n	800ec46 <USBD_CDC_EP0_RxReady+0x6c>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ec16:	2bff      	cmp	r3, #255	; 0xff
 800ec18:	d015      	beq.n	800ec46 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	33b0      	adds	r3, #176	; 0xb0
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ec32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ec3a:	b292      	uxth	r2, r2
 800ec3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	22ff      	movs	r2, #255	; 0xff
 800ec42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ec58:	2182      	movs	r1, #130	; 0x82
 800ec5a:	4818      	ldr	r0, [pc, #96]	; (800ecbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec5c:	f000 fd49 	bl	800f6f2 <USBD_GetEpDesc>
 800ec60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ec62:	2101      	movs	r1, #1
 800ec64:	4815      	ldr	r0, [pc, #84]	; (800ecbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec66:	f000 fd44 	bl	800f6f2 <USBD_GetEpDesc>
 800ec6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ec6c:	2181      	movs	r1, #129	; 0x81
 800ec6e:	4813      	ldr	r0, [pc, #76]	; (800ecbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec70:	f000 fd3f 	bl	800f6f2 <USBD_GetEpDesc>
 800ec74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	2210      	movs	r2, #16
 800ec80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d006      	beq.n	800ec96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec90:	711a      	strb	r2, [r3, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d006      	beq.n	800ecaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eca4:	711a      	strb	r2, [r3, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2243      	movs	r2, #67	; 0x43
 800ecae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ecb0:	4b02      	ldr	r3, [pc, #8]	; (800ecbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3718      	adds	r7, #24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	20000050 	.word	0x20000050

0800ecc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ecc8:	2182      	movs	r1, #130	; 0x82
 800ecca:	4818      	ldr	r0, [pc, #96]	; (800ed2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eccc:	f000 fd11 	bl	800f6f2 <USBD_GetEpDesc>
 800ecd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	4815      	ldr	r0, [pc, #84]	; (800ed2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ecd6:	f000 fd0c 	bl	800f6f2 <USBD_GetEpDesc>
 800ecda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ecdc:	2181      	movs	r1, #129	; 0x81
 800ecde:	4813      	ldr	r0, [pc, #76]	; (800ed2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ece0:	f000 fd07 	bl	800f6f2 <USBD_GetEpDesc>
 800ece4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	2210      	movs	r2, #16
 800ecf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d006      	beq.n	800ed06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	711a      	strb	r2, [r3, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f042 0202 	orr.w	r2, r2, #2
 800ed04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d006      	beq.n	800ed1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	711a      	strb	r2, [r3, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f042 0202 	orr.w	r2, r2, #2
 800ed18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2243      	movs	r2, #67	; 0x43
 800ed1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ed20:	4b02      	ldr	r3, [pc, #8]	; (800ed2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3718      	adds	r7, #24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20000050 	.word	0x20000050

0800ed30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ed38:	2182      	movs	r1, #130	; 0x82
 800ed3a:	4818      	ldr	r0, [pc, #96]	; (800ed9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed3c:	f000 fcd9 	bl	800f6f2 <USBD_GetEpDesc>
 800ed40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ed42:	2101      	movs	r1, #1
 800ed44:	4815      	ldr	r0, [pc, #84]	; (800ed9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed46:	f000 fcd4 	bl	800f6f2 <USBD_GetEpDesc>
 800ed4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ed4c:	2181      	movs	r1, #129	; 0x81
 800ed4e:	4813      	ldr	r0, [pc, #76]	; (800ed9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed50:	f000 fccf 	bl	800f6f2 <USBD_GetEpDesc>
 800ed54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d002      	beq.n	800ed62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	2210      	movs	r2, #16
 800ed60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d006      	beq.n	800ed76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed70:	711a      	strb	r2, [r3, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d006      	beq.n	800ed8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed84:	711a      	strb	r2, [r3, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2243      	movs	r2, #67	; 0x43
 800ed8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ed90:	4b02      	ldr	r3, [pc, #8]	; (800ed9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20000050 	.word	0x20000050

0800eda0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	220a      	movs	r2, #10
 800edac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800edae:	4b03      	ldr	r3, [pc, #12]	; (800edbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	2000000c 	.word	0x2000000c

0800edc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e009      	b.n	800ede8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	33b0      	adds	r3, #176	; 0xb0
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	4413      	add	r3, r2
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b087      	sub	sp, #28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	32b0      	adds	r2, #176	; 0xb0
 800ee0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ee16:	2303      	movs	r3, #3
 800ee18:	e008      	b.n	800ee2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	68ba      	ldr	r2, [r7, #8]
 800ee1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	371c      	adds	r7, #28
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	32b0      	adds	r2, #176	; 0xb0
 800ee4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d101      	bne.n	800ee5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ee58:	2303      	movs	r3, #3
 800ee5a:	e004      	b.n	800ee66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
	...

0800ee74 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	32b0      	adds	r2, #176	; 0xb0
 800ee86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d101      	bne.n	800ee9a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ee96:	2303      	movs	r3, #3
 800ee98:	e025      	b.n	800eee6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d11f      	bne.n	800eee4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800eeac:	4b10      	ldr	r3, [pc, #64]	; (800eef0 <USBD_CDC_TransmitPacket+0x7c>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	f003 020f 	and.w	r2, r3, #15
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	4613      	mov	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4403      	add	r3, r0
 800eec6:	3318      	adds	r3, #24
 800eec8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800eeca:	4b09      	ldr	r3, [pc, #36]	; (800eef0 <USBD_CDC_TransmitPacket+0x7c>)
 800eecc:	7819      	ldrb	r1, [r3, #0]
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f006 fde9 	bl	8015ab2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20000093 	.word	0x20000093

0800eef4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	32b0      	adds	r2, #176	; 0xb0
 800ef06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	32b0      	adds	r2, #176	; 0xb0
 800ef16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ef1e:	2303      	movs	r3, #3
 800ef20:	e018      	b.n	800ef54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	7c1b      	ldrb	r3, [r3, #16]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10a      	bne.n	800ef40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef2a:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <USBD_CDC_ReceivePacket+0x68>)
 800ef2c:	7819      	ldrb	r1, [r3, #0]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f006 fddb 	bl	8015af4 <USBD_LL_PrepareReceive>
 800ef3e:	e008      	b.n	800ef52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef40:	4b06      	ldr	r3, [pc, #24]	; (800ef5c <USBD_CDC_ReceivePacket+0x68>)
 800ef42:	7819      	ldrb	r1, [r3, #0]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef4a:	2340      	movs	r3, #64	; 0x40
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f006 fdd1 	bl	8015af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	20000094 	.word	0x20000094

0800ef60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d101      	bne.n	800ef78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ef74:	2303      	movs	r3, #3
 800ef76:	e01f      	b.n	800efb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	68ba      	ldr	r2, [r7, #8]
 800ef9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	79fa      	ldrb	r2, [r7, #7]
 800efaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f006 fc45 	bl	801583c <USBD_LL_Init>
 800efb2:	4603      	mov	r3, r0
 800efb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3718      	adds	r7, #24
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efca:	2300      	movs	r3, #0
 800efcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d101      	bne.n	800efd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800efd4:	2303      	movs	r3, #3
 800efd6:	e025      	b.n	800f024 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	32ae      	adds	r2, #174	; 0xae
 800efea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00f      	beq.n	800f014 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	32ae      	adds	r2, #174	; 0xae
 800effe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f004:	f107 020e 	add.w	r2, r7, #14
 800f008:	4610      	mov	r0, r2
 800f00a:	4798      	blx	r3
 800f00c:	4602      	mov	r2, r0
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f01a:	1c5a      	adds	r2, r3, #1
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f022:	2300      	movs	r3, #0
}
 800f024:	4618      	mov	r0, r3
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f006 fc53 	bl	80158e0 <USBD_LL_Start>
 800f03a:	4603      	mov	r3, r0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f04c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	460b      	mov	r3, r1
 800f064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f070:	2b00      	cmp	r3, #0
 800f072:	d009      	beq.n	800f088 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	78fa      	ldrb	r2, [r7, #3]
 800f07e:	4611      	mov	r1, r2
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	4798      	blx	r3
 800f084:	4603      	mov	r3, r0
 800f086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f088:	7bfb      	ldrb	r3, [r7, #15]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b084      	sub	sp, #16
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	460b      	mov	r3, r1
 800f09c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	78fa      	ldrb	r2, [r7, #3]
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	4798      	blx	r3
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d001      	beq.n	800f0bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f001 f932 	bl	8010342 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f0fa:	f003 031f 	and.w	r3, r3, #31
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d01a      	beq.n	800f138 <USBD_LL_SetupStage+0x72>
 800f102:	2b02      	cmp	r3, #2
 800f104:	d822      	bhi.n	800f14c <USBD_LL_SetupStage+0x86>
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <USBD_LL_SetupStage+0x4a>
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d00a      	beq.n	800f124 <USBD_LL_SetupStage+0x5e>
 800f10e:	e01d      	b.n	800f14c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f116:	4619      	mov	r1, r3
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 fb5f 	bl	800f7dc <USBD_StdDevReq>
 800f11e:	4603      	mov	r3, r0
 800f120:	73fb      	strb	r3, [r7, #15]
      break;
 800f122:	e020      	b.n	800f166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fbc7 	bl	800f8c0 <USBD_StdItfReq>
 800f132:	4603      	mov	r3, r0
 800f134:	73fb      	strb	r3, [r7, #15]
      break;
 800f136:	e016      	b.n	800f166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fc29 	bl	800f998 <USBD_StdEPReq>
 800f146:	4603      	mov	r3, r0
 800f148:	73fb      	strb	r3, [r7, #15]
      break;
 800f14a:	e00c      	b.n	800f166 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f152:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f156:	b2db      	uxtb	r3, r3
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f006 fc20 	bl	80159a0 <USBD_LL_StallEP>
 800f160:	4603      	mov	r3, r0
 800f162:	73fb      	strb	r3, [r7, #15]
      break;
 800f164:	bf00      	nop
  }

  return ret;
 800f166:	7bfb      	ldrb	r3, [r7, #15]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	460b      	mov	r3, r1
 800f17a:	607a      	str	r2, [r7, #4]
 800f17c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f182:	7afb      	ldrb	r3, [r7, #11]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d16e      	bne.n	800f266 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f18e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f196:	2b03      	cmp	r3, #3
 800f198:	f040 8098 	bne.w	800f2cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	689a      	ldr	r2, [r3, #8]
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d913      	bls.n	800f1d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	689a      	ldr	r2, [r3, #8]
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	1ad2      	subs	r2, r2, r3
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	68da      	ldr	r2, [r3, #12]
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	689b      	ldr	r3, [r3, #8]
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	bf28      	it	cs
 800f1c2:	4613      	movcs	r3, r2
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	6879      	ldr	r1, [r7, #4]
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f001 f9ae 	bl	801052a <USBD_CtlContinueRx>
 800f1ce:	e07d      	b.n	800f2cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f1d6:	f003 031f 	and.w	r3, r3, #31
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d014      	beq.n	800f208 <USBD_LL_DataOutStage+0x98>
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d81d      	bhi.n	800f21e <USBD_LL_DataOutStage+0xae>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <USBD_LL_DataOutStage+0x7c>
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d003      	beq.n	800f1f2 <USBD_LL_DataOutStage+0x82>
 800f1ea:	e018      	b.n	800f21e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	75bb      	strb	r3, [r7, #22]
            break;
 800f1f0:	e018      	b.n	800f224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f000 fa5e 	bl	800f6be <USBD_CoreFindIF>
 800f202:	4603      	mov	r3, r0
 800f204:	75bb      	strb	r3, [r7, #22]
            break;
 800f206:	e00d      	b.n	800f224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	4619      	mov	r1, r3
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f000 fa60 	bl	800f6d8 <USBD_CoreFindEP>
 800f218:	4603      	mov	r3, r0
 800f21a:	75bb      	strb	r3, [r7, #22]
            break;
 800f21c:	e002      	b.n	800f224 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f21e:	2300      	movs	r3, #0
 800f220:	75bb      	strb	r3, [r7, #22]
            break;
 800f222:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f224:	7dbb      	ldrb	r3, [r7, #22]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d119      	bne.n	800f25e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f230:	b2db      	uxtb	r3, r3
 800f232:	2b03      	cmp	r3, #3
 800f234:	d113      	bne.n	800f25e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f236:	7dba      	ldrb	r2, [r7, #22]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	32ae      	adds	r2, #174	; 0xae
 800f23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00b      	beq.n	800f25e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f246:	7dba      	ldrb	r2, [r7, #22]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f24e:	7dba      	ldrb	r2, [r7, #22]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	32ae      	adds	r2, #174	; 0xae
 800f254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f001 f974 	bl	801054c <USBD_CtlSendStatus>
 800f264:	e032      	b.n	800f2cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f266:	7afb      	ldrb	r3, [r7, #11]
 800f268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	4619      	mov	r1, r3
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f000 fa31 	bl	800f6d8 <USBD_CoreFindEP>
 800f276:	4603      	mov	r3, r0
 800f278:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f27a:	7dbb      	ldrb	r3, [r7, #22]
 800f27c:	2bff      	cmp	r3, #255	; 0xff
 800f27e:	d025      	beq.n	800f2cc <USBD_LL_DataOutStage+0x15c>
 800f280:	7dbb      	ldrb	r3, [r7, #22]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d122      	bne.n	800f2cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b03      	cmp	r3, #3
 800f290:	d117      	bne.n	800f2c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f292:	7dba      	ldrb	r2, [r7, #22]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	32ae      	adds	r2, #174	; 0xae
 800f298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f29c:	699b      	ldr	r3, [r3, #24]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00f      	beq.n	800f2c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f2a2:	7dba      	ldrb	r2, [r7, #22]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f2aa:	7dba      	ldrb	r2, [r7, #22]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	32ae      	adds	r2, #174	; 0xae
 800f2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	7afa      	ldrb	r2, [r7, #11]
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	4798      	blx	r3
 800f2be:	4603      	mov	r3, r0
 800f2c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f2c8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ca:	e000      	b.n	800f2ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b086      	sub	sp, #24
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	60f8      	str	r0, [r7, #12]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	607a      	str	r2, [r7, #4]
 800f2e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f2e4:	7afb      	ldrb	r3, [r7, #11]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d16f      	bne.n	800f3ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	3314      	adds	r3, #20
 800f2ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d15a      	bne.n	800f3b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	689a      	ldr	r2, [r3, #8]
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	429a      	cmp	r2, r3
 800f304:	d914      	bls.n	800f330 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	689a      	ldr	r2, [r3, #8]
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	1ad2      	subs	r2, r2, r3
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	461a      	mov	r2, r3
 800f31a:	6879      	ldr	r1, [r7, #4]
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f001 f8d6 	bl	80104ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f322:	2300      	movs	r3, #0
 800f324:	2200      	movs	r2, #0
 800f326:	2100      	movs	r1, #0
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f006 fbe3 	bl	8015af4 <USBD_LL_PrepareReceive>
 800f32e:	e03f      	b.n	800f3b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	68da      	ldr	r2, [r3, #12]
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d11c      	bne.n	800f376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	685a      	ldr	r2, [r3, #4]
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f344:	429a      	cmp	r2, r3
 800f346:	d316      	bcc.n	800f376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	685a      	ldr	r2, [r3, #4]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f352:	429a      	cmp	r2, r3
 800f354:	d20f      	bcs.n	800f376 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f356:	2200      	movs	r2, #0
 800f358:	2100      	movs	r1, #0
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f001 f8b7 	bl	80104ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f368:	2300      	movs	r3, #0
 800f36a:	2200      	movs	r2, #0
 800f36c:	2100      	movs	r1, #0
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f006 fbc0 	bl	8015af4 <USBD_LL_PrepareReceive>
 800f374:	e01c      	b.n	800f3b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d10f      	bne.n	800f3a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d009      	beq.n	800f3a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3a2:	2180      	movs	r1, #128	; 0x80
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f006 fafb 	bl	80159a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f001 f8e1 	bl	8010572 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d03a      	beq.n	800f430 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	f7ff fe42 	bl	800f044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f3c8:	e032      	b.n	800f430 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f3ca:	7afb      	ldrb	r3, [r7, #11]
 800f3cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f000 f97f 	bl	800f6d8 <USBD_CoreFindEP>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3de:	7dfb      	ldrb	r3, [r7, #23]
 800f3e0:	2bff      	cmp	r3, #255	; 0xff
 800f3e2:	d025      	beq.n	800f430 <USBD_LL_DataInStage+0x15a>
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d122      	bne.n	800f430 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d11c      	bne.n	800f430 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f3f6:	7dfa      	ldrb	r2, [r7, #23]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	32ae      	adds	r2, #174	; 0xae
 800f3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d014      	beq.n	800f430 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f406:	7dfa      	ldrb	r2, [r7, #23]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f40e:	7dfa      	ldrb	r2, [r7, #23]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	32ae      	adds	r2, #174	; 0xae
 800f414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f418:	695b      	ldr	r3, [r3, #20]
 800f41a:	7afa      	ldrb	r2, [r7, #11]
 800f41c:	4611      	mov	r1, r2
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	4798      	blx	r3
 800f422:	4603      	mov	r3, r0
 800f424:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f426:	7dbb      	ldrb	r3, [r7, #22]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f42c:	7dbb      	ldrb	r3, [r7, #22]
 800f42e:	e000      	b.n	800f432 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f430:	2300      	movs	r3, #0
}
 800f432:	4618      	mov	r0, r3
 800f434:	3718      	adds	r7, #24
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b084      	sub	sp, #16
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f472:	2b00      	cmp	r3, #0
 800f474:	d014      	beq.n	800f4a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00e      	beq.n	800f4a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	6852      	ldr	r2, [r2, #4]
 800f48e:	b2d2      	uxtb	r2, r2
 800f490:	4611      	mov	r1, r2
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	4798      	blx	r3
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f49c:	2303      	movs	r3, #3
 800f49e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4a0:	2340      	movs	r3, #64	; 0x40
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f006 fa35 	bl	8015916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2240      	movs	r2, #64	; 0x40
 800f4b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4bc:	2340      	movs	r3, #64	; 0x40
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2180      	movs	r1, #128	; 0x80
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f006 fa27 	bl	8015916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2240      	movs	r2, #64	; 0x40
 800f4d2:	621a      	str	r2, [r3, #32]

  return ret;
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f4de:	b480      	push	{r7}
 800f4e0:	b083      	sub	sp, #12
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	78fa      	ldrb	r2, [r7, #3]
 800f4ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	370c      	adds	r7, #12
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b083      	sub	sp, #12
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2204      	movs	r2, #4
 800f518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f51c:	2300      	movs	r3, #0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	370c      	adds	r7, #12
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr

0800f52a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f52a:	b480      	push	{r7}
 800f52c:	b083      	sub	sp, #12
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	2b04      	cmp	r3, #4
 800f53c:	d106      	bne.n	800f54c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f544:	b2da      	uxtb	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b082      	sub	sp, #8
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	d110      	bne.n	800f590 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f57e:	69db      	ldr	r3, [r3, #28]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d005      	beq.n	800f590 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58a:	69db      	ldr	r3, [r3, #28]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b082      	sub	sp, #8
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	32ae      	adds	r2, #174	; 0xae
 800f5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d101      	bne.n	800f5bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f5b8:	2303      	movs	r3, #3
 800f5ba:	e01c      	b.n	800f5f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	d115      	bne.n	800f5f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	32ae      	adds	r2, #174	; 0xae
 800f5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00b      	beq.n	800f5f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	32ae      	adds	r2, #174	; 0xae
 800f5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ea:	6a1b      	ldr	r3, [r3, #32]
 800f5ec:	78fa      	ldrb	r2, [r7, #3]
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f5fe:	b580      	push	{r7, lr}
 800f600:	b082      	sub	sp, #8
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	460b      	mov	r3, r1
 800f608:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	32ae      	adds	r2, #174	; 0xae
 800f614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d101      	bne.n	800f620 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f61c:	2303      	movs	r3, #3
 800f61e:	e01c      	b.n	800f65a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f626:	b2db      	uxtb	r3, r3
 800f628:	2b03      	cmp	r3, #3
 800f62a:	d115      	bne.n	800f658 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	32ae      	adds	r2, #174	; 0xae
 800f636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00b      	beq.n	800f658 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	32ae      	adds	r2, #174	; 0xae
 800f64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f650:	78fa      	ldrb	r2, [r7, #3]
 800f652:	4611      	mov	r1, r2
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f662:	b480      	push	{r7}
 800f664:	b083      	sub	sp, #12
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00e      	beq.n	800f6b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	6852      	ldr	r2, [r2, #4]
 800f6a2:	b2d2      	uxtb	r2, r2
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	4798      	blx	r3
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f6b0:	2303      	movs	r3, #3
 800f6b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	b083      	sub	sp, #12
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f6ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f6e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	370c      	adds	r7, #12
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b086      	sub	sp, #24
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	885b      	ldrh	r3, [r3, #2]
 800f70e:	b29a      	uxth	r2, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	b29b      	uxth	r3, r3
 800f716:	429a      	cmp	r2, r3
 800f718:	d920      	bls.n	800f75c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f722:	e013      	b.n	800f74c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f724:	f107 030a 	add.w	r3, r7, #10
 800f728:	4619      	mov	r1, r3
 800f72a:	6978      	ldr	r0, [r7, #20]
 800f72c:	f000 f81b 	bl	800f766 <USBD_GetNextDesc>
 800f730:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	785b      	ldrb	r3, [r3, #1]
 800f736:	2b05      	cmp	r3, #5
 800f738:	d108      	bne.n	800f74c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	789b      	ldrb	r3, [r3, #2]
 800f742:	78fa      	ldrb	r2, [r7, #3]
 800f744:	429a      	cmp	r2, r3
 800f746:	d008      	beq.n	800f75a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f748:	2300      	movs	r3, #0
 800f74a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	885b      	ldrh	r3, [r3, #2]
 800f750:	b29a      	uxth	r2, r3
 800f752:	897b      	ldrh	r3, [r7, #10]
 800f754:	429a      	cmp	r2, r3
 800f756:	d8e5      	bhi.n	800f724 <USBD_GetEpDesc+0x32>
 800f758:	e000      	b.n	800f75c <USBD_GetEpDesc+0x6a>
          break;
 800f75a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f75c:	693b      	ldr	r3, [r7, #16]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f766:	b480      	push	{r7}
 800f768:	b085      	sub	sp, #20
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	881a      	ldrh	r2, [r3, #0]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	4413      	add	r3, r2
 800f780:	b29a      	uxth	r2, r3
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	461a      	mov	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4413      	add	r3, r2
 800f790:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f792:	68fb      	ldr	r3, [r7, #12]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b087      	sub	sp, #28
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f7be:	8a3b      	ldrh	r3, [r7, #16]
 800f7c0:	021b      	lsls	r3, r3, #8
 800f7c2:	b21a      	sxth	r2, r3
 800f7c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	b21b      	sxth	r3, r3
 800f7cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f7ce:	89fb      	ldrh	r3, [r7, #14]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	371c      	adds	r7, #28
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7f2:	2b40      	cmp	r3, #64	; 0x40
 800f7f4:	d005      	beq.n	800f802 <USBD_StdDevReq+0x26>
 800f7f6:	2b40      	cmp	r3, #64	; 0x40
 800f7f8:	d857      	bhi.n	800f8aa <USBD_StdDevReq+0xce>
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00f      	beq.n	800f81e <USBD_StdDevReq+0x42>
 800f7fe:	2b20      	cmp	r3, #32
 800f800:	d153      	bne.n	800f8aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	32ae      	adds	r2, #174	; 0xae
 800f80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	6839      	ldr	r1, [r7, #0]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	4798      	blx	r3
 800f818:	4603      	mov	r3, r0
 800f81a:	73fb      	strb	r3, [r7, #15]
      break;
 800f81c:	e04a      	b.n	800f8b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	785b      	ldrb	r3, [r3, #1]
 800f822:	2b09      	cmp	r3, #9
 800f824:	d83b      	bhi.n	800f89e <USBD_StdDevReq+0xc2>
 800f826:	a201      	add	r2, pc, #4	; (adr r2, 800f82c <USBD_StdDevReq+0x50>)
 800f828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82c:	0800f881 	.word	0x0800f881
 800f830:	0800f895 	.word	0x0800f895
 800f834:	0800f89f 	.word	0x0800f89f
 800f838:	0800f88b 	.word	0x0800f88b
 800f83c:	0800f89f 	.word	0x0800f89f
 800f840:	0800f85f 	.word	0x0800f85f
 800f844:	0800f855 	.word	0x0800f855
 800f848:	0800f89f 	.word	0x0800f89f
 800f84c:	0800f877 	.word	0x0800f877
 800f850:	0800f869 	.word	0x0800f869
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f854:	6839      	ldr	r1, [r7, #0]
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fa3c 	bl	800fcd4 <USBD_GetDescriptor>
          break;
 800f85c:	e024      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 fbcb 	bl	800fffc <USBD_SetAddress>
          break;
 800f866:	e01f      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fc0a 	bl	8010084 <USBD_SetConfig>
 800f870:	4603      	mov	r3, r0
 800f872:	73fb      	strb	r3, [r7, #15]
          break;
 800f874:	e018      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fcad 	bl	80101d8 <USBD_GetConfig>
          break;
 800f87e:	e013      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fcde 	bl	8010244 <USBD_GetStatus>
          break;
 800f888:	e00e      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 fd0d 	bl	80102ac <USBD_SetFeature>
          break;
 800f892:	e009      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fd31 	bl	80102fe <USBD_ClrFeature>
          break;
 800f89c:	e004      	b.n	800f8a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f89e:	6839      	ldr	r1, [r7, #0]
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f000 fd88 	bl	80103b6 <USBD_CtlError>
          break;
 800f8a6:	bf00      	nop
      }
      break;
 800f8a8:	e004      	b.n	800f8b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 fd82 	bl	80103b6 <USBD_CtlError>
      break;
 800f8b2:	bf00      	nop
  }

  return ret;
 800f8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop

0800f8c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8d6:	2b40      	cmp	r3, #64	; 0x40
 800f8d8:	d005      	beq.n	800f8e6 <USBD_StdItfReq+0x26>
 800f8da:	2b40      	cmp	r3, #64	; 0x40
 800f8dc:	d852      	bhi.n	800f984 <USBD_StdItfReq+0xc4>
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d001      	beq.n	800f8e6 <USBD_StdItfReq+0x26>
 800f8e2:	2b20      	cmp	r3, #32
 800f8e4:	d14e      	bne.n	800f984 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d840      	bhi.n	800f976 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	889b      	ldrh	r3, [r3, #4]
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d836      	bhi.n	800f96c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	889b      	ldrh	r3, [r3, #4]
 800f902:	b2db      	uxtb	r3, r3
 800f904:	4619      	mov	r1, r3
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff fed9 	bl	800f6be <USBD_CoreFindIF>
 800f90c:	4603      	mov	r3, r0
 800f90e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f910:	7bbb      	ldrb	r3, [r7, #14]
 800f912:	2bff      	cmp	r3, #255	; 0xff
 800f914:	d01d      	beq.n	800f952 <USBD_StdItfReq+0x92>
 800f916:	7bbb      	ldrb	r3, [r7, #14]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d11a      	bne.n	800f952 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f91c:	7bba      	ldrb	r2, [r7, #14]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	32ae      	adds	r2, #174	; 0xae
 800f922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00f      	beq.n	800f94c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f92c:	7bba      	ldrb	r2, [r7, #14]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f934:	7bba      	ldrb	r2, [r7, #14]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	32ae      	adds	r2, #174	; 0xae
 800f93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93e:	689b      	ldr	r3, [r3, #8]
 800f940:	6839      	ldr	r1, [r7, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
 800f946:	4603      	mov	r3, r0
 800f948:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f94a:	e004      	b.n	800f956 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f94c:	2303      	movs	r3, #3
 800f94e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f950:	e001      	b.n	800f956 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f952:	2303      	movs	r3, #3
 800f954:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	88db      	ldrh	r3, [r3, #6]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d110      	bne.n	800f980 <USBD_StdItfReq+0xc0>
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d10d      	bne.n	800f980 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fdf1 	bl	801054c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f96a:	e009      	b.n	800f980 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f96c:	6839      	ldr	r1, [r7, #0]
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 fd21 	bl	80103b6 <USBD_CtlError>
          break;
 800f974:	e004      	b.n	800f980 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fd1c 	bl	80103b6 <USBD_CtlError>
          break;
 800f97e:	e000      	b.n	800f982 <USBD_StdItfReq+0xc2>
          break;
 800f980:	bf00      	nop
      }
      break;
 800f982:	e004      	b.n	800f98e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fd15 	bl	80103b6 <USBD_CtlError>
      break;
 800f98c:	bf00      	nop
  }

  return ret;
 800f98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	889b      	ldrh	r3, [r3, #4]
 800f9aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9b4:	2b40      	cmp	r3, #64	; 0x40
 800f9b6:	d007      	beq.n	800f9c8 <USBD_StdEPReq+0x30>
 800f9b8:	2b40      	cmp	r3, #64	; 0x40
 800f9ba:	f200 817f 	bhi.w	800fcbc <USBD_StdEPReq+0x324>
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d02a      	beq.n	800fa18 <USBD_StdEPReq+0x80>
 800f9c2:	2b20      	cmp	r3, #32
 800f9c4:	f040 817a 	bne.w	800fcbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff fe83 	bl	800f6d8 <USBD_CoreFindEP>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f9d6:	7b7b      	ldrb	r3, [r7, #13]
 800f9d8:	2bff      	cmp	r3, #255	; 0xff
 800f9da:	f000 8174 	beq.w	800fcc6 <USBD_StdEPReq+0x32e>
 800f9de:	7b7b      	ldrb	r3, [r7, #13]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f040 8170 	bne.w	800fcc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f9e6:	7b7a      	ldrb	r2, [r7, #13]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f9ee:	7b7a      	ldrb	r2, [r7, #13]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	32ae      	adds	r2, #174	; 0xae
 800f9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f000 8163 	beq.w	800fcc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fa00:	7b7a      	ldrb	r2, [r7, #13]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	32ae      	adds	r2, #174	; 0xae
 800fa06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	6839      	ldr	r1, [r7, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	4798      	blx	r3
 800fa12:	4603      	mov	r3, r0
 800fa14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fa16:	e156      	b.n	800fcc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	785b      	ldrb	r3, [r3, #1]
 800fa1c:	2b03      	cmp	r3, #3
 800fa1e:	d008      	beq.n	800fa32 <USBD_StdEPReq+0x9a>
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	f300 8145 	bgt.w	800fcb0 <USBD_StdEPReq+0x318>
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f000 809b 	beq.w	800fb62 <USBD_StdEPReq+0x1ca>
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d03c      	beq.n	800faaa <USBD_StdEPReq+0x112>
 800fa30:	e13e      	b.n	800fcb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d002      	beq.n	800fa44 <USBD_StdEPReq+0xac>
 800fa3e:	2b03      	cmp	r3, #3
 800fa40:	d016      	beq.n	800fa70 <USBD_StdEPReq+0xd8>
 800fa42:	e02c      	b.n	800fa9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa44:	7bbb      	ldrb	r3, [r7, #14]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00d      	beq.n	800fa66 <USBD_StdEPReq+0xce>
 800fa4a:	7bbb      	ldrb	r3, [r7, #14]
 800fa4c:	2b80      	cmp	r3, #128	; 0x80
 800fa4e:	d00a      	beq.n	800fa66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa50:	7bbb      	ldrb	r3, [r7, #14]
 800fa52:	4619      	mov	r1, r3
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f005 ffa3 	bl	80159a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa5a:	2180      	movs	r1, #128	; 0x80
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f005 ff9f 	bl	80159a0 <USBD_LL_StallEP>
 800fa62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa64:	e020      	b.n	800faa8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fa66:	6839      	ldr	r1, [r7, #0]
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 fca4 	bl	80103b6 <USBD_CtlError>
              break;
 800fa6e:	e01b      	b.n	800faa8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	885b      	ldrh	r3, [r3, #2]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d10e      	bne.n	800fa96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fa78:	7bbb      	ldrb	r3, [r7, #14]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00b      	beq.n	800fa96 <USBD_StdEPReq+0xfe>
 800fa7e:	7bbb      	ldrb	r3, [r7, #14]
 800fa80:	2b80      	cmp	r3, #128	; 0x80
 800fa82:	d008      	beq.n	800fa96 <USBD_StdEPReq+0xfe>
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	88db      	ldrh	r3, [r3, #6]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d104      	bne.n	800fa96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa8c:	7bbb      	ldrb	r3, [r7, #14]
 800fa8e:	4619      	mov	r1, r3
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f005 ff85 	bl	80159a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fd58 	bl	801054c <USBD_CtlSendStatus>

              break;
 800fa9c:	e004      	b.n	800faa8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 fc88 	bl	80103b6 <USBD_CtlError>
              break;
 800faa6:	bf00      	nop
          }
          break;
 800faa8:	e107      	b.n	800fcba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b02      	cmp	r3, #2
 800fab4:	d002      	beq.n	800fabc <USBD_StdEPReq+0x124>
 800fab6:	2b03      	cmp	r3, #3
 800fab8:	d016      	beq.n	800fae8 <USBD_StdEPReq+0x150>
 800faba:	e04b      	b.n	800fb54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fabc:	7bbb      	ldrb	r3, [r7, #14]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d00d      	beq.n	800fade <USBD_StdEPReq+0x146>
 800fac2:	7bbb      	ldrb	r3, [r7, #14]
 800fac4:	2b80      	cmp	r3, #128	; 0x80
 800fac6:	d00a      	beq.n	800fade <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fac8:	7bbb      	ldrb	r3, [r7, #14]
 800faca:	4619      	mov	r1, r3
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f005 ff67 	bl	80159a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fad2:	2180      	movs	r1, #128	; 0x80
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f005 ff63 	bl	80159a0 <USBD_LL_StallEP>
 800fada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fadc:	e040      	b.n	800fb60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fade:	6839      	ldr	r1, [r7, #0]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 fc68 	bl	80103b6 <USBD_CtlError>
              break;
 800fae6:	e03b      	b.n	800fb60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	885b      	ldrh	r3, [r3, #2]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d136      	bne.n	800fb5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800faf0:	7bbb      	ldrb	r3, [r7, #14]
 800faf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d004      	beq.n	800fb04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fafa:	7bbb      	ldrb	r3, [r7, #14]
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f005 ff6d 	bl	80159de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fd21 	bl	801054c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fb0a:	7bbb      	ldrb	r3, [r7, #14]
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7ff fde2 	bl	800f6d8 <USBD_CoreFindEP>
 800fb14:	4603      	mov	r3, r0
 800fb16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb18:	7b7b      	ldrb	r3, [r7, #13]
 800fb1a:	2bff      	cmp	r3, #255	; 0xff
 800fb1c:	d01f      	beq.n	800fb5e <USBD_StdEPReq+0x1c6>
 800fb1e:	7b7b      	ldrb	r3, [r7, #13]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d11c      	bne.n	800fb5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fb24:	7b7a      	ldrb	r2, [r7, #13]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fb2c:	7b7a      	ldrb	r2, [r7, #13]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	32ae      	adds	r2, #174	; 0xae
 800fb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d010      	beq.n	800fb5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb3c:	7b7a      	ldrb	r2, [r7, #13]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	32ae      	adds	r2, #174	; 0xae
 800fb42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	4798      	blx	r3
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fb52:	e004      	b.n	800fb5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fb54:	6839      	ldr	r1, [r7, #0]
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fc2d 	bl	80103b6 <USBD_CtlError>
              break;
 800fb5c:	e000      	b.n	800fb60 <USBD_StdEPReq+0x1c8>
              break;
 800fb5e:	bf00      	nop
          }
          break;
 800fb60:	e0ab      	b.n	800fcba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	d002      	beq.n	800fb74 <USBD_StdEPReq+0x1dc>
 800fb6e:	2b03      	cmp	r3, #3
 800fb70:	d032      	beq.n	800fbd8 <USBD_StdEPReq+0x240>
 800fb72:	e097      	b.n	800fca4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb74:	7bbb      	ldrb	r3, [r7, #14]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d007      	beq.n	800fb8a <USBD_StdEPReq+0x1f2>
 800fb7a:	7bbb      	ldrb	r3, [r7, #14]
 800fb7c:	2b80      	cmp	r3, #128	; 0x80
 800fb7e:	d004      	beq.n	800fb8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fb80:	6839      	ldr	r1, [r7, #0]
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 fc17 	bl	80103b6 <USBD_CtlError>
                break;
 800fb88:	e091      	b.n	800fcae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	da0b      	bge.n	800fbaa <USBD_StdEPReq+0x212>
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb98:	4613      	mov	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	4413      	add	r3, r2
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	3310      	adds	r3, #16
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	4413      	add	r3, r2
 800fba6:	3304      	adds	r3, #4
 800fba8:	e00b      	b.n	800fbc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	3304      	adds	r3, #4
 800fbc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2202      	movs	r2, #2
 800fbce:	4619      	mov	r1, r3
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 fc61 	bl	8010498 <USBD_CtlSendData>
              break;
 800fbd6:	e06a      	b.n	800fcae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fbd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	da11      	bge.n	800fc04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fbe0:	7bbb      	ldrb	r3, [r7, #14]
 800fbe2:	f003 020f 	and.w	r2, r3, #15
 800fbe6:	6879      	ldr	r1, [r7, #4]
 800fbe8:	4613      	mov	r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	4413      	add	r3, r2
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	440b      	add	r3, r1
 800fbf2:	3324      	adds	r3, #36	; 0x24
 800fbf4:	881b      	ldrh	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d117      	bne.n	800fc2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fbfa:	6839      	ldr	r1, [r7, #0]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fbda 	bl	80103b6 <USBD_CtlError>
                  break;
 800fc02:	e054      	b.n	800fcae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc04:	7bbb      	ldrb	r3, [r7, #14]
 800fc06:	f003 020f 	and.w	r2, r3, #15
 800fc0a:	6879      	ldr	r1, [r7, #4]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	4413      	add	r3, r2
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	440b      	add	r3, r1
 800fc16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d104      	bne.n	800fc2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc20:	6839      	ldr	r1, [r7, #0]
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fbc7 	bl	80103b6 <USBD_CtlError>
                  break;
 800fc28:	e041      	b.n	800fcae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	da0b      	bge.n	800fc4a <USBD_StdEPReq+0x2b2>
 800fc32:	7bbb      	ldrb	r3, [r7, #14]
 800fc34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc38:	4613      	mov	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	3310      	adds	r3, #16
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	4413      	add	r3, r2
 800fc46:	3304      	adds	r3, #4
 800fc48:	e00b      	b.n	800fc62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc4a:	7bbb      	ldrb	r3, [r7, #14]
 800fc4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc50:	4613      	mov	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	4413      	add	r3, r2
 800fc60:	3304      	adds	r3, #4
 800fc62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc64:	7bbb      	ldrb	r3, [r7, #14]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d002      	beq.n	800fc70 <USBD_StdEPReq+0x2d8>
 800fc6a:	7bbb      	ldrb	r3, [r7, #14]
 800fc6c:	2b80      	cmp	r3, #128	; 0x80
 800fc6e:	d103      	bne.n	800fc78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2200      	movs	r2, #0
 800fc74:	601a      	str	r2, [r3, #0]
 800fc76:	e00e      	b.n	800fc96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f005 fecd 	bl	8015a1c <USBD_LL_IsStallEP>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d003      	beq.n	800fc90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	e002      	b.n	800fc96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fbfb 	bl	8010498 <USBD_CtlSendData>
              break;
 800fca2:	e004      	b.n	800fcae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fca4:	6839      	ldr	r1, [r7, #0]
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 fb85 	bl	80103b6 <USBD_CtlError>
              break;
 800fcac:	bf00      	nop
          }
          break;
 800fcae:	e004      	b.n	800fcba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fcb0:	6839      	ldr	r1, [r7, #0]
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 fb7f 	bl	80103b6 <USBD_CtlError>
          break;
 800fcb8:	bf00      	nop
      }
      break;
 800fcba:	e005      	b.n	800fcc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 fb79 	bl	80103b6 <USBD_CtlError>
      break;
 800fcc4:	e000      	b.n	800fcc8 <USBD_StdEPReq+0x330>
      break;
 800fcc6:	bf00      	nop
  }

  return ret;
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
	...

0800fcd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fce2:	2300      	movs	r3, #0
 800fce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fce6:	2300      	movs	r3, #0
 800fce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	885b      	ldrh	r3, [r3, #2]
 800fcee:	0a1b      	lsrs	r3, r3, #8
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	2b0e      	cmp	r3, #14
 800fcf6:	f200 8152 	bhi.w	800ff9e <USBD_GetDescriptor+0x2ca>
 800fcfa:	a201      	add	r2, pc, #4	; (adr r2, 800fd00 <USBD_GetDescriptor+0x2c>)
 800fcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd00:	0800fd71 	.word	0x0800fd71
 800fd04:	0800fd89 	.word	0x0800fd89
 800fd08:	0800fdc9 	.word	0x0800fdc9
 800fd0c:	0800ff9f 	.word	0x0800ff9f
 800fd10:	0800ff9f 	.word	0x0800ff9f
 800fd14:	0800ff3f 	.word	0x0800ff3f
 800fd18:	0800ff6b 	.word	0x0800ff6b
 800fd1c:	0800ff9f 	.word	0x0800ff9f
 800fd20:	0800ff9f 	.word	0x0800ff9f
 800fd24:	0800ff9f 	.word	0x0800ff9f
 800fd28:	0800ff9f 	.word	0x0800ff9f
 800fd2c:	0800ff9f 	.word	0x0800ff9f
 800fd30:	0800ff9f 	.word	0x0800ff9f
 800fd34:	0800ff9f 	.word	0x0800ff9f
 800fd38:	0800fd3d 	.word	0x0800fd3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd42:	69db      	ldr	r3, [r3, #28]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00b      	beq.n	800fd60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd4e:	69db      	ldr	r3, [r3, #28]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	7c12      	ldrb	r2, [r2, #16]
 800fd54:	f107 0108 	add.w	r1, r7, #8
 800fd58:	4610      	mov	r0, r2
 800fd5a:	4798      	blx	r3
 800fd5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd5e:	e126      	b.n	800ffae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd60:	6839      	ldr	r1, [r7, #0]
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 fb27 	bl	80103b6 <USBD_CtlError>
        err++;
 800fd68:	7afb      	ldrb	r3, [r7, #11]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	72fb      	strb	r3, [r7, #11]
      break;
 800fd6e:	e11e      	b.n	800ffae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	7c12      	ldrb	r2, [r2, #16]
 800fd7c:	f107 0108 	add.w	r1, r7, #8
 800fd80:	4610      	mov	r0, r2
 800fd82:	4798      	blx	r3
 800fd84:	60f8      	str	r0, [r7, #12]
      break;
 800fd86:	e112      	b.n	800ffae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	7c1b      	ldrb	r3, [r3, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10d      	bne.n	800fdac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd98:	f107 0208 	add.w	r2, r7, #8
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	4798      	blx	r3
 800fda0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	3301      	adds	r3, #1
 800fda6:	2202      	movs	r2, #2
 800fda8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fdaa:	e100      	b.n	800ffae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb4:	f107 0208 	add.w	r2, r7, #8
 800fdb8:	4610      	mov	r0, r2
 800fdba:	4798      	blx	r3
 800fdbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	701a      	strb	r2, [r3, #0]
      break;
 800fdc6:	e0f2      	b.n	800ffae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	885b      	ldrh	r3, [r3, #2]
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b05      	cmp	r3, #5
 800fdd0:	f200 80ac 	bhi.w	800ff2c <USBD_GetDescriptor+0x258>
 800fdd4:	a201      	add	r2, pc, #4	; (adr r2, 800fddc <USBD_GetDescriptor+0x108>)
 800fdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdda:	bf00      	nop
 800fddc:	0800fdf5 	.word	0x0800fdf5
 800fde0:	0800fe29 	.word	0x0800fe29
 800fde4:	0800fe5d 	.word	0x0800fe5d
 800fde8:	0800fe91 	.word	0x0800fe91
 800fdec:	0800fec5 	.word	0x0800fec5
 800fdf0:	0800fef9 	.word	0x0800fef9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00b      	beq.n	800fe18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	7c12      	ldrb	r2, [r2, #16]
 800fe0c:	f107 0108 	add.w	r1, r7, #8
 800fe10:	4610      	mov	r0, r2
 800fe12:	4798      	blx	r3
 800fe14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe16:	e091      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe18:	6839      	ldr	r1, [r7, #0]
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 facb 	bl	80103b6 <USBD_CtlError>
            err++;
 800fe20:	7afb      	ldrb	r3, [r7, #11]
 800fe22:	3301      	adds	r3, #1
 800fe24:	72fb      	strb	r3, [r7, #11]
          break;
 800fe26:	e089      	b.n	800ff3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00b      	beq.n	800fe4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	7c12      	ldrb	r2, [r2, #16]
 800fe40:	f107 0108 	add.w	r1, r7, #8
 800fe44:	4610      	mov	r0, r2
 800fe46:	4798      	blx	r3
 800fe48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe4a:	e077      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe4c:	6839      	ldr	r1, [r7, #0]
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 fab1 	bl	80103b6 <USBD_CtlError>
            err++;
 800fe54:	7afb      	ldrb	r3, [r7, #11]
 800fe56:	3301      	adds	r3, #1
 800fe58:	72fb      	strb	r3, [r7, #11]
          break;
 800fe5a:	e06f      	b.n	800ff3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00b      	beq.n	800fe80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	7c12      	ldrb	r2, [r2, #16]
 800fe74:	f107 0108 	add.w	r1, r7, #8
 800fe78:	4610      	mov	r0, r2
 800fe7a:	4798      	blx	r3
 800fe7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe7e:	e05d      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fa97 	bl	80103b6 <USBD_CtlError>
            err++;
 800fe88:	7afb      	ldrb	r3, [r7, #11]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	72fb      	strb	r3, [r7, #11]
          break;
 800fe8e:	e055      	b.n	800ff3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00b      	beq.n	800feb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fea2:	691b      	ldr	r3, [r3, #16]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	7c12      	ldrb	r2, [r2, #16]
 800fea8:	f107 0108 	add.w	r1, r7, #8
 800feac:	4610      	mov	r0, r2
 800feae:	4798      	blx	r3
 800feb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800feb2:	e043      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 fa7d 	bl	80103b6 <USBD_CtlError>
            err++;
 800febc:	7afb      	ldrb	r3, [r7, #11]
 800febe:	3301      	adds	r3, #1
 800fec0:	72fb      	strb	r3, [r7, #11]
          break;
 800fec2:	e03b      	b.n	800ff3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feca:	695b      	ldr	r3, [r3, #20]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00b      	beq.n	800fee8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	7c12      	ldrb	r2, [r2, #16]
 800fedc:	f107 0108 	add.w	r1, r7, #8
 800fee0:	4610      	mov	r0, r2
 800fee2:	4798      	blx	r3
 800fee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fee6:	e029      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 fa63 	bl	80103b6 <USBD_CtlError>
            err++;
 800fef0:	7afb      	ldrb	r3, [r7, #11]
 800fef2:	3301      	adds	r3, #1
 800fef4:	72fb      	strb	r3, [r7, #11]
          break;
 800fef6:	e021      	b.n	800ff3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00b      	beq.n	800ff1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff0a:	699b      	ldr	r3, [r3, #24]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	7c12      	ldrb	r2, [r2, #16]
 800ff10:	f107 0108 	add.w	r1, r7, #8
 800ff14:	4610      	mov	r0, r2
 800ff16:	4798      	blx	r3
 800ff18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff1a:	e00f      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff1c:	6839      	ldr	r1, [r7, #0]
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 fa49 	bl	80103b6 <USBD_CtlError>
            err++;
 800ff24:	7afb      	ldrb	r3, [r7, #11]
 800ff26:	3301      	adds	r3, #1
 800ff28:	72fb      	strb	r3, [r7, #11]
          break;
 800ff2a:	e007      	b.n	800ff3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ff2c:	6839      	ldr	r1, [r7, #0]
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f000 fa41 	bl	80103b6 <USBD_CtlError>
          err++;
 800ff34:	7afb      	ldrb	r3, [r7, #11]
 800ff36:	3301      	adds	r3, #1
 800ff38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ff3a:	bf00      	nop
      }
      break;
 800ff3c:	e037      	b.n	800ffae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7c1b      	ldrb	r3, [r3, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d109      	bne.n	800ff5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff4e:	f107 0208 	add.w	r2, r7, #8
 800ff52:	4610      	mov	r0, r2
 800ff54:	4798      	blx	r3
 800ff56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff58:	e029      	b.n	800ffae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 fa2a 	bl	80103b6 <USBD_CtlError>
        err++;
 800ff62:	7afb      	ldrb	r3, [r7, #11]
 800ff64:	3301      	adds	r3, #1
 800ff66:	72fb      	strb	r3, [r7, #11]
      break;
 800ff68:	e021      	b.n	800ffae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	7c1b      	ldrb	r3, [r3, #16]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d10d      	bne.n	800ff8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff7a:	f107 0208 	add.w	r2, r7, #8
 800ff7e:	4610      	mov	r0, r2
 800ff80:	4798      	blx	r3
 800ff82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	3301      	adds	r3, #1
 800ff88:	2207      	movs	r2, #7
 800ff8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff8c:	e00f      	b.n	800ffae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff8e:	6839      	ldr	r1, [r7, #0]
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 fa10 	bl	80103b6 <USBD_CtlError>
        err++;
 800ff96:	7afb      	ldrb	r3, [r7, #11]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	72fb      	strb	r3, [r7, #11]
      break;
 800ff9c:	e007      	b.n	800ffae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ff9e:	6839      	ldr	r1, [r7, #0]
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 fa08 	bl	80103b6 <USBD_CtlError>
      err++;
 800ffa6:	7afb      	ldrb	r3, [r7, #11]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	72fb      	strb	r3, [r7, #11]
      break;
 800ffac:	bf00      	nop
  }

  if (err != 0U)
 800ffae:	7afb      	ldrb	r3, [r7, #11]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d11e      	bne.n	800fff2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	88db      	ldrh	r3, [r3, #6]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d016      	beq.n	800ffea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ffbc:	893b      	ldrh	r3, [r7, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00e      	beq.n	800ffe0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	88da      	ldrh	r2, [r3, #6]
 800ffc6:	893b      	ldrh	r3, [r7, #8]
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	bf28      	it	cs
 800ffcc:	4613      	movcs	r3, r2
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ffd2:	893b      	ldrh	r3, [r7, #8]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	68f9      	ldr	r1, [r7, #12]
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fa5d 	bl	8010498 <USBD_CtlSendData>
 800ffde:	e009      	b.n	800fff4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ffe0:	6839      	ldr	r1, [r7, #0]
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f9e7 	bl	80103b6 <USBD_CtlError>
 800ffe8:	e004      	b.n	800fff4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 faae 	bl	801054c <USBD_CtlSendStatus>
 800fff0:	e000      	b.n	800fff4 <USBD_GetDescriptor+0x320>
    return;
 800fff2:	bf00      	nop
  }
}
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop

0800fffc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	889b      	ldrh	r3, [r3, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d131      	bne.n	8010072 <USBD_SetAddress+0x76>
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	88db      	ldrh	r3, [r3, #6]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d12d      	bne.n	8010072 <USBD_SetAddress+0x76>
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	885b      	ldrh	r3, [r3, #2]
 801001a:	2b7f      	cmp	r3, #127	; 0x7f
 801001c:	d829      	bhi.n	8010072 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	885b      	ldrh	r3, [r3, #2]
 8010022:	b2db      	uxtb	r3, r3
 8010024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010028:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010030:	b2db      	uxtb	r3, r3
 8010032:	2b03      	cmp	r3, #3
 8010034:	d104      	bne.n	8010040 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 f9bc 	bl	80103b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801003e:	e01d      	b.n	801007c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7bfa      	ldrb	r2, [r7, #15]
 8010044:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010048:	7bfb      	ldrb	r3, [r7, #15]
 801004a:	4619      	mov	r1, r3
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f005 fd11 	bl	8015a74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fa7a 	bl	801054c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010058:	7bfb      	ldrb	r3, [r7, #15]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d004      	beq.n	8010068 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2202      	movs	r2, #2
 8010062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010066:	e009      	b.n	801007c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010070:	e004      	b.n	801007c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010072:	6839      	ldr	r1, [r7, #0]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f99e 	bl	80103b6 <USBD_CtlError>
  }
}
 801007a:	bf00      	nop
 801007c:	bf00      	nop
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	885b      	ldrh	r3, [r3, #2]
 8010096:	b2da      	uxtb	r2, r3
 8010098:	4b4e      	ldr	r3, [pc, #312]	; (80101d4 <USBD_SetConfig+0x150>)
 801009a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801009c:	4b4d      	ldr	r3, [pc, #308]	; (80101d4 <USBD_SetConfig+0x150>)
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d905      	bls.n	80100b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f985 	bl	80103b6 <USBD_CtlError>
    return USBD_FAIL;
 80100ac:	2303      	movs	r3, #3
 80100ae:	e08c      	b.n	80101ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2b02      	cmp	r3, #2
 80100ba:	d002      	beq.n	80100c2 <USBD_SetConfig+0x3e>
 80100bc:	2b03      	cmp	r3, #3
 80100be:	d029      	beq.n	8010114 <USBD_SetConfig+0x90>
 80100c0:	e075      	b.n	80101ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80100c2:	4b44      	ldr	r3, [pc, #272]	; (80101d4 <USBD_SetConfig+0x150>)
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d020      	beq.n	801010c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80100ca:	4b42      	ldr	r3, [pc, #264]	; (80101d4 <USBD_SetConfig+0x150>)
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	461a      	mov	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80100d4:	4b3f      	ldr	r3, [pc, #252]	; (80101d4 <USBD_SetConfig+0x150>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	4619      	mov	r1, r3
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f7fe ffbd 	bl	800f05a <USBD_SetClassConfig>
 80100e0:	4603      	mov	r3, r0
 80100e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d008      	beq.n	80100fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 f962 	bl	80103b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2202      	movs	r2, #2
 80100f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80100fa:	e065      	b.n	80101c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f000 fa25 	bl	801054c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2203      	movs	r2, #3
 8010106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801010a:	e05d      	b.n	80101c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fa1d 	bl	801054c <USBD_CtlSendStatus>
      break;
 8010112:	e059      	b.n	80101c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010114:	4b2f      	ldr	r3, [pc, #188]	; (80101d4 <USBD_SetConfig+0x150>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d112      	bne.n	8010142 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2202      	movs	r2, #2
 8010120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010124:	4b2b      	ldr	r3, [pc, #172]	; (80101d4 <USBD_SetConfig+0x150>)
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	461a      	mov	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801012e:	4b29      	ldr	r3, [pc, #164]	; (80101d4 <USBD_SetConfig+0x150>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	4619      	mov	r1, r3
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7fe ffac 	bl	800f092 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 fa06 	bl	801054c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010140:	e042      	b.n	80101c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010142:	4b24      	ldr	r3, [pc, #144]	; (80101d4 <USBD_SetConfig+0x150>)
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	429a      	cmp	r2, r3
 801014e:	d02a      	beq.n	80101a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	b2db      	uxtb	r3, r3
 8010156:	4619      	mov	r1, r3
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7fe ff9a 	bl	800f092 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801015e:	4b1d      	ldr	r3, [pc, #116]	; (80101d4 <USBD_SetConfig+0x150>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	461a      	mov	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010168:	4b1a      	ldr	r3, [pc, #104]	; (80101d4 <USBD_SetConfig+0x150>)
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fe ff73 	bl	800f05a <USBD_SetClassConfig>
 8010174:	4603      	mov	r3, r0
 8010176:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010178:	7bfb      	ldrb	r3, [r7, #15]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00f      	beq.n	801019e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801017e:	6839      	ldr	r1, [r7, #0]
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f918 	bl	80103b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	b2db      	uxtb	r3, r3
 801018c:	4619      	mov	r1, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7fe ff7f 	bl	800f092 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2202      	movs	r2, #2
 8010198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801019c:	e014      	b.n	80101c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 f9d4 	bl	801054c <USBD_CtlSendStatus>
      break;
 80101a4:	e010      	b.n	80101c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f9d0 	bl	801054c <USBD_CtlSendStatus>
      break;
 80101ac:	e00c      	b.n	80101c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80101ae:	6839      	ldr	r1, [r7, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f900 	bl	80103b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101b6:	4b07      	ldr	r3, [pc, #28]	; (80101d4 <USBD_SetConfig+0x150>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	4619      	mov	r1, r3
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7fe ff68 	bl	800f092 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80101c2:	2303      	movs	r3, #3
 80101c4:	73fb      	strb	r3, [r7, #15]
      break;
 80101c6:	bf00      	nop
  }

  return ret;
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	20000f60 	.word	0x20000f60

080101d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	88db      	ldrh	r3, [r3, #6]
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d004      	beq.n	80101f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80101ea:	6839      	ldr	r1, [r7, #0]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 f8e2 	bl	80103b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80101f2:	e023      	b.n	801023c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	2b02      	cmp	r3, #2
 80101fe:	dc02      	bgt.n	8010206 <USBD_GetConfig+0x2e>
 8010200:	2b00      	cmp	r3, #0
 8010202:	dc03      	bgt.n	801020c <USBD_GetConfig+0x34>
 8010204:	e015      	b.n	8010232 <USBD_GetConfig+0x5a>
 8010206:	2b03      	cmp	r3, #3
 8010208:	d00b      	beq.n	8010222 <USBD_GetConfig+0x4a>
 801020a:	e012      	b.n	8010232 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3308      	adds	r3, #8
 8010216:	2201      	movs	r2, #1
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f000 f93c 	bl	8010498 <USBD_CtlSendData>
        break;
 8010220:	e00c      	b.n	801023c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	3304      	adds	r3, #4
 8010226:	2201      	movs	r2, #1
 8010228:	4619      	mov	r1, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f934 	bl	8010498 <USBD_CtlSendData>
        break;
 8010230:	e004      	b.n	801023c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 f8be 	bl	80103b6 <USBD_CtlError>
        break;
 801023a:	bf00      	nop
}
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010254:	b2db      	uxtb	r3, r3
 8010256:	3b01      	subs	r3, #1
 8010258:	2b02      	cmp	r3, #2
 801025a:	d81e      	bhi.n	801029a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	88db      	ldrh	r3, [r3, #6]
 8010260:	2b02      	cmp	r3, #2
 8010262:	d004      	beq.n	801026e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010264:	6839      	ldr	r1, [r7, #0]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 f8a5 	bl	80103b6 <USBD_CtlError>
        break;
 801026c:	e01a      	b.n	80102a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2201      	movs	r2, #1
 8010272:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801027a:	2b00      	cmp	r3, #0
 801027c:	d005      	beq.n	801028a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	f043 0202 	orr.w	r2, r3, #2
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	330c      	adds	r3, #12
 801028e:	2202      	movs	r2, #2
 8010290:	4619      	mov	r1, r3
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 f900 	bl	8010498 <USBD_CtlSendData>
      break;
 8010298:	e004      	b.n	80102a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801029a:	6839      	ldr	r1, [r7, #0]
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 f88a 	bl	80103b6 <USBD_CtlError>
      break;
 80102a2:	bf00      	nop
  }
}
 80102a4:	bf00      	nop
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	885b      	ldrh	r3, [r3, #2]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d107      	bne.n	80102ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 f940 	bl	801054c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80102cc:	e013      	b.n	80102f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	885b      	ldrh	r3, [r3, #2]
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	d10b      	bne.n	80102ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	889b      	ldrh	r3, [r3, #4]
 80102da:	0a1b      	lsrs	r3, r3, #8
 80102dc:	b29b      	uxth	r3, r3
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 f930 	bl	801054c <USBD_CtlSendStatus>
}
 80102ec:	e003      	b.n	80102f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80102ee:	6839      	ldr	r1, [r7, #0]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 f860 	bl	80103b6 <USBD_CtlError>
}
 80102f6:	bf00      	nop
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b082      	sub	sp, #8
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801030e:	b2db      	uxtb	r3, r3
 8010310:	3b01      	subs	r3, #1
 8010312:	2b02      	cmp	r3, #2
 8010314:	d80b      	bhi.n	801032e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	885b      	ldrh	r3, [r3, #2]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d10c      	bne.n	8010338 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 f910 	bl	801054c <USBD_CtlSendStatus>
      }
      break;
 801032c:	e004      	b.n	8010338 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 f840 	bl	80103b6 <USBD_CtlError>
      break;
 8010336:	e000      	b.n	801033a <USBD_ClrFeature+0x3c>
      break;
 8010338:	bf00      	nop
  }
}
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b084      	sub	sp, #16
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	781a      	ldrb	r2, [r3, #0]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3301      	adds	r3, #1
 801035c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	781a      	ldrb	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	3301      	adds	r3, #1
 801036a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff fa17 	bl	800f7a0 <SWAPBYTE>
 8010372:	4603      	mov	r3, r0
 8010374:	461a      	mov	r2, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3301      	adds	r3, #1
 801037e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	3301      	adds	r3, #1
 8010384:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f7ff fa0a 	bl	800f7a0 <SWAPBYTE>
 801038c:	4603      	mov	r3, r0
 801038e:	461a      	mov	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	3301      	adds	r3, #1
 8010398:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	3301      	adds	r3, #1
 801039e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f7ff f9fd 	bl	800f7a0 <SWAPBYTE>
 80103a6:	4603      	mov	r3, r0
 80103a8:	461a      	mov	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	80da      	strh	r2, [r3, #6]
}
 80103ae:	bf00      	nop
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103c0:	2180      	movs	r1, #128	; 0x80
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f005 faec 	bl	80159a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103c8:	2100      	movs	r1, #0
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f005 fae8 	bl	80159a0 <USBD_LL_StallEP>
}
 80103d0:	bf00      	nop
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80103e4:	2300      	movs	r3, #0
 80103e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d036      	beq.n	801045c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80103f2:	6938      	ldr	r0, [r7, #16]
 80103f4:	f000 f836 	bl	8010464 <USBD_GetLen>
 80103f8:	4603      	mov	r3, r0
 80103fa:	3301      	adds	r3, #1
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	005b      	lsls	r3, r3, #1
 8010400:	b29a      	uxth	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010406:	7dfb      	ldrb	r3, [r7, #23]
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	4413      	add	r3, r2
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	7812      	ldrb	r2, [r2, #0]
 8010410:	701a      	strb	r2, [r3, #0]
  idx++;
 8010412:	7dfb      	ldrb	r3, [r7, #23]
 8010414:	3301      	adds	r3, #1
 8010416:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010418:	7dfb      	ldrb	r3, [r7, #23]
 801041a:	68ba      	ldr	r2, [r7, #8]
 801041c:	4413      	add	r3, r2
 801041e:	2203      	movs	r2, #3
 8010420:	701a      	strb	r2, [r3, #0]
  idx++;
 8010422:	7dfb      	ldrb	r3, [r7, #23]
 8010424:	3301      	adds	r3, #1
 8010426:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010428:	e013      	b.n	8010452 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801042a:	7dfb      	ldrb	r3, [r7, #23]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	4413      	add	r3, r2
 8010430:	693a      	ldr	r2, [r7, #16]
 8010432:	7812      	ldrb	r2, [r2, #0]
 8010434:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	3301      	adds	r3, #1
 801043a:	613b      	str	r3, [r7, #16]
    idx++;
 801043c:	7dfb      	ldrb	r3, [r7, #23]
 801043e:	3301      	adds	r3, #1
 8010440:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	4413      	add	r3, r2
 8010448:	2200      	movs	r2, #0
 801044a:	701a      	strb	r2, [r3, #0]
    idx++;
 801044c:	7dfb      	ldrb	r3, [r7, #23]
 801044e:	3301      	adds	r3, #1
 8010450:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1e7      	bne.n	801042a <USBD_GetString+0x52>
 801045a:	e000      	b.n	801045e <USBD_GetString+0x86>
    return;
 801045c:	bf00      	nop
  }
}
 801045e:	3718      	adds	r7, #24
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010464:	b480      	push	{r7}
 8010466:	b085      	sub	sp, #20
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801046c:	2300      	movs	r3, #0
 801046e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010474:	e005      	b.n	8010482 <USBD_GetLen+0x1e>
  {
    len++;
 8010476:	7bfb      	ldrb	r3, [r7, #15]
 8010478:	3301      	adds	r3, #1
 801047a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	3301      	adds	r3, #1
 8010480:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1f5      	bne.n	8010476 <USBD_GetLen+0x12>
  }

  return len;
 801048a:	7bfb      	ldrb	r3, [r7, #15]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3714      	adds	r7, #20
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2202      	movs	r2, #2
 80104a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	2100      	movs	r1, #0
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f005 faf7 	bl	8015ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	60f8      	str	r0, [r7, #12]
 80104d6:	60b9      	str	r1, [r7, #8]
 80104d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	2100      	movs	r1, #0
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f005 fae6 	bl	8015ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2203      	movs	r2, #3
 8010500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68ba      	ldr	r2, [r7, #8]
 8010518:	2100      	movs	r1, #0
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f005 faea 	bl	8015af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010520:	2300      	movs	r3, #0
}
 8010522:	4618      	mov	r0, r3
 8010524:	3710      	adds	r7, #16
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}

0801052a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801052a:	b580      	push	{r7, lr}
 801052c:	b084      	sub	sp, #16
 801052e:	af00      	add	r7, sp, #0
 8010530:	60f8      	str	r0, [r7, #12]
 8010532:	60b9      	str	r1, [r7, #8]
 8010534:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	2100      	movs	r1, #0
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f005 fad9 	bl	8015af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010542:	2300      	movs	r3, #0
}
 8010544:	4618      	mov	r0, r3
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2204      	movs	r2, #4
 8010558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801055c:	2300      	movs	r3, #0
 801055e:	2200      	movs	r2, #0
 8010560:	2100      	movs	r1, #0
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f005 faa5 	bl	8015ab2 <USBD_LL_Transmit>

  return USBD_OK;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b082      	sub	sp, #8
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2205      	movs	r2, #5
 801057e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010582:	2300      	movs	r3, #0
 8010584:	2200      	movs	r2, #0
 8010586:	2100      	movs	r1, #0
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f005 fab3 	bl	8015af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8010598:	b590      	push	{r4, r7, lr}
 801059a:	b089      	sub	sp, #36	; 0x24
 801059c:	af04      	add	r7, sp, #16
 801059e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80105a0:	2301      	movs	r3, #1
 80105a2:	2202      	movs	r2, #2
 80105a4:	2102      	movs	r1, #2
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 fc85 	bl	8010eb6 <USBH_FindInterface>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	2bff      	cmp	r3, #255	; 0xff
 80105b4:	d002      	beq.n	80105bc <USBH_CDC_InterfaceInit+0x24>
 80105b6:	7bfb      	ldrb	r3, [r7, #15]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d901      	bls.n	80105c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80105bc:	2302      	movs	r3, #2
 80105be:	e13d      	b.n	801083c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	4619      	mov	r1, r3
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fc5a 	bl	8010e7e <USBH_SelectInterface>
 80105ca:	4603      	mov	r3, r0
 80105cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80105ce:	7bbb      	ldrb	r3, [r7, #14]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d001      	beq.n	80105d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80105d4:	2302      	movs	r3, #2
 80105d6:	e131      	b.n	801083c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80105de:	2050      	movs	r0, #80	; 0x50
 80105e0:	f005 fe82 	bl	80162e8 <malloc>
 80105e4:	4603      	mov	r3, r0
 80105e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80105ee:	69db      	ldr	r3, [r3, #28]
 80105f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d101      	bne.n	80105fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80105f8:	2302      	movs	r3, #2
 80105fa:	e11f      	b.n	801083c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80105fc:	2250      	movs	r2, #80	; 0x50
 80105fe:	2100      	movs	r1, #0
 8010600:	68b8      	ldr	r0, [r7, #8]
 8010602:	f005 fe8f 	bl	8016324 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010606:	7bfb      	ldrb	r3, [r7, #15]
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	211a      	movs	r1, #26
 801060c:	fb01 f303 	mul.w	r3, r1, r3
 8010610:	4413      	add	r3, r2
 8010612:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	b25b      	sxtb	r3, r3
 801061a:	2b00      	cmp	r3, #0
 801061c:	da15      	bge.n	801064a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801061e:	7bfb      	ldrb	r3, [r7, #15]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	211a      	movs	r1, #26
 8010624:	fb01 f303 	mul.w	r3, r1, r3
 8010628:	4413      	add	r3, r2
 801062a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801062e:	781a      	ldrb	r2, [r3, #0]
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010634:	7bfb      	ldrb	r3, [r7, #15]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	211a      	movs	r1, #26
 801063a:	fb01 f303 	mul.w	r3, r1, r3
 801063e:	4413      	add	r3, r2
 8010640:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010644:	881a      	ldrh	r2, [r3, #0]
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	785b      	ldrb	r3, [r3, #1]
 801064e:	4619      	mov	r1, r3
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f001 ff26 	bl	80124a2 <USBH_AllocPipe>
 8010656:	4603      	mov	r3, r0
 8010658:	461a      	mov	r2, r3
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	7819      	ldrb	r1, [r3, #0]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	7858      	ldrb	r0, [r3, #1]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	8952      	ldrh	r2, [r2, #10]
 8010676:	9202      	str	r2, [sp, #8]
 8010678:	2203      	movs	r2, #3
 801067a:	9201      	str	r2, [sp, #4]
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	4623      	mov	r3, r4
 8010680:	4602      	mov	r2, r0
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f001 fede 	bl	8012444 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2200      	movs	r2, #0
 801068e:	4619      	mov	r1, r3
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f005 fd77 	bl	8016184 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8010696:	2300      	movs	r3, #0
 8010698:	2200      	movs	r2, #0
 801069a:	210a      	movs	r1, #10
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f000 fc0a 	bl	8010eb6 <USBH_FindInterface>
 80106a2:	4603      	mov	r3, r0
 80106a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	2bff      	cmp	r3, #255	; 0xff
 80106aa:	d002      	beq.n	80106b2 <USBH_CDC_InterfaceInit+0x11a>
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d901      	bls.n	80106b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80106b2:	2302      	movs	r3, #2
 80106b4:	e0c2      	b.n	801083c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	211a      	movs	r1, #26
 80106bc:	fb01 f303 	mul.w	r3, r1, r3
 80106c0:	4413      	add	r3, r2
 80106c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	b25b      	sxtb	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	da16      	bge.n	80106fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	211a      	movs	r1, #26
 80106d4:	fb01 f303 	mul.w	r3, r1, r3
 80106d8:	4413      	add	r3, r2
 80106da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80106de:	781a      	ldrb	r2, [r3, #0]
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	211a      	movs	r1, #26
 80106ea:	fb01 f303 	mul.w	r3, r1, r3
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80106f4:	881a      	ldrh	r2, [r3, #0]
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	835a      	strh	r2, [r3, #26]
 80106fa:	e015      	b.n	8010728 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	211a      	movs	r1, #26
 8010702:	fb01 f303 	mul.w	r3, r1, r3
 8010706:	4413      	add	r3, r2
 8010708:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801070c:	781a      	ldrb	r2, [r3, #0]
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010712:	7bfb      	ldrb	r3, [r7, #15]
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	211a      	movs	r1, #26
 8010718:	fb01 f303 	mul.w	r3, r1, r3
 801071c:	4413      	add	r3, r2
 801071e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010722:	881a      	ldrh	r2, [r3, #0]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	211a      	movs	r1, #26
 801072e:	fb01 f303 	mul.w	r3, r1, r3
 8010732:	4413      	add	r3, r2
 8010734:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	b25b      	sxtb	r3, r3
 801073c:	2b00      	cmp	r3, #0
 801073e:	da16      	bge.n	801076e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	211a      	movs	r1, #26
 8010746:	fb01 f303 	mul.w	r3, r1, r3
 801074a:	4413      	add	r3, r2
 801074c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010750:	781a      	ldrb	r2, [r3, #0]
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010756:	7bfb      	ldrb	r3, [r7, #15]
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	211a      	movs	r1, #26
 801075c:	fb01 f303 	mul.w	r3, r1, r3
 8010760:	4413      	add	r3, r2
 8010762:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010766:	881a      	ldrh	r2, [r3, #0]
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	835a      	strh	r2, [r3, #26]
 801076c:	e015      	b.n	801079a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801076e:	7bfb      	ldrb	r3, [r7, #15]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	211a      	movs	r1, #26
 8010774:	fb01 f303 	mul.w	r3, r1, r3
 8010778:	4413      	add	r3, r2
 801077a:	f203 3356 	addw	r3, r3, #854	; 0x356
 801077e:	781a      	ldrb	r2, [r3, #0]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010784:	7bfb      	ldrb	r3, [r7, #15]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	211a      	movs	r1, #26
 801078a:	fb01 f303 	mul.w	r3, r1, r3
 801078e:	4413      	add	r3, r2
 8010790:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010794:	881a      	ldrh	r2, [r3, #0]
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	7b9b      	ldrb	r3, [r3, #14]
 801079e:	4619      	mov	r1, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f001 fe7e 	bl	80124a2 <USBH_AllocPipe>
 80107a6:	4603      	mov	r3, r0
 80107a8:	461a      	mov	r2, r3
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	7bdb      	ldrb	r3, [r3, #15]
 80107b2:	4619      	mov	r1, r3
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f001 fe74 	bl	80124a2 <USBH_AllocPipe>
 80107ba:	4603      	mov	r3, r0
 80107bc:	461a      	mov	r2, r3
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	7b59      	ldrb	r1, [r3, #13]
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	7b98      	ldrb	r0, [r3, #14]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80107d6:	68ba      	ldr	r2, [r7, #8]
 80107d8:	8b12      	ldrh	r2, [r2, #24]
 80107da:	9202      	str	r2, [sp, #8]
 80107dc:	2202      	movs	r2, #2
 80107de:	9201      	str	r2, [sp, #4]
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	4623      	mov	r3, r4
 80107e4:	4602      	mov	r2, r0
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f001 fe2c 	bl	8012444 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	7b19      	ldrb	r1, [r3, #12]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	7bd8      	ldrb	r0, [r3, #15]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	8b52      	ldrh	r2, [r2, #26]
 8010804:	9202      	str	r2, [sp, #8]
 8010806:	2202      	movs	r2, #2
 8010808:	9201      	str	r2, [sp, #4]
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	4623      	mov	r3, r4
 801080e:	4602      	mov	r2, r0
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f001 fe17 	bl	8012444 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	7b5b      	ldrb	r3, [r3, #13]
 8010822:	2200      	movs	r2, #0
 8010824:	4619      	mov	r1, r3
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f005 fcac 	bl	8016184 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	7b1b      	ldrb	r3, [r3, #12]
 8010830:	2200      	movs	r2, #0
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f005 fca5 	bl	8016184 <USBH_LL_SetToggle>

  return USBH_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3714      	adds	r7, #20
 8010840:	46bd      	mov	sp, r7
 8010842:	bd90      	pop	{r4, r7, pc}

08010844 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010852:	69db      	ldr	r3, [r3, #28]
 8010854:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00e      	beq.n	801087c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	4619      	mov	r1, r3
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f001 fe0c 	bl	8012482 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	4619      	mov	r1, r3
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f001 fe37 	bl	80124e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2200      	movs	r2, #0
 801087a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	7b1b      	ldrb	r3, [r3, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00e      	beq.n	80108a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	7b1b      	ldrb	r3, [r3, #12]
 8010888:	4619      	mov	r1, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f001 fdf9 	bl	8012482 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	7b1b      	ldrb	r3, [r3, #12]
 8010894:	4619      	mov	r1, r3
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f001 fe24 	bl	80124e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	7b5b      	ldrb	r3, [r3, #13]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00e      	beq.n	80108c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	7b5b      	ldrb	r3, [r3, #13]
 80108ae:	4619      	mov	r1, r3
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f001 fde6 	bl	8012482 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	7b5b      	ldrb	r3, [r3, #13]
 80108ba:	4619      	mov	r1, r3
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f001 fe11 	bl	80124e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2200      	movs	r2, #0
 80108c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80108ce:	69db      	ldr	r3, [r3, #28]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00b      	beq.n	80108ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80108da:	69db      	ldr	r3, [r3, #28]
 80108dc:	4618      	mov	r0, r3
 80108de:	f005 fd0b 	bl	80162f8 <free>
    phost->pActiveClass->pData = 0U;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80108e8:	2200      	movs	r2, #0
 80108ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010904:	69db      	ldr	r3, [r3, #28]
 8010906:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	3340      	adds	r3, #64	; 0x40
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f8b1 	bl	8010a76 <GetLineCoding>
 8010914:	4603      	mov	r3, r0
 8010916:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010918:	7afb      	ldrb	r3, [r7, #11]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d105      	bne.n	801092a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010924:	2102      	movs	r1, #2
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801092a:	7afb      	ldrb	r3, [r7, #11]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3710      	adds	r7, #16
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801093c:	2301      	movs	r3, #1
 801093e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801094a:	69db      	ldr	r3, [r3, #28]
 801094c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010954:	2b04      	cmp	r3, #4
 8010956:	d877      	bhi.n	8010a48 <USBH_CDC_Process+0x114>
 8010958:	a201      	add	r2, pc, #4	; (adr r2, 8010960 <USBH_CDC_Process+0x2c>)
 801095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801095e:	bf00      	nop
 8010960:	08010975 	.word	0x08010975
 8010964:	0801097b 	.word	0x0801097b
 8010968:	080109ab 	.word	0x080109ab
 801096c:	08010a1f 	.word	0x08010a1f
 8010970:	08010a2d 	.word	0x08010a2d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010974:	2300      	movs	r3, #0
 8010976:	73fb      	strb	r3, [r7, #15]
      break;
 8010978:	e06d      	b.n	8010a56 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801097e:	4619      	mov	r1, r3
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f897 	bl	8010ab4 <SetLineCoding>
 8010986:	4603      	mov	r3, r0
 8010988:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801098a:	7bbb      	ldrb	r3, [r7, #14]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d104      	bne.n	801099a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	2202      	movs	r2, #2
 8010994:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010998:	e058      	b.n	8010a4c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801099a:	7bbb      	ldrb	r3, [r7, #14]
 801099c:	2b01      	cmp	r3, #1
 801099e:	d055      	beq.n	8010a4c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	2204      	movs	r2, #4
 80109a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80109a8:	e050      	b.n	8010a4c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	3340      	adds	r3, #64	; 0x40
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 f860 	bl	8010a76 <GetLineCoding>
 80109b6:	4603      	mov	r3, r0
 80109b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80109ba:	7bbb      	ldrb	r3, [r7, #14]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d126      	bne.n	8010a0e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109d2:	791b      	ldrb	r3, [r3, #4]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d13b      	bne.n	8010a50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d133      	bne.n	8010a50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d12b      	bne.n	8010a50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a00:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d124      	bne.n	8010a50 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f958 	bl	8010cbc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010a0c:	e020      	b.n	8010a50 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010a0e:	7bbb      	ldrb	r3, [r7, #14]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d01d      	beq.n	8010a50 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2204      	movs	r2, #4
 8010a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010a1c:	e018      	b.n	8010a50 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f867 	bl	8010af2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 f8da 	bl	8010bde <CDC_ProcessReception>
      break;
 8010a2a:	e014      	b.n	8010a56 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f001 f80f 	bl	8011a52 <USBH_ClrFeature>
 8010a34:	4603      	mov	r3, r0
 8010a36:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10a      	bne.n	8010a54 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2200      	movs	r2, #0
 8010a42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8010a46:	e005      	b.n	8010a54 <USBH_CDC_Process+0x120>

    default:
      break;
 8010a48:	bf00      	nop
 8010a4a:	e004      	b.n	8010a56 <USBH_CDC_Process+0x122>
      break;
 8010a4c:	bf00      	nop
 8010a4e:	e002      	b.n	8010a56 <USBH_CDC_Process+0x122>
      break;
 8010a50:	bf00      	nop
 8010a52:	e000      	b.n	8010a56 <USBH_CDC_Process+0x122>
      break;
 8010a54:	bf00      	nop

  }

  return status;
 8010a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3710      	adds	r7, #16
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010a68:	2300      	movs	r3, #0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	370c      	adds	r7, #12
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b082      	sub	sp, #8
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	22a1      	movs	r2, #161	; 0xa1
 8010a84:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2221      	movs	r2, #33	; 0x21
 8010a8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2207      	movs	r2, #7
 8010a9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	2207      	movs	r2, #7
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f001 fa7b 	bl	8011fa0 <USBH_CtlReq>
 8010aaa:	4603      	mov	r3, r0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2221      	movs	r2, #33	; 0x21
 8010ac2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2220      	movs	r2, #32
 8010ac8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2207      	movs	r2, #7
 8010ada:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	2207      	movs	r2, #7
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f001 fa5c 	bl	8011fa0 <USBH_CtlReq>
 8010ae8:	4603      	mov	r3, r0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3708      	adds	r7, #8
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b086      	sub	sp, #24
 8010af6:	af02      	add	r7, sp, #8
 8010af8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b00:	69db      	ldr	r3, [r3, #28]
 8010b02:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010b04:	2300      	movs	r3, #0
 8010b06:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d002      	beq.n	8010b18 <CDC_ProcessTransmission+0x26>
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d023      	beq.n	8010b5e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8010b16:	e05e      	b.n	8010bd6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	8b12      	ldrh	r2, [r2, #24]
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d90b      	bls.n	8010b3c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	69d9      	ldr	r1, [r3, #28]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	8b1a      	ldrh	r2, [r3, #24]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	7b5b      	ldrb	r3, [r3, #13]
 8010b30:	2001      	movs	r0, #1
 8010b32:	9000      	str	r0, [sp, #0]
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f001 fc42 	bl	80123be <USBH_BulkSendData>
 8010b3a:	e00b      	b.n	8010b54 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	7b5b      	ldrb	r3, [r3, #13]
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	9000      	str	r0, [sp, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f001 fc35 	bl	80123be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2202      	movs	r2, #2
 8010b58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010b5c:	e03b      	b.n	8010bd6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	7b5b      	ldrb	r3, [r3, #13]
 8010b62:	4619      	mov	r1, r3
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f005 fae3 	bl	8016130 <USBH_LL_GetURBState>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010b6e:	7afb      	ldrb	r3, [r7, #11]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d128      	bne.n	8010bc6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	8b12      	ldrh	r2, [r2, #24]
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d90e      	bls.n	8010b9e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	8b12      	ldrh	r2, [r2, #24]
 8010b88:	1a9a      	subs	r2, r3, r2
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	69db      	ldr	r3, [r3, #28]
 8010b92:	68fa      	ldr	r2, [r7, #12]
 8010b94:	8b12      	ldrh	r2, [r2, #24]
 8010b96:	441a      	add	r2, r3
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	61da      	str	r2, [r3, #28]
 8010b9c:	e002      	b.n	8010ba4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d004      	beq.n	8010bb6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2201      	movs	r2, #1
 8010bb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010bb4:	e00e      	b.n	8010bd4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f868 	bl	8010c94 <USBH_CDC_TransmitCallback>
      break;
 8010bc4:	e006      	b.n	8010bd4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8010bc6:	7afb      	ldrb	r3, [r7, #11]
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	d103      	bne.n	8010bd4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2201      	movs	r2, #1
 8010bd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010bd4:	bf00      	nop
  }
}
 8010bd6:	bf00      	nop
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b086      	sub	sp, #24
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bec:	69db      	ldr	r3, [r3, #28]
 8010bee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010bfa:	2b03      	cmp	r3, #3
 8010bfc:	d002      	beq.n	8010c04 <CDC_ProcessReception+0x26>
 8010bfe:	2b04      	cmp	r3, #4
 8010c00:	d00e      	beq.n	8010c20 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010c02:	e043      	b.n	8010c8c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	6a19      	ldr	r1, [r3, #32]
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	8b5a      	ldrh	r2, [r3, #26]
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	7b1b      	ldrb	r3, [r3, #12]
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f001 fbf9 	bl	8012408 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	2204      	movs	r2, #4
 8010c1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010c1e:	e035      	b.n	8010c8c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	7b1b      	ldrb	r3, [r3, #12]
 8010c24:	4619      	mov	r1, r3
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f005 fa82 	bl	8016130 <USBH_LL_GetURBState>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010c30:	7cfb      	ldrb	r3, [r7, #19]
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	d129      	bne.n	8010c8a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	7b1b      	ldrb	r3, [r3, #12]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f005 f9e5 	bl	801600c <USBH_LL_GetLastXferSize>
 8010c42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d016      	beq.n	8010c7c <CDC_ProcessReception+0x9e>
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	8b5b      	ldrh	r3, [r3, #26]
 8010c52:	461a      	mov	r2, r3
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d910      	bls.n	8010c7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	1ad2      	subs	r2, r2, r3
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	6a1a      	ldr	r2, [r3, #32]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	441a      	add	r2, r3
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	2203      	movs	r2, #3
 8010c76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010c7a:	e006      	b.n	8010c8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 f80f 	bl	8010ca8 <USBH_CDC_ReceiveCallback>
      break;
 8010c8a:	bf00      	nop
  }
}
 8010c8c:	bf00      	nop
 8010c8e:	3718      	adds	r7, #24
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010cb0:	bf00      	nop
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010cc4:	bf00      	nop
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d101      	bne.n	8010ce8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	e029      	b.n	8010d3c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	79fa      	ldrb	r2, [r7, #7]
 8010cec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 f81f 	bl	8010d44 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2200      	movs	r2, #0
 8010d22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d003      	beq.n	8010d34 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f005 f8b5 	bl	8015ea4 <USBH_LL_Init>

  return USBH_OK;
 8010d3a:	2300      	movs	r3, #0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010d50:	2300      	movs	r3, #0
 8010d52:	60fb      	str	r3, [r7, #12]
 8010d54:	e009      	b.n	8010d6a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	33e0      	adds	r3, #224	; 0xe0
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	2200      	movs	r2, #0
 8010d62:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	3301      	adds	r3, #1
 8010d68:	60fb      	str	r3, [r7, #12]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2b0f      	cmp	r3, #15
 8010d6e:	d9f2      	bls.n	8010d56 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010d70:	2300      	movs	r3, #0
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	e009      	b.n	8010d8a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010d80:	2200      	movs	r2, #0
 8010d82:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	3301      	adds	r3, #1
 8010d88:	60fb      	str	r3, [r7, #12]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d90:	d3f1      	bcc.n	8010d76 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2200      	movs	r2, #0
 8010d96:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2201      	movs	r2, #1
 8010db0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2240      	movs	r2, #64	; 0x40
 8010db6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	331c      	adds	r3, #28
 8010de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010de6:	2100      	movs	r1, #0
 8010de8:	4618      	mov	r0, r3
 8010dea:	f005 fa9b 	bl	8016324 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f005 fa92 	bl	8016324 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f203 3326 	addw	r3, r3, #806	; 0x326
 8010e06:	2212      	movs	r2, #18
 8010e08:	2100      	movs	r1, #0
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f005 fa8a 	bl	8016324 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010e16:	223e      	movs	r2, #62	; 0x3e
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f005 fa82 	bl	8016324 <memset>

  return USBH_OK;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010e2a:	b480      	push	{r7}
 8010e2c:	b085      	sub	sp, #20
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
 8010e32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010e34:	2300      	movs	r3, #0
 8010e36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d016      	beq.n	8010e6c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10e      	bne.n	8010e66 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010e4e:	1c59      	adds	r1, r3, #1
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	33de      	adds	r3, #222	; 0xde
 8010e5a:	6839      	ldr	r1, [r7, #0]
 8010e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	73fb      	strb	r3, [r7, #15]
 8010e64:	e004      	b.n	8010e70 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010e66:	2302      	movs	r3, #2
 8010e68:	73fb      	strb	r3, [r7, #15]
 8010e6a:	e001      	b.n	8010e70 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010e6c:	2302      	movs	r3, #2
 8010e6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr

08010e7e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010e7e:	b480      	push	{r7}
 8010e80:	b085      	sub	sp, #20
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	460b      	mov	r3, r1
 8010e88:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8010e94:	78fa      	ldrb	r2, [r7, #3]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d204      	bcs.n	8010ea4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	78fa      	ldrb	r2, [r7, #3]
 8010e9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8010ea2:	e001      	b.n	8010ea8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b087      	sub	sp, #28
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
 8010ebe:	4608      	mov	r0, r1
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	70fb      	strb	r3, [r7, #3]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	70bb      	strb	r3, [r7, #2]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010ede:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010ee0:	e025      	b.n	8010f2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	221a      	movs	r2, #26
 8010ee6:	fb02 f303 	mul.w	r3, r2, r3
 8010eea:	3308      	adds	r3, #8
 8010eec:	68fa      	ldr	r2, [r7, #12]
 8010eee:	4413      	add	r3, r2
 8010ef0:	3302      	adds	r3, #2
 8010ef2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	795b      	ldrb	r3, [r3, #5]
 8010ef8:	78fa      	ldrb	r2, [r7, #3]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d002      	beq.n	8010f04 <USBH_FindInterface+0x4e>
 8010efe:	78fb      	ldrb	r3, [r7, #3]
 8010f00:	2bff      	cmp	r3, #255	; 0xff
 8010f02:	d111      	bne.n	8010f28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010f08:	78ba      	ldrb	r2, [r7, #2]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d002      	beq.n	8010f14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010f0e:	78bb      	ldrb	r3, [r7, #2]
 8010f10:	2bff      	cmp	r3, #255	; 0xff
 8010f12:	d109      	bne.n	8010f28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010f18:	787a      	ldrb	r2, [r7, #1]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d002      	beq.n	8010f24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010f1e:	787b      	ldrb	r3, [r7, #1]
 8010f20:	2bff      	cmp	r3, #255	; 0xff
 8010f22:	d101      	bne.n	8010f28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010f24:	7dfb      	ldrb	r3, [r7, #23]
 8010f26:	e006      	b.n	8010f36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010f28:	7dfb      	ldrb	r3, [r7, #23]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010f2e:	7dfb      	ldrb	r3, [r7, #23]
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d9d6      	bls.n	8010ee2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010f34:	23ff      	movs	r3, #255	; 0xff
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr

08010f42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b082      	sub	sp, #8
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f004 ffe6 	bl	8015f1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010f50:	2101      	movs	r1, #1
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f005 f8ff 	bl	8016156 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
	...

08010f64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af04      	add	r7, sp, #16
 8010f6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d102      	bne.n	8010f86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2203      	movs	r2, #3
 8010f84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	2b0b      	cmp	r3, #11
 8010f8e:	f200 81be 	bhi.w	801130e <USBH_Process+0x3aa>
 8010f92:	a201      	add	r2, pc, #4	; (adr r2, 8010f98 <USBH_Process+0x34>)
 8010f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f98:	08010fc9 	.word	0x08010fc9
 8010f9c:	08010ffb 	.word	0x08010ffb
 8010fa0:	08011063 	.word	0x08011063
 8010fa4:	080112a9 	.word	0x080112a9
 8010fa8:	0801130f 	.word	0x0801130f
 8010fac:	08011107 	.word	0x08011107
 8010fb0:	0801124f 	.word	0x0801124f
 8010fb4:	0801113d 	.word	0x0801113d
 8010fb8:	0801115d 	.word	0x0801115d
 8010fbc:	0801117d 	.word	0x0801117d
 8010fc0:	080111c1 	.word	0x080111c1
 8010fc4:	08011291 	.word	0x08011291
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f000 819e 	beq.w	8011312 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2201      	movs	r2, #1
 8010fda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010fdc:	20c8      	movs	r0, #200	; 0xc8
 8010fde:	f005 f901 	bl	80161e4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f004 fff7 	bl	8015fd6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2200      	movs	r2, #0
 8010fec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010ff8:	e18b      	b.n	8011312 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8011000:	2b01      	cmp	r3, #1
 8011002:	d107      	bne.n	8011014 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2202      	movs	r2, #2
 8011010:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011012:	e18d      	b.n	8011330 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801101a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801101e:	d914      	bls.n	801104a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011026:	3301      	adds	r3, #1
 8011028:	b2da      	uxtb	r2, r3
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011036:	2b03      	cmp	r3, #3
 8011038:	d903      	bls.n	8011042 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	220d      	movs	r2, #13
 801103e:	701a      	strb	r2, [r3, #0]
      break;
 8011040:	e176      	b.n	8011330 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	701a      	strb	r2, [r3, #0]
      break;
 8011048:	e172      	b.n	8011330 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011050:	f103 020a 	add.w	r2, r3, #10
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801105a:	200a      	movs	r0, #10
 801105c:	f005 f8c2 	bl	80161e4 <USBH_Delay>
      break;
 8011060:	e166      	b.n	8011330 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011068:	2b00      	cmp	r3, #0
 801106a:	d005      	beq.n	8011078 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011072:	2104      	movs	r1, #4
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8011078:	2064      	movs	r0, #100	; 0x64
 801107a:	f005 f8b3 	bl	80161e4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f004 ff82 	bl	8015f88 <USBH_LL_GetSpeed>
 8011084:	4603      	mov	r3, r0
 8011086:	461a      	mov	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2205      	movs	r2, #5
 8011092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8011094:	2100      	movs	r1, #0
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f001 fa03 	bl	80124a2 <USBH_AllocPipe>
 801109c:	4603      	mov	r3, r0
 801109e:	461a      	mov	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80110a4:	2180      	movs	r1, #128	; 0x80
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f001 f9fb 	bl	80124a2 <USBH_AllocPipe>
 80110ac:	4603      	mov	r3, r0
 80110ae:	461a      	mov	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	7919      	ldrb	r1, [r3, #4]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80110c8:	b292      	uxth	r2, r2
 80110ca:	9202      	str	r2, [sp, #8]
 80110cc:	2200      	movs	r2, #0
 80110ce:	9201      	str	r2, [sp, #4]
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	4603      	mov	r3, r0
 80110d4:	2280      	movs	r2, #128	; 0x80
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f001 f9b4 	bl	8012444 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	7959      	ldrb	r1, [r3, #5]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80110f0:	b292      	uxth	r2, r2
 80110f2:	9202      	str	r2, [sp, #8]
 80110f4:	2200      	movs	r2, #0
 80110f6:	9201      	str	r2, [sp, #4]
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	4603      	mov	r3, r0
 80110fc:	2200      	movs	r2, #0
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f001 f9a0 	bl	8012444 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011104:	e114      	b.n	8011330 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 f918 	bl	801133c <USBH_HandleEnum>
 801110c:	4603      	mov	r3, r0
 801110e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011110:	7bbb      	ldrb	r3, [r7, #14]
 8011112:	b2db      	uxtb	r3, r3
 8011114:	2b00      	cmp	r3, #0
 8011116:	f040 80fe 	bne.w	8011316 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2200      	movs	r2, #0
 801111e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8011128:	2b01      	cmp	r3, #1
 801112a:	d103      	bne.n	8011134 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2208      	movs	r2, #8
 8011130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011132:	e0f0      	b.n	8011316 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2207      	movs	r2, #7
 8011138:	701a      	strb	r2, [r3, #0]
      break;
 801113a:	e0ec      	b.n	8011316 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011142:	2b00      	cmp	r3, #0
 8011144:	f000 80e9 	beq.w	801131a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801114e:	2101      	movs	r1, #1
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2208      	movs	r2, #8
 8011158:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801115a:	e0de      	b.n	801131a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8011162:	b29b      	uxth	r3, r3
 8011164:	4619      	mov	r1, r3
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f000 fc2c 	bl	80119c4 <USBH_SetCfg>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	f040 80d5 	bne.w	801131e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2209      	movs	r2, #9
 8011178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801117a:	e0d0      	b.n	801131e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8011182:	f003 0320 	and.w	r3, r3, #32
 8011186:	2b00      	cmp	r3, #0
 8011188:	d016      	beq.n	80111b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801118a:	2101      	movs	r1, #1
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 fc3c 	bl	8011a0a <USBH_SetFeature>
 8011192:	4603      	mov	r3, r0
 8011194:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8011196:	7bbb      	ldrb	r3, [r7, #14]
 8011198:	b2db      	uxtb	r3, r3
 801119a:	2b00      	cmp	r3, #0
 801119c:	d103      	bne.n	80111a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	220a      	movs	r2, #10
 80111a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80111a4:	e0bd      	b.n	8011322 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80111a6:	7bbb      	ldrb	r3, [r7, #14]
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	2b03      	cmp	r3, #3
 80111ac:	f040 80b9 	bne.w	8011322 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	220a      	movs	r2, #10
 80111b4:	701a      	strb	r2, [r3, #0]
      break;
 80111b6:	e0b4      	b.n	8011322 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	220a      	movs	r2, #10
 80111bc:	701a      	strb	r2, [r3, #0]
      break;
 80111be:	e0b0      	b.n	8011322 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f000 80ad 	beq.w	8011326 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80111d4:	2300      	movs	r3, #0
 80111d6:	73fb      	strb	r3, [r7, #15]
 80111d8:	e016      	b.n	8011208 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80111da:	7bfa      	ldrb	r2, [r7, #15]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	32de      	adds	r2, #222	; 0xde
 80111e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111e4:	791a      	ldrb	r2, [r3, #4]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d108      	bne.n	8011202 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80111f0:	7bfa      	ldrb	r2, [r7, #15]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	32de      	adds	r2, #222	; 0xde
 80111f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8011200:	e005      	b.n	801120e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011202:	7bfb      	ldrb	r3, [r7, #15]
 8011204:	3301      	adds	r3, #1
 8011206:	73fb      	strb	r3, [r7, #15]
 8011208:	7bfb      	ldrb	r3, [r7, #15]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d0e5      	beq.n	80111da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d016      	beq.n	8011246 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	4798      	blx	r3
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d109      	bne.n	801123e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2206      	movs	r2, #6
 801122e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011236:	2103      	movs	r1, #3
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801123c:	e073      	b.n	8011326 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	220d      	movs	r2, #13
 8011242:	701a      	strb	r2, [r3, #0]
      break;
 8011244:	e06f      	b.n	8011326 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	220d      	movs	r2, #13
 801124a:	701a      	strb	r2, [r3, #0]
      break;
 801124c:	e06b      	b.n	8011326 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011254:	2b00      	cmp	r3, #0
 8011256:	d017      	beq.n	8011288 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	4798      	blx	r3
 8011264:	4603      	mov	r3, r0
 8011266:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8011268:	7bbb      	ldrb	r3, [r7, #14]
 801126a:	b2db      	uxtb	r3, r3
 801126c:	2b00      	cmp	r3, #0
 801126e:	d103      	bne.n	8011278 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	220b      	movs	r2, #11
 8011274:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011276:	e058      	b.n	801132a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8011278:	7bbb      	ldrb	r3, [r7, #14]
 801127a:	b2db      	uxtb	r3, r3
 801127c:	2b02      	cmp	r3, #2
 801127e:	d154      	bne.n	801132a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	220d      	movs	r2, #13
 8011284:	701a      	strb	r2, [r3, #0]
      break;
 8011286:	e050      	b.n	801132a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	220d      	movs	r2, #13
 801128c:	701a      	strb	r2, [r3, #0]
      break;
 801128e:	e04c      	b.n	801132a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011296:	2b00      	cmp	r3, #0
 8011298:	d049      	beq.n	801132e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	4798      	blx	r3
      }
      break;
 80112a6:	e042      	b.n	801132e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2200      	movs	r2, #0
 80112ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f7ff fd47 	bl	8010d44 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d009      	beq.n	80112d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d005      	beq.n	80112ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80112e4:	2105      	movs	r1, #5
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d107      	bne.n	8011306 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff fe1f 	bl	8010f42 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011304:	e014      	b.n	8011330 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f004 fe08 	bl	8015f1c <USBH_LL_Start>
      break;
 801130c:	e010      	b.n	8011330 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 801130e:	bf00      	nop
 8011310:	e00e      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 8011312:	bf00      	nop
 8011314:	e00c      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 8011316:	bf00      	nop
 8011318:	e00a      	b.n	8011330 <USBH_Process+0x3cc>
    break;
 801131a:	bf00      	nop
 801131c:	e008      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 801131e:	bf00      	nop
 8011320:	e006      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 8011322:	bf00      	nop
 8011324:	e004      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 8011326:	bf00      	nop
 8011328:	e002      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 801132a:	bf00      	nop
 801132c:	e000      	b.n	8011330 <USBH_Process+0x3cc>
      break;
 801132e:	bf00      	nop
  }
  return USBH_OK;
 8011330:	2300      	movs	r3, #0
}
 8011332:	4618      	mov	r0, r3
 8011334:	3710      	adds	r7, #16
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop

0801133c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b088      	sub	sp, #32
 8011340:	af04      	add	r7, sp, #16
 8011342:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011344:	2301      	movs	r3, #1
 8011346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8011348:	2301      	movs	r3, #1
 801134a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	785b      	ldrb	r3, [r3, #1]
 8011350:	2b07      	cmp	r3, #7
 8011352:	f200 81c1 	bhi.w	80116d8 <USBH_HandleEnum+0x39c>
 8011356:	a201      	add	r2, pc, #4	; (adr r2, 801135c <USBH_HandleEnum+0x20>)
 8011358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801135c:	0801137d 	.word	0x0801137d
 8011360:	0801143b 	.word	0x0801143b
 8011364:	080114a5 	.word	0x080114a5
 8011368:	08011533 	.word	0x08011533
 801136c:	0801159d 	.word	0x0801159d
 8011370:	0801160d 	.word	0x0801160d
 8011374:	08011653 	.word	0x08011653
 8011378:	08011699 	.word	0x08011699
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801137c:	2108      	movs	r1, #8
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 fa50 	bl	8011824 <USBH_Get_DevDesc>
 8011384:	4603      	mov	r3, r0
 8011386:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011388:	7bbb      	ldrb	r3, [r7, #14]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d130      	bne.n	80113f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2201      	movs	r2, #1
 801139c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7919      	ldrb	r1, [r3, #4]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80113b2:	b292      	uxth	r2, r2
 80113b4:	9202      	str	r2, [sp, #8]
 80113b6:	2200      	movs	r2, #0
 80113b8:	9201      	str	r2, [sp, #4]
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	4603      	mov	r3, r0
 80113be:	2280      	movs	r2, #128	; 0x80
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f001 f83f 	bl	8012444 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7959      	ldrb	r1, [r3, #5]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80113da:	b292      	uxth	r2, r2
 80113dc:	9202      	str	r2, [sp, #8]
 80113de:	2200      	movs	r2, #0
 80113e0:	9201      	str	r2, [sp, #4]
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	4603      	mov	r3, r0
 80113e6:	2200      	movs	r2, #0
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f001 f82b 	bl	8012444 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80113ee:	e175      	b.n	80116dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80113f0:	7bbb      	ldrb	r3, [r7, #14]
 80113f2:	2b03      	cmp	r3, #3
 80113f4:	f040 8172 	bne.w	80116dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80113fe:	3301      	adds	r3, #1
 8011400:	b2da      	uxtb	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801140e:	2b03      	cmp	r3, #3
 8011410:	d903      	bls.n	801141a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	220d      	movs	r2, #13
 8011416:	701a      	strb	r2, [r3, #0]
      break;
 8011418:	e160      	b.n	80116dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	795b      	ldrb	r3, [r3, #5]
 801141e:	4619      	mov	r1, r3
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f001 f85f 	bl	80124e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	791b      	ldrb	r3, [r3, #4]
 801142a:	4619      	mov	r1, r3
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f001 f859 	bl	80124e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	701a      	strb	r2, [r3, #0]
      break;
 8011438:	e150      	b.n	80116dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801143a:	2112      	movs	r1, #18
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f000 f9f1 	bl	8011824 <USBH_Get_DevDesc>
 8011442:	4603      	mov	r3, r0
 8011444:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011446:	7bbb      	ldrb	r3, [r7, #14]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d103      	bne.n	8011454 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2202      	movs	r2, #2
 8011450:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011452:	e145      	b.n	80116e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011454:	7bbb      	ldrb	r3, [r7, #14]
 8011456:	2b03      	cmp	r3, #3
 8011458:	f040 8142 	bne.w	80116e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011462:	3301      	adds	r3, #1
 8011464:	b2da      	uxtb	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011472:	2b03      	cmp	r3, #3
 8011474:	d903      	bls.n	801147e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	220d      	movs	r2, #13
 801147a:	701a      	strb	r2, [r3, #0]
      break;
 801147c:	e130      	b.n	80116e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	795b      	ldrb	r3, [r3, #5]
 8011482:	4619      	mov	r1, r3
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f001 f82d 	bl	80124e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	791b      	ldrb	r3, [r3, #4]
 801148e:	4619      	mov	r1, r3
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f001 f827 	bl	80124e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2200      	movs	r2, #0
 80114a0:	701a      	strb	r2, [r3, #0]
      break;
 80114a2:	e11d      	b.n	80116e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80114a4:	2101      	movs	r1, #1
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f000 fa68 	bl	801197c <USBH_SetAddress>
 80114ac:	4603      	mov	r3, r0
 80114ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80114b0:	7bbb      	ldrb	r3, [r7, #14]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d132      	bne.n	801151c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80114b6:	2002      	movs	r0, #2
 80114b8:	f004 fe94 	bl	80161e4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2201      	movs	r2, #1
 80114c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2203      	movs	r2, #3
 80114c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	7919      	ldrb	r1, [r3, #4]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80114de:	b292      	uxth	r2, r2
 80114e0:	9202      	str	r2, [sp, #8]
 80114e2:	2200      	movs	r2, #0
 80114e4:	9201      	str	r2, [sp, #4]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	4603      	mov	r3, r0
 80114ea:	2280      	movs	r2, #128	; 0x80
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 ffa9 	bl	8012444 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	7959      	ldrb	r1, [r3, #5]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011506:	b292      	uxth	r2, r2
 8011508:	9202      	str	r2, [sp, #8]
 801150a:	2200      	movs	r2, #0
 801150c:	9201      	str	r2, [sp, #4]
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	4603      	mov	r3, r0
 8011512:	2200      	movs	r2, #0
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 ff95 	bl	8012444 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801151a:	e0e3      	b.n	80116e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801151c:	7bbb      	ldrb	r3, [r7, #14]
 801151e:	2b03      	cmp	r3, #3
 8011520:	f040 80e0 	bne.w	80116e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	220d      	movs	r2, #13
 8011528:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	705a      	strb	r2, [r3, #1]
      break;
 8011530:	e0d8      	b.n	80116e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8011532:	2109      	movs	r1, #9
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 f99d 	bl	8011874 <USBH_Get_CfgDesc>
 801153a:	4603      	mov	r3, r0
 801153c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801153e:	7bbb      	ldrb	r3, [r7, #14]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d103      	bne.n	801154c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2204      	movs	r2, #4
 8011548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801154a:	e0cd      	b.n	80116e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801154c:	7bbb      	ldrb	r3, [r7, #14]
 801154e:	2b03      	cmp	r3, #3
 8011550:	f040 80ca 	bne.w	80116e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801155a:	3301      	adds	r3, #1
 801155c:	b2da      	uxtb	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801156a:	2b03      	cmp	r3, #3
 801156c:	d903      	bls.n	8011576 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	220d      	movs	r2, #13
 8011572:	701a      	strb	r2, [r3, #0]
      break;
 8011574:	e0b8      	b.n	80116e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	795b      	ldrb	r3, [r3, #5]
 801157a:	4619      	mov	r1, r3
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 ffb1 	bl	80124e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	791b      	ldrb	r3, [r3, #4]
 8011586:	4619      	mov	r1, r3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 ffab 	bl	80124e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2200      	movs	r2, #0
 8011592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	701a      	strb	r2, [r3, #0]
      break;
 801159a:	e0a5      	b.n	80116e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80115a2:	4619      	mov	r1, r3
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 f965 	bl	8011874 <USBH_Get_CfgDesc>
 80115aa:	4603      	mov	r3, r0
 80115ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80115ae:	7bbb      	ldrb	r3, [r7, #14]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d103      	bne.n	80115bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2205      	movs	r2, #5
 80115b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80115ba:	e097      	b.n	80116ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115bc:	7bbb      	ldrb	r3, [r7, #14]
 80115be:	2b03      	cmp	r3, #3
 80115c0:	f040 8094 	bne.w	80116ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80115ca:	3301      	adds	r3, #1
 80115cc:	b2da      	uxtb	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80115da:	2b03      	cmp	r3, #3
 80115dc:	d903      	bls.n	80115e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	220d      	movs	r2, #13
 80115e2:	701a      	strb	r2, [r3, #0]
      break;
 80115e4:	e082      	b.n	80116ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	795b      	ldrb	r3, [r3, #5]
 80115ea:	4619      	mov	r1, r3
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 ff79 	bl	80124e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	791b      	ldrb	r3, [r3, #4]
 80115f6:	4619      	mov	r1, r3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 ff73 	bl	80124e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2200      	movs	r2, #0
 8011602:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	701a      	strb	r2, [r3, #0]
      break;
 801160a:	e06f      	b.n	80116ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8011612:	2b00      	cmp	r3, #0
 8011614:	d019      	beq.n	801164a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011622:	23ff      	movs	r3, #255	; 0xff
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 f949 	bl	80118bc <USBH_Get_StringDesc>
 801162a:	4603      	mov	r3, r0
 801162c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801162e:	7bbb      	ldrb	r3, [r7, #14]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d103      	bne.n	801163c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2206      	movs	r2, #6
 8011638:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801163a:	e059      	b.n	80116f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801163c:	7bbb      	ldrb	r3, [r7, #14]
 801163e:	2b03      	cmp	r3, #3
 8011640:	d156      	bne.n	80116f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2206      	movs	r2, #6
 8011646:	705a      	strb	r2, [r3, #1]
      break;
 8011648:	e052      	b.n	80116f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2206      	movs	r2, #6
 801164e:	705a      	strb	r2, [r3, #1]
      break;
 8011650:	e04e      	b.n	80116f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8011658:	2b00      	cmp	r3, #0
 801165a:	d019      	beq.n	8011690 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011668:	23ff      	movs	r3, #255	; 0xff
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f000 f926 	bl	80118bc <USBH_Get_StringDesc>
 8011670:	4603      	mov	r3, r0
 8011672:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011674:	7bbb      	ldrb	r3, [r7, #14]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d103      	bne.n	8011682 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2207      	movs	r2, #7
 801167e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011680:	e038      	b.n	80116f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011682:	7bbb      	ldrb	r3, [r7, #14]
 8011684:	2b03      	cmp	r3, #3
 8011686:	d135      	bne.n	80116f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2207      	movs	r2, #7
 801168c:	705a      	strb	r2, [r3, #1]
      break;
 801168e:	e031      	b.n	80116f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2207      	movs	r2, #7
 8011694:	705a      	strb	r2, [r3, #1]
      break;
 8011696:	e02d      	b.n	80116f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d017      	beq.n	80116d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80116ae:	23ff      	movs	r3, #255	; 0xff
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 f903 	bl	80118bc <USBH_Get_StringDesc>
 80116b6:	4603      	mov	r3, r0
 80116b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80116ba:	7bbb      	ldrb	r3, [r7, #14]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d102      	bne.n	80116c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80116c0:	2300      	movs	r3, #0
 80116c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80116c4:	e018      	b.n	80116f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80116c6:	7bbb      	ldrb	r3, [r7, #14]
 80116c8:	2b03      	cmp	r3, #3
 80116ca:	d115      	bne.n	80116f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80116cc:	2300      	movs	r3, #0
 80116ce:	73fb      	strb	r3, [r7, #15]
      break;
 80116d0:	e012      	b.n	80116f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	73fb      	strb	r3, [r7, #15]
      break;
 80116d6:	e00f      	b.n	80116f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80116d8:	bf00      	nop
 80116da:	e00e      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116dc:	bf00      	nop
 80116de:	e00c      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116e0:	bf00      	nop
 80116e2:	e00a      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116e4:	bf00      	nop
 80116e6:	e008      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116e8:	bf00      	nop
 80116ea:	e006      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116ec:	bf00      	nop
 80116ee:	e004      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116f0:	bf00      	nop
 80116f2:	e002      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116f4:	bf00      	nop
 80116f6:	e000      	b.n	80116fa <USBH_HandleEnum+0x3be>
      break;
 80116f8:	bf00      	nop
  }
  return Status;
 80116fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011704:	b480      	push	{r7}
 8011706:	b083      	sub	sp, #12
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	683a      	ldr	r2, [r7, #0]
 8011712:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8011716:	bf00      	nop
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b082      	sub	sp, #8
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 f804 	bl	8011746 <USBH_HandleSof>
}
 801173e:	bf00      	nop
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	b2db      	uxtb	r3, r3
 8011754:	2b0b      	cmp	r3, #11
 8011756:	d10a      	bne.n	801176e <USBH_HandleSof+0x28>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801175e:	2b00      	cmp	r3, #0
 8011760:	d005      	beq.n	801176e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011768:	699b      	ldr	r3, [r3, #24]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	4798      	blx	r3
  }
}
 801176e:	bf00      	nop
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}

08011776 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011776:	b480      	push	{r7}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2201      	movs	r2, #1
 8011782:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8011786:	bf00      	nop
}
 8011788:	370c      	adds	r7, #12
 801178a:	46bd      	mov	sp, r7
 801178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011790:	4770      	bx	lr

08011792 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011792:	b480      	push	{r7}
 8011794:	b083      	sub	sp, #12
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80117a2:	bf00      	nop
}
 80117a4:	370c      	adds	r7, #12
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr

080117ae <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80117ae:	b480      	push	{r7}
 80117b0:	b083      	sub	sp, #12
 80117b2:	af00      	add	r7, sp, #0
 80117b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2201      	movs	r2, #1
 80117ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f004 fba8 	bl	8015f52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	791b      	ldrb	r3, [r3, #4]
 8011806:	4619      	mov	r1, r3
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f000 fe6b 	bl	80124e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	795b      	ldrb	r3, [r3, #5]
 8011812:	4619      	mov	r1, r3
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 fe65 	bl	80124e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af02      	add	r7, sp, #8
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	460b      	mov	r3, r1
 801182e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8011836:	78fb      	ldrb	r3, [r7, #3]
 8011838:	b29b      	uxth	r3, r3
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	4613      	mov	r3, r2
 801183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011842:	2100      	movs	r1, #0
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 f864 	bl	8011912 <USBH_GetDescriptor>
 801184a:	4603      	mov	r3, r0
 801184c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 801184e:	7bfb      	ldrb	r3, [r7, #15]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d10a      	bne.n	801186a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f203 3026 	addw	r0, r3, #806	; 0x326
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011860:	78fa      	ldrb	r2, [r7, #3]
 8011862:	b292      	uxth	r2, r2
 8011864:	4619      	mov	r1, r3
 8011866:	f000 f919 	bl	8011a9c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801186a:	7bfb      	ldrb	r3, [r7, #15]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011874:	b580      	push	{r7, lr}
 8011876:	b086      	sub	sp, #24
 8011878:	af02      	add	r7, sp, #8
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	460b      	mov	r3, r1
 801187e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	331c      	adds	r3, #28
 8011884:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011886:	887b      	ldrh	r3, [r7, #2]
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011890:	2100      	movs	r1, #0
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f000 f83d 	bl	8011912 <USBH_GetDescriptor>
 8011898:	4603      	mov	r3, r0
 801189a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d107      	bne.n	80118b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80118a2:	887b      	ldrh	r3, [r7, #2]
 80118a4:	461a      	mov	r2, r3
 80118a6:	68b9      	ldr	r1, [r7, #8]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 f987 	bl	8011bbc <USBH_ParseCfgDesc>
 80118ae:	4603      	mov	r3, r0
 80118b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80118b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b088      	sub	sp, #32
 80118c0:	af02      	add	r7, sp, #8
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	607a      	str	r2, [r7, #4]
 80118c6:	461a      	mov	r2, r3
 80118c8:	460b      	mov	r3, r1
 80118ca:	72fb      	strb	r3, [r7, #11]
 80118cc:	4613      	mov	r3, r2
 80118ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80118d0:	7afb      	ldrb	r3, [r7, #11]
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80118d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80118e0:	893b      	ldrh	r3, [r7, #8]
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	460b      	mov	r3, r1
 80118e6:	2100      	movs	r1, #0
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f000 f812 	bl	8011912 <USBH_GetDescriptor>
 80118ee:	4603      	mov	r3, r0
 80118f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80118f2:	7dfb      	ldrb	r3, [r7, #23]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d107      	bne.n	8011908 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80118fe:	893a      	ldrh	r2, [r7, #8]
 8011900:	6879      	ldr	r1, [r7, #4]
 8011902:	4618      	mov	r0, r3
 8011904:	f000 fafe 	bl	8011f04 <USBH_ParseStringDesc>
  }

  return status;
 8011908:	7dfb      	ldrb	r3, [r7, #23]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3718      	adds	r7, #24
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b084      	sub	sp, #16
 8011916:	af00      	add	r7, sp, #0
 8011918:	60f8      	str	r0, [r7, #12]
 801191a:	607b      	str	r3, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	72fb      	strb	r3, [r7, #11]
 8011920:	4613      	mov	r3, r2
 8011922:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	789b      	ldrb	r3, [r3, #2]
 8011928:	2b01      	cmp	r3, #1
 801192a:	d11c      	bne.n	8011966 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801192c:	7afb      	ldrb	r3, [r7, #11]
 801192e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011932:	b2da      	uxtb	r2, r3
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2206      	movs	r2, #6
 801193c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	893a      	ldrh	r2, [r7, #8]
 8011942:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8011944:	893b      	ldrh	r3, [r7, #8]
 8011946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801194a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801194e:	d104      	bne.n	801195a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f240 4209 	movw	r2, #1033	; 0x409
 8011956:	829a      	strh	r2, [r3, #20]
 8011958:	e002      	b.n	8011960 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2200      	movs	r2, #0
 801195e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	8b3a      	ldrh	r2, [r7, #24]
 8011964:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011966:	8b3b      	ldrh	r3, [r7, #24]
 8011968:	461a      	mov	r2, r3
 801196a:	6879      	ldr	r1, [r7, #4]
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f000 fb17 	bl	8011fa0 <USBH_CtlReq>
 8011972:	4603      	mov	r3, r0
}
 8011974:	4618      	mov	r0, r3
 8011976:	3710      	adds	r7, #16
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	460b      	mov	r3, r1
 8011986:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	789b      	ldrb	r3, [r3, #2]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d10f      	bne.n	80119b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2205      	movs	r2, #5
 801199a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801199c:	78fb      	ldrb	r3, [r7, #3]
 801199e:	b29a      	uxth	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2200      	movs	r2, #0
 80119a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2200      	movs	r2, #0
 80119ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80119b0:	2200      	movs	r2, #0
 80119b2:	2100      	movs	r1, #0
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 faf3 	bl	8011fa0 <USBH_CtlReq>
 80119ba:	4603      	mov	r3, r0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3708      	adds	r7, #8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	789b      	ldrb	r3, [r3, #2]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d10e      	bne.n	80119f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2209      	movs	r2, #9
 80119e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	887a      	ldrh	r2, [r7, #2]
 80119e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80119f6:	2200      	movs	r2, #0
 80119f8:	2100      	movs	r1, #0
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f000 fad0 	bl	8011fa0 <USBH_CtlReq>
 8011a00:	4603      	mov	r3, r0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3708      	adds	r7, #8
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}

08011a0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011a0a:	b580      	push	{r7, lr}
 8011a0c:	b082      	sub	sp, #8
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	460b      	mov	r3, r1
 8011a14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	789b      	ldrb	r3, [r3, #2]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d10f      	bne.n	8011a3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2200      	movs	r2, #0
 8011a22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2203      	movs	r2, #3
 8011a28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011a2a:	78fb      	ldrb	r3, [r7, #3]
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011a3e:	2200      	movs	r2, #0
 8011a40:	2100      	movs	r1, #0
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 faac 	bl	8011fa0 <USBH_CtlReq>
 8011a48:	4603      	mov	r3, r0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	789b      	ldrb	r3, [r3, #2]
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d10f      	bne.n	8011a86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2202      	movs	r2, #2
 8011a6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011a78:	78fb      	ldrb	r3, [r7, #3]
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8011a86:	2200      	movs	r2, #0
 8011a88:	2100      	movs	r1, #0
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 fa88 	bl	8011fa0 <USBH_CtlReq>
 8011a90:	4603      	mov	r3, r0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
	...

08011a9c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	781a      	ldrb	r2, [r3, #0]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	785a      	ldrb	r2, [r3, #1]
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	3302      	adds	r3, #2
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	3303      	adds	r3, #3
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	021b      	lsls	r3, r3, #8
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	791a      	ldrb	r2, [r3, #4]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	795a      	ldrb	r2, [r3, #5]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	799a      	ldrb	r2, [r3, #6]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	79da      	ldrb	r2, [r3, #7]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	79db      	ldrb	r3, [r3, #7]
 8011afa:	2b20      	cmp	r3, #32
 8011afc:	dc0e      	bgt.n	8011b1c <USBH_ParseDevDesc+0x80>
 8011afe:	2b08      	cmp	r3, #8
 8011b00:	db13      	blt.n	8011b2a <USBH_ParseDevDesc+0x8e>
 8011b02:	3b08      	subs	r3, #8
 8011b04:	2201      	movs	r2, #1
 8011b06:	409a      	lsls	r2, r3
 8011b08:	4b2b      	ldr	r3, [pc, #172]	; (8011bb8 <USBH_ParseDevDesc+0x11c>)
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	bf14      	ite	ne
 8011b10:	2301      	movne	r3, #1
 8011b12:	2300      	moveq	r3, #0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d102      	bne.n	8011b20 <USBH_ParseDevDesc+0x84>
 8011b1a:	e006      	b.n	8011b2a <USBH_ParseDevDesc+0x8e>
 8011b1c:	2b40      	cmp	r3, #64	; 0x40
 8011b1e:	d104      	bne.n	8011b2a <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	79da      	ldrb	r2, [r3, #7]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	71da      	strb	r2, [r3, #7]
      break;
 8011b28:	e003      	b.n	8011b32 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2240      	movs	r2, #64	; 0x40
 8011b2e:	71da      	strb	r2, [r3, #7]
      break;
 8011b30:	bf00      	nop
  }

  if (length > 8U)
 8011b32:	88fb      	ldrh	r3, [r7, #6]
 8011b34:	2b08      	cmp	r3, #8
 8011b36:	d939      	bls.n	8011bac <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	3308      	adds	r3, #8
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	b29a      	uxth	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	3309      	adds	r3, #9
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	021b      	lsls	r3, r3, #8
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	330a      	adds	r3, #10
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	330b      	adds	r3, #11
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	021b      	lsls	r3, r3, #8
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	330c      	adds	r3, #12
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	330d      	adds	r3, #13
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	021b      	lsls	r3, r3, #8
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	4313      	orrs	r3, r2
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	7b9a      	ldrb	r2, [r3, #14]
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	7bda      	ldrb	r2, [r3, #15]
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	7c1a      	ldrb	r2, [r3, #16]
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	7c5a      	ldrb	r2, [r3, #17]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	745a      	strb	r2, [r3, #17]
  }
}
 8011bac:	bf00      	nop
 8011bae:	3714      	adds	r7, #20
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr
 8011bb8:	01000101 	.word	0x01000101

08011bbc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b08c      	sub	sp, #48	; 0x30
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011bd0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8011be2:	2300      	movs	r3, #0
 8011be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	781a      	ldrb	r2, [r3, #0]
 8011bf0:	6a3b      	ldr	r3, [r7, #32]
 8011bf2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	785a      	ldrb	r2, [r3, #1]
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	3302      	adds	r3, #2
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	3303      	adds	r3, #3
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	021b      	lsls	r3, r3, #8
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	4313      	orrs	r3, r2
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c18:	bf28      	it	cs
 8011c1a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	6a3b      	ldr	r3, [r7, #32]
 8011c22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	791a      	ldrb	r2, [r3, #4]
 8011c28:	6a3b      	ldr	r3, [r7, #32]
 8011c2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	795a      	ldrb	r2, [r3, #5]
 8011c30:	6a3b      	ldr	r3, [r7, #32]
 8011c32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	799a      	ldrb	r2, [r3, #6]
 8011c38:	6a3b      	ldr	r3, [r7, #32]
 8011c3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	79da      	ldrb	r2, [r3, #7]
 8011c40:	6a3b      	ldr	r3, [r7, #32]
 8011c42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	7a1a      	ldrb	r2, [r3, #8]
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8011c4c:	6a3b      	ldr	r3, [r7, #32]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	2b09      	cmp	r3, #9
 8011c52:	d002      	beq.n	8011c5a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011c54:	6a3b      	ldr	r3, [r7, #32]
 8011c56:	2209      	movs	r2, #9
 8011c58:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011c5a:	88fb      	ldrh	r3, [r7, #6]
 8011c5c:	2b09      	cmp	r3, #9
 8011c5e:	f240 8099 	bls.w	8011d94 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8011c62:	2309      	movs	r3, #9
 8011c64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011c66:	2300      	movs	r3, #0
 8011c68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011c6a:	e07d      	b.n	8011d68 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011c6c:	f107 0316 	add.w	r3, r7, #22
 8011c70:	4619      	mov	r1, r3
 8011c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c74:	f000 f979 	bl	8011f6a <USBH_GetNextDesc>
 8011c78:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7c:	785b      	ldrb	r3, [r3, #1]
 8011c7e:	2b04      	cmp	r3, #4
 8011c80:	d172      	bne.n	8011d68 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	2b09      	cmp	r3, #9
 8011c88:	d002      	beq.n	8011c90 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8c:	2209      	movs	r2, #9
 8011c8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c94:	221a      	movs	r2, #26
 8011c96:	fb02 f303 	mul.w	r3, r2, r3
 8011c9a:	3308      	adds	r3, #8
 8011c9c:	6a3a      	ldr	r2, [r7, #32]
 8011c9e:	4413      	add	r3, r2
 8011ca0:	3302      	adds	r3, #2
 8011ca2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ca6:	69f8      	ldr	r0, [r7, #28]
 8011ca8:	f000 f87a 	bl	8011da0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011cac:	2300      	movs	r3, #0
 8011cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011cb6:	e03f      	b.n	8011d38 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011cb8:	f107 0316 	add.w	r3, r7, #22
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cc0:	f000 f953 	bl	8011f6a <USBH_GetNextDesc>
 8011cc4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc8:	785b      	ldrb	r3, [r3, #1]
 8011cca:	2b05      	cmp	r3, #5
 8011ccc:	d134      	bne.n	8011d38 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	795b      	ldrb	r3, [r3, #5]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d10f      	bne.n	8011cf6 <USBH_ParseCfgDesc+0x13a>
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	799b      	ldrb	r3, [r3, #6]
 8011cda:	2b02      	cmp	r3, #2
 8011cdc:	d10b      	bne.n	8011cf6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	79db      	ldrb	r3, [r3, #7]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10b      	bne.n	8011cfe <USBH_ParseCfgDesc+0x142>
 8011ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	2b09      	cmp	r3, #9
 8011cec:	d007      	beq.n	8011cfe <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8011cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf0:	2209      	movs	r2, #9
 8011cf2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011cf4:	e003      	b.n	8011cfe <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	2207      	movs	r2, #7
 8011cfa:	701a      	strb	r2, [r3, #0]
 8011cfc:	e000      	b.n	8011d00 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011cfe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011d08:	3201      	adds	r2, #1
 8011d0a:	00d2      	lsls	r2, r2, #3
 8011d0c:	211a      	movs	r1, #26
 8011d0e:	fb01 f303 	mul.w	r3, r1, r3
 8011d12:	4413      	add	r3, r2
 8011d14:	3308      	adds	r3, #8
 8011d16:	6a3a      	ldr	r2, [r7, #32]
 8011d18:	4413      	add	r3, r2
 8011d1a:	3304      	adds	r3, #4
 8011d1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d20:	69b9      	ldr	r1, [r7, #24]
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f000 f86c 	bl	8011e00 <USBH_ParseEPDesc>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8011d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d32:	3301      	adds	r3, #1
 8011d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	791b      	ldrb	r3, [r3, #4]
 8011d3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d204      	bcs.n	8011d4e <USBH_ParseCfgDesc+0x192>
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	885a      	ldrh	r2, [r3, #2]
 8011d48:	8afb      	ldrh	r3, [r7, #22]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d8b4      	bhi.n	8011cb8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	791b      	ldrb	r3, [r3, #4]
 8011d52:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d201      	bcs.n	8011d5e <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8011d5a:	2303      	movs	r3, #3
 8011d5c:	e01c      	b.n	8011d98 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 8011d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d62:	3301      	adds	r3, #1
 8011d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d805      	bhi.n	8011d7c <USBH_ParseCfgDesc+0x1c0>
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	885a      	ldrh	r2, [r3, #2]
 8011d74:	8afb      	ldrh	r3, [r7, #22]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	f63f af78 	bhi.w	8011c6c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	791b      	ldrb	r3, [r3, #4]
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	bf28      	it	cs
 8011d84:	2302      	movcs	r3, #2
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d201      	bcs.n	8011d94 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8011d90:	2303      	movs	r3, #3
 8011d92:	e001      	b.n	8011d98 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8011d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3730      	adds	r7, #48	; 0x30
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	781a      	ldrb	r2, [r3, #0]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	785a      	ldrb	r2, [r3, #1]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	789a      	ldrb	r2, [r3, #2]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	78da      	ldrb	r2, [r3, #3]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	791a      	ldrb	r2, [r3, #4]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	795a      	ldrb	r2, [r3, #5]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	799a      	ldrb	r2, [r3, #6]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	79da      	ldrb	r2, [r3, #7]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	7a1a      	ldrb	r2, [r3, #8]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	721a      	strb	r2, [r3, #8]
}
 8011df2:	bf00      	nop
 8011df4:	370c      	adds	r7, #12
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr
	...

08011e00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b087      	sub	sp, #28
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	785a      	ldrb	r2, [r3, #1]
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	789a      	ldrb	r2, [r3, #2]
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	78da      	ldrb	r2, [r3, #3]
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	3304      	adds	r3, #4
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	3305      	adds	r3, #5
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	021b      	lsls	r3, r3, #8
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	4313      	orrs	r3, r2
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	799a      	ldrb	r2, [r3, #6]
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	889b      	ldrh	r3, [r3, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d102      	bne.n	8011e62 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8011e5c:	2303      	movs	r3, #3
 8011e5e:	75fb      	strb	r3, [r7, #23]
 8011e60:	e00d      	b.n	8011e7e <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	889a      	ldrh	r2, [r3, #4]
 8011e66:	4b26      	ldr	r3, [pc, #152]	; (8011f00 <USBH_ParseEPDesc+0x100>)
 8011e68:	4013      	ands	r3, r2
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	889b      	ldrh	r3, [r3, #4]
 8011e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d116      	bne.n	8011eb6 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	78db      	ldrb	r3, [r3, #3]
 8011e8c:	f003 0303 	and.w	r3, r3, #3
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d005      	beq.n	8011ea0 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	78db      	ldrb	r3, [r3, #3]
 8011e98:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e9c:	2b03      	cmp	r3, #3
 8011e9e:	d127      	bne.n	8011ef0 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	799b      	ldrb	r3, [r3, #6]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d003      	beq.n	8011eb0 <USBH_ParseEPDesc+0xb0>
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	799b      	ldrb	r3, [r3, #6]
 8011eac:	2b10      	cmp	r3, #16
 8011eae:	d91f      	bls.n	8011ef0 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011eb0:	2303      	movs	r3, #3
 8011eb2:	75fb      	strb	r3, [r7, #23]
 8011eb4:	e01c      	b.n	8011ef0 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	78db      	ldrb	r3, [r3, #3]
 8011eba:	f003 0303 	and.w	r3, r3, #3
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d10a      	bne.n	8011ed8 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	799b      	ldrb	r3, [r3, #6]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d003      	beq.n	8011ed2 <USBH_ParseEPDesc+0xd2>
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	799b      	ldrb	r3, [r3, #6]
 8011ece:	2b10      	cmp	r3, #16
 8011ed0:	d90e      	bls.n	8011ef0 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011ed2:	2303      	movs	r3, #3
 8011ed4:	75fb      	strb	r3, [r7, #23]
 8011ed6:	e00b      	b.n	8011ef0 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	78db      	ldrb	r3, [r3, #3]
 8011edc:	f003 0303 	and.w	r3, r3, #3
 8011ee0:	2b03      	cmp	r3, #3
 8011ee2:	d105      	bne.n	8011ef0 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	799b      	ldrb	r3, [r3, #6]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011eec:	2303      	movs	r3, #3
 8011eee:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8011ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	371c      	adds	r7, #28
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr
 8011efe:	bf00      	nop
 8011f00:	fffff800 	.word	0xfffff800

08011f04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b087      	sub	sp, #28
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	4613      	mov	r3, r2
 8011f10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	3301      	adds	r3, #1
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b03      	cmp	r3, #3
 8011f1a:	d120      	bne.n	8011f5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	1e9a      	subs	r2, r3, #2
 8011f22:	88fb      	ldrh	r3, [r7, #6]
 8011f24:	4293      	cmp	r3, r2
 8011f26:	bf28      	it	cs
 8011f28:	4613      	movcs	r3, r2
 8011f2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	3302      	adds	r3, #2
 8011f30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011f32:	2300      	movs	r3, #0
 8011f34:	82fb      	strh	r3, [r7, #22]
 8011f36:	e00b      	b.n	8011f50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011f38:	8afb      	ldrh	r3, [r7, #22]
 8011f3a:	68fa      	ldr	r2, [r7, #12]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	781a      	ldrb	r2, [r3, #0]
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	3301      	adds	r3, #1
 8011f48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011f4a:	8afb      	ldrh	r3, [r7, #22]
 8011f4c:	3302      	adds	r3, #2
 8011f4e:	82fb      	strh	r3, [r7, #22]
 8011f50:	8afa      	ldrh	r2, [r7, #22]
 8011f52:	8abb      	ldrh	r3, [r7, #20]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d3ef      	bcc.n	8011f38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	701a      	strb	r2, [r3, #0]
  }
}
 8011f5e:	bf00      	nop
 8011f60:	371c      	adds	r7, #28
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr

08011f6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011f6a:	b480      	push	{r7}
 8011f6c:	b085      	sub	sp, #20
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
 8011f72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	881a      	ldrh	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	4413      	add	r3, r2
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	4413      	add	r3, r2
 8011f90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011f92:	68fb      	ldr	r3, [r7, #12]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b086      	sub	sp, #24
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	4613      	mov	r3, r2
 8011fac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	789b      	ldrb	r3, [r3, #2]
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d002      	beq.n	8011fc0 <USBH_CtlReq+0x20>
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	d00f      	beq.n	8011fde <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8011fbe:	e027      	b.n	8012010 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	88fa      	ldrh	r2, [r7, #6]
 8011fca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2202      	movs	r2, #2
 8011fd6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011fd8:	2301      	movs	r3, #1
 8011fda:	75fb      	strb	r3, [r7, #23]
      break;
 8011fdc:	e018      	b.n	8012010 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f000 f81c 	bl	801201c <USBH_HandleControl>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011fe8:	7dfb      	ldrb	r3, [r7, #23]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d002      	beq.n	8011ff4 <USBH_CtlReq+0x54>
 8011fee:	7dfb      	ldrb	r3, [r7, #23]
 8011ff0:	2b03      	cmp	r3, #3
 8011ff2:	d106      	bne.n	8012002 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	761a      	strb	r2, [r3, #24]
      break;
 8012000:	e005      	b.n	801200e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8012002:	7dfb      	ldrb	r3, [r7, #23]
 8012004:	2b02      	cmp	r3, #2
 8012006:	d102      	bne.n	801200e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2201      	movs	r2, #1
 801200c:	709a      	strb	r2, [r3, #2]
      break;
 801200e:	bf00      	nop
  }
  return status;
 8012010:	7dfb      	ldrb	r3, [r7, #23]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3718      	adds	r7, #24
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
	...

0801201c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b086      	sub	sp, #24
 8012020:	af02      	add	r7, sp, #8
 8012022:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012024:	2301      	movs	r3, #1
 8012026:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012028:	2300      	movs	r3, #0
 801202a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	7e1b      	ldrb	r3, [r3, #24]
 8012030:	3b01      	subs	r3, #1
 8012032:	2b0a      	cmp	r3, #10
 8012034:	f200 8156 	bhi.w	80122e4 <USBH_HandleControl+0x2c8>
 8012038:	a201      	add	r2, pc, #4	; (adr r2, 8012040 <USBH_HandleControl+0x24>)
 801203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801203e:	bf00      	nop
 8012040:	0801206d 	.word	0x0801206d
 8012044:	08012087 	.word	0x08012087
 8012048:	080120f1 	.word	0x080120f1
 801204c:	08012117 	.word	0x08012117
 8012050:	0801214f 	.word	0x0801214f
 8012054:	08012179 	.word	0x08012179
 8012058:	080121cb 	.word	0x080121cb
 801205c:	080121ed 	.word	0x080121ed
 8012060:	08012229 	.word	0x08012229
 8012064:	0801224f 	.word	0x0801224f
 8012068:	0801228d 	.word	0x0801228d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f103 0110 	add.w	r1, r3, #16
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	795b      	ldrb	r3, [r3, #5]
 8012076:	461a      	mov	r2, r3
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f943 	bl	8012304 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2202      	movs	r2, #2
 8012082:	761a      	strb	r2, [r3, #24]
      break;
 8012084:	e139      	b.n	80122fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	795b      	ldrb	r3, [r3, #5]
 801208a:	4619      	mov	r1, r3
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f004 f84f 	bl	8016130 <USBH_LL_GetURBState>
 8012092:	4603      	mov	r3, r0
 8012094:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8012096:	7bbb      	ldrb	r3, [r7, #14]
 8012098:	2b01      	cmp	r3, #1
 801209a:	d11e      	bne.n	80120da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7c1b      	ldrb	r3, [r3, #16]
 80120a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80120a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	8adb      	ldrh	r3, [r3, #22]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d00a      	beq.n	80120c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80120ae:	7b7b      	ldrb	r3, [r7, #13]
 80120b0:	2b80      	cmp	r3, #128	; 0x80
 80120b2:	d103      	bne.n	80120bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2203      	movs	r2, #3
 80120b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80120ba:	e115      	b.n	80122e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2205      	movs	r2, #5
 80120c0:	761a      	strb	r2, [r3, #24]
      break;
 80120c2:	e111      	b.n	80122e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80120c4:	7b7b      	ldrb	r3, [r7, #13]
 80120c6:	2b80      	cmp	r3, #128	; 0x80
 80120c8:	d103      	bne.n	80120d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2209      	movs	r2, #9
 80120ce:	761a      	strb	r2, [r3, #24]
      break;
 80120d0:	e10a      	b.n	80122e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2207      	movs	r2, #7
 80120d6:	761a      	strb	r2, [r3, #24]
      break;
 80120d8:	e106      	b.n	80122e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80120da:	7bbb      	ldrb	r3, [r7, #14]
 80120dc:	2b04      	cmp	r3, #4
 80120de:	d003      	beq.n	80120e8 <USBH_HandleControl+0xcc>
 80120e0:	7bbb      	ldrb	r3, [r7, #14]
 80120e2:	2b02      	cmp	r3, #2
 80120e4:	f040 8100 	bne.w	80122e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	220b      	movs	r2, #11
 80120ec:	761a      	strb	r2, [r3, #24]
      break;
 80120ee:	e0fb      	b.n	80122e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6899      	ldr	r1, [r3, #8]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	899a      	ldrh	r2, [r3, #12]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	791b      	ldrb	r3, [r3, #4]
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f93a 	bl	8012382 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2204      	movs	r2, #4
 8012112:	761a      	strb	r2, [r3, #24]
      break;
 8012114:	e0f1      	b.n	80122fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	791b      	ldrb	r3, [r3, #4]
 801211a:	4619      	mov	r1, r3
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f004 f807 	bl	8016130 <USBH_LL_GetURBState>
 8012122:	4603      	mov	r3, r0
 8012124:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8012126:	7bbb      	ldrb	r3, [r7, #14]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d102      	bne.n	8012132 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2209      	movs	r2, #9
 8012130:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8012132:	7bbb      	ldrb	r3, [r7, #14]
 8012134:	2b05      	cmp	r3, #5
 8012136:	d102      	bne.n	801213e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8012138:	2303      	movs	r3, #3
 801213a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801213c:	e0d6      	b.n	80122ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801213e:	7bbb      	ldrb	r3, [r7, #14]
 8012140:	2b04      	cmp	r3, #4
 8012142:	f040 80d3 	bne.w	80122ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	220b      	movs	r2, #11
 801214a:	761a      	strb	r2, [r3, #24]
      break;
 801214c:	e0ce      	b.n	80122ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6899      	ldr	r1, [r3, #8]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	899a      	ldrh	r2, [r3, #12]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	795b      	ldrb	r3, [r3, #5]
 801215a:	2001      	movs	r0, #1
 801215c:	9000      	str	r0, [sp, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f000 f8ea 	bl	8012338 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801216a:	b29a      	uxth	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2206      	movs	r2, #6
 8012174:	761a      	strb	r2, [r3, #24]
      break;
 8012176:	e0c0      	b.n	80122fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	795b      	ldrb	r3, [r3, #5]
 801217c:	4619      	mov	r1, r3
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f003 ffd6 	bl	8016130 <USBH_LL_GetURBState>
 8012184:	4603      	mov	r3, r0
 8012186:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012188:	7bbb      	ldrb	r3, [r7, #14]
 801218a:	2b01      	cmp	r3, #1
 801218c:	d103      	bne.n	8012196 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2207      	movs	r2, #7
 8012192:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012194:	e0ac      	b.n	80122f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8012196:	7bbb      	ldrb	r3, [r7, #14]
 8012198:	2b05      	cmp	r3, #5
 801219a:	d105      	bne.n	80121a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	220c      	movs	r2, #12
 80121a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80121a2:	2303      	movs	r3, #3
 80121a4:	73fb      	strb	r3, [r7, #15]
      break;
 80121a6:	e0a3      	b.n	80122f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80121a8:	7bbb      	ldrb	r3, [r7, #14]
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d103      	bne.n	80121b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2205      	movs	r2, #5
 80121b2:	761a      	strb	r2, [r3, #24]
      break;
 80121b4:	e09c      	b.n	80122f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80121b6:	7bbb      	ldrb	r3, [r7, #14]
 80121b8:	2b04      	cmp	r3, #4
 80121ba:	f040 8099 	bne.w	80122f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	220b      	movs	r2, #11
 80121c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80121c4:	2302      	movs	r3, #2
 80121c6:	73fb      	strb	r3, [r7, #15]
      break;
 80121c8:	e092      	b.n	80122f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	791b      	ldrb	r3, [r3, #4]
 80121ce:	2200      	movs	r2, #0
 80121d0:	2100      	movs	r1, #0
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 f8d5 	bl	8012382 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2208      	movs	r2, #8
 80121e8:	761a      	strb	r2, [r3, #24]

      break;
 80121ea:	e086      	b.n	80122fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	791b      	ldrb	r3, [r3, #4]
 80121f0:	4619      	mov	r1, r3
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f003 ff9c 	bl	8016130 <USBH_LL_GetURBState>
 80121f8:	4603      	mov	r3, r0
 80121fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d105      	bne.n	801220e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	220d      	movs	r2, #13
 8012206:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012208:	2300      	movs	r3, #0
 801220a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801220c:	e072      	b.n	80122f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801220e:	7bbb      	ldrb	r3, [r7, #14]
 8012210:	2b04      	cmp	r3, #4
 8012212:	d103      	bne.n	801221c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	220b      	movs	r2, #11
 8012218:	761a      	strb	r2, [r3, #24]
      break;
 801221a:	e06b      	b.n	80122f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 801221c:	7bbb      	ldrb	r3, [r7, #14]
 801221e:	2b05      	cmp	r3, #5
 8012220:	d168      	bne.n	80122f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8012222:	2303      	movs	r3, #3
 8012224:	73fb      	strb	r3, [r7, #15]
      break;
 8012226:	e065      	b.n	80122f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	795b      	ldrb	r3, [r3, #5]
 801222c:	2201      	movs	r2, #1
 801222e:	9200      	str	r2, [sp, #0]
 8012230:	2200      	movs	r2, #0
 8012232:	2100      	movs	r1, #0
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f87f 	bl	8012338 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	220a      	movs	r2, #10
 801224a:	761a      	strb	r2, [r3, #24]
      break;
 801224c:	e055      	b.n	80122fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	795b      	ldrb	r3, [r3, #5]
 8012252:	4619      	mov	r1, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f003 ff6b 	bl	8016130 <USBH_LL_GetURBState>
 801225a:	4603      	mov	r3, r0
 801225c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801225e:	7bbb      	ldrb	r3, [r7, #14]
 8012260:	2b01      	cmp	r3, #1
 8012262:	d105      	bne.n	8012270 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8012264:	2300      	movs	r3, #0
 8012266:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	220d      	movs	r2, #13
 801226c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801226e:	e043      	b.n	80122f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012270:	7bbb      	ldrb	r3, [r7, #14]
 8012272:	2b02      	cmp	r3, #2
 8012274:	d103      	bne.n	801227e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2209      	movs	r2, #9
 801227a:	761a      	strb	r2, [r3, #24]
      break;
 801227c:	e03c      	b.n	80122f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801227e:	7bbb      	ldrb	r3, [r7, #14]
 8012280:	2b04      	cmp	r3, #4
 8012282:	d139      	bne.n	80122f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	220b      	movs	r2, #11
 8012288:	761a      	strb	r2, [r3, #24]
      break;
 801228a:	e035      	b.n	80122f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7e5b      	ldrb	r3, [r3, #25]
 8012290:	3301      	adds	r3, #1
 8012292:	b2da      	uxtb	r2, r3
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	765a      	strb	r2, [r3, #25]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7e5b      	ldrb	r3, [r3, #25]
 801229c:	2b02      	cmp	r3, #2
 801229e:	d806      	bhi.n	80122ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2201      	movs	r2, #1
 80122a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2201      	movs	r2, #1
 80122aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80122ac:	e025      	b.n	80122fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80122b4:	2106      	movs	r1, #6
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2200      	movs	r2, #0
 80122be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	795b      	ldrb	r3, [r3, #5]
 80122c4:	4619      	mov	r1, r3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f90c 	bl	80124e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	791b      	ldrb	r3, [r3, #4]
 80122d0:	4619      	mov	r1, r3
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 f906 	bl	80124e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80122de:	2302      	movs	r3, #2
 80122e0:	73fb      	strb	r3, [r7, #15]
      break;
 80122e2:	e00a      	b.n	80122fa <USBH_HandleControl+0x2de>

    default:
      break;
 80122e4:	bf00      	nop
 80122e6:	e008      	b.n	80122fa <USBH_HandleControl+0x2de>
      break;
 80122e8:	bf00      	nop
 80122ea:	e006      	b.n	80122fa <USBH_HandleControl+0x2de>
      break;
 80122ec:	bf00      	nop
 80122ee:	e004      	b.n	80122fa <USBH_HandleControl+0x2de>
      break;
 80122f0:	bf00      	nop
 80122f2:	e002      	b.n	80122fa <USBH_HandleControl+0x2de>
      break;
 80122f4:	bf00      	nop
 80122f6:	e000      	b.n	80122fa <USBH_HandleControl+0x2de>
      break;
 80122f8:	bf00      	nop
  }

  return status;
 80122fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3710      	adds	r7, #16
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b088      	sub	sp, #32
 8012308:	af04      	add	r7, sp, #16
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	4613      	mov	r3, r2
 8012310:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012312:	79f9      	ldrb	r1, [r7, #7]
 8012314:	2300      	movs	r3, #0
 8012316:	9303      	str	r3, [sp, #12]
 8012318:	2308      	movs	r3, #8
 801231a:	9302      	str	r3, [sp, #8]
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	9301      	str	r3, [sp, #4]
 8012320:	2300      	movs	r3, #0
 8012322:	9300      	str	r3, [sp, #0]
 8012324:	2300      	movs	r3, #0
 8012326:	2200      	movs	r2, #0
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f003 fed0 	bl	80160ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b088      	sub	sp, #32
 801233c:	af04      	add	r7, sp, #16
 801233e:	60f8      	str	r0, [r7, #12]
 8012340:	60b9      	str	r1, [r7, #8]
 8012342:	4611      	mov	r1, r2
 8012344:	461a      	mov	r2, r3
 8012346:	460b      	mov	r3, r1
 8012348:	80fb      	strh	r3, [r7, #6]
 801234a:	4613      	mov	r3, r2
 801234c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8012358:	2300      	movs	r3, #0
 801235a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801235c:	7979      	ldrb	r1, [r7, #5]
 801235e:	7e3b      	ldrb	r3, [r7, #24]
 8012360:	9303      	str	r3, [sp, #12]
 8012362:	88fb      	ldrh	r3, [r7, #6]
 8012364:	9302      	str	r3, [sp, #8]
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	2301      	movs	r3, #1
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	2300      	movs	r3, #0
 8012370:	2200      	movs	r2, #0
 8012372:	68f8      	ldr	r0, [r7, #12]
 8012374:	f003 feab 	bl	80160ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8012382:	b580      	push	{r7, lr}
 8012384:	b088      	sub	sp, #32
 8012386:	af04      	add	r7, sp, #16
 8012388:	60f8      	str	r0, [r7, #12]
 801238a:	60b9      	str	r1, [r7, #8]
 801238c:	4611      	mov	r1, r2
 801238e:	461a      	mov	r2, r3
 8012390:	460b      	mov	r3, r1
 8012392:	80fb      	strh	r3, [r7, #6]
 8012394:	4613      	mov	r3, r2
 8012396:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012398:	7979      	ldrb	r1, [r7, #5]
 801239a:	2300      	movs	r3, #0
 801239c:	9303      	str	r3, [sp, #12]
 801239e:	88fb      	ldrh	r3, [r7, #6]
 80123a0:	9302      	str	r3, [sp, #8]
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	9301      	str	r3, [sp, #4]
 80123a6:	2301      	movs	r3, #1
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	2300      	movs	r3, #0
 80123ac:	2201      	movs	r2, #1
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f003 fe8d 	bl	80160ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80123b4:	2300      	movs	r3, #0

}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}

080123be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80123be:	b580      	push	{r7, lr}
 80123c0:	b088      	sub	sp, #32
 80123c2:	af04      	add	r7, sp, #16
 80123c4:	60f8      	str	r0, [r7, #12]
 80123c6:	60b9      	str	r1, [r7, #8]
 80123c8:	4611      	mov	r1, r2
 80123ca:	461a      	mov	r2, r3
 80123cc:	460b      	mov	r3, r1
 80123ce:	80fb      	strh	r3, [r7, #6]
 80123d0:	4613      	mov	r3, r2
 80123d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d001      	beq.n	80123e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80123de:	2300      	movs	r3, #0
 80123e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80123e2:	7979      	ldrb	r1, [r7, #5]
 80123e4:	7e3b      	ldrb	r3, [r7, #24]
 80123e6:	9303      	str	r3, [sp, #12]
 80123e8:	88fb      	ldrh	r3, [r7, #6]
 80123ea:	9302      	str	r3, [sp, #8]
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	9301      	str	r3, [sp, #4]
 80123f0:	2301      	movs	r3, #1
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	2302      	movs	r3, #2
 80123f6:	2200      	movs	r2, #0
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f003 fe68 	bl	80160ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80123fe:	2300      	movs	r3, #0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b088      	sub	sp, #32
 801240c:	af04      	add	r7, sp, #16
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	4611      	mov	r1, r2
 8012414:	461a      	mov	r2, r3
 8012416:	460b      	mov	r3, r1
 8012418:	80fb      	strh	r3, [r7, #6]
 801241a:	4613      	mov	r3, r2
 801241c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801241e:	7979      	ldrb	r1, [r7, #5]
 8012420:	2300      	movs	r3, #0
 8012422:	9303      	str	r3, [sp, #12]
 8012424:	88fb      	ldrh	r3, [r7, #6]
 8012426:	9302      	str	r3, [sp, #8]
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	9301      	str	r3, [sp, #4]
 801242c:	2301      	movs	r3, #1
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	2302      	movs	r3, #2
 8012432:	2201      	movs	r2, #1
 8012434:	68f8      	ldr	r0, [r7, #12]
 8012436:	f003 fe4a 	bl	80160ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801243a:	2300      	movs	r3, #0
}
 801243c:	4618      	mov	r0, r3
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af04      	add	r7, sp, #16
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	4608      	mov	r0, r1
 801244e:	4611      	mov	r1, r2
 8012450:	461a      	mov	r2, r3
 8012452:	4603      	mov	r3, r0
 8012454:	70fb      	strb	r3, [r7, #3]
 8012456:	460b      	mov	r3, r1
 8012458:	70bb      	strb	r3, [r7, #2]
 801245a:	4613      	mov	r3, r2
 801245c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801245e:	7878      	ldrb	r0, [r7, #1]
 8012460:	78ba      	ldrb	r2, [r7, #2]
 8012462:	78f9      	ldrb	r1, [r7, #3]
 8012464:	8b3b      	ldrh	r3, [r7, #24]
 8012466:	9302      	str	r3, [sp, #8]
 8012468:	7d3b      	ldrb	r3, [r7, #20]
 801246a:	9301      	str	r3, [sp, #4]
 801246c:	7c3b      	ldrb	r3, [r7, #16]
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	4603      	mov	r3, r0
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f003 fddd 	bl	8016032 <USBH_LL_OpenPipe>

  return USBH_OK;
 8012478:	2300      	movs	r3, #0
}
 801247a:	4618      	mov	r0, r3
 801247c:	3708      	adds	r7, #8
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8012482:	b580      	push	{r7, lr}
 8012484:	b082      	sub	sp, #8
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
 801248a:	460b      	mov	r3, r1
 801248c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801248e:	78fb      	ldrb	r3, [r7, #3]
 8012490:	4619      	mov	r1, r3
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f003 fdfc 	bl	8016090 <USBH_LL_ClosePipe>

  return USBH_OK;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b084      	sub	sp, #16
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
 80124aa:	460b      	mov	r3, r1
 80124ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 f836 	bl	8012520 <USBH_GetFreePipe>
 80124b4:	4603      	mov	r3, r0
 80124b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80124b8:	89fb      	ldrh	r3, [r7, #14]
 80124ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124be:	4293      	cmp	r3, r2
 80124c0:	d00a      	beq.n	80124d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80124c2:	78fa      	ldrb	r2, [r7, #3]
 80124c4:	89fb      	ldrh	r3, [r7, #14]
 80124c6:	f003 030f 	and.w	r3, r3, #15
 80124ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80124ce:	6879      	ldr	r1, [r7, #4]
 80124d0:	33e0      	adds	r3, #224	; 0xe0
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	440b      	add	r3, r1
 80124d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80124d8:	89fb      	ldrh	r3, [r7, #14]
 80124da:	b2db      	uxtb	r3, r3
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3710      	adds	r7, #16
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	2b0f      	cmp	r3, #15
 80124f4:	d80d      	bhi.n	8012512 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80124f6:	78fb      	ldrb	r3, [r7, #3]
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	33e0      	adds	r3, #224	; 0xe0
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	4413      	add	r3, r2
 8012500:	685a      	ldr	r2, [r3, #4]
 8012502:	78fb      	ldrb	r3, [r7, #3]
 8012504:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012508:	6879      	ldr	r1, [r7, #4]
 801250a:	33e0      	adds	r3, #224	; 0xe0
 801250c:	009b      	lsls	r3, r3, #2
 801250e:	440b      	add	r3, r1
 8012510:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012512:	2300      	movs	r3, #0
}
 8012514:	4618      	mov	r0, r3
 8012516:	370c      	adds	r7, #12
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr

08012520 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8012528:	2300      	movs	r3, #0
 801252a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801252c:	2300      	movs	r3, #0
 801252e:	73fb      	strb	r3, [r7, #15]
 8012530:	e00f      	b.n	8012552 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8012532:	7bfb      	ldrb	r3, [r7, #15]
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	33e0      	adds	r3, #224	; 0xe0
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	4413      	add	r3, r2
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d102      	bne.n	801254c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8012546:	7bfb      	ldrb	r3, [r7, #15]
 8012548:	b29b      	uxth	r3, r3
 801254a:	e007      	b.n	801255c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801254c:	7bfb      	ldrb	r3, [r7, #15]
 801254e:	3301      	adds	r3, #1
 8012550:	73fb      	strb	r3, [r7, #15]
 8012552:	7bfb      	ldrb	r3, [r7, #15]
 8012554:	2b0f      	cmp	r3, #15
 8012556:	d9ec      	bls.n	8012532 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8012558:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801255c:	4618      	mov	r0, r3
 801255e:	3714      	adds	r7, #20
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	4603      	mov	r3, r0
 8012570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	4a08      	ldr	r2, [pc, #32]	; (8012598 <disk_status+0x30>)
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	4413      	add	r3, r2
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	79fa      	ldrb	r2, [r7, #7]
 8012580:	4905      	ldr	r1, [pc, #20]	; (8012598 <disk_status+0x30>)
 8012582:	440a      	add	r2, r1
 8012584:	7a12      	ldrb	r2, [r2, #8]
 8012586:	4610      	mov	r0, r2
 8012588:	4798      	blx	r3
 801258a:	4603      	mov	r3, r0
 801258c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3710      	adds	r7, #16
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	20000f8c 	.word	0x20000f8c

0801259c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	4603      	mov	r3, r0
 80125a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80125a6:	2300      	movs	r3, #0
 80125a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80125aa:	79fb      	ldrb	r3, [r7, #7]
 80125ac:	4a0d      	ldr	r2, [pc, #52]	; (80125e4 <disk_initialize+0x48>)
 80125ae:	5cd3      	ldrb	r3, [r2, r3]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d111      	bne.n	80125d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	4a0b      	ldr	r2, [pc, #44]	; (80125e4 <disk_initialize+0x48>)
 80125b8:	2101      	movs	r1, #1
 80125ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	4a09      	ldr	r2, [pc, #36]	; (80125e4 <disk_initialize+0x48>)
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	4413      	add	r3, r2
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	79fa      	ldrb	r2, [r7, #7]
 80125ca:	4906      	ldr	r1, [pc, #24]	; (80125e4 <disk_initialize+0x48>)
 80125cc:	440a      	add	r2, r1
 80125ce:	7a12      	ldrb	r2, [r2, #8]
 80125d0:	4610      	mov	r0, r2
 80125d2:	4798      	blx	r3
 80125d4:	4603      	mov	r3, r0
 80125d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	20000f8c 	.word	0x20000f8c

080125e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80125e8:	b590      	push	{r4, r7, lr}
 80125ea:	b087      	sub	sp, #28
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60b9      	str	r1, [r7, #8]
 80125f0:	607a      	str	r2, [r7, #4]
 80125f2:	603b      	str	r3, [r7, #0]
 80125f4:	4603      	mov	r3, r0
 80125f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80125f8:	7bfb      	ldrb	r3, [r7, #15]
 80125fa:	4a0a      	ldr	r2, [pc, #40]	; (8012624 <disk_read+0x3c>)
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	4413      	add	r3, r2
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	689c      	ldr	r4, [r3, #8]
 8012604:	7bfb      	ldrb	r3, [r7, #15]
 8012606:	4a07      	ldr	r2, [pc, #28]	; (8012624 <disk_read+0x3c>)
 8012608:	4413      	add	r3, r2
 801260a:	7a18      	ldrb	r0, [r3, #8]
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	68b9      	ldr	r1, [r7, #8]
 8012612:	47a0      	blx	r4
 8012614:	4603      	mov	r3, r0
 8012616:	75fb      	strb	r3, [r7, #23]
  return res;
 8012618:	7dfb      	ldrb	r3, [r7, #23]
}
 801261a:	4618      	mov	r0, r3
 801261c:	371c      	adds	r7, #28
 801261e:	46bd      	mov	sp, r7
 8012620:	bd90      	pop	{r4, r7, pc}
 8012622:	bf00      	nop
 8012624:	20000f8c 	.word	0x20000f8c

08012628 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012628:	b590      	push	{r4, r7, lr}
 801262a:	b087      	sub	sp, #28
 801262c:	af00      	add	r7, sp, #0
 801262e:	60b9      	str	r1, [r7, #8]
 8012630:	607a      	str	r2, [r7, #4]
 8012632:	603b      	str	r3, [r7, #0]
 8012634:	4603      	mov	r3, r0
 8012636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012638:	7bfb      	ldrb	r3, [r7, #15]
 801263a:	4a0a      	ldr	r2, [pc, #40]	; (8012664 <disk_write+0x3c>)
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	4413      	add	r3, r2
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	68dc      	ldr	r4, [r3, #12]
 8012644:	7bfb      	ldrb	r3, [r7, #15]
 8012646:	4a07      	ldr	r2, [pc, #28]	; (8012664 <disk_write+0x3c>)
 8012648:	4413      	add	r3, r2
 801264a:	7a18      	ldrb	r0, [r3, #8]
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	68b9      	ldr	r1, [r7, #8]
 8012652:	47a0      	blx	r4
 8012654:	4603      	mov	r3, r0
 8012656:	75fb      	strb	r3, [r7, #23]
  return res;
 8012658:	7dfb      	ldrb	r3, [r7, #23]
}
 801265a:	4618      	mov	r0, r3
 801265c:	371c      	adds	r7, #28
 801265e:	46bd      	mov	sp, r7
 8012660:	bd90      	pop	{r4, r7, pc}
 8012662:	bf00      	nop
 8012664:	20000f8c 	.word	0x20000f8c

08012668 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	4603      	mov	r3, r0
 8012670:	603a      	str	r2, [r7, #0]
 8012672:	71fb      	strb	r3, [r7, #7]
 8012674:	460b      	mov	r3, r1
 8012676:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012678:	79fb      	ldrb	r3, [r7, #7]
 801267a:	4a09      	ldr	r2, [pc, #36]	; (80126a0 <disk_ioctl+0x38>)
 801267c:	009b      	lsls	r3, r3, #2
 801267e:	4413      	add	r3, r2
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	691b      	ldr	r3, [r3, #16]
 8012684:	79fa      	ldrb	r2, [r7, #7]
 8012686:	4906      	ldr	r1, [pc, #24]	; (80126a0 <disk_ioctl+0x38>)
 8012688:	440a      	add	r2, r1
 801268a:	7a10      	ldrb	r0, [r2, #8]
 801268c:	79b9      	ldrb	r1, [r7, #6]
 801268e:	683a      	ldr	r2, [r7, #0]
 8012690:	4798      	blx	r3
 8012692:	4603      	mov	r3, r0
 8012694:	73fb      	strb	r3, [r7, #15]
  return res;
 8012696:	7bfb      	ldrb	r3, [r7, #15]
}
 8012698:	4618      	mov	r0, r3
 801269a:	3710      	adds	r7, #16
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	20000f8c 	.word	0x20000f8c

080126a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	3301      	adds	r3, #1
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80126b4:	89fb      	ldrh	r3, [r7, #14]
 80126b6:	021b      	lsls	r3, r3, #8
 80126b8:	b21a      	sxth	r2, r3
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	b21b      	sxth	r3, r3
 80126c0:	4313      	orrs	r3, r2
 80126c2:	b21b      	sxth	r3, r3
 80126c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80126c6:	89fb      	ldrh	r3, [r7, #14]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3714      	adds	r7, #20
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr

080126d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80126d4:	b480      	push	{r7}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	3303      	adds	r3, #3
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	021b      	lsls	r3, r3, #8
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	3202      	adds	r2, #2
 80126ec:	7812      	ldrb	r2, [r2, #0]
 80126ee:	4313      	orrs	r3, r2
 80126f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	021b      	lsls	r3, r3, #8
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	3201      	adds	r2, #1
 80126fa:	7812      	ldrb	r2, [r2, #0]
 80126fc:	4313      	orrs	r3, r2
 80126fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	021b      	lsls	r3, r3, #8
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	7812      	ldrb	r2, [r2, #0]
 8012708:	4313      	orrs	r3, r2
 801270a:	60fb      	str	r3, [r7, #12]
	return rv;
 801270c:	68fb      	ldr	r3, [r7, #12]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr

0801271a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801271a:	b480      	push	{r7}
 801271c:	b083      	sub	sp, #12
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
 8012722:	460b      	mov	r3, r1
 8012724:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	887a      	ldrh	r2, [r7, #2]
 801272e:	b2d2      	uxtb	r2, r2
 8012730:	701a      	strb	r2, [r3, #0]
 8012732:	887b      	ldrh	r3, [r7, #2]
 8012734:	0a1b      	lsrs	r3, r3, #8
 8012736:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	1c5a      	adds	r2, r3, #1
 801273c:	607a      	str	r2, [r7, #4]
 801273e:	887a      	ldrh	r2, [r7, #2]
 8012740:	b2d2      	uxtb	r2, r2
 8012742:	701a      	strb	r2, [r3, #0]
}
 8012744:	bf00      	nop
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	1c5a      	adds	r2, r3, #1
 801275e:	607a      	str	r2, [r7, #4]
 8012760:	683a      	ldr	r2, [r7, #0]
 8012762:	b2d2      	uxtb	r2, r2
 8012764:	701a      	strb	r2, [r3, #0]
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	0a1b      	lsrs	r3, r3, #8
 801276a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	1c5a      	adds	r2, r3, #1
 8012770:	607a      	str	r2, [r7, #4]
 8012772:	683a      	ldr	r2, [r7, #0]
 8012774:	b2d2      	uxtb	r2, r2
 8012776:	701a      	strb	r2, [r3, #0]
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	0a1b      	lsrs	r3, r3, #8
 801277c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	1c5a      	adds	r2, r3, #1
 8012782:	607a      	str	r2, [r7, #4]
 8012784:	683a      	ldr	r2, [r7, #0]
 8012786:	b2d2      	uxtb	r2, r2
 8012788:	701a      	strb	r2, [r3, #0]
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	0a1b      	lsrs	r3, r3, #8
 801278e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	607a      	str	r2, [r7, #4]
 8012796:	683a      	ldr	r2, [r7, #0]
 8012798:	b2d2      	uxtb	r2, r2
 801279a:	701a      	strb	r2, [r3, #0]
}
 801279c:	bf00      	nop
 801279e:	370c      	adds	r7, #12
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80127a8:	b480      	push	{r7}
 80127aa:	b087      	sub	sp, #28
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00d      	beq.n	80127de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80127c2:	693a      	ldr	r2, [r7, #16]
 80127c4:	1c53      	adds	r3, r2, #1
 80127c6:	613b      	str	r3, [r7, #16]
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	1c59      	adds	r1, r3, #1
 80127cc:	6179      	str	r1, [r7, #20]
 80127ce:	7812      	ldrb	r2, [r2, #0]
 80127d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	3b01      	subs	r3, #1
 80127d6:	607b      	str	r3, [r7, #4]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d1f1      	bne.n	80127c2 <mem_cpy+0x1a>
	}
}
 80127de:	bf00      	nop
 80127e0:	371c      	adds	r7, #28
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr

080127ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80127ea:	b480      	push	{r7}
 80127ec:	b087      	sub	sp, #28
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	60f8      	str	r0, [r7, #12]
 80127f2:	60b9      	str	r1, [r7, #8]
 80127f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	617a      	str	r2, [r7, #20]
 8012800:	68ba      	ldr	r2, [r7, #8]
 8012802:	b2d2      	uxtb	r2, r2
 8012804:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	3b01      	subs	r3, #1
 801280a:	607b      	str	r3, [r7, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1f3      	bne.n	80127fa <mem_set+0x10>
}
 8012812:	bf00      	nop
 8012814:	bf00      	nop
 8012816:	371c      	adds	r7, #28
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr

08012820 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012820:	b480      	push	{r7}
 8012822:	b089      	sub	sp, #36	; 0x24
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	61fb      	str	r3, [r7, #28]
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012834:	2300      	movs	r3, #0
 8012836:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	1c5a      	adds	r2, r3, #1
 801283c:	61fa      	str	r2, [r7, #28]
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	4619      	mov	r1, r3
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	1c5a      	adds	r2, r3, #1
 8012846:	61ba      	str	r2, [r7, #24]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	1acb      	subs	r3, r1, r3
 801284c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	3b01      	subs	r3, #1
 8012852:	607b      	str	r3, [r7, #4]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d002      	beq.n	8012860 <mem_cmp+0x40>
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d0eb      	beq.n	8012838 <mem_cmp+0x18>

	return r;
 8012860:	697b      	ldr	r3, [r7, #20]
}
 8012862:	4618      	mov	r0, r3
 8012864:	3724      	adds	r7, #36	; 0x24
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801286e:	b480      	push	{r7}
 8012870:	b083      	sub	sp, #12
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012878:	e002      	b.n	8012880 <chk_chr+0x12>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	3301      	adds	r3, #1
 801287e:	607b      	str	r3, [r7, #4]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d005      	beq.n	8012894 <chk_chr+0x26>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	461a      	mov	r2, r3
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	4293      	cmp	r3, r2
 8012892:	d1f2      	bne.n	801287a <chk_chr+0xc>
	return *str;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	781b      	ldrb	r3, [r3, #0]
}
 8012898:	4618      	mov	r0, r3
 801289a:	370c      	adds	r7, #12
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80128a4:	b480      	push	{r7}
 80128a6:	b085      	sub	sp, #20
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80128ae:	2300      	movs	r3, #0
 80128b0:	60bb      	str	r3, [r7, #8]
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	60fb      	str	r3, [r7, #12]
 80128b6:	e029      	b.n	801290c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80128b8:	4a27      	ldr	r2, [pc, #156]	; (8012958 <chk_lock+0xb4>)
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	011b      	lsls	r3, r3, #4
 80128be:	4413      	add	r3, r2
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d01d      	beq.n	8012902 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80128c6:	4a24      	ldr	r2, [pc, #144]	; (8012958 <chk_lock+0xb4>)
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	011b      	lsls	r3, r3, #4
 80128cc:	4413      	add	r3, r2
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d116      	bne.n	8012906 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80128d8:	4a1f      	ldr	r2, [pc, #124]	; (8012958 <chk_lock+0xb4>)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	011b      	lsls	r3, r3, #4
 80128de:	4413      	add	r3, r2
 80128e0:	3304      	adds	r3, #4
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d10c      	bne.n	8012906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80128ec:	4a1a      	ldr	r2, [pc, #104]	; (8012958 <chk_lock+0xb4>)
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	011b      	lsls	r3, r3, #4
 80128f2:	4413      	add	r3, r2
 80128f4:	3308      	adds	r3, #8
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d102      	bne.n	8012906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012900:	e007      	b.n	8012912 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012902:	2301      	movs	r3, #1
 8012904:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	3301      	adds	r3, #1
 801290a:	60fb      	str	r3, [r7, #12]
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2b01      	cmp	r3, #1
 8012910:	d9d2      	bls.n	80128b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b02      	cmp	r3, #2
 8012916:	d109      	bne.n	801292c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d102      	bne.n	8012924 <chk_lock+0x80>
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	2b02      	cmp	r3, #2
 8012922:	d101      	bne.n	8012928 <chk_lock+0x84>
 8012924:	2300      	movs	r3, #0
 8012926:	e010      	b.n	801294a <chk_lock+0xa6>
 8012928:	2312      	movs	r3, #18
 801292a:	e00e      	b.n	801294a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d108      	bne.n	8012944 <chk_lock+0xa0>
 8012932:	4a09      	ldr	r2, [pc, #36]	; (8012958 <chk_lock+0xb4>)
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	011b      	lsls	r3, r3, #4
 8012938:	4413      	add	r3, r2
 801293a:	330c      	adds	r3, #12
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012942:	d101      	bne.n	8012948 <chk_lock+0xa4>
 8012944:	2310      	movs	r3, #16
 8012946:	e000      	b.n	801294a <chk_lock+0xa6>
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	20000f6c 	.word	0x20000f6c

0801295c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801295c:	b480      	push	{r7}
 801295e:	b083      	sub	sp, #12
 8012960:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012962:	2300      	movs	r3, #0
 8012964:	607b      	str	r3, [r7, #4]
 8012966:	e002      	b.n	801296e <enq_lock+0x12>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3301      	adds	r3, #1
 801296c:	607b      	str	r3, [r7, #4]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d806      	bhi.n	8012982 <enq_lock+0x26>
 8012974:	4a09      	ldr	r2, [pc, #36]	; (801299c <enq_lock+0x40>)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	011b      	lsls	r3, r3, #4
 801297a:	4413      	add	r3, r2
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d1f2      	bne.n	8012968 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b02      	cmp	r3, #2
 8012986:	bf14      	ite	ne
 8012988:	2301      	movne	r3, #1
 801298a:	2300      	moveq	r3, #0
 801298c:	b2db      	uxtb	r3, r3
}
 801298e:	4618      	mov	r0, r3
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	20000f6c 	.word	0x20000f6c

080129a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b085      	sub	sp, #20
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80129aa:	2300      	movs	r3, #0
 80129ac:	60fb      	str	r3, [r7, #12]
 80129ae:	e01f      	b.n	80129f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80129b0:	4a41      	ldr	r2, [pc, #260]	; (8012ab8 <inc_lock+0x118>)
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	011b      	lsls	r3, r3, #4
 80129b6:	4413      	add	r3, r2
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d113      	bne.n	80129ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80129c2:	4a3d      	ldr	r2, [pc, #244]	; (8012ab8 <inc_lock+0x118>)
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	011b      	lsls	r3, r3, #4
 80129c8:	4413      	add	r3, r2
 80129ca:	3304      	adds	r3, #4
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d109      	bne.n	80129ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80129d6:	4a38      	ldr	r2, [pc, #224]	; (8012ab8 <inc_lock+0x118>)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	011b      	lsls	r3, r3, #4
 80129dc:	4413      	add	r3, r2
 80129de:	3308      	adds	r3, #8
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d006      	beq.n	80129f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	3301      	adds	r3, #1
 80129ee:	60fb      	str	r3, [r7, #12]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d9dc      	bls.n	80129b0 <inc_lock+0x10>
 80129f6:	e000      	b.n	80129fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80129f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d132      	bne.n	8012a66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012a00:	2300      	movs	r3, #0
 8012a02:	60fb      	str	r3, [r7, #12]
 8012a04:	e002      	b.n	8012a0c <inc_lock+0x6c>
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	60fb      	str	r3, [r7, #12]
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d806      	bhi.n	8012a20 <inc_lock+0x80>
 8012a12:	4a29      	ldr	r2, [pc, #164]	; (8012ab8 <inc_lock+0x118>)
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	011b      	lsls	r3, r3, #4
 8012a18:	4413      	add	r3, r2
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d1f2      	bne.n	8012a06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	d101      	bne.n	8012a2a <inc_lock+0x8a>
 8012a26:	2300      	movs	r3, #0
 8012a28:	e040      	b.n	8012aac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681a      	ldr	r2, [r3, #0]
 8012a2e:	4922      	ldr	r1, [pc, #136]	; (8012ab8 <inc_lock+0x118>)
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	011b      	lsls	r3, r3, #4
 8012a34:	440b      	add	r3, r1
 8012a36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	689a      	ldr	r2, [r3, #8]
 8012a3c:	491e      	ldr	r1, [pc, #120]	; (8012ab8 <inc_lock+0x118>)
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	011b      	lsls	r3, r3, #4
 8012a42:	440b      	add	r3, r1
 8012a44:	3304      	adds	r3, #4
 8012a46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	695a      	ldr	r2, [r3, #20]
 8012a4c:	491a      	ldr	r1, [pc, #104]	; (8012ab8 <inc_lock+0x118>)
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	011b      	lsls	r3, r3, #4
 8012a52:	440b      	add	r3, r1
 8012a54:	3308      	adds	r3, #8
 8012a56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012a58:	4a17      	ldr	r2, [pc, #92]	; (8012ab8 <inc_lock+0x118>)
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	011b      	lsls	r3, r3, #4
 8012a5e:	4413      	add	r3, r2
 8012a60:	330c      	adds	r3, #12
 8012a62:	2200      	movs	r2, #0
 8012a64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d009      	beq.n	8012a80 <inc_lock+0xe0>
 8012a6c:	4a12      	ldr	r2, [pc, #72]	; (8012ab8 <inc_lock+0x118>)
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	011b      	lsls	r3, r3, #4
 8012a72:	4413      	add	r3, r2
 8012a74:	330c      	adds	r3, #12
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d001      	beq.n	8012a80 <inc_lock+0xe0>
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	e015      	b.n	8012aac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d108      	bne.n	8012a98 <inc_lock+0xf8>
 8012a86:	4a0c      	ldr	r2, [pc, #48]	; (8012ab8 <inc_lock+0x118>)
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	011b      	lsls	r3, r3, #4
 8012a8c:	4413      	add	r3, r2
 8012a8e:	330c      	adds	r3, #12
 8012a90:	881b      	ldrh	r3, [r3, #0]
 8012a92:	3301      	adds	r3, #1
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	e001      	b.n	8012a9c <inc_lock+0xfc>
 8012a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a9c:	4906      	ldr	r1, [pc, #24]	; (8012ab8 <inc_lock+0x118>)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	011b      	lsls	r3, r3, #4
 8012aa2:	440b      	add	r3, r1
 8012aa4:	330c      	adds	r3, #12
 8012aa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	3301      	adds	r3, #1
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3714      	adds	r7, #20
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr
 8012ab8:	20000f6c 	.word	0x20000f6c

08012abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b085      	sub	sp, #20
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	3b01      	subs	r3, #1
 8012ac8:	607b      	str	r3, [r7, #4]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d825      	bhi.n	8012b1c <dec_lock+0x60>
		n = Files[i].ctr;
 8012ad0:	4a17      	ldr	r2, [pc, #92]	; (8012b30 <dec_lock+0x74>)
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	011b      	lsls	r3, r3, #4
 8012ad6:	4413      	add	r3, r2
 8012ad8:	330c      	adds	r3, #12
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012ade:	89fb      	ldrh	r3, [r7, #14]
 8012ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ae4:	d101      	bne.n	8012aea <dec_lock+0x2e>
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012aea:	89fb      	ldrh	r3, [r7, #14]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d002      	beq.n	8012af6 <dec_lock+0x3a>
 8012af0:	89fb      	ldrh	r3, [r7, #14]
 8012af2:	3b01      	subs	r3, #1
 8012af4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012af6:	4a0e      	ldr	r2, [pc, #56]	; (8012b30 <dec_lock+0x74>)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	011b      	lsls	r3, r3, #4
 8012afc:	4413      	add	r3, r2
 8012afe:	330c      	adds	r3, #12
 8012b00:	89fa      	ldrh	r2, [r7, #14]
 8012b02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012b04:	89fb      	ldrh	r3, [r7, #14]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d105      	bne.n	8012b16 <dec_lock+0x5a>
 8012b0a:	4a09      	ldr	r2, [pc, #36]	; (8012b30 <dec_lock+0x74>)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	011b      	lsls	r3, r3, #4
 8012b10:	4413      	add	r3, r2
 8012b12:	2200      	movs	r2, #0
 8012b14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012b16:	2300      	movs	r3, #0
 8012b18:	737b      	strb	r3, [r7, #13]
 8012b1a:	e001      	b.n	8012b20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012b1c:	2302      	movs	r3, #2
 8012b1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012b20:	7b7b      	ldrb	r3, [r7, #13]
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	20000f6c 	.word	0x20000f6c

08012b34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b085      	sub	sp, #20
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	60fb      	str	r3, [r7, #12]
 8012b40:	e010      	b.n	8012b64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012b42:	4a0d      	ldr	r2, [pc, #52]	; (8012b78 <clear_lock+0x44>)
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	011b      	lsls	r3, r3, #4
 8012b48:	4413      	add	r3, r2
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d105      	bne.n	8012b5e <clear_lock+0x2a>
 8012b52:	4a09      	ldr	r2, [pc, #36]	; (8012b78 <clear_lock+0x44>)
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	4413      	add	r3, r2
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	3301      	adds	r3, #1
 8012b62:	60fb      	str	r3, [r7, #12]
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d9eb      	bls.n	8012b42 <clear_lock+0xe>
	}
}
 8012b6a:	bf00      	nop
 8012b6c:	bf00      	nop
 8012b6e:	3714      	adds	r7, #20
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr
 8012b78:	20000f6c 	.word	0x20000f6c

08012b7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b086      	sub	sp, #24
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012b84:	2300      	movs	r3, #0
 8012b86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	78db      	ldrb	r3, [r3, #3]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d034      	beq.n	8012bfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	7858      	ldrb	r0, [r3, #1]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	697a      	ldr	r2, [r7, #20]
 8012ba4:	f7ff fd40 	bl	8012628 <disk_write>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d002      	beq.n	8012bb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012bae:	2301      	movs	r3, #1
 8012bb0:	73fb      	strb	r3, [r7, #15]
 8012bb2:	e022      	b.n	8012bfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6a1b      	ldr	r3, [r3, #32]
 8012bbe:	697a      	ldr	r2, [r7, #20]
 8012bc0:	1ad2      	subs	r2, r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	699b      	ldr	r3, [r3, #24]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d217      	bcs.n	8012bfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	789b      	ldrb	r3, [r3, #2]
 8012bce:	613b      	str	r3, [r7, #16]
 8012bd0:	e010      	b.n	8012bf4 <sync_window+0x78>
					wsect += fs->fsize;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	699b      	ldr	r3, [r3, #24]
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	4413      	add	r3, r2
 8012bda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	7858      	ldrb	r0, [r3, #1]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012be6:	2301      	movs	r3, #1
 8012be8:	697a      	ldr	r2, [r7, #20]
 8012bea:	f7ff fd1d 	bl	8012628 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	613b      	str	r3, [r7, #16]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	2b01      	cmp	r3, #1
 8012bf8:	d8eb      	bhi.n	8012bd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3718      	adds	r7, #24
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c16:	683a      	ldr	r2, [r7, #0]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d01b      	beq.n	8012c54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7ff ffad 	bl	8012b7c <sync_window>
 8012c22:	4603      	mov	r3, r0
 8012c24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012c26:	7bfb      	ldrb	r3, [r7, #15]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d113      	bne.n	8012c54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	7858      	ldrb	r0, [r3, #1]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c36:	2301      	movs	r3, #1
 8012c38:	683a      	ldr	r2, [r7, #0]
 8012c3a:	f7ff fcd5 	bl	80125e8 <disk_read>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d004      	beq.n	8012c4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012c44:	f04f 33ff 	mov.w	r3, #4294967295
 8012c48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	683a      	ldr	r2, [r7, #0]
 8012c52:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff ff87 	bl	8012b7c <sync_window>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012c72:	7bfb      	ldrb	r3, [r7, #15]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d158      	bne.n	8012d2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	2b03      	cmp	r3, #3
 8012c7e:	d148      	bne.n	8012d12 <sync_fs+0xb2>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	791b      	ldrb	r3, [r3, #4]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d144      	bne.n	8012d12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	3330      	adds	r3, #48	; 0x30
 8012c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c90:	2100      	movs	r1, #0
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7ff fda9 	bl	80127ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	3330      	adds	r3, #48	; 0x30
 8012c9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ca0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff fd38 	bl	801271a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3330      	adds	r3, #48	; 0x30
 8012cae:	4921      	ldr	r1, [pc, #132]	; (8012d34 <sync_fs+0xd4>)
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff fd4d 	bl	8012750 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	3330      	adds	r3, #48	; 0x30
 8012cba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012cbe:	491e      	ldr	r1, [pc, #120]	; (8012d38 <sync_fs+0xd8>)
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fd45 	bl	8012750 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	3330      	adds	r3, #48	; 0x30
 8012cca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	691b      	ldr	r3, [r3, #16]
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	4610      	mov	r0, r2
 8012cd6:	f7ff fd3b 	bl	8012750 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	3330      	adds	r3, #48	; 0x30
 8012cde:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	4610      	mov	r0, r2
 8012cea:	f7ff fd31 	bl	8012750 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	69db      	ldr	r3, [r3, #28]
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	7858      	ldrb	r0, [r3, #1]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d06:	2301      	movs	r3, #1
 8012d08:	f7ff fc8e 	bl	8012628 <disk_write>
			fs->fsi_flag = 0;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	785b      	ldrb	r3, [r3, #1]
 8012d16:	2200      	movs	r2, #0
 8012d18:	2100      	movs	r1, #0
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7ff fca4 	bl	8012668 <disk_ioctl>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <sync_fs+0xca>
 8012d26:	2301      	movs	r3, #1
 8012d28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3710      	adds	r7, #16
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	41615252 	.word	0x41615252
 8012d38:	61417272 	.word	0x61417272

08012d3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	3b02      	subs	r3, #2
 8012d4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	695b      	ldr	r3, [r3, #20]
 8012d50:	3b02      	subs	r3, #2
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d301      	bcc.n	8012d5c <clust2sect+0x20>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	e008      	b.n	8012d6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	895b      	ldrh	r3, [r3, #10]
 8012d60:	461a      	mov	r2, r3
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	fb03 f202 	mul.w	r2, r3, r2
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d6c:	4413      	add	r3, r2
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	370c      	adds	r7, #12
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr

08012d7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b086      	sub	sp, #24
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d904      	bls.n	8012d9a <get_fat+0x20>
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	695b      	ldr	r3, [r3, #20]
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d302      	bcc.n	8012da0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	617b      	str	r3, [r7, #20]
 8012d9e:	e08f      	b.n	8012ec0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012da0:	f04f 33ff 	mov.w	r3, #4294967295
 8012da4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	2b03      	cmp	r3, #3
 8012dac:	d062      	beq.n	8012e74 <get_fat+0xfa>
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	dc7c      	bgt.n	8012eac <get_fat+0x132>
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	d002      	beq.n	8012dbc <get_fat+0x42>
 8012db6:	2b02      	cmp	r3, #2
 8012db8:	d042      	beq.n	8012e40 <get_fat+0xc6>
 8012dba:	e077      	b.n	8012eac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	60fb      	str	r3, [r7, #12]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	085b      	lsrs	r3, r3, #1
 8012dc4:	68fa      	ldr	r2, [r7, #12]
 8012dc6:	4413      	add	r3, r2
 8012dc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	6a1a      	ldr	r2, [r3, #32]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	0a5b      	lsrs	r3, r3, #9
 8012dd2:	4413      	add	r3, r2
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	6938      	ldr	r0, [r7, #16]
 8012dd8:	f7ff ff14 	bl	8012c04 <move_window>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d167      	bne.n	8012eb2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	1c5a      	adds	r2, r3, #1
 8012de6:	60fa      	str	r2, [r7, #12]
 8012de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012dec:	693a      	ldr	r2, [r7, #16]
 8012dee:	4413      	add	r3, r2
 8012df0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012df4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	6a1a      	ldr	r2, [r3, #32]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	0a5b      	lsrs	r3, r3, #9
 8012dfe:	4413      	add	r3, r2
 8012e00:	4619      	mov	r1, r3
 8012e02:	6938      	ldr	r0, [r7, #16]
 8012e04:	f7ff fefe 	bl	8012c04 <move_window>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d153      	bne.n	8012eb6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e14:	693a      	ldr	r2, [r7, #16]
 8012e16:	4413      	add	r3, r2
 8012e18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e1c:	021b      	lsls	r3, r3, #8
 8012e1e:	461a      	mov	r2, r3
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	4313      	orrs	r3, r2
 8012e24:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	f003 0301 	and.w	r3, r3, #1
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d002      	beq.n	8012e36 <get_fat+0xbc>
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	091b      	lsrs	r3, r3, #4
 8012e34:	e002      	b.n	8012e3c <get_fat+0xc2>
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e3c:	617b      	str	r3, [r7, #20]
			break;
 8012e3e:	e03f      	b.n	8012ec0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	6a1a      	ldr	r2, [r3, #32]
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	0a1b      	lsrs	r3, r3, #8
 8012e48:	4413      	add	r3, r2
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	6938      	ldr	r0, [r7, #16]
 8012e4e:	f7ff fed9 	bl	8012c04 <move_window>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d130      	bne.n	8012eba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	005b      	lsls	r3, r3, #1
 8012e62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012e66:	4413      	add	r3, r2
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7ff fc1b 	bl	80126a4 <ld_word>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	617b      	str	r3, [r7, #20]
			break;
 8012e72:	e025      	b.n	8012ec0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	6a1a      	ldr	r2, [r3, #32]
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	09db      	lsrs	r3, r3, #7
 8012e7c:	4413      	add	r3, r2
 8012e7e:	4619      	mov	r1, r3
 8012e80:	6938      	ldr	r0, [r7, #16]
 8012e82:	f7ff febf 	bl	8012c04 <move_window>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d118      	bne.n	8012ebe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012e9a:	4413      	add	r3, r2
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff fc19 	bl	80126d4 <ld_dword>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012ea8:	617b      	str	r3, [r7, #20]
			break;
 8012eaa:	e009      	b.n	8012ec0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012eac:	2301      	movs	r3, #1
 8012eae:	617b      	str	r3, [r7, #20]
 8012eb0:	e006      	b.n	8012ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012eb2:	bf00      	nop
 8012eb4:	e004      	b.n	8012ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012eb6:	bf00      	nop
 8012eb8:	e002      	b.n	8012ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012eba:	bf00      	nop
 8012ebc:	e000      	b.n	8012ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ebe:	bf00      	nop
		}
	}

	return val;
 8012ec0:	697b      	ldr	r3, [r7, #20]
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3718      	adds	r7, #24
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012eca:	b590      	push	{r4, r7, lr}
 8012ecc:	b089      	sub	sp, #36	; 0x24
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	60f8      	str	r0, [r7, #12]
 8012ed2:	60b9      	str	r1, [r7, #8]
 8012ed4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012ed6:	2302      	movs	r3, #2
 8012ed8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	f240 80d2 	bls.w	8013086 <put_fat+0x1bc>
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	695b      	ldr	r3, [r3, #20]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	f080 80cc 	bcs.w	8013086 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	2b03      	cmp	r3, #3
 8012ef4:	f000 8096 	beq.w	8013024 <put_fat+0x15a>
 8012ef8:	2b03      	cmp	r3, #3
 8012efa:	f300 80cd 	bgt.w	8013098 <put_fat+0x1ce>
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d002      	beq.n	8012f08 <put_fat+0x3e>
 8012f02:	2b02      	cmp	r3, #2
 8012f04:	d06e      	beq.n	8012fe4 <put_fat+0x11a>
 8012f06:	e0c7      	b.n	8013098 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	61bb      	str	r3, [r7, #24]
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	085b      	lsrs	r3, r3, #1
 8012f10:	69ba      	ldr	r2, [r7, #24]
 8012f12:	4413      	add	r3, r2
 8012f14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6a1a      	ldr	r2, [r3, #32]
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	0a5b      	lsrs	r3, r3, #9
 8012f1e:	4413      	add	r3, r2
 8012f20:	4619      	mov	r1, r3
 8012f22:	68f8      	ldr	r0, [r7, #12]
 8012f24:	f7ff fe6e 	bl	8012c04 <move_window>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f2c:	7ffb      	ldrb	r3, [r7, #31]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f040 80ab 	bne.w	801308a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	1c59      	adds	r1, r3, #1
 8012f3e:	61b9      	str	r1, [r7, #24]
 8012f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f44:	4413      	add	r3, r2
 8012f46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	f003 0301 	and.w	r3, r3, #1
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00d      	beq.n	8012f6e <put_fat+0xa4>
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	b25b      	sxtb	r3, r3
 8012f58:	f003 030f 	and.w	r3, r3, #15
 8012f5c:	b25a      	sxtb	r2, r3
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	011b      	lsls	r3, r3, #4
 8012f64:	b25b      	sxtb	r3, r3
 8012f66:	4313      	orrs	r3, r2
 8012f68:	b25b      	sxtb	r3, r3
 8012f6a:	b2db      	uxtb	r3, r3
 8012f6c:	e001      	b.n	8012f72 <put_fat+0xa8>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	697a      	ldr	r2, [r7, #20]
 8012f74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2201      	movs	r2, #1
 8012f7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	6a1a      	ldr	r2, [r3, #32]
 8012f80:	69bb      	ldr	r3, [r7, #24]
 8012f82:	0a5b      	lsrs	r3, r3, #9
 8012f84:	4413      	add	r3, r2
 8012f86:	4619      	mov	r1, r3
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f7ff fe3b 	bl	8012c04 <move_window>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f92:	7ffb      	ldrb	r3, [r7, #31]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d17a      	bne.n	801308e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fa4:	4413      	add	r3, r2
 8012fa6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	f003 0301 	and.w	r3, r3, #1
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d003      	beq.n	8012fba <put_fat+0xf0>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	091b      	lsrs	r3, r3, #4
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	e00e      	b.n	8012fd8 <put_fat+0x10e>
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	b25b      	sxtb	r3, r3
 8012fc0:	f023 030f 	bic.w	r3, r3, #15
 8012fc4:	b25a      	sxtb	r2, r3
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	0a1b      	lsrs	r3, r3, #8
 8012fca:	b25b      	sxtb	r3, r3
 8012fcc:	f003 030f 	and.w	r3, r3, #15
 8012fd0:	b25b      	sxtb	r3, r3
 8012fd2:	4313      	orrs	r3, r2
 8012fd4:	b25b      	sxtb	r3, r3
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	697a      	ldr	r2, [r7, #20]
 8012fda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2201      	movs	r2, #1
 8012fe0:	70da      	strb	r2, [r3, #3]
			break;
 8012fe2:	e059      	b.n	8013098 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	6a1a      	ldr	r2, [r3, #32]
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	0a1b      	lsrs	r3, r3, #8
 8012fec:	4413      	add	r3, r2
 8012fee:	4619      	mov	r1, r3
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f7ff fe07 	bl	8012c04 <move_window>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ffa:	7ffb      	ldrb	r3, [r7, #31]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d148      	bne.n	8013092 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801300e:	4413      	add	r3, r2
 8013010:	687a      	ldr	r2, [r7, #4]
 8013012:	b292      	uxth	r2, r2
 8013014:	4611      	mov	r1, r2
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fb7f 	bl	801271a <st_word>
			fs->wflag = 1;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2201      	movs	r2, #1
 8013020:	70da      	strb	r2, [r3, #3]
			break;
 8013022:	e039      	b.n	8013098 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	6a1a      	ldr	r2, [r3, #32]
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	09db      	lsrs	r3, r3, #7
 801302c:	4413      	add	r3, r2
 801302e:	4619      	mov	r1, r3
 8013030:	68f8      	ldr	r0, [r7, #12]
 8013032:	f7ff fde7 	bl	8012c04 <move_window>
 8013036:	4603      	mov	r3, r0
 8013038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801303a:	7ffb      	ldrb	r3, [r7, #31]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d12a      	bne.n	8013096 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013054:	4413      	add	r3, r2
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fb3c 	bl	80126d4 <ld_dword>
 801305c:	4603      	mov	r3, r0
 801305e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013062:	4323      	orrs	r3, r4
 8013064:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013074:	4413      	add	r3, r2
 8013076:	6879      	ldr	r1, [r7, #4]
 8013078:	4618      	mov	r0, r3
 801307a:	f7ff fb69 	bl	8012750 <st_dword>
			fs->wflag = 1;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2201      	movs	r2, #1
 8013082:	70da      	strb	r2, [r3, #3]
			break;
 8013084:	e008      	b.n	8013098 <put_fat+0x1ce>
		}
	}
 8013086:	bf00      	nop
 8013088:	e006      	b.n	8013098 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801308a:	bf00      	nop
 801308c:	e004      	b.n	8013098 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801308e:	bf00      	nop
 8013090:	e002      	b.n	8013098 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013092:	bf00      	nop
 8013094:	e000      	b.n	8013098 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013096:	bf00      	nop
	return res;
 8013098:	7ffb      	ldrb	r3, [r7, #31]
}
 801309a:	4618      	mov	r0, r3
 801309c:	3724      	adds	r7, #36	; 0x24
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd90      	pop	{r4, r7, pc}

080130a2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b088      	sub	sp, #32
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	60f8      	str	r0, [r7, #12]
 80130aa:	60b9      	str	r1, [r7, #8]
 80130ac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d904      	bls.n	80130c8 <remove_chain+0x26>
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	695b      	ldr	r3, [r3, #20]
 80130c2:	68ba      	ldr	r2, [r7, #8]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d301      	bcc.n	80130cc <remove_chain+0x2a>
 80130c8:	2302      	movs	r3, #2
 80130ca:	e04b      	b.n	8013164 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d00c      	beq.n	80130ec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80130d2:	f04f 32ff 	mov.w	r2, #4294967295
 80130d6:	6879      	ldr	r1, [r7, #4]
 80130d8:	69b8      	ldr	r0, [r7, #24]
 80130da:	f7ff fef6 	bl	8012eca <put_fat>
 80130de:	4603      	mov	r3, r0
 80130e0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80130e2:	7ffb      	ldrb	r3, [r7, #31]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d001      	beq.n	80130ec <remove_chain+0x4a>
 80130e8:	7ffb      	ldrb	r3, [r7, #31]
 80130ea:	e03b      	b.n	8013164 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80130ec:	68b9      	ldr	r1, [r7, #8]
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	f7ff fe43 	bl	8012d7a <get_fat>
 80130f4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d031      	beq.n	8013160 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d101      	bne.n	8013106 <remove_chain+0x64>
 8013102:	2302      	movs	r3, #2
 8013104:	e02e      	b.n	8013164 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310c:	d101      	bne.n	8013112 <remove_chain+0x70>
 801310e:	2301      	movs	r3, #1
 8013110:	e028      	b.n	8013164 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013112:	2200      	movs	r2, #0
 8013114:	68b9      	ldr	r1, [r7, #8]
 8013116:	69b8      	ldr	r0, [r7, #24]
 8013118:	f7ff fed7 	bl	8012eca <put_fat>
 801311c:	4603      	mov	r3, r0
 801311e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013120:	7ffb      	ldrb	r3, [r7, #31]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <remove_chain+0x88>
 8013126:	7ffb      	ldrb	r3, [r7, #31]
 8013128:	e01c      	b.n	8013164 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	691a      	ldr	r2, [r3, #16]
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	695b      	ldr	r3, [r3, #20]
 8013132:	3b02      	subs	r3, #2
 8013134:	429a      	cmp	r2, r3
 8013136:	d20b      	bcs.n	8013150 <remove_chain+0xae>
			fs->free_clst++;
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	691b      	ldr	r3, [r3, #16]
 801313c:	1c5a      	adds	r2, r3, #1
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013142:	69bb      	ldr	r3, [r7, #24]
 8013144:	791b      	ldrb	r3, [r3, #4]
 8013146:	f043 0301 	orr.w	r3, r3, #1
 801314a:	b2da      	uxtb	r2, r3
 801314c:	69bb      	ldr	r3, [r7, #24]
 801314e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	695b      	ldr	r3, [r3, #20]
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	429a      	cmp	r2, r3
 801315c:	d3c6      	bcc.n	80130ec <remove_chain+0x4a>
 801315e:	e000      	b.n	8013162 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013160:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	3720      	adds	r7, #32
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b088      	sub	sp, #32
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d10d      	bne.n	801319e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	68db      	ldr	r3, [r3, #12]
 8013186:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d004      	beq.n	8013198 <create_chain+0x2c>
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	695b      	ldr	r3, [r3, #20]
 8013192:	69ba      	ldr	r2, [r7, #24]
 8013194:	429a      	cmp	r2, r3
 8013196:	d31b      	bcc.n	80131d0 <create_chain+0x64>
 8013198:	2301      	movs	r3, #1
 801319a:	61bb      	str	r3, [r7, #24]
 801319c:	e018      	b.n	80131d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801319e:	6839      	ldr	r1, [r7, #0]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7ff fdea 	bl	8012d7a <get_fat>
 80131a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d801      	bhi.n	80131b2 <create_chain+0x46>
 80131ae:	2301      	movs	r3, #1
 80131b0:	e070      	b.n	8013294 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b8:	d101      	bne.n	80131be <create_chain+0x52>
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	e06a      	b.n	8013294 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	695b      	ldr	r3, [r3, #20]
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d201      	bcs.n	80131cc <create_chain+0x60>
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	e063      	b.n	8013294 <create_chain+0x128>
		scl = clst;
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80131d0:	69bb      	ldr	r3, [r7, #24]
 80131d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	3301      	adds	r3, #1
 80131d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	695b      	ldr	r3, [r3, #20]
 80131de:	69fa      	ldr	r2, [r7, #28]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d307      	bcc.n	80131f4 <create_chain+0x88>
				ncl = 2;
 80131e4:	2302      	movs	r3, #2
 80131e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80131e8:	69fa      	ldr	r2, [r7, #28]
 80131ea:	69bb      	ldr	r3, [r7, #24]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d901      	bls.n	80131f4 <create_chain+0x88>
 80131f0:	2300      	movs	r3, #0
 80131f2:	e04f      	b.n	8013294 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80131f4:	69f9      	ldr	r1, [r7, #28]
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7ff fdbf 	bl	8012d7a <get_fat>
 80131fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00e      	beq.n	8013222 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d003      	beq.n	8013212 <create_chain+0xa6>
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013210:	d101      	bne.n	8013216 <create_chain+0xaa>
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	e03e      	b.n	8013294 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013216:	69fa      	ldr	r2, [r7, #28]
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	429a      	cmp	r2, r3
 801321c:	d1da      	bne.n	80131d4 <create_chain+0x68>
 801321e:	2300      	movs	r3, #0
 8013220:	e038      	b.n	8013294 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013222:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013224:	f04f 32ff 	mov.w	r2, #4294967295
 8013228:	69f9      	ldr	r1, [r7, #28]
 801322a:	6938      	ldr	r0, [r7, #16]
 801322c:	f7ff fe4d 	bl	8012eca <put_fat>
 8013230:	4603      	mov	r3, r0
 8013232:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013234:	7dfb      	ldrb	r3, [r7, #23]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d109      	bne.n	801324e <create_chain+0xe2>
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d006      	beq.n	801324e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013240:	69fa      	ldr	r2, [r7, #28]
 8013242:	6839      	ldr	r1, [r7, #0]
 8013244:	6938      	ldr	r0, [r7, #16]
 8013246:	f7ff fe40 	bl	8012eca <put_fat>
 801324a:	4603      	mov	r3, r0
 801324c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801324e:	7dfb      	ldrb	r3, [r7, #23]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d116      	bne.n	8013282 <create_chain+0x116>
		fs->last_clst = ncl;
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	69fa      	ldr	r2, [r7, #28]
 8013258:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	691a      	ldr	r2, [r3, #16]
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	695b      	ldr	r3, [r3, #20]
 8013262:	3b02      	subs	r3, #2
 8013264:	429a      	cmp	r2, r3
 8013266:	d804      	bhi.n	8013272 <create_chain+0x106>
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	691b      	ldr	r3, [r3, #16]
 801326c:	1e5a      	subs	r2, r3, #1
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	791b      	ldrb	r3, [r3, #4]
 8013276:	f043 0301 	orr.w	r3, r3, #1
 801327a:	b2da      	uxtb	r2, r3
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	711a      	strb	r2, [r3, #4]
 8013280:	e007      	b.n	8013292 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013282:	7dfb      	ldrb	r3, [r7, #23]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d102      	bne.n	801328e <create_chain+0x122>
 8013288:	f04f 33ff 	mov.w	r3, #4294967295
 801328c:	e000      	b.n	8013290 <create_chain+0x124>
 801328e:	2301      	movs	r3, #1
 8013290:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013292:	69fb      	ldr	r3, [r7, #28]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3720      	adds	r7, #32
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801329c:	b480      	push	{r7}
 801329e:	b087      	sub	sp, #28
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132b0:	3304      	adds	r3, #4
 80132b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	0a5b      	lsrs	r3, r3, #9
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	8952      	ldrh	r2, [r2, #10]
 80132bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80132c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	1d1a      	adds	r2, r3, #4
 80132c6:	613a      	str	r2, [r7, #16]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d101      	bne.n	80132d6 <clmt_clust+0x3a>
 80132d2:	2300      	movs	r3, #0
 80132d4:	e010      	b.n	80132f8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80132d6:	697a      	ldr	r2, [r7, #20]
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d307      	bcc.n	80132ee <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80132de:	697a      	ldr	r2, [r7, #20]
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	1ad3      	subs	r3, r2, r3
 80132e4:	617b      	str	r3, [r7, #20]
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	3304      	adds	r3, #4
 80132ea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80132ec:	e7e9      	b.n	80132c2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80132ee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	4413      	add	r3, r2
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	371c      	adds	r7, #28
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801331a:	d204      	bcs.n	8013326 <dir_sdi+0x22>
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	f003 031f 	and.w	r3, r3, #31
 8013322:	2b00      	cmp	r3, #0
 8013324:	d001      	beq.n	801332a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013326:	2302      	movs	r3, #2
 8013328:	e063      	b.n	80133f2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	683a      	ldr	r2, [r7, #0]
 801332e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	689b      	ldr	r3, [r3, #8]
 8013334:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d106      	bne.n	801334a <dir_sdi+0x46>
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	2b02      	cmp	r3, #2
 8013342:	d902      	bls.n	801334a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013348:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d10c      	bne.n	801336a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	095b      	lsrs	r3, r3, #5
 8013354:	693a      	ldr	r2, [r7, #16]
 8013356:	8912      	ldrh	r2, [r2, #8]
 8013358:	4293      	cmp	r3, r2
 801335a:	d301      	bcc.n	8013360 <dir_sdi+0x5c>
 801335c:	2302      	movs	r3, #2
 801335e:	e048      	b.n	80133f2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	61da      	str	r2, [r3, #28]
 8013368:	e029      	b.n	80133be <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	895b      	ldrh	r3, [r3, #10]
 801336e:	025b      	lsls	r3, r3, #9
 8013370:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013372:	e019      	b.n	80133a8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6979      	ldr	r1, [r7, #20]
 8013378:	4618      	mov	r0, r3
 801337a:	f7ff fcfe 	bl	8012d7a <get_fat>
 801337e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013386:	d101      	bne.n	801338c <dir_sdi+0x88>
 8013388:	2301      	movs	r3, #1
 801338a:	e032      	b.n	80133f2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	2b01      	cmp	r3, #1
 8013390:	d904      	bls.n	801339c <dir_sdi+0x98>
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	695b      	ldr	r3, [r3, #20]
 8013396:	697a      	ldr	r2, [r7, #20]
 8013398:	429a      	cmp	r2, r3
 801339a:	d301      	bcc.n	80133a0 <dir_sdi+0x9c>
 801339c:	2302      	movs	r3, #2
 801339e:	e028      	b.n	80133f2 <dir_sdi+0xee>
			ofs -= csz;
 80133a0:	683a      	ldr	r2, [r7, #0]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	1ad3      	subs	r3, r2, r3
 80133a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d2e1      	bcs.n	8013374 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80133b0:	6979      	ldr	r1, [r7, #20]
 80133b2:	6938      	ldr	r0, [r7, #16]
 80133b4:	f7ff fcc2 	bl	8012d3c <clust2sect>
 80133b8:	4602      	mov	r2, r0
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	697a      	ldr	r2, [r7, #20]
 80133c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	69db      	ldr	r3, [r3, #28]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d101      	bne.n	80133d0 <dir_sdi+0xcc>
 80133cc:	2302      	movs	r3, #2
 80133ce:	e010      	b.n	80133f2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	69da      	ldr	r2, [r3, #28]
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	0a5b      	lsrs	r3, r3, #9
 80133d8:	441a      	add	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133ea:	441a      	add	r2, r3
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80133f0:	2300      	movs	r3, #0
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3718      	adds	r7, #24
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80133fa:	b580      	push	{r7, lr}
 80133fc:	b086      	sub	sp, #24
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
 8013402:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	695b      	ldr	r3, [r3, #20]
 801340e:	3320      	adds	r3, #32
 8013410:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	69db      	ldr	r3, [r3, #28]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d003      	beq.n	8013422 <dir_next+0x28>
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013420:	d301      	bcc.n	8013426 <dir_next+0x2c>
 8013422:	2304      	movs	r3, #4
 8013424:	e0aa      	b.n	801357c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801342c:	2b00      	cmp	r3, #0
 801342e:	f040 8098 	bne.w	8013562 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	69db      	ldr	r3, [r3, #28]
 8013436:	1c5a      	adds	r2, r3, #1
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	699b      	ldr	r3, [r3, #24]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d10b      	bne.n	801345c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	095b      	lsrs	r3, r3, #5
 8013448:	68fa      	ldr	r2, [r7, #12]
 801344a:	8912      	ldrh	r2, [r2, #8]
 801344c:	4293      	cmp	r3, r2
 801344e:	f0c0 8088 	bcc.w	8013562 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2200      	movs	r2, #0
 8013456:	61da      	str	r2, [r3, #28]
 8013458:	2304      	movs	r3, #4
 801345a:	e08f      	b.n	801357c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	0a5b      	lsrs	r3, r3, #9
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	8952      	ldrh	r2, [r2, #10]
 8013464:	3a01      	subs	r2, #1
 8013466:	4013      	ands	r3, r2
 8013468:	2b00      	cmp	r3, #0
 801346a:	d17a      	bne.n	8013562 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	699b      	ldr	r3, [r3, #24]
 8013472:	4619      	mov	r1, r3
 8013474:	4610      	mov	r0, r2
 8013476:	f7ff fc80 	bl	8012d7a <get_fat>
 801347a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	2b01      	cmp	r3, #1
 8013480:	d801      	bhi.n	8013486 <dir_next+0x8c>
 8013482:	2302      	movs	r3, #2
 8013484:	e07a      	b.n	801357c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801348c:	d101      	bne.n	8013492 <dir_next+0x98>
 801348e:	2301      	movs	r3, #1
 8013490:	e074      	b.n	801357c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	695b      	ldr	r3, [r3, #20]
 8013496:	697a      	ldr	r2, [r7, #20]
 8013498:	429a      	cmp	r2, r3
 801349a:	d358      	bcc.n	801354e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d104      	bne.n	80134ac <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2200      	movs	r2, #0
 80134a6:	61da      	str	r2, [r3, #28]
 80134a8:	2304      	movs	r3, #4
 80134aa:	e067      	b.n	801357c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	699b      	ldr	r3, [r3, #24]
 80134b2:	4619      	mov	r1, r3
 80134b4:	4610      	mov	r0, r2
 80134b6:	f7ff fe59 	bl	801316c <create_chain>
 80134ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d101      	bne.n	80134c6 <dir_next+0xcc>
 80134c2:	2307      	movs	r3, #7
 80134c4:	e05a      	b.n	801357c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d101      	bne.n	80134d0 <dir_next+0xd6>
 80134cc:	2302      	movs	r3, #2
 80134ce:	e055      	b.n	801357c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d6:	d101      	bne.n	80134dc <dir_next+0xe2>
 80134d8:	2301      	movs	r3, #1
 80134da:	e04f      	b.n	801357c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80134dc:	68f8      	ldr	r0, [r7, #12]
 80134de:	f7ff fb4d 	bl	8012b7c <sync_window>
 80134e2:	4603      	mov	r3, r0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d001      	beq.n	80134ec <dir_next+0xf2>
 80134e8:	2301      	movs	r3, #1
 80134ea:	e047      	b.n	801357c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	3330      	adds	r3, #48	; 0x30
 80134f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134f4:	2100      	movs	r1, #0
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ff f977 	bl	80127ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80134fc:	2300      	movs	r3, #0
 80134fe:	613b      	str	r3, [r7, #16]
 8013500:	6979      	ldr	r1, [r7, #20]
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f7ff fc1a 	bl	8012d3c <clust2sect>
 8013508:	4602      	mov	r2, r0
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	62da      	str	r2, [r3, #44]	; 0x2c
 801350e:	e012      	b.n	8013536 <dir_next+0x13c>
						fs->wflag = 1;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2201      	movs	r2, #1
 8013514:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f7ff fb30 	bl	8012b7c <sync_window>
 801351c:	4603      	mov	r3, r0
 801351e:	2b00      	cmp	r3, #0
 8013520:	d001      	beq.n	8013526 <dir_next+0x12c>
 8013522:	2301      	movs	r3, #1
 8013524:	e02a      	b.n	801357c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	3301      	adds	r3, #1
 801352a:	613b      	str	r3, [r7, #16]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013530:	1c5a      	adds	r2, r3, #1
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	62da      	str	r2, [r3, #44]	; 0x2c
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	895b      	ldrh	r3, [r3, #10]
 801353a:	461a      	mov	r2, r3
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	4293      	cmp	r3, r2
 8013540:	d3e6      	bcc.n	8013510 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	1ad2      	subs	r2, r2, r3
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	697a      	ldr	r2, [r7, #20]
 8013552:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013554:	6979      	ldr	r1, [r7, #20]
 8013556:	68f8      	ldr	r0, [r7, #12]
 8013558:	f7ff fbf0 	bl	8012d3c <clust2sect>
 801355c:	4602      	mov	r2, r0
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	68ba      	ldr	r2, [r7, #8]
 8013566:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013574:	441a      	add	r2, r3
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801357a:	2300      	movs	r3, #0
}
 801357c:	4618      	mov	r0, r3
 801357e:	3718      	adds	r7, #24
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b086      	sub	sp, #24
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013594:	2100      	movs	r1, #0
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7ff feb4 	bl	8013304 <dir_sdi>
 801359c:	4603      	mov	r3, r0
 801359e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80135a0:	7dfb      	ldrb	r3, [r7, #23]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d12b      	bne.n	80135fe <dir_alloc+0x7a>
		n = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	69db      	ldr	r3, [r3, #28]
 80135ae:	4619      	mov	r1, r3
 80135b0:	68f8      	ldr	r0, [r7, #12]
 80135b2:	f7ff fb27 	bl	8012c04 <move_window>
 80135b6:	4603      	mov	r3, r0
 80135b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d11d      	bne.n	80135fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6a1b      	ldr	r3, [r3, #32]
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	2be5      	cmp	r3, #229	; 0xe5
 80135c8:	d004      	beq.n	80135d4 <dir_alloc+0x50>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a1b      	ldr	r3, [r3, #32]
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d107      	bne.n	80135e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	3301      	adds	r3, #1
 80135d8:	613b      	str	r3, [r7, #16]
 80135da:	693a      	ldr	r2, [r7, #16]
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d102      	bne.n	80135e8 <dir_alloc+0x64>
 80135e2:	e00c      	b.n	80135fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80135e4:	2300      	movs	r3, #0
 80135e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80135e8:	2101      	movs	r1, #1
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7ff ff05 	bl	80133fa <dir_next>
 80135f0:	4603      	mov	r3, r0
 80135f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80135f4:	7dfb      	ldrb	r3, [r7, #23]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d0d7      	beq.n	80135aa <dir_alloc+0x26>
 80135fa:	e000      	b.n	80135fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80135fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80135fe:	7dfb      	ldrb	r3, [r7, #23]
 8013600:	2b04      	cmp	r3, #4
 8013602:	d101      	bne.n	8013608 <dir_alloc+0x84>
 8013604:	2307      	movs	r3, #7
 8013606:	75fb      	strb	r3, [r7, #23]
	return res;
 8013608:	7dfb      	ldrb	r3, [r7, #23]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3718      	adds	r7, #24
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013612:	b580      	push	{r7, lr}
 8013614:	b084      	sub	sp, #16
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	331a      	adds	r3, #26
 8013620:	4618      	mov	r0, r3
 8013622:	f7ff f83f 	bl	80126a4 <ld_word>
 8013626:	4603      	mov	r3, r0
 8013628:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	2b03      	cmp	r3, #3
 8013630:	d109      	bne.n	8013646 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	3314      	adds	r3, #20
 8013636:	4618      	mov	r0, r3
 8013638:	f7ff f834 	bl	80126a4 <ld_word>
 801363c:	4603      	mov	r3, r0
 801363e:	041b      	lsls	r3, r3, #16
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	4313      	orrs	r3, r2
 8013644:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013646:	68fb      	ldr	r3, [r7, #12]
}
 8013648:	4618      	mov	r0, r3
 801364a:	3710      	adds	r7, #16
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	331a      	adds	r3, #26
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	b292      	uxth	r2, r2
 8013664:	4611      	mov	r1, r2
 8013666:	4618      	mov	r0, r3
 8013668:	f7ff f857 	bl	801271a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	2b03      	cmp	r3, #3
 8013672:	d109      	bne.n	8013688 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	f103 0214 	add.w	r2, r3, #20
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	0c1b      	lsrs	r3, r3, #16
 801367e:	b29b      	uxth	r3, r3
 8013680:	4619      	mov	r1, r3
 8013682:	4610      	mov	r0, r2
 8013684:	f7ff f849 	bl	801271a <st_word>
	}
}
 8013688:	bf00      	nop
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801369a:	2304      	movs	r3, #4
 801369c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80136a4:	e03c      	b.n	8013720 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	69db      	ldr	r3, [r3, #28]
 80136aa:	4619      	mov	r1, r3
 80136ac:	6938      	ldr	r0, [r7, #16]
 80136ae:	f7ff faa9 	bl	8012c04 <move_window>
 80136b2:	4603      	mov	r3, r0
 80136b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80136b6:	7dfb      	ldrb	r3, [r7, #23]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d136      	bne.n	801372a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6a1b      	ldr	r3, [r3, #32]
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80136c4:	7bfb      	ldrb	r3, [r7, #15]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d102      	bne.n	80136d0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80136ca:	2304      	movs	r3, #4
 80136cc:	75fb      	strb	r3, [r7, #23]
 80136ce:	e031      	b.n	8013734 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a1b      	ldr	r3, [r3, #32]
 80136d4:	330b      	adds	r3, #11
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136dc:	73bb      	strb	r3, [r7, #14]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	7bba      	ldrb	r2, [r7, #14]
 80136e2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80136e4:	7bfb      	ldrb	r3, [r7, #15]
 80136e6:	2be5      	cmp	r3, #229	; 0xe5
 80136e8:	d011      	beq.n	801370e <dir_read+0x7e>
 80136ea:	7bfb      	ldrb	r3, [r7, #15]
 80136ec:	2b2e      	cmp	r3, #46	; 0x2e
 80136ee:	d00e      	beq.n	801370e <dir_read+0x7e>
 80136f0:	7bbb      	ldrb	r3, [r7, #14]
 80136f2:	2b0f      	cmp	r3, #15
 80136f4:	d00b      	beq.n	801370e <dir_read+0x7e>
 80136f6:	7bbb      	ldrb	r3, [r7, #14]
 80136f8:	f023 0320 	bic.w	r3, r3, #32
 80136fc:	2b08      	cmp	r3, #8
 80136fe:	bf0c      	ite	eq
 8013700:	2301      	moveq	r3, #1
 8013702:	2300      	movne	r3, #0
 8013704:	b2db      	uxtb	r3, r3
 8013706:	461a      	mov	r2, r3
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	4293      	cmp	r3, r2
 801370c:	d00f      	beq.n	801372e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801370e:	2100      	movs	r1, #0
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f7ff fe72 	bl	80133fa <dir_next>
 8013716:	4603      	mov	r3, r0
 8013718:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801371a:	7dfb      	ldrb	r3, [r7, #23]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d108      	bne.n	8013732 <dir_read+0xa2>
	while (dp->sect) {
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	69db      	ldr	r3, [r3, #28]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1be      	bne.n	80136a6 <dir_read+0x16>
 8013728:	e004      	b.n	8013734 <dir_read+0xa4>
		if (res != FR_OK) break;
 801372a:	bf00      	nop
 801372c:	e002      	b.n	8013734 <dir_read+0xa4>
				break;
 801372e:	bf00      	nop
 8013730:	e000      	b.n	8013734 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013732:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013734:	7dfb      	ldrb	r3, [r7, #23]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d002      	beq.n	8013740 <dir_read+0xb0>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2200      	movs	r2, #0
 801373e:	61da      	str	r2, [r3, #28]
	return res;
 8013740:	7dfb      	ldrb	r3, [r7, #23]
}
 8013742:	4618      	mov	r0, r3
 8013744:	3718      	adds	r7, #24
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}

0801374a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801374a:	b580      	push	{r7, lr}
 801374c:	b086      	sub	sp, #24
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013758:	2100      	movs	r1, #0
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7ff fdd2 	bl	8013304 <dir_sdi>
 8013760:	4603      	mov	r3, r0
 8013762:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013764:	7dfb      	ldrb	r3, [r7, #23]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d001      	beq.n	801376e <dir_find+0x24>
 801376a:	7dfb      	ldrb	r3, [r7, #23]
 801376c:	e03e      	b.n	80137ec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	69db      	ldr	r3, [r3, #28]
 8013772:	4619      	mov	r1, r3
 8013774:	6938      	ldr	r0, [r7, #16]
 8013776:	f7ff fa45 	bl	8012c04 <move_window>
 801377a:	4603      	mov	r3, r0
 801377c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801377e:	7dfb      	ldrb	r3, [r7, #23]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d12f      	bne.n	80137e4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6a1b      	ldr	r3, [r3, #32]
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801378c:	7bfb      	ldrb	r3, [r7, #15]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d102      	bne.n	8013798 <dir_find+0x4e>
 8013792:	2304      	movs	r3, #4
 8013794:	75fb      	strb	r3, [r7, #23]
 8013796:	e028      	b.n	80137ea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6a1b      	ldr	r3, [r3, #32]
 801379c:	330b      	adds	r3, #11
 801379e:	781b      	ldrb	r3, [r3, #0]
 80137a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137a4:	b2da      	uxtb	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6a1b      	ldr	r3, [r3, #32]
 80137ae:	330b      	adds	r3, #11
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	f003 0308 	and.w	r3, r3, #8
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d10a      	bne.n	80137d0 <dir_find+0x86>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6a18      	ldr	r0, [r3, #32]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	3324      	adds	r3, #36	; 0x24
 80137c2:	220b      	movs	r2, #11
 80137c4:	4619      	mov	r1, r3
 80137c6:	f7ff f82b 	bl	8012820 <mem_cmp>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d00b      	beq.n	80137e8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80137d0:	2100      	movs	r1, #0
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff fe11 	bl	80133fa <dir_next>
 80137d8:	4603      	mov	r3, r0
 80137da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80137dc:	7dfb      	ldrb	r3, [r7, #23]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d0c5      	beq.n	801376e <dir_find+0x24>
 80137e2:	e002      	b.n	80137ea <dir_find+0xa0>
		if (res != FR_OK) break;
 80137e4:	bf00      	nop
 80137e6:	e000      	b.n	80137ea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80137e8:	bf00      	nop

	return res;
 80137ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3718      	adds	r7, #24
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b084      	sub	sp, #16
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013802:	2101      	movs	r1, #1
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff febd 	bl	8013584 <dir_alloc>
 801380a:	4603      	mov	r3, r0
 801380c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801380e:	7bfb      	ldrb	r3, [r7, #15]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d11c      	bne.n	801384e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	69db      	ldr	r3, [r3, #28]
 8013818:	4619      	mov	r1, r3
 801381a:	68b8      	ldr	r0, [r7, #8]
 801381c:	f7ff f9f2 	bl	8012c04 <move_window>
 8013820:	4603      	mov	r3, r0
 8013822:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013824:	7bfb      	ldrb	r3, [r7, #15]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d111      	bne.n	801384e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6a1b      	ldr	r3, [r3, #32]
 801382e:	2220      	movs	r2, #32
 8013830:	2100      	movs	r1, #0
 8013832:	4618      	mov	r0, r3
 8013834:	f7fe ffd9 	bl	80127ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6a18      	ldr	r0, [r3, #32]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	3324      	adds	r3, #36	; 0x24
 8013840:	220b      	movs	r2, #11
 8013842:	4619      	mov	r1, r3
 8013844:	f7fe ffb0 	bl	80127a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	2201      	movs	r2, #1
 801384c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	69db      	ldr	r3, [r3, #28]
 801386a:	4619      	mov	r1, r3
 801386c:	68f8      	ldr	r0, [r7, #12]
 801386e:	f7ff f9c9 	bl	8012c04 <move_window>
 8013872:	4603      	mov	r3, r0
 8013874:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8013876:	7afb      	ldrb	r3, [r7, #11]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d106      	bne.n	801388a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a1b      	ldr	r3, [r3, #32]
 8013880:	22e5      	movs	r2, #229	; 0xe5
 8013882:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2201      	movs	r2, #1
 8013888:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801388a:	7afb      	ldrb	r3, [r7, #11]
}
 801388c:	4618      	mov	r0, r3
 801388e:	3710      	adds	r7, #16
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b086      	sub	sp, #24
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	2200      	movs	r2, #0
 80138a2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	69db      	ldr	r3, [r3, #28]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d04e      	beq.n	801394a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80138ac:	2300      	movs	r3, #0
 80138ae:	613b      	str	r3, [r7, #16]
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80138b4:	e021      	b.n	80138fa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6a1a      	ldr	r2, [r3, #32]
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	1c59      	adds	r1, r3, #1
 80138be:	6179      	str	r1, [r7, #20]
 80138c0:	4413      	add	r3, r2
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80138c6:	7bfb      	ldrb	r3, [r7, #15]
 80138c8:	2b20      	cmp	r3, #32
 80138ca:	d100      	bne.n	80138ce <get_fileinfo+0x3a>
 80138cc:	e015      	b.n	80138fa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80138ce:	7bfb      	ldrb	r3, [r7, #15]
 80138d0:	2b05      	cmp	r3, #5
 80138d2:	d101      	bne.n	80138d8 <get_fileinfo+0x44>
 80138d4:	23e5      	movs	r3, #229	; 0xe5
 80138d6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	2b09      	cmp	r3, #9
 80138dc:	d106      	bne.n	80138ec <get_fileinfo+0x58>
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	1c5a      	adds	r2, r3, #1
 80138e2:	613a      	str	r2, [r7, #16]
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	4413      	add	r3, r2
 80138e8:	222e      	movs	r2, #46	; 0x2e
 80138ea:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	1c5a      	adds	r2, r3, #1
 80138f0:	613a      	str	r2, [r7, #16]
 80138f2:	683a      	ldr	r2, [r7, #0]
 80138f4:	4413      	add	r3, r2
 80138f6:	7bfa      	ldrb	r2, [r7, #15]
 80138f8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	2b0a      	cmp	r3, #10
 80138fe:	d9da      	bls.n	80138b6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	4413      	add	r3, r2
 8013906:	3309      	adds	r3, #9
 8013908:	2200      	movs	r2, #0
 801390a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6a1b      	ldr	r3, [r3, #32]
 8013910:	7ada      	ldrb	r2, [r3, #11]
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6a1b      	ldr	r3, [r3, #32]
 801391a:	331c      	adds	r3, #28
 801391c:	4618      	mov	r0, r3
 801391e:	f7fe fed9 	bl	80126d4 <ld_dword>
 8013922:	4602      	mov	r2, r0
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6a1b      	ldr	r3, [r3, #32]
 801392c:	3316      	adds	r3, #22
 801392e:	4618      	mov	r0, r3
 8013930:	f7fe fed0 	bl	80126d4 <ld_dword>
 8013934:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	b29a      	uxth	r2, r3
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	80da      	strh	r2, [r3, #6]
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	0c1b      	lsrs	r3, r3, #16
 8013942:	b29a      	uxth	r2, r3
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	809a      	strh	r2, [r3, #4]
 8013948:	e000      	b.n	801394c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801394a:	bf00      	nop
}
 801394c:	3718      	adds	r7, #24
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
	...

08013954 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b088      	sub	sp, #32
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	60fb      	str	r3, [r7, #12]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	3324      	adds	r3, #36	; 0x24
 8013968:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801396a:	220b      	movs	r2, #11
 801396c:	2120      	movs	r1, #32
 801396e:	68b8      	ldr	r0, [r7, #8]
 8013970:	f7fe ff3b 	bl	80127ea <mem_set>
	si = i = 0; ni = 8;
 8013974:	2300      	movs	r3, #0
 8013976:	613b      	str	r3, [r7, #16]
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	61fb      	str	r3, [r7, #28]
 801397c:	2308      	movs	r3, #8
 801397e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	1c5a      	adds	r2, r3, #1
 8013984:	61fa      	str	r2, [r7, #28]
 8013986:	68fa      	ldr	r2, [r7, #12]
 8013988:	4413      	add	r3, r2
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801398e:	7efb      	ldrb	r3, [r7, #27]
 8013990:	2b20      	cmp	r3, #32
 8013992:	d94e      	bls.n	8013a32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013994:	7efb      	ldrb	r3, [r7, #27]
 8013996:	2b2f      	cmp	r3, #47	; 0x2f
 8013998:	d006      	beq.n	80139a8 <create_name+0x54>
 801399a:	7efb      	ldrb	r3, [r7, #27]
 801399c:	2b5c      	cmp	r3, #92	; 0x5c
 801399e:	d110      	bne.n	80139c2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80139a0:	e002      	b.n	80139a8 <create_name+0x54>
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	3301      	adds	r3, #1
 80139a6:	61fb      	str	r3, [r7, #28]
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	4413      	add	r3, r2
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	2b2f      	cmp	r3, #47	; 0x2f
 80139b2:	d0f6      	beq.n	80139a2 <create_name+0x4e>
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	4413      	add	r3, r2
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	2b5c      	cmp	r3, #92	; 0x5c
 80139be:	d0f0      	beq.n	80139a2 <create_name+0x4e>
			break;
 80139c0:	e038      	b.n	8013a34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80139c2:	7efb      	ldrb	r3, [r7, #27]
 80139c4:	2b2e      	cmp	r3, #46	; 0x2e
 80139c6:	d003      	beq.n	80139d0 <create_name+0x7c>
 80139c8:	693a      	ldr	r2, [r7, #16]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d30c      	bcc.n	80139ea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	2b0b      	cmp	r3, #11
 80139d4:	d002      	beq.n	80139dc <create_name+0x88>
 80139d6:	7efb      	ldrb	r3, [r7, #27]
 80139d8:	2b2e      	cmp	r3, #46	; 0x2e
 80139da:	d001      	beq.n	80139e0 <create_name+0x8c>
 80139dc:	2306      	movs	r3, #6
 80139de:	e044      	b.n	8013a6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80139e0:	2308      	movs	r3, #8
 80139e2:	613b      	str	r3, [r7, #16]
 80139e4:	230b      	movs	r3, #11
 80139e6:	617b      	str	r3, [r7, #20]
			continue;
 80139e8:	e022      	b.n	8013a30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80139ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	da04      	bge.n	80139fc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80139f2:	7efb      	ldrb	r3, [r7, #27]
 80139f4:	3b80      	subs	r3, #128	; 0x80
 80139f6:	4a1f      	ldr	r2, [pc, #124]	; (8013a74 <create_name+0x120>)
 80139f8:	5cd3      	ldrb	r3, [r2, r3]
 80139fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80139fc:	7efb      	ldrb	r3, [r7, #27]
 80139fe:	4619      	mov	r1, r3
 8013a00:	481d      	ldr	r0, [pc, #116]	; (8013a78 <create_name+0x124>)
 8013a02:	f7fe ff34 	bl	801286e <chk_chr>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d001      	beq.n	8013a10 <create_name+0xbc>
 8013a0c:	2306      	movs	r3, #6
 8013a0e:	e02c      	b.n	8013a6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013a10:	7efb      	ldrb	r3, [r7, #27]
 8013a12:	2b60      	cmp	r3, #96	; 0x60
 8013a14:	d905      	bls.n	8013a22 <create_name+0xce>
 8013a16:	7efb      	ldrb	r3, [r7, #27]
 8013a18:	2b7a      	cmp	r3, #122	; 0x7a
 8013a1a:	d802      	bhi.n	8013a22 <create_name+0xce>
 8013a1c:	7efb      	ldrb	r3, [r7, #27]
 8013a1e:	3b20      	subs	r3, #32
 8013a20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	1c5a      	adds	r2, r3, #1
 8013a26:	613a      	str	r2, [r7, #16]
 8013a28:	68ba      	ldr	r2, [r7, #8]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	7efa      	ldrb	r2, [r7, #27]
 8013a2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013a30:	e7a6      	b.n	8013980 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013a32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	441a      	add	r2, r3
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d101      	bne.n	8013a48 <create_name+0xf4>
 8013a44:	2306      	movs	r3, #6
 8013a46:	e010      	b.n	8013a6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	2be5      	cmp	r3, #229	; 0xe5
 8013a4e:	d102      	bne.n	8013a56 <create_name+0x102>
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	2205      	movs	r2, #5
 8013a54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013a56:	7efb      	ldrb	r3, [r7, #27]
 8013a58:	2b20      	cmp	r3, #32
 8013a5a:	d801      	bhi.n	8013a60 <create_name+0x10c>
 8013a5c:	2204      	movs	r2, #4
 8013a5e:	e000      	b.n	8013a62 <create_name+0x10e>
 8013a60:	2200      	movs	r2, #0
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	330b      	adds	r3, #11
 8013a66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013a68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3720      	adds	r7, #32
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	080199b0 	.word	0x080199b0
 8013a78:	080198f0 	.word	0x080198f0

08013a7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b086      	sub	sp, #24
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
 8013a84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013a90:	e002      	b.n	8013a98 <follow_path+0x1c>
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	3301      	adds	r3, #1
 8013a96:	603b      	str	r3, [r7, #0]
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8013a9e:	d0f8      	beq.n	8013a92 <follow_path+0x16>
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8013aa6:	d0f4      	beq.n	8013a92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	2b1f      	cmp	r3, #31
 8013ab4:	d80a      	bhi.n	8013acc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2280      	movs	r2, #128	; 0x80
 8013aba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013abe:	2100      	movs	r1, #0
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7ff fc1f 	bl	8013304 <dir_sdi>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	75fb      	strb	r3, [r7, #23]
 8013aca:	e043      	b.n	8013b54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013acc:	463b      	mov	r3, r7
 8013ace:	4619      	mov	r1, r3
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f7ff ff3f 	bl	8013954 <create_name>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d134      	bne.n	8013b4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7ff fe32 	bl	801374a <dir_find>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013af0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013af2:	7dfb      	ldrb	r3, [r7, #23]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d00a      	beq.n	8013b0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013af8:	7dfb      	ldrb	r3, [r7, #23]
 8013afa:	2b04      	cmp	r3, #4
 8013afc:	d127      	bne.n	8013b4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013afe:	7afb      	ldrb	r3, [r7, #11]
 8013b00:	f003 0304 	and.w	r3, r3, #4
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d122      	bne.n	8013b4e <follow_path+0xd2>
 8013b08:	2305      	movs	r3, #5
 8013b0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013b0c:	e01f      	b.n	8013b4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013b0e:	7afb      	ldrb	r3, [r7, #11]
 8013b10:	f003 0304 	and.w	r3, r3, #4
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d11c      	bne.n	8013b52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	799b      	ldrb	r3, [r3, #6]
 8013b1c:	f003 0310 	and.w	r3, r3, #16
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d102      	bne.n	8013b2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013b24:	2305      	movs	r3, #5
 8013b26:	75fb      	strb	r3, [r7, #23]
 8013b28:	e014      	b.n	8013b54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	695b      	ldr	r3, [r3, #20]
 8013b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b38:	4413      	add	r3, r2
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7ff fd68 	bl	8013612 <ld_clust>
 8013b42:	4602      	mov	r2, r0
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013b48:	e7c0      	b.n	8013acc <follow_path+0x50>
			if (res != FR_OK) break;
 8013b4a:	bf00      	nop
 8013b4c:	e002      	b.n	8013b54 <follow_path+0xd8>
				break;
 8013b4e:	bf00      	nop
 8013b50:	e000      	b.n	8013b54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013b52:	bf00      	nop
			}
		}
	}

	return res;
 8013b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3718      	adds	r7, #24
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013b5e:	b480      	push	{r7}
 8013b60:	b087      	sub	sp, #28
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013b66:	f04f 33ff 	mov.w	r3, #4294967295
 8013b6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d031      	beq.n	8013bd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	617b      	str	r3, [r7, #20]
 8013b7a:	e002      	b.n	8013b82 <get_ldnumber+0x24>
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	617b      	str	r3, [r7, #20]
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	2b20      	cmp	r3, #32
 8013b88:	d903      	bls.n	8013b92 <get_ldnumber+0x34>
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	2b3a      	cmp	r3, #58	; 0x3a
 8013b90:	d1f4      	bne.n	8013b7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	2b3a      	cmp	r3, #58	; 0x3a
 8013b98:	d11c      	bne.n	8013bd4 <get_ldnumber+0x76>
			tp = *path;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	1c5a      	adds	r2, r3, #1
 8013ba4:	60fa      	str	r2, [r7, #12]
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	3b30      	subs	r3, #48	; 0x30
 8013baa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	2b09      	cmp	r3, #9
 8013bb0:	d80e      	bhi.n	8013bd0 <get_ldnumber+0x72>
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d10a      	bne.n	8013bd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d107      	bne.n	8013bd0 <get_ldnumber+0x72>
					vol = (int)i;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	617b      	str	r3, [r7, #20]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	697a      	ldr	r2, [r7, #20]
 8013bce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	e002      	b.n	8013bda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013bd8:	693b      	ldr	r3, [r7, #16]
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	371c      	adds	r7, #28
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr
	...

08013be8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	70da      	strb	r2, [r3, #3]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013bfe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013c00:	6839      	ldr	r1, [r7, #0]
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f7fe fffe 	bl	8012c04 <move_window>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d001      	beq.n	8013c12 <check_fs+0x2a>
 8013c0e:	2304      	movs	r3, #4
 8013c10:	e038      	b.n	8013c84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3330      	adds	r3, #48	; 0x30
 8013c16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fe fd42 	bl	80126a4 <ld_word>
 8013c20:	4603      	mov	r3, r0
 8013c22:	461a      	mov	r2, r3
 8013c24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d001      	beq.n	8013c30 <check_fs+0x48>
 8013c2c:	2303      	movs	r3, #3
 8013c2e:	e029      	b.n	8013c84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c36:	2be9      	cmp	r3, #233	; 0xe9
 8013c38:	d009      	beq.n	8013c4e <check_fs+0x66>
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c40:	2beb      	cmp	r3, #235	; 0xeb
 8013c42:	d11e      	bne.n	8013c82 <check_fs+0x9a>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013c4a:	2b90      	cmp	r3, #144	; 0x90
 8013c4c:	d119      	bne.n	8013c82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	3330      	adds	r3, #48	; 0x30
 8013c52:	3336      	adds	r3, #54	; 0x36
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fe fd3d 	bl	80126d4 <ld_dword>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c60:	4a0a      	ldr	r2, [pc, #40]	; (8013c8c <check_fs+0xa4>)
 8013c62:	4293      	cmp	r3, r2
 8013c64:	d101      	bne.n	8013c6a <check_fs+0x82>
 8013c66:	2300      	movs	r3, #0
 8013c68:	e00c      	b.n	8013c84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	3330      	adds	r3, #48	; 0x30
 8013c6e:	3352      	adds	r3, #82	; 0x52
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe fd2f 	bl	80126d4 <ld_dword>
 8013c76:	4603      	mov	r3, r0
 8013c78:	4a05      	ldr	r2, [pc, #20]	; (8013c90 <check_fs+0xa8>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d101      	bne.n	8013c82 <check_fs+0x9a>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	e000      	b.n	8013c84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013c82:	2302      	movs	r3, #2
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	00544146 	.word	0x00544146
 8013c90:	33544146 	.word	0x33544146

08013c94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b096      	sub	sp, #88	; 0x58
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	4613      	mov	r3, r2
 8013ca0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f7ff ff58 	bl	8013b5e <get_ldnumber>
 8013cae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	da01      	bge.n	8013cba <find_volume+0x26>
 8013cb6:	230b      	movs	r3, #11
 8013cb8:	e22d      	b.n	8014116 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013cba:	4aa1      	ldr	r2, [pc, #644]	; (8013f40 <find_volume+0x2ac>)
 8013cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <find_volume+0x3a>
 8013cca:	230c      	movs	r3, #12
 8013ccc:	e223      	b.n	8014116 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013cd4:	79fb      	ldrb	r3, [r7, #7]
 8013cd6:	f023 0301 	bic.w	r3, r3, #1
 8013cda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d01a      	beq.n	8013d1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce6:	785b      	ldrb	r3, [r3, #1]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fe fc3d 	bl	8012568 <disk_status>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013cf8:	f003 0301 	and.w	r3, r3, #1
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d10c      	bne.n	8013d1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013d00:	79fb      	ldrb	r3, [r7, #7]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d007      	beq.n	8013d16 <find_volume+0x82>
 8013d06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d0a:	f003 0304 	and.w	r3, r3, #4
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d001      	beq.n	8013d16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013d12:	230a      	movs	r3, #10
 8013d14:	e1ff      	b.n	8014116 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013d16:	2300      	movs	r3, #0
 8013d18:	e1fd      	b.n	8014116 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d22:	b2da      	uxtb	r2, r3
 8013d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2a:	785b      	ldrb	r3, [r3, #1]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7fe fc35 	bl	801259c <disk_initialize>
 8013d32:	4603      	mov	r3, r0
 8013d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d3c:	f003 0301 	and.w	r3, r3, #1
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d001      	beq.n	8013d48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013d44:	2303      	movs	r3, #3
 8013d46:	e1e6      	b.n	8014116 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013d48:	79fb      	ldrb	r3, [r7, #7]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d007      	beq.n	8013d5e <find_volume+0xca>
 8013d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d52:	f003 0304 	and.w	r3, r3, #4
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013d5a:	230a      	movs	r3, #10
 8013d5c:	e1db      	b.n	8014116 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013d66:	f7ff ff3f 	bl	8013be8 <check_fs>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	d149      	bne.n	8013e0c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013d78:	2300      	movs	r3, #0
 8013d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8013d7c:	e01e      	b.n	8013dbc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d86:	011b      	lsls	r3, r3, #4
 8013d88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013d8c:	4413      	add	r3, r2
 8013d8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d92:	3304      	adds	r3, #4
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d006      	beq.n	8013da8 <find_volume+0x114>
 8013d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9c:	3308      	adds	r3, #8
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fe fc98 	bl	80126d4 <ld_dword>
 8013da4:	4602      	mov	r2, r0
 8013da6:	e000      	b.n	8013daa <find_volume+0x116>
 8013da8:	2200      	movs	r2, #0
 8013daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dac:	009b      	lsls	r3, r3, #2
 8013dae:	3358      	adds	r3, #88	; 0x58
 8013db0:	443b      	add	r3, r7
 8013db2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013db8:	3301      	adds	r3, #1
 8013dba:	643b      	str	r3, [r7, #64]	; 0x40
 8013dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dbe:	2b03      	cmp	r3, #3
 8013dc0:	d9dd      	bls.n	8013d7e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d002      	beq.n	8013dd2 <find_volume+0x13e>
 8013dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	3358      	adds	r3, #88	; 0x58
 8013dd8:	443b      	add	r3, r7
 8013dda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013dde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d005      	beq.n	8013df2 <find_volume+0x15e>
 8013de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013dea:	f7ff fefd 	bl	8013be8 <check_fs>
 8013dee:	4603      	mov	r3, r0
 8013df0:	e000      	b.n	8013df4 <find_volume+0x160>
 8013df2:	2303      	movs	r3, #3
 8013df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d905      	bls.n	8013e0c <find_volume+0x178>
 8013e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e02:	3301      	adds	r3, #1
 8013e04:	643b      	str	r3, [r7, #64]	; 0x40
 8013e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e08:	2b03      	cmp	r3, #3
 8013e0a:	d9e2      	bls.n	8013dd2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e10:	2b04      	cmp	r3, #4
 8013e12:	d101      	bne.n	8013e18 <find_volume+0x184>
 8013e14:	2301      	movs	r3, #1
 8013e16:	e17e      	b.n	8014116 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d901      	bls.n	8013e24 <find_volume+0x190>
 8013e20:	230d      	movs	r3, #13
 8013e22:	e178      	b.n	8014116 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e26:	3330      	adds	r3, #48	; 0x30
 8013e28:	330b      	adds	r3, #11
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7fe fc3a 	bl	80126a4 <ld_word>
 8013e30:	4603      	mov	r3, r0
 8013e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e36:	d001      	beq.n	8013e3c <find_volume+0x1a8>
 8013e38:	230d      	movs	r3, #13
 8013e3a:	e16c      	b.n	8014116 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3e:	3330      	adds	r3, #48	; 0x30
 8013e40:	3316      	adds	r3, #22
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe fc2e 	bl	80126a4 <ld_word>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d106      	bne.n	8013e60 <find_volume+0x1cc>
 8013e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e54:	3330      	adds	r3, #48	; 0x30
 8013e56:	3324      	adds	r3, #36	; 0x24
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fe fc3b 	bl	80126d4 <ld_dword>
 8013e5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e64:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e68:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8013e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e72:	789b      	ldrb	r3, [r3, #2]
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d005      	beq.n	8013e84 <find_volume+0x1f0>
 8013e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e7a:	789b      	ldrb	r3, [r3, #2]
 8013e7c:	2b02      	cmp	r3, #2
 8013e7e:	d001      	beq.n	8013e84 <find_volume+0x1f0>
 8013e80:	230d      	movs	r3, #13
 8013e82:	e148      	b.n	8014116 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e86:	789b      	ldrb	r3, [r3, #2]
 8013e88:	461a      	mov	r2, r3
 8013e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e8c:	fb02 f303 	mul.w	r3, r2, r3
 8013e90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e98:	b29a      	uxth	r2, r3
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea0:	895b      	ldrh	r3, [r3, #10]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d008      	beq.n	8013eb8 <find_volume+0x224>
 8013ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea8:	895b      	ldrh	r3, [r3, #10]
 8013eaa:	461a      	mov	r2, r3
 8013eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eae:	895b      	ldrh	r3, [r3, #10]
 8013eb0:	3b01      	subs	r3, #1
 8013eb2:	4013      	ands	r3, r2
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d001      	beq.n	8013ebc <find_volume+0x228>
 8013eb8:	230d      	movs	r3, #13
 8013eba:	e12c      	b.n	8014116 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ebe:	3330      	adds	r3, #48	; 0x30
 8013ec0:	3311      	adds	r3, #17
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe fbee 	bl	80126a4 <ld_word>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	461a      	mov	r2, r3
 8013ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ece:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ed2:	891b      	ldrh	r3, [r3, #8]
 8013ed4:	f003 030f 	and.w	r3, r3, #15
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d001      	beq.n	8013ee2 <find_volume+0x24e>
 8013ede:	230d      	movs	r3, #13
 8013ee0:	e119      	b.n	8014116 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee4:	3330      	adds	r3, #48	; 0x30
 8013ee6:	3313      	adds	r3, #19
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fe fbdb 	bl	80126a4 <ld_word>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d106      	bne.n	8013f06 <find_volume+0x272>
 8013ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013efa:	3330      	adds	r3, #48	; 0x30
 8013efc:	3320      	adds	r3, #32
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7fe fbe8 	bl	80126d4 <ld_dword>
 8013f04:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f08:	3330      	adds	r3, #48	; 0x30
 8013f0a:	330e      	adds	r3, #14
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fe fbc9 	bl	80126a4 <ld_word>
 8013f12:	4603      	mov	r3, r0
 8013f14:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d101      	bne.n	8013f20 <find_volume+0x28c>
 8013f1c:	230d      	movs	r3, #13
 8013f1e:	e0fa      	b.n	8014116 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013f20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f24:	4413      	add	r3, r2
 8013f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f28:	8912      	ldrh	r2, [r2, #8]
 8013f2a:	0912      	lsrs	r2, r2, #4
 8013f2c:	b292      	uxth	r2, r2
 8013f2e:	4413      	add	r3, r2
 8013f30:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d204      	bcs.n	8013f44 <find_volume+0x2b0>
 8013f3a:	230d      	movs	r3, #13
 8013f3c:	e0eb      	b.n	8014116 <find_volume+0x482>
 8013f3e:	bf00      	nop
 8013f40:	20000f64 	.word	0x20000f64
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f4c:	8952      	ldrh	r2, [r2, #10]
 8013f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f52:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d101      	bne.n	8013f5e <find_volume+0x2ca>
 8013f5a:	230d      	movs	r3, #13
 8013f5c:	e0db      	b.n	8014116 <find_volume+0x482>
		fmt = FS_FAT32;
 8013f5e:	2303      	movs	r3, #3
 8013f60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f66:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	d802      	bhi.n	8013f74 <find_volume+0x2e0>
 8013f6e:	2302      	movs	r3, #2
 8013f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	d802      	bhi.n	8013f84 <find_volume+0x2f0>
 8013f7e:	2301      	movs	r3, #1
 8013f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f86:	1c9a      	adds	r2, r3, #2
 8013f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013f90:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013f92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f96:	441a      	add	r2, r3
 8013f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013f9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa0:	441a      	add	r2, r3
 8013fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013faa:	2b03      	cmp	r3, #3
 8013fac:	d11e      	bne.n	8013fec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb0:	3330      	adds	r3, #48	; 0x30
 8013fb2:	332a      	adds	r3, #42	; 0x2a
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fe fb75 	bl	80126a4 <ld_word>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <find_volume+0x330>
 8013fc0:	230d      	movs	r3, #13
 8013fc2:	e0a8      	b.n	8014116 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc6:	891b      	ldrh	r3, [r3, #8]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <find_volume+0x33c>
 8013fcc:	230d      	movs	r3, #13
 8013fce:	e0a2      	b.n	8014116 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd2:	3330      	adds	r3, #48	; 0x30
 8013fd4:	332c      	adds	r3, #44	; 0x2c
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fe fb7c 	bl	80126d4 <ld_dword>
 8013fdc:	4602      	mov	r2, r0
 8013fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe4:	695b      	ldr	r3, [r3, #20]
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8013fea:	e01f      	b.n	801402c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fee:	891b      	ldrh	r3, [r3, #8]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d101      	bne.n	8013ff8 <find_volume+0x364>
 8013ff4:	230d      	movs	r3, #13
 8013ff6:	e08e      	b.n	8014116 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffa:	6a1a      	ldr	r2, [r3, #32]
 8013ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffe:	441a      	add	r2, r3
 8014000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014002:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014008:	2b02      	cmp	r3, #2
 801400a:	d103      	bne.n	8014014 <find_volume+0x380>
 801400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400e:	695b      	ldr	r3, [r3, #20]
 8014010:	005b      	lsls	r3, r3, #1
 8014012:	e00a      	b.n	801402a <find_volume+0x396>
 8014014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014016:	695a      	ldr	r2, [r3, #20]
 8014018:	4613      	mov	r3, r2
 801401a:	005b      	lsls	r3, r3, #1
 801401c:	4413      	add	r3, r2
 801401e:	085a      	lsrs	r2, r3, #1
 8014020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014022:	695b      	ldr	r3, [r3, #20]
 8014024:	f003 0301 	and.w	r3, r3, #1
 8014028:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801402a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801402e:	699a      	ldr	r2, [r3, #24]
 8014030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014032:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014036:	0a5b      	lsrs	r3, r3, #9
 8014038:	429a      	cmp	r2, r3
 801403a:	d201      	bcs.n	8014040 <find_volume+0x3ac>
 801403c:	230d      	movs	r3, #13
 801403e:	e06a      	b.n	8014116 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014042:	f04f 32ff 	mov.w	r2, #4294967295
 8014046:	611a      	str	r2, [r3, #16]
 8014048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404a:	691a      	ldr	r2, [r3, #16]
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014052:	2280      	movs	r2, #128	; 0x80
 8014054:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801405a:	2b03      	cmp	r3, #3
 801405c:	d149      	bne.n	80140f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014060:	3330      	adds	r3, #48	; 0x30
 8014062:	3330      	adds	r3, #48	; 0x30
 8014064:	4618      	mov	r0, r3
 8014066:	f7fe fb1d 	bl	80126a4 <ld_word>
 801406a:	4603      	mov	r3, r0
 801406c:	2b01      	cmp	r3, #1
 801406e:	d140      	bne.n	80140f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014072:	3301      	adds	r3, #1
 8014074:	4619      	mov	r1, r3
 8014076:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014078:	f7fe fdc4 	bl	8012c04 <move_window>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d137      	bne.n	80140f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014084:	2200      	movs	r2, #0
 8014086:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408a:	3330      	adds	r3, #48	; 0x30
 801408c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014090:	4618      	mov	r0, r3
 8014092:	f7fe fb07 	bl	80126a4 <ld_word>
 8014096:	4603      	mov	r3, r0
 8014098:	461a      	mov	r2, r3
 801409a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801409e:	429a      	cmp	r2, r3
 80140a0:	d127      	bne.n	80140f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80140a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a4:	3330      	adds	r3, #48	; 0x30
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fe fb14 	bl	80126d4 <ld_dword>
 80140ac:	4603      	mov	r3, r0
 80140ae:	4a1c      	ldr	r2, [pc, #112]	; (8014120 <find_volume+0x48c>)
 80140b0:	4293      	cmp	r3, r2
 80140b2:	d11e      	bne.n	80140f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80140b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b6:	3330      	adds	r3, #48	; 0x30
 80140b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fe fb09 	bl	80126d4 <ld_dword>
 80140c2:	4603      	mov	r3, r0
 80140c4:	4a17      	ldr	r2, [pc, #92]	; (8014124 <find_volume+0x490>)
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d113      	bne.n	80140f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80140ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140cc:	3330      	adds	r3, #48	; 0x30
 80140ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fe fafe 	bl	80126d4 <ld_dword>
 80140d8:	4602      	mov	r2, r0
 80140da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80140de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e0:	3330      	adds	r3, #48	; 0x30
 80140e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe faf4 	bl	80126d4 <ld_dword>
 80140ec:	4602      	mov	r2, r0
 80140ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80140f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80140f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80140fa:	4b0b      	ldr	r3, [pc, #44]	; (8014128 <find_volume+0x494>)
 80140fc:	881b      	ldrh	r3, [r3, #0]
 80140fe:	3301      	adds	r3, #1
 8014100:	b29a      	uxth	r2, r3
 8014102:	4b09      	ldr	r3, [pc, #36]	; (8014128 <find_volume+0x494>)
 8014104:	801a      	strh	r2, [r3, #0]
 8014106:	4b08      	ldr	r3, [pc, #32]	; (8014128 <find_volume+0x494>)
 8014108:	881a      	ldrh	r2, [r3, #0]
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801410e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014110:	f7fe fd10 	bl	8012b34 <clear_lock>
#endif
	return FR_OK;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	3758      	adds	r7, #88	; 0x58
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	41615252 	.word	0x41615252
 8014124:	61417272 	.word	0x61417272
 8014128:	20000f68 	.word	0x20000f68

0801412c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014136:	2309      	movs	r3, #9
 8014138:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d01c      	beq.n	801417a <validate+0x4e>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d018      	beq.n	801417a <validate+0x4e>
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d013      	beq.n	801417a <validate+0x4e>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	889a      	ldrh	r2, [r3, #4]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	88db      	ldrh	r3, [r3, #6]
 801415c:	429a      	cmp	r2, r3
 801415e:	d10c      	bne.n	801417a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	785b      	ldrb	r3, [r3, #1]
 8014166:	4618      	mov	r0, r3
 8014168:	f7fe f9fe 	bl	8012568 <disk_status>
 801416c:	4603      	mov	r3, r0
 801416e:	f003 0301 	and.w	r3, r3, #1
 8014172:	2b00      	cmp	r3, #0
 8014174:	d101      	bne.n	801417a <validate+0x4e>
			res = FR_OK;
 8014176:	2300      	movs	r3, #0
 8014178:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801417a:	7bfb      	ldrb	r3, [r7, #15]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <validate+0x5a>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	e000      	b.n	8014188 <validate+0x5c>
 8014186:	2300      	movs	r3, #0
 8014188:	683a      	ldr	r2, [r7, #0]
 801418a:	6013      	str	r3, [r2, #0]
	return res;
 801418c:	7bfb      	ldrb	r3, [r7, #15]
}
 801418e:	4618      	mov	r0, r3
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
	...

08014198 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b088      	sub	sp, #32
 801419c:	af00      	add	r7, sp, #0
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	4613      	mov	r3, r2
 80141a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80141aa:	f107 0310 	add.w	r3, r7, #16
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7ff fcd5 	bl	8013b5e <get_ldnumber>
 80141b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80141b6:	69fb      	ldr	r3, [r7, #28]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	da01      	bge.n	80141c0 <f_mount+0x28>
 80141bc:	230b      	movs	r3, #11
 80141be:	e02b      	b.n	8014218 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80141c0:	4a17      	ldr	r2, [pc, #92]	; (8014220 <f_mount+0x88>)
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d005      	beq.n	80141dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80141d0:	69b8      	ldr	r0, [r7, #24]
 80141d2:	f7fe fcaf 	bl	8012b34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	2200      	movs	r2, #0
 80141da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d002      	beq.n	80141e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2200      	movs	r2, #0
 80141e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80141e8:	68fa      	ldr	r2, [r7, #12]
 80141ea:	490d      	ldr	r1, [pc, #52]	; (8014220 <f_mount+0x88>)
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d002      	beq.n	80141fe <f_mount+0x66>
 80141f8:	79fb      	ldrb	r3, [r7, #7]
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d001      	beq.n	8014202 <f_mount+0x6a>
 80141fe:	2300      	movs	r3, #0
 8014200:	e00a      	b.n	8014218 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014202:	f107 010c 	add.w	r1, r7, #12
 8014206:	f107 0308 	add.w	r3, r7, #8
 801420a:	2200      	movs	r2, #0
 801420c:	4618      	mov	r0, r3
 801420e:	f7ff fd41 	bl	8013c94 <find_volume>
 8014212:	4603      	mov	r3, r0
 8014214:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014216:	7dfb      	ldrb	r3, [r7, #23]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3720      	adds	r7, #32
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	20000f64 	.word	0x20000f64

08014224 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b098      	sub	sp, #96	; 0x60
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	4613      	mov	r3, r2
 8014230:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d101      	bne.n	801423c <f_open+0x18>
 8014238:	2309      	movs	r3, #9
 801423a:	e1ad      	b.n	8014598 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014242:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014244:	79fa      	ldrb	r2, [r7, #7]
 8014246:	f107 0110 	add.w	r1, r7, #16
 801424a:	f107 0308 	add.w	r3, r7, #8
 801424e:	4618      	mov	r0, r3
 8014250:	f7ff fd20 	bl	8013c94 <find_volume>
 8014254:	4603      	mov	r3, r0
 8014256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801425a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801425e:	2b00      	cmp	r3, #0
 8014260:	f040 8191 	bne.w	8014586 <f_open+0x362>
		dj.obj.fs = fs;
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014268:	68ba      	ldr	r2, [r7, #8]
 801426a:	f107 0314 	add.w	r3, r7, #20
 801426e:	4611      	mov	r1, r2
 8014270:	4618      	mov	r0, r3
 8014272:	f7ff fc03 	bl	8013a7c <follow_path>
 8014276:	4603      	mov	r3, r0
 8014278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801427c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014280:	2b00      	cmp	r3, #0
 8014282:	d11a      	bne.n	80142ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014284:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014288:	b25b      	sxtb	r3, r3
 801428a:	2b00      	cmp	r3, #0
 801428c:	da03      	bge.n	8014296 <f_open+0x72>
				res = FR_INVALID_NAME;
 801428e:	2306      	movs	r3, #6
 8014290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014294:	e011      	b.n	80142ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014296:	79fb      	ldrb	r3, [r7, #7]
 8014298:	f023 0301 	bic.w	r3, r3, #1
 801429c:	2b00      	cmp	r3, #0
 801429e:	bf14      	ite	ne
 80142a0:	2301      	movne	r3, #1
 80142a2:	2300      	moveq	r3, #0
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	461a      	mov	r2, r3
 80142a8:	f107 0314 	add.w	r3, r7, #20
 80142ac:	4611      	mov	r1, r2
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fe faf8 	bl	80128a4 <chk_lock>
 80142b4:	4603      	mov	r3, r0
 80142b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80142ba:	79fb      	ldrb	r3, [r7, #7]
 80142bc:	f003 031c 	and.w	r3, r3, #28
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d07f      	beq.n	80143c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80142c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d017      	beq.n	80142fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80142cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142d0:	2b04      	cmp	r3, #4
 80142d2:	d10e      	bne.n	80142f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80142d4:	f7fe fb42 	bl	801295c <enq_lock>
 80142d8:	4603      	mov	r3, r0
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d006      	beq.n	80142ec <f_open+0xc8>
 80142de:	f107 0314 	add.w	r3, r7, #20
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7ff fa86 	bl	80137f4 <dir_register>
 80142e8:	4603      	mov	r3, r0
 80142ea:	e000      	b.n	80142ee <f_open+0xca>
 80142ec:	2312      	movs	r3, #18
 80142ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80142f2:	79fb      	ldrb	r3, [r7, #7]
 80142f4:	f043 0308 	orr.w	r3, r3, #8
 80142f8:	71fb      	strb	r3, [r7, #7]
 80142fa:	e010      	b.n	801431e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80142fc:	7ebb      	ldrb	r3, [r7, #26]
 80142fe:	f003 0311 	and.w	r3, r3, #17
 8014302:	2b00      	cmp	r3, #0
 8014304:	d003      	beq.n	801430e <f_open+0xea>
					res = FR_DENIED;
 8014306:	2307      	movs	r3, #7
 8014308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801430c:	e007      	b.n	801431e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801430e:	79fb      	ldrb	r3, [r7, #7]
 8014310:	f003 0304 	and.w	r3, r3, #4
 8014314:	2b00      	cmp	r3, #0
 8014316:	d002      	beq.n	801431e <f_open+0xfa>
 8014318:	2308      	movs	r3, #8
 801431a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801431e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014322:	2b00      	cmp	r3, #0
 8014324:	d168      	bne.n	80143f8 <f_open+0x1d4>
 8014326:	79fb      	ldrb	r3, [r7, #7]
 8014328:	f003 0308 	and.w	r3, r3, #8
 801432c:	2b00      	cmp	r3, #0
 801432e:	d063      	beq.n	80143f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014330:	f7f9 ff20 	bl	800e174 <get_fattime>
 8014334:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014338:	330e      	adds	r3, #14
 801433a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801433c:	4618      	mov	r0, r3
 801433e:	f7fe fa07 	bl	8012750 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014344:	3316      	adds	r3, #22
 8014346:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014348:	4618      	mov	r0, r3
 801434a:	f7fe fa01 	bl	8012750 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014350:	330b      	adds	r3, #11
 8014352:	2220      	movs	r2, #32
 8014354:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801435a:	4611      	mov	r1, r2
 801435c:	4618      	mov	r0, r3
 801435e:	f7ff f958 	bl	8013612 <ld_clust>
 8014362:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014368:	2200      	movs	r2, #0
 801436a:	4618      	mov	r0, r3
 801436c:	f7ff f970 	bl	8013650 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014372:	331c      	adds	r3, #28
 8014374:	2100      	movs	r1, #0
 8014376:	4618      	mov	r0, r3
 8014378:	f7fe f9ea 	bl	8012750 <st_dword>
					fs->wflag = 1;
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	2201      	movs	r2, #1
 8014380:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014384:	2b00      	cmp	r3, #0
 8014386:	d037      	beq.n	80143f8 <f_open+0x1d4>
						dw = fs->winsect;
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801438e:	f107 0314 	add.w	r3, r7, #20
 8014392:	2200      	movs	r2, #0
 8014394:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014396:	4618      	mov	r0, r3
 8014398:	f7fe fe83 	bl	80130a2 <remove_chain>
 801439c:	4603      	mov	r3, r0
 801439e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80143a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d126      	bne.n	80143f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7fe fc28 	bl	8012c04 <move_window>
 80143b4:	4603      	mov	r3, r0
 80143b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143be:	3a01      	subs	r2, #1
 80143c0:	60da      	str	r2, [r3, #12]
 80143c2:	e019      	b.n	80143f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80143c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d115      	bne.n	80143f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80143cc:	7ebb      	ldrb	r3, [r7, #26]
 80143ce:	f003 0310 	and.w	r3, r3, #16
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d003      	beq.n	80143de <f_open+0x1ba>
					res = FR_NO_FILE;
 80143d6:	2304      	movs	r3, #4
 80143d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80143dc:	e00c      	b.n	80143f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80143de:	79fb      	ldrb	r3, [r7, #7]
 80143e0:	f003 0302 	and.w	r3, r3, #2
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d007      	beq.n	80143f8 <f_open+0x1d4>
 80143e8:	7ebb      	ldrb	r3, [r7, #26]
 80143ea:	f003 0301 	and.w	r3, r3, #1
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <f_open+0x1d4>
						res = FR_DENIED;
 80143f2:	2307      	movs	r3, #7
 80143f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80143f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d128      	bne.n	8014452 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014400:	79fb      	ldrb	r3, [r7, #7]
 8014402:	f003 0308 	and.w	r3, r3, #8
 8014406:	2b00      	cmp	r3, #0
 8014408:	d003      	beq.n	8014412 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801440a:	79fb      	ldrb	r3, [r7, #7]
 801440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014410:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801441a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014420:	79fb      	ldrb	r3, [r7, #7]
 8014422:	f023 0301 	bic.w	r3, r3, #1
 8014426:	2b00      	cmp	r3, #0
 8014428:	bf14      	ite	ne
 801442a:	2301      	movne	r3, #1
 801442c:	2300      	moveq	r3, #0
 801442e:	b2db      	uxtb	r3, r3
 8014430:	461a      	mov	r2, r3
 8014432:	f107 0314 	add.w	r3, r7, #20
 8014436:	4611      	mov	r1, r2
 8014438:	4618      	mov	r0, r3
 801443a:	f7fe fab1 	bl	80129a0 <inc_lock>
 801443e:	4602      	mov	r2, r0
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	691b      	ldr	r3, [r3, #16]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d102      	bne.n	8014452 <f_open+0x22e>
 801444c:	2302      	movs	r3, #2
 801444e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014456:	2b00      	cmp	r3, #0
 8014458:	f040 8095 	bne.w	8014586 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014460:	4611      	mov	r1, r2
 8014462:	4618      	mov	r0, r3
 8014464:	f7ff f8d5 	bl	8013612 <ld_clust>
 8014468:	4602      	mov	r2, r0
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014470:	331c      	adds	r3, #28
 8014472:	4618      	mov	r0, r3
 8014474:	f7fe f92e 	bl	80126d4 <ld_dword>
 8014478:	4602      	mov	r2, r0
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2200      	movs	r2, #0
 8014482:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014484:	693a      	ldr	r2, [r7, #16]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	88da      	ldrh	r2, [r3, #6]
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	79fa      	ldrb	r2, [r7, #7]
 8014496:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2200      	movs	r2, #0
 801449c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2200      	movs	r2, #0
 80144a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2200      	movs	r2, #0
 80144a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	3330      	adds	r3, #48	; 0x30
 80144ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144b2:	2100      	movs	r1, #0
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe f998 	bl	80127ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80144ba:	79fb      	ldrb	r3, [r7, #7]
 80144bc:	f003 0320 	and.w	r3, r3, #32
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d060      	beq.n	8014586 <f_open+0x362>
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d05c      	beq.n	8014586 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	68da      	ldr	r2, [r3, #12]
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	895b      	ldrh	r3, [r3, #10]
 80144d8:	025b      	lsls	r3, r3, #9
 80144da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	689b      	ldr	r3, [r3, #8]
 80144e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	657b      	str	r3, [r7, #84]	; 0x54
 80144e8:	e016      	b.n	8014518 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fe fc43 	bl	8012d7a <get_fat>
 80144f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80144f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d802      	bhi.n	8014502 <f_open+0x2de>
 80144fc:	2302      	movs	r3, #2
 80144fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014508:	d102      	bne.n	8014510 <f_open+0x2ec>
 801450a:	2301      	movs	r3, #1
 801450c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	657b      	str	r3, [r7, #84]	; 0x54
 8014518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801451c:	2b00      	cmp	r3, #0
 801451e:	d103      	bne.n	8014528 <f_open+0x304>
 8014520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014524:	429a      	cmp	r2, r3
 8014526:	d8e0      	bhi.n	80144ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801452c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801452e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014532:	2b00      	cmp	r3, #0
 8014534:	d127      	bne.n	8014586 <f_open+0x362>
 8014536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801453c:	2b00      	cmp	r3, #0
 801453e:	d022      	beq.n	8014586 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014544:	4618      	mov	r0, r3
 8014546:	f7fe fbf9 	bl	8012d3c <clust2sect>
 801454a:	6478      	str	r0, [r7, #68]	; 0x44
 801454c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801454e:	2b00      	cmp	r3, #0
 8014550:	d103      	bne.n	801455a <f_open+0x336>
						res = FR_INT_ERR;
 8014552:	2302      	movs	r3, #2
 8014554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014558:	e015      	b.n	8014586 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801455c:	0a5a      	lsrs	r2, r3, #9
 801455e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014560:	441a      	add	r2, r3
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	7858      	ldrb	r0, [r3, #1]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	6a1a      	ldr	r2, [r3, #32]
 8014574:	2301      	movs	r3, #1
 8014576:	f7fe f837 	bl	80125e8 <disk_read>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d002      	beq.n	8014586 <f_open+0x362>
 8014580:	2301      	movs	r3, #1
 8014582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801458a:	2b00      	cmp	r3, #0
 801458c:	d002      	beq.n	8014594 <f_open+0x370>
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2200      	movs	r2, #0
 8014592:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014598:	4618      	mov	r0, r3
 801459a:	3760      	adds	r7, #96	; 0x60
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b08e      	sub	sp, #56	; 0x38
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	60b9      	str	r1, [r7, #8]
 80145aa:	607a      	str	r2, [r7, #4]
 80145ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	2200      	movs	r2, #0
 80145b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f107 0214 	add.w	r2, r7, #20
 80145be:	4611      	mov	r1, r2
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7ff fdb3 	bl	801412c <validate>
 80145c6:	4603      	mov	r3, r0
 80145c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80145cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d107      	bne.n	80145e4 <f_read+0x44>
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	7d5b      	ldrb	r3, [r3, #21]
 80145d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80145dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d002      	beq.n	80145ea <f_read+0x4a>
 80145e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145e8:	e115      	b.n	8014816 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	7d1b      	ldrb	r3, [r3, #20]
 80145ee:	f003 0301 	and.w	r3, r3, #1
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d101      	bne.n	80145fa <f_read+0x5a>
 80145f6:	2307      	movs	r3, #7
 80145f8:	e10d      	b.n	8014816 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	68da      	ldr	r2, [r3, #12]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	699b      	ldr	r3, [r3, #24]
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	6a3b      	ldr	r3, [r7, #32]
 801460a:	429a      	cmp	r2, r3
 801460c:	f240 80fe 	bls.w	801480c <f_read+0x26c>
 8014610:	6a3b      	ldr	r3, [r7, #32]
 8014612:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014614:	e0fa      	b.n	801480c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	699b      	ldr	r3, [r3, #24]
 801461a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801461e:	2b00      	cmp	r3, #0
 8014620:	f040 80c6 	bne.w	80147b0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	699b      	ldr	r3, [r3, #24]
 8014628:	0a5b      	lsrs	r3, r3, #9
 801462a:	697a      	ldr	r2, [r7, #20]
 801462c:	8952      	ldrh	r2, [r2, #10]
 801462e:	3a01      	subs	r2, #1
 8014630:	4013      	ands	r3, r2
 8014632:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d12f      	bne.n	801469a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	699b      	ldr	r3, [r3, #24]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d103      	bne.n	801464a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	689b      	ldr	r3, [r3, #8]
 8014646:	633b      	str	r3, [r7, #48]	; 0x30
 8014648:	e013      	b.n	8014672 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464e:	2b00      	cmp	r3, #0
 8014650:	d007      	beq.n	8014662 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	699b      	ldr	r3, [r3, #24]
 8014656:	4619      	mov	r1, r3
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7fe fe1f 	bl	801329c <clmt_clust>
 801465e:	6338      	str	r0, [r7, #48]	; 0x30
 8014660:	e007      	b.n	8014672 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	69db      	ldr	r3, [r3, #28]
 8014668:	4619      	mov	r1, r3
 801466a:	4610      	mov	r0, r2
 801466c:	f7fe fb85 	bl	8012d7a <get_fat>
 8014670:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014674:	2b01      	cmp	r3, #1
 8014676:	d804      	bhi.n	8014682 <f_read+0xe2>
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	2202      	movs	r2, #2
 801467c:	755a      	strb	r2, [r3, #21]
 801467e:	2302      	movs	r3, #2
 8014680:	e0c9      	b.n	8014816 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014688:	d104      	bne.n	8014694 <f_read+0xf4>
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2201      	movs	r2, #1
 801468e:	755a      	strb	r2, [r3, #21]
 8014690:	2301      	movs	r3, #1
 8014692:	e0c0      	b.n	8014816 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014698:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801469a:	697a      	ldr	r2, [r7, #20]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	69db      	ldr	r3, [r3, #28]
 80146a0:	4619      	mov	r1, r3
 80146a2:	4610      	mov	r0, r2
 80146a4:	f7fe fb4a 	bl	8012d3c <clust2sect>
 80146a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d104      	bne.n	80146ba <f_read+0x11a>
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	2202      	movs	r2, #2
 80146b4:	755a      	strb	r2, [r3, #21]
 80146b6:	2302      	movs	r3, #2
 80146b8:	e0ad      	b.n	8014816 <f_read+0x276>
			sect += csect;
 80146ba:	69ba      	ldr	r2, [r7, #24]
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	4413      	add	r3, r2
 80146c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	0a5b      	lsrs	r3, r3, #9
 80146c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80146c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d039      	beq.n	8014742 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80146ce:	69fa      	ldr	r2, [r7, #28]
 80146d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d2:	4413      	add	r3, r2
 80146d4:	697a      	ldr	r2, [r7, #20]
 80146d6:	8952      	ldrh	r2, [r2, #10]
 80146d8:	4293      	cmp	r3, r2
 80146da:	d905      	bls.n	80146e8 <f_read+0x148>
					cc = fs->csize - csect;
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	895b      	ldrh	r3, [r3, #10]
 80146e0:	461a      	mov	r2, r3
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	7858      	ldrb	r0, [r3, #1]
 80146ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ee:	69ba      	ldr	r2, [r7, #24]
 80146f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146f2:	f7fd ff79 	bl	80125e8 <disk_read>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d004      	beq.n	8014706 <f_read+0x166>
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	2201      	movs	r2, #1
 8014700:	755a      	strb	r2, [r3, #21]
 8014702:	2301      	movs	r3, #1
 8014704:	e087      	b.n	8014816 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	7d1b      	ldrb	r3, [r3, #20]
 801470a:	b25b      	sxtb	r3, r3
 801470c:	2b00      	cmp	r3, #0
 801470e:	da14      	bge.n	801473a <f_read+0x19a>
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6a1a      	ldr	r2, [r3, #32]
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801471a:	429a      	cmp	r2, r3
 801471c:	d90d      	bls.n	801473a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	6a1a      	ldr	r2, [r3, #32]
 8014722:	69bb      	ldr	r3, [r7, #24]
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	025b      	lsls	r3, r3, #9
 8014728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801472a:	18d0      	adds	r0, r2, r3
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	3330      	adds	r3, #48	; 0x30
 8014730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014734:	4619      	mov	r1, r3
 8014736:	f7fe f837 	bl	80127a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473c:	025b      	lsls	r3, r3, #9
 801473e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014740:	e050      	b.n	80147e4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6a1b      	ldr	r3, [r3, #32]
 8014746:	69ba      	ldr	r2, [r7, #24]
 8014748:	429a      	cmp	r2, r3
 801474a:	d02e      	beq.n	80147aa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	7d1b      	ldrb	r3, [r3, #20]
 8014750:	b25b      	sxtb	r3, r3
 8014752:	2b00      	cmp	r3, #0
 8014754:	da18      	bge.n	8014788 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	7858      	ldrb	r0, [r3, #1]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	6a1a      	ldr	r2, [r3, #32]
 8014764:	2301      	movs	r3, #1
 8014766:	f7fd ff5f 	bl	8012628 <disk_write>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d004      	beq.n	801477a <f_read+0x1da>
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2201      	movs	r2, #1
 8014774:	755a      	strb	r2, [r3, #21]
 8014776:	2301      	movs	r3, #1
 8014778:	e04d      	b.n	8014816 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	7d1b      	ldrb	r3, [r3, #20]
 801477e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014782:	b2da      	uxtb	r2, r3
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	7858      	ldrb	r0, [r3, #1]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014792:	2301      	movs	r3, #1
 8014794:	69ba      	ldr	r2, [r7, #24]
 8014796:	f7fd ff27 	bl	80125e8 <disk_read>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d004      	beq.n	80147aa <f_read+0x20a>
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2201      	movs	r2, #1
 80147a4:	755a      	strb	r2, [r3, #21]
 80147a6:	2301      	movs	r3, #1
 80147a8:	e035      	b.n	8014816 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	69ba      	ldr	r2, [r7, #24]
 80147ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	699b      	ldr	r3, [r3, #24]
 80147b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80147bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80147be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d901      	bls.n	80147ca <f_read+0x22a>
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	699b      	ldr	r3, [r3, #24]
 80147d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147d8:	4413      	add	r3, r2
 80147da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147dc:	4619      	mov	r1, r3
 80147de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147e0:	f7fd ffe2 	bl	80127a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80147e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e8:	4413      	add	r3, r2
 80147ea:	627b      	str	r3, [r7, #36]	; 0x24
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	699a      	ldr	r2, [r3, #24]
 80147f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f2:	441a      	add	r2, r3
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	619a      	str	r2, [r3, #24]
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147fe:	441a      	add	r2, r3
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	601a      	str	r2, [r3, #0]
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014808:	1ad3      	subs	r3, r2, r3
 801480a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	f47f af01 	bne.w	8014616 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014814:	2300      	movs	r3, #0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3738      	adds	r7, #56	; 0x38
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801481e:	b580      	push	{r7, lr}
 8014820:	b08c      	sub	sp, #48	; 0x30
 8014822:	af00      	add	r7, sp, #0
 8014824:	60f8      	str	r0, [r7, #12]
 8014826:	60b9      	str	r1, [r7, #8]
 8014828:	607a      	str	r2, [r7, #4]
 801482a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	2200      	movs	r2, #0
 8014834:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	f107 0210 	add.w	r2, r7, #16
 801483c:	4611      	mov	r1, r2
 801483e:	4618      	mov	r0, r3
 8014840:	f7ff fc74 	bl	801412c <validate>
 8014844:	4603      	mov	r3, r0
 8014846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801484a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801484e:	2b00      	cmp	r3, #0
 8014850:	d107      	bne.n	8014862 <f_write+0x44>
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	7d5b      	ldrb	r3, [r3, #21]
 8014856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801485a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801485e:	2b00      	cmp	r3, #0
 8014860:	d002      	beq.n	8014868 <f_write+0x4a>
 8014862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014866:	e14b      	b.n	8014b00 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	7d1b      	ldrb	r3, [r3, #20]
 801486c:	f003 0302 	and.w	r3, r3, #2
 8014870:	2b00      	cmp	r3, #0
 8014872:	d101      	bne.n	8014878 <f_write+0x5a>
 8014874:	2307      	movs	r3, #7
 8014876:	e143      	b.n	8014b00 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	699a      	ldr	r2, [r3, #24]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	441a      	add	r2, r3
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	699b      	ldr	r3, [r3, #24]
 8014884:	429a      	cmp	r2, r3
 8014886:	f080 812d 	bcs.w	8014ae4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	699b      	ldr	r3, [r3, #24]
 801488e:	43db      	mvns	r3, r3
 8014890:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014892:	e127      	b.n	8014ae4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	699b      	ldr	r3, [r3, #24]
 8014898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801489c:	2b00      	cmp	r3, #0
 801489e:	f040 80e3 	bne.w	8014a68 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	699b      	ldr	r3, [r3, #24]
 80148a6:	0a5b      	lsrs	r3, r3, #9
 80148a8:	693a      	ldr	r2, [r7, #16]
 80148aa:	8952      	ldrh	r2, [r2, #10]
 80148ac:	3a01      	subs	r2, #1
 80148ae:	4013      	ands	r3, r2
 80148b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d143      	bne.n	8014940 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	699b      	ldr	r3, [r3, #24]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d10c      	bne.n	80148da <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d11a      	bne.n	8014902 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2100      	movs	r1, #0
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7fe fc4b 	bl	801316c <create_chain>
 80148d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80148d8:	e013      	b.n	8014902 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d007      	beq.n	80148f2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	699b      	ldr	r3, [r3, #24]
 80148e6:	4619      	mov	r1, r3
 80148e8:	68f8      	ldr	r0, [r7, #12]
 80148ea:	f7fe fcd7 	bl	801329c <clmt_clust>
 80148ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80148f0:	e007      	b.n	8014902 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	69db      	ldr	r3, [r3, #28]
 80148f8:	4619      	mov	r1, r3
 80148fa:	4610      	mov	r0, r2
 80148fc:	f7fe fc36 	bl	801316c <create_chain>
 8014900:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014904:	2b00      	cmp	r3, #0
 8014906:	f000 80f2 	beq.w	8014aee <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490c:	2b01      	cmp	r3, #1
 801490e:	d104      	bne.n	801491a <f_write+0xfc>
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2202      	movs	r2, #2
 8014914:	755a      	strb	r2, [r3, #21]
 8014916:	2302      	movs	r3, #2
 8014918:	e0f2      	b.n	8014b00 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014920:	d104      	bne.n	801492c <f_write+0x10e>
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2201      	movs	r2, #1
 8014926:	755a      	strb	r2, [r3, #21]
 8014928:	2301      	movs	r3, #1
 801492a:	e0e9      	b.n	8014b00 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014930:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	689b      	ldr	r3, [r3, #8]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d102      	bne.n	8014940 <f_write+0x122>
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801493e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	7d1b      	ldrb	r3, [r3, #20]
 8014944:	b25b      	sxtb	r3, r3
 8014946:	2b00      	cmp	r3, #0
 8014948:	da18      	bge.n	801497c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	7858      	ldrb	r0, [r3, #1]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	6a1a      	ldr	r2, [r3, #32]
 8014958:	2301      	movs	r3, #1
 801495a:	f7fd fe65 	bl	8012628 <disk_write>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d004      	beq.n	801496e <f_write+0x150>
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2201      	movs	r2, #1
 8014968:	755a      	strb	r2, [r3, #21]
 801496a:	2301      	movs	r3, #1
 801496c:	e0c8      	b.n	8014b00 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	7d1b      	ldrb	r3, [r3, #20]
 8014972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014976:	b2da      	uxtb	r2, r3
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801497c:	693a      	ldr	r2, [r7, #16]
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	69db      	ldr	r3, [r3, #28]
 8014982:	4619      	mov	r1, r3
 8014984:	4610      	mov	r0, r2
 8014986:	f7fe f9d9 	bl	8012d3c <clust2sect>
 801498a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d104      	bne.n	801499c <f_write+0x17e>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	2202      	movs	r2, #2
 8014996:	755a      	strb	r2, [r3, #21]
 8014998:	2302      	movs	r3, #2
 801499a:	e0b1      	b.n	8014b00 <f_write+0x2e2>
			sect += csect;
 801499c:	697a      	ldr	r2, [r7, #20]
 801499e:	69bb      	ldr	r3, [r7, #24]
 80149a0:	4413      	add	r3, r2
 80149a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	0a5b      	lsrs	r3, r3, #9
 80149a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80149aa:	6a3b      	ldr	r3, [r7, #32]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d03c      	beq.n	8014a2a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80149b0:	69ba      	ldr	r2, [r7, #24]
 80149b2:	6a3b      	ldr	r3, [r7, #32]
 80149b4:	4413      	add	r3, r2
 80149b6:	693a      	ldr	r2, [r7, #16]
 80149b8:	8952      	ldrh	r2, [r2, #10]
 80149ba:	4293      	cmp	r3, r2
 80149bc:	d905      	bls.n	80149ca <f_write+0x1ac>
					cc = fs->csize - csect;
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	895b      	ldrh	r3, [r3, #10]
 80149c2:	461a      	mov	r2, r3
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	1ad3      	subs	r3, r2, r3
 80149c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	7858      	ldrb	r0, [r3, #1]
 80149ce:	6a3b      	ldr	r3, [r7, #32]
 80149d0:	697a      	ldr	r2, [r7, #20]
 80149d2:	69f9      	ldr	r1, [r7, #28]
 80149d4:	f7fd fe28 	bl	8012628 <disk_write>
 80149d8:	4603      	mov	r3, r0
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d004      	beq.n	80149e8 <f_write+0x1ca>
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2201      	movs	r2, #1
 80149e2:	755a      	strb	r2, [r3, #21]
 80149e4:	2301      	movs	r3, #1
 80149e6:	e08b      	b.n	8014b00 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	6a1a      	ldr	r2, [r3, #32]
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	6a3a      	ldr	r2, [r7, #32]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d915      	bls.n	8014a22 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	6a1a      	ldr	r2, [r3, #32]
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	025b      	lsls	r3, r3, #9
 8014a06:	69fa      	ldr	r2, [r7, #28]
 8014a08:	4413      	add	r3, r2
 8014a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014a0e:	4619      	mov	r1, r3
 8014a10:	f7fd feca 	bl	80127a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	7d1b      	ldrb	r3, [r3, #20]
 8014a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a1c:	b2da      	uxtb	r2, r3
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014a22:	6a3b      	ldr	r3, [r7, #32]
 8014a24:	025b      	lsls	r3, r3, #9
 8014a26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014a28:	e03f      	b.n	8014aaa <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	6a1b      	ldr	r3, [r3, #32]
 8014a2e:	697a      	ldr	r2, [r7, #20]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d016      	beq.n	8014a62 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	699a      	ldr	r2, [r3, #24]
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d210      	bcs.n	8014a62 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	7858      	ldrb	r0, [r3, #1]
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	697a      	ldr	r2, [r7, #20]
 8014a4e:	f7fd fdcb 	bl	80125e8 <disk_read>
 8014a52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d004      	beq.n	8014a62 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	755a      	strb	r2, [r3, #21]
 8014a5e:	2301      	movs	r3, #1
 8014a60:	e04e      	b.n	8014b00 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	697a      	ldr	r2, [r7, #20]
 8014a66:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	699b      	ldr	r3, [r3, #24]
 8014a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a70:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014a74:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d901      	bls.n	8014a82 <f_write+0x264>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	699b      	ldr	r3, [r3, #24]
 8014a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a90:	4413      	add	r3, r2
 8014a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a94:	69f9      	ldr	r1, [r7, #28]
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7fd fe86 	bl	80127a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	7d1b      	ldrb	r3, [r3, #20]
 8014aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014aa4:	b2da      	uxtb	r2, r3
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014aaa:	69fa      	ldr	r2, [r7, #28]
 8014aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aae:	4413      	add	r3, r2
 8014ab0:	61fb      	str	r3, [r7, #28]
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	699a      	ldr	r2, [r3, #24]
 8014ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab8:	441a      	add	r2, r3
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	619a      	str	r2, [r3, #24]
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	68da      	ldr	r2, [r3, #12]
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	699b      	ldr	r3, [r3, #24]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	bf38      	it	cc
 8014aca:	461a      	movcc	r2, r3
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	60da      	str	r2, [r3, #12]
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad6:	441a      	add	r2, r3
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	601a      	str	r2, [r3, #0]
 8014adc:	687a      	ldr	r2, [r7, #4]
 8014ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae0:	1ad3      	subs	r3, r2, r3
 8014ae2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	f47f aed4 	bne.w	8014894 <f_write+0x76>
 8014aec:	e000      	b.n	8014af0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014aee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	7d1b      	ldrb	r3, [r3, #20]
 8014af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014afe:	2300      	movs	r3, #0
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3730      	adds	r7, #48	; 0x30
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f107 0208 	add.w	r2, r7, #8
 8014b16:	4611      	mov	r1, r2
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7ff fb07 	bl	801412c <validate>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014b22:	7dfb      	ldrb	r3, [r7, #23]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d168      	bne.n	8014bfa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	7d1b      	ldrb	r3, [r3, #20]
 8014b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d062      	beq.n	8014bfa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	7d1b      	ldrb	r3, [r3, #20]
 8014b38:	b25b      	sxtb	r3, r3
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	da15      	bge.n	8014b6a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	7858      	ldrb	r0, [r3, #1]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6a1a      	ldr	r2, [r3, #32]
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	f7fd fd6b 	bl	8012628 <disk_write>
 8014b52:	4603      	mov	r3, r0
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d001      	beq.n	8014b5c <f_sync+0x54>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e04f      	b.n	8014bfc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	7d1b      	ldrb	r3, [r3, #20]
 8014b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b64:	b2da      	uxtb	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014b6a:	f7f9 fb03 	bl	800e174 <get_fattime>
 8014b6e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014b70:	68ba      	ldr	r2, [r7, #8]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b76:	4619      	mov	r1, r3
 8014b78:	4610      	mov	r0, r2
 8014b7a:	f7fe f843 	bl	8012c04 <move_window>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014b82:	7dfb      	ldrb	r3, [r7, #23]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d138      	bne.n	8014bfa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b8c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	330b      	adds	r3, #11
 8014b92:	781a      	ldrb	r2, [r3, #0]
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	330b      	adds	r3, #11
 8014b98:	f042 0220 	orr.w	r2, r2, #32
 8014b9c:	b2d2      	uxtb	r2, r2
 8014b9e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	461a      	mov	r2, r3
 8014baa:	68f9      	ldr	r1, [r7, #12]
 8014bac:	f7fe fd50 	bl	8013650 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f103 021c 	add.w	r2, r3, #28
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	4619      	mov	r1, r3
 8014bbc:	4610      	mov	r0, r2
 8014bbe:	f7fd fdc7 	bl	8012750 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	3316      	adds	r3, #22
 8014bc6:	6939      	ldr	r1, [r7, #16]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fd fdc1 	bl	8012750 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	3312      	adds	r3, #18
 8014bd2:	2100      	movs	r1, #0
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fd fda0 	bl	801271a <st_word>
					fs->wflag = 1;
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2201      	movs	r2, #1
 8014bde:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fe f83c 	bl	8012c60 <sync_fs>
 8014be8:	4603      	mov	r3, r0
 8014bea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	7d1b      	ldrb	r3, [r3, #20]
 8014bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014bf4:	b2da      	uxtb	r2, r3
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3718      	adds	r7, #24
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}

08014c04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7ff ff7b 	bl	8014b08 <f_sync>
 8014c12:	4603      	mov	r3, r0
 8014c14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014c16:	7bfb      	ldrb	r3, [r7, #15]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d118      	bne.n	8014c4e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f107 0208 	add.w	r2, r7, #8
 8014c22:	4611      	mov	r1, r2
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7ff fa81 	bl	801412c <validate>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014c2e:	7bfb      	ldrb	r3, [r7, #15]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d10c      	bne.n	8014c4e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	691b      	ldr	r3, [r3, #16]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fd ff3f 	bl	8012abc <dec_lock>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014c42:	7bfb      	ldrb	r3, [r7, #15]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d102      	bne.n	8014c4e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3710      	adds	r7, #16
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d101      	bne.n	8014c6c <f_opendir+0x14>
 8014c68:	2309      	movs	r3, #9
 8014c6a:	e064      	b.n	8014d36 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014c70:	f107 010c 	add.w	r1, r7, #12
 8014c74:	463b      	mov	r3, r7
 8014c76:	2200      	movs	r2, #0
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7ff f80b 	bl	8013c94 <find_volume>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014c82:	7dfb      	ldrb	r3, [r7, #23]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d14f      	bne.n	8014d28 <f_opendir+0xd0>
		obj->fs = fs;
 8014c88:	68fa      	ldr	r2, [r7, #12]
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	4619      	mov	r1, r3
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f7fe fef2 	bl	8013a7c <follow_path>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014c9c:	7dfb      	ldrb	r3, [r7, #23]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d13d      	bne.n	8014d1e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014ca8:	b25b      	sxtb	r3, r3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	db12      	blt.n	8014cd4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	799b      	ldrb	r3, [r3, #6]
 8014cb2:	f003 0310 	and.w	r3, r3, #16
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00a      	beq.n	8014cd0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014cba:	68fa      	ldr	r2, [r7, #12]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6a1b      	ldr	r3, [r3, #32]
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	4610      	mov	r0, r2
 8014cc4:	f7fe fca5 	bl	8013612 <ld_clust>
 8014cc8:	4602      	mov	r2, r0
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	609a      	str	r2, [r3, #8]
 8014cce:	e001      	b.n	8014cd4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014cd0:	2305      	movs	r3, #5
 8014cd2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8014cd4:	7dfb      	ldrb	r3, [r7, #23]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d121      	bne.n	8014d1e <f_opendir+0xc6>
				obj->id = fs->id;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	88da      	ldrh	r2, [r3, #6]
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014ce2:	2100      	movs	r1, #0
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f7fe fb0d 	bl	8013304 <dir_sdi>
 8014cea:	4603      	mov	r3, r0
 8014cec:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014cee:	7dfb      	ldrb	r3, [r7, #23]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d114      	bne.n	8014d1e <f_opendir+0xc6>
					if (obj->sclust) {
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	689b      	ldr	r3, [r3, #8]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d00d      	beq.n	8014d18 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7fd fe4e 	bl	80129a0 <inc_lock>
 8014d04:	4602      	mov	r2, r0
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	691b      	ldr	r3, [r3, #16]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d105      	bne.n	8014d1e <f_opendir+0xc6>
 8014d12:	2312      	movs	r3, #18
 8014d14:	75fb      	strb	r3, [r7, #23]
 8014d16:	e002      	b.n	8014d1e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014d1e:	7dfb      	ldrb	r3, [r7, #23]
 8014d20:	2b04      	cmp	r3, #4
 8014d22:	d101      	bne.n	8014d28 <f_opendir+0xd0>
 8014d24:	2305      	movs	r3, #5
 8014d26:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014d28:	7dfb      	ldrb	r3, [r7, #23]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d002      	beq.n	8014d34 <f_opendir+0xdc>
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	2200      	movs	r2, #0
 8014d32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3718      	adds	r7, #24
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b084      	sub	sp, #16
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f107 0208 	add.w	r2, r7, #8
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7ff f9ec 	bl	801412c <validate>
 8014d54:	4603      	mov	r3, r0
 8014d56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014d58:	7bfb      	ldrb	r3, [r7, #15]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d110      	bne.n	8014d80 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	691b      	ldr	r3, [r3, #16]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d006      	beq.n	8014d74 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	691b      	ldr	r3, [r3, #16]
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fd fea6 	bl	8012abc <dec_lock>
 8014d70:	4603      	mov	r3, r0
 8014d72:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014d74:	7bfb      	ldrb	r3, [r7, #15]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d102      	bne.n	8014d80 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b084      	sub	sp, #16
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
 8014d92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f107 0208 	add.w	r2, r7, #8
 8014d9a:	4611      	mov	r1, r2
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7ff f9c5 	bl	801412c <validate>
 8014da2:	4603      	mov	r3, r0
 8014da4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014da6:	7bfb      	ldrb	r3, [r7, #15]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d126      	bne.n	8014dfa <f_readdir+0x70>
		if (!fno) {
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014db2:	2100      	movs	r1, #0
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7fe faa5 	bl	8013304 <dir_sdi>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	73fb      	strb	r3, [r7, #15]
 8014dbe:	e01c      	b.n	8014dfa <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f7fe fc64 	bl	8013690 <dir_read>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014dcc:	7bfb      	ldrb	r3, [r7, #15]
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	d101      	bne.n	8014dd6 <f_readdir+0x4c>
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8014dd6:	7bfb      	ldrb	r3, [r7, #15]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d10e      	bne.n	8014dfa <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014ddc:	6839      	ldr	r1, [r7, #0]
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f7fe fd58 	bl	8013894 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014de4:	2100      	movs	r1, #0
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f7fe fb07 	bl	80133fa <dir_next>
 8014dec:	4603      	mov	r3, r0
 8014dee:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
 8014df2:	2b04      	cmp	r3, #4
 8014df4:	d101      	bne.n	8014dfa <f_readdir+0x70>
 8014df6:	2300      	movs	r3, #0
 8014df8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	3710      	adds	r7, #16
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b090      	sub	sp, #64	; 0x40
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014e0e:	f107 010c 	add.w	r1, r7, #12
 8014e12:	1d3b      	adds	r3, r7, #4
 8014e14:	2200      	movs	r2, #0
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7fe ff3c 	bl	8013c94 <find_volume>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8014e22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d11f      	bne.n	8014e6a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	f107 030c 	add.w	r3, r7, #12
 8014e30:	4611      	mov	r1, r2
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fe fe22 	bl	8013a7c <follow_path>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8014e3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d111      	bne.n	8014e6a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014e46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014e4a:	b25b      	sxtb	r3, r3
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	da03      	bge.n	8014e58 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8014e50:	2306      	movs	r3, #6
 8014e52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014e56:	e008      	b.n	8014e6a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d005      	beq.n	8014e6a <f_stat+0x66>
 8014e5e:	f107 030c 	add.w	r3, r7, #12
 8014e62:	6839      	ldr	r1, [r7, #0]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7fe fd15 	bl	8013894 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3740      	adds	r7, #64	; 0x40
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}

08014e76 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014e76:	b580      	push	{r7, lr}
 8014e78:	b09e      	sub	sp, #120	; 0x78
 8014e7a:	af00      	add	r7, sp, #0
 8014e7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014e82:	f107 010c 	add.w	r1, r7, #12
 8014e86:	1d3b      	adds	r3, r7, #4
 8014e88:	2202      	movs	r2, #2
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7fe ff02 	bl	8013c94 <find_volume>
 8014e90:	4603      	mov	r3, r0
 8014e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014e9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	f040 808e 	bne.w	8014fc0 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014eaa:	4611      	mov	r1, r2
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7fe fde5 	bl	8013a7c <follow_path>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014eb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d108      	bne.n	8014ed2 <f_unlink+0x5c>
 8014ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014ec4:	2102      	movs	r1, #2
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7fd fcec 	bl	80128a4 <chk_lock>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014ed2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d172      	bne.n	8014fc0 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014ede:	b25b      	sxtb	r3, r3
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	da03      	bge.n	8014eec <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014ee4:	2306      	movs	r3, #6
 8014ee6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014eea:	e008      	b.n	8014efe <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014eec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014ef0:	f003 0301 	and.w	r3, r3, #1
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d002      	beq.n	8014efe <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014ef8:	2307      	movs	r3, #7
 8014efa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014efe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d134      	bne.n	8014f70 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7fe fb80 	bl	8013612 <ld_clust>
 8014f12:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014f14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014f18:	f003 0310 	and.w	r3, r3, #16
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d027      	beq.n	8014f70 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014f26:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014f28:	f107 0310 	add.w	r3, r7, #16
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7fe f9e8 	bl	8013304 <dir_sdi>
 8014f34:	4603      	mov	r3, r0
 8014f36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8014f3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d116      	bne.n	8014f70 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014f42:	f107 0310 	add.w	r3, r7, #16
 8014f46:	2100      	movs	r1, #0
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7fe fba1 	bl	8013690 <dir_read>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014f54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d102      	bne.n	8014f62 <f_unlink+0xec>
 8014f5c:	2307      	movs	r3, #7
 8014f5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014f62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014f66:	2b04      	cmp	r3, #4
 8014f68:	d102      	bne.n	8014f70 <f_unlink+0xfa>
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014f70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d123      	bne.n	8014fc0 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fe fc6b 	bl	8013858 <dir_remove>
 8014f82:	4603      	mov	r3, r0
 8014f84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014f88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d10c      	bne.n	8014faa <f_unlink+0x134>
 8014f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d009      	beq.n	8014faa <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fe f87f 	bl	80130a2 <remove_chain>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014faa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d106      	bne.n	8014fc0 <f_unlink+0x14a>
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7fd fe53 	bl	8012c60 <sync_fs>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014fc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3778      	adds	r7, #120	; 0x78
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b088      	sub	sp, #32
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	60b9      	str	r1, [r7, #8]
 8014fd6:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014fe0:	e01b      	b.n	801501a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014fe2:	f107 0310 	add.w	r3, r7, #16
 8014fe6:	f107 0114 	add.w	r1, r7, #20
 8014fea:	2201      	movs	r2, #1
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7ff fad7 	bl	80145a0 <f_read>
		if (rc != 1) break;
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	2b01      	cmp	r3, #1
 8014ff6:	d116      	bne.n	8015026 <f_gets+0x5a>
		c = s[0];
 8014ff8:	7d3b      	ldrb	r3, [r7, #20]
 8014ffa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8014ffc:	7dfb      	ldrb	r3, [r7, #23]
 8014ffe:	2b0d      	cmp	r3, #13
 8015000:	d100      	bne.n	8015004 <f_gets+0x38>
 8015002:	e00a      	b.n	801501a <f_gets+0x4e>
		*p++ = c;
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	1c5a      	adds	r2, r3, #1
 8015008:	61ba      	str	r2, [r7, #24]
 801500a:	7dfa      	ldrb	r2, [r7, #23]
 801500c:	701a      	strb	r2, [r3, #0]
		n++;
 801500e:	69fb      	ldr	r3, [r7, #28]
 8015010:	3301      	adds	r3, #1
 8015012:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8015014:	7dfb      	ldrb	r3, [r7, #23]
 8015016:	2b0a      	cmp	r3, #10
 8015018:	d007      	beq.n	801502a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	3b01      	subs	r3, #1
 801501e:	69fa      	ldr	r2, [r7, #28]
 8015020:	429a      	cmp	r2, r3
 8015022:	dbde      	blt.n	8014fe2 <f_gets+0x16>
 8015024:	e002      	b.n	801502c <f_gets+0x60>
		if (rc != 1) break;
 8015026:	bf00      	nop
 8015028:	e000      	b.n	801502c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801502a:	bf00      	nop
	}
	*p = 0;
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	2200      	movs	r2, #0
 8015030:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d001      	beq.n	801503c <f_gets+0x70>
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	e000      	b.n	801503e <f_gets+0x72>
 801503c:	2300      	movs	r3, #0
}
 801503e:	4618      	mov	r0, r3
 8015040:	3720      	adds	r7, #32
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}
	...

08015048 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015048:	b480      	push	{r7}
 801504a:	b087      	sub	sp, #28
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	4613      	mov	r3, r2
 8015054:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015056:	2301      	movs	r3, #1
 8015058:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801505a:	2300      	movs	r3, #0
 801505c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801505e:	4b1f      	ldr	r3, [pc, #124]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 8015060:	7a5b      	ldrb	r3, [r3, #9]
 8015062:	b2db      	uxtb	r3, r3
 8015064:	2b00      	cmp	r3, #0
 8015066:	d131      	bne.n	80150cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015068:	4b1c      	ldr	r3, [pc, #112]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 801506a:	7a5b      	ldrb	r3, [r3, #9]
 801506c:	b2db      	uxtb	r3, r3
 801506e:	461a      	mov	r2, r3
 8015070:	4b1a      	ldr	r3, [pc, #104]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 8015072:	2100      	movs	r1, #0
 8015074:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015076:	4b19      	ldr	r3, [pc, #100]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 8015078:	7a5b      	ldrb	r3, [r3, #9]
 801507a:	b2db      	uxtb	r3, r3
 801507c:	4a17      	ldr	r2, [pc, #92]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	4413      	add	r3, r2
 8015082:	68fa      	ldr	r2, [r7, #12]
 8015084:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015086:	4b15      	ldr	r3, [pc, #84]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 8015088:	7a5b      	ldrb	r3, [r3, #9]
 801508a:	b2db      	uxtb	r3, r3
 801508c:	461a      	mov	r2, r3
 801508e:	4b13      	ldr	r3, [pc, #76]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 8015090:	4413      	add	r3, r2
 8015092:	79fa      	ldrb	r2, [r7, #7]
 8015094:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015096:	4b11      	ldr	r3, [pc, #68]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 8015098:	7a5b      	ldrb	r3, [r3, #9]
 801509a:	b2db      	uxtb	r3, r3
 801509c:	1c5a      	adds	r2, r3, #1
 801509e:	b2d1      	uxtb	r1, r2
 80150a0:	4a0e      	ldr	r2, [pc, #56]	; (80150dc <FATFS_LinkDriverEx+0x94>)
 80150a2:	7251      	strb	r1, [r2, #9]
 80150a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80150a6:	7dbb      	ldrb	r3, [r7, #22]
 80150a8:	3330      	adds	r3, #48	; 0x30
 80150aa:	b2da      	uxtb	r2, r3
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	3301      	adds	r3, #1
 80150b4:	223a      	movs	r2, #58	; 0x3a
 80150b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	3302      	adds	r3, #2
 80150bc:	222f      	movs	r2, #47	; 0x2f
 80150be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	3303      	adds	r3, #3
 80150c4:	2200      	movs	r2, #0
 80150c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80150c8:	2300      	movs	r3, #0
 80150ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80150cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	371c      	adds	r7, #28
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	20000f8c 	.word	0x20000f8c

080150e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80150ea:	2200      	movs	r2, #0
 80150ec:	6839      	ldr	r1, [r7, #0]
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7ff ffaa 	bl	8015048 <FATFS_LinkDriverEx>
 80150f4:	4603      	mov	r3, r0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
	...

08015100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8015104:	2201      	movs	r2, #1
 8015106:	4912      	ldr	r1, [pc, #72]	; (8015150 <MX_USB_DEVICE_Init+0x50>)
 8015108:	4812      	ldr	r0, [pc, #72]	; (8015154 <MX_USB_DEVICE_Init+0x54>)
 801510a:	f7f9 ff29 	bl	800ef60 <USBD_Init>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015114:	f7ed fc18 	bl	8002948 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8015118:	490f      	ldr	r1, [pc, #60]	; (8015158 <MX_USB_DEVICE_Init+0x58>)
 801511a:	480e      	ldr	r0, [pc, #56]	; (8015154 <MX_USB_DEVICE_Init+0x54>)
 801511c:	f7f9 ff50 	bl	800efc0 <USBD_RegisterClass>
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	d001      	beq.n	801512a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015126:	f7ed fc0f 	bl	8002948 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801512a:	490c      	ldr	r1, [pc, #48]	; (801515c <MX_USB_DEVICE_Init+0x5c>)
 801512c:	4809      	ldr	r0, [pc, #36]	; (8015154 <MX_USB_DEVICE_Init+0x54>)
 801512e:	f7f9 fe47 	bl	800edc0 <USBD_CDC_RegisterInterface>
 8015132:	4603      	mov	r3, r0
 8015134:	2b00      	cmp	r3, #0
 8015136:	d001      	beq.n	801513c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015138:	f7ed fc06 	bl	8002948 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801513c:	4805      	ldr	r0, [pc, #20]	; (8015154 <MX_USB_DEVICE_Init+0x54>)
 801513e:	f7f9 ff75 	bl	800f02c <USBD_Start>
 8015142:	4603      	mov	r3, r0
 8015144:	2b00      	cmp	r3, #0
 8015146:	d001      	beq.n	801514c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015148:	f7ed fbfe 	bl	8002948 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801514c:	bf00      	nop
 801514e:	bd80      	pop	{r7, pc}
 8015150:	200000cc 	.word	0x200000cc
 8015154:	20000f98 	.word	0x20000f98
 8015158:	20000018 	.word	0x20000018
 801515c:	200000b8 	.word	0x200000b8

08015160 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8015164:	2200      	movs	r2, #0
 8015166:	4905      	ldr	r1, [pc, #20]	; (801517c <CDC_Init_HS+0x1c>)
 8015168:	4805      	ldr	r0, [pc, #20]	; (8015180 <CDC_Init_HS+0x20>)
 801516a:	f7f9 fe43 	bl	800edf4 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801516e:	4905      	ldr	r1, [pc, #20]	; (8015184 <CDC_Init_HS+0x24>)
 8015170:	4803      	ldr	r0, [pc, #12]	; (8015180 <CDC_Init_HS+0x20>)
 8015172:	f7f9 fe61 	bl	800ee38 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8015176:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015178:	4618      	mov	r0, r3
 801517a:	bd80      	pop	{r7, pc}
 801517c:	20001a74 	.word	0x20001a74
 8015180:	20000f98 	.word	0x20000f98
 8015184:	20001274 	.word	0x20001274

08015188 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8015188:	b480      	push	{r7}
 801518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 801518c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801518e:	4618      	mov	r0, r3
 8015190:	46bd      	mov	sp, r7
 8015192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015196:	4770      	bx	lr

08015198 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015198:	b480      	push	{r7}
 801519a:	b085      	sub	sp, #20
 801519c:	af00      	add	r7, sp, #0
 801519e:	4603      	mov	r3, r0
 80151a0:	6039      	str	r1, [r7, #0]
 80151a2:	71fb      	strb	r3, [r7, #7]
 80151a4:	4613      	mov	r3, r2
 80151a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*)pbuf;
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	60fb      	str	r3, [r7, #12]
	switch(cmd)
 80151ac:	79fb      	ldrb	r3, [r7, #7]
 80151ae:	2b23      	cmp	r3, #35	; 0x23
 80151b0:	d858      	bhi.n	8015264 <CDC_Control_HS+0xcc>
 80151b2:	a201      	add	r2, pc, #4	; (adr r2, 80151b8 <CDC_Control_HS+0x20>)
 80151b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151b8:	08015265 	.word	0x08015265
 80151bc:	08015265 	.word	0x08015265
 80151c0:	08015265 	.word	0x08015265
 80151c4:	08015265 	.word	0x08015265
 80151c8:	08015265 	.word	0x08015265
 80151cc:	08015265 	.word	0x08015265
 80151d0:	08015265 	.word	0x08015265
 80151d4:	08015265 	.word	0x08015265
 80151d8:	08015265 	.word	0x08015265
 80151dc:	08015265 	.word	0x08015265
 80151e0:	08015265 	.word	0x08015265
 80151e4:	08015265 	.word	0x08015265
 80151e8:	08015265 	.word	0x08015265
 80151ec:	08015265 	.word	0x08015265
 80151f0:	08015265 	.word	0x08015265
 80151f4:	08015265 	.word	0x08015265
 80151f8:	08015265 	.word	0x08015265
 80151fc:	08015265 	.word	0x08015265
 8015200:	08015265 	.word	0x08015265
 8015204:	08015265 	.word	0x08015265
 8015208:	08015265 	.word	0x08015265
 801520c:	08015265 	.word	0x08015265
 8015210:	08015265 	.word	0x08015265
 8015214:	08015265 	.word	0x08015265
 8015218:	08015265 	.word	0x08015265
 801521c:	08015265 	.word	0x08015265
 8015220:	08015265 	.word	0x08015265
 8015224:	08015265 	.word	0x08015265
 8015228:	08015265 	.word	0x08015265
 801522c:	08015265 	.word	0x08015265
 8015230:	08015265 	.word	0x08015265
 8015234:	08015265 	.word	0x08015265
 8015238:	08015265 	.word	0x08015265
 801523c:	08015265 	.word	0x08015265
 8015240:	08015249 	.word	0x08015249
 8015244:	08015265 	.word	0x08015265
	case CDC_GET_LINE_CODING:

		break;

	case CDC_SET_CONTROL_LINE_STATE:
		if((req->wValue & 0x0001) != 0)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	885b      	ldrh	r3, [r3, #2]
 801524c:	f003 0301 	and.w	r3, r3, #1
 8015250:	2b00      	cmp	r3, #0
 8015252:	d003      	beq.n	801525c <CDC_Control_HS+0xc4>
			usb_connected = 1;
 8015254:	4b07      	ldr	r3, [pc, #28]	; (8015274 <CDC_Control_HS+0xdc>)
 8015256:	2201      	movs	r2, #1
 8015258:	701a      	strb	r2, [r3, #0]
		else
			usb_connected = 0;
		break;
 801525a:	e004      	b.n	8015266 <CDC_Control_HS+0xce>
			usb_connected = 0;
 801525c:	4b05      	ldr	r3, [pc, #20]	; (8015274 <CDC_Control_HS+0xdc>)
 801525e:	2200      	movs	r2, #0
 8015260:	701a      	strb	r2, [r3, #0]
		break;
 8015262:	e000      	b.n	8015266 <CDC_Control_HS+0xce>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8015264:	bf00      	nop
	}

	return (USBD_OK);
 8015266:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8015268:	4618      	mov	r0, r3
 801526a:	3714      	adds	r7, #20
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr
 8015274:	20000edf 	.word	0x20000edf

08015278 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	memset(usb_rx_buffer, 0x00, 1024);
 8015282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015286:	2100      	movs	r1, #0
 8015288:	480e      	ldr	r0, [pc, #56]	; (80152c4 <CDC_Receive_HS+0x4c>)
 801528a:	f001 f84b 	bl	8016324 <memset>
	memcpy(usb_rx_buffer, Buf, *Len);
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	461a      	mov	r2, r3
 8015294:	6879      	ldr	r1, [r7, #4]
 8015296:	480b      	ldr	r0, [pc, #44]	; (80152c4 <CDC_Receive_HS+0x4c>)
 8015298:	f001 f836 	bl	8016308 <memcpy>
	usb_rx_length = *Len;
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	b29a      	uxth	r2, r3
 80152a2:	4b09      	ldr	r3, [pc, #36]	; (80152c8 <CDC_Receive_HS+0x50>)
 80152a4:	801a      	strh	r2, [r3, #0]
	usb_rx_ready = 1;
 80152a6:	4b09      	ldr	r3, [pc, #36]	; (80152cc <CDC_Receive_HS+0x54>)
 80152a8:	2201      	movs	r2, #1
 80152aa:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80152ac:	6879      	ldr	r1, [r7, #4]
 80152ae:	4808      	ldr	r0, [pc, #32]	; (80152d0 <CDC_Receive_HS+0x58>)
 80152b0:	f7f9 fdc2 	bl	800ee38 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80152b4:	4806      	ldr	r0, [pc, #24]	; (80152d0 <CDC_Receive_HS+0x58>)
 80152b6:	f7f9 fe1d 	bl	800eef4 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80152ba:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3708      	adds	r7, #8
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	20000adc 	.word	0x20000adc
 80152c8:	20000edc 	.word	0x20000edc
 80152cc:	20000ede 	.word	0x20000ede
 80152d0:	20000f98 	.word	0x20000f98

080152d4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	460b      	mov	r3, r1
 80152de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80152e4:	4b0d      	ldr	r3, [pc, #52]	; (801531c <CDC_Transmit_HS+0x48>)
 80152e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152ea:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d001      	beq.n	80152fa <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 80152f6:	2301      	movs	r3, #1
 80152f8:	e00b      	b.n	8015312 <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80152fa:	887b      	ldrh	r3, [r7, #2]
 80152fc:	461a      	mov	r2, r3
 80152fe:	6879      	ldr	r1, [r7, #4]
 8015300:	4806      	ldr	r0, [pc, #24]	; (801531c <CDC_Transmit_HS+0x48>)
 8015302:	f7f9 fd77 	bl	800edf4 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8015306:	4805      	ldr	r0, [pc, #20]	; (801531c <CDC_Transmit_HS+0x48>)
 8015308:	f7f9 fdb4 	bl	800ee74 <USBD_CDC_TransmitPacket>
 801530c:	4603      	mov	r3, r0
 801530e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8015310:	7bfb      	ldrb	r3, [r7, #15]
}
 8015312:	4618      	mov	r0, r3
 8015314:	3710      	adds	r7, #16
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}
 801531a:	bf00      	nop
 801531c:	20000f98 	.word	0x20000f98

08015320 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015320:	b480      	push	{r7}
 8015322:	b087      	sub	sp, #28
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	4613      	mov	r3, r2
 801532c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801532e:	2300      	movs	r3, #0
 8015330:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8015332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015336:	4618      	mov	r0, r3
 8015338:	371c      	adds	r7, #28
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr
	...

08015344 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	4603      	mov	r3, r0
 801534c:	6039      	str	r1, [r7, #0]
 801534e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	2212      	movs	r2, #18
 8015354:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8015356:	4b03      	ldr	r3, [pc, #12]	; (8015364 <USBD_HS_DeviceDescriptor+0x20>)
}
 8015358:	4618      	mov	r0, r3
 801535a:	370c      	adds	r7, #12
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr
 8015364:	200000ec 	.word	0x200000ec

08015368 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015368:	b480      	push	{r7}
 801536a:	b083      	sub	sp, #12
 801536c:	af00      	add	r7, sp, #0
 801536e:	4603      	mov	r3, r0
 8015370:	6039      	str	r1, [r7, #0]
 8015372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	2204      	movs	r2, #4
 8015378:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801537a:	4b03      	ldr	r3, [pc, #12]	; (8015388 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801537c:	4618      	mov	r0, r3
 801537e:	370c      	adds	r7, #12
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr
 8015388:	2000010c 	.word	0x2000010c

0801538c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	4603      	mov	r3, r0
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015398:	79fb      	ldrb	r3, [r7, #7]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d105      	bne.n	80153aa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801539e:	683a      	ldr	r2, [r7, #0]
 80153a0:	4907      	ldr	r1, [pc, #28]	; (80153c0 <USBD_HS_ProductStrDescriptor+0x34>)
 80153a2:	4808      	ldr	r0, [pc, #32]	; (80153c4 <USBD_HS_ProductStrDescriptor+0x38>)
 80153a4:	f7fb f818 	bl	80103d8 <USBD_GetString>
 80153a8:	e004      	b.n	80153b4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80153aa:	683a      	ldr	r2, [r7, #0]
 80153ac:	4904      	ldr	r1, [pc, #16]	; (80153c0 <USBD_HS_ProductStrDescriptor+0x34>)
 80153ae:	4805      	ldr	r0, [pc, #20]	; (80153c4 <USBD_HS_ProductStrDescriptor+0x38>)
 80153b0:	f7fb f812 	bl	80103d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153b4:	4b02      	ldr	r3, [pc, #8]	; (80153c0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3708      	adds	r7, #8
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	20002274 	.word	0x20002274
 80153c4:	08019934 	.word	0x08019934

080153c8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b082      	sub	sp, #8
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	4603      	mov	r3, r0
 80153d0:	6039      	str	r1, [r7, #0]
 80153d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80153d4:	683a      	ldr	r2, [r7, #0]
 80153d6:	4904      	ldr	r1, [pc, #16]	; (80153e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80153d8:	4804      	ldr	r0, [pc, #16]	; (80153ec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80153da:	f7fa fffd 	bl	80103d8 <USBD_GetString>
  return USBD_StrDesc;
 80153de:	4b02      	ldr	r3, [pc, #8]	; (80153e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3708      	adds	r7, #8
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	20002274 	.word	0x20002274
 80153ec:	0801994c 	.word	0x0801994c

080153f0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	4603      	mov	r3, r0
 80153f8:	6039      	str	r1, [r7, #0]
 80153fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	221a      	movs	r2, #26
 8015400:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015402:	f000 f855 	bl	80154b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015406:	4b02      	ldr	r3, [pc, #8]	; (8015410 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8015408:	4618      	mov	r0, r3
 801540a:	3708      	adds	r7, #8
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}
 8015410:	20000110 	.word	0x20000110

08015414 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	4603      	mov	r3, r0
 801541c:	6039      	str	r1, [r7, #0]
 801541e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015420:	79fb      	ldrb	r3, [r7, #7]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d105      	bne.n	8015432 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015426:	683a      	ldr	r2, [r7, #0]
 8015428:	4907      	ldr	r1, [pc, #28]	; (8015448 <USBD_HS_ConfigStrDescriptor+0x34>)
 801542a:	4808      	ldr	r0, [pc, #32]	; (801544c <USBD_HS_ConfigStrDescriptor+0x38>)
 801542c:	f7fa ffd4 	bl	80103d8 <USBD_GetString>
 8015430:	e004      	b.n	801543c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015432:	683a      	ldr	r2, [r7, #0]
 8015434:	4904      	ldr	r1, [pc, #16]	; (8015448 <USBD_HS_ConfigStrDescriptor+0x34>)
 8015436:	4805      	ldr	r0, [pc, #20]	; (801544c <USBD_HS_ConfigStrDescriptor+0x38>)
 8015438:	f7fa ffce 	bl	80103d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801543c:	4b02      	ldr	r3, [pc, #8]	; (8015448 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801543e:	4618      	mov	r0, r3
 8015440:	3708      	adds	r7, #8
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
 8015446:	bf00      	nop
 8015448:	20002274 	.word	0x20002274
 801544c:	08019960 	.word	0x08019960

08015450 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	4603      	mov	r3, r0
 8015458:	6039      	str	r1, [r7, #0]
 801545a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801545c:	79fb      	ldrb	r3, [r7, #7]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d105      	bne.n	801546e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015462:	683a      	ldr	r2, [r7, #0]
 8015464:	4907      	ldr	r1, [pc, #28]	; (8015484 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015466:	4808      	ldr	r0, [pc, #32]	; (8015488 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015468:	f7fa ffb6 	bl	80103d8 <USBD_GetString>
 801546c:	e004      	b.n	8015478 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801546e:	683a      	ldr	r2, [r7, #0]
 8015470:	4904      	ldr	r1, [pc, #16]	; (8015484 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015472:	4805      	ldr	r0, [pc, #20]	; (8015488 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015474:	f7fa ffb0 	bl	80103d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015478:	4b02      	ldr	r3, [pc, #8]	; (8015484 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801547a:	4618      	mov	r0, r3
 801547c:	3708      	adds	r7, #8
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	20002274 	.word	0x20002274
 8015488:	0801996c 	.word	0x0801996c

0801548c <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
 8015492:	4603      	mov	r3, r0
 8015494:	6039      	str	r1, [r7, #0]
 8015496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	220c      	movs	r2, #12
 801549c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 801549e:	4b03      	ldr	r3, [pc, #12]	; (80154ac <USBD_HS_USR_BOSDescriptor+0x20>)
}
 80154a0:	4618      	mov	r0, r3
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr
 80154ac:	20000100 	.word	0x20000100

080154b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80154b6:	4b0f      	ldr	r3, [pc, #60]	; (80154f4 <Get_SerialNum+0x44>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80154bc:	4b0e      	ldr	r3, [pc, #56]	; (80154f8 <Get_SerialNum+0x48>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80154c2:	4b0e      	ldr	r3, [pc, #56]	; (80154fc <Get_SerialNum+0x4c>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	4413      	add	r3, r2
 80154ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d009      	beq.n	80154ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80154d6:	2208      	movs	r2, #8
 80154d8:	4909      	ldr	r1, [pc, #36]	; (8015500 <Get_SerialNum+0x50>)
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f000 f814 	bl	8015508 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80154e0:	2204      	movs	r2, #4
 80154e2:	4908      	ldr	r1, [pc, #32]	; (8015504 <Get_SerialNum+0x54>)
 80154e4:	68b8      	ldr	r0, [r7, #8]
 80154e6:	f000 f80f 	bl	8015508 <IntToUnicode>
  }
}
 80154ea:	bf00      	nop
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	1ff0f420 	.word	0x1ff0f420
 80154f8:	1ff0f424 	.word	0x1ff0f424
 80154fc:	1ff0f428 	.word	0x1ff0f428
 8015500:	20000112 	.word	0x20000112
 8015504:	20000122 	.word	0x20000122

08015508 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015508:	b480      	push	{r7}
 801550a:	b087      	sub	sp, #28
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	4613      	mov	r3, r2
 8015514:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015516:	2300      	movs	r3, #0
 8015518:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801551a:	2300      	movs	r3, #0
 801551c:	75fb      	strb	r3, [r7, #23]
 801551e:	e027      	b.n	8015570 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	0f1b      	lsrs	r3, r3, #28
 8015524:	2b09      	cmp	r3, #9
 8015526:	d80b      	bhi.n	8015540 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	0f1b      	lsrs	r3, r3, #28
 801552c:	b2da      	uxtb	r2, r3
 801552e:	7dfb      	ldrb	r3, [r7, #23]
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4619      	mov	r1, r3
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	440b      	add	r3, r1
 8015538:	3230      	adds	r2, #48	; 0x30
 801553a:	b2d2      	uxtb	r2, r2
 801553c:	701a      	strb	r2, [r3, #0]
 801553e:	e00a      	b.n	8015556 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	0f1b      	lsrs	r3, r3, #28
 8015544:	b2da      	uxtb	r2, r3
 8015546:	7dfb      	ldrb	r3, [r7, #23]
 8015548:	005b      	lsls	r3, r3, #1
 801554a:	4619      	mov	r1, r3
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	440b      	add	r3, r1
 8015550:	3237      	adds	r2, #55	; 0x37
 8015552:	b2d2      	uxtb	r2, r2
 8015554:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	011b      	lsls	r3, r3, #4
 801555a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801555c:	7dfb      	ldrb	r3, [r7, #23]
 801555e:	005b      	lsls	r3, r3, #1
 8015560:	3301      	adds	r3, #1
 8015562:	68ba      	ldr	r2, [r7, #8]
 8015564:	4413      	add	r3, r2
 8015566:	2200      	movs	r2, #0
 8015568:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801556a:	7dfb      	ldrb	r3, [r7, #23]
 801556c:	3301      	adds	r3, #1
 801556e:	75fb      	strb	r3, [r7, #23]
 8015570:	7dfa      	ldrb	r2, [r7, #23]
 8015572:	79fb      	ldrb	r3, [r7, #7]
 8015574:	429a      	cmp	r2, r3
 8015576:	d3d3      	bcc.n	8015520 <IntToUnicode+0x18>
  }
}
 8015578:	bf00      	nop
 801557a:	bf00      	nop
 801557c:	371c      	adds	r7, #28
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
	...

08015588 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b0aa      	sub	sp, #168	; 0xa8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015590:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015594:	2200      	movs	r2, #0
 8015596:	601a      	str	r2, [r3, #0]
 8015598:	605a      	str	r2, [r3, #4]
 801559a:	609a      	str	r2, [r3, #8]
 801559c:	60da      	str	r2, [r3, #12]
 801559e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80155a0:	f107 0310 	add.w	r3, r7, #16
 80155a4:	2284      	movs	r2, #132	; 0x84
 80155a6:	2100      	movs	r1, #0
 80155a8:	4618      	mov	r0, r3
 80155aa:	f000 febb 	bl	8016324 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	4a26      	ldr	r2, [pc, #152]	; (801564c <HAL_PCD_MspInit+0xc4>)
 80155b4:	4293      	cmp	r3, r2
 80155b6:	d145      	bne.n	8015644 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80155b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80155bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80155be:	2300      	movs	r3, #0
 80155c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80155c4:	f107 0310 	add.w	r3, r7, #16
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7f2 fd1b 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d001      	beq.n	80155d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80155d4:	f7ed f9b8 	bl	8002948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80155d8:	4b1d      	ldr	r3, [pc, #116]	; (8015650 <HAL_PCD_MspInit+0xc8>)
 80155da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155dc:	4a1c      	ldr	r2, [pc, #112]	; (8015650 <HAL_PCD_MspInit+0xc8>)
 80155de:	f043 0302 	orr.w	r3, r3, #2
 80155e2:	6313      	str	r3, [r2, #48]	; 0x30
 80155e4:	4b1a      	ldr	r3, [pc, #104]	; (8015650 <HAL_PCD_MspInit+0xc8>)
 80155e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155e8:	f003 0302 	and.w	r3, r3, #2
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80155f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80155f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80155f8:	2302      	movs	r3, #2
 80155fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155fe:	2300      	movs	r3, #0
 8015600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015604:	2303      	movs	r3, #3
 8015606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801560a:	230c      	movs	r3, #12
 801560c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015610:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015614:	4619      	mov	r1, r3
 8015616:	480f      	ldr	r0, [pc, #60]	; (8015654 <HAL_PCD_MspInit+0xcc>)
 8015618:	f7ee fdfa 	bl	8004210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801561c:	4b0c      	ldr	r3, [pc, #48]	; (8015650 <HAL_PCD_MspInit+0xc8>)
 801561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015620:	4a0b      	ldr	r2, [pc, #44]	; (8015650 <HAL_PCD_MspInit+0xc8>)
 8015622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015626:	6313      	str	r3, [r2, #48]	; 0x30
 8015628:	4b09      	ldr	r3, [pc, #36]	; (8015650 <HAL_PCD_MspInit+0xc8>)
 801562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801562c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015630:	60bb      	str	r3, [r7, #8]
 8015632:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8015634:	2200      	movs	r2, #0
 8015636:	2100      	movs	r1, #0
 8015638:	204d      	movs	r0, #77	; 0x4d
 801563a:	f7ee fa0c 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801563e:	204d      	movs	r0, #77	; 0x4d
 8015640:	f7ee fa25 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8015644:	bf00      	nop
 8015646:	37a8      	adds	r7, #168	; 0xa8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	40040000 	.word	0x40040000
 8015650:	40023800 	.word	0x40023800
 8015654:	40020400 	.word	0x40020400

08015658 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b082      	sub	sp, #8
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801566c:	4619      	mov	r1, r3
 801566e:	4610      	mov	r0, r2
 8015670:	f7f9 fd29 	bl	800f0c6 <USBD_LL_SetupStage>
}
 8015674:	bf00      	nop
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	460b      	mov	r3, r1
 8015686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801568e:	78fa      	ldrb	r2, [r7, #3]
 8015690:	6879      	ldr	r1, [r7, #4]
 8015692:	4613      	mov	r3, r2
 8015694:	00db      	lsls	r3, r3, #3
 8015696:	4413      	add	r3, r2
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	440b      	add	r3, r1
 801569c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	78fb      	ldrb	r3, [r7, #3]
 80156a4:	4619      	mov	r1, r3
 80156a6:	f7f9 fd63 	bl	800f170 <USBD_LL_DataOutStage>
}
 80156aa:	bf00      	nop
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b082      	sub	sp, #8
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	460b      	mov	r3, r1
 80156bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80156c4:	78fa      	ldrb	r2, [r7, #3]
 80156c6:	6879      	ldr	r1, [r7, #4]
 80156c8:	4613      	mov	r3, r2
 80156ca:	00db      	lsls	r3, r3, #3
 80156cc:	4413      	add	r3, r2
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	440b      	add	r3, r1
 80156d2:	334c      	adds	r3, #76	; 0x4c
 80156d4:	681a      	ldr	r2, [r3, #0]
 80156d6:	78fb      	ldrb	r3, [r7, #3]
 80156d8:	4619      	mov	r1, r3
 80156da:	f7f9 fdfc 	bl	800f2d6 <USBD_LL_DataInStage>
}
 80156de:	bf00      	nop
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b082      	sub	sp, #8
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7f9 ff30 	bl	800f55a <USBD_LL_SOF>
}
 80156fa:	bf00      	nop
 80156fc:	3708      	adds	r7, #8
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}

08015702 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015702:	b580      	push	{r7, lr}
 8015704:	b084      	sub	sp, #16
 8015706:	af00      	add	r7, sp, #0
 8015708:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801570a:	2301      	movs	r3, #1
 801570c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	68db      	ldr	r3, [r3, #12]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d102      	bne.n	801571c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015716:	2300      	movs	r3, #0
 8015718:	73fb      	strb	r3, [r7, #15]
 801571a:	e008      	b.n	801572e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	2b02      	cmp	r3, #2
 8015722:	d102      	bne.n	801572a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015724:	2301      	movs	r3, #1
 8015726:	73fb      	strb	r3, [r7, #15]
 8015728:	e001      	b.n	801572e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801572a:	f7ed f90d 	bl	8002948 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015734:	7bfa      	ldrb	r2, [r7, #15]
 8015736:	4611      	mov	r1, r2
 8015738:	4618      	mov	r0, r3
 801573a:	f7f9 fed0 	bl	800f4de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015744:	4618      	mov	r0, r3
 8015746:	f7f9 fe78 	bl	800f43a <USBD_LL_Reset>
}
 801574a:	bf00      	nop
 801574c:	3710      	adds	r7, #16
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}
	...

08015754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015762:	4618      	mov	r0, r3
 8015764:	f7f9 fecb 	bl	800f4fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	687a      	ldr	r2, [r7, #4]
 8015774:	6812      	ldr	r2, [r2, #0]
 8015776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801577a:	f043 0301 	orr.w	r3, r3, #1
 801577e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6a1b      	ldr	r3, [r3, #32]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d005      	beq.n	8015794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015788:	4b04      	ldr	r3, [pc, #16]	; (801579c <HAL_PCD_SuspendCallback+0x48>)
 801578a:	691b      	ldr	r3, [r3, #16]
 801578c:	4a03      	ldr	r2, [pc, #12]	; (801579c <HAL_PCD_SuspendCallback+0x48>)
 801578e:	f043 0306 	orr.w	r3, r3, #6
 8015792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015794:	bf00      	nop
 8015796:	3708      	adds	r7, #8
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}
 801579c:	e000ed00 	.word	0xe000ed00

080157a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f9 febb 	bl	800f52a <USBD_LL_Resume>
}
 80157b4:	bf00      	nop
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	460b      	mov	r3, r1
 80157c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80157ce:	78fa      	ldrb	r2, [r7, #3]
 80157d0:	4611      	mov	r1, r2
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7f9 ff13 	bl	800f5fe <USBD_LL_IsoOUTIncomplete>
}
 80157d8:	bf00      	nop
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	460b      	mov	r3, r1
 80157ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80157f2:	78fa      	ldrb	r2, [r7, #3]
 80157f4:	4611      	mov	r1, r2
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7f9 fecf 	bl	800f59a <USBD_LL_IsoINIncomplete>
}
 80157fc:	bf00      	nop
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015812:	4618      	mov	r0, r3
 8015814:	f7f9 ff25 	bl	800f662 <USBD_LL_DevConnected>
}
 8015818:	bf00      	nop
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801582e:	4618      	mov	r0, r3
 8015830:	f7f9 ff22 	bl	800f678 <USBD_LL_DevDisconnected>
}
 8015834:	bf00      	nop
 8015836:	3708      	adds	r7, #8
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	2b01      	cmp	r3, #1
 801584a:	d140      	bne.n	80158ce <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801584c:	4a22      	ldr	r2, [pc, #136]	; (80158d8 <USBD_LL_Init+0x9c>)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	4a20      	ldr	r2, [pc, #128]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015858:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801585c:	4b1e      	ldr	r3, [pc, #120]	; (80158d8 <USBD_LL_Init+0x9c>)
 801585e:	4a1f      	ldr	r2, [pc, #124]	; (80158dc <USBD_LL_Init+0xa0>)
 8015860:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8015862:	4b1d      	ldr	r3, [pc, #116]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015864:	2208      	movs	r2, #8
 8015866:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8015868:	4b1b      	ldr	r3, [pc, #108]	; (80158d8 <USBD_LL_Init+0x9c>)
 801586a:	2202      	movs	r2, #2
 801586c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801586e:	4b1a      	ldr	r3, [pc, #104]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015870:	2200      	movs	r2, #0
 8015872:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015874:	4b18      	ldr	r3, [pc, #96]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015876:	2202      	movs	r2, #2
 8015878:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801587a:	4b17      	ldr	r3, [pc, #92]	; (80158d8 <USBD_LL_Init+0x9c>)
 801587c:	2200      	movs	r2, #0
 801587e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015880:	4b15      	ldr	r3, [pc, #84]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015882:	2200      	movs	r2, #0
 8015884:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8015886:	4b14      	ldr	r3, [pc, #80]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015888:	2200      	movs	r2, #0
 801588a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801588c:	4b12      	ldr	r3, [pc, #72]	; (80158d8 <USBD_LL_Init+0x9c>)
 801588e:	2200      	movs	r2, #0
 8015890:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8015892:	4b11      	ldr	r3, [pc, #68]	; (80158d8 <USBD_LL_Init+0x9c>)
 8015894:	2200      	movs	r2, #0
 8015896:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8015898:	4b0f      	ldr	r3, [pc, #60]	; (80158d8 <USBD_LL_Init+0x9c>)
 801589a:	2200      	movs	r2, #0
 801589c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801589e:	480e      	ldr	r0, [pc, #56]	; (80158d8 <USBD_LL_Init+0x9c>)
 80158a0:	f7f0 fbd0 	bl	8006044 <HAL_PCD_Init>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80158aa:	f7ed f84d 	bl	8002948 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80158ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80158b2:	4809      	ldr	r0, [pc, #36]	; (80158d8 <USBD_LL_Init+0x9c>)
 80158b4:	f7f1 fe49 	bl	800754a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80158b8:	2280      	movs	r2, #128	; 0x80
 80158ba:	2100      	movs	r1, #0
 80158bc:	4806      	ldr	r0, [pc, #24]	; (80158d8 <USBD_LL_Init+0x9c>)
 80158be:	f7f1 fdfd 	bl	80074bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80158c2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80158c6:	2101      	movs	r1, #1
 80158c8:	4803      	ldr	r0, [pc, #12]	; (80158d8 <USBD_LL_Init+0x9c>)
 80158ca:	f7f1 fdf7 	bl	80074bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	20002474 	.word	0x20002474
 80158dc:	40040000 	.word	0x40040000

080158e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158e8:	2300      	movs	r3, #0
 80158ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158ec:	2300      	movs	r3, #0
 80158ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7f0 fcc8 	bl	800628c <HAL_PCD_Start>
 80158fc:	4603      	mov	r3, r0
 80158fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015900:	7bfb      	ldrb	r3, [r7, #15]
 8015902:	4618      	mov	r0, r3
 8015904:	f000 f97e 	bl	8015c04 <USBD_Get_USB_Status>
 8015908:	4603      	mov	r3, r0
 801590a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801590c:	7bbb      	ldrb	r3, [r7, #14]
}
 801590e:	4618      	mov	r0, r3
 8015910:	3710      	adds	r7, #16
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}

08015916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015916:	b580      	push	{r7, lr}
 8015918:	b084      	sub	sp, #16
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
 801591e:	4608      	mov	r0, r1
 8015920:	4611      	mov	r1, r2
 8015922:	461a      	mov	r2, r3
 8015924:	4603      	mov	r3, r0
 8015926:	70fb      	strb	r3, [r7, #3]
 8015928:	460b      	mov	r3, r1
 801592a:	70bb      	strb	r3, [r7, #2]
 801592c:	4613      	mov	r3, r2
 801592e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015930:	2300      	movs	r3, #0
 8015932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015934:	2300      	movs	r3, #0
 8015936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801593e:	78bb      	ldrb	r3, [r7, #2]
 8015940:	883a      	ldrh	r2, [r7, #0]
 8015942:	78f9      	ldrb	r1, [r7, #3]
 8015944:	f7f1 f9b5 	bl	8006cb2 <HAL_PCD_EP_Open>
 8015948:	4603      	mov	r3, r0
 801594a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801594c:	7bfb      	ldrb	r3, [r7, #15]
 801594e:	4618      	mov	r0, r3
 8015950:	f000 f958 	bl	8015c04 <USBD_Get_USB_Status>
 8015954:	4603      	mov	r3, r0
 8015956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015958:	7bbb      	ldrb	r3, [r7, #14]
}
 801595a:	4618      	mov	r0, r3
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}

08015962 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015962:	b580      	push	{r7, lr}
 8015964:	b084      	sub	sp, #16
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
 801596a:	460b      	mov	r3, r1
 801596c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801596e:	2300      	movs	r3, #0
 8015970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015972:	2300      	movs	r3, #0
 8015974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801597c:	78fa      	ldrb	r2, [r7, #3]
 801597e:	4611      	mov	r1, r2
 8015980:	4618      	mov	r0, r3
 8015982:	f7f1 f9fe 	bl	8006d82 <HAL_PCD_EP_Close>
 8015986:	4603      	mov	r3, r0
 8015988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801598a:	7bfb      	ldrb	r3, [r7, #15]
 801598c:	4618      	mov	r0, r3
 801598e:	f000 f939 	bl	8015c04 <USBD_Get_USB_Status>
 8015992:	4603      	mov	r3, r0
 8015994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015996:	7bbb      	ldrb	r3, [r7, #14]
}
 8015998:	4618      	mov	r0, r3
 801599a:	3710      	adds	r7, #16
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	460b      	mov	r3, r1
 80159aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ac:	2300      	movs	r3, #0
 80159ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159b0:	2300      	movs	r3, #0
 80159b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159ba:	78fa      	ldrb	r2, [r7, #3]
 80159bc:	4611      	mov	r1, r2
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f1 fad6 	bl	8006f70 <HAL_PCD_EP_SetStall>
 80159c4:	4603      	mov	r3, r0
 80159c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159c8:	7bfb      	ldrb	r3, [r7, #15]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 f91a 	bl	8015c04 <USBD_Get_USB_Status>
 80159d0:	4603      	mov	r3, r0
 80159d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3710      	adds	r7, #16
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}

080159de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159de:	b580      	push	{r7, lr}
 80159e0:	b084      	sub	sp, #16
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
 80159e6:	460b      	mov	r3, r1
 80159e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ea:	2300      	movs	r3, #0
 80159ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ee:	2300      	movs	r3, #0
 80159f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159f8:	78fa      	ldrb	r2, [r7, #3]
 80159fa:	4611      	mov	r1, r2
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7f1 fb1b 	bl	8007038 <HAL_PCD_EP_ClrStall>
 8015a02:	4603      	mov	r3, r0
 8015a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a06:	7bfb      	ldrb	r3, [r7, #15]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f000 f8fb 	bl	8015c04 <USBD_Get_USB_Status>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3710      	adds	r7, #16
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b085      	sub	sp, #20
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	460b      	mov	r3, r1
 8015a26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	da0b      	bge.n	8015a50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015a38:	78fb      	ldrb	r3, [r7, #3]
 8015a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a3e:	68f9      	ldr	r1, [r7, #12]
 8015a40:	4613      	mov	r3, r2
 8015a42:	00db      	lsls	r3, r3, #3
 8015a44:	4413      	add	r3, r2
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	440b      	add	r3, r1
 8015a4a:	333e      	adds	r3, #62	; 0x3e
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	e00b      	b.n	8015a68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015a50:	78fb      	ldrb	r3, [r7, #3]
 8015a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a56:	68f9      	ldr	r1, [r7, #12]
 8015a58:	4613      	mov	r3, r2
 8015a5a:	00db      	lsls	r3, r3, #3
 8015a5c:	4413      	add	r3, r2
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	440b      	add	r3, r1
 8015a62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015a66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3714      	adds	r7, #20
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b084      	sub	sp, #16
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a80:	2300      	movs	r3, #0
 8015a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a84:	2300      	movs	r3, #0
 8015a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a8e:	78fa      	ldrb	r2, [r7, #3]
 8015a90:	4611      	mov	r1, r2
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7f1 f8e8 	bl	8006c68 <HAL_PCD_SetAddress>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a9c:	7bfb      	ldrb	r3, [r7, #15]
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f000 f8b0 	bl	8015c04 <USBD_Get_USB_Status>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3710      	adds	r7, #16
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}

08015ab2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ab2:	b580      	push	{r7, lr}
 8015ab4:	b086      	sub	sp, #24
 8015ab6:	af00      	add	r7, sp, #0
 8015ab8:	60f8      	str	r0, [r7, #12]
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	603b      	str	r3, [r7, #0]
 8015abe:	460b      	mov	r3, r1
 8015ac0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015ad0:	7af9      	ldrb	r1, [r7, #11]
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	687a      	ldr	r2, [r7, #4]
 8015ad6:	f7f1 fa01 	bl	8006edc <HAL_PCD_EP_Transmit>
 8015ada:	4603      	mov	r3, r0
 8015adc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ade:	7dfb      	ldrb	r3, [r7, #23]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f000 f88f 	bl	8015c04 <USBD_Get_USB_Status>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3718      	adds	r7, #24
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	607a      	str	r2, [r7, #4]
 8015afe:	603b      	str	r3, [r7, #0]
 8015b00:	460b      	mov	r3, r1
 8015b02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b04:	2300      	movs	r3, #0
 8015b06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015b12:	7af9      	ldrb	r1, [r7, #11]
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	f7f1 f97d 	bl	8006e16 <HAL_PCD_EP_Receive>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b20:	7dfb      	ldrb	r3, [r7, #23]
 8015b22:	4618      	mov	r0, r3
 8015b24:	f000 f86e 	bl	8015c04 <USBD_Get_USB_Status>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3718      	adds	r7, #24
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b082      	sub	sp, #8
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	460b      	mov	r3, r1
 8015b40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015b48:	78fa      	ldrb	r2, [r7, #3]
 8015b4a:	4611      	mov	r1, r2
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7f1 f9ad 	bl	8006eac <HAL_PCD_EP_GetRxCount>
 8015b52:	4603      	mov	r3, r0
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3708      	adds	r7, #8
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}

08015b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	460b      	mov	r3, r1
 8015b66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015b68:	78fb      	ldrb	r3, [r7, #3]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d002      	beq.n	8015b74 <HAL_PCDEx_LPM_Callback+0x18>
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d01f      	beq.n	8015bb2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015b72:	e03b      	b.n	8015bec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	6a1b      	ldr	r3, [r3, #32]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d007      	beq.n	8015b8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015b7c:	f000 f83c 	bl	8015bf8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b80:	4b1c      	ldr	r3, [pc, #112]	; (8015bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8015b82:	691b      	ldr	r3, [r3, #16]
 8015b84:	4a1b      	ldr	r2, [pc, #108]	; (8015bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8015b86:	f023 0306 	bic.w	r3, r3, #6
 8015b8a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	6812      	ldr	r2, [r2, #0]
 8015b9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015b9e:	f023 0301 	bic.w	r3, r3, #1
 8015ba2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7f9 fcbd 	bl	800f52a <USBD_LL_Resume>
    break;
 8015bb0:	e01c      	b.n	8015bec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	6812      	ldr	r2, [r2, #0]
 8015bc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015bc4:	f043 0301 	orr.w	r3, r3, #1
 8015bc8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7f9 fc94 	bl	800f4fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	6a1b      	ldr	r3, [r3, #32]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d005      	beq.n	8015bea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015bde:	4b05      	ldr	r3, [pc, #20]	; (8015bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8015be0:	691b      	ldr	r3, [r3, #16]
 8015be2:	4a04      	ldr	r2, [pc, #16]	; (8015bf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8015be4:	f043 0306 	orr.w	r3, r3, #6
 8015be8:	6113      	str	r3, [r2, #16]
    break;
 8015bea:	bf00      	nop
}
 8015bec:	bf00      	nop
 8015bee:	3708      	adds	r7, #8
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}
 8015bf4:	e000ed00 	.word	0xe000ed00

08015bf8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015bfc:	f7ec fb20 	bl	8002240 <SystemClock_Config>
}
 8015c00:	bf00      	nop
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c04:	b480      	push	{r7}
 8015c06:	b085      	sub	sp, #20
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c12:	79fb      	ldrb	r3, [r7, #7]
 8015c14:	2b03      	cmp	r3, #3
 8015c16:	d817      	bhi.n	8015c48 <USBD_Get_USB_Status+0x44>
 8015c18:	a201      	add	r2, pc, #4	; (adr r2, 8015c20 <USBD_Get_USB_Status+0x1c>)
 8015c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c1e:	bf00      	nop
 8015c20:	08015c31 	.word	0x08015c31
 8015c24:	08015c37 	.word	0x08015c37
 8015c28:	08015c3d 	.word	0x08015c3d
 8015c2c:	08015c43 	.word	0x08015c43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c30:	2300      	movs	r3, #0
 8015c32:	73fb      	strb	r3, [r7, #15]
    break;
 8015c34:	e00b      	b.n	8015c4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c36:	2303      	movs	r3, #3
 8015c38:	73fb      	strb	r3, [r7, #15]
    break;
 8015c3a:	e008      	b.n	8015c4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c40:	e005      	b.n	8015c4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c42:	2303      	movs	r3, #3
 8015c44:	73fb      	strb	r3, [r7, #15]
    break;
 8015c46:	e002      	b.n	8015c4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c48:	2303      	movs	r3, #3
 8015c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c4c:	bf00      	nop
  }
  return usb_status;
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3714      	adds	r7, #20
 8015c54:	46bd      	mov	sp, r7
 8015c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5a:	4770      	bx	lr

08015c5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015c60:	2201      	movs	r2, #1
 8015c62:	490e      	ldr	r1, [pc, #56]	; (8015c9c <MX_USB_HOST_Init+0x40>)
 8015c64:	480e      	ldr	r0, [pc, #56]	; (8015ca0 <MX_USB_HOST_Init+0x44>)
 8015c66:	f7fb f833 	bl	8010cd0 <USBH_Init>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d001      	beq.n	8015c74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015c70:	f7ec fe6a 	bl	8002948 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015c74:	490b      	ldr	r1, [pc, #44]	; (8015ca4 <MX_USB_HOST_Init+0x48>)
 8015c76:	480a      	ldr	r0, [pc, #40]	; (8015ca0 <MX_USB_HOST_Init+0x44>)
 8015c78:	f7fb f8d7 	bl	8010e2a <USBH_RegisterClass>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d001      	beq.n	8015c86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015c82:	f7ec fe61 	bl	8002948 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015c86:	4806      	ldr	r0, [pc, #24]	; (8015ca0 <MX_USB_HOST_Init+0x44>)
 8015c88:	f7fb f95b 	bl	8010f42 <USBH_Start>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d001      	beq.n	8015c96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015c92:	f7ec fe59 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015c96:	bf00      	nop
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	08015cbd 	.word	0x08015cbd
 8015ca0:	2000297c 	.word	0x2000297c
 8015ca4:	20000098 	.word	0x20000098

08015ca8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8015cac:	4802      	ldr	r0, [pc, #8]	; (8015cb8 <MX_USB_HOST_Process+0x10>)
 8015cae:	f7fb f959 	bl	8010f64 <USBH_Process>
}
 8015cb2:	bf00      	nop
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	2000297c 	.word	0x2000297c

08015cbc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b083      	sub	sp, #12
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	460b      	mov	r3, r1
 8015cc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015cc8:	78fb      	ldrb	r3, [r7, #3]
 8015cca:	3b01      	subs	r3, #1
 8015ccc:	2b04      	cmp	r3, #4
 8015cce:	d819      	bhi.n	8015d04 <USBH_UserProcess+0x48>
 8015cd0:	a201      	add	r2, pc, #4	; (adr r2, 8015cd8 <USBH_UserProcess+0x1c>)
 8015cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cd6:	bf00      	nop
 8015cd8:	08015d05 	.word	0x08015d05
 8015cdc:	08015cf5 	.word	0x08015cf5
 8015ce0:	08015d05 	.word	0x08015d05
 8015ce4:	08015cfd 	.word	0x08015cfd
 8015ce8:	08015ced 	.word	0x08015ced
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015cec:	4b09      	ldr	r3, [pc, #36]	; (8015d14 <USBH_UserProcess+0x58>)
 8015cee:	2203      	movs	r2, #3
 8015cf0:	701a      	strb	r2, [r3, #0]
  break;
 8015cf2:	e008      	b.n	8015d06 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015cf4:	4b07      	ldr	r3, [pc, #28]	; (8015d14 <USBH_UserProcess+0x58>)
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	701a      	strb	r2, [r3, #0]
  break;
 8015cfa:	e004      	b.n	8015d06 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015cfc:	4b05      	ldr	r3, [pc, #20]	; (8015d14 <USBH_UserProcess+0x58>)
 8015cfe:	2201      	movs	r2, #1
 8015d00:	701a      	strb	r2, [r3, #0]
  break;
 8015d02:	e000      	b.n	8015d06 <USBH_UserProcess+0x4a>

  default:
  break;
 8015d04:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015d06:	bf00      	nop
 8015d08:	370c      	adds	r7, #12
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d10:	4770      	bx	lr
 8015d12:	bf00      	nop
 8015d14:	20002d54 	.word	0x20002d54

08015d18 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b0ac      	sub	sp, #176	; 0xb0
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015d20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015d24:	2200      	movs	r2, #0
 8015d26:	601a      	str	r2, [r3, #0]
 8015d28:	605a      	str	r2, [r3, #4]
 8015d2a:	609a      	str	r2, [r3, #8]
 8015d2c:	60da      	str	r2, [r3, #12]
 8015d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015d30:	f107 0318 	add.w	r3, r7, #24
 8015d34:	2284      	movs	r2, #132	; 0x84
 8015d36:	2100      	movs	r1, #0
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f000 faf3 	bl	8016324 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015d46:	d151      	bne.n	8015dec <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8015d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015d54:	f107 0318 	add.w	r3, r7, #24
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7f2 f953 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d001      	beq.n	8015d68 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8015d64:	f7ec fdf0 	bl	8002948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015d68:	4b22      	ldr	r3, [pc, #136]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d6c:	4a21      	ldr	r2, [pc, #132]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015d6e:	f043 0301 	orr.w	r3, r3, #1
 8015d72:	6313      	str	r3, [r2, #48]	; 0x30
 8015d74:	4b1f      	ldr	r3, [pc, #124]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d78:	f003 0301 	and.w	r3, r3, #1
 8015d7c:	617b      	str	r3, [r7, #20]
 8015d7e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8015d80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d88:	2302      	movs	r3, #2
 8015d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d94:	2303      	movs	r3, #3
 8015d96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015d9a:	230a      	movs	r3, #10
 8015d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015da0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015da4:	4619      	mov	r1, r3
 8015da6:	4814      	ldr	r0, [pc, #80]	; (8015df8 <HAL_HCD_MspInit+0xe0>)
 8015da8:	f7ee fa32 	bl	8004210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015dac:	4b11      	ldr	r3, [pc, #68]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015db0:	4a10      	ldr	r2, [pc, #64]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015db6:	6353      	str	r3, [r2, #52]	; 0x34
 8015db8:	4b0e      	ldr	r3, [pc, #56]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015dc0:	613b      	str	r3, [r7, #16]
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	4b0b      	ldr	r3, [pc, #44]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dc8:	4a0a      	ldr	r2, [pc, #40]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015dce:	6453      	str	r3, [r2, #68]	; 0x44
 8015dd0:	4b08      	ldr	r3, [pc, #32]	; (8015df4 <HAL_HCD_MspInit+0xdc>)
 8015dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015dd8:	60fb      	str	r3, [r7, #12]
 8015dda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015ddc:	2200      	movs	r2, #0
 8015dde:	2100      	movs	r1, #0
 8015de0:	2043      	movs	r0, #67	; 0x43
 8015de2:	f7ed fe38 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015de6:	2043      	movs	r0, #67	; 0x43
 8015de8:	f7ed fe51 	bl	8003a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015dec:	bf00      	nop
 8015dee:	37b0      	adds	r7, #176	; 0xb0
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	40023800 	.word	0x40023800
 8015df8:	40020000 	.word	0x40020000

08015dfc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b082      	sub	sp, #8
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7fb fc89 	bl	8011722 <USBH_LL_IncTimer>
}
 8015e10:	bf00      	nop
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7fb fcc1 	bl	80117ae <USBH_LL_Connect>
}
 8015e2c:	bf00      	nop
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015e42:	4618      	mov	r0, r3
 8015e44:	f7fb fcca 	bl	80117dc <USBH_LL_Disconnect>
}
 8015e48:	bf00      	nop
 8015e4a:	3708      	adds	r7, #8
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015e50:	b480      	push	{r7}
 8015e52:	b083      	sub	sp, #12
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	460b      	mov	r3, r1
 8015e5a:	70fb      	strb	r3, [r7, #3]
 8015e5c:	4613      	mov	r3, r2
 8015e5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8015e60:	bf00      	nop
 8015e62:	370c      	adds	r7, #12
 8015e64:	46bd      	mov	sp, r7
 8015e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6a:	4770      	bx	lr

08015e6c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fb fc7b 	bl	8011776 <USBH_LL_PortEnabled>
}
 8015e80:	bf00      	nop
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015e96:	4618      	mov	r0, r3
 8015e98:	f7fb fc7b 	bl	8011792 <USBH_LL_PortDisabled>
}
 8015e9c:	bf00      	nop
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d12a      	bne.n	8015f0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015eb6:	4a18      	ldr	r2, [pc, #96]	; (8015f18 <USBH_LL_Init+0x74>)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	4a15      	ldr	r2, [pc, #84]	; (8015f18 <USBH_LL_Init+0x74>)
 8015ec2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015ec6:	4b14      	ldr	r3, [pc, #80]	; (8015f18 <USBH_LL_Init+0x74>)
 8015ec8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015ecc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015ece:	4b12      	ldr	r3, [pc, #72]	; (8015f18 <USBH_LL_Init+0x74>)
 8015ed0:	2208      	movs	r2, #8
 8015ed2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015ed4:	4b10      	ldr	r3, [pc, #64]	; (8015f18 <USBH_LL_Init+0x74>)
 8015ed6:	2201      	movs	r2, #1
 8015ed8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015eda:	4b0f      	ldr	r3, [pc, #60]	; (8015f18 <USBH_LL_Init+0x74>)
 8015edc:	2200      	movs	r2, #0
 8015ede:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015ee0:	4b0d      	ldr	r3, [pc, #52]	; (8015f18 <USBH_LL_Init+0x74>)
 8015ee2:	2202      	movs	r2, #2
 8015ee4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ee6:	4b0c      	ldr	r3, [pc, #48]	; (8015f18 <USBH_LL_Init+0x74>)
 8015ee8:	2200      	movs	r2, #0
 8015eea:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015eec:	480a      	ldr	r0, [pc, #40]	; (8015f18 <USBH_LL_Init+0x74>)
 8015eee:	f7ee fb6e 	bl	80045ce <HAL_HCD_Init>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d001      	beq.n	8015efc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015ef8:	f7ec fd26 	bl	8002948 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015efc:	4806      	ldr	r0, [pc, #24]	; (8015f18 <USBH_LL_Init+0x74>)
 8015efe:	f7ee ff52 	bl	8004da6 <HAL_HCD_GetCurrentFrame>
 8015f02:	4603      	mov	r3, r0
 8015f04:	4619      	mov	r1, r3
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f7fb fbfc 	bl	8011704 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015f0c:	2300      	movs	r3, #0
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3708      	adds	r7, #8
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	20002d58 	.word	0x20002d58

08015f1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f24:	2300      	movs	r3, #0
 8015f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7ee fec1 	bl	8004cba <HAL_HCD_Start>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f3c:	7bfb      	ldrb	r3, [r7, #15]
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f000 f95c 	bl	80161fc <USBH_Get_USB_Status>
 8015f44:	4603      	mov	r3, r0
 8015f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015f52:	b580      	push	{r7, lr}
 8015f54:	b084      	sub	sp, #16
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7ee fec9 	bl	8004d00 <HAL_HCD_Stop>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f72:	7bfb      	ldrb	r3, [r7, #15]
 8015f74:	4618      	mov	r0, r3
 8015f76:	f000 f941 	bl	80161fc <USBH_Get_USB_Status>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}

08015f88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015f90:	2301      	movs	r3, #1
 8015f92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7ee ff11 	bl	8004dc2 <HAL_HCD_GetCurrentSpeed>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	2b02      	cmp	r3, #2
 8015fa4:	d00c      	beq.n	8015fc0 <USBH_LL_GetSpeed+0x38>
 8015fa6:	2b02      	cmp	r3, #2
 8015fa8:	d80d      	bhi.n	8015fc6 <USBH_LL_GetSpeed+0x3e>
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d002      	beq.n	8015fb4 <USBH_LL_GetSpeed+0x2c>
 8015fae:	2b01      	cmp	r3, #1
 8015fb0:	d003      	beq.n	8015fba <USBH_LL_GetSpeed+0x32>
 8015fb2:	e008      	b.n	8015fc6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8015fb8:	e008      	b.n	8015fcc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015fba:	2301      	movs	r3, #1
 8015fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8015fbe:	e005      	b.n	8015fcc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015fc0:	2302      	movs	r3, #2
 8015fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8015fc4:	e002      	b.n	8015fcc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8015fca:	bf00      	nop
  }
  return  speed;
 8015fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}

08015fd6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015fd6:	b580      	push	{r7, lr}
 8015fd8:	b084      	sub	sp, #16
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7ee fea4 	bl	8004d3a <HAL_HCD_ResetPort>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015ff6:	7bfb      	ldrb	r3, [r7, #15]
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f000 f8ff 	bl	80161fc <USBH_Get_USB_Status>
 8015ffe:	4603      	mov	r3, r0
 8016000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016002:	7bbb      	ldrb	r3, [r7, #14]
}
 8016004:	4618      	mov	r0, r3
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	460b      	mov	r3, r1
 8016016:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801601e:	78fa      	ldrb	r2, [r7, #3]
 8016020:	4611      	mov	r1, r2
 8016022:	4618      	mov	r0, r3
 8016024:	f7ee feab 	bl	8004d7e <HAL_HCD_HC_GetXferCount>
 8016028:	4603      	mov	r3, r0
}
 801602a:	4618      	mov	r0, r3
 801602c:	3708      	adds	r7, #8
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}

08016032 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016032:	b590      	push	{r4, r7, lr}
 8016034:	b089      	sub	sp, #36	; 0x24
 8016036:	af04      	add	r7, sp, #16
 8016038:	6078      	str	r0, [r7, #4]
 801603a:	4608      	mov	r0, r1
 801603c:	4611      	mov	r1, r2
 801603e:	461a      	mov	r2, r3
 8016040:	4603      	mov	r3, r0
 8016042:	70fb      	strb	r3, [r7, #3]
 8016044:	460b      	mov	r3, r1
 8016046:	70bb      	strb	r3, [r7, #2]
 8016048:	4613      	mov	r3, r2
 801604a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801604c:	2300      	movs	r3, #0
 801604e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016050:	2300      	movs	r3, #0
 8016052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801605a:	787c      	ldrb	r4, [r7, #1]
 801605c:	78ba      	ldrb	r2, [r7, #2]
 801605e:	78f9      	ldrb	r1, [r7, #3]
 8016060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016062:	9302      	str	r3, [sp, #8]
 8016064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	4623      	mov	r3, r4
 8016072:	f7ee fb0e 	bl	8004692 <HAL_HCD_HC_Init>
 8016076:	4603      	mov	r3, r0
 8016078:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801607a:	7bfb      	ldrb	r3, [r7, #15]
 801607c:	4618      	mov	r0, r3
 801607e:	f000 f8bd 	bl	80161fc <USBH_Get_USB_Status>
 8016082:	4603      	mov	r3, r0
 8016084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016086:	7bbb      	ldrb	r3, [r7, #14]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3714      	adds	r7, #20
 801608c:	46bd      	mov	sp, r7
 801608e:	bd90      	pop	{r4, r7, pc}

08016090 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	460b      	mov	r3, r1
 801609a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801609c:	2300      	movs	r3, #0
 801609e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80160a0:	2300      	movs	r3, #0
 80160a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80160aa:	78fa      	ldrb	r2, [r7, #3]
 80160ac:	4611      	mov	r1, r2
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7ee fb7e 	bl	80047b0 <HAL_HCD_HC_Halt>
 80160b4:	4603      	mov	r3, r0
 80160b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80160b8:	7bfb      	ldrb	r3, [r7, #15]
 80160ba:	4618      	mov	r0, r3
 80160bc:	f000 f89e 	bl	80161fc <USBH_Get_USB_Status>
 80160c0:	4603      	mov	r3, r0
 80160c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3710      	adds	r7, #16
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}

080160ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80160ce:	b590      	push	{r4, r7, lr}
 80160d0:	b089      	sub	sp, #36	; 0x24
 80160d2:	af04      	add	r7, sp, #16
 80160d4:	6078      	str	r0, [r7, #4]
 80160d6:	4608      	mov	r0, r1
 80160d8:	4611      	mov	r1, r2
 80160da:	461a      	mov	r2, r3
 80160dc:	4603      	mov	r3, r0
 80160de:	70fb      	strb	r3, [r7, #3]
 80160e0:	460b      	mov	r3, r1
 80160e2:	70bb      	strb	r3, [r7, #2]
 80160e4:	4613      	mov	r3, r2
 80160e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160e8:	2300      	movs	r3, #0
 80160ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80160ec:	2300      	movs	r3, #0
 80160ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80160f6:	787c      	ldrb	r4, [r7, #1]
 80160f8:	78ba      	ldrb	r2, [r7, #2]
 80160fa:	78f9      	ldrb	r1, [r7, #3]
 80160fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016100:	9303      	str	r3, [sp, #12]
 8016102:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016104:	9302      	str	r3, [sp, #8]
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	9301      	str	r3, [sp, #4]
 801610a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801610e:	9300      	str	r3, [sp, #0]
 8016110:	4623      	mov	r3, r4
 8016112:	f7ee fb71 	bl	80047f8 <HAL_HCD_HC_SubmitRequest>
 8016116:	4603      	mov	r3, r0
 8016118:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801611a:	7bfb      	ldrb	r3, [r7, #15]
 801611c:	4618      	mov	r0, r3
 801611e:	f000 f86d 	bl	80161fc <USBH_Get_USB_Status>
 8016122:	4603      	mov	r3, r0
 8016124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016126:	7bbb      	ldrb	r3, [r7, #14]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3714      	adds	r7, #20
 801612c:	46bd      	mov	sp, r7
 801612e:	bd90      	pop	{r4, r7, pc}

08016130 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	460b      	mov	r3, r1
 801613a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8016142:	78fa      	ldrb	r2, [r7, #3]
 8016144:	4611      	mov	r1, r2
 8016146:	4618      	mov	r0, r3
 8016148:	f7ee fe05 	bl	8004d56 <HAL_HCD_HC_GetURBState>
 801614c:	4603      	mov	r3, r0
}
 801614e:	4618      	mov	r0, r3
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b082      	sub	sp, #8
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
 801615e:	460b      	mov	r3, r1
 8016160:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8016168:	2b01      	cmp	r3, #1
 801616a:	d103      	bne.n	8016174 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801616c:	78fb      	ldrb	r3, [r7, #3]
 801616e:	4618      	mov	r0, r3
 8016170:	f000 f870 	bl	8016254 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016174:	20c8      	movs	r0, #200	; 0xc8
 8016176:	f7ed f8db 	bl	8003330 <HAL_Delay>
  return USBH_OK;
 801617a:	2300      	movs	r3, #0
}
 801617c:	4618      	mov	r0, r3
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	460b      	mov	r3, r1
 801618e:	70fb      	strb	r3, [r7, #3]
 8016190:	4613      	mov	r3, r2
 8016192:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801619a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801619c:	78fb      	ldrb	r3, [r7, #3]
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	212c      	movs	r1, #44	; 0x2c
 80161a2:	fb01 f303 	mul.w	r3, r1, r3
 80161a6:	4413      	add	r3, r2
 80161a8:	333b      	adds	r3, #59	; 0x3b
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d009      	beq.n	80161c4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80161b0:	78fb      	ldrb	r3, [r7, #3]
 80161b2:	68fa      	ldr	r2, [r7, #12]
 80161b4:	212c      	movs	r1, #44	; 0x2c
 80161b6:	fb01 f303 	mul.w	r3, r1, r3
 80161ba:	4413      	add	r3, r2
 80161bc:	3354      	adds	r3, #84	; 0x54
 80161be:	78ba      	ldrb	r2, [r7, #2]
 80161c0:	701a      	strb	r2, [r3, #0]
 80161c2:	e008      	b.n	80161d6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80161c4:	78fb      	ldrb	r3, [r7, #3]
 80161c6:	68fa      	ldr	r2, [r7, #12]
 80161c8:	212c      	movs	r1, #44	; 0x2c
 80161ca:	fb01 f303 	mul.w	r3, r1, r3
 80161ce:	4413      	add	r3, r2
 80161d0:	3355      	adds	r3, #85	; 0x55
 80161d2:	78ba      	ldrb	r2, [r7, #2]
 80161d4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80161d6:	2300      	movs	r3, #0
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3714      	adds	r7, #20
 80161dc:	46bd      	mov	sp, r7
 80161de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e2:	4770      	bx	lr

080161e4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f7ed f89f 	bl	8003330 <HAL_Delay>
}
 80161f2:	bf00      	nop
 80161f4:	3708      	adds	r7, #8
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
	...

080161fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b085      	sub	sp, #20
 8016200:	af00      	add	r7, sp, #0
 8016202:	4603      	mov	r3, r0
 8016204:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016206:	2300      	movs	r3, #0
 8016208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801620a:	79fb      	ldrb	r3, [r7, #7]
 801620c:	2b03      	cmp	r3, #3
 801620e:	d817      	bhi.n	8016240 <USBH_Get_USB_Status+0x44>
 8016210:	a201      	add	r2, pc, #4	; (adr r2, 8016218 <USBH_Get_USB_Status+0x1c>)
 8016212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016216:	bf00      	nop
 8016218:	08016229 	.word	0x08016229
 801621c:	0801622f 	.word	0x0801622f
 8016220:	08016235 	.word	0x08016235
 8016224:	0801623b 	.word	0x0801623b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016228:	2300      	movs	r3, #0
 801622a:	73fb      	strb	r3, [r7, #15]
    break;
 801622c:	e00b      	b.n	8016246 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801622e:	2302      	movs	r3, #2
 8016230:	73fb      	strb	r3, [r7, #15]
    break;
 8016232:	e008      	b.n	8016246 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016234:	2301      	movs	r3, #1
 8016236:	73fb      	strb	r3, [r7, #15]
    break;
 8016238:	e005      	b.n	8016246 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801623a:	2302      	movs	r3, #2
 801623c:	73fb      	strb	r3, [r7, #15]
    break;
 801623e:	e002      	b.n	8016246 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016240:	2302      	movs	r3, #2
 8016242:	73fb      	strb	r3, [r7, #15]
    break;
 8016244:	bf00      	nop
  }
  return usb_status;
 8016246:	7bfb      	ldrb	r3, [r7, #15]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3714      	adds	r7, #20
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr

08016254 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b084      	sub	sp, #16
 8016258:	af00      	add	r7, sp, #0
 801625a:	4603      	mov	r3, r0
 801625c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801625e:	79fb      	ldrb	r3, [r7, #7]
 8016260:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016262:	79fb      	ldrb	r3, [r7, #7]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d102      	bne.n	801626e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8016268:	2300      	movs	r3, #0
 801626a:	73fb      	strb	r3, [r7, #15]
 801626c:	e001      	b.n	8016272 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801626e:	2301      	movs	r3, #1
 8016270:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 8016272:	7bfb      	ldrb	r3, [r7, #15]
 8016274:	461a      	mov	r2, r3
 8016276:	2104      	movs	r1, #4
 8016278:	4803      	ldr	r0, [pc, #12]	; (8016288 <MX_DriverVbusFS+0x34>)
 801627a:	f7ee f975 	bl	8004568 <HAL_GPIO_WritePin>
}
 801627e:	bf00      	nop
 8016280:	3710      	adds	r7, #16
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	40022000 	.word	0x40022000

0801628c <atoi>:
 801628c:	220a      	movs	r2, #10
 801628e:	2100      	movs	r1, #0
 8016290:	f000 be4c 	b.w	8016f2c <strtol>

08016294 <__errno>:
 8016294:	4b01      	ldr	r3, [pc, #4]	; (801629c <__errno+0x8>)
 8016296:	6818      	ldr	r0, [r3, #0]
 8016298:	4770      	bx	lr
 801629a:	bf00      	nop
 801629c:	2000012c 	.word	0x2000012c

080162a0 <__libc_init_array>:
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	4d0d      	ldr	r5, [pc, #52]	; (80162d8 <__libc_init_array+0x38>)
 80162a4:	4c0d      	ldr	r4, [pc, #52]	; (80162dc <__libc_init_array+0x3c>)
 80162a6:	1b64      	subs	r4, r4, r5
 80162a8:	10a4      	asrs	r4, r4, #2
 80162aa:	2600      	movs	r6, #0
 80162ac:	42a6      	cmp	r6, r4
 80162ae:	d109      	bne.n	80162c4 <__libc_init_array+0x24>
 80162b0:	4d0b      	ldr	r5, [pc, #44]	; (80162e0 <__libc_init_array+0x40>)
 80162b2:	4c0c      	ldr	r4, [pc, #48]	; (80162e4 <__libc_init_array+0x44>)
 80162b4:	f002 ff96 	bl	80191e4 <_init>
 80162b8:	1b64      	subs	r4, r4, r5
 80162ba:	10a4      	asrs	r4, r4, #2
 80162bc:	2600      	movs	r6, #0
 80162be:	42a6      	cmp	r6, r4
 80162c0:	d105      	bne.n	80162ce <__libc_init_array+0x2e>
 80162c2:	bd70      	pop	{r4, r5, r6, pc}
 80162c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80162c8:	4798      	blx	r3
 80162ca:	3601      	adds	r6, #1
 80162cc:	e7ee      	b.n	80162ac <__libc_init_array+0xc>
 80162ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80162d2:	4798      	blx	r3
 80162d4:	3601      	adds	r6, #1
 80162d6:	e7f2      	b.n	80162be <__libc_init_array+0x1e>
 80162d8:	08019e14 	.word	0x08019e14
 80162dc:	08019e14 	.word	0x08019e14
 80162e0:	08019e14 	.word	0x08019e14
 80162e4:	08019e18 	.word	0x08019e18

080162e8 <malloc>:
 80162e8:	4b02      	ldr	r3, [pc, #8]	; (80162f4 <malloc+0xc>)
 80162ea:	4601      	mov	r1, r0
 80162ec:	6818      	ldr	r0, [r3, #0]
 80162ee:	f000 b88d 	b.w	801640c <_malloc_r>
 80162f2:	bf00      	nop
 80162f4:	2000012c 	.word	0x2000012c

080162f8 <free>:
 80162f8:	4b02      	ldr	r3, [pc, #8]	; (8016304 <free+0xc>)
 80162fa:	4601      	mov	r1, r0
 80162fc:	6818      	ldr	r0, [r3, #0]
 80162fe:	f000 b819 	b.w	8016334 <_free_r>
 8016302:	bf00      	nop
 8016304:	2000012c 	.word	0x2000012c

08016308 <memcpy>:
 8016308:	440a      	add	r2, r1
 801630a:	4291      	cmp	r1, r2
 801630c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016310:	d100      	bne.n	8016314 <memcpy+0xc>
 8016312:	4770      	bx	lr
 8016314:	b510      	push	{r4, lr}
 8016316:	f811 4b01 	ldrb.w	r4, [r1], #1
 801631a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801631e:	4291      	cmp	r1, r2
 8016320:	d1f9      	bne.n	8016316 <memcpy+0xe>
 8016322:	bd10      	pop	{r4, pc}

08016324 <memset>:
 8016324:	4402      	add	r2, r0
 8016326:	4603      	mov	r3, r0
 8016328:	4293      	cmp	r3, r2
 801632a:	d100      	bne.n	801632e <memset+0xa>
 801632c:	4770      	bx	lr
 801632e:	f803 1b01 	strb.w	r1, [r3], #1
 8016332:	e7f9      	b.n	8016328 <memset+0x4>

08016334 <_free_r>:
 8016334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016336:	2900      	cmp	r1, #0
 8016338:	d044      	beq.n	80163c4 <_free_r+0x90>
 801633a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801633e:	9001      	str	r0, [sp, #4]
 8016340:	2b00      	cmp	r3, #0
 8016342:	f1a1 0404 	sub.w	r4, r1, #4
 8016346:	bfb8      	it	lt
 8016348:	18e4      	addlt	r4, r4, r3
 801634a:	f001 fc77 	bl	8017c3c <__malloc_lock>
 801634e:	4a1e      	ldr	r2, [pc, #120]	; (80163c8 <_free_r+0x94>)
 8016350:	9801      	ldr	r0, [sp, #4]
 8016352:	6813      	ldr	r3, [r2, #0]
 8016354:	b933      	cbnz	r3, 8016364 <_free_r+0x30>
 8016356:	6063      	str	r3, [r4, #4]
 8016358:	6014      	str	r4, [r2, #0]
 801635a:	b003      	add	sp, #12
 801635c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016360:	f001 bc72 	b.w	8017c48 <__malloc_unlock>
 8016364:	42a3      	cmp	r3, r4
 8016366:	d908      	bls.n	801637a <_free_r+0x46>
 8016368:	6825      	ldr	r5, [r4, #0]
 801636a:	1961      	adds	r1, r4, r5
 801636c:	428b      	cmp	r3, r1
 801636e:	bf01      	itttt	eq
 8016370:	6819      	ldreq	r1, [r3, #0]
 8016372:	685b      	ldreq	r3, [r3, #4]
 8016374:	1949      	addeq	r1, r1, r5
 8016376:	6021      	streq	r1, [r4, #0]
 8016378:	e7ed      	b.n	8016356 <_free_r+0x22>
 801637a:	461a      	mov	r2, r3
 801637c:	685b      	ldr	r3, [r3, #4]
 801637e:	b10b      	cbz	r3, 8016384 <_free_r+0x50>
 8016380:	42a3      	cmp	r3, r4
 8016382:	d9fa      	bls.n	801637a <_free_r+0x46>
 8016384:	6811      	ldr	r1, [r2, #0]
 8016386:	1855      	adds	r5, r2, r1
 8016388:	42a5      	cmp	r5, r4
 801638a:	d10b      	bne.n	80163a4 <_free_r+0x70>
 801638c:	6824      	ldr	r4, [r4, #0]
 801638e:	4421      	add	r1, r4
 8016390:	1854      	adds	r4, r2, r1
 8016392:	42a3      	cmp	r3, r4
 8016394:	6011      	str	r1, [r2, #0]
 8016396:	d1e0      	bne.n	801635a <_free_r+0x26>
 8016398:	681c      	ldr	r4, [r3, #0]
 801639a:	685b      	ldr	r3, [r3, #4]
 801639c:	6053      	str	r3, [r2, #4]
 801639e:	4421      	add	r1, r4
 80163a0:	6011      	str	r1, [r2, #0]
 80163a2:	e7da      	b.n	801635a <_free_r+0x26>
 80163a4:	d902      	bls.n	80163ac <_free_r+0x78>
 80163a6:	230c      	movs	r3, #12
 80163a8:	6003      	str	r3, [r0, #0]
 80163aa:	e7d6      	b.n	801635a <_free_r+0x26>
 80163ac:	6825      	ldr	r5, [r4, #0]
 80163ae:	1961      	adds	r1, r4, r5
 80163b0:	428b      	cmp	r3, r1
 80163b2:	bf04      	itt	eq
 80163b4:	6819      	ldreq	r1, [r3, #0]
 80163b6:	685b      	ldreq	r3, [r3, #4]
 80163b8:	6063      	str	r3, [r4, #4]
 80163ba:	bf04      	itt	eq
 80163bc:	1949      	addeq	r1, r1, r5
 80163be:	6021      	streq	r1, [r4, #0]
 80163c0:	6054      	str	r4, [r2, #4]
 80163c2:	e7ca      	b.n	801635a <_free_r+0x26>
 80163c4:	b003      	add	sp, #12
 80163c6:	bd30      	pop	{r4, r5, pc}
 80163c8:	2000305c 	.word	0x2000305c

080163cc <sbrk_aligned>:
 80163cc:	b570      	push	{r4, r5, r6, lr}
 80163ce:	4e0e      	ldr	r6, [pc, #56]	; (8016408 <sbrk_aligned+0x3c>)
 80163d0:	460c      	mov	r4, r1
 80163d2:	6831      	ldr	r1, [r6, #0]
 80163d4:	4605      	mov	r5, r0
 80163d6:	b911      	cbnz	r1, 80163de <sbrk_aligned+0x12>
 80163d8:	f000 fcf6 	bl	8016dc8 <_sbrk_r>
 80163dc:	6030      	str	r0, [r6, #0]
 80163de:	4621      	mov	r1, r4
 80163e0:	4628      	mov	r0, r5
 80163e2:	f000 fcf1 	bl	8016dc8 <_sbrk_r>
 80163e6:	1c43      	adds	r3, r0, #1
 80163e8:	d00a      	beq.n	8016400 <sbrk_aligned+0x34>
 80163ea:	1cc4      	adds	r4, r0, #3
 80163ec:	f024 0403 	bic.w	r4, r4, #3
 80163f0:	42a0      	cmp	r0, r4
 80163f2:	d007      	beq.n	8016404 <sbrk_aligned+0x38>
 80163f4:	1a21      	subs	r1, r4, r0
 80163f6:	4628      	mov	r0, r5
 80163f8:	f000 fce6 	bl	8016dc8 <_sbrk_r>
 80163fc:	3001      	adds	r0, #1
 80163fe:	d101      	bne.n	8016404 <sbrk_aligned+0x38>
 8016400:	f04f 34ff 	mov.w	r4, #4294967295
 8016404:	4620      	mov	r0, r4
 8016406:	bd70      	pop	{r4, r5, r6, pc}
 8016408:	20003060 	.word	0x20003060

0801640c <_malloc_r>:
 801640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016410:	1ccd      	adds	r5, r1, #3
 8016412:	f025 0503 	bic.w	r5, r5, #3
 8016416:	3508      	adds	r5, #8
 8016418:	2d0c      	cmp	r5, #12
 801641a:	bf38      	it	cc
 801641c:	250c      	movcc	r5, #12
 801641e:	2d00      	cmp	r5, #0
 8016420:	4607      	mov	r7, r0
 8016422:	db01      	blt.n	8016428 <_malloc_r+0x1c>
 8016424:	42a9      	cmp	r1, r5
 8016426:	d905      	bls.n	8016434 <_malloc_r+0x28>
 8016428:	230c      	movs	r3, #12
 801642a:	603b      	str	r3, [r7, #0]
 801642c:	2600      	movs	r6, #0
 801642e:	4630      	mov	r0, r6
 8016430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016434:	4e2e      	ldr	r6, [pc, #184]	; (80164f0 <_malloc_r+0xe4>)
 8016436:	f001 fc01 	bl	8017c3c <__malloc_lock>
 801643a:	6833      	ldr	r3, [r6, #0]
 801643c:	461c      	mov	r4, r3
 801643e:	bb34      	cbnz	r4, 801648e <_malloc_r+0x82>
 8016440:	4629      	mov	r1, r5
 8016442:	4638      	mov	r0, r7
 8016444:	f7ff ffc2 	bl	80163cc <sbrk_aligned>
 8016448:	1c43      	adds	r3, r0, #1
 801644a:	4604      	mov	r4, r0
 801644c:	d14d      	bne.n	80164ea <_malloc_r+0xde>
 801644e:	6834      	ldr	r4, [r6, #0]
 8016450:	4626      	mov	r6, r4
 8016452:	2e00      	cmp	r6, #0
 8016454:	d140      	bne.n	80164d8 <_malloc_r+0xcc>
 8016456:	6823      	ldr	r3, [r4, #0]
 8016458:	4631      	mov	r1, r6
 801645a:	4638      	mov	r0, r7
 801645c:	eb04 0803 	add.w	r8, r4, r3
 8016460:	f000 fcb2 	bl	8016dc8 <_sbrk_r>
 8016464:	4580      	cmp	r8, r0
 8016466:	d13a      	bne.n	80164de <_malloc_r+0xd2>
 8016468:	6821      	ldr	r1, [r4, #0]
 801646a:	3503      	adds	r5, #3
 801646c:	1a6d      	subs	r5, r5, r1
 801646e:	f025 0503 	bic.w	r5, r5, #3
 8016472:	3508      	adds	r5, #8
 8016474:	2d0c      	cmp	r5, #12
 8016476:	bf38      	it	cc
 8016478:	250c      	movcc	r5, #12
 801647a:	4629      	mov	r1, r5
 801647c:	4638      	mov	r0, r7
 801647e:	f7ff ffa5 	bl	80163cc <sbrk_aligned>
 8016482:	3001      	adds	r0, #1
 8016484:	d02b      	beq.n	80164de <_malloc_r+0xd2>
 8016486:	6823      	ldr	r3, [r4, #0]
 8016488:	442b      	add	r3, r5
 801648a:	6023      	str	r3, [r4, #0]
 801648c:	e00e      	b.n	80164ac <_malloc_r+0xa0>
 801648e:	6822      	ldr	r2, [r4, #0]
 8016490:	1b52      	subs	r2, r2, r5
 8016492:	d41e      	bmi.n	80164d2 <_malloc_r+0xc6>
 8016494:	2a0b      	cmp	r2, #11
 8016496:	d916      	bls.n	80164c6 <_malloc_r+0xba>
 8016498:	1961      	adds	r1, r4, r5
 801649a:	42a3      	cmp	r3, r4
 801649c:	6025      	str	r5, [r4, #0]
 801649e:	bf18      	it	ne
 80164a0:	6059      	strne	r1, [r3, #4]
 80164a2:	6863      	ldr	r3, [r4, #4]
 80164a4:	bf08      	it	eq
 80164a6:	6031      	streq	r1, [r6, #0]
 80164a8:	5162      	str	r2, [r4, r5]
 80164aa:	604b      	str	r3, [r1, #4]
 80164ac:	4638      	mov	r0, r7
 80164ae:	f104 060b 	add.w	r6, r4, #11
 80164b2:	f001 fbc9 	bl	8017c48 <__malloc_unlock>
 80164b6:	f026 0607 	bic.w	r6, r6, #7
 80164ba:	1d23      	adds	r3, r4, #4
 80164bc:	1af2      	subs	r2, r6, r3
 80164be:	d0b6      	beq.n	801642e <_malloc_r+0x22>
 80164c0:	1b9b      	subs	r3, r3, r6
 80164c2:	50a3      	str	r3, [r4, r2]
 80164c4:	e7b3      	b.n	801642e <_malloc_r+0x22>
 80164c6:	6862      	ldr	r2, [r4, #4]
 80164c8:	42a3      	cmp	r3, r4
 80164ca:	bf0c      	ite	eq
 80164cc:	6032      	streq	r2, [r6, #0]
 80164ce:	605a      	strne	r2, [r3, #4]
 80164d0:	e7ec      	b.n	80164ac <_malloc_r+0xa0>
 80164d2:	4623      	mov	r3, r4
 80164d4:	6864      	ldr	r4, [r4, #4]
 80164d6:	e7b2      	b.n	801643e <_malloc_r+0x32>
 80164d8:	4634      	mov	r4, r6
 80164da:	6876      	ldr	r6, [r6, #4]
 80164dc:	e7b9      	b.n	8016452 <_malloc_r+0x46>
 80164de:	230c      	movs	r3, #12
 80164e0:	603b      	str	r3, [r7, #0]
 80164e2:	4638      	mov	r0, r7
 80164e4:	f001 fbb0 	bl	8017c48 <__malloc_unlock>
 80164e8:	e7a1      	b.n	801642e <_malloc_r+0x22>
 80164ea:	6025      	str	r5, [r4, #0]
 80164ec:	e7de      	b.n	80164ac <_malloc_r+0xa0>
 80164ee:	bf00      	nop
 80164f0:	2000305c 	.word	0x2000305c

080164f4 <__cvt>:
 80164f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164f8:	ec55 4b10 	vmov	r4, r5, d0
 80164fc:	2d00      	cmp	r5, #0
 80164fe:	460e      	mov	r6, r1
 8016500:	4619      	mov	r1, r3
 8016502:	462b      	mov	r3, r5
 8016504:	bfbb      	ittet	lt
 8016506:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801650a:	461d      	movlt	r5, r3
 801650c:	2300      	movge	r3, #0
 801650e:	232d      	movlt	r3, #45	; 0x2d
 8016510:	700b      	strb	r3, [r1, #0]
 8016512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016514:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016518:	4691      	mov	r9, r2
 801651a:	f023 0820 	bic.w	r8, r3, #32
 801651e:	bfbc      	itt	lt
 8016520:	4622      	movlt	r2, r4
 8016522:	4614      	movlt	r4, r2
 8016524:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016528:	d005      	beq.n	8016536 <__cvt+0x42>
 801652a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801652e:	d100      	bne.n	8016532 <__cvt+0x3e>
 8016530:	3601      	adds	r6, #1
 8016532:	2102      	movs	r1, #2
 8016534:	e000      	b.n	8016538 <__cvt+0x44>
 8016536:	2103      	movs	r1, #3
 8016538:	ab03      	add	r3, sp, #12
 801653a:	9301      	str	r3, [sp, #4]
 801653c:	ab02      	add	r3, sp, #8
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	ec45 4b10 	vmov	d0, r4, r5
 8016544:	4653      	mov	r3, sl
 8016546:	4632      	mov	r2, r6
 8016548:	f000 fd86 	bl	8017058 <_dtoa_r>
 801654c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016550:	4607      	mov	r7, r0
 8016552:	d102      	bne.n	801655a <__cvt+0x66>
 8016554:	f019 0f01 	tst.w	r9, #1
 8016558:	d022      	beq.n	80165a0 <__cvt+0xac>
 801655a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801655e:	eb07 0906 	add.w	r9, r7, r6
 8016562:	d110      	bne.n	8016586 <__cvt+0x92>
 8016564:	783b      	ldrb	r3, [r7, #0]
 8016566:	2b30      	cmp	r3, #48	; 0x30
 8016568:	d10a      	bne.n	8016580 <__cvt+0x8c>
 801656a:	2200      	movs	r2, #0
 801656c:	2300      	movs	r3, #0
 801656e:	4620      	mov	r0, r4
 8016570:	4629      	mov	r1, r5
 8016572:	f7ea fac9 	bl	8000b08 <__aeabi_dcmpeq>
 8016576:	b918      	cbnz	r0, 8016580 <__cvt+0x8c>
 8016578:	f1c6 0601 	rsb	r6, r6, #1
 801657c:	f8ca 6000 	str.w	r6, [sl]
 8016580:	f8da 3000 	ldr.w	r3, [sl]
 8016584:	4499      	add	r9, r3
 8016586:	2200      	movs	r2, #0
 8016588:	2300      	movs	r3, #0
 801658a:	4620      	mov	r0, r4
 801658c:	4629      	mov	r1, r5
 801658e:	f7ea fabb 	bl	8000b08 <__aeabi_dcmpeq>
 8016592:	b108      	cbz	r0, 8016598 <__cvt+0xa4>
 8016594:	f8cd 900c 	str.w	r9, [sp, #12]
 8016598:	2230      	movs	r2, #48	; 0x30
 801659a:	9b03      	ldr	r3, [sp, #12]
 801659c:	454b      	cmp	r3, r9
 801659e:	d307      	bcc.n	80165b0 <__cvt+0xbc>
 80165a0:	9b03      	ldr	r3, [sp, #12]
 80165a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165a4:	1bdb      	subs	r3, r3, r7
 80165a6:	4638      	mov	r0, r7
 80165a8:	6013      	str	r3, [r2, #0]
 80165aa:	b004      	add	sp, #16
 80165ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165b0:	1c59      	adds	r1, r3, #1
 80165b2:	9103      	str	r1, [sp, #12]
 80165b4:	701a      	strb	r2, [r3, #0]
 80165b6:	e7f0      	b.n	801659a <__cvt+0xa6>

080165b8 <__exponent>:
 80165b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165ba:	4603      	mov	r3, r0
 80165bc:	2900      	cmp	r1, #0
 80165be:	bfb8      	it	lt
 80165c0:	4249      	neglt	r1, r1
 80165c2:	f803 2b02 	strb.w	r2, [r3], #2
 80165c6:	bfb4      	ite	lt
 80165c8:	222d      	movlt	r2, #45	; 0x2d
 80165ca:	222b      	movge	r2, #43	; 0x2b
 80165cc:	2909      	cmp	r1, #9
 80165ce:	7042      	strb	r2, [r0, #1]
 80165d0:	dd2a      	ble.n	8016628 <__exponent+0x70>
 80165d2:	f10d 0407 	add.w	r4, sp, #7
 80165d6:	46a4      	mov	ip, r4
 80165d8:	270a      	movs	r7, #10
 80165da:	46a6      	mov	lr, r4
 80165dc:	460a      	mov	r2, r1
 80165de:	fb91 f6f7 	sdiv	r6, r1, r7
 80165e2:	fb07 1516 	mls	r5, r7, r6, r1
 80165e6:	3530      	adds	r5, #48	; 0x30
 80165e8:	2a63      	cmp	r2, #99	; 0x63
 80165ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80165ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80165f2:	4631      	mov	r1, r6
 80165f4:	dcf1      	bgt.n	80165da <__exponent+0x22>
 80165f6:	3130      	adds	r1, #48	; 0x30
 80165f8:	f1ae 0502 	sub.w	r5, lr, #2
 80165fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016600:	1c44      	adds	r4, r0, #1
 8016602:	4629      	mov	r1, r5
 8016604:	4561      	cmp	r1, ip
 8016606:	d30a      	bcc.n	801661e <__exponent+0x66>
 8016608:	f10d 0209 	add.w	r2, sp, #9
 801660c:	eba2 020e 	sub.w	r2, r2, lr
 8016610:	4565      	cmp	r5, ip
 8016612:	bf88      	it	hi
 8016614:	2200      	movhi	r2, #0
 8016616:	4413      	add	r3, r2
 8016618:	1a18      	subs	r0, r3, r0
 801661a:	b003      	add	sp, #12
 801661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801661e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016622:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016626:	e7ed      	b.n	8016604 <__exponent+0x4c>
 8016628:	2330      	movs	r3, #48	; 0x30
 801662a:	3130      	adds	r1, #48	; 0x30
 801662c:	7083      	strb	r3, [r0, #2]
 801662e:	70c1      	strb	r1, [r0, #3]
 8016630:	1d03      	adds	r3, r0, #4
 8016632:	e7f1      	b.n	8016618 <__exponent+0x60>

08016634 <_printf_float>:
 8016634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016638:	ed2d 8b02 	vpush	{d8}
 801663c:	b08d      	sub	sp, #52	; 0x34
 801663e:	460c      	mov	r4, r1
 8016640:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016644:	4616      	mov	r6, r2
 8016646:	461f      	mov	r7, r3
 8016648:	4605      	mov	r5, r0
 801664a:	f001 faf3 	bl	8017c34 <_localeconv_r>
 801664e:	f8d0 a000 	ldr.w	sl, [r0]
 8016652:	4650      	mov	r0, sl
 8016654:	f7e9 fddc 	bl	8000210 <strlen>
 8016658:	2300      	movs	r3, #0
 801665a:	930a      	str	r3, [sp, #40]	; 0x28
 801665c:	6823      	ldr	r3, [r4, #0]
 801665e:	9305      	str	r3, [sp, #20]
 8016660:	f8d8 3000 	ldr.w	r3, [r8]
 8016664:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016668:	3307      	adds	r3, #7
 801666a:	f023 0307 	bic.w	r3, r3, #7
 801666e:	f103 0208 	add.w	r2, r3, #8
 8016672:	f8c8 2000 	str.w	r2, [r8]
 8016676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801667a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801667e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016682:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016686:	9307      	str	r3, [sp, #28]
 8016688:	f8cd 8018 	str.w	r8, [sp, #24]
 801668c:	ee08 0a10 	vmov	s16, r0
 8016690:	4b9f      	ldr	r3, [pc, #636]	; (8016910 <_printf_float+0x2dc>)
 8016692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016696:	f04f 32ff 	mov.w	r2, #4294967295
 801669a:	f7ea fa67 	bl	8000b6c <__aeabi_dcmpun>
 801669e:	bb88      	cbnz	r0, 8016704 <_printf_float+0xd0>
 80166a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166a4:	4b9a      	ldr	r3, [pc, #616]	; (8016910 <_printf_float+0x2dc>)
 80166a6:	f04f 32ff 	mov.w	r2, #4294967295
 80166aa:	f7ea fa41 	bl	8000b30 <__aeabi_dcmple>
 80166ae:	bb48      	cbnz	r0, 8016704 <_printf_float+0xd0>
 80166b0:	2200      	movs	r2, #0
 80166b2:	2300      	movs	r3, #0
 80166b4:	4640      	mov	r0, r8
 80166b6:	4649      	mov	r1, r9
 80166b8:	f7ea fa30 	bl	8000b1c <__aeabi_dcmplt>
 80166bc:	b110      	cbz	r0, 80166c4 <_printf_float+0x90>
 80166be:	232d      	movs	r3, #45	; 0x2d
 80166c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166c4:	4b93      	ldr	r3, [pc, #588]	; (8016914 <_printf_float+0x2e0>)
 80166c6:	4894      	ldr	r0, [pc, #592]	; (8016918 <_printf_float+0x2e4>)
 80166c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80166cc:	bf94      	ite	ls
 80166ce:	4698      	movls	r8, r3
 80166d0:	4680      	movhi	r8, r0
 80166d2:	2303      	movs	r3, #3
 80166d4:	6123      	str	r3, [r4, #16]
 80166d6:	9b05      	ldr	r3, [sp, #20]
 80166d8:	f023 0204 	bic.w	r2, r3, #4
 80166dc:	6022      	str	r2, [r4, #0]
 80166de:	f04f 0900 	mov.w	r9, #0
 80166e2:	9700      	str	r7, [sp, #0]
 80166e4:	4633      	mov	r3, r6
 80166e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80166e8:	4621      	mov	r1, r4
 80166ea:	4628      	mov	r0, r5
 80166ec:	f000 f9d8 	bl	8016aa0 <_printf_common>
 80166f0:	3001      	adds	r0, #1
 80166f2:	f040 8090 	bne.w	8016816 <_printf_float+0x1e2>
 80166f6:	f04f 30ff 	mov.w	r0, #4294967295
 80166fa:	b00d      	add	sp, #52	; 0x34
 80166fc:	ecbd 8b02 	vpop	{d8}
 8016700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016704:	4642      	mov	r2, r8
 8016706:	464b      	mov	r3, r9
 8016708:	4640      	mov	r0, r8
 801670a:	4649      	mov	r1, r9
 801670c:	f7ea fa2e 	bl	8000b6c <__aeabi_dcmpun>
 8016710:	b140      	cbz	r0, 8016724 <_printf_float+0xf0>
 8016712:	464b      	mov	r3, r9
 8016714:	2b00      	cmp	r3, #0
 8016716:	bfbc      	itt	lt
 8016718:	232d      	movlt	r3, #45	; 0x2d
 801671a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801671e:	487f      	ldr	r0, [pc, #508]	; (801691c <_printf_float+0x2e8>)
 8016720:	4b7f      	ldr	r3, [pc, #508]	; (8016920 <_printf_float+0x2ec>)
 8016722:	e7d1      	b.n	80166c8 <_printf_float+0x94>
 8016724:	6863      	ldr	r3, [r4, #4]
 8016726:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801672a:	9206      	str	r2, [sp, #24]
 801672c:	1c5a      	adds	r2, r3, #1
 801672e:	d13f      	bne.n	80167b0 <_printf_float+0x17c>
 8016730:	2306      	movs	r3, #6
 8016732:	6063      	str	r3, [r4, #4]
 8016734:	9b05      	ldr	r3, [sp, #20]
 8016736:	6861      	ldr	r1, [r4, #4]
 8016738:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801673c:	2300      	movs	r3, #0
 801673e:	9303      	str	r3, [sp, #12]
 8016740:	ab0a      	add	r3, sp, #40	; 0x28
 8016742:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016746:	ab09      	add	r3, sp, #36	; 0x24
 8016748:	ec49 8b10 	vmov	d0, r8, r9
 801674c:	9300      	str	r3, [sp, #0]
 801674e:	6022      	str	r2, [r4, #0]
 8016750:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016754:	4628      	mov	r0, r5
 8016756:	f7ff fecd 	bl	80164f4 <__cvt>
 801675a:	9b06      	ldr	r3, [sp, #24]
 801675c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801675e:	2b47      	cmp	r3, #71	; 0x47
 8016760:	4680      	mov	r8, r0
 8016762:	d108      	bne.n	8016776 <_printf_float+0x142>
 8016764:	1cc8      	adds	r0, r1, #3
 8016766:	db02      	blt.n	801676e <_printf_float+0x13a>
 8016768:	6863      	ldr	r3, [r4, #4]
 801676a:	4299      	cmp	r1, r3
 801676c:	dd41      	ble.n	80167f2 <_printf_float+0x1be>
 801676e:	f1ab 0b02 	sub.w	fp, fp, #2
 8016772:	fa5f fb8b 	uxtb.w	fp, fp
 8016776:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801677a:	d820      	bhi.n	80167be <_printf_float+0x18a>
 801677c:	3901      	subs	r1, #1
 801677e:	465a      	mov	r2, fp
 8016780:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016784:	9109      	str	r1, [sp, #36]	; 0x24
 8016786:	f7ff ff17 	bl	80165b8 <__exponent>
 801678a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801678c:	1813      	adds	r3, r2, r0
 801678e:	2a01      	cmp	r2, #1
 8016790:	4681      	mov	r9, r0
 8016792:	6123      	str	r3, [r4, #16]
 8016794:	dc02      	bgt.n	801679c <_printf_float+0x168>
 8016796:	6822      	ldr	r2, [r4, #0]
 8016798:	07d2      	lsls	r2, r2, #31
 801679a:	d501      	bpl.n	80167a0 <_printf_float+0x16c>
 801679c:	3301      	adds	r3, #1
 801679e:	6123      	str	r3, [r4, #16]
 80167a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d09c      	beq.n	80166e2 <_printf_float+0xae>
 80167a8:	232d      	movs	r3, #45	; 0x2d
 80167aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167ae:	e798      	b.n	80166e2 <_printf_float+0xae>
 80167b0:	9a06      	ldr	r2, [sp, #24]
 80167b2:	2a47      	cmp	r2, #71	; 0x47
 80167b4:	d1be      	bne.n	8016734 <_printf_float+0x100>
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1bc      	bne.n	8016734 <_printf_float+0x100>
 80167ba:	2301      	movs	r3, #1
 80167bc:	e7b9      	b.n	8016732 <_printf_float+0xfe>
 80167be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80167c2:	d118      	bne.n	80167f6 <_printf_float+0x1c2>
 80167c4:	2900      	cmp	r1, #0
 80167c6:	6863      	ldr	r3, [r4, #4]
 80167c8:	dd0b      	ble.n	80167e2 <_printf_float+0x1ae>
 80167ca:	6121      	str	r1, [r4, #16]
 80167cc:	b913      	cbnz	r3, 80167d4 <_printf_float+0x1a0>
 80167ce:	6822      	ldr	r2, [r4, #0]
 80167d0:	07d0      	lsls	r0, r2, #31
 80167d2:	d502      	bpl.n	80167da <_printf_float+0x1a6>
 80167d4:	3301      	adds	r3, #1
 80167d6:	440b      	add	r3, r1
 80167d8:	6123      	str	r3, [r4, #16]
 80167da:	65a1      	str	r1, [r4, #88]	; 0x58
 80167dc:	f04f 0900 	mov.w	r9, #0
 80167e0:	e7de      	b.n	80167a0 <_printf_float+0x16c>
 80167e2:	b913      	cbnz	r3, 80167ea <_printf_float+0x1b6>
 80167e4:	6822      	ldr	r2, [r4, #0]
 80167e6:	07d2      	lsls	r2, r2, #31
 80167e8:	d501      	bpl.n	80167ee <_printf_float+0x1ba>
 80167ea:	3302      	adds	r3, #2
 80167ec:	e7f4      	b.n	80167d8 <_printf_float+0x1a4>
 80167ee:	2301      	movs	r3, #1
 80167f0:	e7f2      	b.n	80167d8 <_printf_float+0x1a4>
 80167f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80167f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167f8:	4299      	cmp	r1, r3
 80167fa:	db05      	blt.n	8016808 <_printf_float+0x1d4>
 80167fc:	6823      	ldr	r3, [r4, #0]
 80167fe:	6121      	str	r1, [r4, #16]
 8016800:	07d8      	lsls	r0, r3, #31
 8016802:	d5ea      	bpl.n	80167da <_printf_float+0x1a6>
 8016804:	1c4b      	adds	r3, r1, #1
 8016806:	e7e7      	b.n	80167d8 <_printf_float+0x1a4>
 8016808:	2900      	cmp	r1, #0
 801680a:	bfd4      	ite	le
 801680c:	f1c1 0202 	rsble	r2, r1, #2
 8016810:	2201      	movgt	r2, #1
 8016812:	4413      	add	r3, r2
 8016814:	e7e0      	b.n	80167d8 <_printf_float+0x1a4>
 8016816:	6823      	ldr	r3, [r4, #0]
 8016818:	055a      	lsls	r2, r3, #21
 801681a:	d407      	bmi.n	801682c <_printf_float+0x1f8>
 801681c:	6923      	ldr	r3, [r4, #16]
 801681e:	4642      	mov	r2, r8
 8016820:	4631      	mov	r1, r6
 8016822:	4628      	mov	r0, r5
 8016824:	47b8      	blx	r7
 8016826:	3001      	adds	r0, #1
 8016828:	d12c      	bne.n	8016884 <_printf_float+0x250>
 801682a:	e764      	b.n	80166f6 <_printf_float+0xc2>
 801682c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016830:	f240 80e0 	bls.w	80169f4 <_printf_float+0x3c0>
 8016834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016838:	2200      	movs	r2, #0
 801683a:	2300      	movs	r3, #0
 801683c:	f7ea f964 	bl	8000b08 <__aeabi_dcmpeq>
 8016840:	2800      	cmp	r0, #0
 8016842:	d034      	beq.n	80168ae <_printf_float+0x27a>
 8016844:	4a37      	ldr	r2, [pc, #220]	; (8016924 <_printf_float+0x2f0>)
 8016846:	2301      	movs	r3, #1
 8016848:	4631      	mov	r1, r6
 801684a:	4628      	mov	r0, r5
 801684c:	47b8      	blx	r7
 801684e:	3001      	adds	r0, #1
 8016850:	f43f af51 	beq.w	80166f6 <_printf_float+0xc2>
 8016854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016858:	429a      	cmp	r2, r3
 801685a:	db02      	blt.n	8016862 <_printf_float+0x22e>
 801685c:	6823      	ldr	r3, [r4, #0]
 801685e:	07d8      	lsls	r0, r3, #31
 8016860:	d510      	bpl.n	8016884 <_printf_float+0x250>
 8016862:	ee18 3a10 	vmov	r3, s16
 8016866:	4652      	mov	r2, sl
 8016868:	4631      	mov	r1, r6
 801686a:	4628      	mov	r0, r5
 801686c:	47b8      	blx	r7
 801686e:	3001      	adds	r0, #1
 8016870:	f43f af41 	beq.w	80166f6 <_printf_float+0xc2>
 8016874:	f04f 0800 	mov.w	r8, #0
 8016878:	f104 091a 	add.w	r9, r4, #26
 801687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801687e:	3b01      	subs	r3, #1
 8016880:	4543      	cmp	r3, r8
 8016882:	dc09      	bgt.n	8016898 <_printf_float+0x264>
 8016884:	6823      	ldr	r3, [r4, #0]
 8016886:	079b      	lsls	r3, r3, #30
 8016888:	f100 8105 	bmi.w	8016a96 <_printf_float+0x462>
 801688c:	68e0      	ldr	r0, [r4, #12]
 801688e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016890:	4298      	cmp	r0, r3
 8016892:	bfb8      	it	lt
 8016894:	4618      	movlt	r0, r3
 8016896:	e730      	b.n	80166fa <_printf_float+0xc6>
 8016898:	2301      	movs	r3, #1
 801689a:	464a      	mov	r2, r9
 801689c:	4631      	mov	r1, r6
 801689e:	4628      	mov	r0, r5
 80168a0:	47b8      	blx	r7
 80168a2:	3001      	adds	r0, #1
 80168a4:	f43f af27 	beq.w	80166f6 <_printf_float+0xc2>
 80168a8:	f108 0801 	add.w	r8, r8, #1
 80168ac:	e7e6      	b.n	801687c <_printf_float+0x248>
 80168ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	dc39      	bgt.n	8016928 <_printf_float+0x2f4>
 80168b4:	4a1b      	ldr	r2, [pc, #108]	; (8016924 <_printf_float+0x2f0>)
 80168b6:	2301      	movs	r3, #1
 80168b8:	4631      	mov	r1, r6
 80168ba:	4628      	mov	r0, r5
 80168bc:	47b8      	blx	r7
 80168be:	3001      	adds	r0, #1
 80168c0:	f43f af19 	beq.w	80166f6 <_printf_float+0xc2>
 80168c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80168c8:	4313      	orrs	r3, r2
 80168ca:	d102      	bne.n	80168d2 <_printf_float+0x29e>
 80168cc:	6823      	ldr	r3, [r4, #0]
 80168ce:	07d9      	lsls	r1, r3, #31
 80168d0:	d5d8      	bpl.n	8016884 <_printf_float+0x250>
 80168d2:	ee18 3a10 	vmov	r3, s16
 80168d6:	4652      	mov	r2, sl
 80168d8:	4631      	mov	r1, r6
 80168da:	4628      	mov	r0, r5
 80168dc:	47b8      	blx	r7
 80168de:	3001      	adds	r0, #1
 80168e0:	f43f af09 	beq.w	80166f6 <_printf_float+0xc2>
 80168e4:	f04f 0900 	mov.w	r9, #0
 80168e8:	f104 0a1a 	add.w	sl, r4, #26
 80168ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ee:	425b      	negs	r3, r3
 80168f0:	454b      	cmp	r3, r9
 80168f2:	dc01      	bgt.n	80168f8 <_printf_float+0x2c4>
 80168f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168f6:	e792      	b.n	801681e <_printf_float+0x1ea>
 80168f8:	2301      	movs	r3, #1
 80168fa:	4652      	mov	r2, sl
 80168fc:	4631      	mov	r1, r6
 80168fe:	4628      	mov	r0, r5
 8016900:	47b8      	blx	r7
 8016902:	3001      	adds	r0, #1
 8016904:	f43f aef7 	beq.w	80166f6 <_printf_float+0xc2>
 8016908:	f109 0901 	add.w	r9, r9, #1
 801690c:	e7ee      	b.n	80168ec <_printf_float+0x2b8>
 801690e:	bf00      	nop
 8016910:	7fefffff 	.word	0x7fefffff
 8016914:	08019a34 	.word	0x08019a34
 8016918:	08019a38 	.word	0x08019a38
 801691c:	08019a40 	.word	0x08019a40
 8016920:	08019a3c 	.word	0x08019a3c
 8016924:	08019a44 	.word	0x08019a44
 8016928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801692a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801692c:	429a      	cmp	r2, r3
 801692e:	bfa8      	it	ge
 8016930:	461a      	movge	r2, r3
 8016932:	2a00      	cmp	r2, #0
 8016934:	4691      	mov	r9, r2
 8016936:	dc37      	bgt.n	80169a8 <_printf_float+0x374>
 8016938:	f04f 0b00 	mov.w	fp, #0
 801693c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016940:	f104 021a 	add.w	r2, r4, #26
 8016944:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016946:	9305      	str	r3, [sp, #20]
 8016948:	eba3 0309 	sub.w	r3, r3, r9
 801694c:	455b      	cmp	r3, fp
 801694e:	dc33      	bgt.n	80169b8 <_printf_float+0x384>
 8016950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016954:	429a      	cmp	r2, r3
 8016956:	db3b      	blt.n	80169d0 <_printf_float+0x39c>
 8016958:	6823      	ldr	r3, [r4, #0]
 801695a:	07da      	lsls	r2, r3, #31
 801695c:	d438      	bmi.n	80169d0 <_printf_float+0x39c>
 801695e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016960:	9a05      	ldr	r2, [sp, #20]
 8016962:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016964:	1a9a      	subs	r2, r3, r2
 8016966:	eba3 0901 	sub.w	r9, r3, r1
 801696a:	4591      	cmp	r9, r2
 801696c:	bfa8      	it	ge
 801696e:	4691      	movge	r9, r2
 8016970:	f1b9 0f00 	cmp.w	r9, #0
 8016974:	dc35      	bgt.n	80169e2 <_printf_float+0x3ae>
 8016976:	f04f 0800 	mov.w	r8, #0
 801697a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801697e:	f104 0a1a 	add.w	sl, r4, #26
 8016982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016986:	1a9b      	subs	r3, r3, r2
 8016988:	eba3 0309 	sub.w	r3, r3, r9
 801698c:	4543      	cmp	r3, r8
 801698e:	f77f af79 	ble.w	8016884 <_printf_float+0x250>
 8016992:	2301      	movs	r3, #1
 8016994:	4652      	mov	r2, sl
 8016996:	4631      	mov	r1, r6
 8016998:	4628      	mov	r0, r5
 801699a:	47b8      	blx	r7
 801699c:	3001      	adds	r0, #1
 801699e:	f43f aeaa 	beq.w	80166f6 <_printf_float+0xc2>
 80169a2:	f108 0801 	add.w	r8, r8, #1
 80169a6:	e7ec      	b.n	8016982 <_printf_float+0x34e>
 80169a8:	4613      	mov	r3, r2
 80169aa:	4631      	mov	r1, r6
 80169ac:	4642      	mov	r2, r8
 80169ae:	4628      	mov	r0, r5
 80169b0:	47b8      	blx	r7
 80169b2:	3001      	adds	r0, #1
 80169b4:	d1c0      	bne.n	8016938 <_printf_float+0x304>
 80169b6:	e69e      	b.n	80166f6 <_printf_float+0xc2>
 80169b8:	2301      	movs	r3, #1
 80169ba:	4631      	mov	r1, r6
 80169bc:	4628      	mov	r0, r5
 80169be:	9205      	str	r2, [sp, #20]
 80169c0:	47b8      	blx	r7
 80169c2:	3001      	adds	r0, #1
 80169c4:	f43f ae97 	beq.w	80166f6 <_printf_float+0xc2>
 80169c8:	9a05      	ldr	r2, [sp, #20]
 80169ca:	f10b 0b01 	add.w	fp, fp, #1
 80169ce:	e7b9      	b.n	8016944 <_printf_float+0x310>
 80169d0:	ee18 3a10 	vmov	r3, s16
 80169d4:	4652      	mov	r2, sl
 80169d6:	4631      	mov	r1, r6
 80169d8:	4628      	mov	r0, r5
 80169da:	47b8      	blx	r7
 80169dc:	3001      	adds	r0, #1
 80169de:	d1be      	bne.n	801695e <_printf_float+0x32a>
 80169e0:	e689      	b.n	80166f6 <_printf_float+0xc2>
 80169e2:	9a05      	ldr	r2, [sp, #20]
 80169e4:	464b      	mov	r3, r9
 80169e6:	4442      	add	r2, r8
 80169e8:	4631      	mov	r1, r6
 80169ea:	4628      	mov	r0, r5
 80169ec:	47b8      	blx	r7
 80169ee:	3001      	adds	r0, #1
 80169f0:	d1c1      	bne.n	8016976 <_printf_float+0x342>
 80169f2:	e680      	b.n	80166f6 <_printf_float+0xc2>
 80169f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169f6:	2a01      	cmp	r2, #1
 80169f8:	dc01      	bgt.n	80169fe <_printf_float+0x3ca>
 80169fa:	07db      	lsls	r3, r3, #31
 80169fc:	d538      	bpl.n	8016a70 <_printf_float+0x43c>
 80169fe:	2301      	movs	r3, #1
 8016a00:	4642      	mov	r2, r8
 8016a02:	4631      	mov	r1, r6
 8016a04:	4628      	mov	r0, r5
 8016a06:	47b8      	blx	r7
 8016a08:	3001      	adds	r0, #1
 8016a0a:	f43f ae74 	beq.w	80166f6 <_printf_float+0xc2>
 8016a0e:	ee18 3a10 	vmov	r3, s16
 8016a12:	4652      	mov	r2, sl
 8016a14:	4631      	mov	r1, r6
 8016a16:	4628      	mov	r0, r5
 8016a18:	47b8      	blx	r7
 8016a1a:	3001      	adds	r0, #1
 8016a1c:	f43f ae6b 	beq.w	80166f6 <_printf_float+0xc2>
 8016a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016a24:	2200      	movs	r2, #0
 8016a26:	2300      	movs	r3, #0
 8016a28:	f7ea f86e 	bl	8000b08 <__aeabi_dcmpeq>
 8016a2c:	b9d8      	cbnz	r0, 8016a66 <_printf_float+0x432>
 8016a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a30:	f108 0201 	add.w	r2, r8, #1
 8016a34:	3b01      	subs	r3, #1
 8016a36:	4631      	mov	r1, r6
 8016a38:	4628      	mov	r0, r5
 8016a3a:	47b8      	blx	r7
 8016a3c:	3001      	adds	r0, #1
 8016a3e:	d10e      	bne.n	8016a5e <_printf_float+0x42a>
 8016a40:	e659      	b.n	80166f6 <_printf_float+0xc2>
 8016a42:	2301      	movs	r3, #1
 8016a44:	4652      	mov	r2, sl
 8016a46:	4631      	mov	r1, r6
 8016a48:	4628      	mov	r0, r5
 8016a4a:	47b8      	blx	r7
 8016a4c:	3001      	adds	r0, #1
 8016a4e:	f43f ae52 	beq.w	80166f6 <_printf_float+0xc2>
 8016a52:	f108 0801 	add.w	r8, r8, #1
 8016a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a58:	3b01      	subs	r3, #1
 8016a5a:	4543      	cmp	r3, r8
 8016a5c:	dcf1      	bgt.n	8016a42 <_printf_float+0x40e>
 8016a5e:	464b      	mov	r3, r9
 8016a60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016a64:	e6dc      	b.n	8016820 <_printf_float+0x1ec>
 8016a66:	f04f 0800 	mov.w	r8, #0
 8016a6a:	f104 0a1a 	add.w	sl, r4, #26
 8016a6e:	e7f2      	b.n	8016a56 <_printf_float+0x422>
 8016a70:	2301      	movs	r3, #1
 8016a72:	4642      	mov	r2, r8
 8016a74:	e7df      	b.n	8016a36 <_printf_float+0x402>
 8016a76:	2301      	movs	r3, #1
 8016a78:	464a      	mov	r2, r9
 8016a7a:	4631      	mov	r1, r6
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	47b8      	blx	r7
 8016a80:	3001      	adds	r0, #1
 8016a82:	f43f ae38 	beq.w	80166f6 <_printf_float+0xc2>
 8016a86:	f108 0801 	add.w	r8, r8, #1
 8016a8a:	68e3      	ldr	r3, [r4, #12]
 8016a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a8e:	1a5b      	subs	r3, r3, r1
 8016a90:	4543      	cmp	r3, r8
 8016a92:	dcf0      	bgt.n	8016a76 <_printf_float+0x442>
 8016a94:	e6fa      	b.n	801688c <_printf_float+0x258>
 8016a96:	f04f 0800 	mov.w	r8, #0
 8016a9a:	f104 0919 	add.w	r9, r4, #25
 8016a9e:	e7f4      	b.n	8016a8a <_printf_float+0x456>

08016aa0 <_printf_common>:
 8016aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa4:	4616      	mov	r6, r2
 8016aa6:	4699      	mov	r9, r3
 8016aa8:	688a      	ldr	r2, [r1, #8]
 8016aaa:	690b      	ldr	r3, [r1, #16]
 8016aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016ab0:	4293      	cmp	r3, r2
 8016ab2:	bfb8      	it	lt
 8016ab4:	4613      	movlt	r3, r2
 8016ab6:	6033      	str	r3, [r6, #0]
 8016ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016abc:	4607      	mov	r7, r0
 8016abe:	460c      	mov	r4, r1
 8016ac0:	b10a      	cbz	r2, 8016ac6 <_printf_common+0x26>
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	6033      	str	r3, [r6, #0]
 8016ac6:	6823      	ldr	r3, [r4, #0]
 8016ac8:	0699      	lsls	r1, r3, #26
 8016aca:	bf42      	ittt	mi
 8016acc:	6833      	ldrmi	r3, [r6, #0]
 8016ace:	3302      	addmi	r3, #2
 8016ad0:	6033      	strmi	r3, [r6, #0]
 8016ad2:	6825      	ldr	r5, [r4, #0]
 8016ad4:	f015 0506 	ands.w	r5, r5, #6
 8016ad8:	d106      	bne.n	8016ae8 <_printf_common+0x48>
 8016ada:	f104 0a19 	add.w	sl, r4, #25
 8016ade:	68e3      	ldr	r3, [r4, #12]
 8016ae0:	6832      	ldr	r2, [r6, #0]
 8016ae2:	1a9b      	subs	r3, r3, r2
 8016ae4:	42ab      	cmp	r3, r5
 8016ae6:	dc26      	bgt.n	8016b36 <_printf_common+0x96>
 8016ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016aec:	1e13      	subs	r3, r2, #0
 8016aee:	6822      	ldr	r2, [r4, #0]
 8016af0:	bf18      	it	ne
 8016af2:	2301      	movne	r3, #1
 8016af4:	0692      	lsls	r2, r2, #26
 8016af6:	d42b      	bmi.n	8016b50 <_printf_common+0xb0>
 8016af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016afc:	4649      	mov	r1, r9
 8016afe:	4638      	mov	r0, r7
 8016b00:	47c0      	blx	r8
 8016b02:	3001      	adds	r0, #1
 8016b04:	d01e      	beq.n	8016b44 <_printf_common+0xa4>
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	68e5      	ldr	r5, [r4, #12]
 8016b0a:	6832      	ldr	r2, [r6, #0]
 8016b0c:	f003 0306 	and.w	r3, r3, #6
 8016b10:	2b04      	cmp	r3, #4
 8016b12:	bf08      	it	eq
 8016b14:	1aad      	subeq	r5, r5, r2
 8016b16:	68a3      	ldr	r3, [r4, #8]
 8016b18:	6922      	ldr	r2, [r4, #16]
 8016b1a:	bf0c      	ite	eq
 8016b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b20:	2500      	movne	r5, #0
 8016b22:	4293      	cmp	r3, r2
 8016b24:	bfc4      	itt	gt
 8016b26:	1a9b      	subgt	r3, r3, r2
 8016b28:	18ed      	addgt	r5, r5, r3
 8016b2a:	2600      	movs	r6, #0
 8016b2c:	341a      	adds	r4, #26
 8016b2e:	42b5      	cmp	r5, r6
 8016b30:	d11a      	bne.n	8016b68 <_printf_common+0xc8>
 8016b32:	2000      	movs	r0, #0
 8016b34:	e008      	b.n	8016b48 <_printf_common+0xa8>
 8016b36:	2301      	movs	r3, #1
 8016b38:	4652      	mov	r2, sl
 8016b3a:	4649      	mov	r1, r9
 8016b3c:	4638      	mov	r0, r7
 8016b3e:	47c0      	blx	r8
 8016b40:	3001      	adds	r0, #1
 8016b42:	d103      	bne.n	8016b4c <_printf_common+0xac>
 8016b44:	f04f 30ff 	mov.w	r0, #4294967295
 8016b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b4c:	3501      	adds	r5, #1
 8016b4e:	e7c6      	b.n	8016ade <_printf_common+0x3e>
 8016b50:	18e1      	adds	r1, r4, r3
 8016b52:	1c5a      	adds	r2, r3, #1
 8016b54:	2030      	movs	r0, #48	; 0x30
 8016b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016b5a:	4422      	add	r2, r4
 8016b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016b64:	3302      	adds	r3, #2
 8016b66:	e7c7      	b.n	8016af8 <_printf_common+0x58>
 8016b68:	2301      	movs	r3, #1
 8016b6a:	4622      	mov	r2, r4
 8016b6c:	4649      	mov	r1, r9
 8016b6e:	4638      	mov	r0, r7
 8016b70:	47c0      	blx	r8
 8016b72:	3001      	adds	r0, #1
 8016b74:	d0e6      	beq.n	8016b44 <_printf_common+0xa4>
 8016b76:	3601      	adds	r6, #1
 8016b78:	e7d9      	b.n	8016b2e <_printf_common+0x8e>
	...

08016b7c <_printf_i>:
 8016b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b80:	7e0f      	ldrb	r7, [r1, #24]
 8016b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016b84:	2f78      	cmp	r7, #120	; 0x78
 8016b86:	4691      	mov	r9, r2
 8016b88:	4680      	mov	r8, r0
 8016b8a:	460c      	mov	r4, r1
 8016b8c:	469a      	mov	sl, r3
 8016b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016b92:	d807      	bhi.n	8016ba4 <_printf_i+0x28>
 8016b94:	2f62      	cmp	r7, #98	; 0x62
 8016b96:	d80a      	bhi.n	8016bae <_printf_i+0x32>
 8016b98:	2f00      	cmp	r7, #0
 8016b9a:	f000 80d8 	beq.w	8016d4e <_printf_i+0x1d2>
 8016b9e:	2f58      	cmp	r7, #88	; 0x58
 8016ba0:	f000 80a3 	beq.w	8016cea <_printf_i+0x16e>
 8016ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016bac:	e03a      	b.n	8016c24 <_printf_i+0xa8>
 8016bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016bb2:	2b15      	cmp	r3, #21
 8016bb4:	d8f6      	bhi.n	8016ba4 <_printf_i+0x28>
 8016bb6:	a101      	add	r1, pc, #4	; (adr r1, 8016bbc <_printf_i+0x40>)
 8016bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016bbc:	08016c15 	.word	0x08016c15
 8016bc0:	08016c29 	.word	0x08016c29
 8016bc4:	08016ba5 	.word	0x08016ba5
 8016bc8:	08016ba5 	.word	0x08016ba5
 8016bcc:	08016ba5 	.word	0x08016ba5
 8016bd0:	08016ba5 	.word	0x08016ba5
 8016bd4:	08016c29 	.word	0x08016c29
 8016bd8:	08016ba5 	.word	0x08016ba5
 8016bdc:	08016ba5 	.word	0x08016ba5
 8016be0:	08016ba5 	.word	0x08016ba5
 8016be4:	08016ba5 	.word	0x08016ba5
 8016be8:	08016d35 	.word	0x08016d35
 8016bec:	08016c59 	.word	0x08016c59
 8016bf0:	08016d17 	.word	0x08016d17
 8016bf4:	08016ba5 	.word	0x08016ba5
 8016bf8:	08016ba5 	.word	0x08016ba5
 8016bfc:	08016d57 	.word	0x08016d57
 8016c00:	08016ba5 	.word	0x08016ba5
 8016c04:	08016c59 	.word	0x08016c59
 8016c08:	08016ba5 	.word	0x08016ba5
 8016c0c:	08016ba5 	.word	0x08016ba5
 8016c10:	08016d1f 	.word	0x08016d1f
 8016c14:	682b      	ldr	r3, [r5, #0]
 8016c16:	1d1a      	adds	r2, r3, #4
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	602a      	str	r2, [r5, #0]
 8016c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c24:	2301      	movs	r3, #1
 8016c26:	e0a3      	b.n	8016d70 <_printf_i+0x1f4>
 8016c28:	6820      	ldr	r0, [r4, #0]
 8016c2a:	6829      	ldr	r1, [r5, #0]
 8016c2c:	0606      	lsls	r6, r0, #24
 8016c2e:	f101 0304 	add.w	r3, r1, #4
 8016c32:	d50a      	bpl.n	8016c4a <_printf_i+0xce>
 8016c34:	680e      	ldr	r6, [r1, #0]
 8016c36:	602b      	str	r3, [r5, #0]
 8016c38:	2e00      	cmp	r6, #0
 8016c3a:	da03      	bge.n	8016c44 <_printf_i+0xc8>
 8016c3c:	232d      	movs	r3, #45	; 0x2d
 8016c3e:	4276      	negs	r6, r6
 8016c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c44:	485e      	ldr	r0, [pc, #376]	; (8016dc0 <_printf_i+0x244>)
 8016c46:	230a      	movs	r3, #10
 8016c48:	e019      	b.n	8016c7e <_printf_i+0x102>
 8016c4a:	680e      	ldr	r6, [r1, #0]
 8016c4c:	602b      	str	r3, [r5, #0]
 8016c4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016c52:	bf18      	it	ne
 8016c54:	b236      	sxthne	r6, r6
 8016c56:	e7ef      	b.n	8016c38 <_printf_i+0xbc>
 8016c58:	682b      	ldr	r3, [r5, #0]
 8016c5a:	6820      	ldr	r0, [r4, #0]
 8016c5c:	1d19      	adds	r1, r3, #4
 8016c5e:	6029      	str	r1, [r5, #0]
 8016c60:	0601      	lsls	r1, r0, #24
 8016c62:	d501      	bpl.n	8016c68 <_printf_i+0xec>
 8016c64:	681e      	ldr	r6, [r3, #0]
 8016c66:	e002      	b.n	8016c6e <_printf_i+0xf2>
 8016c68:	0646      	lsls	r6, r0, #25
 8016c6a:	d5fb      	bpl.n	8016c64 <_printf_i+0xe8>
 8016c6c:	881e      	ldrh	r6, [r3, #0]
 8016c6e:	4854      	ldr	r0, [pc, #336]	; (8016dc0 <_printf_i+0x244>)
 8016c70:	2f6f      	cmp	r7, #111	; 0x6f
 8016c72:	bf0c      	ite	eq
 8016c74:	2308      	moveq	r3, #8
 8016c76:	230a      	movne	r3, #10
 8016c78:	2100      	movs	r1, #0
 8016c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016c7e:	6865      	ldr	r5, [r4, #4]
 8016c80:	60a5      	str	r5, [r4, #8]
 8016c82:	2d00      	cmp	r5, #0
 8016c84:	bfa2      	ittt	ge
 8016c86:	6821      	ldrge	r1, [r4, #0]
 8016c88:	f021 0104 	bicge.w	r1, r1, #4
 8016c8c:	6021      	strge	r1, [r4, #0]
 8016c8e:	b90e      	cbnz	r6, 8016c94 <_printf_i+0x118>
 8016c90:	2d00      	cmp	r5, #0
 8016c92:	d04d      	beq.n	8016d30 <_printf_i+0x1b4>
 8016c94:	4615      	mov	r5, r2
 8016c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8016c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8016c9e:	5dc7      	ldrb	r7, [r0, r7]
 8016ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016ca4:	4637      	mov	r7, r6
 8016ca6:	42bb      	cmp	r3, r7
 8016ca8:	460e      	mov	r6, r1
 8016caa:	d9f4      	bls.n	8016c96 <_printf_i+0x11a>
 8016cac:	2b08      	cmp	r3, #8
 8016cae:	d10b      	bne.n	8016cc8 <_printf_i+0x14c>
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	07de      	lsls	r6, r3, #31
 8016cb4:	d508      	bpl.n	8016cc8 <_printf_i+0x14c>
 8016cb6:	6923      	ldr	r3, [r4, #16]
 8016cb8:	6861      	ldr	r1, [r4, #4]
 8016cba:	4299      	cmp	r1, r3
 8016cbc:	bfde      	ittt	le
 8016cbe:	2330      	movle	r3, #48	; 0x30
 8016cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016cc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016cc8:	1b52      	subs	r2, r2, r5
 8016cca:	6122      	str	r2, [r4, #16]
 8016ccc:	f8cd a000 	str.w	sl, [sp]
 8016cd0:	464b      	mov	r3, r9
 8016cd2:	aa03      	add	r2, sp, #12
 8016cd4:	4621      	mov	r1, r4
 8016cd6:	4640      	mov	r0, r8
 8016cd8:	f7ff fee2 	bl	8016aa0 <_printf_common>
 8016cdc:	3001      	adds	r0, #1
 8016cde:	d14c      	bne.n	8016d7a <_printf_i+0x1fe>
 8016ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ce4:	b004      	add	sp, #16
 8016ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cea:	4835      	ldr	r0, [pc, #212]	; (8016dc0 <_printf_i+0x244>)
 8016cec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016cf0:	6829      	ldr	r1, [r5, #0]
 8016cf2:	6823      	ldr	r3, [r4, #0]
 8016cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8016cf8:	6029      	str	r1, [r5, #0]
 8016cfa:	061d      	lsls	r5, r3, #24
 8016cfc:	d514      	bpl.n	8016d28 <_printf_i+0x1ac>
 8016cfe:	07df      	lsls	r7, r3, #31
 8016d00:	bf44      	itt	mi
 8016d02:	f043 0320 	orrmi.w	r3, r3, #32
 8016d06:	6023      	strmi	r3, [r4, #0]
 8016d08:	b91e      	cbnz	r6, 8016d12 <_printf_i+0x196>
 8016d0a:	6823      	ldr	r3, [r4, #0]
 8016d0c:	f023 0320 	bic.w	r3, r3, #32
 8016d10:	6023      	str	r3, [r4, #0]
 8016d12:	2310      	movs	r3, #16
 8016d14:	e7b0      	b.n	8016c78 <_printf_i+0xfc>
 8016d16:	6823      	ldr	r3, [r4, #0]
 8016d18:	f043 0320 	orr.w	r3, r3, #32
 8016d1c:	6023      	str	r3, [r4, #0]
 8016d1e:	2378      	movs	r3, #120	; 0x78
 8016d20:	4828      	ldr	r0, [pc, #160]	; (8016dc4 <_printf_i+0x248>)
 8016d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d26:	e7e3      	b.n	8016cf0 <_printf_i+0x174>
 8016d28:	0659      	lsls	r1, r3, #25
 8016d2a:	bf48      	it	mi
 8016d2c:	b2b6      	uxthmi	r6, r6
 8016d2e:	e7e6      	b.n	8016cfe <_printf_i+0x182>
 8016d30:	4615      	mov	r5, r2
 8016d32:	e7bb      	b.n	8016cac <_printf_i+0x130>
 8016d34:	682b      	ldr	r3, [r5, #0]
 8016d36:	6826      	ldr	r6, [r4, #0]
 8016d38:	6961      	ldr	r1, [r4, #20]
 8016d3a:	1d18      	adds	r0, r3, #4
 8016d3c:	6028      	str	r0, [r5, #0]
 8016d3e:	0635      	lsls	r5, r6, #24
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	d501      	bpl.n	8016d48 <_printf_i+0x1cc>
 8016d44:	6019      	str	r1, [r3, #0]
 8016d46:	e002      	b.n	8016d4e <_printf_i+0x1d2>
 8016d48:	0670      	lsls	r0, r6, #25
 8016d4a:	d5fb      	bpl.n	8016d44 <_printf_i+0x1c8>
 8016d4c:	8019      	strh	r1, [r3, #0]
 8016d4e:	2300      	movs	r3, #0
 8016d50:	6123      	str	r3, [r4, #16]
 8016d52:	4615      	mov	r5, r2
 8016d54:	e7ba      	b.n	8016ccc <_printf_i+0x150>
 8016d56:	682b      	ldr	r3, [r5, #0]
 8016d58:	1d1a      	adds	r2, r3, #4
 8016d5a:	602a      	str	r2, [r5, #0]
 8016d5c:	681d      	ldr	r5, [r3, #0]
 8016d5e:	6862      	ldr	r2, [r4, #4]
 8016d60:	2100      	movs	r1, #0
 8016d62:	4628      	mov	r0, r5
 8016d64:	f7e9 fa5c 	bl	8000220 <memchr>
 8016d68:	b108      	cbz	r0, 8016d6e <_printf_i+0x1f2>
 8016d6a:	1b40      	subs	r0, r0, r5
 8016d6c:	6060      	str	r0, [r4, #4]
 8016d6e:	6863      	ldr	r3, [r4, #4]
 8016d70:	6123      	str	r3, [r4, #16]
 8016d72:	2300      	movs	r3, #0
 8016d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d78:	e7a8      	b.n	8016ccc <_printf_i+0x150>
 8016d7a:	6923      	ldr	r3, [r4, #16]
 8016d7c:	462a      	mov	r2, r5
 8016d7e:	4649      	mov	r1, r9
 8016d80:	4640      	mov	r0, r8
 8016d82:	47d0      	blx	sl
 8016d84:	3001      	adds	r0, #1
 8016d86:	d0ab      	beq.n	8016ce0 <_printf_i+0x164>
 8016d88:	6823      	ldr	r3, [r4, #0]
 8016d8a:	079b      	lsls	r3, r3, #30
 8016d8c:	d413      	bmi.n	8016db6 <_printf_i+0x23a>
 8016d8e:	68e0      	ldr	r0, [r4, #12]
 8016d90:	9b03      	ldr	r3, [sp, #12]
 8016d92:	4298      	cmp	r0, r3
 8016d94:	bfb8      	it	lt
 8016d96:	4618      	movlt	r0, r3
 8016d98:	e7a4      	b.n	8016ce4 <_printf_i+0x168>
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	4632      	mov	r2, r6
 8016d9e:	4649      	mov	r1, r9
 8016da0:	4640      	mov	r0, r8
 8016da2:	47d0      	blx	sl
 8016da4:	3001      	adds	r0, #1
 8016da6:	d09b      	beq.n	8016ce0 <_printf_i+0x164>
 8016da8:	3501      	adds	r5, #1
 8016daa:	68e3      	ldr	r3, [r4, #12]
 8016dac:	9903      	ldr	r1, [sp, #12]
 8016dae:	1a5b      	subs	r3, r3, r1
 8016db0:	42ab      	cmp	r3, r5
 8016db2:	dcf2      	bgt.n	8016d9a <_printf_i+0x21e>
 8016db4:	e7eb      	b.n	8016d8e <_printf_i+0x212>
 8016db6:	2500      	movs	r5, #0
 8016db8:	f104 0619 	add.w	r6, r4, #25
 8016dbc:	e7f5      	b.n	8016daa <_printf_i+0x22e>
 8016dbe:	bf00      	nop
 8016dc0:	08019a46 	.word	0x08019a46
 8016dc4:	08019a57 	.word	0x08019a57

08016dc8 <_sbrk_r>:
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	4d06      	ldr	r5, [pc, #24]	; (8016de4 <_sbrk_r+0x1c>)
 8016dcc:	2300      	movs	r3, #0
 8016dce:	4604      	mov	r4, r0
 8016dd0:	4608      	mov	r0, r1
 8016dd2:	602b      	str	r3, [r5, #0]
 8016dd4:	f7ec f9de 	bl	8003194 <_sbrk>
 8016dd8:	1c43      	adds	r3, r0, #1
 8016dda:	d102      	bne.n	8016de2 <_sbrk_r+0x1a>
 8016ddc:	682b      	ldr	r3, [r5, #0]
 8016dde:	b103      	cbz	r3, 8016de2 <_sbrk_r+0x1a>
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	20003064 	.word	0x20003064

08016de8 <siprintf>:
 8016de8:	b40e      	push	{r1, r2, r3}
 8016dea:	b500      	push	{lr}
 8016dec:	b09c      	sub	sp, #112	; 0x70
 8016dee:	ab1d      	add	r3, sp, #116	; 0x74
 8016df0:	9002      	str	r0, [sp, #8]
 8016df2:	9006      	str	r0, [sp, #24]
 8016df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016df8:	4809      	ldr	r0, [pc, #36]	; (8016e20 <siprintf+0x38>)
 8016dfa:	9107      	str	r1, [sp, #28]
 8016dfc:	9104      	str	r1, [sp, #16]
 8016dfe:	4909      	ldr	r1, [pc, #36]	; (8016e24 <siprintf+0x3c>)
 8016e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e04:	9105      	str	r1, [sp, #20]
 8016e06:	6800      	ldr	r0, [r0, #0]
 8016e08:	9301      	str	r3, [sp, #4]
 8016e0a:	a902      	add	r1, sp, #8
 8016e0c:	f001 fb18 	bl	8018440 <_svfiprintf_r>
 8016e10:	9b02      	ldr	r3, [sp, #8]
 8016e12:	2200      	movs	r2, #0
 8016e14:	701a      	strb	r2, [r3, #0]
 8016e16:	b01c      	add	sp, #112	; 0x70
 8016e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e1c:	b003      	add	sp, #12
 8016e1e:	4770      	bx	lr
 8016e20:	2000012c 	.word	0x2000012c
 8016e24:	ffff0208 	.word	0xffff0208

08016e28 <_strtol_l.constprop.0>:
 8016e28:	2b01      	cmp	r3, #1
 8016e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e2e:	d001      	beq.n	8016e34 <_strtol_l.constprop.0+0xc>
 8016e30:	2b24      	cmp	r3, #36	; 0x24
 8016e32:	d906      	bls.n	8016e42 <_strtol_l.constprop.0+0x1a>
 8016e34:	f7ff fa2e 	bl	8016294 <__errno>
 8016e38:	2316      	movs	r3, #22
 8016e3a:	6003      	str	r3, [r0, #0]
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016f28 <_strtol_l.constprop.0+0x100>
 8016e46:	460d      	mov	r5, r1
 8016e48:	462e      	mov	r6, r5
 8016e4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016e52:	f017 0708 	ands.w	r7, r7, #8
 8016e56:	d1f7      	bne.n	8016e48 <_strtol_l.constprop.0+0x20>
 8016e58:	2c2d      	cmp	r4, #45	; 0x2d
 8016e5a:	d132      	bne.n	8016ec2 <_strtol_l.constprop.0+0x9a>
 8016e5c:	782c      	ldrb	r4, [r5, #0]
 8016e5e:	2701      	movs	r7, #1
 8016e60:	1cb5      	adds	r5, r6, #2
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d05b      	beq.n	8016f1e <_strtol_l.constprop.0+0xf6>
 8016e66:	2b10      	cmp	r3, #16
 8016e68:	d109      	bne.n	8016e7e <_strtol_l.constprop.0+0x56>
 8016e6a:	2c30      	cmp	r4, #48	; 0x30
 8016e6c:	d107      	bne.n	8016e7e <_strtol_l.constprop.0+0x56>
 8016e6e:	782c      	ldrb	r4, [r5, #0]
 8016e70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e74:	2c58      	cmp	r4, #88	; 0x58
 8016e76:	d14d      	bne.n	8016f14 <_strtol_l.constprop.0+0xec>
 8016e78:	786c      	ldrb	r4, [r5, #1]
 8016e7a:	2310      	movs	r3, #16
 8016e7c:	3502      	adds	r5, #2
 8016e7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e86:	f04f 0c00 	mov.w	ip, #0
 8016e8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8016e8e:	4666      	mov	r6, ip
 8016e90:	fb03 8a19 	mls	sl, r3, r9, r8
 8016e94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016e98:	f1be 0f09 	cmp.w	lr, #9
 8016e9c:	d816      	bhi.n	8016ecc <_strtol_l.constprop.0+0xa4>
 8016e9e:	4674      	mov	r4, lr
 8016ea0:	42a3      	cmp	r3, r4
 8016ea2:	dd24      	ble.n	8016eee <_strtol_l.constprop.0+0xc6>
 8016ea4:	f1bc 0f00 	cmp.w	ip, #0
 8016ea8:	db1e      	blt.n	8016ee8 <_strtol_l.constprop.0+0xc0>
 8016eaa:	45b1      	cmp	r9, r6
 8016eac:	d31c      	bcc.n	8016ee8 <_strtol_l.constprop.0+0xc0>
 8016eae:	d101      	bne.n	8016eb4 <_strtol_l.constprop.0+0x8c>
 8016eb0:	45a2      	cmp	sl, r4
 8016eb2:	db19      	blt.n	8016ee8 <_strtol_l.constprop.0+0xc0>
 8016eb4:	fb06 4603 	mla	r6, r6, r3, r4
 8016eb8:	f04f 0c01 	mov.w	ip, #1
 8016ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ec0:	e7e8      	b.n	8016e94 <_strtol_l.constprop.0+0x6c>
 8016ec2:	2c2b      	cmp	r4, #43	; 0x2b
 8016ec4:	bf04      	itt	eq
 8016ec6:	782c      	ldrbeq	r4, [r5, #0]
 8016ec8:	1cb5      	addeq	r5, r6, #2
 8016eca:	e7ca      	b.n	8016e62 <_strtol_l.constprop.0+0x3a>
 8016ecc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016ed0:	f1be 0f19 	cmp.w	lr, #25
 8016ed4:	d801      	bhi.n	8016eda <_strtol_l.constprop.0+0xb2>
 8016ed6:	3c37      	subs	r4, #55	; 0x37
 8016ed8:	e7e2      	b.n	8016ea0 <_strtol_l.constprop.0+0x78>
 8016eda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016ede:	f1be 0f19 	cmp.w	lr, #25
 8016ee2:	d804      	bhi.n	8016eee <_strtol_l.constprop.0+0xc6>
 8016ee4:	3c57      	subs	r4, #87	; 0x57
 8016ee6:	e7db      	b.n	8016ea0 <_strtol_l.constprop.0+0x78>
 8016ee8:	f04f 3cff 	mov.w	ip, #4294967295
 8016eec:	e7e6      	b.n	8016ebc <_strtol_l.constprop.0+0x94>
 8016eee:	f1bc 0f00 	cmp.w	ip, #0
 8016ef2:	da05      	bge.n	8016f00 <_strtol_l.constprop.0+0xd8>
 8016ef4:	2322      	movs	r3, #34	; 0x22
 8016ef6:	6003      	str	r3, [r0, #0]
 8016ef8:	4646      	mov	r6, r8
 8016efa:	b942      	cbnz	r2, 8016f0e <_strtol_l.constprop.0+0xe6>
 8016efc:	4630      	mov	r0, r6
 8016efe:	e79e      	b.n	8016e3e <_strtol_l.constprop.0+0x16>
 8016f00:	b107      	cbz	r7, 8016f04 <_strtol_l.constprop.0+0xdc>
 8016f02:	4276      	negs	r6, r6
 8016f04:	2a00      	cmp	r2, #0
 8016f06:	d0f9      	beq.n	8016efc <_strtol_l.constprop.0+0xd4>
 8016f08:	f1bc 0f00 	cmp.w	ip, #0
 8016f0c:	d000      	beq.n	8016f10 <_strtol_l.constprop.0+0xe8>
 8016f0e:	1e69      	subs	r1, r5, #1
 8016f10:	6011      	str	r1, [r2, #0]
 8016f12:	e7f3      	b.n	8016efc <_strtol_l.constprop.0+0xd4>
 8016f14:	2430      	movs	r4, #48	; 0x30
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d1b1      	bne.n	8016e7e <_strtol_l.constprop.0+0x56>
 8016f1a:	2308      	movs	r3, #8
 8016f1c:	e7af      	b.n	8016e7e <_strtol_l.constprop.0+0x56>
 8016f1e:	2c30      	cmp	r4, #48	; 0x30
 8016f20:	d0a5      	beq.n	8016e6e <_strtol_l.constprop.0+0x46>
 8016f22:	230a      	movs	r3, #10
 8016f24:	e7ab      	b.n	8016e7e <_strtol_l.constprop.0+0x56>
 8016f26:	bf00      	nop
 8016f28:	08019a69 	.word	0x08019a69

08016f2c <strtol>:
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	460a      	mov	r2, r1
 8016f30:	4601      	mov	r1, r0
 8016f32:	4802      	ldr	r0, [pc, #8]	; (8016f3c <strtol+0x10>)
 8016f34:	6800      	ldr	r0, [r0, #0]
 8016f36:	f7ff bf77 	b.w	8016e28 <_strtol_l.constprop.0>
 8016f3a:	bf00      	nop
 8016f3c:	2000012c 	.word	0x2000012c

08016f40 <quorem>:
 8016f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f44:	6903      	ldr	r3, [r0, #16]
 8016f46:	690c      	ldr	r4, [r1, #16]
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	4607      	mov	r7, r0
 8016f4c:	f2c0 8081 	blt.w	8017052 <quorem+0x112>
 8016f50:	3c01      	subs	r4, #1
 8016f52:	f101 0814 	add.w	r8, r1, #20
 8016f56:	f100 0514 	add.w	r5, r0, #20
 8016f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f5e:	9301      	str	r3, [sp, #4]
 8016f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8016f78:	d331      	bcc.n	8016fde <quorem+0x9e>
 8016f7a:	f04f 0e00 	mov.w	lr, #0
 8016f7e:	4640      	mov	r0, r8
 8016f80:	46ac      	mov	ip, r5
 8016f82:	46f2      	mov	sl, lr
 8016f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8016f88:	b293      	uxth	r3, r2
 8016f8a:	fb06 e303 	mla	r3, r6, r3, lr
 8016f8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	ebaa 0303 	sub.w	r3, sl, r3
 8016f98:	f8dc a000 	ldr.w	sl, [ip]
 8016f9c:	0c12      	lsrs	r2, r2, #16
 8016f9e:	fa13 f38a 	uxtah	r3, r3, sl
 8016fa2:	fb06 e202 	mla	r2, r6, r2, lr
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	9b00      	ldr	r3, [sp, #0]
 8016faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016fae:	b292      	uxth	r2, r2
 8016fb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016fb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8016fbc:	4581      	cmp	r9, r0
 8016fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8016fc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016fca:	d2db      	bcs.n	8016f84 <quorem+0x44>
 8016fcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8016fd0:	b92b      	cbnz	r3, 8016fde <quorem+0x9e>
 8016fd2:	9b01      	ldr	r3, [sp, #4]
 8016fd4:	3b04      	subs	r3, #4
 8016fd6:	429d      	cmp	r5, r3
 8016fd8:	461a      	mov	r2, r3
 8016fda:	d32e      	bcc.n	801703a <quorem+0xfa>
 8016fdc:	613c      	str	r4, [r7, #16]
 8016fde:	4638      	mov	r0, r7
 8016fe0:	f001 f8ba 	bl	8018158 <__mcmp>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	db24      	blt.n	8017032 <quorem+0xf2>
 8016fe8:	3601      	adds	r6, #1
 8016fea:	4628      	mov	r0, r5
 8016fec:	f04f 0c00 	mov.w	ip, #0
 8016ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8016ff4:	f8d0 e000 	ldr.w	lr, [r0]
 8016ff8:	b293      	uxth	r3, r2
 8016ffa:	ebac 0303 	sub.w	r3, ip, r3
 8016ffe:	0c12      	lsrs	r2, r2, #16
 8017000:	fa13 f38e 	uxtah	r3, r3, lr
 8017004:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801700c:	b29b      	uxth	r3, r3
 801700e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017012:	45c1      	cmp	r9, r8
 8017014:	f840 3b04 	str.w	r3, [r0], #4
 8017018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801701c:	d2e8      	bcs.n	8016ff0 <quorem+0xb0>
 801701e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017026:	b922      	cbnz	r2, 8017032 <quorem+0xf2>
 8017028:	3b04      	subs	r3, #4
 801702a:	429d      	cmp	r5, r3
 801702c:	461a      	mov	r2, r3
 801702e:	d30a      	bcc.n	8017046 <quorem+0x106>
 8017030:	613c      	str	r4, [r7, #16]
 8017032:	4630      	mov	r0, r6
 8017034:	b003      	add	sp, #12
 8017036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801703a:	6812      	ldr	r2, [r2, #0]
 801703c:	3b04      	subs	r3, #4
 801703e:	2a00      	cmp	r2, #0
 8017040:	d1cc      	bne.n	8016fdc <quorem+0x9c>
 8017042:	3c01      	subs	r4, #1
 8017044:	e7c7      	b.n	8016fd6 <quorem+0x96>
 8017046:	6812      	ldr	r2, [r2, #0]
 8017048:	3b04      	subs	r3, #4
 801704a:	2a00      	cmp	r2, #0
 801704c:	d1f0      	bne.n	8017030 <quorem+0xf0>
 801704e:	3c01      	subs	r4, #1
 8017050:	e7eb      	b.n	801702a <quorem+0xea>
 8017052:	2000      	movs	r0, #0
 8017054:	e7ee      	b.n	8017034 <quorem+0xf4>
	...

08017058 <_dtoa_r>:
 8017058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801705c:	ed2d 8b04 	vpush	{d8-d9}
 8017060:	ec57 6b10 	vmov	r6, r7, d0
 8017064:	b093      	sub	sp, #76	; 0x4c
 8017066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801706c:	9106      	str	r1, [sp, #24]
 801706e:	ee10 aa10 	vmov	sl, s0
 8017072:	4604      	mov	r4, r0
 8017074:	9209      	str	r2, [sp, #36]	; 0x24
 8017076:	930c      	str	r3, [sp, #48]	; 0x30
 8017078:	46bb      	mov	fp, r7
 801707a:	b975      	cbnz	r5, 801709a <_dtoa_r+0x42>
 801707c:	2010      	movs	r0, #16
 801707e:	f7ff f933 	bl	80162e8 <malloc>
 8017082:	4602      	mov	r2, r0
 8017084:	6260      	str	r0, [r4, #36]	; 0x24
 8017086:	b920      	cbnz	r0, 8017092 <_dtoa_r+0x3a>
 8017088:	4ba7      	ldr	r3, [pc, #668]	; (8017328 <_dtoa_r+0x2d0>)
 801708a:	21ea      	movs	r1, #234	; 0xea
 801708c:	48a7      	ldr	r0, [pc, #668]	; (801732c <_dtoa_r+0x2d4>)
 801708e:	f001 fad7 	bl	8018640 <__assert_func>
 8017092:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017096:	6005      	str	r5, [r0, #0]
 8017098:	60c5      	str	r5, [r0, #12]
 801709a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801709c:	6819      	ldr	r1, [r3, #0]
 801709e:	b151      	cbz	r1, 80170b6 <_dtoa_r+0x5e>
 80170a0:	685a      	ldr	r2, [r3, #4]
 80170a2:	604a      	str	r2, [r1, #4]
 80170a4:	2301      	movs	r3, #1
 80170a6:	4093      	lsls	r3, r2
 80170a8:	608b      	str	r3, [r1, #8]
 80170aa:	4620      	mov	r0, r4
 80170ac:	f000 fe12 	bl	8017cd4 <_Bfree>
 80170b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170b2:	2200      	movs	r2, #0
 80170b4:	601a      	str	r2, [r3, #0]
 80170b6:	1e3b      	subs	r3, r7, #0
 80170b8:	bfaa      	itet	ge
 80170ba:	2300      	movge	r3, #0
 80170bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80170c0:	f8c8 3000 	strge.w	r3, [r8]
 80170c4:	4b9a      	ldr	r3, [pc, #616]	; (8017330 <_dtoa_r+0x2d8>)
 80170c6:	bfbc      	itt	lt
 80170c8:	2201      	movlt	r2, #1
 80170ca:	f8c8 2000 	strlt.w	r2, [r8]
 80170ce:	ea33 030b 	bics.w	r3, r3, fp
 80170d2:	d11b      	bne.n	801710c <_dtoa_r+0xb4>
 80170d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80170da:	6013      	str	r3, [r2, #0]
 80170dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170e0:	4333      	orrs	r3, r6
 80170e2:	f000 8592 	beq.w	8017c0a <_dtoa_r+0xbb2>
 80170e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170e8:	b963      	cbnz	r3, 8017104 <_dtoa_r+0xac>
 80170ea:	4b92      	ldr	r3, [pc, #584]	; (8017334 <_dtoa_r+0x2dc>)
 80170ec:	e022      	b.n	8017134 <_dtoa_r+0xdc>
 80170ee:	4b92      	ldr	r3, [pc, #584]	; (8017338 <_dtoa_r+0x2e0>)
 80170f0:	9301      	str	r3, [sp, #4]
 80170f2:	3308      	adds	r3, #8
 80170f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170f6:	6013      	str	r3, [r2, #0]
 80170f8:	9801      	ldr	r0, [sp, #4]
 80170fa:	b013      	add	sp, #76	; 0x4c
 80170fc:	ecbd 8b04 	vpop	{d8-d9}
 8017100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017104:	4b8b      	ldr	r3, [pc, #556]	; (8017334 <_dtoa_r+0x2dc>)
 8017106:	9301      	str	r3, [sp, #4]
 8017108:	3303      	adds	r3, #3
 801710a:	e7f3      	b.n	80170f4 <_dtoa_r+0x9c>
 801710c:	2200      	movs	r2, #0
 801710e:	2300      	movs	r3, #0
 8017110:	4650      	mov	r0, sl
 8017112:	4659      	mov	r1, fp
 8017114:	f7e9 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8017118:	ec4b ab19 	vmov	d9, sl, fp
 801711c:	4680      	mov	r8, r0
 801711e:	b158      	cbz	r0, 8017138 <_dtoa_r+0xe0>
 8017120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017122:	2301      	movs	r3, #1
 8017124:	6013      	str	r3, [r2, #0]
 8017126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017128:	2b00      	cmp	r3, #0
 801712a:	f000 856b 	beq.w	8017c04 <_dtoa_r+0xbac>
 801712e:	4883      	ldr	r0, [pc, #524]	; (801733c <_dtoa_r+0x2e4>)
 8017130:	6018      	str	r0, [r3, #0]
 8017132:	1e43      	subs	r3, r0, #1
 8017134:	9301      	str	r3, [sp, #4]
 8017136:	e7df      	b.n	80170f8 <_dtoa_r+0xa0>
 8017138:	ec4b ab10 	vmov	d0, sl, fp
 801713c:	aa10      	add	r2, sp, #64	; 0x40
 801713e:	a911      	add	r1, sp, #68	; 0x44
 8017140:	4620      	mov	r0, r4
 8017142:	f001 f8af 	bl	80182a4 <__d2b>
 8017146:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801714a:	ee08 0a10 	vmov	s16, r0
 801714e:	2d00      	cmp	r5, #0
 8017150:	f000 8084 	beq.w	801725c <_dtoa_r+0x204>
 8017154:	ee19 3a90 	vmov	r3, s19
 8017158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801715c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017160:	4656      	mov	r6, sl
 8017162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801716a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801716e:	4b74      	ldr	r3, [pc, #464]	; (8017340 <_dtoa_r+0x2e8>)
 8017170:	2200      	movs	r2, #0
 8017172:	4630      	mov	r0, r6
 8017174:	4639      	mov	r1, r7
 8017176:	f7e9 f8a7 	bl	80002c8 <__aeabi_dsub>
 801717a:	a365      	add	r3, pc, #404	; (adr r3, 8017310 <_dtoa_r+0x2b8>)
 801717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017180:	f7e9 fa5a 	bl	8000638 <__aeabi_dmul>
 8017184:	a364      	add	r3, pc, #400	; (adr r3, 8017318 <_dtoa_r+0x2c0>)
 8017186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718a:	f7e9 f89f 	bl	80002cc <__adddf3>
 801718e:	4606      	mov	r6, r0
 8017190:	4628      	mov	r0, r5
 8017192:	460f      	mov	r7, r1
 8017194:	f7e9 f9e6 	bl	8000564 <__aeabi_i2d>
 8017198:	a361      	add	r3, pc, #388	; (adr r3, 8017320 <_dtoa_r+0x2c8>)
 801719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801719e:	f7e9 fa4b 	bl	8000638 <__aeabi_dmul>
 80171a2:	4602      	mov	r2, r0
 80171a4:	460b      	mov	r3, r1
 80171a6:	4630      	mov	r0, r6
 80171a8:	4639      	mov	r1, r7
 80171aa:	f7e9 f88f 	bl	80002cc <__adddf3>
 80171ae:	4606      	mov	r6, r0
 80171b0:	460f      	mov	r7, r1
 80171b2:	f7e9 fcf1 	bl	8000b98 <__aeabi_d2iz>
 80171b6:	2200      	movs	r2, #0
 80171b8:	9000      	str	r0, [sp, #0]
 80171ba:	2300      	movs	r3, #0
 80171bc:	4630      	mov	r0, r6
 80171be:	4639      	mov	r1, r7
 80171c0:	f7e9 fcac 	bl	8000b1c <__aeabi_dcmplt>
 80171c4:	b150      	cbz	r0, 80171dc <_dtoa_r+0x184>
 80171c6:	9800      	ldr	r0, [sp, #0]
 80171c8:	f7e9 f9cc 	bl	8000564 <__aeabi_i2d>
 80171cc:	4632      	mov	r2, r6
 80171ce:	463b      	mov	r3, r7
 80171d0:	f7e9 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 80171d4:	b910      	cbnz	r0, 80171dc <_dtoa_r+0x184>
 80171d6:	9b00      	ldr	r3, [sp, #0]
 80171d8:	3b01      	subs	r3, #1
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	9b00      	ldr	r3, [sp, #0]
 80171de:	2b16      	cmp	r3, #22
 80171e0:	d85a      	bhi.n	8017298 <_dtoa_r+0x240>
 80171e2:	9a00      	ldr	r2, [sp, #0]
 80171e4:	4b57      	ldr	r3, [pc, #348]	; (8017344 <_dtoa_r+0x2ec>)
 80171e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ee:	ec51 0b19 	vmov	r0, r1, d9
 80171f2:	f7e9 fc93 	bl	8000b1c <__aeabi_dcmplt>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	d050      	beq.n	801729c <_dtoa_r+0x244>
 80171fa:	9b00      	ldr	r3, [sp, #0]
 80171fc:	3b01      	subs	r3, #1
 80171fe:	9300      	str	r3, [sp, #0]
 8017200:	2300      	movs	r3, #0
 8017202:	930b      	str	r3, [sp, #44]	; 0x2c
 8017204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017206:	1b5d      	subs	r5, r3, r5
 8017208:	1e6b      	subs	r3, r5, #1
 801720a:	9305      	str	r3, [sp, #20]
 801720c:	bf45      	ittet	mi
 801720e:	f1c5 0301 	rsbmi	r3, r5, #1
 8017212:	9304      	strmi	r3, [sp, #16]
 8017214:	2300      	movpl	r3, #0
 8017216:	2300      	movmi	r3, #0
 8017218:	bf4c      	ite	mi
 801721a:	9305      	strmi	r3, [sp, #20]
 801721c:	9304      	strpl	r3, [sp, #16]
 801721e:	9b00      	ldr	r3, [sp, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	db3d      	blt.n	80172a0 <_dtoa_r+0x248>
 8017224:	9b05      	ldr	r3, [sp, #20]
 8017226:	9a00      	ldr	r2, [sp, #0]
 8017228:	920a      	str	r2, [sp, #40]	; 0x28
 801722a:	4413      	add	r3, r2
 801722c:	9305      	str	r3, [sp, #20]
 801722e:	2300      	movs	r3, #0
 8017230:	9307      	str	r3, [sp, #28]
 8017232:	9b06      	ldr	r3, [sp, #24]
 8017234:	2b09      	cmp	r3, #9
 8017236:	f200 8089 	bhi.w	801734c <_dtoa_r+0x2f4>
 801723a:	2b05      	cmp	r3, #5
 801723c:	bfc4      	itt	gt
 801723e:	3b04      	subgt	r3, #4
 8017240:	9306      	strgt	r3, [sp, #24]
 8017242:	9b06      	ldr	r3, [sp, #24]
 8017244:	f1a3 0302 	sub.w	r3, r3, #2
 8017248:	bfcc      	ite	gt
 801724a:	2500      	movgt	r5, #0
 801724c:	2501      	movle	r5, #1
 801724e:	2b03      	cmp	r3, #3
 8017250:	f200 8087 	bhi.w	8017362 <_dtoa_r+0x30a>
 8017254:	e8df f003 	tbb	[pc, r3]
 8017258:	59383a2d 	.word	0x59383a2d
 801725c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017260:	441d      	add	r5, r3
 8017262:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017266:	2b20      	cmp	r3, #32
 8017268:	bfc1      	itttt	gt
 801726a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801726e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017272:	fa0b f303 	lslgt.w	r3, fp, r3
 8017276:	fa26 f000 	lsrgt.w	r0, r6, r0
 801727a:	bfda      	itte	le
 801727c:	f1c3 0320 	rsble	r3, r3, #32
 8017280:	fa06 f003 	lslle.w	r0, r6, r3
 8017284:	4318      	orrgt	r0, r3
 8017286:	f7e9 f95d 	bl	8000544 <__aeabi_ui2d>
 801728a:	2301      	movs	r3, #1
 801728c:	4606      	mov	r6, r0
 801728e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017292:	3d01      	subs	r5, #1
 8017294:	930e      	str	r3, [sp, #56]	; 0x38
 8017296:	e76a      	b.n	801716e <_dtoa_r+0x116>
 8017298:	2301      	movs	r3, #1
 801729a:	e7b2      	b.n	8017202 <_dtoa_r+0x1aa>
 801729c:	900b      	str	r0, [sp, #44]	; 0x2c
 801729e:	e7b1      	b.n	8017204 <_dtoa_r+0x1ac>
 80172a0:	9b04      	ldr	r3, [sp, #16]
 80172a2:	9a00      	ldr	r2, [sp, #0]
 80172a4:	1a9b      	subs	r3, r3, r2
 80172a6:	9304      	str	r3, [sp, #16]
 80172a8:	4253      	negs	r3, r2
 80172aa:	9307      	str	r3, [sp, #28]
 80172ac:	2300      	movs	r3, #0
 80172ae:	930a      	str	r3, [sp, #40]	; 0x28
 80172b0:	e7bf      	b.n	8017232 <_dtoa_r+0x1da>
 80172b2:	2300      	movs	r3, #0
 80172b4:	9308      	str	r3, [sp, #32]
 80172b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dc55      	bgt.n	8017368 <_dtoa_r+0x310>
 80172bc:	2301      	movs	r3, #1
 80172be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80172c2:	461a      	mov	r2, r3
 80172c4:	9209      	str	r2, [sp, #36]	; 0x24
 80172c6:	e00c      	b.n	80172e2 <_dtoa_r+0x28a>
 80172c8:	2301      	movs	r3, #1
 80172ca:	e7f3      	b.n	80172b4 <_dtoa_r+0x25c>
 80172cc:	2300      	movs	r3, #0
 80172ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172d0:	9308      	str	r3, [sp, #32]
 80172d2:	9b00      	ldr	r3, [sp, #0]
 80172d4:	4413      	add	r3, r2
 80172d6:	9302      	str	r3, [sp, #8]
 80172d8:	3301      	adds	r3, #1
 80172da:	2b01      	cmp	r3, #1
 80172dc:	9303      	str	r3, [sp, #12]
 80172de:	bfb8      	it	lt
 80172e0:	2301      	movlt	r3, #1
 80172e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80172e4:	2200      	movs	r2, #0
 80172e6:	6042      	str	r2, [r0, #4]
 80172e8:	2204      	movs	r2, #4
 80172ea:	f102 0614 	add.w	r6, r2, #20
 80172ee:	429e      	cmp	r6, r3
 80172f0:	6841      	ldr	r1, [r0, #4]
 80172f2:	d93d      	bls.n	8017370 <_dtoa_r+0x318>
 80172f4:	4620      	mov	r0, r4
 80172f6:	f000 fcad 	bl	8017c54 <_Balloc>
 80172fa:	9001      	str	r0, [sp, #4]
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d13b      	bne.n	8017378 <_dtoa_r+0x320>
 8017300:	4b11      	ldr	r3, [pc, #68]	; (8017348 <_dtoa_r+0x2f0>)
 8017302:	4602      	mov	r2, r0
 8017304:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017308:	e6c0      	b.n	801708c <_dtoa_r+0x34>
 801730a:	2301      	movs	r3, #1
 801730c:	e7df      	b.n	80172ce <_dtoa_r+0x276>
 801730e:	bf00      	nop
 8017310:	636f4361 	.word	0x636f4361
 8017314:	3fd287a7 	.word	0x3fd287a7
 8017318:	8b60c8b3 	.word	0x8b60c8b3
 801731c:	3fc68a28 	.word	0x3fc68a28
 8017320:	509f79fb 	.word	0x509f79fb
 8017324:	3fd34413 	.word	0x3fd34413
 8017328:	08019b76 	.word	0x08019b76
 801732c:	08019b8d 	.word	0x08019b8d
 8017330:	7ff00000 	.word	0x7ff00000
 8017334:	08019b72 	.word	0x08019b72
 8017338:	08019b69 	.word	0x08019b69
 801733c:	08019a45 	.word	0x08019a45
 8017340:	3ff80000 	.word	0x3ff80000
 8017344:	08019c80 	.word	0x08019c80
 8017348:	08019be8 	.word	0x08019be8
 801734c:	2501      	movs	r5, #1
 801734e:	2300      	movs	r3, #0
 8017350:	9306      	str	r3, [sp, #24]
 8017352:	9508      	str	r5, [sp, #32]
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801735c:	2200      	movs	r2, #0
 801735e:	2312      	movs	r3, #18
 8017360:	e7b0      	b.n	80172c4 <_dtoa_r+0x26c>
 8017362:	2301      	movs	r3, #1
 8017364:	9308      	str	r3, [sp, #32]
 8017366:	e7f5      	b.n	8017354 <_dtoa_r+0x2fc>
 8017368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801736a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801736e:	e7b8      	b.n	80172e2 <_dtoa_r+0x28a>
 8017370:	3101      	adds	r1, #1
 8017372:	6041      	str	r1, [r0, #4]
 8017374:	0052      	lsls	r2, r2, #1
 8017376:	e7b8      	b.n	80172ea <_dtoa_r+0x292>
 8017378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801737a:	9a01      	ldr	r2, [sp, #4]
 801737c:	601a      	str	r2, [r3, #0]
 801737e:	9b03      	ldr	r3, [sp, #12]
 8017380:	2b0e      	cmp	r3, #14
 8017382:	f200 809d 	bhi.w	80174c0 <_dtoa_r+0x468>
 8017386:	2d00      	cmp	r5, #0
 8017388:	f000 809a 	beq.w	80174c0 <_dtoa_r+0x468>
 801738c:	9b00      	ldr	r3, [sp, #0]
 801738e:	2b00      	cmp	r3, #0
 8017390:	dd32      	ble.n	80173f8 <_dtoa_r+0x3a0>
 8017392:	4ab7      	ldr	r2, [pc, #732]	; (8017670 <_dtoa_r+0x618>)
 8017394:	f003 030f 	and.w	r3, r3, #15
 8017398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801739c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80173a0:	9b00      	ldr	r3, [sp, #0]
 80173a2:	05d8      	lsls	r0, r3, #23
 80173a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80173a8:	d516      	bpl.n	80173d8 <_dtoa_r+0x380>
 80173aa:	4bb2      	ldr	r3, [pc, #712]	; (8017674 <_dtoa_r+0x61c>)
 80173ac:	ec51 0b19 	vmov	r0, r1, d9
 80173b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80173b4:	f7e9 fa6a 	bl	800088c <__aeabi_ddiv>
 80173b8:	f007 070f 	and.w	r7, r7, #15
 80173bc:	4682      	mov	sl, r0
 80173be:	468b      	mov	fp, r1
 80173c0:	2503      	movs	r5, #3
 80173c2:	4eac      	ldr	r6, [pc, #688]	; (8017674 <_dtoa_r+0x61c>)
 80173c4:	b957      	cbnz	r7, 80173dc <_dtoa_r+0x384>
 80173c6:	4642      	mov	r2, r8
 80173c8:	464b      	mov	r3, r9
 80173ca:	4650      	mov	r0, sl
 80173cc:	4659      	mov	r1, fp
 80173ce:	f7e9 fa5d 	bl	800088c <__aeabi_ddiv>
 80173d2:	4682      	mov	sl, r0
 80173d4:	468b      	mov	fp, r1
 80173d6:	e028      	b.n	801742a <_dtoa_r+0x3d2>
 80173d8:	2502      	movs	r5, #2
 80173da:	e7f2      	b.n	80173c2 <_dtoa_r+0x36a>
 80173dc:	07f9      	lsls	r1, r7, #31
 80173de:	d508      	bpl.n	80173f2 <_dtoa_r+0x39a>
 80173e0:	4640      	mov	r0, r8
 80173e2:	4649      	mov	r1, r9
 80173e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80173e8:	f7e9 f926 	bl	8000638 <__aeabi_dmul>
 80173ec:	3501      	adds	r5, #1
 80173ee:	4680      	mov	r8, r0
 80173f0:	4689      	mov	r9, r1
 80173f2:	107f      	asrs	r7, r7, #1
 80173f4:	3608      	adds	r6, #8
 80173f6:	e7e5      	b.n	80173c4 <_dtoa_r+0x36c>
 80173f8:	f000 809b 	beq.w	8017532 <_dtoa_r+0x4da>
 80173fc:	9b00      	ldr	r3, [sp, #0]
 80173fe:	4f9d      	ldr	r7, [pc, #628]	; (8017674 <_dtoa_r+0x61c>)
 8017400:	425e      	negs	r6, r3
 8017402:	4b9b      	ldr	r3, [pc, #620]	; (8017670 <_dtoa_r+0x618>)
 8017404:	f006 020f 	and.w	r2, r6, #15
 8017408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017410:	ec51 0b19 	vmov	r0, r1, d9
 8017414:	f7e9 f910 	bl	8000638 <__aeabi_dmul>
 8017418:	1136      	asrs	r6, r6, #4
 801741a:	4682      	mov	sl, r0
 801741c:	468b      	mov	fp, r1
 801741e:	2300      	movs	r3, #0
 8017420:	2502      	movs	r5, #2
 8017422:	2e00      	cmp	r6, #0
 8017424:	d17a      	bne.n	801751c <_dtoa_r+0x4c4>
 8017426:	2b00      	cmp	r3, #0
 8017428:	d1d3      	bne.n	80173d2 <_dtoa_r+0x37a>
 801742a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801742c:	2b00      	cmp	r3, #0
 801742e:	f000 8082 	beq.w	8017536 <_dtoa_r+0x4de>
 8017432:	4b91      	ldr	r3, [pc, #580]	; (8017678 <_dtoa_r+0x620>)
 8017434:	2200      	movs	r2, #0
 8017436:	4650      	mov	r0, sl
 8017438:	4659      	mov	r1, fp
 801743a:	f7e9 fb6f 	bl	8000b1c <__aeabi_dcmplt>
 801743e:	2800      	cmp	r0, #0
 8017440:	d079      	beq.n	8017536 <_dtoa_r+0x4de>
 8017442:	9b03      	ldr	r3, [sp, #12]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d076      	beq.n	8017536 <_dtoa_r+0x4de>
 8017448:	9b02      	ldr	r3, [sp, #8]
 801744a:	2b00      	cmp	r3, #0
 801744c:	dd36      	ble.n	80174bc <_dtoa_r+0x464>
 801744e:	9b00      	ldr	r3, [sp, #0]
 8017450:	4650      	mov	r0, sl
 8017452:	4659      	mov	r1, fp
 8017454:	1e5f      	subs	r7, r3, #1
 8017456:	2200      	movs	r2, #0
 8017458:	4b88      	ldr	r3, [pc, #544]	; (801767c <_dtoa_r+0x624>)
 801745a:	f7e9 f8ed 	bl	8000638 <__aeabi_dmul>
 801745e:	9e02      	ldr	r6, [sp, #8]
 8017460:	4682      	mov	sl, r0
 8017462:	468b      	mov	fp, r1
 8017464:	3501      	adds	r5, #1
 8017466:	4628      	mov	r0, r5
 8017468:	f7e9 f87c 	bl	8000564 <__aeabi_i2d>
 801746c:	4652      	mov	r2, sl
 801746e:	465b      	mov	r3, fp
 8017470:	f7e9 f8e2 	bl	8000638 <__aeabi_dmul>
 8017474:	4b82      	ldr	r3, [pc, #520]	; (8017680 <_dtoa_r+0x628>)
 8017476:	2200      	movs	r2, #0
 8017478:	f7e8 ff28 	bl	80002cc <__adddf3>
 801747c:	46d0      	mov	r8, sl
 801747e:	46d9      	mov	r9, fp
 8017480:	4682      	mov	sl, r0
 8017482:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017486:	2e00      	cmp	r6, #0
 8017488:	d158      	bne.n	801753c <_dtoa_r+0x4e4>
 801748a:	4b7e      	ldr	r3, [pc, #504]	; (8017684 <_dtoa_r+0x62c>)
 801748c:	2200      	movs	r2, #0
 801748e:	4640      	mov	r0, r8
 8017490:	4649      	mov	r1, r9
 8017492:	f7e8 ff19 	bl	80002c8 <__aeabi_dsub>
 8017496:	4652      	mov	r2, sl
 8017498:	465b      	mov	r3, fp
 801749a:	4680      	mov	r8, r0
 801749c:	4689      	mov	r9, r1
 801749e:	f7e9 fb5b 	bl	8000b58 <__aeabi_dcmpgt>
 80174a2:	2800      	cmp	r0, #0
 80174a4:	f040 8295 	bne.w	80179d2 <_dtoa_r+0x97a>
 80174a8:	4652      	mov	r2, sl
 80174aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80174ae:	4640      	mov	r0, r8
 80174b0:	4649      	mov	r1, r9
 80174b2:	f7e9 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80174b6:	2800      	cmp	r0, #0
 80174b8:	f040 8289 	bne.w	80179ce <_dtoa_r+0x976>
 80174bc:	ec5b ab19 	vmov	sl, fp, d9
 80174c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	f2c0 8148 	blt.w	8017758 <_dtoa_r+0x700>
 80174c8:	9a00      	ldr	r2, [sp, #0]
 80174ca:	2a0e      	cmp	r2, #14
 80174cc:	f300 8144 	bgt.w	8017758 <_dtoa_r+0x700>
 80174d0:	4b67      	ldr	r3, [pc, #412]	; (8017670 <_dtoa_r+0x618>)
 80174d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80174d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80174da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174dc:	2b00      	cmp	r3, #0
 80174de:	f280 80d5 	bge.w	801768c <_dtoa_r+0x634>
 80174e2:	9b03      	ldr	r3, [sp, #12]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	f300 80d1 	bgt.w	801768c <_dtoa_r+0x634>
 80174ea:	f040 826f 	bne.w	80179cc <_dtoa_r+0x974>
 80174ee:	4b65      	ldr	r3, [pc, #404]	; (8017684 <_dtoa_r+0x62c>)
 80174f0:	2200      	movs	r2, #0
 80174f2:	4640      	mov	r0, r8
 80174f4:	4649      	mov	r1, r9
 80174f6:	f7e9 f89f 	bl	8000638 <__aeabi_dmul>
 80174fa:	4652      	mov	r2, sl
 80174fc:	465b      	mov	r3, fp
 80174fe:	f7e9 fb21 	bl	8000b44 <__aeabi_dcmpge>
 8017502:	9e03      	ldr	r6, [sp, #12]
 8017504:	4637      	mov	r7, r6
 8017506:	2800      	cmp	r0, #0
 8017508:	f040 8245 	bne.w	8017996 <_dtoa_r+0x93e>
 801750c:	9d01      	ldr	r5, [sp, #4]
 801750e:	2331      	movs	r3, #49	; 0x31
 8017510:	f805 3b01 	strb.w	r3, [r5], #1
 8017514:	9b00      	ldr	r3, [sp, #0]
 8017516:	3301      	adds	r3, #1
 8017518:	9300      	str	r3, [sp, #0]
 801751a:	e240      	b.n	801799e <_dtoa_r+0x946>
 801751c:	07f2      	lsls	r2, r6, #31
 801751e:	d505      	bpl.n	801752c <_dtoa_r+0x4d4>
 8017520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017524:	f7e9 f888 	bl	8000638 <__aeabi_dmul>
 8017528:	3501      	adds	r5, #1
 801752a:	2301      	movs	r3, #1
 801752c:	1076      	asrs	r6, r6, #1
 801752e:	3708      	adds	r7, #8
 8017530:	e777      	b.n	8017422 <_dtoa_r+0x3ca>
 8017532:	2502      	movs	r5, #2
 8017534:	e779      	b.n	801742a <_dtoa_r+0x3d2>
 8017536:	9f00      	ldr	r7, [sp, #0]
 8017538:	9e03      	ldr	r6, [sp, #12]
 801753a:	e794      	b.n	8017466 <_dtoa_r+0x40e>
 801753c:	9901      	ldr	r1, [sp, #4]
 801753e:	4b4c      	ldr	r3, [pc, #304]	; (8017670 <_dtoa_r+0x618>)
 8017540:	4431      	add	r1, r6
 8017542:	910d      	str	r1, [sp, #52]	; 0x34
 8017544:	9908      	ldr	r1, [sp, #32]
 8017546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801754a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801754e:	2900      	cmp	r1, #0
 8017550:	d043      	beq.n	80175da <_dtoa_r+0x582>
 8017552:	494d      	ldr	r1, [pc, #308]	; (8017688 <_dtoa_r+0x630>)
 8017554:	2000      	movs	r0, #0
 8017556:	f7e9 f999 	bl	800088c <__aeabi_ddiv>
 801755a:	4652      	mov	r2, sl
 801755c:	465b      	mov	r3, fp
 801755e:	f7e8 feb3 	bl	80002c8 <__aeabi_dsub>
 8017562:	9d01      	ldr	r5, [sp, #4]
 8017564:	4682      	mov	sl, r0
 8017566:	468b      	mov	fp, r1
 8017568:	4649      	mov	r1, r9
 801756a:	4640      	mov	r0, r8
 801756c:	f7e9 fb14 	bl	8000b98 <__aeabi_d2iz>
 8017570:	4606      	mov	r6, r0
 8017572:	f7e8 fff7 	bl	8000564 <__aeabi_i2d>
 8017576:	4602      	mov	r2, r0
 8017578:	460b      	mov	r3, r1
 801757a:	4640      	mov	r0, r8
 801757c:	4649      	mov	r1, r9
 801757e:	f7e8 fea3 	bl	80002c8 <__aeabi_dsub>
 8017582:	3630      	adds	r6, #48	; 0x30
 8017584:	f805 6b01 	strb.w	r6, [r5], #1
 8017588:	4652      	mov	r2, sl
 801758a:	465b      	mov	r3, fp
 801758c:	4680      	mov	r8, r0
 801758e:	4689      	mov	r9, r1
 8017590:	f7e9 fac4 	bl	8000b1c <__aeabi_dcmplt>
 8017594:	2800      	cmp	r0, #0
 8017596:	d163      	bne.n	8017660 <_dtoa_r+0x608>
 8017598:	4642      	mov	r2, r8
 801759a:	464b      	mov	r3, r9
 801759c:	4936      	ldr	r1, [pc, #216]	; (8017678 <_dtoa_r+0x620>)
 801759e:	2000      	movs	r0, #0
 80175a0:	f7e8 fe92 	bl	80002c8 <__aeabi_dsub>
 80175a4:	4652      	mov	r2, sl
 80175a6:	465b      	mov	r3, fp
 80175a8:	f7e9 fab8 	bl	8000b1c <__aeabi_dcmplt>
 80175ac:	2800      	cmp	r0, #0
 80175ae:	f040 80b5 	bne.w	801771c <_dtoa_r+0x6c4>
 80175b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175b4:	429d      	cmp	r5, r3
 80175b6:	d081      	beq.n	80174bc <_dtoa_r+0x464>
 80175b8:	4b30      	ldr	r3, [pc, #192]	; (801767c <_dtoa_r+0x624>)
 80175ba:	2200      	movs	r2, #0
 80175bc:	4650      	mov	r0, sl
 80175be:	4659      	mov	r1, fp
 80175c0:	f7e9 f83a 	bl	8000638 <__aeabi_dmul>
 80175c4:	4b2d      	ldr	r3, [pc, #180]	; (801767c <_dtoa_r+0x624>)
 80175c6:	4682      	mov	sl, r0
 80175c8:	468b      	mov	fp, r1
 80175ca:	4640      	mov	r0, r8
 80175cc:	4649      	mov	r1, r9
 80175ce:	2200      	movs	r2, #0
 80175d0:	f7e9 f832 	bl	8000638 <__aeabi_dmul>
 80175d4:	4680      	mov	r8, r0
 80175d6:	4689      	mov	r9, r1
 80175d8:	e7c6      	b.n	8017568 <_dtoa_r+0x510>
 80175da:	4650      	mov	r0, sl
 80175dc:	4659      	mov	r1, fp
 80175de:	f7e9 f82b 	bl	8000638 <__aeabi_dmul>
 80175e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175e4:	9d01      	ldr	r5, [sp, #4]
 80175e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80175e8:	4682      	mov	sl, r0
 80175ea:	468b      	mov	fp, r1
 80175ec:	4649      	mov	r1, r9
 80175ee:	4640      	mov	r0, r8
 80175f0:	f7e9 fad2 	bl	8000b98 <__aeabi_d2iz>
 80175f4:	4606      	mov	r6, r0
 80175f6:	f7e8 ffb5 	bl	8000564 <__aeabi_i2d>
 80175fa:	3630      	adds	r6, #48	; 0x30
 80175fc:	4602      	mov	r2, r0
 80175fe:	460b      	mov	r3, r1
 8017600:	4640      	mov	r0, r8
 8017602:	4649      	mov	r1, r9
 8017604:	f7e8 fe60 	bl	80002c8 <__aeabi_dsub>
 8017608:	f805 6b01 	strb.w	r6, [r5], #1
 801760c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801760e:	429d      	cmp	r5, r3
 8017610:	4680      	mov	r8, r0
 8017612:	4689      	mov	r9, r1
 8017614:	f04f 0200 	mov.w	r2, #0
 8017618:	d124      	bne.n	8017664 <_dtoa_r+0x60c>
 801761a:	4b1b      	ldr	r3, [pc, #108]	; (8017688 <_dtoa_r+0x630>)
 801761c:	4650      	mov	r0, sl
 801761e:	4659      	mov	r1, fp
 8017620:	f7e8 fe54 	bl	80002cc <__adddf3>
 8017624:	4602      	mov	r2, r0
 8017626:	460b      	mov	r3, r1
 8017628:	4640      	mov	r0, r8
 801762a:	4649      	mov	r1, r9
 801762c:	f7e9 fa94 	bl	8000b58 <__aeabi_dcmpgt>
 8017630:	2800      	cmp	r0, #0
 8017632:	d173      	bne.n	801771c <_dtoa_r+0x6c4>
 8017634:	4652      	mov	r2, sl
 8017636:	465b      	mov	r3, fp
 8017638:	4913      	ldr	r1, [pc, #76]	; (8017688 <_dtoa_r+0x630>)
 801763a:	2000      	movs	r0, #0
 801763c:	f7e8 fe44 	bl	80002c8 <__aeabi_dsub>
 8017640:	4602      	mov	r2, r0
 8017642:	460b      	mov	r3, r1
 8017644:	4640      	mov	r0, r8
 8017646:	4649      	mov	r1, r9
 8017648:	f7e9 fa68 	bl	8000b1c <__aeabi_dcmplt>
 801764c:	2800      	cmp	r0, #0
 801764e:	f43f af35 	beq.w	80174bc <_dtoa_r+0x464>
 8017652:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017654:	1e6b      	subs	r3, r5, #1
 8017656:	930f      	str	r3, [sp, #60]	; 0x3c
 8017658:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801765c:	2b30      	cmp	r3, #48	; 0x30
 801765e:	d0f8      	beq.n	8017652 <_dtoa_r+0x5fa>
 8017660:	9700      	str	r7, [sp, #0]
 8017662:	e049      	b.n	80176f8 <_dtoa_r+0x6a0>
 8017664:	4b05      	ldr	r3, [pc, #20]	; (801767c <_dtoa_r+0x624>)
 8017666:	f7e8 ffe7 	bl	8000638 <__aeabi_dmul>
 801766a:	4680      	mov	r8, r0
 801766c:	4689      	mov	r9, r1
 801766e:	e7bd      	b.n	80175ec <_dtoa_r+0x594>
 8017670:	08019c80 	.word	0x08019c80
 8017674:	08019c58 	.word	0x08019c58
 8017678:	3ff00000 	.word	0x3ff00000
 801767c:	40240000 	.word	0x40240000
 8017680:	401c0000 	.word	0x401c0000
 8017684:	40140000 	.word	0x40140000
 8017688:	3fe00000 	.word	0x3fe00000
 801768c:	9d01      	ldr	r5, [sp, #4]
 801768e:	4656      	mov	r6, sl
 8017690:	465f      	mov	r7, fp
 8017692:	4642      	mov	r2, r8
 8017694:	464b      	mov	r3, r9
 8017696:	4630      	mov	r0, r6
 8017698:	4639      	mov	r1, r7
 801769a:	f7e9 f8f7 	bl	800088c <__aeabi_ddiv>
 801769e:	f7e9 fa7b 	bl	8000b98 <__aeabi_d2iz>
 80176a2:	4682      	mov	sl, r0
 80176a4:	f7e8 ff5e 	bl	8000564 <__aeabi_i2d>
 80176a8:	4642      	mov	r2, r8
 80176aa:	464b      	mov	r3, r9
 80176ac:	f7e8 ffc4 	bl	8000638 <__aeabi_dmul>
 80176b0:	4602      	mov	r2, r0
 80176b2:	460b      	mov	r3, r1
 80176b4:	4630      	mov	r0, r6
 80176b6:	4639      	mov	r1, r7
 80176b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80176bc:	f7e8 fe04 	bl	80002c8 <__aeabi_dsub>
 80176c0:	f805 6b01 	strb.w	r6, [r5], #1
 80176c4:	9e01      	ldr	r6, [sp, #4]
 80176c6:	9f03      	ldr	r7, [sp, #12]
 80176c8:	1bae      	subs	r6, r5, r6
 80176ca:	42b7      	cmp	r7, r6
 80176cc:	4602      	mov	r2, r0
 80176ce:	460b      	mov	r3, r1
 80176d0:	d135      	bne.n	801773e <_dtoa_r+0x6e6>
 80176d2:	f7e8 fdfb 	bl	80002cc <__adddf3>
 80176d6:	4642      	mov	r2, r8
 80176d8:	464b      	mov	r3, r9
 80176da:	4606      	mov	r6, r0
 80176dc:	460f      	mov	r7, r1
 80176de:	f7e9 fa3b 	bl	8000b58 <__aeabi_dcmpgt>
 80176e2:	b9d0      	cbnz	r0, 801771a <_dtoa_r+0x6c2>
 80176e4:	4642      	mov	r2, r8
 80176e6:	464b      	mov	r3, r9
 80176e8:	4630      	mov	r0, r6
 80176ea:	4639      	mov	r1, r7
 80176ec:	f7e9 fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 80176f0:	b110      	cbz	r0, 80176f8 <_dtoa_r+0x6a0>
 80176f2:	f01a 0f01 	tst.w	sl, #1
 80176f6:	d110      	bne.n	801771a <_dtoa_r+0x6c2>
 80176f8:	4620      	mov	r0, r4
 80176fa:	ee18 1a10 	vmov	r1, s16
 80176fe:	f000 fae9 	bl	8017cd4 <_Bfree>
 8017702:	2300      	movs	r3, #0
 8017704:	9800      	ldr	r0, [sp, #0]
 8017706:	702b      	strb	r3, [r5, #0]
 8017708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801770a:	3001      	adds	r0, #1
 801770c:	6018      	str	r0, [r3, #0]
 801770e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017710:	2b00      	cmp	r3, #0
 8017712:	f43f acf1 	beq.w	80170f8 <_dtoa_r+0xa0>
 8017716:	601d      	str	r5, [r3, #0]
 8017718:	e4ee      	b.n	80170f8 <_dtoa_r+0xa0>
 801771a:	9f00      	ldr	r7, [sp, #0]
 801771c:	462b      	mov	r3, r5
 801771e:	461d      	mov	r5, r3
 8017720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017724:	2a39      	cmp	r2, #57	; 0x39
 8017726:	d106      	bne.n	8017736 <_dtoa_r+0x6de>
 8017728:	9a01      	ldr	r2, [sp, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d1f7      	bne.n	801771e <_dtoa_r+0x6c6>
 801772e:	9901      	ldr	r1, [sp, #4]
 8017730:	2230      	movs	r2, #48	; 0x30
 8017732:	3701      	adds	r7, #1
 8017734:	700a      	strb	r2, [r1, #0]
 8017736:	781a      	ldrb	r2, [r3, #0]
 8017738:	3201      	adds	r2, #1
 801773a:	701a      	strb	r2, [r3, #0]
 801773c:	e790      	b.n	8017660 <_dtoa_r+0x608>
 801773e:	4ba6      	ldr	r3, [pc, #664]	; (80179d8 <_dtoa_r+0x980>)
 8017740:	2200      	movs	r2, #0
 8017742:	f7e8 ff79 	bl	8000638 <__aeabi_dmul>
 8017746:	2200      	movs	r2, #0
 8017748:	2300      	movs	r3, #0
 801774a:	4606      	mov	r6, r0
 801774c:	460f      	mov	r7, r1
 801774e:	f7e9 f9db 	bl	8000b08 <__aeabi_dcmpeq>
 8017752:	2800      	cmp	r0, #0
 8017754:	d09d      	beq.n	8017692 <_dtoa_r+0x63a>
 8017756:	e7cf      	b.n	80176f8 <_dtoa_r+0x6a0>
 8017758:	9a08      	ldr	r2, [sp, #32]
 801775a:	2a00      	cmp	r2, #0
 801775c:	f000 80d7 	beq.w	801790e <_dtoa_r+0x8b6>
 8017760:	9a06      	ldr	r2, [sp, #24]
 8017762:	2a01      	cmp	r2, #1
 8017764:	f300 80ba 	bgt.w	80178dc <_dtoa_r+0x884>
 8017768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801776a:	2a00      	cmp	r2, #0
 801776c:	f000 80b2 	beq.w	80178d4 <_dtoa_r+0x87c>
 8017770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017774:	9e07      	ldr	r6, [sp, #28]
 8017776:	9d04      	ldr	r5, [sp, #16]
 8017778:	9a04      	ldr	r2, [sp, #16]
 801777a:	441a      	add	r2, r3
 801777c:	9204      	str	r2, [sp, #16]
 801777e:	9a05      	ldr	r2, [sp, #20]
 8017780:	2101      	movs	r1, #1
 8017782:	441a      	add	r2, r3
 8017784:	4620      	mov	r0, r4
 8017786:	9205      	str	r2, [sp, #20]
 8017788:	f000 fb5c 	bl	8017e44 <__i2b>
 801778c:	4607      	mov	r7, r0
 801778e:	2d00      	cmp	r5, #0
 8017790:	dd0c      	ble.n	80177ac <_dtoa_r+0x754>
 8017792:	9b05      	ldr	r3, [sp, #20]
 8017794:	2b00      	cmp	r3, #0
 8017796:	dd09      	ble.n	80177ac <_dtoa_r+0x754>
 8017798:	42ab      	cmp	r3, r5
 801779a:	9a04      	ldr	r2, [sp, #16]
 801779c:	bfa8      	it	ge
 801779e:	462b      	movge	r3, r5
 80177a0:	1ad2      	subs	r2, r2, r3
 80177a2:	9204      	str	r2, [sp, #16]
 80177a4:	9a05      	ldr	r2, [sp, #20]
 80177a6:	1aed      	subs	r5, r5, r3
 80177a8:	1ad3      	subs	r3, r2, r3
 80177aa:	9305      	str	r3, [sp, #20]
 80177ac:	9b07      	ldr	r3, [sp, #28]
 80177ae:	b31b      	cbz	r3, 80177f8 <_dtoa_r+0x7a0>
 80177b0:	9b08      	ldr	r3, [sp, #32]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	f000 80af 	beq.w	8017916 <_dtoa_r+0x8be>
 80177b8:	2e00      	cmp	r6, #0
 80177ba:	dd13      	ble.n	80177e4 <_dtoa_r+0x78c>
 80177bc:	4639      	mov	r1, r7
 80177be:	4632      	mov	r2, r6
 80177c0:	4620      	mov	r0, r4
 80177c2:	f000 fbff 	bl	8017fc4 <__pow5mult>
 80177c6:	ee18 2a10 	vmov	r2, s16
 80177ca:	4601      	mov	r1, r0
 80177cc:	4607      	mov	r7, r0
 80177ce:	4620      	mov	r0, r4
 80177d0:	f000 fb4e 	bl	8017e70 <__multiply>
 80177d4:	ee18 1a10 	vmov	r1, s16
 80177d8:	4680      	mov	r8, r0
 80177da:	4620      	mov	r0, r4
 80177dc:	f000 fa7a 	bl	8017cd4 <_Bfree>
 80177e0:	ee08 8a10 	vmov	s16, r8
 80177e4:	9b07      	ldr	r3, [sp, #28]
 80177e6:	1b9a      	subs	r2, r3, r6
 80177e8:	d006      	beq.n	80177f8 <_dtoa_r+0x7a0>
 80177ea:	ee18 1a10 	vmov	r1, s16
 80177ee:	4620      	mov	r0, r4
 80177f0:	f000 fbe8 	bl	8017fc4 <__pow5mult>
 80177f4:	ee08 0a10 	vmov	s16, r0
 80177f8:	2101      	movs	r1, #1
 80177fa:	4620      	mov	r0, r4
 80177fc:	f000 fb22 	bl	8017e44 <__i2b>
 8017800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017802:	2b00      	cmp	r3, #0
 8017804:	4606      	mov	r6, r0
 8017806:	f340 8088 	ble.w	801791a <_dtoa_r+0x8c2>
 801780a:	461a      	mov	r2, r3
 801780c:	4601      	mov	r1, r0
 801780e:	4620      	mov	r0, r4
 8017810:	f000 fbd8 	bl	8017fc4 <__pow5mult>
 8017814:	9b06      	ldr	r3, [sp, #24]
 8017816:	2b01      	cmp	r3, #1
 8017818:	4606      	mov	r6, r0
 801781a:	f340 8081 	ble.w	8017920 <_dtoa_r+0x8c8>
 801781e:	f04f 0800 	mov.w	r8, #0
 8017822:	6933      	ldr	r3, [r6, #16]
 8017824:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017828:	6918      	ldr	r0, [r3, #16]
 801782a:	f000 fabb 	bl	8017da4 <__hi0bits>
 801782e:	f1c0 0020 	rsb	r0, r0, #32
 8017832:	9b05      	ldr	r3, [sp, #20]
 8017834:	4418      	add	r0, r3
 8017836:	f010 001f 	ands.w	r0, r0, #31
 801783a:	f000 8092 	beq.w	8017962 <_dtoa_r+0x90a>
 801783e:	f1c0 0320 	rsb	r3, r0, #32
 8017842:	2b04      	cmp	r3, #4
 8017844:	f340 808a 	ble.w	801795c <_dtoa_r+0x904>
 8017848:	f1c0 001c 	rsb	r0, r0, #28
 801784c:	9b04      	ldr	r3, [sp, #16]
 801784e:	4403      	add	r3, r0
 8017850:	9304      	str	r3, [sp, #16]
 8017852:	9b05      	ldr	r3, [sp, #20]
 8017854:	4403      	add	r3, r0
 8017856:	4405      	add	r5, r0
 8017858:	9305      	str	r3, [sp, #20]
 801785a:	9b04      	ldr	r3, [sp, #16]
 801785c:	2b00      	cmp	r3, #0
 801785e:	dd07      	ble.n	8017870 <_dtoa_r+0x818>
 8017860:	ee18 1a10 	vmov	r1, s16
 8017864:	461a      	mov	r2, r3
 8017866:	4620      	mov	r0, r4
 8017868:	f000 fc06 	bl	8018078 <__lshift>
 801786c:	ee08 0a10 	vmov	s16, r0
 8017870:	9b05      	ldr	r3, [sp, #20]
 8017872:	2b00      	cmp	r3, #0
 8017874:	dd05      	ble.n	8017882 <_dtoa_r+0x82a>
 8017876:	4631      	mov	r1, r6
 8017878:	461a      	mov	r2, r3
 801787a:	4620      	mov	r0, r4
 801787c:	f000 fbfc 	bl	8018078 <__lshift>
 8017880:	4606      	mov	r6, r0
 8017882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017884:	2b00      	cmp	r3, #0
 8017886:	d06e      	beq.n	8017966 <_dtoa_r+0x90e>
 8017888:	ee18 0a10 	vmov	r0, s16
 801788c:	4631      	mov	r1, r6
 801788e:	f000 fc63 	bl	8018158 <__mcmp>
 8017892:	2800      	cmp	r0, #0
 8017894:	da67      	bge.n	8017966 <_dtoa_r+0x90e>
 8017896:	9b00      	ldr	r3, [sp, #0]
 8017898:	3b01      	subs	r3, #1
 801789a:	ee18 1a10 	vmov	r1, s16
 801789e:	9300      	str	r3, [sp, #0]
 80178a0:	220a      	movs	r2, #10
 80178a2:	2300      	movs	r3, #0
 80178a4:	4620      	mov	r0, r4
 80178a6:	f000 fa37 	bl	8017d18 <__multadd>
 80178aa:	9b08      	ldr	r3, [sp, #32]
 80178ac:	ee08 0a10 	vmov	s16, r0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	f000 81b1 	beq.w	8017c18 <_dtoa_r+0xbc0>
 80178b6:	2300      	movs	r3, #0
 80178b8:	4639      	mov	r1, r7
 80178ba:	220a      	movs	r2, #10
 80178bc:	4620      	mov	r0, r4
 80178be:	f000 fa2b 	bl	8017d18 <__multadd>
 80178c2:	9b02      	ldr	r3, [sp, #8]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	4607      	mov	r7, r0
 80178c8:	f300 808e 	bgt.w	80179e8 <_dtoa_r+0x990>
 80178cc:	9b06      	ldr	r3, [sp, #24]
 80178ce:	2b02      	cmp	r3, #2
 80178d0:	dc51      	bgt.n	8017976 <_dtoa_r+0x91e>
 80178d2:	e089      	b.n	80179e8 <_dtoa_r+0x990>
 80178d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80178da:	e74b      	b.n	8017774 <_dtoa_r+0x71c>
 80178dc:	9b03      	ldr	r3, [sp, #12]
 80178de:	1e5e      	subs	r6, r3, #1
 80178e0:	9b07      	ldr	r3, [sp, #28]
 80178e2:	42b3      	cmp	r3, r6
 80178e4:	bfbf      	itttt	lt
 80178e6:	9b07      	ldrlt	r3, [sp, #28]
 80178e8:	9607      	strlt	r6, [sp, #28]
 80178ea:	1af2      	sublt	r2, r6, r3
 80178ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80178ee:	bfb6      	itet	lt
 80178f0:	189b      	addlt	r3, r3, r2
 80178f2:	1b9e      	subge	r6, r3, r6
 80178f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80178f6:	9b03      	ldr	r3, [sp, #12]
 80178f8:	bfb8      	it	lt
 80178fa:	2600      	movlt	r6, #0
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	bfb7      	itett	lt
 8017900:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017904:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017908:	1a9d      	sublt	r5, r3, r2
 801790a:	2300      	movlt	r3, #0
 801790c:	e734      	b.n	8017778 <_dtoa_r+0x720>
 801790e:	9e07      	ldr	r6, [sp, #28]
 8017910:	9d04      	ldr	r5, [sp, #16]
 8017912:	9f08      	ldr	r7, [sp, #32]
 8017914:	e73b      	b.n	801778e <_dtoa_r+0x736>
 8017916:	9a07      	ldr	r2, [sp, #28]
 8017918:	e767      	b.n	80177ea <_dtoa_r+0x792>
 801791a:	9b06      	ldr	r3, [sp, #24]
 801791c:	2b01      	cmp	r3, #1
 801791e:	dc18      	bgt.n	8017952 <_dtoa_r+0x8fa>
 8017920:	f1ba 0f00 	cmp.w	sl, #0
 8017924:	d115      	bne.n	8017952 <_dtoa_r+0x8fa>
 8017926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801792a:	b993      	cbnz	r3, 8017952 <_dtoa_r+0x8fa>
 801792c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017930:	0d1b      	lsrs	r3, r3, #20
 8017932:	051b      	lsls	r3, r3, #20
 8017934:	b183      	cbz	r3, 8017958 <_dtoa_r+0x900>
 8017936:	9b04      	ldr	r3, [sp, #16]
 8017938:	3301      	adds	r3, #1
 801793a:	9304      	str	r3, [sp, #16]
 801793c:	9b05      	ldr	r3, [sp, #20]
 801793e:	3301      	adds	r3, #1
 8017940:	9305      	str	r3, [sp, #20]
 8017942:	f04f 0801 	mov.w	r8, #1
 8017946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017948:	2b00      	cmp	r3, #0
 801794a:	f47f af6a 	bne.w	8017822 <_dtoa_r+0x7ca>
 801794e:	2001      	movs	r0, #1
 8017950:	e76f      	b.n	8017832 <_dtoa_r+0x7da>
 8017952:	f04f 0800 	mov.w	r8, #0
 8017956:	e7f6      	b.n	8017946 <_dtoa_r+0x8ee>
 8017958:	4698      	mov	r8, r3
 801795a:	e7f4      	b.n	8017946 <_dtoa_r+0x8ee>
 801795c:	f43f af7d 	beq.w	801785a <_dtoa_r+0x802>
 8017960:	4618      	mov	r0, r3
 8017962:	301c      	adds	r0, #28
 8017964:	e772      	b.n	801784c <_dtoa_r+0x7f4>
 8017966:	9b03      	ldr	r3, [sp, #12]
 8017968:	2b00      	cmp	r3, #0
 801796a:	dc37      	bgt.n	80179dc <_dtoa_r+0x984>
 801796c:	9b06      	ldr	r3, [sp, #24]
 801796e:	2b02      	cmp	r3, #2
 8017970:	dd34      	ble.n	80179dc <_dtoa_r+0x984>
 8017972:	9b03      	ldr	r3, [sp, #12]
 8017974:	9302      	str	r3, [sp, #8]
 8017976:	9b02      	ldr	r3, [sp, #8]
 8017978:	b96b      	cbnz	r3, 8017996 <_dtoa_r+0x93e>
 801797a:	4631      	mov	r1, r6
 801797c:	2205      	movs	r2, #5
 801797e:	4620      	mov	r0, r4
 8017980:	f000 f9ca 	bl	8017d18 <__multadd>
 8017984:	4601      	mov	r1, r0
 8017986:	4606      	mov	r6, r0
 8017988:	ee18 0a10 	vmov	r0, s16
 801798c:	f000 fbe4 	bl	8018158 <__mcmp>
 8017990:	2800      	cmp	r0, #0
 8017992:	f73f adbb 	bgt.w	801750c <_dtoa_r+0x4b4>
 8017996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017998:	9d01      	ldr	r5, [sp, #4]
 801799a:	43db      	mvns	r3, r3
 801799c:	9300      	str	r3, [sp, #0]
 801799e:	f04f 0800 	mov.w	r8, #0
 80179a2:	4631      	mov	r1, r6
 80179a4:	4620      	mov	r0, r4
 80179a6:	f000 f995 	bl	8017cd4 <_Bfree>
 80179aa:	2f00      	cmp	r7, #0
 80179ac:	f43f aea4 	beq.w	80176f8 <_dtoa_r+0x6a0>
 80179b0:	f1b8 0f00 	cmp.w	r8, #0
 80179b4:	d005      	beq.n	80179c2 <_dtoa_r+0x96a>
 80179b6:	45b8      	cmp	r8, r7
 80179b8:	d003      	beq.n	80179c2 <_dtoa_r+0x96a>
 80179ba:	4641      	mov	r1, r8
 80179bc:	4620      	mov	r0, r4
 80179be:	f000 f989 	bl	8017cd4 <_Bfree>
 80179c2:	4639      	mov	r1, r7
 80179c4:	4620      	mov	r0, r4
 80179c6:	f000 f985 	bl	8017cd4 <_Bfree>
 80179ca:	e695      	b.n	80176f8 <_dtoa_r+0x6a0>
 80179cc:	2600      	movs	r6, #0
 80179ce:	4637      	mov	r7, r6
 80179d0:	e7e1      	b.n	8017996 <_dtoa_r+0x93e>
 80179d2:	9700      	str	r7, [sp, #0]
 80179d4:	4637      	mov	r7, r6
 80179d6:	e599      	b.n	801750c <_dtoa_r+0x4b4>
 80179d8:	40240000 	.word	0x40240000
 80179dc:	9b08      	ldr	r3, [sp, #32]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	f000 80ca 	beq.w	8017b78 <_dtoa_r+0xb20>
 80179e4:	9b03      	ldr	r3, [sp, #12]
 80179e6:	9302      	str	r3, [sp, #8]
 80179e8:	2d00      	cmp	r5, #0
 80179ea:	dd05      	ble.n	80179f8 <_dtoa_r+0x9a0>
 80179ec:	4639      	mov	r1, r7
 80179ee:	462a      	mov	r2, r5
 80179f0:	4620      	mov	r0, r4
 80179f2:	f000 fb41 	bl	8018078 <__lshift>
 80179f6:	4607      	mov	r7, r0
 80179f8:	f1b8 0f00 	cmp.w	r8, #0
 80179fc:	d05b      	beq.n	8017ab6 <_dtoa_r+0xa5e>
 80179fe:	6879      	ldr	r1, [r7, #4]
 8017a00:	4620      	mov	r0, r4
 8017a02:	f000 f927 	bl	8017c54 <_Balloc>
 8017a06:	4605      	mov	r5, r0
 8017a08:	b928      	cbnz	r0, 8017a16 <_dtoa_r+0x9be>
 8017a0a:	4b87      	ldr	r3, [pc, #540]	; (8017c28 <_dtoa_r+0xbd0>)
 8017a0c:	4602      	mov	r2, r0
 8017a0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017a12:	f7ff bb3b 	b.w	801708c <_dtoa_r+0x34>
 8017a16:	693a      	ldr	r2, [r7, #16]
 8017a18:	3202      	adds	r2, #2
 8017a1a:	0092      	lsls	r2, r2, #2
 8017a1c:	f107 010c 	add.w	r1, r7, #12
 8017a20:	300c      	adds	r0, #12
 8017a22:	f7fe fc71 	bl	8016308 <memcpy>
 8017a26:	2201      	movs	r2, #1
 8017a28:	4629      	mov	r1, r5
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	f000 fb24 	bl	8018078 <__lshift>
 8017a30:	9b01      	ldr	r3, [sp, #4]
 8017a32:	f103 0901 	add.w	r9, r3, #1
 8017a36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017a3a:	4413      	add	r3, r2
 8017a3c:	9305      	str	r3, [sp, #20]
 8017a3e:	f00a 0301 	and.w	r3, sl, #1
 8017a42:	46b8      	mov	r8, r7
 8017a44:	9304      	str	r3, [sp, #16]
 8017a46:	4607      	mov	r7, r0
 8017a48:	4631      	mov	r1, r6
 8017a4a:	ee18 0a10 	vmov	r0, s16
 8017a4e:	f7ff fa77 	bl	8016f40 <quorem>
 8017a52:	4641      	mov	r1, r8
 8017a54:	9002      	str	r0, [sp, #8]
 8017a56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017a5a:	ee18 0a10 	vmov	r0, s16
 8017a5e:	f000 fb7b 	bl	8018158 <__mcmp>
 8017a62:	463a      	mov	r2, r7
 8017a64:	9003      	str	r0, [sp, #12]
 8017a66:	4631      	mov	r1, r6
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f000 fb91 	bl	8018190 <__mdiff>
 8017a6e:	68c2      	ldr	r2, [r0, #12]
 8017a70:	f109 3bff 	add.w	fp, r9, #4294967295
 8017a74:	4605      	mov	r5, r0
 8017a76:	bb02      	cbnz	r2, 8017aba <_dtoa_r+0xa62>
 8017a78:	4601      	mov	r1, r0
 8017a7a:	ee18 0a10 	vmov	r0, s16
 8017a7e:	f000 fb6b 	bl	8018158 <__mcmp>
 8017a82:	4602      	mov	r2, r0
 8017a84:	4629      	mov	r1, r5
 8017a86:	4620      	mov	r0, r4
 8017a88:	9207      	str	r2, [sp, #28]
 8017a8a:	f000 f923 	bl	8017cd4 <_Bfree>
 8017a8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017a92:	ea43 0102 	orr.w	r1, r3, r2
 8017a96:	9b04      	ldr	r3, [sp, #16]
 8017a98:	430b      	orrs	r3, r1
 8017a9a:	464d      	mov	r5, r9
 8017a9c:	d10f      	bne.n	8017abe <_dtoa_r+0xa66>
 8017a9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017aa2:	d02a      	beq.n	8017afa <_dtoa_r+0xaa2>
 8017aa4:	9b03      	ldr	r3, [sp, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	dd02      	ble.n	8017ab0 <_dtoa_r+0xa58>
 8017aaa:	9b02      	ldr	r3, [sp, #8]
 8017aac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017ab0:	f88b a000 	strb.w	sl, [fp]
 8017ab4:	e775      	b.n	80179a2 <_dtoa_r+0x94a>
 8017ab6:	4638      	mov	r0, r7
 8017ab8:	e7ba      	b.n	8017a30 <_dtoa_r+0x9d8>
 8017aba:	2201      	movs	r2, #1
 8017abc:	e7e2      	b.n	8017a84 <_dtoa_r+0xa2c>
 8017abe:	9b03      	ldr	r3, [sp, #12]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	db04      	blt.n	8017ace <_dtoa_r+0xa76>
 8017ac4:	9906      	ldr	r1, [sp, #24]
 8017ac6:	430b      	orrs	r3, r1
 8017ac8:	9904      	ldr	r1, [sp, #16]
 8017aca:	430b      	orrs	r3, r1
 8017acc:	d122      	bne.n	8017b14 <_dtoa_r+0xabc>
 8017ace:	2a00      	cmp	r2, #0
 8017ad0:	ddee      	ble.n	8017ab0 <_dtoa_r+0xa58>
 8017ad2:	ee18 1a10 	vmov	r1, s16
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	4620      	mov	r0, r4
 8017ada:	f000 facd 	bl	8018078 <__lshift>
 8017ade:	4631      	mov	r1, r6
 8017ae0:	ee08 0a10 	vmov	s16, r0
 8017ae4:	f000 fb38 	bl	8018158 <__mcmp>
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	dc03      	bgt.n	8017af4 <_dtoa_r+0xa9c>
 8017aec:	d1e0      	bne.n	8017ab0 <_dtoa_r+0xa58>
 8017aee:	f01a 0f01 	tst.w	sl, #1
 8017af2:	d0dd      	beq.n	8017ab0 <_dtoa_r+0xa58>
 8017af4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017af8:	d1d7      	bne.n	8017aaa <_dtoa_r+0xa52>
 8017afa:	2339      	movs	r3, #57	; 0x39
 8017afc:	f88b 3000 	strb.w	r3, [fp]
 8017b00:	462b      	mov	r3, r5
 8017b02:	461d      	mov	r5, r3
 8017b04:	3b01      	subs	r3, #1
 8017b06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017b0a:	2a39      	cmp	r2, #57	; 0x39
 8017b0c:	d071      	beq.n	8017bf2 <_dtoa_r+0xb9a>
 8017b0e:	3201      	adds	r2, #1
 8017b10:	701a      	strb	r2, [r3, #0]
 8017b12:	e746      	b.n	80179a2 <_dtoa_r+0x94a>
 8017b14:	2a00      	cmp	r2, #0
 8017b16:	dd07      	ble.n	8017b28 <_dtoa_r+0xad0>
 8017b18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017b1c:	d0ed      	beq.n	8017afa <_dtoa_r+0xaa2>
 8017b1e:	f10a 0301 	add.w	r3, sl, #1
 8017b22:	f88b 3000 	strb.w	r3, [fp]
 8017b26:	e73c      	b.n	80179a2 <_dtoa_r+0x94a>
 8017b28:	9b05      	ldr	r3, [sp, #20]
 8017b2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017b2e:	4599      	cmp	r9, r3
 8017b30:	d047      	beq.n	8017bc2 <_dtoa_r+0xb6a>
 8017b32:	ee18 1a10 	vmov	r1, s16
 8017b36:	2300      	movs	r3, #0
 8017b38:	220a      	movs	r2, #10
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f000 f8ec 	bl	8017d18 <__multadd>
 8017b40:	45b8      	cmp	r8, r7
 8017b42:	ee08 0a10 	vmov	s16, r0
 8017b46:	f04f 0300 	mov.w	r3, #0
 8017b4a:	f04f 020a 	mov.w	r2, #10
 8017b4e:	4641      	mov	r1, r8
 8017b50:	4620      	mov	r0, r4
 8017b52:	d106      	bne.n	8017b62 <_dtoa_r+0xb0a>
 8017b54:	f000 f8e0 	bl	8017d18 <__multadd>
 8017b58:	4680      	mov	r8, r0
 8017b5a:	4607      	mov	r7, r0
 8017b5c:	f109 0901 	add.w	r9, r9, #1
 8017b60:	e772      	b.n	8017a48 <_dtoa_r+0x9f0>
 8017b62:	f000 f8d9 	bl	8017d18 <__multadd>
 8017b66:	4639      	mov	r1, r7
 8017b68:	4680      	mov	r8, r0
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	220a      	movs	r2, #10
 8017b6e:	4620      	mov	r0, r4
 8017b70:	f000 f8d2 	bl	8017d18 <__multadd>
 8017b74:	4607      	mov	r7, r0
 8017b76:	e7f1      	b.n	8017b5c <_dtoa_r+0xb04>
 8017b78:	9b03      	ldr	r3, [sp, #12]
 8017b7a:	9302      	str	r3, [sp, #8]
 8017b7c:	9d01      	ldr	r5, [sp, #4]
 8017b7e:	ee18 0a10 	vmov	r0, s16
 8017b82:	4631      	mov	r1, r6
 8017b84:	f7ff f9dc 	bl	8016f40 <quorem>
 8017b88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017b8c:	9b01      	ldr	r3, [sp, #4]
 8017b8e:	f805 ab01 	strb.w	sl, [r5], #1
 8017b92:	1aea      	subs	r2, r5, r3
 8017b94:	9b02      	ldr	r3, [sp, #8]
 8017b96:	4293      	cmp	r3, r2
 8017b98:	dd09      	ble.n	8017bae <_dtoa_r+0xb56>
 8017b9a:	ee18 1a10 	vmov	r1, s16
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	220a      	movs	r2, #10
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f000 f8b8 	bl	8017d18 <__multadd>
 8017ba8:	ee08 0a10 	vmov	s16, r0
 8017bac:	e7e7      	b.n	8017b7e <_dtoa_r+0xb26>
 8017bae:	9b02      	ldr	r3, [sp, #8]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	bfc8      	it	gt
 8017bb4:	461d      	movgt	r5, r3
 8017bb6:	9b01      	ldr	r3, [sp, #4]
 8017bb8:	bfd8      	it	le
 8017bba:	2501      	movle	r5, #1
 8017bbc:	441d      	add	r5, r3
 8017bbe:	f04f 0800 	mov.w	r8, #0
 8017bc2:	ee18 1a10 	vmov	r1, s16
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f000 fa55 	bl	8018078 <__lshift>
 8017bce:	4631      	mov	r1, r6
 8017bd0:	ee08 0a10 	vmov	s16, r0
 8017bd4:	f000 fac0 	bl	8018158 <__mcmp>
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	dc91      	bgt.n	8017b00 <_dtoa_r+0xaa8>
 8017bdc:	d102      	bne.n	8017be4 <_dtoa_r+0xb8c>
 8017bde:	f01a 0f01 	tst.w	sl, #1
 8017be2:	d18d      	bne.n	8017b00 <_dtoa_r+0xaa8>
 8017be4:	462b      	mov	r3, r5
 8017be6:	461d      	mov	r5, r3
 8017be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017bec:	2a30      	cmp	r2, #48	; 0x30
 8017bee:	d0fa      	beq.n	8017be6 <_dtoa_r+0xb8e>
 8017bf0:	e6d7      	b.n	80179a2 <_dtoa_r+0x94a>
 8017bf2:	9a01      	ldr	r2, [sp, #4]
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	d184      	bne.n	8017b02 <_dtoa_r+0xaaa>
 8017bf8:	9b00      	ldr	r3, [sp, #0]
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	9300      	str	r3, [sp, #0]
 8017bfe:	2331      	movs	r3, #49	; 0x31
 8017c00:	7013      	strb	r3, [r2, #0]
 8017c02:	e6ce      	b.n	80179a2 <_dtoa_r+0x94a>
 8017c04:	4b09      	ldr	r3, [pc, #36]	; (8017c2c <_dtoa_r+0xbd4>)
 8017c06:	f7ff ba95 	b.w	8017134 <_dtoa_r+0xdc>
 8017c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f47f aa6e 	bne.w	80170ee <_dtoa_r+0x96>
 8017c12:	4b07      	ldr	r3, [pc, #28]	; (8017c30 <_dtoa_r+0xbd8>)
 8017c14:	f7ff ba8e 	b.w	8017134 <_dtoa_r+0xdc>
 8017c18:	9b02      	ldr	r3, [sp, #8]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	dcae      	bgt.n	8017b7c <_dtoa_r+0xb24>
 8017c1e:	9b06      	ldr	r3, [sp, #24]
 8017c20:	2b02      	cmp	r3, #2
 8017c22:	f73f aea8 	bgt.w	8017976 <_dtoa_r+0x91e>
 8017c26:	e7a9      	b.n	8017b7c <_dtoa_r+0xb24>
 8017c28:	08019be8 	.word	0x08019be8
 8017c2c:	08019a44 	.word	0x08019a44
 8017c30:	08019b69 	.word	0x08019b69

08017c34 <_localeconv_r>:
 8017c34:	4800      	ldr	r0, [pc, #0]	; (8017c38 <_localeconv_r+0x4>)
 8017c36:	4770      	bx	lr
 8017c38:	20000280 	.word	0x20000280

08017c3c <__malloc_lock>:
 8017c3c:	4801      	ldr	r0, [pc, #4]	; (8017c44 <__malloc_lock+0x8>)
 8017c3e:	f000 bd30 	b.w	80186a2 <__retarget_lock_acquire_recursive>
 8017c42:	bf00      	nop
 8017c44:	20003068 	.word	0x20003068

08017c48 <__malloc_unlock>:
 8017c48:	4801      	ldr	r0, [pc, #4]	; (8017c50 <__malloc_unlock+0x8>)
 8017c4a:	f000 bd2b 	b.w	80186a4 <__retarget_lock_release_recursive>
 8017c4e:	bf00      	nop
 8017c50:	20003068 	.word	0x20003068

08017c54 <_Balloc>:
 8017c54:	b570      	push	{r4, r5, r6, lr}
 8017c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017c58:	4604      	mov	r4, r0
 8017c5a:	460d      	mov	r5, r1
 8017c5c:	b976      	cbnz	r6, 8017c7c <_Balloc+0x28>
 8017c5e:	2010      	movs	r0, #16
 8017c60:	f7fe fb42 	bl	80162e8 <malloc>
 8017c64:	4602      	mov	r2, r0
 8017c66:	6260      	str	r0, [r4, #36]	; 0x24
 8017c68:	b920      	cbnz	r0, 8017c74 <_Balloc+0x20>
 8017c6a:	4b18      	ldr	r3, [pc, #96]	; (8017ccc <_Balloc+0x78>)
 8017c6c:	4818      	ldr	r0, [pc, #96]	; (8017cd0 <_Balloc+0x7c>)
 8017c6e:	2166      	movs	r1, #102	; 0x66
 8017c70:	f000 fce6 	bl	8018640 <__assert_func>
 8017c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017c78:	6006      	str	r6, [r0, #0]
 8017c7a:	60c6      	str	r6, [r0, #12]
 8017c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017c7e:	68f3      	ldr	r3, [r6, #12]
 8017c80:	b183      	cbz	r3, 8017ca4 <_Balloc+0x50>
 8017c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c84:	68db      	ldr	r3, [r3, #12]
 8017c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017c8a:	b9b8      	cbnz	r0, 8017cbc <_Balloc+0x68>
 8017c8c:	2101      	movs	r1, #1
 8017c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8017c92:	1d72      	adds	r2, r6, #5
 8017c94:	0092      	lsls	r2, r2, #2
 8017c96:	4620      	mov	r0, r4
 8017c98:	f000 fb60 	bl	801835c <_calloc_r>
 8017c9c:	b160      	cbz	r0, 8017cb8 <_Balloc+0x64>
 8017c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017ca2:	e00e      	b.n	8017cc2 <_Balloc+0x6e>
 8017ca4:	2221      	movs	r2, #33	; 0x21
 8017ca6:	2104      	movs	r1, #4
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f000 fb57 	bl	801835c <_calloc_r>
 8017cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cb0:	60f0      	str	r0, [r6, #12]
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d1e4      	bne.n	8017c82 <_Balloc+0x2e>
 8017cb8:	2000      	movs	r0, #0
 8017cba:	bd70      	pop	{r4, r5, r6, pc}
 8017cbc:	6802      	ldr	r2, [r0, #0]
 8017cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017cc8:	e7f7      	b.n	8017cba <_Balloc+0x66>
 8017cca:	bf00      	nop
 8017ccc:	08019b76 	.word	0x08019b76
 8017cd0:	08019bf9 	.word	0x08019bf9

08017cd4 <_Bfree>:
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017cd8:	4605      	mov	r5, r0
 8017cda:	460c      	mov	r4, r1
 8017cdc:	b976      	cbnz	r6, 8017cfc <_Bfree+0x28>
 8017cde:	2010      	movs	r0, #16
 8017ce0:	f7fe fb02 	bl	80162e8 <malloc>
 8017ce4:	4602      	mov	r2, r0
 8017ce6:	6268      	str	r0, [r5, #36]	; 0x24
 8017ce8:	b920      	cbnz	r0, 8017cf4 <_Bfree+0x20>
 8017cea:	4b09      	ldr	r3, [pc, #36]	; (8017d10 <_Bfree+0x3c>)
 8017cec:	4809      	ldr	r0, [pc, #36]	; (8017d14 <_Bfree+0x40>)
 8017cee:	218a      	movs	r1, #138	; 0x8a
 8017cf0:	f000 fca6 	bl	8018640 <__assert_func>
 8017cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017cf8:	6006      	str	r6, [r0, #0]
 8017cfa:	60c6      	str	r6, [r0, #12]
 8017cfc:	b13c      	cbz	r4, 8017d0e <_Bfree+0x3a>
 8017cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017d00:	6862      	ldr	r2, [r4, #4]
 8017d02:	68db      	ldr	r3, [r3, #12]
 8017d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017d08:	6021      	str	r1, [r4, #0]
 8017d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017d0e:	bd70      	pop	{r4, r5, r6, pc}
 8017d10:	08019b76 	.word	0x08019b76
 8017d14:	08019bf9 	.word	0x08019bf9

08017d18 <__multadd>:
 8017d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d1c:	690d      	ldr	r5, [r1, #16]
 8017d1e:	4607      	mov	r7, r0
 8017d20:	460c      	mov	r4, r1
 8017d22:	461e      	mov	r6, r3
 8017d24:	f101 0c14 	add.w	ip, r1, #20
 8017d28:	2000      	movs	r0, #0
 8017d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8017d2e:	b299      	uxth	r1, r3
 8017d30:	fb02 6101 	mla	r1, r2, r1, r6
 8017d34:	0c1e      	lsrs	r6, r3, #16
 8017d36:	0c0b      	lsrs	r3, r1, #16
 8017d38:	fb02 3306 	mla	r3, r2, r6, r3
 8017d3c:	b289      	uxth	r1, r1
 8017d3e:	3001      	adds	r0, #1
 8017d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017d44:	4285      	cmp	r5, r0
 8017d46:	f84c 1b04 	str.w	r1, [ip], #4
 8017d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017d4e:	dcec      	bgt.n	8017d2a <__multadd+0x12>
 8017d50:	b30e      	cbz	r6, 8017d96 <__multadd+0x7e>
 8017d52:	68a3      	ldr	r3, [r4, #8]
 8017d54:	42ab      	cmp	r3, r5
 8017d56:	dc19      	bgt.n	8017d8c <__multadd+0x74>
 8017d58:	6861      	ldr	r1, [r4, #4]
 8017d5a:	4638      	mov	r0, r7
 8017d5c:	3101      	adds	r1, #1
 8017d5e:	f7ff ff79 	bl	8017c54 <_Balloc>
 8017d62:	4680      	mov	r8, r0
 8017d64:	b928      	cbnz	r0, 8017d72 <__multadd+0x5a>
 8017d66:	4602      	mov	r2, r0
 8017d68:	4b0c      	ldr	r3, [pc, #48]	; (8017d9c <__multadd+0x84>)
 8017d6a:	480d      	ldr	r0, [pc, #52]	; (8017da0 <__multadd+0x88>)
 8017d6c:	21b5      	movs	r1, #181	; 0xb5
 8017d6e:	f000 fc67 	bl	8018640 <__assert_func>
 8017d72:	6922      	ldr	r2, [r4, #16]
 8017d74:	3202      	adds	r2, #2
 8017d76:	f104 010c 	add.w	r1, r4, #12
 8017d7a:	0092      	lsls	r2, r2, #2
 8017d7c:	300c      	adds	r0, #12
 8017d7e:	f7fe fac3 	bl	8016308 <memcpy>
 8017d82:	4621      	mov	r1, r4
 8017d84:	4638      	mov	r0, r7
 8017d86:	f7ff ffa5 	bl	8017cd4 <_Bfree>
 8017d8a:	4644      	mov	r4, r8
 8017d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017d90:	3501      	adds	r5, #1
 8017d92:	615e      	str	r6, [r3, #20]
 8017d94:	6125      	str	r5, [r4, #16]
 8017d96:	4620      	mov	r0, r4
 8017d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d9c:	08019be8 	.word	0x08019be8
 8017da0:	08019bf9 	.word	0x08019bf9

08017da4 <__hi0bits>:
 8017da4:	0c03      	lsrs	r3, r0, #16
 8017da6:	041b      	lsls	r3, r3, #16
 8017da8:	b9d3      	cbnz	r3, 8017de0 <__hi0bits+0x3c>
 8017daa:	0400      	lsls	r0, r0, #16
 8017dac:	2310      	movs	r3, #16
 8017dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017db2:	bf04      	itt	eq
 8017db4:	0200      	lsleq	r0, r0, #8
 8017db6:	3308      	addeq	r3, #8
 8017db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017dbc:	bf04      	itt	eq
 8017dbe:	0100      	lsleq	r0, r0, #4
 8017dc0:	3304      	addeq	r3, #4
 8017dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017dc6:	bf04      	itt	eq
 8017dc8:	0080      	lsleq	r0, r0, #2
 8017dca:	3302      	addeq	r3, #2
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	db05      	blt.n	8017ddc <__hi0bits+0x38>
 8017dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017dd4:	f103 0301 	add.w	r3, r3, #1
 8017dd8:	bf08      	it	eq
 8017dda:	2320      	moveq	r3, #32
 8017ddc:	4618      	mov	r0, r3
 8017dde:	4770      	bx	lr
 8017de0:	2300      	movs	r3, #0
 8017de2:	e7e4      	b.n	8017dae <__hi0bits+0xa>

08017de4 <__lo0bits>:
 8017de4:	6803      	ldr	r3, [r0, #0]
 8017de6:	f013 0207 	ands.w	r2, r3, #7
 8017dea:	4601      	mov	r1, r0
 8017dec:	d00b      	beq.n	8017e06 <__lo0bits+0x22>
 8017dee:	07da      	lsls	r2, r3, #31
 8017df0:	d423      	bmi.n	8017e3a <__lo0bits+0x56>
 8017df2:	0798      	lsls	r0, r3, #30
 8017df4:	bf49      	itett	mi
 8017df6:	085b      	lsrmi	r3, r3, #1
 8017df8:	089b      	lsrpl	r3, r3, #2
 8017dfa:	2001      	movmi	r0, #1
 8017dfc:	600b      	strmi	r3, [r1, #0]
 8017dfe:	bf5c      	itt	pl
 8017e00:	600b      	strpl	r3, [r1, #0]
 8017e02:	2002      	movpl	r0, #2
 8017e04:	4770      	bx	lr
 8017e06:	b298      	uxth	r0, r3
 8017e08:	b9a8      	cbnz	r0, 8017e36 <__lo0bits+0x52>
 8017e0a:	0c1b      	lsrs	r3, r3, #16
 8017e0c:	2010      	movs	r0, #16
 8017e0e:	b2da      	uxtb	r2, r3
 8017e10:	b90a      	cbnz	r2, 8017e16 <__lo0bits+0x32>
 8017e12:	3008      	adds	r0, #8
 8017e14:	0a1b      	lsrs	r3, r3, #8
 8017e16:	071a      	lsls	r2, r3, #28
 8017e18:	bf04      	itt	eq
 8017e1a:	091b      	lsreq	r3, r3, #4
 8017e1c:	3004      	addeq	r0, #4
 8017e1e:	079a      	lsls	r2, r3, #30
 8017e20:	bf04      	itt	eq
 8017e22:	089b      	lsreq	r3, r3, #2
 8017e24:	3002      	addeq	r0, #2
 8017e26:	07da      	lsls	r2, r3, #31
 8017e28:	d403      	bmi.n	8017e32 <__lo0bits+0x4e>
 8017e2a:	085b      	lsrs	r3, r3, #1
 8017e2c:	f100 0001 	add.w	r0, r0, #1
 8017e30:	d005      	beq.n	8017e3e <__lo0bits+0x5a>
 8017e32:	600b      	str	r3, [r1, #0]
 8017e34:	4770      	bx	lr
 8017e36:	4610      	mov	r0, r2
 8017e38:	e7e9      	b.n	8017e0e <__lo0bits+0x2a>
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	4770      	bx	lr
 8017e3e:	2020      	movs	r0, #32
 8017e40:	4770      	bx	lr
	...

08017e44 <__i2b>:
 8017e44:	b510      	push	{r4, lr}
 8017e46:	460c      	mov	r4, r1
 8017e48:	2101      	movs	r1, #1
 8017e4a:	f7ff ff03 	bl	8017c54 <_Balloc>
 8017e4e:	4602      	mov	r2, r0
 8017e50:	b928      	cbnz	r0, 8017e5e <__i2b+0x1a>
 8017e52:	4b05      	ldr	r3, [pc, #20]	; (8017e68 <__i2b+0x24>)
 8017e54:	4805      	ldr	r0, [pc, #20]	; (8017e6c <__i2b+0x28>)
 8017e56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017e5a:	f000 fbf1 	bl	8018640 <__assert_func>
 8017e5e:	2301      	movs	r3, #1
 8017e60:	6144      	str	r4, [r0, #20]
 8017e62:	6103      	str	r3, [r0, #16]
 8017e64:	bd10      	pop	{r4, pc}
 8017e66:	bf00      	nop
 8017e68:	08019be8 	.word	0x08019be8
 8017e6c:	08019bf9 	.word	0x08019bf9

08017e70 <__multiply>:
 8017e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e74:	4691      	mov	r9, r2
 8017e76:	690a      	ldr	r2, [r1, #16]
 8017e78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	bfb8      	it	lt
 8017e80:	460b      	movlt	r3, r1
 8017e82:	460c      	mov	r4, r1
 8017e84:	bfbc      	itt	lt
 8017e86:	464c      	movlt	r4, r9
 8017e88:	4699      	movlt	r9, r3
 8017e8a:	6927      	ldr	r7, [r4, #16]
 8017e8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017e90:	68a3      	ldr	r3, [r4, #8]
 8017e92:	6861      	ldr	r1, [r4, #4]
 8017e94:	eb07 060a 	add.w	r6, r7, sl
 8017e98:	42b3      	cmp	r3, r6
 8017e9a:	b085      	sub	sp, #20
 8017e9c:	bfb8      	it	lt
 8017e9e:	3101      	addlt	r1, #1
 8017ea0:	f7ff fed8 	bl	8017c54 <_Balloc>
 8017ea4:	b930      	cbnz	r0, 8017eb4 <__multiply+0x44>
 8017ea6:	4602      	mov	r2, r0
 8017ea8:	4b44      	ldr	r3, [pc, #272]	; (8017fbc <__multiply+0x14c>)
 8017eaa:	4845      	ldr	r0, [pc, #276]	; (8017fc0 <__multiply+0x150>)
 8017eac:	f240 115d 	movw	r1, #349	; 0x15d
 8017eb0:	f000 fbc6 	bl	8018640 <__assert_func>
 8017eb4:	f100 0514 	add.w	r5, r0, #20
 8017eb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017ebc:	462b      	mov	r3, r5
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4543      	cmp	r3, r8
 8017ec2:	d321      	bcc.n	8017f08 <__multiply+0x98>
 8017ec4:	f104 0314 	add.w	r3, r4, #20
 8017ec8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017ecc:	f109 0314 	add.w	r3, r9, #20
 8017ed0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017ed4:	9202      	str	r2, [sp, #8]
 8017ed6:	1b3a      	subs	r2, r7, r4
 8017ed8:	3a15      	subs	r2, #21
 8017eda:	f022 0203 	bic.w	r2, r2, #3
 8017ede:	3204      	adds	r2, #4
 8017ee0:	f104 0115 	add.w	r1, r4, #21
 8017ee4:	428f      	cmp	r7, r1
 8017ee6:	bf38      	it	cc
 8017ee8:	2204      	movcc	r2, #4
 8017eea:	9201      	str	r2, [sp, #4]
 8017eec:	9a02      	ldr	r2, [sp, #8]
 8017eee:	9303      	str	r3, [sp, #12]
 8017ef0:	429a      	cmp	r2, r3
 8017ef2:	d80c      	bhi.n	8017f0e <__multiply+0x9e>
 8017ef4:	2e00      	cmp	r6, #0
 8017ef6:	dd03      	ble.n	8017f00 <__multiply+0x90>
 8017ef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d05a      	beq.n	8017fb6 <__multiply+0x146>
 8017f00:	6106      	str	r6, [r0, #16]
 8017f02:	b005      	add	sp, #20
 8017f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f08:	f843 2b04 	str.w	r2, [r3], #4
 8017f0c:	e7d8      	b.n	8017ec0 <__multiply+0x50>
 8017f0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8017f12:	f1ba 0f00 	cmp.w	sl, #0
 8017f16:	d024      	beq.n	8017f62 <__multiply+0xf2>
 8017f18:	f104 0e14 	add.w	lr, r4, #20
 8017f1c:	46a9      	mov	r9, r5
 8017f1e:	f04f 0c00 	mov.w	ip, #0
 8017f22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017f26:	f8d9 1000 	ldr.w	r1, [r9]
 8017f2a:	fa1f fb82 	uxth.w	fp, r2
 8017f2e:	b289      	uxth	r1, r1
 8017f30:	fb0a 110b 	mla	r1, sl, fp, r1
 8017f34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017f38:	f8d9 2000 	ldr.w	r2, [r9]
 8017f3c:	4461      	add	r1, ip
 8017f3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017f42:	fb0a c20b 	mla	r2, sl, fp, ip
 8017f46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017f4a:	b289      	uxth	r1, r1
 8017f4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017f50:	4577      	cmp	r7, lr
 8017f52:	f849 1b04 	str.w	r1, [r9], #4
 8017f56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017f5a:	d8e2      	bhi.n	8017f22 <__multiply+0xb2>
 8017f5c:	9a01      	ldr	r2, [sp, #4]
 8017f5e:	f845 c002 	str.w	ip, [r5, r2]
 8017f62:	9a03      	ldr	r2, [sp, #12]
 8017f64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017f68:	3304      	adds	r3, #4
 8017f6a:	f1b9 0f00 	cmp.w	r9, #0
 8017f6e:	d020      	beq.n	8017fb2 <__multiply+0x142>
 8017f70:	6829      	ldr	r1, [r5, #0]
 8017f72:	f104 0c14 	add.w	ip, r4, #20
 8017f76:	46ae      	mov	lr, r5
 8017f78:	f04f 0a00 	mov.w	sl, #0
 8017f7c:	f8bc b000 	ldrh.w	fp, [ip]
 8017f80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017f84:	fb09 220b 	mla	r2, r9, fp, r2
 8017f88:	4492      	add	sl, r2
 8017f8a:	b289      	uxth	r1, r1
 8017f8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017f90:	f84e 1b04 	str.w	r1, [lr], #4
 8017f94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017f98:	f8be 1000 	ldrh.w	r1, [lr]
 8017f9c:	0c12      	lsrs	r2, r2, #16
 8017f9e:	fb09 1102 	mla	r1, r9, r2, r1
 8017fa2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017fa6:	4567      	cmp	r7, ip
 8017fa8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017fac:	d8e6      	bhi.n	8017f7c <__multiply+0x10c>
 8017fae:	9a01      	ldr	r2, [sp, #4]
 8017fb0:	50a9      	str	r1, [r5, r2]
 8017fb2:	3504      	adds	r5, #4
 8017fb4:	e79a      	b.n	8017eec <__multiply+0x7c>
 8017fb6:	3e01      	subs	r6, #1
 8017fb8:	e79c      	b.n	8017ef4 <__multiply+0x84>
 8017fba:	bf00      	nop
 8017fbc:	08019be8 	.word	0x08019be8
 8017fc0:	08019bf9 	.word	0x08019bf9

08017fc4 <__pow5mult>:
 8017fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fc8:	4615      	mov	r5, r2
 8017fca:	f012 0203 	ands.w	r2, r2, #3
 8017fce:	4606      	mov	r6, r0
 8017fd0:	460f      	mov	r7, r1
 8017fd2:	d007      	beq.n	8017fe4 <__pow5mult+0x20>
 8017fd4:	4c25      	ldr	r4, [pc, #148]	; (801806c <__pow5mult+0xa8>)
 8017fd6:	3a01      	subs	r2, #1
 8017fd8:	2300      	movs	r3, #0
 8017fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017fde:	f7ff fe9b 	bl	8017d18 <__multadd>
 8017fe2:	4607      	mov	r7, r0
 8017fe4:	10ad      	asrs	r5, r5, #2
 8017fe6:	d03d      	beq.n	8018064 <__pow5mult+0xa0>
 8017fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017fea:	b97c      	cbnz	r4, 801800c <__pow5mult+0x48>
 8017fec:	2010      	movs	r0, #16
 8017fee:	f7fe f97b 	bl	80162e8 <malloc>
 8017ff2:	4602      	mov	r2, r0
 8017ff4:	6270      	str	r0, [r6, #36]	; 0x24
 8017ff6:	b928      	cbnz	r0, 8018004 <__pow5mult+0x40>
 8017ff8:	4b1d      	ldr	r3, [pc, #116]	; (8018070 <__pow5mult+0xac>)
 8017ffa:	481e      	ldr	r0, [pc, #120]	; (8018074 <__pow5mult+0xb0>)
 8017ffc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018000:	f000 fb1e 	bl	8018640 <__assert_func>
 8018004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018008:	6004      	str	r4, [r0, #0]
 801800a:	60c4      	str	r4, [r0, #12]
 801800c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018014:	b94c      	cbnz	r4, 801802a <__pow5mult+0x66>
 8018016:	f240 2171 	movw	r1, #625	; 0x271
 801801a:	4630      	mov	r0, r6
 801801c:	f7ff ff12 	bl	8017e44 <__i2b>
 8018020:	2300      	movs	r3, #0
 8018022:	f8c8 0008 	str.w	r0, [r8, #8]
 8018026:	4604      	mov	r4, r0
 8018028:	6003      	str	r3, [r0, #0]
 801802a:	f04f 0900 	mov.w	r9, #0
 801802e:	07eb      	lsls	r3, r5, #31
 8018030:	d50a      	bpl.n	8018048 <__pow5mult+0x84>
 8018032:	4639      	mov	r1, r7
 8018034:	4622      	mov	r2, r4
 8018036:	4630      	mov	r0, r6
 8018038:	f7ff ff1a 	bl	8017e70 <__multiply>
 801803c:	4639      	mov	r1, r7
 801803e:	4680      	mov	r8, r0
 8018040:	4630      	mov	r0, r6
 8018042:	f7ff fe47 	bl	8017cd4 <_Bfree>
 8018046:	4647      	mov	r7, r8
 8018048:	106d      	asrs	r5, r5, #1
 801804a:	d00b      	beq.n	8018064 <__pow5mult+0xa0>
 801804c:	6820      	ldr	r0, [r4, #0]
 801804e:	b938      	cbnz	r0, 8018060 <__pow5mult+0x9c>
 8018050:	4622      	mov	r2, r4
 8018052:	4621      	mov	r1, r4
 8018054:	4630      	mov	r0, r6
 8018056:	f7ff ff0b 	bl	8017e70 <__multiply>
 801805a:	6020      	str	r0, [r4, #0]
 801805c:	f8c0 9000 	str.w	r9, [r0]
 8018060:	4604      	mov	r4, r0
 8018062:	e7e4      	b.n	801802e <__pow5mult+0x6a>
 8018064:	4638      	mov	r0, r7
 8018066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801806a:	bf00      	nop
 801806c:	08019d48 	.word	0x08019d48
 8018070:	08019b76 	.word	0x08019b76
 8018074:	08019bf9 	.word	0x08019bf9

08018078 <__lshift>:
 8018078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801807c:	460c      	mov	r4, r1
 801807e:	6849      	ldr	r1, [r1, #4]
 8018080:	6923      	ldr	r3, [r4, #16]
 8018082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018086:	68a3      	ldr	r3, [r4, #8]
 8018088:	4607      	mov	r7, r0
 801808a:	4691      	mov	r9, r2
 801808c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018090:	f108 0601 	add.w	r6, r8, #1
 8018094:	42b3      	cmp	r3, r6
 8018096:	db0b      	blt.n	80180b0 <__lshift+0x38>
 8018098:	4638      	mov	r0, r7
 801809a:	f7ff fddb 	bl	8017c54 <_Balloc>
 801809e:	4605      	mov	r5, r0
 80180a0:	b948      	cbnz	r0, 80180b6 <__lshift+0x3e>
 80180a2:	4602      	mov	r2, r0
 80180a4:	4b2a      	ldr	r3, [pc, #168]	; (8018150 <__lshift+0xd8>)
 80180a6:	482b      	ldr	r0, [pc, #172]	; (8018154 <__lshift+0xdc>)
 80180a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80180ac:	f000 fac8 	bl	8018640 <__assert_func>
 80180b0:	3101      	adds	r1, #1
 80180b2:	005b      	lsls	r3, r3, #1
 80180b4:	e7ee      	b.n	8018094 <__lshift+0x1c>
 80180b6:	2300      	movs	r3, #0
 80180b8:	f100 0114 	add.w	r1, r0, #20
 80180bc:	f100 0210 	add.w	r2, r0, #16
 80180c0:	4618      	mov	r0, r3
 80180c2:	4553      	cmp	r3, sl
 80180c4:	db37      	blt.n	8018136 <__lshift+0xbe>
 80180c6:	6920      	ldr	r0, [r4, #16]
 80180c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80180cc:	f104 0314 	add.w	r3, r4, #20
 80180d0:	f019 091f 	ands.w	r9, r9, #31
 80180d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80180d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80180dc:	d02f      	beq.n	801813e <__lshift+0xc6>
 80180de:	f1c9 0e20 	rsb	lr, r9, #32
 80180e2:	468a      	mov	sl, r1
 80180e4:	f04f 0c00 	mov.w	ip, #0
 80180e8:	681a      	ldr	r2, [r3, #0]
 80180ea:	fa02 f209 	lsl.w	r2, r2, r9
 80180ee:	ea42 020c 	orr.w	r2, r2, ip
 80180f2:	f84a 2b04 	str.w	r2, [sl], #4
 80180f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80180fa:	4298      	cmp	r0, r3
 80180fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018100:	d8f2      	bhi.n	80180e8 <__lshift+0x70>
 8018102:	1b03      	subs	r3, r0, r4
 8018104:	3b15      	subs	r3, #21
 8018106:	f023 0303 	bic.w	r3, r3, #3
 801810a:	3304      	adds	r3, #4
 801810c:	f104 0215 	add.w	r2, r4, #21
 8018110:	4290      	cmp	r0, r2
 8018112:	bf38      	it	cc
 8018114:	2304      	movcc	r3, #4
 8018116:	f841 c003 	str.w	ip, [r1, r3]
 801811a:	f1bc 0f00 	cmp.w	ip, #0
 801811e:	d001      	beq.n	8018124 <__lshift+0xac>
 8018120:	f108 0602 	add.w	r6, r8, #2
 8018124:	3e01      	subs	r6, #1
 8018126:	4638      	mov	r0, r7
 8018128:	612e      	str	r6, [r5, #16]
 801812a:	4621      	mov	r1, r4
 801812c:	f7ff fdd2 	bl	8017cd4 <_Bfree>
 8018130:	4628      	mov	r0, r5
 8018132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018136:	f842 0f04 	str.w	r0, [r2, #4]!
 801813a:	3301      	adds	r3, #1
 801813c:	e7c1      	b.n	80180c2 <__lshift+0x4a>
 801813e:	3904      	subs	r1, #4
 8018140:	f853 2b04 	ldr.w	r2, [r3], #4
 8018144:	f841 2f04 	str.w	r2, [r1, #4]!
 8018148:	4298      	cmp	r0, r3
 801814a:	d8f9      	bhi.n	8018140 <__lshift+0xc8>
 801814c:	e7ea      	b.n	8018124 <__lshift+0xac>
 801814e:	bf00      	nop
 8018150:	08019be8 	.word	0x08019be8
 8018154:	08019bf9 	.word	0x08019bf9

08018158 <__mcmp>:
 8018158:	b530      	push	{r4, r5, lr}
 801815a:	6902      	ldr	r2, [r0, #16]
 801815c:	690c      	ldr	r4, [r1, #16]
 801815e:	1b12      	subs	r2, r2, r4
 8018160:	d10e      	bne.n	8018180 <__mcmp+0x28>
 8018162:	f100 0314 	add.w	r3, r0, #20
 8018166:	3114      	adds	r1, #20
 8018168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801816c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018178:	42a5      	cmp	r5, r4
 801817a:	d003      	beq.n	8018184 <__mcmp+0x2c>
 801817c:	d305      	bcc.n	801818a <__mcmp+0x32>
 801817e:	2201      	movs	r2, #1
 8018180:	4610      	mov	r0, r2
 8018182:	bd30      	pop	{r4, r5, pc}
 8018184:	4283      	cmp	r3, r0
 8018186:	d3f3      	bcc.n	8018170 <__mcmp+0x18>
 8018188:	e7fa      	b.n	8018180 <__mcmp+0x28>
 801818a:	f04f 32ff 	mov.w	r2, #4294967295
 801818e:	e7f7      	b.n	8018180 <__mcmp+0x28>

08018190 <__mdiff>:
 8018190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	460c      	mov	r4, r1
 8018196:	4606      	mov	r6, r0
 8018198:	4611      	mov	r1, r2
 801819a:	4620      	mov	r0, r4
 801819c:	4690      	mov	r8, r2
 801819e:	f7ff ffdb 	bl	8018158 <__mcmp>
 80181a2:	1e05      	subs	r5, r0, #0
 80181a4:	d110      	bne.n	80181c8 <__mdiff+0x38>
 80181a6:	4629      	mov	r1, r5
 80181a8:	4630      	mov	r0, r6
 80181aa:	f7ff fd53 	bl	8017c54 <_Balloc>
 80181ae:	b930      	cbnz	r0, 80181be <__mdiff+0x2e>
 80181b0:	4b3a      	ldr	r3, [pc, #232]	; (801829c <__mdiff+0x10c>)
 80181b2:	4602      	mov	r2, r0
 80181b4:	f240 2132 	movw	r1, #562	; 0x232
 80181b8:	4839      	ldr	r0, [pc, #228]	; (80182a0 <__mdiff+0x110>)
 80181ba:	f000 fa41 	bl	8018640 <__assert_func>
 80181be:	2301      	movs	r3, #1
 80181c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80181c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c8:	bfa4      	itt	ge
 80181ca:	4643      	movge	r3, r8
 80181cc:	46a0      	movge	r8, r4
 80181ce:	4630      	mov	r0, r6
 80181d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80181d4:	bfa6      	itte	ge
 80181d6:	461c      	movge	r4, r3
 80181d8:	2500      	movge	r5, #0
 80181da:	2501      	movlt	r5, #1
 80181dc:	f7ff fd3a 	bl	8017c54 <_Balloc>
 80181e0:	b920      	cbnz	r0, 80181ec <__mdiff+0x5c>
 80181e2:	4b2e      	ldr	r3, [pc, #184]	; (801829c <__mdiff+0x10c>)
 80181e4:	4602      	mov	r2, r0
 80181e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80181ea:	e7e5      	b.n	80181b8 <__mdiff+0x28>
 80181ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80181f0:	6926      	ldr	r6, [r4, #16]
 80181f2:	60c5      	str	r5, [r0, #12]
 80181f4:	f104 0914 	add.w	r9, r4, #20
 80181f8:	f108 0514 	add.w	r5, r8, #20
 80181fc:	f100 0e14 	add.w	lr, r0, #20
 8018200:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018204:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018208:	f108 0210 	add.w	r2, r8, #16
 801820c:	46f2      	mov	sl, lr
 801820e:	2100      	movs	r1, #0
 8018210:	f859 3b04 	ldr.w	r3, [r9], #4
 8018214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018218:	fa1f f883 	uxth.w	r8, r3
 801821c:	fa11 f18b 	uxtah	r1, r1, fp
 8018220:	0c1b      	lsrs	r3, r3, #16
 8018222:	eba1 0808 	sub.w	r8, r1, r8
 8018226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801822a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801822e:	fa1f f888 	uxth.w	r8, r8
 8018232:	1419      	asrs	r1, r3, #16
 8018234:	454e      	cmp	r6, r9
 8018236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801823a:	f84a 3b04 	str.w	r3, [sl], #4
 801823e:	d8e7      	bhi.n	8018210 <__mdiff+0x80>
 8018240:	1b33      	subs	r3, r6, r4
 8018242:	3b15      	subs	r3, #21
 8018244:	f023 0303 	bic.w	r3, r3, #3
 8018248:	3304      	adds	r3, #4
 801824a:	3415      	adds	r4, #21
 801824c:	42a6      	cmp	r6, r4
 801824e:	bf38      	it	cc
 8018250:	2304      	movcc	r3, #4
 8018252:	441d      	add	r5, r3
 8018254:	4473      	add	r3, lr
 8018256:	469e      	mov	lr, r3
 8018258:	462e      	mov	r6, r5
 801825a:	4566      	cmp	r6, ip
 801825c:	d30e      	bcc.n	801827c <__mdiff+0xec>
 801825e:	f10c 0203 	add.w	r2, ip, #3
 8018262:	1b52      	subs	r2, r2, r5
 8018264:	f022 0203 	bic.w	r2, r2, #3
 8018268:	3d03      	subs	r5, #3
 801826a:	45ac      	cmp	ip, r5
 801826c:	bf38      	it	cc
 801826e:	2200      	movcc	r2, #0
 8018270:	441a      	add	r2, r3
 8018272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018276:	b17b      	cbz	r3, 8018298 <__mdiff+0x108>
 8018278:	6107      	str	r7, [r0, #16]
 801827a:	e7a3      	b.n	80181c4 <__mdiff+0x34>
 801827c:	f856 8b04 	ldr.w	r8, [r6], #4
 8018280:	fa11 f288 	uxtah	r2, r1, r8
 8018284:	1414      	asrs	r4, r2, #16
 8018286:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801828a:	b292      	uxth	r2, r2
 801828c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018290:	f84e 2b04 	str.w	r2, [lr], #4
 8018294:	1421      	asrs	r1, r4, #16
 8018296:	e7e0      	b.n	801825a <__mdiff+0xca>
 8018298:	3f01      	subs	r7, #1
 801829a:	e7ea      	b.n	8018272 <__mdiff+0xe2>
 801829c:	08019be8 	.word	0x08019be8
 80182a0:	08019bf9 	.word	0x08019bf9

080182a4 <__d2b>:
 80182a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80182a8:	4689      	mov	r9, r1
 80182aa:	2101      	movs	r1, #1
 80182ac:	ec57 6b10 	vmov	r6, r7, d0
 80182b0:	4690      	mov	r8, r2
 80182b2:	f7ff fccf 	bl	8017c54 <_Balloc>
 80182b6:	4604      	mov	r4, r0
 80182b8:	b930      	cbnz	r0, 80182c8 <__d2b+0x24>
 80182ba:	4602      	mov	r2, r0
 80182bc:	4b25      	ldr	r3, [pc, #148]	; (8018354 <__d2b+0xb0>)
 80182be:	4826      	ldr	r0, [pc, #152]	; (8018358 <__d2b+0xb4>)
 80182c0:	f240 310a 	movw	r1, #778	; 0x30a
 80182c4:	f000 f9bc 	bl	8018640 <__assert_func>
 80182c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80182cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80182d0:	bb35      	cbnz	r5, 8018320 <__d2b+0x7c>
 80182d2:	2e00      	cmp	r6, #0
 80182d4:	9301      	str	r3, [sp, #4]
 80182d6:	d028      	beq.n	801832a <__d2b+0x86>
 80182d8:	4668      	mov	r0, sp
 80182da:	9600      	str	r6, [sp, #0]
 80182dc:	f7ff fd82 	bl	8017de4 <__lo0bits>
 80182e0:	9900      	ldr	r1, [sp, #0]
 80182e2:	b300      	cbz	r0, 8018326 <__d2b+0x82>
 80182e4:	9a01      	ldr	r2, [sp, #4]
 80182e6:	f1c0 0320 	rsb	r3, r0, #32
 80182ea:	fa02 f303 	lsl.w	r3, r2, r3
 80182ee:	430b      	orrs	r3, r1
 80182f0:	40c2      	lsrs	r2, r0
 80182f2:	6163      	str	r3, [r4, #20]
 80182f4:	9201      	str	r2, [sp, #4]
 80182f6:	9b01      	ldr	r3, [sp, #4]
 80182f8:	61a3      	str	r3, [r4, #24]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	bf14      	ite	ne
 80182fe:	2202      	movne	r2, #2
 8018300:	2201      	moveq	r2, #1
 8018302:	6122      	str	r2, [r4, #16]
 8018304:	b1d5      	cbz	r5, 801833c <__d2b+0x98>
 8018306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801830a:	4405      	add	r5, r0
 801830c:	f8c9 5000 	str.w	r5, [r9]
 8018310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018314:	f8c8 0000 	str.w	r0, [r8]
 8018318:	4620      	mov	r0, r4
 801831a:	b003      	add	sp, #12
 801831c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018324:	e7d5      	b.n	80182d2 <__d2b+0x2e>
 8018326:	6161      	str	r1, [r4, #20]
 8018328:	e7e5      	b.n	80182f6 <__d2b+0x52>
 801832a:	a801      	add	r0, sp, #4
 801832c:	f7ff fd5a 	bl	8017de4 <__lo0bits>
 8018330:	9b01      	ldr	r3, [sp, #4]
 8018332:	6163      	str	r3, [r4, #20]
 8018334:	2201      	movs	r2, #1
 8018336:	6122      	str	r2, [r4, #16]
 8018338:	3020      	adds	r0, #32
 801833a:	e7e3      	b.n	8018304 <__d2b+0x60>
 801833c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018344:	f8c9 0000 	str.w	r0, [r9]
 8018348:	6918      	ldr	r0, [r3, #16]
 801834a:	f7ff fd2b 	bl	8017da4 <__hi0bits>
 801834e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018352:	e7df      	b.n	8018314 <__d2b+0x70>
 8018354:	08019be8 	.word	0x08019be8
 8018358:	08019bf9 	.word	0x08019bf9

0801835c <_calloc_r>:
 801835c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801835e:	fba1 2402 	umull	r2, r4, r1, r2
 8018362:	b94c      	cbnz	r4, 8018378 <_calloc_r+0x1c>
 8018364:	4611      	mov	r1, r2
 8018366:	9201      	str	r2, [sp, #4]
 8018368:	f7fe f850 	bl	801640c <_malloc_r>
 801836c:	9a01      	ldr	r2, [sp, #4]
 801836e:	4605      	mov	r5, r0
 8018370:	b930      	cbnz	r0, 8018380 <_calloc_r+0x24>
 8018372:	4628      	mov	r0, r5
 8018374:	b003      	add	sp, #12
 8018376:	bd30      	pop	{r4, r5, pc}
 8018378:	220c      	movs	r2, #12
 801837a:	6002      	str	r2, [r0, #0]
 801837c:	2500      	movs	r5, #0
 801837e:	e7f8      	b.n	8018372 <_calloc_r+0x16>
 8018380:	4621      	mov	r1, r4
 8018382:	f7fd ffcf 	bl	8016324 <memset>
 8018386:	e7f4      	b.n	8018372 <_calloc_r+0x16>

08018388 <__ssputs_r>:
 8018388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801838c:	688e      	ldr	r6, [r1, #8]
 801838e:	429e      	cmp	r6, r3
 8018390:	4682      	mov	sl, r0
 8018392:	460c      	mov	r4, r1
 8018394:	4690      	mov	r8, r2
 8018396:	461f      	mov	r7, r3
 8018398:	d838      	bhi.n	801840c <__ssputs_r+0x84>
 801839a:	898a      	ldrh	r2, [r1, #12]
 801839c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80183a0:	d032      	beq.n	8018408 <__ssputs_r+0x80>
 80183a2:	6825      	ldr	r5, [r4, #0]
 80183a4:	6909      	ldr	r1, [r1, #16]
 80183a6:	eba5 0901 	sub.w	r9, r5, r1
 80183aa:	6965      	ldr	r5, [r4, #20]
 80183ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80183b4:	3301      	adds	r3, #1
 80183b6:	444b      	add	r3, r9
 80183b8:	106d      	asrs	r5, r5, #1
 80183ba:	429d      	cmp	r5, r3
 80183bc:	bf38      	it	cc
 80183be:	461d      	movcc	r5, r3
 80183c0:	0553      	lsls	r3, r2, #21
 80183c2:	d531      	bpl.n	8018428 <__ssputs_r+0xa0>
 80183c4:	4629      	mov	r1, r5
 80183c6:	f7fe f821 	bl	801640c <_malloc_r>
 80183ca:	4606      	mov	r6, r0
 80183cc:	b950      	cbnz	r0, 80183e4 <__ssputs_r+0x5c>
 80183ce:	230c      	movs	r3, #12
 80183d0:	f8ca 3000 	str.w	r3, [sl]
 80183d4:	89a3      	ldrh	r3, [r4, #12]
 80183d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183da:	81a3      	strh	r3, [r4, #12]
 80183dc:	f04f 30ff 	mov.w	r0, #4294967295
 80183e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183e4:	6921      	ldr	r1, [r4, #16]
 80183e6:	464a      	mov	r2, r9
 80183e8:	f7fd ff8e 	bl	8016308 <memcpy>
 80183ec:	89a3      	ldrh	r3, [r4, #12]
 80183ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80183f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183f6:	81a3      	strh	r3, [r4, #12]
 80183f8:	6126      	str	r6, [r4, #16]
 80183fa:	6165      	str	r5, [r4, #20]
 80183fc:	444e      	add	r6, r9
 80183fe:	eba5 0509 	sub.w	r5, r5, r9
 8018402:	6026      	str	r6, [r4, #0]
 8018404:	60a5      	str	r5, [r4, #8]
 8018406:	463e      	mov	r6, r7
 8018408:	42be      	cmp	r6, r7
 801840a:	d900      	bls.n	801840e <__ssputs_r+0x86>
 801840c:	463e      	mov	r6, r7
 801840e:	6820      	ldr	r0, [r4, #0]
 8018410:	4632      	mov	r2, r6
 8018412:	4641      	mov	r1, r8
 8018414:	f000 f959 	bl	80186ca <memmove>
 8018418:	68a3      	ldr	r3, [r4, #8]
 801841a:	1b9b      	subs	r3, r3, r6
 801841c:	60a3      	str	r3, [r4, #8]
 801841e:	6823      	ldr	r3, [r4, #0]
 8018420:	4433      	add	r3, r6
 8018422:	6023      	str	r3, [r4, #0]
 8018424:	2000      	movs	r0, #0
 8018426:	e7db      	b.n	80183e0 <__ssputs_r+0x58>
 8018428:	462a      	mov	r2, r5
 801842a:	f000 f968 	bl	80186fe <_realloc_r>
 801842e:	4606      	mov	r6, r0
 8018430:	2800      	cmp	r0, #0
 8018432:	d1e1      	bne.n	80183f8 <__ssputs_r+0x70>
 8018434:	6921      	ldr	r1, [r4, #16]
 8018436:	4650      	mov	r0, sl
 8018438:	f7fd ff7c 	bl	8016334 <_free_r>
 801843c:	e7c7      	b.n	80183ce <__ssputs_r+0x46>
	...

08018440 <_svfiprintf_r>:
 8018440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018444:	4698      	mov	r8, r3
 8018446:	898b      	ldrh	r3, [r1, #12]
 8018448:	061b      	lsls	r3, r3, #24
 801844a:	b09d      	sub	sp, #116	; 0x74
 801844c:	4607      	mov	r7, r0
 801844e:	460d      	mov	r5, r1
 8018450:	4614      	mov	r4, r2
 8018452:	d50e      	bpl.n	8018472 <_svfiprintf_r+0x32>
 8018454:	690b      	ldr	r3, [r1, #16]
 8018456:	b963      	cbnz	r3, 8018472 <_svfiprintf_r+0x32>
 8018458:	2140      	movs	r1, #64	; 0x40
 801845a:	f7fd ffd7 	bl	801640c <_malloc_r>
 801845e:	6028      	str	r0, [r5, #0]
 8018460:	6128      	str	r0, [r5, #16]
 8018462:	b920      	cbnz	r0, 801846e <_svfiprintf_r+0x2e>
 8018464:	230c      	movs	r3, #12
 8018466:	603b      	str	r3, [r7, #0]
 8018468:	f04f 30ff 	mov.w	r0, #4294967295
 801846c:	e0d1      	b.n	8018612 <_svfiprintf_r+0x1d2>
 801846e:	2340      	movs	r3, #64	; 0x40
 8018470:	616b      	str	r3, [r5, #20]
 8018472:	2300      	movs	r3, #0
 8018474:	9309      	str	r3, [sp, #36]	; 0x24
 8018476:	2320      	movs	r3, #32
 8018478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018480:	2330      	movs	r3, #48	; 0x30
 8018482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801862c <_svfiprintf_r+0x1ec>
 8018486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801848a:	f04f 0901 	mov.w	r9, #1
 801848e:	4623      	mov	r3, r4
 8018490:	469a      	mov	sl, r3
 8018492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018496:	b10a      	cbz	r2, 801849c <_svfiprintf_r+0x5c>
 8018498:	2a25      	cmp	r2, #37	; 0x25
 801849a:	d1f9      	bne.n	8018490 <_svfiprintf_r+0x50>
 801849c:	ebba 0b04 	subs.w	fp, sl, r4
 80184a0:	d00b      	beq.n	80184ba <_svfiprintf_r+0x7a>
 80184a2:	465b      	mov	r3, fp
 80184a4:	4622      	mov	r2, r4
 80184a6:	4629      	mov	r1, r5
 80184a8:	4638      	mov	r0, r7
 80184aa:	f7ff ff6d 	bl	8018388 <__ssputs_r>
 80184ae:	3001      	adds	r0, #1
 80184b0:	f000 80aa 	beq.w	8018608 <_svfiprintf_r+0x1c8>
 80184b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184b6:	445a      	add	r2, fp
 80184b8:	9209      	str	r2, [sp, #36]	; 0x24
 80184ba:	f89a 3000 	ldrb.w	r3, [sl]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f000 80a2 	beq.w	8018608 <_svfiprintf_r+0x1c8>
 80184c4:	2300      	movs	r3, #0
 80184c6:	f04f 32ff 	mov.w	r2, #4294967295
 80184ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184ce:	f10a 0a01 	add.w	sl, sl, #1
 80184d2:	9304      	str	r3, [sp, #16]
 80184d4:	9307      	str	r3, [sp, #28]
 80184d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184da:	931a      	str	r3, [sp, #104]	; 0x68
 80184dc:	4654      	mov	r4, sl
 80184de:	2205      	movs	r2, #5
 80184e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184e4:	4851      	ldr	r0, [pc, #324]	; (801862c <_svfiprintf_r+0x1ec>)
 80184e6:	f7e7 fe9b 	bl	8000220 <memchr>
 80184ea:	9a04      	ldr	r2, [sp, #16]
 80184ec:	b9d8      	cbnz	r0, 8018526 <_svfiprintf_r+0xe6>
 80184ee:	06d0      	lsls	r0, r2, #27
 80184f0:	bf44      	itt	mi
 80184f2:	2320      	movmi	r3, #32
 80184f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184f8:	0711      	lsls	r1, r2, #28
 80184fa:	bf44      	itt	mi
 80184fc:	232b      	movmi	r3, #43	; 0x2b
 80184fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018502:	f89a 3000 	ldrb.w	r3, [sl]
 8018506:	2b2a      	cmp	r3, #42	; 0x2a
 8018508:	d015      	beq.n	8018536 <_svfiprintf_r+0xf6>
 801850a:	9a07      	ldr	r2, [sp, #28]
 801850c:	4654      	mov	r4, sl
 801850e:	2000      	movs	r0, #0
 8018510:	f04f 0c0a 	mov.w	ip, #10
 8018514:	4621      	mov	r1, r4
 8018516:	f811 3b01 	ldrb.w	r3, [r1], #1
 801851a:	3b30      	subs	r3, #48	; 0x30
 801851c:	2b09      	cmp	r3, #9
 801851e:	d94e      	bls.n	80185be <_svfiprintf_r+0x17e>
 8018520:	b1b0      	cbz	r0, 8018550 <_svfiprintf_r+0x110>
 8018522:	9207      	str	r2, [sp, #28]
 8018524:	e014      	b.n	8018550 <_svfiprintf_r+0x110>
 8018526:	eba0 0308 	sub.w	r3, r0, r8
 801852a:	fa09 f303 	lsl.w	r3, r9, r3
 801852e:	4313      	orrs	r3, r2
 8018530:	9304      	str	r3, [sp, #16]
 8018532:	46a2      	mov	sl, r4
 8018534:	e7d2      	b.n	80184dc <_svfiprintf_r+0x9c>
 8018536:	9b03      	ldr	r3, [sp, #12]
 8018538:	1d19      	adds	r1, r3, #4
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	9103      	str	r1, [sp, #12]
 801853e:	2b00      	cmp	r3, #0
 8018540:	bfbb      	ittet	lt
 8018542:	425b      	neglt	r3, r3
 8018544:	f042 0202 	orrlt.w	r2, r2, #2
 8018548:	9307      	strge	r3, [sp, #28]
 801854a:	9307      	strlt	r3, [sp, #28]
 801854c:	bfb8      	it	lt
 801854e:	9204      	strlt	r2, [sp, #16]
 8018550:	7823      	ldrb	r3, [r4, #0]
 8018552:	2b2e      	cmp	r3, #46	; 0x2e
 8018554:	d10c      	bne.n	8018570 <_svfiprintf_r+0x130>
 8018556:	7863      	ldrb	r3, [r4, #1]
 8018558:	2b2a      	cmp	r3, #42	; 0x2a
 801855a:	d135      	bne.n	80185c8 <_svfiprintf_r+0x188>
 801855c:	9b03      	ldr	r3, [sp, #12]
 801855e:	1d1a      	adds	r2, r3, #4
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	9203      	str	r2, [sp, #12]
 8018564:	2b00      	cmp	r3, #0
 8018566:	bfb8      	it	lt
 8018568:	f04f 33ff 	movlt.w	r3, #4294967295
 801856c:	3402      	adds	r4, #2
 801856e:	9305      	str	r3, [sp, #20]
 8018570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801863c <_svfiprintf_r+0x1fc>
 8018574:	7821      	ldrb	r1, [r4, #0]
 8018576:	2203      	movs	r2, #3
 8018578:	4650      	mov	r0, sl
 801857a:	f7e7 fe51 	bl	8000220 <memchr>
 801857e:	b140      	cbz	r0, 8018592 <_svfiprintf_r+0x152>
 8018580:	2340      	movs	r3, #64	; 0x40
 8018582:	eba0 000a 	sub.w	r0, r0, sl
 8018586:	fa03 f000 	lsl.w	r0, r3, r0
 801858a:	9b04      	ldr	r3, [sp, #16]
 801858c:	4303      	orrs	r3, r0
 801858e:	3401      	adds	r4, #1
 8018590:	9304      	str	r3, [sp, #16]
 8018592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018596:	4826      	ldr	r0, [pc, #152]	; (8018630 <_svfiprintf_r+0x1f0>)
 8018598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801859c:	2206      	movs	r2, #6
 801859e:	f7e7 fe3f 	bl	8000220 <memchr>
 80185a2:	2800      	cmp	r0, #0
 80185a4:	d038      	beq.n	8018618 <_svfiprintf_r+0x1d8>
 80185a6:	4b23      	ldr	r3, [pc, #140]	; (8018634 <_svfiprintf_r+0x1f4>)
 80185a8:	bb1b      	cbnz	r3, 80185f2 <_svfiprintf_r+0x1b2>
 80185aa:	9b03      	ldr	r3, [sp, #12]
 80185ac:	3307      	adds	r3, #7
 80185ae:	f023 0307 	bic.w	r3, r3, #7
 80185b2:	3308      	adds	r3, #8
 80185b4:	9303      	str	r3, [sp, #12]
 80185b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185b8:	4433      	add	r3, r6
 80185ba:	9309      	str	r3, [sp, #36]	; 0x24
 80185bc:	e767      	b.n	801848e <_svfiprintf_r+0x4e>
 80185be:	fb0c 3202 	mla	r2, ip, r2, r3
 80185c2:	460c      	mov	r4, r1
 80185c4:	2001      	movs	r0, #1
 80185c6:	e7a5      	b.n	8018514 <_svfiprintf_r+0xd4>
 80185c8:	2300      	movs	r3, #0
 80185ca:	3401      	adds	r4, #1
 80185cc:	9305      	str	r3, [sp, #20]
 80185ce:	4619      	mov	r1, r3
 80185d0:	f04f 0c0a 	mov.w	ip, #10
 80185d4:	4620      	mov	r0, r4
 80185d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185da:	3a30      	subs	r2, #48	; 0x30
 80185dc:	2a09      	cmp	r2, #9
 80185de:	d903      	bls.n	80185e8 <_svfiprintf_r+0x1a8>
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d0c5      	beq.n	8018570 <_svfiprintf_r+0x130>
 80185e4:	9105      	str	r1, [sp, #20]
 80185e6:	e7c3      	b.n	8018570 <_svfiprintf_r+0x130>
 80185e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80185ec:	4604      	mov	r4, r0
 80185ee:	2301      	movs	r3, #1
 80185f0:	e7f0      	b.n	80185d4 <_svfiprintf_r+0x194>
 80185f2:	ab03      	add	r3, sp, #12
 80185f4:	9300      	str	r3, [sp, #0]
 80185f6:	462a      	mov	r2, r5
 80185f8:	4b0f      	ldr	r3, [pc, #60]	; (8018638 <_svfiprintf_r+0x1f8>)
 80185fa:	a904      	add	r1, sp, #16
 80185fc:	4638      	mov	r0, r7
 80185fe:	f7fe f819 	bl	8016634 <_printf_float>
 8018602:	1c42      	adds	r2, r0, #1
 8018604:	4606      	mov	r6, r0
 8018606:	d1d6      	bne.n	80185b6 <_svfiprintf_r+0x176>
 8018608:	89ab      	ldrh	r3, [r5, #12]
 801860a:	065b      	lsls	r3, r3, #25
 801860c:	f53f af2c 	bmi.w	8018468 <_svfiprintf_r+0x28>
 8018610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018612:	b01d      	add	sp, #116	; 0x74
 8018614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018618:	ab03      	add	r3, sp, #12
 801861a:	9300      	str	r3, [sp, #0]
 801861c:	462a      	mov	r2, r5
 801861e:	4b06      	ldr	r3, [pc, #24]	; (8018638 <_svfiprintf_r+0x1f8>)
 8018620:	a904      	add	r1, sp, #16
 8018622:	4638      	mov	r0, r7
 8018624:	f7fe faaa 	bl	8016b7c <_printf_i>
 8018628:	e7eb      	b.n	8018602 <_svfiprintf_r+0x1c2>
 801862a:	bf00      	nop
 801862c:	08019d54 	.word	0x08019d54
 8018630:	08019d5e 	.word	0x08019d5e
 8018634:	08016635 	.word	0x08016635
 8018638:	08018389 	.word	0x08018389
 801863c:	08019d5a 	.word	0x08019d5a

08018640 <__assert_func>:
 8018640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018642:	4614      	mov	r4, r2
 8018644:	461a      	mov	r2, r3
 8018646:	4b09      	ldr	r3, [pc, #36]	; (801866c <__assert_func+0x2c>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	4605      	mov	r5, r0
 801864c:	68d8      	ldr	r0, [r3, #12]
 801864e:	b14c      	cbz	r4, 8018664 <__assert_func+0x24>
 8018650:	4b07      	ldr	r3, [pc, #28]	; (8018670 <__assert_func+0x30>)
 8018652:	9100      	str	r1, [sp, #0]
 8018654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018658:	4906      	ldr	r1, [pc, #24]	; (8018674 <__assert_func+0x34>)
 801865a:	462b      	mov	r3, r5
 801865c:	f000 f80e 	bl	801867c <fiprintf>
 8018660:	f000 faa4 	bl	8018bac <abort>
 8018664:	4b04      	ldr	r3, [pc, #16]	; (8018678 <__assert_func+0x38>)
 8018666:	461c      	mov	r4, r3
 8018668:	e7f3      	b.n	8018652 <__assert_func+0x12>
 801866a:	bf00      	nop
 801866c:	2000012c 	.word	0x2000012c
 8018670:	08019d65 	.word	0x08019d65
 8018674:	08019d72 	.word	0x08019d72
 8018678:	08019da0 	.word	0x08019da0

0801867c <fiprintf>:
 801867c:	b40e      	push	{r1, r2, r3}
 801867e:	b503      	push	{r0, r1, lr}
 8018680:	4601      	mov	r1, r0
 8018682:	ab03      	add	r3, sp, #12
 8018684:	4805      	ldr	r0, [pc, #20]	; (801869c <fiprintf+0x20>)
 8018686:	f853 2b04 	ldr.w	r2, [r3], #4
 801868a:	6800      	ldr	r0, [r0, #0]
 801868c:	9301      	str	r3, [sp, #4]
 801868e:	f000 f88f 	bl	80187b0 <_vfiprintf_r>
 8018692:	b002      	add	sp, #8
 8018694:	f85d eb04 	ldr.w	lr, [sp], #4
 8018698:	b003      	add	sp, #12
 801869a:	4770      	bx	lr
 801869c:	2000012c 	.word	0x2000012c

080186a0 <__retarget_lock_init_recursive>:
 80186a0:	4770      	bx	lr

080186a2 <__retarget_lock_acquire_recursive>:
 80186a2:	4770      	bx	lr

080186a4 <__retarget_lock_release_recursive>:
 80186a4:	4770      	bx	lr

080186a6 <__ascii_mbtowc>:
 80186a6:	b082      	sub	sp, #8
 80186a8:	b901      	cbnz	r1, 80186ac <__ascii_mbtowc+0x6>
 80186aa:	a901      	add	r1, sp, #4
 80186ac:	b142      	cbz	r2, 80186c0 <__ascii_mbtowc+0x1a>
 80186ae:	b14b      	cbz	r3, 80186c4 <__ascii_mbtowc+0x1e>
 80186b0:	7813      	ldrb	r3, [r2, #0]
 80186b2:	600b      	str	r3, [r1, #0]
 80186b4:	7812      	ldrb	r2, [r2, #0]
 80186b6:	1e10      	subs	r0, r2, #0
 80186b8:	bf18      	it	ne
 80186ba:	2001      	movne	r0, #1
 80186bc:	b002      	add	sp, #8
 80186be:	4770      	bx	lr
 80186c0:	4610      	mov	r0, r2
 80186c2:	e7fb      	b.n	80186bc <__ascii_mbtowc+0x16>
 80186c4:	f06f 0001 	mvn.w	r0, #1
 80186c8:	e7f8      	b.n	80186bc <__ascii_mbtowc+0x16>

080186ca <memmove>:
 80186ca:	4288      	cmp	r0, r1
 80186cc:	b510      	push	{r4, lr}
 80186ce:	eb01 0402 	add.w	r4, r1, r2
 80186d2:	d902      	bls.n	80186da <memmove+0x10>
 80186d4:	4284      	cmp	r4, r0
 80186d6:	4623      	mov	r3, r4
 80186d8:	d807      	bhi.n	80186ea <memmove+0x20>
 80186da:	1e43      	subs	r3, r0, #1
 80186dc:	42a1      	cmp	r1, r4
 80186de:	d008      	beq.n	80186f2 <memmove+0x28>
 80186e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80186e8:	e7f8      	b.n	80186dc <memmove+0x12>
 80186ea:	4402      	add	r2, r0
 80186ec:	4601      	mov	r1, r0
 80186ee:	428a      	cmp	r2, r1
 80186f0:	d100      	bne.n	80186f4 <memmove+0x2a>
 80186f2:	bd10      	pop	{r4, pc}
 80186f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186fc:	e7f7      	b.n	80186ee <memmove+0x24>

080186fe <_realloc_r>:
 80186fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018702:	4680      	mov	r8, r0
 8018704:	4614      	mov	r4, r2
 8018706:	460e      	mov	r6, r1
 8018708:	b921      	cbnz	r1, 8018714 <_realloc_r+0x16>
 801870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801870e:	4611      	mov	r1, r2
 8018710:	f7fd be7c 	b.w	801640c <_malloc_r>
 8018714:	b92a      	cbnz	r2, 8018722 <_realloc_r+0x24>
 8018716:	f7fd fe0d 	bl	8016334 <_free_r>
 801871a:	4625      	mov	r5, r4
 801871c:	4628      	mov	r0, r5
 801871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018722:	f000 fc67 	bl	8018ff4 <_malloc_usable_size_r>
 8018726:	4284      	cmp	r4, r0
 8018728:	4607      	mov	r7, r0
 801872a:	d802      	bhi.n	8018732 <_realloc_r+0x34>
 801872c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018730:	d812      	bhi.n	8018758 <_realloc_r+0x5a>
 8018732:	4621      	mov	r1, r4
 8018734:	4640      	mov	r0, r8
 8018736:	f7fd fe69 	bl	801640c <_malloc_r>
 801873a:	4605      	mov	r5, r0
 801873c:	2800      	cmp	r0, #0
 801873e:	d0ed      	beq.n	801871c <_realloc_r+0x1e>
 8018740:	42bc      	cmp	r4, r7
 8018742:	4622      	mov	r2, r4
 8018744:	4631      	mov	r1, r6
 8018746:	bf28      	it	cs
 8018748:	463a      	movcs	r2, r7
 801874a:	f7fd fddd 	bl	8016308 <memcpy>
 801874e:	4631      	mov	r1, r6
 8018750:	4640      	mov	r0, r8
 8018752:	f7fd fdef 	bl	8016334 <_free_r>
 8018756:	e7e1      	b.n	801871c <_realloc_r+0x1e>
 8018758:	4635      	mov	r5, r6
 801875a:	e7df      	b.n	801871c <_realloc_r+0x1e>

0801875c <__sfputc_r>:
 801875c:	6893      	ldr	r3, [r2, #8]
 801875e:	3b01      	subs	r3, #1
 8018760:	2b00      	cmp	r3, #0
 8018762:	b410      	push	{r4}
 8018764:	6093      	str	r3, [r2, #8]
 8018766:	da08      	bge.n	801877a <__sfputc_r+0x1e>
 8018768:	6994      	ldr	r4, [r2, #24]
 801876a:	42a3      	cmp	r3, r4
 801876c:	db01      	blt.n	8018772 <__sfputc_r+0x16>
 801876e:	290a      	cmp	r1, #10
 8018770:	d103      	bne.n	801877a <__sfputc_r+0x1e>
 8018772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018776:	f000 b94b 	b.w	8018a10 <__swbuf_r>
 801877a:	6813      	ldr	r3, [r2, #0]
 801877c:	1c58      	adds	r0, r3, #1
 801877e:	6010      	str	r0, [r2, #0]
 8018780:	7019      	strb	r1, [r3, #0]
 8018782:	4608      	mov	r0, r1
 8018784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018788:	4770      	bx	lr

0801878a <__sfputs_r>:
 801878a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801878c:	4606      	mov	r6, r0
 801878e:	460f      	mov	r7, r1
 8018790:	4614      	mov	r4, r2
 8018792:	18d5      	adds	r5, r2, r3
 8018794:	42ac      	cmp	r4, r5
 8018796:	d101      	bne.n	801879c <__sfputs_r+0x12>
 8018798:	2000      	movs	r0, #0
 801879a:	e007      	b.n	80187ac <__sfputs_r+0x22>
 801879c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187a0:	463a      	mov	r2, r7
 80187a2:	4630      	mov	r0, r6
 80187a4:	f7ff ffda 	bl	801875c <__sfputc_r>
 80187a8:	1c43      	adds	r3, r0, #1
 80187aa:	d1f3      	bne.n	8018794 <__sfputs_r+0xa>
 80187ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080187b0 <_vfiprintf_r>:
 80187b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b4:	460d      	mov	r5, r1
 80187b6:	b09d      	sub	sp, #116	; 0x74
 80187b8:	4614      	mov	r4, r2
 80187ba:	4698      	mov	r8, r3
 80187bc:	4606      	mov	r6, r0
 80187be:	b118      	cbz	r0, 80187c8 <_vfiprintf_r+0x18>
 80187c0:	6983      	ldr	r3, [r0, #24]
 80187c2:	b90b      	cbnz	r3, 80187c8 <_vfiprintf_r+0x18>
 80187c4:	f000 fb14 	bl	8018df0 <__sinit>
 80187c8:	4b89      	ldr	r3, [pc, #548]	; (80189f0 <_vfiprintf_r+0x240>)
 80187ca:	429d      	cmp	r5, r3
 80187cc:	d11b      	bne.n	8018806 <_vfiprintf_r+0x56>
 80187ce:	6875      	ldr	r5, [r6, #4]
 80187d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187d2:	07d9      	lsls	r1, r3, #31
 80187d4:	d405      	bmi.n	80187e2 <_vfiprintf_r+0x32>
 80187d6:	89ab      	ldrh	r3, [r5, #12]
 80187d8:	059a      	lsls	r2, r3, #22
 80187da:	d402      	bmi.n	80187e2 <_vfiprintf_r+0x32>
 80187dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187de:	f7ff ff60 	bl	80186a2 <__retarget_lock_acquire_recursive>
 80187e2:	89ab      	ldrh	r3, [r5, #12]
 80187e4:	071b      	lsls	r3, r3, #28
 80187e6:	d501      	bpl.n	80187ec <_vfiprintf_r+0x3c>
 80187e8:	692b      	ldr	r3, [r5, #16]
 80187ea:	b9eb      	cbnz	r3, 8018828 <_vfiprintf_r+0x78>
 80187ec:	4629      	mov	r1, r5
 80187ee:	4630      	mov	r0, r6
 80187f0:	f000 f96e 	bl	8018ad0 <__swsetup_r>
 80187f4:	b1c0      	cbz	r0, 8018828 <_vfiprintf_r+0x78>
 80187f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187f8:	07dc      	lsls	r4, r3, #31
 80187fa:	d50e      	bpl.n	801881a <_vfiprintf_r+0x6a>
 80187fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018800:	b01d      	add	sp, #116	; 0x74
 8018802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018806:	4b7b      	ldr	r3, [pc, #492]	; (80189f4 <_vfiprintf_r+0x244>)
 8018808:	429d      	cmp	r5, r3
 801880a:	d101      	bne.n	8018810 <_vfiprintf_r+0x60>
 801880c:	68b5      	ldr	r5, [r6, #8]
 801880e:	e7df      	b.n	80187d0 <_vfiprintf_r+0x20>
 8018810:	4b79      	ldr	r3, [pc, #484]	; (80189f8 <_vfiprintf_r+0x248>)
 8018812:	429d      	cmp	r5, r3
 8018814:	bf08      	it	eq
 8018816:	68f5      	ldreq	r5, [r6, #12]
 8018818:	e7da      	b.n	80187d0 <_vfiprintf_r+0x20>
 801881a:	89ab      	ldrh	r3, [r5, #12]
 801881c:	0598      	lsls	r0, r3, #22
 801881e:	d4ed      	bmi.n	80187fc <_vfiprintf_r+0x4c>
 8018820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018822:	f7ff ff3f 	bl	80186a4 <__retarget_lock_release_recursive>
 8018826:	e7e9      	b.n	80187fc <_vfiprintf_r+0x4c>
 8018828:	2300      	movs	r3, #0
 801882a:	9309      	str	r3, [sp, #36]	; 0x24
 801882c:	2320      	movs	r3, #32
 801882e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018832:	f8cd 800c 	str.w	r8, [sp, #12]
 8018836:	2330      	movs	r3, #48	; 0x30
 8018838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80189fc <_vfiprintf_r+0x24c>
 801883c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018840:	f04f 0901 	mov.w	r9, #1
 8018844:	4623      	mov	r3, r4
 8018846:	469a      	mov	sl, r3
 8018848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801884c:	b10a      	cbz	r2, 8018852 <_vfiprintf_r+0xa2>
 801884e:	2a25      	cmp	r2, #37	; 0x25
 8018850:	d1f9      	bne.n	8018846 <_vfiprintf_r+0x96>
 8018852:	ebba 0b04 	subs.w	fp, sl, r4
 8018856:	d00b      	beq.n	8018870 <_vfiprintf_r+0xc0>
 8018858:	465b      	mov	r3, fp
 801885a:	4622      	mov	r2, r4
 801885c:	4629      	mov	r1, r5
 801885e:	4630      	mov	r0, r6
 8018860:	f7ff ff93 	bl	801878a <__sfputs_r>
 8018864:	3001      	adds	r0, #1
 8018866:	f000 80aa 	beq.w	80189be <_vfiprintf_r+0x20e>
 801886a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801886c:	445a      	add	r2, fp
 801886e:	9209      	str	r2, [sp, #36]	; 0x24
 8018870:	f89a 3000 	ldrb.w	r3, [sl]
 8018874:	2b00      	cmp	r3, #0
 8018876:	f000 80a2 	beq.w	80189be <_vfiprintf_r+0x20e>
 801887a:	2300      	movs	r3, #0
 801887c:	f04f 32ff 	mov.w	r2, #4294967295
 8018880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018884:	f10a 0a01 	add.w	sl, sl, #1
 8018888:	9304      	str	r3, [sp, #16]
 801888a:	9307      	str	r3, [sp, #28]
 801888c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018890:	931a      	str	r3, [sp, #104]	; 0x68
 8018892:	4654      	mov	r4, sl
 8018894:	2205      	movs	r2, #5
 8018896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801889a:	4858      	ldr	r0, [pc, #352]	; (80189fc <_vfiprintf_r+0x24c>)
 801889c:	f7e7 fcc0 	bl	8000220 <memchr>
 80188a0:	9a04      	ldr	r2, [sp, #16]
 80188a2:	b9d8      	cbnz	r0, 80188dc <_vfiprintf_r+0x12c>
 80188a4:	06d1      	lsls	r1, r2, #27
 80188a6:	bf44      	itt	mi
 80188a8:	2320      	movmi	r3, #32
 80188aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188ae:	0713      	lsls	r3, r2, #28
 80188b0:	bf44      	itt	mi
 80188b2:	232b      	movmi	r3, #43	; 0x2b
 80188b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188b8:	f89a 3000 	ldrb.w	r3, [sl]
 80188bc:	2b2a      	cmp	r3, #42	; 0x2a
 80188be:	d015      	beq.n	80188ec <_vfiprintf_r+0x13c>
 80188c0:	9a07      	ldr	r2, [sp, #28]
 80188c2:	4654      	mov	r4, sl
 80188c4:	2000      	movs	r0, #0
 80188c6:	f04f 0c0a 	mov.w	ip, #10
 80188ca:	4621      	mov	r1, r4
 80188cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188d0:	3b30      	subs	r3, #48	; 0x30
 80188d2:	2b09      	cmp	r3, #9
 80188d4:	d94e      	bls.n	8018974 <_vfiprintf_r+0x1c4>
 80188d6:	b1b0      	cbz	r0, 8018906 <_vfiprintf_r+0x156>
 80188d8:	9207      	str	r2, [sp, #28]
 80188da:	e014      	b.n	8018906 <_vfiprintf_r+0x156>
 80188dc:	eba0 0308 	sub.w	r3, r0, r8
 80188e0:	fa09 f303 	lsl.w	r3, r9, r3
 80188e4:	4313      	orrs	r3, r2
 80188e6:	9304      	str	r3, [sp, #16]
 80188e8:	46a2      	mov	sl, r4
 80188ea:	e7d2      	b.n	8018892 <_vfiprintf_r+0xe2>
 80188ec:	9b03      	ldr	r3, [sp, #12]
 80188ee:	1d19      	adds	r1, r3, #4
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	9103      	str	r1, [sp, #12]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	bfbb      	ittet	lt
 80188f8:	425b      	neglt	r3, r3
 80188fa:	f042 0202 	orrlt.w	r2, r2, #2
 80188fe:	9307      	strge	r3, [sp, #28]
 8018900:	9307      	strlt	r3, [sp, #28]
 8018902:	bfb8      	it	lt
 8018904:	9204      	strlt	r2, [sp, #16]
 8018906:	7823      	ldrb	r3, [r4, #0]
 8018908:	2b2e      	cmp	r3, #46	; 0x2e
 801890a:	d10c      	bne.n	8018926 <_vfiprintf_r+0x176>
 801890c:	7863      	ldrb	r3, [r4, #1]
 801890e:	2b2a      	cmp	r3, #42	; 0x2a
 8018910:	d135      	bne.n	801897e <_vfiprintf_r+0x1ce>
 8018912:	9b03      	ldr	r3, [sp, #12]
 8018914:	1d1a      	adds	r2, r3, #4
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	9203      	str	r2, [sp, #12]
 801891a:	2b00      	cmp	r3, #0
 801891c:	bfb8      	it	lt
 801891e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018922:	3402      	adds	r4, #2
 8018924:	9305      	str	r3, [sp, #20]
 8018926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018a0c <_vfiprintf_r+0x25c>
 801892a:	7821      	ldrb	r1, [r4, #0]
 801892c:	2203      	movs	r2, #3
 801892e:	4650      	mov	r0, sl
 8018930:	f7e7 fc76 	bl	8000220 <memchr>
 8018934:	b140      	cbz	r0, 8018948 <_vfiprintf_r+0x198>
 8018936:	2340      	movs	r3, #64	; 0x40
 8018938:	eba0 000a 	sub.w	r0, r0, sl
 801893c:	fa03 f000 	lsl.w	r0, r3, r0
 8018940:	9b04      	ldr	r3, [sp, #16]
 8018942:	4303      	orrs	r3, r0
 8018944:	3401      	adds	r4, #1
 8018946:	9304      	str	r3, [sp, #16]
 8018948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801894c:	482c      	ldr	r0, [pc, #176]	; (8018a00 <_vfiprintf_r+0x250>)
 801894e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018952:	2206      	movs	r2, #6
 8018954:	f7e7 fc64 	bl	8000220 <memchr>
 8018958:	2800      	cmp	r0, #0
 801895a:	d03f      	beq.n	80189dc <_vfiprintf_r+0x22c>
 801895c:	4b29      	ldr	r3, [pc, #164]	; (8018a04 <_vfiprintf_r+0x254>)
 801895e:	bb1b      	cbnz	r3, 80189a8 <_vfiprintf_r+0x1f8>
 8018960:	9b03      	ldr	r3, [sp, #12]
 8018962:	3307      	adds	r3, #7
 8018964:	f023 0307 	bic.w	r3, r3, #7
 8018968:	3308      	adds	r3, #8
 801896a:	9303      	str	r3, [sp, #12]
 801896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801896e:	443b      	add	r3, r7
 8018970:	9309      	str	r3, [sp, #36]	; 0x24
 8018972:	e767      	b.n	8018844 <_vfiprintf_r+0x94>
 8018974:	fb0c 3202 	mla	r2, ip, r2, r3
 8018978:	460c      	mov	r4, r1
 801897a:	2001      	movs	r0, #1
 801897c:	e7a5      	b.n	80188ca <_vfiprintf_r+0x11a>
 801897e:	2300      	movs	r3, #0
 8018980:	3401      	adds	r4, #1
 8018982:	9305      	str	r3, [sp, #20]
 8018984:	4619      	mov	r1, r3
 8018986:	f04f 0c0a 	mov.w	ip, #10
 801898a:	4620      	mov	r0, r4
 801898c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018990:	3a30      	subs	r2, #48	; 0x30
 8018992:	2a09      	cmp	r2, #9
 8018994:	d903      	bls.n	801899e <_vfiprintf_r+0x1ee>
 8018996:	2b00      	cmp	r3, #0
 8018998:	d0c5      	beq.n	8018926 <_vfiprintf_r+0x176>
 801899a:	9105      	str	r1, [sp, #20]
 801899c:	e7c3      	b.n	8018926 <_vfiprintf_r+0x176>
 801899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80189a2:	4604      	mov	r4, r0
 80189a4:	2301      	movs	r3, #1
 80189a6:	e7f0      	b.n	801898a <_vfiprintf_r+0x1da>
 80189a8:	ab03      	add	r3, sp, #12
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	462a      	mov	r2, r5
 80189ae:	4b16      	ldr	r3, [pc, #88]	; (8018a08 <_vfiprintf_r+0x258>)
 80189b0:	a904      	add	r1, sp, #16
 80189b2:	4630      	mov	r0, r6
 80189b4:	f7fd fe3e 	bl	8016634 <_printf_float>
 80189b8:	4607      	mov	r7, r0
 80189ba:	1c78      	adds	r0, r7, #1
 80189bc:	d1d6      	bne.n	801896c <_vfiprintf_r+0x1bc>
 80189be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80189c0:	07d9      	lsls	r1, r3, #31
 80189c2:	d405      	bmi.n	80189d0 <_vfiprintf_r+0x220>
 80189c4:	89ab      	ldrh	r3, [r5, #12]
 80189c6:	059a      	lsls	r2, r3, #22
 80189c8:	d402      	bmi.n	80189d0 <_vfiprintf_r+0x220>
 80189ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189cc:	f7ff fe6a 	bl	80186a4 <__retarget_lock_release_recursive>
 80189d0:	89ab      	ldrh	r3, [r5, #12]
 80189d2:	065b      	lsls	r3, r3, #25
 80189d4:	f53f af12 	bmi.w	80187fc <_vfiprintf_r+0x4c>
 80189d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189da:	e711      	b.n	8018800 <_vfiprintf_r+0x50>
 80189dc:	ab03      	add	r3, sp, #12
 80189de:	9300      	str	r3, [sp, #0]
 80189e0:	462a      	mov	r2, r5
 80189e2:	4b09      	ldr	r3, [pc, #36]	; (8018a08 <_vfiprintf_r+0x258>)
 80189e4:	a904      	add	r1, sp, #16
 80189e6:	4630      	mov	r0, r6
 80189e8:	f7fe f8c8 	bl	8016b7c <_printf_i>
 80189ec:	e7e4      	b.n	80189b8 <_vfiprintf_r+0x208>
 80189ee:	bf00      	nop
 80189f0:	08019dcc 	.word	0x08019dcc
 80189f4:	08019dec 	.word	0x08019dec
 80189f8:	08019dac 	.word	0x08019dac
 80189fc:	08019d54 	.word	0x08019d54
 8018a00:	08019d5e 	.word	0x08019d5e
 8018a04:	08016635 	.word	0x08016635
 8018a08:	0801878b 	.word	0x0801878b
 8018a0c:	08019d5a 	.word	0x08019d5a

08018a10 <__swbuf_r>:
 8018a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a12:	460e      	mov	r6, r1
 8018a14:	4614      	mov	r4, r2
 8018a16:	4605      	mov	r5, r0
 8018a18:	b118      	cbz	r0, 8018a22 <__swbuf_r+0x12>
 8018a1a:	6983      	ldr	r3, [r0, #24]
 8018a1c:	b90b      	cbnz	r3, 8018a22 <__swbuf_r+0x12>
 8018a1e:	f000 f9e7 	bl	8018df0 <__sinit>
 8018a22:	4b21      	ldr	r3, [pc, #132]	; (8018aa8 <__swbuf_r+0x98>)
 8018a24:	429c      	cmp	r4, r3
 8018a26:	d12b      	bne.n	8018a80 <__swbuf_r+0x70>
 8018a28:	686c      	ldr	r4, [r5, #4]
 8018a2a:	69a3      	ldr	r3, [r4, #24]
 8018a2c:	60a3      	str	r3, [r4, #8]
 8018a2e:	89a3      	ldrh	r3, [r4, #12]
 8018a30:	071a      	lsls	r2, r3, #28
 8018a32:	d52f      	bpl.n	8018a94 <__swbuf_r+0x84>
 8018a34:	6923      	ldr	r3, [r4, #16]
 8018a36:	b36b      	cbz	r3, 8018a94 <__swbuf_r+0x84>
 8018a38:	6923      	ldr	r3, [r4, #16]
 8018a3a:	6820      	ldr	r0, [r4, #0]
 8018a3c:	1ac0      	subs	r0, r0, r3
 8018a3e:	6963      	ldr	r3, [r4, #20]
 8018a40:	b2f6      	uxtb	r6, r6
 8018a42:	4283      	cmp	r3, r0
 8018a44:	4637      	mov	r7, r6
 8018a46:	dc04      	bgt.n	8018a52 <__swbuf_r+0x42>
 8018a48:	4621      	mov	r1, r4
 8018a4a:	4628      	mov	r0, r5
 8018a4c:	f000 f93c 	bl	8018cc8 <_fflush_r>
 8018a50:	bb30      	cbnz	r0, 8018aa0 <__swbuf_r+0x90>
 8018a52:	68a3      	ldr	r3, [r4, #8]
 8018a54:	3b01      	subs	r3, #1
 8018a56:	60a3      	str	r3, [r4, #8]
 8018a58:	6823      	ldr	r3, [r4, #0]
 8018a5a:	1c5a      	adds	r2, r3, #1
 8018a5c:	6022      	str	r2, [r4, #0]
 8018a5e:	701e      	strb	r6, [r3, #0]
 8018a60:	6963      	ldr	r3, [r4, #20]
 8018a62:	3001      	adds	r0, #1
 8018a64:	4283      	cmp	r3, r0
 8018a66:	d004      	beq.n	8018a72 <__swbuf_r+0x62>
 8018a68:	89a3      	ldrh	r3, [r4, #12]
 8018a6a:	07db      	lsls	r3, r3, #31
 8018a6c:	d506      	bpl.n	8018a7c <__swbuf_r+0x6c>
 8018a6e:	2e0a      	cmp	r6, #10
 8018a70:	d104      	bne.n	8018a7c <__swbuf_r+0x6c>
 8018a72:	4621      	mov	r1, r4
 8018a74:	4628      	mov	r0, r5
 8018a76:	f000 f927 	bl	8018cc8 <_fflush_r>
 8018a7a:	b988      	cbnz	r0, 8018aa0 <__swbuf_r+0x90>
 8018a7c:	4638      	mov	r0, r7
 8018a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a80:	4b0a      	ldr	r3, [pc, #40]	; (8018aac <__swbuf_r+0x9c>)
 8018a82:	429c      	cmp	r4, r3
 8018a84:	d101      	bne.n	8018a8a <__swbuf_r+0x7a>
 8018a86:	68ac      	ldr	r4, [r5, #8]
 8018a88:	e7cf      	b.n	8018a2a <__swbuf_r+0x1a>
 8018a8a:	4b09      	ldr	r3, [pc, #36]	; (8018ab0 <__swbuf_r+0xa0>)
 8018a8c:	429c      	cmp	r4, r3
 8018a8e:	bf08      	it	eq
 8018a90:	68ec      	ldreq	r4, [r5, #12]
 8018a92:	e7ca      	b.n	8018a2a <__swbuf_r+0x1a>
 8018a94:	4621      	mov	r1, r4
 8018a96:	4628      	mov	r0, r5
 8018a98:	f000 f81a 	bl	8018ad0 <__swsetup_r>
 8018a9c:	2800      	cmp	r0, #0
 8018a9e:	d0cb      	beq.n	8018a38 <__swbuf_r+0x28>
 8018aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8018aa4:	e7ea      	b.n	8018a7c <__swbuf_r+0x6c>
 8018aa6:	bf00      	nop
 8018aa8:	08019dcc 	.word	0x08019dcc
 8018aac:	08019dec 	.word	0x08019dec
 8018ab0:	08019dac 	.word	0x08019dac

08018ab4 <__ascii_wctomb>:
 8018ab4:	b149      	cbz	r1, 8018aca <__ascii_wctomb+0x16>
 8018ab6:	2aff      	cmp	r2, #255	; 0xff
 8018ab8:	bf85      	ittet	hi
 8018aba:	238a      	movhi	r3, #138	; 0x8a
 8018abc:	6003      	strhi	r3, [r0, #0]
 8018abe:	700a      	strbls	r2, [r1, #0]
 8018ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8018ac4:	bf98      	it	ls
 8018ac6:	2001      	movls	r0, #1
 8018ac8:	4770      	bx	lr
 8018aca:	4608      	mov	r0, r1
 8018acc:	4770      	bx	lr
	...

08018ad0 <__swsetup_r>:
 8018ad0:	4b32      	ldr	r3, [pc, #200]	; (8018b9c <__swsetup_r+0xcc>)
 8018ad2:	b570      	push	{r4, r5, r6, lr}
 8018ad4:	681d      	ldr	r5, [r3, #0]
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	460c      	mov	r4, r1
 8018ada:	b125      	cbz	r5, 8018ae6 <__swsetup_r+0x16>
 8018adc:	69ab      	ldr	r3, [r5, #24]
 8018ade:	b913      	cbnz	r3, 8018ae6 <__swsetup_r+0x16>
 8018ae0:	4628      	mov	r0, r5
 8018ae2:	f000 f985 	bl	8018df0 <__sinit>
 8018ae6:	4b2e      	ldr	r3, [pc, #184]	; (8018ba0 <__swsetup_r+0xd0>)
 8018ae8:	429c      	cmp	r4, r3
 8018aea:	d10f      	bne.n	8018b0c <__swsetup_r+0x3c>
 8018aec:	686c      	ldr	r4, [r5, #4]
 8018aee:	89a3      	ldrh	r3, [r4, #12]
 8018af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018af4:	0719      	lsls	r1, r3, #28
 8018af6:	d42c      	bmi.n	8018b52 <__swsetup_r+0x82>
 8018af8:	06dd      	lsls	r5, r3, #27
 8018afa:	d411      	bmi.n	8018b20 <__swsetup_r+0x50>
 8018afc:	2309      	movs	r3, #9
 8018afe:	6033      	str	r3, [r6, #0]
 8018b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018b04:	81a3      	strh	r3, [r4, #12]
 8018b06:	f04f 30ff 	mov.w	r0, #4294967295
 8018b0a:	e03e      	b.n	8018b8a <__swsetup_r+0xba>
 8018b0c:	4b25      	ldr	r3, [pc, #148]	; (8018ba4 <__swsetup_r+0xd4>)
 8018b0e:	429c      	cmp	r4, r3
 8018b10:	d101      	bne.n	8018b16 <__swsetup_r+0x46>
 8018b12:	68ac      	ldr	r4, [r5, #8]
 8018b14:	e7eb      	b.n	8018aee <__swsetup_r+0x1e>
 8018b16:	4b24      	ldr	r3, [pc, #144]	; (8018ba8 <__swsetup_r+0xd8>)
 8018b18:	429c      	cmp	r4, r3
 8018b1a:	bf08      	it	eq
 8018b1c:	68ec      	ldreq	r4, [r5, #12]
 8018b1e:	e7e6      	b.n	8018aee <__swsetup_r+0x1e>
 8018b20:	0758      	lsls	r0, r3, #29
 8018b22:	d512      	bpl.n	8018b4a <__swsetup_r+0x7a>
 8018b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b26:	b141      	cbz	r1, 8018b3a <__swsetup_r+0x6a>
 8018b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b2c:	4299      	cmp	r1, r3
 8018b2e:	d002      	beq.n	8018b36 <__swsetup_r+0x66>
 8018b30:	4630      	mov	r0, r6
 8018b32:	f7fd fbff 	bl	8016334 <_free_r>
 8018b36:	2300      	movs	r3, #0
 8018b38:	6363      	str	r3, [r4, #52]	; 0x34
 8018b3a:	89a3      	ldrh	r3, [r4, #12]
 8018b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b40:	81a3      	strh	r3, [r4, #12]
 8018b42:	2300      	movs	r3, #0
 8018b44:	6063      	str	r3, [r4, #4]
 8018b46:	6923      	ldr	r3, [r4, #16]
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	89a3      	ldrh	r3, [r4, #12]
 8018b4c:	f043 0308 	orr.w	r3, r3, #8
 8018b50:	81a3      	strh	r3, [r4, #12]
 8018b52:	6923      	ldr	r3, [r4, #16]
 8018b54:	b94b      	cbnz	r3, 8018b6a <__swsetup_r+0x9a>
 8018b56:	89a3      	ldrh	r3, [r4, #12]
 8018b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b60:	d003      	beq.n	8018b6a <__swsetup_r+0x9a>
 8018b62:	4621      	mov	r1, r4
 8018b64:	4630      	mov	r0, r6
 8018b66:	f000 fa05 	bl	8018f74 <__smakebuf_r>
 8018b6a:	89a0      	ldrh	r0, [r4, #12]
 8018b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b70:	f010 0301 	ands.w	r3, r0, #1
 8018b74:	d00a      	beq.n	8018b8c <__swsetup_r+0xbc>
 8018b76:	2300      	movs	r3, #0
 8018b78:	60a3      	str	r3, [r4, #8]
 8018b7a:	6963      	ldr	r3, [r4, #20]
 8018b7c:	425b      	negs	r3, r3
 8018b7e:	61a3      	str	r3, [r4, #24]
 8018b80:	6923      	ldr	r3, [r4, #16]
 8018b82:	b943      	cbnz	r3, 8018b96 <__swsetup_r+0xc6>
 8018b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b88:	d1ba      	bne.n	8018b00 <__swsetup_r+0x30>
 8018b8a:	bd70      	pop	{r4, r5, r6, pc}
 8018b8c:	0781      	lsls	r1, r0, #30
 8018b8e:	bf58      	it	pl
 8018b90:	6963      	ldrpl	r3, [r4, #20]
 8018b92:	60a3      	str	r3, [r4, #8]
 8018b94:	e7f4      	b.n	8018b80 <__swsetup_r+0xb0>
 8018b96:	2000      	movs	r0, #0
 8018b98:	e7f7      	b.n	8018b8a <__swsetup_r+0xba>
 8018b9a:	bf00      	nop
 8018b9c:	2000012c 	.word	0x2000012c
 8018ba0:	08019dcc 	.word	0x08019dcc
 8018ba4:	08019dec 	.word	0x08019dec
 8018ba8:	08019dac 	.word	0x08019dac

08018bac <abort>:
 8018bac:	b508      	push	{r3, lr}
 8018bae:	2006      	movs	r0, #6
 8018bb0:	f000 fa50 	bl	8019054 <raise>
 8018bb4:	2001      	movs	r0, #1
 8018bb6:	f7ea fa75 	bl	80030a4 <_exit>
	...

08018bbc <__sflush_r>:
 8018bbc:	898a      	ldrh	r2, [r1, #12]
 8018bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bc2:	4605      	mov	r5, r0
 8018bc4:	0710      	lsls	r0, r2, #28
 8018bc6:	460c      	mov	r4, r1
 8018bc8:	d458      	bmi.n	8018c7c <__sflush_r+0xc0>
 8018bca:	684b      	ldr	r3, [r1, #4]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	dc05      	bgt.n	8018bdc <__sflush_r+0x20>
 8018bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	dc02      	bgt.n	8018bdc <__sflush_r+0x20>
 8018bd6:	2000      	movs	r0, #0
 8018bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018bde:	2e00      	cmp	r6, #0
 8018be0:	d0f9      	beq.n	8018bd6 <__sflush_r+0x1a>
 8018be2:	2300      	movs	r3, #0
 8018be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018be8:	682f      	ldr	r7, [r5, #0]
 8018bea:	602b      	str	r3, [r5, #0]
 8018bec:	d032      	beq.n	8018c54 <__sflush_r+0x98>
 8018bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018bf0:	89a3      	ldrh	r3, [r4, #12]
 8018bf2:	075a      	lsls	r2, r3, #29
 8018bf4:	d505      	bpl.n	8018c02 <__sflush_r+0x46>
 8018bf6:	6863      	ldr	r3, [r4, #4]
 8018bf8:	1ac0      	subs	r0, r0, r3
 8018bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018bfc:	b10b      	cbz	r3, 8018c02 <__sflush_r+0x46>
 8018bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c00:	1ac0      	subs	r0, r0, r3
 8018c02:	2300      	movs	r3, #0
 8018c04:	4602      	mov	r2, r0
 8018c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c08:	6a21      	ldr	r1, [r4, #32]
 8018c0a:	4628      	mov	r0, r5
 8018c0c:	47b0      	blx	r6
 8018c0e:	1c43      	adds	r3, r0, #1
 8018c10:	89a3      	ldrh	r3, [r4, #12]
 8018c12:	d106      	bne.n	8018c22 <__sflush_r+0x66>
 8018c14:	6829      	ldr	r1, [r5, #0]
 8018c16:	291d      	cmp	r1, #29
 8018c18:	d82c      	bhi.n	8018c74 <__sflush_r+0xb8>
 8018c1a:	4a2a      	ldr	r2, [pc, #168]	; (8018cc4 <__sflush_r+0x108>)
 8018c1c:	40ca      	lsrs	r2, r1
 8018c1e:	07d6      	lsls	r6, r2, #31
 8018c20:	d528      	bpl.n	8018c74 <__sflush_r+0xb8>
 8018c22:	2200      	movs	r2, #0
 8018c24:	6062      	str	r2, [r4, #4]
 8018c26:	04d9      	lsls	r1, r3, #19
 8018c28:	6922      	ldr	r2, [r4, #16]
 8018c2a:	6022      	str	r2, [r4, #0]
 8018c2c:	d504      	bpl.n	8018c38 <__sflush_r+0x7c>
 8018c2e:	1c42      	adds	r2, r0, #1
 8018c30:	d101      	bne.n	8018c36 <__sflush_r+0x7a>
 8018c32:	682b      	ldr	r3, [r5, #0]
 8018c34:	b903      	cbnz	r3, 8018c38 <__sflush_r+0x7c>
 8018c36:	6560      	str	r0, [r4, #84]	; 0x54
 8018c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c3a:	602f      	str	r7, [r5, #0]
 8018c3c:	2900      	cmp	r1, #0
 8018c3e:	d0ca      	beq.n	8018bd6 <__sflush_r+0x1a>
 8018c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c44:	4299      	cmp	r1, r3
 8018c46:	d002      	beq.n	8018c4e <__sflush_r+0x92>
 8018c48:	4628      	mov	r0, r5
 8018c4a:	f7fd fb73 	bl	8016334 <_free_r>
 8018c4e:	2000      	movs	r0, #0
 8018c50:	6360      	str	r0, [r4, #52]	; 0x34
 8018c52:	e7c1      	b.n	8018bd8 <__sflush_r+0x1c>
 8018c54:	6a21      	ldr	r1, [r4, #32]
 8018c56:	2301      	movs	r3, #1
 8018c58:	4628      	mov	r0, r5
 8018c5a:	47b0      	blx	r6
 8018c5c:	1c41      	adds	r1, r0, #1
 8018c5e:	d1c7      	bne.n	8018bf0 <__sflush_r+0x34>
 8018c60:	682b      	ldr	r3, [r5, #0]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d0c4      	beq.n	8018bf0 <__sflush_r+0x34>
 8018c66:	2b1d      	cmp	r3, #29
 8018c68:	d001      	beq.n	8018c6e <__sflush_r+0xb2>
 8018c6a:	2b16      	cmp	r3, #22
 8018c6c:	d101      	bne.n	8018c72 <__sflush_r+0xb6>
 8018c6e:	602f      	str	r7, [r5, #0]
 8018c70:	e7b1      	b.n	8018bd6 <__sflush_r+0x1a>
 8018c72:	89a3      	ldrh	r3, [r4, #12]
 8018c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c78:	81a3      	strh	r3, [r4, #12]
 8018c7a:	e7ad      	b.n	8018bd8 <__sflush_r+0x1c>
 8018c7c:	690f      	ldr	r7, [r1, #16]
 8018c7e:	2f00      	cmp	r7, #0
 8018c80:	d0a9      	beq.n	8018bd6 <__sflush_r+0x1a>
 8018c82:	0793      	lsls	r3, r2, #30
 8018c84:	680e      	ldr	r6, [r1, #0]
 8018c86:	bf08      	it	eq
 8018c88:	694b      	ldreq	r3, [r1, #20]
 8018c8a:	600f      	str	r7, [r1, #0]
 8018c8c:	bf18      	it	ne
 8018c8e:	2300      	movne	r3, #0
 8018c90:	eba6 0807 	sub.w	r8, r6, r7
 8018c94:	608b      	str	r3, [r1, #8]
 8018c96:	f1b8 0f00 	cmp.w	r8, #0
 8018c9a:	dd9c      	ble.n	8018bd6 <__sflush_r+0x1a>
 8018c9c:	6a21      	ldr	r1, [r4, #32]
 8018c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018ca0:	4643      	mov	r3, r8
 8018ca2:	463a      	mov	r2, r7
 8018ca4:	4628      	mov	r0, r5
 8018ca6:	47b0      	blx	r6
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	dc06      	bgt.n	8018cba <__sflush_r+0xfe>
 8018cac:	89a3      	ldrh	r3, [r4, #12]
 8018cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cb2:	81a3      	strh	r3, [r4, #12]
 8018cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb8:	e78e      	b.n	8018bd8 <__sflush_r+0x1c>
 8018cba:	4407      	add	r7, r0
 8018cbc:	eba8 0800 	sub.w	r8, r8, r0
 8018cc0:	e7e9      	b.n	8018c96 <__sflush_r+0xda>
 8018cc2:	bf00      	nop
 8018cc4:	20400001 	.word	0x20400001

08018cc8 <_fflush_r>:
 8018cc8:	b538      	push	{r3, r4, r5, lr}
 8018cca:	690b      	ldr	r3, [r1, #16]
 8018ccc:	4605      	mov	r5, r0
 8018cce:	460c      	mov	r4, r1
 8018cd0:	b913      	cbnz	r3, 8018cd8 <_fflush_r+0x10>
 8018cd2:	2500      	movs	r5, #0
 8018cd4:	4628      	mov	r0, r5
 8018cd6:	bd38      	pop	{r3, r4, r5, pc}
 8018cd8:	b118      	cbz	r0, 8018ce2 <_fflush_r+0x1a>
 8018cda:	6983      	ldr	r3, [r0, #24]
 8018cdc:	b90b      	cbnz	r3, 8018ce2 <_fflush_r+0x1a>
 8018cde:	f000 f887 	bl	8018df0 <__sinit>
 8018ce2:	4b14      	ldr	r3, [pc, #80]	; (8018d34 <_fflush_r+0x6c>)
 8018ce4:	429c      	cmp	r4, r3
 8018ce6:	d11b      	bne.n	8018d20 <_fflush_r+0x58>
 8018ce8:	686c      	ldr	r4, [r5, #4]
 8018cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d0ef      	beq.n	8018cd2 <_fflush_r+0xa>
 8018cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018cf4:	07d0      	lsls	r0, r2, #31
 8018cf6:	d404      	bmi.n	8018d02 <_fflush_r+0x3a>
 8018cf8:	0599      	lsls	r1, r3, #22
 8018cfa:	d402      	bmi.n	8018d02 <_fflush_r+0x3a>
 8018cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cfe:	f7ff fcd0 	bl	80186a2 <__retarget_lock_acquire_recursive>
 8018d02:	4628      	mov	r0, r5
 8018d04:	4621      	mov	r1, r4
 8018d06:	f7ff ff59 	bl	8018bbc <__sflush_r>
 8018d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d0c:	07da      	lsls	r2, r3, #31
 8018d0e:	4605      	mov	r5, r0
 8018d10:	d4e0      	bmi.n	8018cd4 <_fflush_r+0xc>
 8018d12:	89a3      	ldrh	r3, [r4, #12]
 8018d14:	059b      	lsls	r3, r3, #22
 8018d16:	d4dd      	bmi.n	8018cd4 <_fflush_r+0xc>
 8018d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d1a:	f7ff fcc3 	bl	80186a4 <__retarget_lock_release_recursive>
 8018d1e:	e7d9      	b.n	8018cd4 <_fflush_r+0xc>
 8018d20:	4b05      	ldr	r3, [pc, #20]	; (8018d38 <_fflush_r+0x70>)
 8018d22:	429c      	cmp	r4, r3
 8018d24:	d101      	bne.n	8018d2a <_fflush_r+0x62>
 8018d26:	68ac      	ldr	r4, [r5, #8]
 8018d28:	e7df      	b.n	8018cea <_fflush_r+0x22>
 8018d2a:	4b04      	ldr	r3, [pc, #16]	; (8018d3c <_fflush_r+0x74>)
 8018d2c:	429c      	cmp	r4, r3
 8018d2e:	bf08      	it	eq
 8018d30:	68ec      	ldreq	r4, [r5, #12]
 8018d32:	e7da      	b.n	8018cea <_fflush_r+0x22>
 8018d34:	08019dcc 	.word	0x08019dcc
 8018d38:	08019dec 	.word	0x08019dec
 8018d3c:	08019dac 	.word	0x08019dac

08018d40 <std>:
 8018d40:	2300      	movs	r3, #0
 8018d42:	b510      	push	{r4, lr}
 8018d44:	4604      	mov	r4, r0
 8018d46:	e9c0 3300 	strd	r3, r3, [r0]
 8018d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018d4e:	6083      	str	r3, [r0, #8]
 8018d50:	8181      	strh	r1, [r0, #12]
 8018d52:	6643      	str	r3, [r0, #100]	; 0x64
 8018d54:	81c2      	strh	r2, [r0, #14]
 8018d56:	6183      	str	r3, [r0, #24]
 8018d58:	4619      	mov	r1, r3
 8018d5a:	2208      	movs	r2, #8
 8018d5c:	305c      	adds	r0, #92	; 0x5c
 8018d5e:	f7fd fae1 	bl	8016324 <memset>
 8018d62:	4b05      	ldr	r3, [pc, #20]	; (8018d78 <std+0x38>)
 8018d64:	6263      	str	r3, [r4, #36]	; 0x24
 8018d66:	4b05      	ldr	r3, [pc, #20]	; (8018d7c <std+0x3c>)
 8018d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8018d6a:	4b05      	ldr	r3, [pc, #20]	; (8018d80 <std+0x40>)
 8018d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018d6e:	4b05      	ldr	r3, [pc, #20]	; (8018d84 <std+0x44>)
 8018d70:	6224      	str	r4, [r4, #32]
 8018d72:	6323      	str	r3, [r4, #48]	; 0x30
 8018d74:	bd10      	pop	{r4, pc}
 8018d76:	bf00      	nop
 8018d78:	0801908d 	.word	0x0801908d
 8018d7c:	080190af 	.word	0x080190af
 8018d80:	080190e7 	.word	0x080190e7
 8018d84:	0801910b 	.word	0x0801910b

08018d88 <_cleanup_r>:
 8018d88:	4901      	ldr	r1, [pc, #4]	; (8018d90 <_cleanup_r+0x8>)
 8018d8a:	f000 b8af 	b.w	8018eec <_fwalk_reent>
 8018d8e:	bf00      	nop
 8018d90:	08018cc9 	.word	0x08018cc9

08018d94 <__sfmoreglue>:
 8018d94:	b570      	push	{r4, r5, r6, lr}
 8018d96:	2268      	movs	r2, #104	; 0x68
 8018d98:	1e4d      	subs	r5, r1, #1
 8018d9a:	4355      	muls	r5, r2
 8018d9c:	460e      	mov	r6, r1
 8018d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018da2:	f7fd fb33 	bl	801640c <_malloc_r>
 8018da6:	4604      	mov	r4, r0
 8018da8:	b140      	cbz	r0, 8018dbc <__sfmoreglue+0x28>
 8018daa:	2100      	movs	r1, #0
 8018dac:	e9c0 1600 	strd	r1, r6, [r0]
 8018db0:	300c      	adds	r0, #12
 8018db2:	60a0      	str	r0, [r4, #8]
 8018db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018db8:	f7fd fab4 	bl	8016324 <memset>
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	bd70      	pop	{r4, r5, r6, pc}

08018dc0 <__sfp_lock_acquire>:
 8018dc0:	4801      	ldr	r0, [pc, #4]	; (8018dc8 <__sfp_lock_acquire+0x8>)
 8018dc2:	f7ff bc6e 	b.w	80186a2 <__retarget_lock_acquire_recursive>
 8018dc6:	bf00      	nop
 8018dc8:	20003069 	.word	0x20003069

08018dcc <__sfp_lock_release>:
 8018dcc:	4801      	ldr	r0, [pc, #4]	; (8018dd4 <__sfp_lock_release+0x8>)
 8018dce:	f7ff bc69 	b.w	80186a4 <__retarget_lock_release_recursive>
 8018dd2:	bf00      	nop
 8018dd4:	20003069 	.word	0x20003069

08018dd8 <__sinit_lock_acquire>:
 8018dd8:	4801      	ldr	r0, [pc, #4]	; (8018de0 <__sinit_lock_acquire+0x8>)
 8018dda:	f7ff bc62 	b.w	80186a2 <__retarget_lock_acquire_recursive>
 8018dde:	bf00      	nop
 8018de0:	2000306a 	.word	0x2000306a

08018de4 <__sinit_lock_release>:
 8018de4:	4801      	ldr	r0, [pc, #4]	; (8018dec <__sinit_lock_release+0x8>)
 8018de6:	f7ff bc5d 	b.w	80186a4 <__retarget_lock_release_recursive>
 8018dea:	bf00      	nop
 8018dec:	2000306a 	.word	0x2000306a

08018df0 <__sinit>:
 8018df0:	b510      	push	{r4, lr}
 8018df2:	4604      	mov	r4, r0
 8018df4:	f7ff fff0 	bl	8018dd8 <__sinit_lock_acquire>
 8018df8:	69a3      	ldr	r3, [r4, #24]
 8018dfa:	b11b      	cbz	r3, 8018e04 <__sinit+0x14>
 8018dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e00:	f7ff bff0 	b.w	8018de4 <__sinit_lock_release>
 8018e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018e08:	6523      	str	r3, [r4, #80]	; 0x50
 8018e0a:	4b13      	ldr	r3, [pc, #76]	; (8018e58 <__sinit+0x68>)
 8018e0c:	4a13      	ldr	r2, [pc, #76]	; (8018e5c <__sinit+0x6c>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8018e12:	42a3      	cmp	r3, r4
 8018e14:	bf04      	itt	eq
 8018e16:	2301      	moveq	r3, #1
 8018e18:	61a3      	streq	r3, [r4, #24]
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f000 f820 	bl	8018e60 <__sfp>
 8018e20:	6060      	str	r0, [r4, #4]
 8018e22:	4620      	mov	r0, r4
 8018e24:	f000 f81c 	bl	8018e60 <__sfp>
 8018e28:	60a0      	str	r0, [r4, #8]
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f000 f818 	bl	8018e60 <__sfp>
 8018e30:	2200      	movs	r2, #0
 8018e32:	60e0      	str	r0, [r4, #12]
 8018e34:	2104      	movs	r1, #4
 8018e36:	6860      	ldr	r0, [r4, #4]
 8018e38:	f7ff ff82 	bl	8018d40 <std>
 8018e3c:	68a0      	ldr	r0, [r4, #8]
 8018e3e:	2201      	movs	r2, #1
 8018e40:	2109      	movs	r1, #9
 8018e42:	f7ff ff7d 	bl	8018d40 <std>
 8018e46:	68e0      	ldr	r0, [r4, #12]
 8018e48:	2202      	movs	r2, #2
 8018e4a:	2112      	movs	r1, #18
 8018e4c:	f7ff ff78 	bl	8018d40 <std>
 8018e50:	2301      	movs	r3, #1
 8018e52:	61a3      	str	r3, [r4, #24]
 8018e54:	e7d2      	b.n	8018dfc <__sinit+0xc>
 8018e56:	bf00      	nop
 8018e58:	08019a30 	.word	0x08019a30
 8018e5c:	08018d89 	.word	0x08018d89

08018e60 <__sfp>:
 8018e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e62:	4607      	mov	r7, r0
 8018e64:	f7ff ffac 	bl	8018dc0 <__sfp_lock_acquire>
 8018e68:	4b1e      	ldr	r3, [pc, #120]	; (8018ee4 <__sfp+0x84>)
 8018e6a:	681e      	ldr	r6, [r3, #0]
 8018e6c:	69b3      	ldr	r3, [r6, #24]
 8018e6e:	b913      	cbnz	r3, 8018e76 <__sfp+0x16>
 8018e70:	4630      	mov	r0, r6
 8018e72:	f7ff ffbd 	bl	8018df0 <__sinit>
 8018e76:	3648      	adds	r6, #72	; 0x48
 8018e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018e7c:	3b01      	subs	r3, #1
 8018e7e:	d503      	bpl.n	8018e88 <__sfp+0x28>
 8018e80:	6833      	ldr	r3, [r6, #0]
 8018e82:	b30b      	cbz	r3, 8018ec8 <__sfp+0x68>
 8018e84:	6836      	ldr	r6, [r6, #0]
 8018e86:	e7f7      	b.n	8018e78 <__sfp+0x18>
 8018e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018e8c:	b9d5      	cbnz	r5, 8018ec4 <__sfp+0x64>
 8018e8e:	4b16      	ldr	r3, [pc, #88]	; (8018ee8 <__sfp+0x88>)
 8018e90:	60e3      	str	r3, [r4, #12]
 8018e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018e96:	6665      	str	r5, [r4, #100]	; 0x64
 8018e98:	f7ff fc02 	bl	80186a0 <__retarget_lock_init_recursive>
 8018e9c:	f7ff ff96 	bl	8018dcc <__sfp_lock_release>
 8018ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018ea8:	6025      	str	r5, [r4, #0]
 8018eaa:	61a5      	str	r5, [r4, #24]
 8018eac:	2208      	movs	r2, #8
 8018eae:	4629      	mov	r1, r5
 8018eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018eb4:	f7fd fa36 	bl	8016324 <memset>
 8018eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ec4:	3468      	adds	r4, #104	; 0x68
 8018ec6:	e7d9      	b.n	8018e7c <__sfp+0x1c>
 8018ec8:	2104      	movs	r1, #4
 8018eca:	4638      	mov	r0, r7
 8018ecc:	f7ff ff62 	bl	8018d94 <__sfmoreglue>
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	6030      	str	r0, [r6, #0]
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	d1d5      	bne.n	8018e84 <__sfp+0x24>
 8018ed8:	f7ff ff78 	bl	8018dcc <__sfp_lock_release>
 8018edc:	230c      	movs	r3, #12
 8018ede:	603b      	str	r3, [r7, #0]
 8018ee0:	e7ee      	b.n	8018ec0 <__sfp+0x60>
 8018ee2:	bf00      	nop
 8018ee4:	08019a30 	.word	0x08019a30
 8018ee8:	ffff0001 	.word	0xffff0001

08018eec <_fwalk_reent>:
 8018eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ef0:	4606      	mov	r6, r0
 8018ef2:	4688      	mov	r8, r1
 8018ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018ef8:	2700      	movs	r7, #0
 8018efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018efe:	f1b9 0901 	subs.w	r9, r9, #1
 8018f02:	d505      	bpl.n	8018f10 <_fwalk_reent+0x24>
 8018f04:	6824      	ldr	r4, [r4, #0]
 8018f06:	2c00      	cmp	r4, #0
 8018f08:	d1f7      	bne.n	8018efa <_fwalk_reent+0xe>
 8018f0a:	4638      	mov	r0, r7
 8018f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f10:	89ab      	ldrh	r3, [r5, #12]
 8018f12:	2b01      	cmp	r3, #1
 8018f14:	d907      	bls.n	8018f26 <_fwalk_reent+0x3a>
 8018f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f1a:	3301      	adds	r3, #1
 8018f1c:	d003      	beq.n	8018f26 <_fwalk_reent+0x3a>
 8018f1e:	4629      	mov	r1, r5
 8018f20:	4630      	mov	r0, r6
 8018f22:	47c0      	blx	r8
 8018f24:	4307      	orrs	r7, r0
 8018f26:	3568      	adds	r5, #104	; 0x68
 8018f28:	e7e9      	b.n	8018efe <_fwalk_reent+0x12>

08018f2a <__swhatbuf_r>:
 8018f2a:	b570      	push	{r4, r5, r6, lr}
 8018f2c:	460e      	mov	r6, r1
 8018f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f32:	2900      	cmp	r1, #0
 8018f34:	b096      	sub	sp, #88	; 0x58
 8018f36:	4614      	mov	r4, r2
 8018f38:	461d      	mov	r5, r3
 8018f3a:	da08      	bge.n	8018f4e <__swhatbuf_r+0x24>
 8018f3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018f40:	2200      	movs	r2, #0
 8018f42:	602a      	str	r2, [r5, #0]
 8018f44:	061a      	lsls	r2, r3, #24
 8018f46:	d410      	bmi.n	8018f6a <__swhatbuf_r+0x40>
 8018f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f4c:	e00e      	b.n	8018f6c <__swhatbuf_r+0x42>
 8018f4e:	466a      	mov	r2, sp
 8018f50:	f000 f902 	bl	8019158 <_fstat_r>
 8018f54:	2800      	cmp	r0, #0
 8018f56:	dbf1      	blt.n	8018f3c <__swhatbuf_r+0x12>
 8018f58:	9a01      	ldr	r2, [sp, #4]
 8018f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018f62:	425a      	negs	r2, r3
 8018f64:	415a      	adcs	r2, r3
 8018f66:	602a      	str	r2, [r5, #0]
 8018f68:	e7ee      	b.n	8018f48 <__swhatbuf_r+0x1e>
 8018f6a:	2340      	movs	r3, #64	; 0x40
 8018f6c:	2000      	movs	r0, #0
 8018f6e:	6023      	str	r3, [r4, #0]
 8018f70:	b016      	add	sp, #88	; 0x58
 8018f72:	bd70      	pop	{r4, r5, r6, pc}

08018f74 <__smakebuf_r>:
 8018f74:	898b      	ldrh	r3, [r1, #12]
 8018f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f78:	079d      	lsls	r5, r3, #30
 8018f7a:	4606      	mov	r6, r0
 8018f7c:	460c      	mov	r4, r1
 8018f7e:	d507      	bpl.n	8018f90 <__smakebuf_r+0x1c>
 8018f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f84:	6023      	str	r3, [r4, #0]
 8018f86:	6123      	str	r3, [r4, #16]
 8018f88:	2301      	movs	r3, #1
 8018f8a:	6163      	str	r3, [r4, #20]
 8018f8c:	b002      	add	sp, #8
 8018f8e:	bd70      	pop	{r4, r5, r6, pc}
 8018f90:	ab01      	add	r3, sp, #4
 8018f92:	466a      	mov	r2, sp
 8018f94:	f7ff ffc9 	bl	8018f2a <__swhatbuf_r>
 8018f98:	9900      	ldr	r1, [sp, #0]
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	f7fd fa35 	bl	801640c <_malloc_r>
 8018fa2:	b948      	cbnz	r0, 8018fb8 <__smakebuf_r+0x44>
 8018fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fa8:	059a      	lsls	r2, r3, #22
 8018faa:	d4ef      	bmi.n	8018f8c <__smakebuf_r+0x18>
 8018fac:	f023 0303 	bic.w	r3, r3, #3
 8018fb0:	f043 0302 	orr.w	r3, r3, #2
 8018fb4:	81a3      	strh	r3, [r4, #12]
 8018fb6:	e7e3      	b.n	8018f80 <__smakebuf_r+0xc>
 8018fb8:	4b0d      	ldr	r3, [pc, #52]	; (8018ff0 <__smakebuf_r+0x7c>)
 8018fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8018fbc:	89a3      	ldrh	r3, [r4, #12]
 8018fbe:	6020      	str	r0, [r4, #0]
 8018fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fc4:	81a3      	strh	r3, [r4, #12]
 8018fc6:	9b00      	ldr	r3, [sp, #0]
 8018fc8:	6163      	str	r3, [r4, #20]
 8018fca:	9b01      	ldr	r3, [sp, #4]
 8018fcc:	6120      	str	r0, [r4, #16]
 8018fce:	b15b      	cbz	r3, 8018fe8 <__smakebuf_r+0x74>
 8018fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	f000 f8d1 	bl	801917c <_isatty_r>
 8018fda:	b128      	cbz	r0, 8018fe8 <__smakebuf_r+0x74>
 8018fdc:	89a3      	ldrh	r3, [r4, #12]
 8018fde:	f023 0303 	bic.w	r3, r3, #3
 8018fe2:	f043 0301 	orr.w	r3, r3, #1
 8018fe6:	81a3      	strh	r3, [r4, #12]
 8018fe8:	89a0      	ldrh	r0, [r4, #12]
 8018fea:	4305      	orrs	r5, r0
 8018fec:	81a5      	strh	r5, [r4, #12]
 8018fee:	e7cd      	b.n	8018f8c <__smakebuf_r+0x18>
 8018ff0:	08018d89 	.word	0x08018d89

08018ff4 <_malloc_usable_size_r>:
 8018ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ff8:	1f18      	subs	r0, r3, #4
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	bfbc      	itt	lt
 8018ffe:	580b      	ldrlt	r3, [r1, r0]
 8019000:	18c0      	addlt	r0, r0, r3
 8019002:	4770      	bx	lr

08019004 <_raise_r>:
 8019004:	291f      	cmp	r1, #31
 8019006:	b538      	push	{r3, r4, r5, lr}
 8019008:	4604      	mov	r4, r0
 801900a:	460d      	mov	r5, r1
 801900c:	d904      	bls.n	8019018 <_raise_r+0x14>
 801900e:	2316      	movs	r3, #22
 8019010:	6003      	str	r3, [r0, #0]
 8019012:	f04f 30ff 	mov.w	r0, #4294967295
 8019016:	bd38      	pop	{r3, r4, r5, pc}
 8019018:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801901a:	b112      	cbz	r2, 8019022 <_raise_r+0x1e>
 801901c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019020:	b94b      	cbnz	r3, 8019036 <_raise_r+0x32>
 8019022:	4620      	mov	r0, r4
 8019024:	f000 f830 	bl	8019088 <_getpid_r>
 8019028:	462a      	mov	r2, r5
 801902a:	4601      	mov	r1, r0
 801902c:	4620      	mov	r0, r4
 801902e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019032:	f000 b817 	b.w	8019064 <_kill_r>
 8019036:	2b01      	cmp	r3, #1
 8019038:	d00a      	beq.n	8019050 <_raise_r+0x4c>
 801903a:	1c59      	adds	r1, r3, #1
 801903c:	d103      	bne.n	8019046 <_raise_r+0x42>
 801903e:	2316      	movs	r3, #22
 8019040:	6003      	str	r3, [r0, #0]
 8019042:	2001      	movs	r0, #1
 8019044:	e7e7      	b.n	8019016 <_raise_r+0x12>
 8019046:	2400      	movs	r4, #0
 8019048:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801904c:	4628      	mov	r0, r5
 801904e:	4798      	blx	r3
 8019050:	2000      	movs	r0, #0
 8019052:	e7e0      	b.n	8019016 <_raise_r+0x12>

08019054 <raise>:
 8019054:	4b02      	ldr	r3, [pc, #8]	; (8019060 <raise+0xc>)
 8019056:	4601      	mov	r1, r0
 8019058:	6818      	ldr	r0, [r3, #0]
 801905a:	f7ff bfd3 	b.w	8019004 <_raise_r>
 801905e:	bf00      	nop
 8019060:	2000012c 	.word	0x2000012c

08019064 <_kill_r>:
 8019064:	b538      	push	{r3, r4, r5, lr}
 8019066:	4d07      	ldr	r5, [pc, #28]	; (8019084 <_kill_r+0x20>)
 8019068:	2300      	movs	r3, #0
 801906a:	4604      	mov	r4, r0
 801906c:	4608      	mov	r0, r1
 801906e:	4611      	mov	r1, r2
 8019070:	602b      	str	r3, [r5, #0]
 8019072:	f7ea f807 	bl	8003084 <_kill>
 8019076:	1c43      	adds	r3, r0, #1
 8019078:	d102      	bne.n	8019080 <_kill_r+0x1c>
 801907a:	682b      	ldr	r3, [r5, #0]
 801907c:	b103      	cbz	r3, 8019080 <_kill_r+0x1c>
 801907e:	6023      	str	r3, [r4, #0]
 8019080:	bd38      	pop	{r3, r4, r5, pc}
 8019082:	bf00      	nop
 8019084:	20003064 	.word	0x20003064

08019088 <_getpid_r>:
 8019088:	f7e9 bff4 	b.w	8003074 <_getpid>

0801908c <__sread>:
 801908c:	b510      	push	{r4, lr}
 801908e:	460c      	mov	r4, r1
 8019090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019094:	f000 f894 	bl	80191c0 <_read_r>
 8019098:	2800      	cmp	r0, #0
 801909a:	bfab      	itete	ge
 801909c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801909e:	89a3      	ldrhlt	r3, [r4, #12]
 80190a0:	181b      	addge	r3, r3, r0
 80190a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80190a6:	bfac      	ite	ge
 80190a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80190aa:	81a3      	strhlt	r3, [r4, #12]
 80190ac:	bd10      	pop	{r4, pc}

080190ae <__swrite>:
 80190ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190b2:	461f      	mov	r7, r3
 80190b4:	898b      	ldrh	r3, [r1, #12]
 80190b6:	05db      	lsls	r3, r3, #23
 80190b8:	4605      	mov	r5, r0
 80190ba:	460c      	mov	r4, r1
 80190bc:	4616      	mov	r6, r2
 80190be:	d505      	bpl.n	80190cc <__swrite+0x1e>
 80190c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c4:	2302      	movs	r3, #2
 80190c6:	2200      	movs	r2, #0
 80190c8:	f000 f868 	bl	801919c <_lseek_r>
 80190cc:	89a3      	ldrh	r3, [r4, #12]
 80190ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80190d6:	81a3      	strh	r3, [r4, #12]
 80190d8:	4632      	mov	r2, r6
 80190da:	463b      	mov	r3, r7
 80190dc:	4628      	mov	r0, r5
 80190de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190e2:	f000 b817 	b.w	8019114 <_write_r>

080190e6 <__sseek>:
 80190e6:	b510      	push	{r4, lr}
 80190e8:	460c      	mov	r4, r1
 80190ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190ee:	f000 f855 	bl	801919c <_lseek_r>
 80190f2:	1c43      	adds	r3, r0, #1
 80190f4:	89a3      	ldrh	r3, [r4, #12]
 80190f6:	bf15      	itete	ne
 80190f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80190fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80190fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019102:	81a3      	strheq	r3, [r4, #12]
 8019104:	bf18      	it	ne
 8019106:	81a3      	strhne	r3, [r4, #12]
 8019108:	bd10      	pop	{r4, pc}

0801910a <__sclose>:
 801910a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801910e:	f000 b813 	b.w	8019138 <_close_r>
	...

08019114 <_write_r>:
 8019114:	b538      	push	{r3, r4, r5, lr}
 8019116:	4d07      	ldr	r5, [pc, #28]	; (8019134 <_write_r+0x20>)
 8019118:	4604      	mov	r4, r0
 801911a:	4608      	mov	r0, r1
 801911c:	4611      	mov	r1, r2
 801911e:	2200      	movs	r2, #0
 8019120:	602a      	str	r2, [r5, #0]
 8019122:	461a      	mov	r2, r3
 8019124:	f7e9 ffe5 	bl	80030f2 <_write>
 8019128:	1c43      	adds	r3, r0, #1
 801912a:	d102      	bne.n	8019132 <_write_r+0x1e>
 801912c:	682b      	ldr	r3, [r5, #0]
 801912e:	b103      	cbz	r3, 8019132 <_write_r+0x1e>
 8019130:	6023      	str	r3, [r4, #0]
 8019132:	bd38      	pop	{r3, r4, r5, pc}
 8019134:	20003064 	.word	0x20003064

08019138 <_close_r>:
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	4d06      	ldr	r5, [pc, #24]	; (8019154 <_close_r+0x1c>)
 801913c:	2300      	movs	r3, #0
 801913e:	4604      	mov	r4, r0
 8019140:	4608      	mov	r0, r1
 8019142:	602b      	str	r3, [r5, #0]
 8019144:	f7e9 fff1 	bl	800312a <_close>
 8019148:	1c43      	adds	r3, r0, #1
 801914a:	d102      	bne.n	8019152 <_close_r+0x1a>
 801914c:	682b      	ldr	r3, [r5, #0]
 801914e:	b103      	cbz	r3, 8019152 <_close_r+0x1a>
 8019150:	6023      	str	r3, [r4, #0]
 8019152:	bd38      	pop	{r3, r4, r5, pc}
 8019154:	20003064 	.word	0x20003064

08019158 <_fstat_r>:
 8019158:	b538      	push	{r3, r4, r5, lr}
 801915a:	4d07      	ldr	r5, [pc, #28]	; (8019178 <_fstat_r+0x20>)
 801915c:	2300      	movs	r3, #0
 801915e:	4604      	mov	r4, r0
 8019160:	4608      	mov	r0, r1
 8019162:	4611      	mov	r1, r2
 8019164:	602b      	str	r3, [r5, #0]
 8019166:	f7e9 ffec 	bl	8003142 <_fstat>
 801916a:	1c43      	adds	r3, r0, #1
 801916c:	d102      	bne.n	8019174 <_fstat_r+0x1c>
 801916e:	682b      	ldr	r3, [r5, #0]
 8019170:	b103      	cbz	r3, 8019174 <_fstat_r+0x1c>
 8019172:	6023      	str	r3, [r4, #0]
 8019174:	bd38      	pop	{r3, r4, r5, pc}
 8019176:	bf00      	nop
 8019178:	20003064 	.word	0x20003064

0801917c <_isatty_r>:
 801917c:	b538      	push	{r3, r4, r5, lr}
 801917e:	4d06      	ldr	r5, [pc, #24]	; (8019198 <_isatty_r+0x1c>)
 8019180:	2300      	movs	r3, #0
 8019182:	4604      	mov	r4, r0
 8019184:	4608      	mov	r0, r1
 8019186:	602b      	str	r3, [r5, #0]
 8019188:	f7e9 ffeb 	bl	8003162 <_isatty>
 801918c:	1c43      	adds	r3, r0, #1
 801918e:	d102      	bne.n	8019196 <_isatty_r+0x1a>
 8019190:	682b      	ldr	r3, [r5, #0]
 8019192:	b103      	cbz	r3, 8019196 <_isatty_r+0x1a>
 8019194:	6023      	str	r3, [r4, #0]
 8019196:	bd38      	pop	{r3, r4, r5, pc}
 8019198:	20003064 	.word	0x20003064

0801919c <_lseek_r>:
 801919c:	b538      	push	{r3, r4, r5, lr}
 801919e:	4d07      	ldr	r5, [pc, #28]	; (80191bc <_lseek_r+0x20>)
 80191a0:	4604      	mov	r4, r0
 80191a2:	4608      	mov	r0, r1
 80191a4:	4611      	mov	r1, r2
 80191a6:	2200      	movs	r2, #0
 80191a8:	602a      	str	r2, [r5, #0]
 80191aa:	461a      	mov	r2, r3
 80191ac:	f7e9 ffe4 	bl	8003178 <_lseek>
 80191b0:	1c43      	adds	r3, r0, #1
 80191b2:	d102      	bne.n	80191ba <_lseek_r+0x1e>
 80191b4:	682b      	ldr	r3, [r5, #0]
 80191b6:	b103      	cbz	r3, 80191ba <_lseek_r+0x1e>
 80191b8:	6023      	str	r3, [r4, #0]
 80191ba:	bd38      	pop	{r3, r4, r5, pc}
 80191bc:	20003064 	.word	0x20003064

080191c0 <_read_r>:
 80191c0:	b538      	push	{r3, r4, r5, lr}
 80191c2:	4d07      	ldr	r5, [pc, #28]	; (80191e0 <_read_r+0x20>)
 80191c4:	4604      	mov	r4, r0
 80191c6:	4608      	mov	r0, r1
 80191c8:	4611      	mov	r1, r2
 80191ca:	2200      	movs	r2, #0
 80191cc:	602a      	str	r2, [r5, #0]
 80191ce:	461a      	mov	r2, r3
 80191d0:	f7e9 ff72 	bl	80030b8 <_read>
 80191d4:	1c43      	adds	r3, r0, #1
 80191d6:	d102      	bne.n	80191de <_read_r+0x1e>
 80191d8:	682b      	ldr	r3, [r5, #0]
 80191da:	b103      	cbz	r3, 80191de <_read_r+0x1e>
 80191dc:	6023      	str	r3, [r4, #0]
 80191de:	bd38      	pop	{r3, r4, r5, pc}
 80191e0:	20003064 	.word	0x20003064

080191e4 <_init>:
 80191e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191e6:	bf00      	nop
 80191e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191ea:	bc08      	pop	{r3}
 80191ec:	469e      	mov	lr, r3
 80191ee:	4770      	bx	lr

080191f0 <_fini>:
 80191f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191f2:	bf00      	nop
 80191f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191f6:	bc08      	pop	{r3}
 80191f8:	469e      	mov	lr, r3
 80191fa:	4770      	bx	lr
